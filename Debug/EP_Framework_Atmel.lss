
EP_Framework_Atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00004284  00004318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000155  0080012e  0080012e  00004346  2**0
                  ALLOC
  3 .stab         0000624c  00000000  00000000  00004348  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000204b  00000000  00000000  0000a594  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000c5df  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000c5f0  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__vector_8>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__vector_23>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__vector_32>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__vector_34>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 e8       	ldi	r30, 0x84	; 132
      a8:	f2 e4       	ldi	r31, 0x42	; 66
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 32       	cpi	r26, 0x2E	; 46
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	ae e2       	ldi	r26, 0x2E	; 46
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a3 38       	cpi	r26, 0x83	; 131
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 2c 1c 	call	0x3858	; 0x3858 <main>
      ce:	0c 94 40 21 	jmp	0x4280	; 0x4280 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <send_arduino>:
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	00 d0       	rcall	.+0      	; 0xdc <send_arduino+0x6>
      dc:	1f 92       	push	r1
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	89 83       	std	Y+1, r24	; 0x01
      e4:	6a 83       	std	Y+2, r22	; 0x02
      e6:	4b 83       	std	Y+3, r20	; 0x03
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	0e 94 cb 18 	call	0x3196	; 0x3196 <UART1_Write>
      ee:	8a 81       	ldd	r24, Y+2	; 0x02
      f0:	0e 94 cb 18 	call	0x3196	; 0x3196 <UART1_Write>
      f4:	8b 81       	ldd	r24, Y+3	; 0x03
      f6:	0e 94 cb 18 	call	0x3196	; 0x3196 <UART1_Write>
      fa:	88 e5       	ldi	r24, 0x58	; 88
      fc:	0e 94 cb 18 	call	0x3196	; 0x3196 <UART1_Write>
     100:	0f 90       	pop	r0
     102:	0f 90       	pop	r0
     104:	0f 90       	pop	r0
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <get_arduino>:
 * 	Function: 	 unsigned char get_arduino(unsigned char type, unsigned char id)
 * 	Description: Gets status of the device
 * 	Parameters:	 unsigned char type - the type of device ('R', 'M', 'S')
 * 				 unsigned char id   - the id of the device 1-x
 */
unsigned char get_arduino(unsigned char type, unsigned char id) {
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	00 d0       	rcall	.+0      	; 0x112 <get_arduino+0x6>
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	89 83       	std	Y+1, r24	; 0x01
     118:	6a 83       	std	Y+2, r22	; 0x02

	send_arduino('G',type,(unsigned char)id);	// send the "get data protocol"
     11a:	4a 81       	ldd	r20, Y+2	; 0x02
     11c:	69 81       	ldd	r22, Y+1	; 0x01
     11e:	87 e4       	ldi	r24, 0x47	; 71
     120:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_arduino>
	UART1_Read();								// read (because it is sending 2x)
     124:	0e 94 19 19 	call	0x3232	; 0x3232 <UART1_Read>

	return UART1_Read();						// return the read
     128:	0e 94 19 19 	call	0x3232	; 0x3232 <UART1_Read>

}
     12c:	0f 90       	pop	r0
     12e:	0f 90       	pop	r0
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	08 95       	ret

00000136 <servo_move>:
 * 	Function: 	 void servo_move(unsigned char id, unsigned char data);
 * 	Description: Sending the angle of the id of the servo
 * 	Parameters:  unsigned char id   - the id of the servo
 * 				 unsigned char data - the angle of the servo
 */
void servo_move(unsigned char id, unsigned char data) { send_arduino('S', id, data); }
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	00 d0       	rcall	.+0      	; 0x13c <servo_move+0x6>
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
     140:	89 83       	std	Y+1, r24	; 0x01
     142:	6a 83       	std	Y+2, r22	; 0x02
     144:	4a 81       	ldd	r20, Y+2	; 0x02
     146:	69 81       	ldd	r22, Y+1	; 0x01
     148:	83 e5       	ldi	r24, 0x53	; 83
     14a:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_arduino>
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <ping_actuator>:

/*
 * 	Function: 	 void ping_actuator()
 * 	Description: this will ping the actuator and it will run until ping is good
 */
void ping_actuator() {
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62

	do {

		UART1_Write('P');
     160:	80 e5       	ldi	r24, 0x50	; 80
     162:	0e 94 cb 18 	call	0x3196	; 0x3196 <UART1_Write>
		UART1_Write(0);
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	0e 94 cb 18 	call	0x3196	; 0x3196 <UART1_Write>
		UART1_Write(0);
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	0e 94 cb 18 	call	0x3196	; 0x3196 <UART1_Write>
		UART1_Write('X');
     172:	88 e5       	ldi	r24, 0x58	; 88
     174:	0e 94 cb 18 	call	0x3196	; 0x3196 <UART1_Write>

	} while(UART1_Read() != 1);
     178:	0e 94 19 19 	call	0x3232	; 0x3232 <UART1_Read>
     17c:	81 30       	cpi	r24, 0x01	; 1
     17e:	81 f7       	brne	.-32     	; 0x160 <ping_actuator+0x8>
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <AX_UART_Init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "ax.h"

void AX_UART_Init(void)
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	2e 97       	sbiw	r28, 0x0e	; 14
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	f8 94       	cli
     194:	de bf       	out	0x3e, r29	; 62
     196:	0f be       	out	0x3f, r0	; 63
     198:	cd bf       	out	0x3d, r28	; 61
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRD &= ~((1 << 2) | (1 << 3));
     19a:	8a e2       	ldi	r24, 0x2A	; 42
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	2a e2       	ldi	r18, 0x2A	; 42
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	f9 01       	movw	r30, r18
     1a4:	20 81       	ld	r18, Z
     1a6:	23 7f       	andi	r18, 0xF3	; 243
     1a8:	fc 01       	movw	r30, r24
     1aa:	20 83       	st	Z, r18
	//PORTE = 0;
	UCSR1A = 0;
     1ac:	88 ec       	ldi	r24, 0xC8	; 200
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	fc 01       	movw	r30, r24
     1b2:	10 82       	st	Z, r1
	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
     1b4:	89 ec       	ldi	r24, 0xC9	; 201
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	28 e1       	ldi	r18, 0x18	; 24
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
     1be:	8a ec       	ldi	r24, 0xCA	; 202
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	26 e0       	ldi	r18, 0x06	; 6
     1c4:	fc 01       	movw	r30, r24
     1c6:	20 83       	st	Z, r18

	UBRR1H = 0;
     1c8:	8d ec       	ldi	r24, 0xCD	; 205
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	fc 01       	movw	r30, r24
     1ce:	10 82       	st	Z, r1
	UBRR1L = 5;
     1d0:	8c ec       	ldi	r24, 0xCC	; 204
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	25 e0       	ldi	r18, 0x05	; 5
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 83       	st	Z, r18
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	a8 ec       	ldi	r26, 0xC8	; 200
     1e0:	b2 e4       	ldi	r27, 0x42	; 66
     1e2:	89 83       	std	Y+1, r24	; 0x01
     1e4:	9a 83       	std	Y+2, r25	; 0x02
     1e6:	ab 83       	std	Y+3, r26	; 0x03
     1e8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	30 e4       	ldi	r19, 0x40	; 64
     1ee:	4c e1       	ldi	r20, 0x1C	; 28
     1f0:	55 e4       	ldi	r21, 0x45	; 69
     1f2:	69 81       	ldd	r22, Y+1	; 0x01
     1f4:	7a 81       	ldd	r23, Y+2	; 0x02
     1f6:	8b 81       	ldd	r24, Y+3	; 0x03
     1f8:	9c 81       	ldd	r25, Y+4	; 0x04
     1fa:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
     1fe:	dc 01       	movw	r26, r24
     200:	cb 01       	movw	r24, r22
     202:	8d 83       	std	Y+5, r24	; 0x05
     204:	9e 83       	std	Y+6, r25	; 0x06
     206:	af 83       	std	Y+7, r26	; 0x07
     208:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	40 e8       	ldi	r20, 0x80	; 128
     210:	5f e3       	ldi	r21, 0x3F	; 63
     212:	6d 81       	ldd	r22, Y+5	; 0x05
     214:	7e 81       	ldd	r23, Y+6	; 0x06
     216:	8f 81       	ldd	r24, Y+7	; 0x07
     218:	98 85       	ldd	r25, Y+8	; 0x08
     21a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
     21e:	88 23       	and	r24, r24
     220:	2c f4       	brge	.+10     	; 0x22c <AX_UART_Init+0xa6>
		__ticks = 1;
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	9a 87       	std	Y+10, r25	; 0x0a
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	3f c0       	rjmp	.+126    	; 0x2aa <AX_UART_Init+0x124>
	else if (__tmp > 65535)
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	3f ef       	ldi	r19, 0xFF	; 255
     230:	4f e7       	ldi	r20, 0x7F	; 127
     232:	57 e4       	ldi	r21, 0x47	; 71
     234:	6d 81       	ldd	r22, Y+5	; 0x05
     236:	7e 81       	ldd	r23, Y+6	; 0x06
     238:	8f 81       	ldd	r24, Y+7	; 0x07
     23a:	98 85       	ldd	r25, Y+8	; 0x08
     23c:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
     240:	18 16       	cp	r1, r24
     242:	4c f5       	brge	.+82     	; 0x296 <AX_UART_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	40 e2       	ldi	r20, 0x20	; 32
     24a:	51 e4       	ldi	r21, 0x41	; 65
     24c:	69 81       	ldd	r22, Y+1	; 0x01
     24e:	7a 81       	ldd	r23, Y+2	; 0x02
     250:	8b 81       	ldd	r24, Y+3	; 0x03
     252:	9c 81       	ldd	r25, Y+4	; 0x04
     254:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
     258:	dc 01       	movw	r26, r24
     25a:	cb 01       	movw	r24, r22
     25c:	bc 01       	movw	r22, r24
     25e:	cd 01       	movw	r24, r26
     260:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     264:	dc 01       	movw	r26, r24
     266:	cb 01       	movw	r24, r22
     268:	9a 87       	std	Y+10, r25	; 0x0a
     26a:	89 87       	std	Y+9, r24	; 0x09
     26c:	0f c0       	rjmp	.+30     	; 0x28c <AX_UART_Init+0x106>
     26e:	8a ef       	ldi	r24, 0xFA	; 250
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	9c 87       	std	Y+12, r25	; 0x0c
     274:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     276:	8b 85       	ldd	r24, Y+11	; 0x0b
     278:	9c 85       	ldd	r25, Y+12	; 0x0c
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <AX_UART_Init+0xf4>
     27e:	9c 87       	std	Y+12, r25	; 0x0c
     280:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     282:	89 85       	ldd	r24, Y+9	; 0x09
     284:	9a 85       	ldd	r25, Y+10	; 0x0a
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	9a 87       	std	Y+10, r25	; 0x0a
     28a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     28c:	89 85       	ldd	r24, Y+9	; 0x09
     28e:	9a 85       	ldd	r25, Y+10	; 0x0a
     290:	89 2b       	or	r24, r25
     292:	69 f7       	brne	.-38     	; 0x26e <AX_UART_Init+0xe8>
     294:	14 c0       	rjmp	.+40     	; 0x2be <AX_UART_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     296:	6d 81       	ldd	r22, Y+5	; 0x05
     298:	7e 81       	ldd	r23, Y+6	; 0x06
     29a:	8f 81       	ldd	r24, Y+7	; 0x07
     29c:	98 85       	ldd	r25, Y+8	; 0x08
     29e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     2a2:	dc 01       	movw	r26, r24
     2a4:	cb 01       	movw	r24, r22
     2a6:	9a 87       	std	Y+10, r25	; 0x0a
     2a8:	89 87       	std	Y+9, r24	; 0x09
     2aa:	89 85       	ldd	r24, Y+9	; 0x09
     2ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ae:	9e 87       	std	Y+14, r25	; 0x0e
     2b0:	8d 87       	std	Y+13, r24	; 0x0d
     2b2:	8d 85       	ldd	r24, Y+13	; 0x0d
     2b4:	9e 85       	ldd	r25, Y+14	; 0x0e
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <AX_UART_Init+0x130>
     2ba:	9e 87       	std	Y+14, r25	; 0x0e
     2bc:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);
}
     2be:	2e 96       	adiw	r28, 0x0e	; 14
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	1f 92       	push	r1
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1<<UDRE1)) );
     2dc:	00 00       	nop
     2de:	88 ec       	ldi	r24, 0xC8	; 200
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	fc 01       	movw	r30, r24
     2e4:	80 81       	ld	r24, Z
     2e6:	88 2f       	mov	r24, r24
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	80 72       	andi	r24, 0x20	; 32
     2ec:	99 27       	eor	r25, r25
     2ee:	89 2b       	or	r24, r25
     2f0:	b1 f3       	breq	.-20     	; 0x2de <AX_SendChar+0xe>
	UDR1 = data;
     2f2:	8e ec       	ldi	r24, 0xCE	; 206
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	29 81       	ldd	r18, Y+1	; 0x01
     2f8:	fc 01       	movw	r30, r24
     2fa:	20 83       	st	Z, r18
}
     2fc:	0f 90       	pop	r0
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <AX_ReadChar>:
unsigned char AX_ReadChar(void)
{
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
   //UART1_Write('I');
   while( !( UCSR1A & (1<< RXC1)) );
     30c:	00 00       	nop
     30e:	88 ec       	ldi	r24, 0xC8	; 200
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	fc 01       	movw	r30, r24
     314:	80 81       	ld	r24, Z
     316:	88 23       	and	r24, r24
     318:	d4 f7       	brge	.-12     	; 0x30e <AX_ReadChar+0xa>
   return UDR1;
     31a:	8e ec       	ldi	r24, 0xCE	; 206
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	fc 01       	movw	r30, r24
     320:	80 81       	ld	r24, Z
}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <AX_ReadStatus>:
/*************************************************************************************************************************************************************************************
*															 Funkcije za upravljanje AX-12A servoima                                                                                                                                      *
*************************************************************************************************************************************************************************************/

void AX_ReadStatus(void)
{
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
     330:	27 97       	sbiw	r28, 0x07	; 7
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	de bf       	out	0x3e, r29	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	cd bf       	out	0x3d, r28	; 61
	 unsigned char status[7] = {0,0,0,0,0,0};
     33c:	27 e0       	ldi	r18, 0x07	; 7
     33e:	ce 01       	movw	r24, r28
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	fc 01       	movw	r30, r24
     344:	32 2f       	mov	r19, r18
     346:	11 92       	st	Z+, r1
     348:	3a 95       	dec	r19
     34a:	e9 f7       	brne	.-6      	; 0x346 <AX_ReadStatus+0x1e>

	status[0] = AX_ReadChar();
     34c:	0e 94 82 01 	call	0x304	; 0x304 <AX_ReadChar>
     350:	89 83       	std	Y+1, r24	; 0x01
	status[1] = AX_ReadChar();
     352:	0e 94 82 01 	call	0x304	; 0x304 <AX_ReadChar>
     356:	8a 83       	std	Y+2, r24	; 0x02
	status[2] = AX_ReadChar();
     358:	0e 94 82 01 	call	0x304	; 0x304 <AX_ReadChar>
     35c:	8b 83       	std	Y+3, r24	; 0x03
	status[3] = AX_ReadChar();
     35e:	0e 94 82 01 	call	0x304	; 0x304 <AX_ReadChar>
     362:	8c 83       	std	Y+4, r24	; 0x04
	status[4] = AX_ReadChar();
     364:	0e 94 82 01 	call	0x304	; 0x304 <AX_ReadChar>
     368:	8d 83       	std	Y+5, r24	; 0x05
	status[5] = AX_ReadChar();
     36a:	0e 94 82 01 	call	0x304	; 0x304 <AX_ReadChar>
     36e:	8e 83       	std	Y+6, r24	; 0x06
}
     370:	27 96       	adiw	r28, 0x07	; 7
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	de bf       	out	0x3e, r29	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <AX_StopTransmitter>:

void AX_StopTransmitter(void)
{
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
	while( !(UCSR1A & (1<<TXC1)) );
     38a:	00 00       	nop
     38c:	88 ec       	ldi	r24, 0xC8	; 200
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	fc 01       	movw	r30, r24
     392:	80 81       	ld	r24, Z
     394:	88 2f       	mov	r24, r24
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	80 74       	andi	r24, 0x40	; 64
     39a:	99 27       	eor	r25, r25
     39c:	89 2b       	or	r24, r25
     39e:	b1 f3       	breq	.-20     	; 0x38c <AX_StopTransmitter+0xa>
	UCSR1B &= 0xF7;
     3a0:	89 ec       	ldi	r24, 0xC9	; 201
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	29 ec       	ldi	r18, 0xC9	; 201
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	f9 01       	movw	r30, r18
     3aa:	20 81       	ld	r18, Z
     3ac:	27 7f       	andi	r18, 0xF7	; 247
     3ae:	fc 01       	movw	r30, r24
     3b0:	20 83       	st	Z, r18
	UCSR1A |= 0x40;
     3b2:	88 ec       	ldi	r24, 0xC8	; 200
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	28 ec       	ldi	r18, 0xC8	; 200
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	f9 01       	movw	r30, r18
     3bc:	20 81       	ld	r18, Z
     3be:	20 64       	ori	r18, 0x40	; 64
     3c0:	fc 01       	movw	r30, r24
     3c2:	20 83       	st	Z, r18
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x08;
     3d2:	89 ec       	ldi	r24, 0xC9	; 201
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	29 ec       	ldi	r18, 0xC9	; 201
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	f9 01       	movw	r30, r18
     3dc:	20 81       	ld	r18, Z
     3de:	28 60       	ori	r18, 0x08	; 8
     3e0:	fc 01       	movw	r30, r24
     3e2:	20 83       	st	Z, r18
}
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <AX_StopReceiver>:

void AX_StopReceiver(void)
{
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
	UCSR1B &= 0xEF;
     3f2:	89 ec       	ldi	r24, 0xC9	; 201
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	29 ec       	ldi	r18, 0xC9	; 201
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	f9 01       	movw	r30, r18
     3fc:	20 81       	ld	r18, Z
     3fe:	2f 7e       	andi	r18, 0xEF	; 239
     400:	fc 01       	movw	r30, r24
     402:	20 83       	st	Z, r18
}
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x10;
     412:	89 ec       	ldi	r24, 0xC9	; 201
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	29 ec       	ldi	r18, 0xC9	; 201
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	f9 01       	movw	r30, r18
     41c:	20 81       	ld	r18, Z
     41e:	20 61       	ori	r18, 0x10	; 16
     420:	fc 01       	movw	r30, r24
     422:	20 83       	st	Z, r18
}
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	6a 97       	sbiw	r28, 0x1a	; 26
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
     43e:	9e 8b       	std	Y+22, r25	; 0x16
     440:	8d 8b       	std	Y+21, r24	; 0x15
     442:	78 8f       	std	Y+24, r23	; 0x18
     444:	6f 8b       	std	Y+23, r22	; 0x17
     446:	49 8f       	std	Y+25, r20	; 0x19
     448:	2a 8f       	std	Y+26, r18	; 0x1a
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;

	angle = (unsigned int)(1023 *((double)angle/300.0));
     44a:	8d 89       	ldd	r24, Y+21	; 0x15
     44c:	9e 89       	ldd	r25, Y+22	; 0x16
     44e:	cc 01       	movw	r24, r24
     450:	a0 e0       	ldi	r26, 0x00	; 0
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	bc 01       	movw	r22, r24
     456:	cd 01       	movw	r24, r26
     458:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <__floatunsisf>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	46 e9       	ldi	r20, 0x96	; 150
     466:	53 e4       	ldi	r21, 0x43	; 67
     468:	bc 01       	movw	r22, r24
     46a:	cd 01       	movw	r24, r26
     46c:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <__divsf3>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	30 ec       	ldi	r19, 0xC0	; 192
     478:	4f e7       	ldi	r20, 0x7F	; 127
     47a:	54 e4       	ldi	r21, 0x44	; 68
     47c:	bc 01       	movw	r22, r24
     47e:	cd 01       	movw	r24, r26
     480:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
     484:	dc 01       	movw	r26, r24
     486:	cb 01       	movw	r24, r22
     488:	bc 01       	movw	r22, r24
     48a:	cd 01       	movw	r24, r26
     48c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     490:	dc 01       	movw	r26, r24
     492:	cb 01       	movw	r24, r22
     494:	9e 8b       	std	Y+22, r25	; 0x16
     496:	8d 8b       	std	Y+21, r24	; 0x15

	angle_H = (unsigned char)(angle >> 8);
     498:	8d 89       	ldd	r24, Y+21	; 0x15
     49a:	9e 89       	ldd	r25, Y+22	; 0x16
     49c:	89 2f       	mov	r24, r25
     49e:	99 27       	eor	r25, r25
     4a0:	89 83       	std	Y+1, r24	; 0x01
	angle_L = (unsigned char)(angle & 0x00FF);
     4a2:	8d 89       	ldd	r24, Y+21	; 0x15
     4a4:	8a 83       	std	Y+2, r24	; 0x02

	speed |= (direction << 10);
     4a6:	89 8d       	ldd	r24, Y+25	; 0x19
     4a8:	88 2f       	mov	r24, r24
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	98 2f       	mov	r25, r24
     4ae:	88 27       	eor	r24, r24
     4b0:	99 0f       	add	r25, r25
     4b2:	99 0f       	add	r25, r25
     4b4:	9c 01       	movw	r18, r24
     4b6:	8f 89       	ldd	r24, Y+23	; 0x17
     4b8:	98 8d       	ldd	r25, Y+24	; 0x18
     4ba:	82 2b       	or	r24, r18
     4bc:	93 2b       	or	r25, r19
     4be:	98 8f       	std	Y+24, r25	; 0x18
     4c0:	8f 8b       	std	Y+23, r24	; 0x17
	speed_H = (unsigned char)(speed >> 8);
     4c2:	8f 89       	ldd	r24, Y+23	; 0x17
     4c4:	98 8d       	ldd	r25, Y+24	; 0x18
     4c6:	89 2f       	mov	r24, r25
     4c8:	99 27       	eor	r25, r25
     4ca:	8b 83       	std	Y+3, r24	; 0x03
	speed_L = (unsigned char)(speed & 0x00FF);
     4cc:	8f 89       	ldd	r24, Y+23	; 0x17
     4ce:	8c 83       	std	Y+4, r24	; 0x04

	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
     4d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     4d2:	88 2f       	mov	r24, r24
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	9c 01       	movw	r18, r24
     4d8:	28 5d       	subi	r18, 0xD8	; 216
     4da:	3f 4f       	sbci	r19, 0xFF	; 255
     4dc:	8b 81       	ldd	r24, Y+3	; 0x03
     4de:	88 2f       	mov	r24, r24
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	28 0f       	add	r18, r24
     4e4:	39 1f       	adc	r19, r25
     4e6:	8c 81       	ldd	r24, Y+4	; 0x04
     4e8:	88 2f       	mov	r24, r24
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	28 0f       	add	r18, r24
     4ee:	39 1f       	adc	r19, r25
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	88 2f       	mov	r24, r24
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	28 0f       	add	r18, r24
     4f8:	39 1f       	adc	r19, r25
     4fa:	8a 81       	ldd	r24, Y+2	; 0x02
     4fc:	88 2f       	mov	r24, r24
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	82 0f       	add	r24, r18
     502:	93 1f       	adc	r25, r19
     504:	80 95       	com	r24
     506:	90 95       	com	r25
     508:	9e 83       	std	Y+6, r25	; 0x06
     50a:	8d 83       	std	Y+5, r24	; 0x05

	AX_StopReceiver();
     50c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <AX_StopReceiver>

	AX_SendChar(START);
     510:	8f ef       	ldi	r24, 0xFF	; 255
     512:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(START);
     516:	8f ef       	ldi	r24, 0xFF	; 255
     518:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(id);
     51c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     51e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(LENGTH);
     522:	87 e0       	ldi	r24, 0x07	; 7
     524:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(INSTR);
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(ADDRESS);
     52e:	8e e1       	ldi	r24, 0x1E	; 30
     530:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(angle_L);
     534:	8a 81       	ldd	r24, Y+2	; 0x02
     536:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(angle_H);
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(speed_L);
     540:	8c 81       	ldd	r24, Y+4	; 0x04
     542:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(speed_H);
     546:	8b 81       	ldd	r24, Y+3	; 0x03
     548:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(checksum);
     54c:	8d 81       	ldd	r24, Y+5	; 0x05
     54e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>

	AX_StopTransmitter();
     552:	0e 94 c1 01 	call	0x382	; 0x382 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     556:	0e 94 05 02 	call	0x40a	; 0x40a <AX_ReleaseReceiver>
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	a8 e4       	ldi	r26, 0x48	; 72
     560:	b2 e4       	ldi	r27, 0x42	; 66
     562:	8f 83       	std	Y+7, r24	; 0x07
     564:	98 87       	std	Y+8, r25	; 0x08
     566:	a9 87       	std	Y+9, r26	; 0x09
     568:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e4       	ldi	r19, 0x40	; 64
     56e:	4c e1       	ldi	r20, 0x1C	; 28
     570:	55 e4       	ldi	r21, 0x45	; 69
     572:	6f 81       	ldd	r22, Y+7	; 0x07
     574:	78 85       	ldd	r23, Y+8	; 0x08
     576:	89 85       	ldd	r24, Y+9	; 0x09
     578:	9a 85       	ldd	r25, Y+10	; 0x0a
     57a:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	8b 87       	std	Y+11, r24	; 0x0b
     584:	9c 87       	std	Y+12, r25	; 0x0c
     586:	ad 87       	std	Y+13, r26	; 0x0d
     588:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	40 e8       	ldi	r20, 0x80	; 128
     590:	5f e3       	ldi	r21, 0x3F	; 63
     592:	6b 85       	ldd	r22, Y+11	; 0x0b
     594:	7c 85       	ldd	r23, Y+12	; 0x0c
     596:	8d 85       	ldd	r24, Y+13	; 0x0d
     598:	9e 85       	ldd	r25, Y+14	; 0x0e
     59a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
     59e:	88 23       	and	r24, r24
     5a0:	2c f4       	brge	.+10     	; 0x5ac <AX_SetAngle+0x182>
		__ticks = 1;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	98 8b       	std	Y+16, r25	; 0x10
     5a8:	8f 87       	std	Y+15, r24	; 0x0f
     5aa:	3f c0       	rjmp	.+126    	; 0x62a <AX_SetAngle+0x200>
	else if (__tmp > 65535)
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	3f ef       	ldi	r19, 0xFF	; 255
     5b0:	4f e7       	ldi	r20, 0x7F	; 127
     5b2:	57 e4       	ldi	r21, 0x47	; 71
     5b4:	6b 85       	ldd	r22, Y+11	; 0x0b
     5b6:	7c 85       	ldd	r23, Y+12	; 0x0c
     5b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     5bc:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
     5c0:	18 16       	cp	r1, r24
     5c2:	4c f5       	brge	.+82     	; 0x616 <AX_SetAngle+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	40 e2       	ldi	r20, 0x20	; 32
     5ca:	51 e4       	ldi	r21, 0x41	; 65
     5cc:	6f 81       	ldd	r22, Y+7	; 0x07
     5ce:	78 85       	ldd	r23, Y+8	; 0x08
     5d0:	89 85       	ldd	r24, Y+9	; 0x09
     5d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     5d4:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
     5d8:	dc 01       	movw	r26, r24
     5da:	cb 01       	movw	r24, r22
     5dc:	bc 01       	movw	r22, r24
     5de:	cd 01       	movw	r24, r26
     5e0:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     5e4:	dc 01       	movw	r26, r24
     5e6:	cb 01       	movw	r24, r22
     5e8:	98 8b       	std	Y+16, r25	; 0x10
     5ea:	8f 87       	std	Y+15, r24	; 0x0f
     5ec:	0f c0       	rjmp	.+30     	; 0x60c <AX_SetAngle+0x1e2>
     5ee:	8a ef       	ldi	r24, 0xFA	; 250
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	9a 8b       	std	Y+18, r25	; 0x12
     5f4:	89 8b       	std	Y+17, r24	; 0x11
     5f6:	89 89       	ldd	r24, Y+17	; 0x11
     5f8:	9a 89       	ldd	r25, Y+18	; 0x12
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <AX_SetAngle+0x1d0>
     5fe:	9a 8b       	std	Y+18, r25	; 0x12
     600:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     602:	8f 85       	ldd	r24, Y+15	; 0x0f
     604:	98 89       	ldd	r25, Y+16	; 0x10
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	98 8b       	std	Y+16, r25	; 0x10
     60a:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     60c:	8f 85       	ldd	r24, Y+15	; 0x0f
     60e:	98 89       	ldd	r25, Y+16	; 0x10
     610:	89 2b       	or	r24, r25
     612:	69 f7       	brne	.-38     	; 0x5ee <AX_SetAngle+0x1c4>
     614:	14 c0       	rjmp	.+40     	; 0x63e <AX_SetAngle+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     616:	6b 85       	ldd	r22, Y+11	; 0x0b
     618:	7c 85       	ldd	r23, Y+12	; 0x0c
     61a:	8d 85       	ldd	r24, Y+13	; 0x0d
     61c:	9e 85       	ldd	r25, Y+14	; 0x0e
     61e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     622:	dc 01       	movw	r26, r24
     624:	cb 01       	movw	r24, r22
     626:	98 8b       	std	Y+16, r25	; 0x10
     628:	8f 87       	std	Y+15, r24	; 0x0f
     62a:	8f 85       	ldd	r24, Y+15	; 0x0f
     62c:	98 89       	ldd	r25, Y+16	; 0x10
     62e:	9c 8b       	std	Y+20, r25	; 0x14
     630:	8b 8b       	std	Y+19, r24	; 0x13
     632:	8b 89       	ldd	r24, Y+19	; 0x13
     634:	9c 89       	ldd	r25, Y+20	; 0x14
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <AX_SetAngle+0x20c>
     63a:	9c 8b       	std	Y+20, r25	; 0x14
     63c:	8b 8b       	std	Y+19, r24	; 0x13

	_delay_ms(50);

	AX_ReleaseTransmitter();
     63e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <AX_ReleaseTransmitter>
}
     642:	6a 96       	adiw	r28, 0x1a	; 26
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <AX_EndlessTurn>:


void AX_EndlessTurn(void)
{
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	60 97       	sbiw	r28, 0x10	; 16
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61

	unsigned int checksum;

	checksum = ~(0x01 + 0x07 + 0x03 + 0x06 + (1023 & 0xFF) + (1023 >> 8) & 0xFF);
     668:	8c ee       	ldi	r24, 0xEC	; 236
     66a:	9f ef       	ldi	r25, 0xFF	; 255
     66c:	9a 83       	std	Y+2, r25	; 0x02
     66e:	89 83       	std	Y+1, r24	; 0x01

	AX_StopReceiver();
     670:	0e 94 f5 01 	call	0x3ea	; 0x3ea <AX_StopReceiver>

	AX_SendChar(0xFF);
     674:	8f ef       	ldi	r24, 0xFF	; 255
     676:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(0xFF);
     67a:	8f ef       	ldi	r24, 0xFF	; 255
     67c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(0x01);
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(0x07);
     686:	87 e0       	ldi	r24, 0x07	; 7
     688:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(0x03);
     68c:	83 e0       	ldi	r24, 0x03	; 3
     68e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(0x06);
     692:	86 e0       	ldi	r24, 0x06	; 6
     694:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(0x00);
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(0x00);
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(1023 & 0xFF);
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(1023 >> 8);
     6aa:	83 e0       	ldi	r24, 0x03	; 3
     6ac:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(checksum);
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>

	AX_StopTransmitter();
     6b6:	0e 94 c1 01 	call	0x382	; 0x382 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     6ba:	0e 94 05 02 	call	0x40a	; 0x40a <AX_ReleaseReceiver>
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	a8 e4       	ldi	r26, 0x48	; 72
     6c4:	b2 e4       	ldi	r27, 0x42	; 66
     6c6:	8b 83       	std	Y+3, r24	; 0x03
     6c8:	9c 83       	std	Y+4, r25	; 0x04
     6ca:	ad 83       	std	Y+5, r26	; 0x05
     6cc:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e4       	ldi	r19, 0x40	; 64
     6d2:	4c e1       	ldi	r20, 0x1C	; 28
     6d4:	55 e4       	ldi	r21, 0x45	; 69
     6d6:	6b 81       	ldd	r22, Y+3	; 0x03
     6d8:	7c 81       	ldd	r23, Y+4	; 0x04
     6da:	8d 81       	ldd	r24, Y+5	; 0x05
     6dc:	9e 81       	ldd	r25, Y+6	; 0x06
     6de:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
     6e2:	dc 01       	movw	r26, r24
     6e4:	cb 01       	movw	r24, r22
     6e6:	8f 83       	std	Y+7, r24	; 0x07
     6e8:	98 87       	std	Y+8, r25	; 0x08
     6ea:	a9 87       	std	Y+9, r26	; 0x09
     6ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	40 e8       	ldi	r20, 0x80	; 128
     6f4:	5f e3       	ldi	r21, 0x3F	; 63
     6f6:	6f 81       	ldd	r22, Y+7	; 0x07
     6f8:	78 85       	ldd	r23, Y+8	; 0x08
     6fa:	89 85       	ldd	r24, Y+9	; 0x09
     6fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     6fe:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
     702:	88 23       	and	r24, r24
     704:	2c f4       	brge	.+10     	; 0x710 <AX_EndlessTurn+0xbc>
		__ticks = 1;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	9c 87       	std	Y+12, r25	; 0x0c
     70c:	8b 87       	std	Y+11, r24	; 0x0b
     70e:	3f c0       	rjmp	.+126    	; 0x78e <AX_EndlessTurn+0x13a>
	else if (__tmp > 65535)
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	3f ef       	ldi	r19, 0xFF	; 255
     714:	4f e7       	ldi	r20, 0x7F	; 127
     716:	57 e4       	ldi	r21, 0x47	; 71
     718:	6f 81       	ldd	r22, Y+7	; 0x07
     71a:	78 85       	ldd	r23, Y+8	; 0x08
     71c:	89 85       	ldd	r24, Y+9	; 0x09
     71e:	9a 85       	ldd	r25, Y+10	; 0x0a
     720:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
     724:	18 16       	cp	r1, r24
     726:	4c f5       	brge	.+82     	; 0x77a <AX_EndlessTurn+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 e2       	ldi	r20, 0x20	; 32
     72e:	51 e4       	ldi	r21, 0x41	; 65
     730:	6b 81       	ldd	r22, Y+3	; 0x03
     732:	7c 81       	ldd	r23, Y+4	; 0x04
     734:	8d 81       	ldd	r24, Y+5	; 0x05
     736:	9e 81       	ldd	r25, Y+6	; 0x06
     738:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
     73c:	dc 01       	movw	r26, r24
     73e:	cb 01       	movw	r24, r22
     740:	bc 01       	movw	r22, r24
     742:	cd 01       	movw	r24, r26
     744:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     748:	dc 01       	movw	r26, r24
     74a:	cb 01       	movw	r24, r22
     74c:	9c 87       	std	Y+12, r25	; 0x0c
     74e:	8b 87       	std	Y+11, r24	; 0x0b
     750:	0f c0       	rjmp	.+30     	; 0x770 <AX_EndlessTurn+0x11c>
     752:	8a ef       	ldi	r24, 0xFA	; 250
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	9e 87       	std	Y+14, r25	; 0x0e
     758:	8d 87       	std	Y+13, r24	; 0x0d
     75a:	8d 85       	ldd	r24, Y+13	; 0x0d
     75c:	9e 85       	ldd	r25, Y+14	; 0x0e
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <AX_EndlessTurn+0x10a>
     762:	9e 87       	std	Y+14, r25	; 0x0e
     764:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     766:	8b 85       	ldd	r24, Y+11	; 0x0b
     768:	9c 85       	ldd	r25, Y+12	; 0x0c
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	9c 87       	std	Y+12, r25	; 0x0c
     76e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     770:	8b 85       	ldd	r24, Y+11	; 0x0b
     772:	9c 85       	ldd	r25, Y+12	; 0x0c
     774:	89 2b       	or	r24, r25
     776:	69 f7       	brne	.-38     	; 0x752 <AX_EndlessTurn+0xfe>
     778:	14 c0       	rjmp	.+40     	; 0x7a2 <AX_EndlessTurn+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     77a:	6f 81       	ldd	r22, Y+7	; 0x07
     77c:	78 85       	ldd	r23, Y+8	; 0x08
     77e:	89 85       	ldd	r24, Y+9	; 0x09
     780:	9a 85       	ldd	r25, Y+10	; 0x0a
     782:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
     786:	dc 01       	movw	r26, r24
     788:	cb 01       	movw	r24, r22
     78a:	9c 87       	std	Y+12, r25	; 0x0c
     78c:	8b 87       	std	Y+11, r24	; 0x0b
     78e:	8b 85       	ldd	r24, Y+11	; 0x0b
     790:	9c 85       	ldd	r25, Y+12	; 0x0c
     792:	98 8b       	std	Y+16, r25	; 0x10
     794:	8f 87       	std	Y+15, r24	; 0x0f
     796:	8f 85       	ldd	r24, Y+15	; 0x0f
     798:	98 89       	ldd	r25, Y+16	; 0x10
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <AX_EndlessTurn+0x146>
     79e:	98 8b       	std	Y+16, r25	; 0x10
     7a0:	8f 87       	std	Y+15, r24	; 0x0f

	//AX_ReadStatus();
	_delay_ms(50);

	AX_ReleaseTransmitter();
     7a2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <AX_ReleaseTransmitter>
}
     7a6:	60 96       	adiw	r28, 0x10	; 16
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <AX_SetSpeed>:

void AX_SetSpeed(unsigned int direction, unsigned int speed)
{
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	28 97       	sbiw	r28, 0x08	; 8
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	9e 83       	std	Y+6, r25	; 0x06
     7ce:	8d 83       	std	Y+5, r24	; 0x05
     7d0:	78 87       	std	Y+8, r23	; 0x08
     7d2:	6f 83       	std	Y+7, r22	; 0x07
	/*
		direction ---> TurnDirection -> 1 - ClockWise   0 - CounterClockWise
	*/

	unsigned int data = 0x0000;
     7d4:	1a 82       	std	Y+2, r1	; 0x02
     7d6:	19 82       	std	Y+1, r1	; 0x01
	unsigned int checksum = 0;
     7d8:	1c 82       	std	Y+4, r1	; 0x04
     7da:	1b 82       	std	Y+3, r1	; 0x03

	data = speed;
     7dc:	8f 81       	ldd	r24, Y+7	; 0x07
     7de:	98 85       	ldd	r25, Y+8	; 0x08
     7e0:	9a 83       	std	Y+2, r25	; 0x02
     7e2:	89 83       	std	Y+1, r24	; 0x01
	data |= (direction << 10);
     7e4:	8d 81       	ldd	r24, Y+5	; 0x05
     7e6:	9e 81       	ldd	r25, Y+6	; 0x06
     7e8:	98 2f       	mov	r25, r24
     7ea:	88 27       	eor	r24, r24
     7ec:	99 0f       	add	r25, r25
     7ee:	99 0f       	add	r25, r25
     7f0:	29 81       	ldd	r18, Y+1	; 0x01
     7f2:	3a 81       	ldd	r19, Y+2	; 0x02
     7f4:	82 2b       	or	r24, r18
     7f6:	93 2b       	or	r25, r19
     7f8:	9a 83       	std	Y+2, r25	; 0x02
     7fa:	89 83       	std	Y+1, r24	; 0x01


	checksum = ~(0x01 + 0x05 + 0x03 + 0x20 + data);
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	9a 81       	ldd	r25, Y+2	; 0x02
     800:	89 96       	adiw	r24, 0x29	; 41
     802:	80 95       	com	r24
     804:	90 95       	com	r25
     806:	9c 83       	std	Y+4, r25	; 0x04
     808:	8b 83       	std	Y+3, r24	; 0x03

	AX_StopReceiver();
     80a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <AX_StopReceiver>

	AX_SendChar(0xFF);
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(0xFF);
     814:	8f ef       	ldi	r24, 0xFF	; 255
     816:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(0x01);
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(0x05);
     820:	85 e0       	ldi	r24, 0x05	; 5
     822:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(0x03);
     826:	83 e0       	ldi	r24, 0x03	; 3
     828:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(0x20);
     82c:	80 e2       	ldi	r24, 0x20	; 32
     82e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(data);
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(data >> 8);
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	89 2f       	mov	r24, r25
     83e:	99 27       	eor	r25, r25
     840:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>
	AX_SendChar(checksum);
     844:	8b 81       	ldd	r24, Y+3	; 0x03
     846:	0e 94 68 01 	call	0x2d0	; 0x2d0 <AX_SendChar>

	AX_StopTransmitter();
     84a:	0e 94 c1 01 	call	0x382	; 0x382 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     84e:	0e 94 05 02 	call	0x40a	; 0x40a <AX_ReleaseReceiver>

	AX_ReadStatus();
     852:	0e 94 94 01 	call	0x328	; 0x328 <AX_ReadStatus>

	AX_ReleaseTransmitter();
     856:	0e 94 e5 01 	call	0x3ca	; 0x3ca <AX_ReleaseTransmitter>
}
     85a:	28 96       	adiw	r28, 0x08	; 8
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	f8 94       	cli
     860:	de bf       	out	0x3e, r29	; 62
     862:	0f be       	out	0x3f, r0	; 63
     864:	cd bf       	out	0x3d, r28	; 61
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <__vector_18>:
static volatile unsigned char rxCounter[10];
//volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	00 90 5f 00 	lds	r0, 0x005F
     874:	0f 92       	push	r0
     876:	11 24       	eor	r1, r1
     878:	00 90 5b 00 	lds	r0, 0x005B
     87c:	0f 92       	push	r0
     87e:	2f 93       	push	r18
     880:	3f 93       	push	r19
     882:	4f 93       	push	r20
     884:	5f 93       	push	r21
     886:	8f 93       	push	r24
     888:	9f 93       	push	r25
     88a:	ef 93       	push	r30
     88c:	ff 93       	push	r31
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	00 d0       	rcall	.+0      	; 0x894 <__vector_18+0x28>
     894:	00 d0       	rcall	.+0      	; 0x896 <__vector_18+0x2a>
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     89a:	8d ee       	ldi	r24, 0xED	; 237
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	fc 01       	movw	r30, r24
     8a0:	80 81       	ld	r24, Z
     8a2:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     8a4:	19 82       	std	Y+1, r1	; 0x01
     8a6:	a4 c0       	rjmp	.+328    	; 0x9f0 <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
     8a8:	8d ee       	ldi	r24, 0xED	; 237
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	29 81       	ldd	r18, Y+1	; 0x01
     8ae:	22 95       	swap	r18
     8b0:	20 7f       	andi	r18, 0xF0	; 240
     8b2:	fc 01       	movw	r30, r24
     8b4:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     8b6:	8e ee       	ldi	r24, 0xEE	; 238
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	fc 01       	movw	r30, r24
     8bc:	80 81       	ld	r24, Z
     8be:	82 95       	swap	r24
     8c0:	86 95       	lsr	r24
     8c2:	87 70       	andi	r24, 0x07	; 7
     8c4:	88 2f       	mov	r24, r24
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	81 70       	andi	r24, 0x01	; 1
     8ca:	99 27       	eor	r25, r25
     8cc:	89 2b       	or	r24, r25
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <__vector_18+0x66>
     8d0:	70 c0       	rjmp	.+224    	; 0x9b2 <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     8d2:	8f ee       	ldi	r24, 0xEF	; 239
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	20 e8       	ldi	r18, 0x80	; 128
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     8dc:	8e ee       	ldi	r24, 0xEE	; 238
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	2e ee       	ldi	r18, 0xEE	; 238
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	f9 01       	movw	r30, r18
     8e6:	20 81       	ld	r18, Z
     8e8:	2f 7d       	andi	r18, 0xDF	; 223
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     8ee:	82 ef       	ldi	r24, 0xF2	; 242
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	fc 01       	movw	r30, r24
     8f4:	80 81       	ld	r24, Z
     8f6:	82 95       	swap	r24
     8f8:	86 95       	lsr	r24
     8fa:	87 70       	andi	r24, 0x07	; 7
     8fc:	28 2f       	mov	r18, r24
     8fe:	83 ef       	ldi	r24, 0xF3	; 243
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	fc 01       	movw	r30, r24
     904:	80 81       	ld	r24, Z
     906:	88 2f       	mov	r24, r24
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	82 2b       	or	r24, r18
     918:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
     91a:	1a 82       	std	Y+2, r1	; 0x02
     91c:	26 c0       	rjmp	.+76     	; 0x96a <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     91e:	8c 81       	ldd	r24, Y+4	; 0x04
     920:	88 2f       	mov	r24, r24
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	81 50       	subi	r24, 0x01	; 1
     926:	90 48       	sbci	r25, 0x80	; 128
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	82 5d       	subi	r24, 0xD2	; 210
     92e:	9e 4f       	sbci	r25, 0xFE	; 254
     930:	fc 01       	movw	r30, r24
     932:	20 81       	ld	r18, Z
     934:	31 81       	ldd	r19, Z+1	; 0x01
     936:	8c 81       	ldd	r24, Y+4	; 0x04
     938:	88 2f       	mov	r24, r24
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	8e 5b       	subi	r24, 0xBE	; 190
     940:	9e 4f       	sbci	r25, 0xFE	; 254
     942:	fc 01       	movw	r30, r24
     944:	80 81       	ld	r24, Z
     946:	48 2f       	mov	r20, r24
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	8a 81       	ldd	r24, Y+2	; 0x02
     94c:	88 2f       	mov	r24, r24
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	84 0f       	add	r24, r20
     952:	95 1f       	adc	r25, r21
     954:	82 0f       	add	r24, r18
     956:	93 1f       	adc	r25, r19
     958:	2a ef       	ldi	r18, 0xFA	; 250
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	f9 01       	movw	r30, r18
     95e:	20 81       	ld	r18, Z
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     964:	8a 81       	ldd	r24, Y+2	; 0x02
     966:	8f 5f       	subi	r24, 0xFF	; 255
     968:	8a 83       	std	Y+2, r24	; 0x02
     96a:	8a 81       	ldd	r24, Y+2	; 0x02
     96c:	88 30       	cpi	r24, 0x08	; 8
     96e:	b8 f2       	brcs	.-82     	; 0x91e <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     970:	8c 81       	ldd	r24, Y+4	; 0x04
     972:	88 2f       	mov	r24, r24
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	01 97       	sbiw	r24, 0x01	; 1
     978:	8e 5b       	subi	r24, 0xBE	; 190
     97a:	9e 4f       	sbci	r25, 0xFE	; 254
     97c:	fc 01       	movw	r30, r24
     97e:	20 81       	ld	r18, Z
     980:	2f 5f       	subi	r18, 0xFF	; 255
     982:	fc 01       	movw	r30, r24
     984:	20 83       	st	Z, r18
     986:	25 30       	cpi	r18, 0x05	; 5
     988:	41 f4       	brne	.+16     	; 0x99a <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
     98a:	8c 81       	ldd	r24, Y+4	; 0x04
     98c:	88 2f       	mov	r24, r24
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	8e 5b       	subi	r24, 0xBE	; 190
     994:	9e 4f       	sbci	r25, 0xFE	; 254
     996:	fc 01       	movw	r30, r24
     998:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     99a:	8c 81       	ldd	r24, Y+4	; 0x04
     99c:	88 2f       	mov	r24, r24
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	8a 5a       	subi	r24, 0xAA	; 170
     9a4:	9e 4f       	sbci	r25, 0xFE	; 254
     9a6:	fc 01       	movw	r30, r24
     9a8:	20 81       	ld	r18, Z
     9aa:	2f 5f       	subi	r18, 0xFF	; 255
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18

			break;
     9b0:	23 c0       	rjmp	.+70     	; 0x9f8 <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     9b2:	8e ee       	ldi	r24, 0xEE	; 238
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	fc 01       	movw	r30, r24
     9b8:	80 81       	ld	r24, Z
     9ba:	82 95       	swap	r24
     9bc:	86 95       	lsr	r24
     9be:	86 95       	lsr	r24
     9c0:	83 70       	andi	r24, 0x03	; 3
     9c2:	88 2f       	mov	r24, r24
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	81 70       	andi	r24, 0x01	; 1
     9c8:	99 27       	eor	r25, r25
     9ca:	89 2b       	or	r24, r25
     9cc:	71 f0       	breq	.+28     	; 0x9ea <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
     9ce:	8f ee       	ldi	r24, 0xEF	; 239
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	fc 01       	movw	r30, r24
     9d4:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     9d6:	8e ee       	ldi	r24, 0xEE	; 238
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	2e ee       	ldi	r18, 0xEE	; 238
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	f9 01       	movw	r30, r18
     9e0:	20 81       	ld	r18, Z
     9e2:	2f 7b       	andi	r18, 0xBF	; 191
     9e4:	fc 01       	movw	r30, r24
     9e6:	20 83       	st	Z, r18

			break;
     9e8:	07 c0       	rjmp	.+14     	; 0x9f8 <__vector_18+0x18c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	8f 5f       	subi	r24, 0xFF	; 255
     9ee:	89 83       	std	Y+1, r24	; 0x01
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	8f 30       	cpi	r24, 0x0F	; 15
     9f4:	08 f4       	brcc	.+2      	; 0x9f8 <__vector_18+0x18c>
     9f6:	58 cf       	rjmp	.-336    	; 0x8a8 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     9f8:	8d ee       	ldi	r24, 0xED	; 237
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	2b 81       	ldd	r18, Y+3	; 0x03
     9fe:	fc 01       	movw	r30, r24
     a00:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // zato sto tako treba.
}
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	ff 91       	pop	r31
     a10:	ef 91       	pop	r30
     a12:	9f 91       	pop	r25
     a14:	8f 91       	pop	r24
     a16:	5f 91       	pop	r21
     a18:	4f 91       	pop	r20
     a1a:	3f 91       	pop	r19
     a1c:	2f 91       	pop	r18
     a1e:	0f 90       	pop	r0
     a20:	00 92 5b 00 	sts	0x005B, r0
     a24:	0f 90       	pop	r0
     a26:	00 92 5f 00 	sts	0x005F, r0
     a2a:	0f 90       	pop	r0
     a2c:	1f 90       	pop	r1
     a2e:	18 95       	reti

00000a30 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	00 d0       	rcall	.+0      	; 0xa36 <CAN_InitModule+0x6>
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     a3a:	88 ed       	ldi	r24, 0xD8	; 216
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	21 e0       	ldi	r18, 0x01	; 1
     a40:	fc 01       	movw	r30, r24
     a42:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     a44:	19 82       	std	Y+1, r1	; 0x01
     a46:	3e c0       	rjmp	.+124    	; 0xac4 <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
     a48:	8d ee       	ldi	r24, 0xED	; 237
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	29 81       	ldd	r18, Y+1	; 0x01
     a4e:	22 95       	swap	r18
     a50:	20 7f       	andi	r18, 0xF0	; 240
     a52:	fc 01       	movw	r30, r24
     a54:	20 83       	st	Z, r18

		CANSTMOB = 0;
     a56:	8e ee       	ldi	r24, 0xEE	; 238
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	fc 01       	movw	r30, r24
     a5c:	10 82       	st	Z, r1
		CANCDMOB = 0;
     a5e:	8f ee       	ldi	r24, 0xEF	; 239
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	fc 01       	movw	r30, r24
     a64:	10 82       	st	Z, r1

		CANIDT1 = 0;
     a66:	83 ef       	ldi	r24, 0xF3	; 243
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	fc 01       	movw	r30, r24
     a6c:	10 82       	st	Z, r1
		CANIDT2 = 0;
     a6e:	82 ef       	ldi	r24, 0xF2	; 242
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	fc 01       	movw	r30, r24
     a74:	10 82       	st	Z, r1
		CANIDT3 = 0;
     a76:	81 ef       	ldi	r24, 0xF1	; 241
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	fc 01       	movw	r30, r24
     a7c:	10 82       	st	Z, r1
		CANIDT4 = 0;
     a7e:	80 ef       	ldi	r24, 0xF0	; 240
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	fc 01       	movw	r30, r24
     a84:	10 82       	st	Z, r1
		CANIDM1 = 0;
     a86:	87 ef       	ldi	r24, 0xF7	; 247
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	fc 01       	movw	r30, r24
     a8c:	10 82       	st	Z, r1
		CANIDM2 = 0;
     a8e:	86 ef       	ldi	r24, 0xF6	; 246
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	fc 01       	movw	r30, r24
     a94:	10 82       	st	Z, r1
		CANIDM3 = 0;
     a96:	85 ef       	ldi	r24, 0xF5	; 245
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	fc 01       	movw	r30, r24
     a9c:	10 82       	st	Z, r1
		CANIDM4 = 0;
     a9e:	84 ef       	ldi	r24, 0xF4	; 244
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	fc 01       	movw	r30, r24
     aa4:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     aa6:	1a 82       	std	Y+2, r1	; 0x02
     aa8:	07 c0       	rjmp	.+14     	; 0xab8 <CAN_InitModule+0x88>
			CANMSG = 0;
     aaa:	8a ef       	ldi	r24, 0xFA	; 250
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	fc 01       	movw	r30, r24
     ab0:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     ab2:	8a 81       	ldd	r24, Y+2	; 0x02
     ab4:	8f 5f       	subi	r24, 0xFF	; 255
     ab6:	8a 83       	std	Y+2, r24	; 0x02
     ab8:	8a 81       	ldd	r24, Y+2	; 0x02
     aba:	88 30       	cpi	r24, 0x08	; 8
     abc:	b0 f3       	brcs	.-20     	; 0xaaa <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	8f 5f       	subi	r24, 0xFF	; 255
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	8f 30       	cpi	r24, 0x0F	; 15
     ac8:	08 f4       	brcc	.+2      	; 0xacc <CAN_InitModule+0x9c>
     aca:	be cf       	rjmp	.-132    	; 0xa48 <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     acc:	88 ed       	ldi	r24, 0xD8	; 216
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	22 e0       	ldi	r18, 0x02	; 2
     ad2:	fc 01       	movw	r30, r24
     ad4:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     ad6:	82 ee       	ldi	r24, 0xE2	; 226
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	21 e0       	ldi	r18, 0x01	; 1
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     ae0:	83 ee       	ldi	r24, 0xE3	; 227
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	28 e0       	ldi	r18, 0x08	; 8
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     aea:	84 ee       	ldi	r24, 0xE4	; 228
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	2e e5       	ldi	r18, 0x5E	; 94
     af0:	fc 01       	movw	r30, r24
     af2:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     af4:	85 ee       	ldi	r24, 0xE5	; 229
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	fc 01       	movw	r30, r24
     afa:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     afc:	8b ed       	ldi	r24, 0xDB	; 219
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	20 eb       	ldi	r18, 0xB0	; 176
     b02:	fc 01       	movw	r30, r24
     b04:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     b06:	8f ed       	ldi	r24, 0xDF	; 223
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	2f e7       	ldi	r18, 0x7F	; 127
     b0c:	fc 01       	movw	r30, r24
     b0e:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
     b10:	8e ed       	ldi	r24, 0xDE	; 222
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	2f ef       	ldi	r18, 0xFF	; 255
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
	sei();
     b1a:	78 94       	sei
}
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	00 d0       	rcall	.+0      	; 0xb2c <CAN_InitRxMob+0x6>
     b2c:	00 d0       	rcall	.+0      	; 0xb2e <CAN_InitRxMob+0x8>
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	9c 83       	std	Y+4, r25	; 0x04
     b34:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     b36:	8d ee       	ldi	r24, 0xED	; 237
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	fc 01       	movw	r30, r24
     b3c:	80 81       	ld	r24, Z
     b3e:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     b40:	00 00       	nop
     b42:	89 ed       	ldi	r24, 0xD9	; 217
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	fc 01       	movw	r30, r24
     b48:	80 81       	ld	r24, Z
     b4a:	82 95       	swap	r24
     b4c:	8f 70       	andi	r24, 0x0F	; 15
     b4e:	88 2f       	mov	r24, r24
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	81 70       	andi	r24, 0x01	; 1
     b54:	99 27       	eor	r25, r25
     b56:	89 2b       	or	r24, r25
     b58:	a1 f7       	brne	.-24     	; 0xb42 <CAN_InitRxMob+0x1c>
     b5a:	89 ed       	ldi	r24, 0xD9	; 217
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	fc 01       	movw	r30, r24
     b60:	80 81       	ld	r24, Z
     b62:	86 95       	lsr	r24
     b64:	86 95       	lsr	r24
     b66:	86 95       	lsr	r24
     b68:	88 2f       	mov	r24, r24
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	81 70       	andi	r24, 0x01	; 1
     b6e:	99 27       	eor	r25, r25
     b70:	89 2b       	or	r24, r25
     b72:	39 f7       	brne	.-50     	; 0xb42 <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     b74:	19 82       	std	Y+1, r1	; 0x01
     b76:	49 c0       	rjmp	.+146    	; 0xc0a <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
     b78:	8d ee       	ldi	r24, 0xED	; 237
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	29 81       	ldd	r18, Y+1	; 0x01
     b7e:	22 95       	swap	r18
     b80:	20 7f       	andi	r18, 0xF0	; 240
     b82:	fc 01       	movw	r30, r24
     b84:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     b86:	8f ee       	ldi	r24, 0xEF	; 239
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	fc 01       	movw	r30, r24
     b8c:	80 81       	ld	r24, Z
     b8e:	82 95       	swap	r24
     b90:	86 95       	lsr	r24
     b92:	86 95       	lsr	r24
     b94:	83 70       	andi	r24, 0x03	; 3
     b96:	88 23       	and	r24, r24
     b98:	21 f0       	breq	.+8      	; 0xba2 <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	8f 5f       	subi	r24, 0xFF	; 255
     b9e:	89 83       	std	Y+1, r24	; 0x01
     ba0:	34 c0       	rjmp	.+104    	; 0xc0a <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     ba2:	8f ee       	ldi	r24, 0xEF	; 239
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	2f e0       	ldi	r18, 0x0F	; 15
     ba8:	fc 01       	movw	r30, r24
     baa:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     bac:	83 ef       	ldi	r24, 0xF3	; 243
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	2b 81       	ldd	r18, Y+3	; 0x03
     bb2:	3c 81       	ldd	r19, Y+4	; 0x04
     bb4:	33 27       	eor	r19, r19
     bb6:	36 95       	lsr	r19
     bb8:	27 95       	ror	r18
     bba:	36 95       	lsr	r19
     bbc:	27 95       	ror	r18
     bbe:	36 95       	lsr	r19
     bc0:	27 95       	ror	r18
     bc2:	fc 01       	movw	r30, r24
     bc4:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
     bc6:	82 ef       	ldi	r24, 0xF2	; 242
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	2b 81       	ldd	r18, Y+3	; 0x03
     bcc:	22 95       	swap	r18
     bce:	22 0f       	add	r18, r18
     bd0:	20 7e       	andi	r18, 0xE0	; 224
     bd2:	fc 01       	movw	r30, r24
     bd4:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     bd6:	86 ef       	ldi	r24, 0xF6	; 246
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	20 ee       	ldi	r18, 0xE0	; 224
     bdc:	fc 01       	movw	r30, r24
     bde:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
     be0:	87 ef       	ldi	r24, 0xF7	; 247
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	2f ef       	ldi	r18, 0xFF	; 255
     be6:	fc 01       	movw	r30, r24
     be8:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     bea:	8f ee       	ldi	r24, 0xEF	; 239
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	2f ee       	ldi	r18, 0xEF	; 239
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	f9 01       	movw	r30, r18
     bf4:	20 81       	ld	r18, Z
     bf6:	20 68       	ori	r18, 0x80	; 128
     bf8:	fc 01       	movw	r30, r24
     bfa:	20 83       	st	Z, r18

		CANPAGE = tempPage;
     bfc:	8d ee       	ldi	r24, 0xED	; 237
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	2a 81       	ldd	r18, Y+2	; 0x02
     c02:	fc 01       	movw	r30, r24
     c04:	20 83       	st	Z, r18

		return 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	0a c0       	rjmp	.+20     	; 0xc1e <CAN_InitRxMob+0xf8>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	8f 30       	cpi	r24, 0x0F	; 15
     c0e:	08 f4       	brcc	.+2      	; 0xc12 <CAN_InitRxMob+0xec>
     c10:	b3 cf       	rjmp	.-154    	; 0xb78 <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     c12:	8d ee       	ldi	r24, 0xED	; 237
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	2a 81       	ldd	r18, Y+2	; 0x02
     c18:	fc 01       	movw	r30, r24
     c1a:	20 83       	st	Z, r18

	return 0;
     c1c:	80 e0       	ldi	r24, 0x00	; 0
}
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	00 d0       	rcall	.+0      	; 0xc36 <CAN_Init+0xa>
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     c3c:	0e 94 18 05 	call	0xa30	; 0xa30 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     c40:	19 82       	std	Y+1, r1	; 0x01
     c42:	30 c0       	rjmp	.+96     	; 0xca4 <CAN_Init+0x78>
	{
		CAN_InitRxMob(i + 1);
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	0e 94 93 05 	call	0xb26	; 0xb26 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	8c 01       	movw	r16, r24
     c5c:	02 5d       	subi	r16, 0xD2	; 210
     c5e:	1e 4f       	sbci	r17, 0xFE	; 254
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	85 e0       	ldi	r24, 0x05	; 5
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <calloc>
     c6c:	f8 01       	movw	r30, r16
     c6e:	91 83       	std	Z+1, r25	; 0x01
     c70:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	88 2f       	mov	r24, r24
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	29 81       	ldd	r18, Y+1	; 0x01
     c7a:	22 2f       	mov	r18, r18
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	49 81       	ldd	r20, Y+1	; 0x01
     c80:	44 2f       	mov	r20, r20
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	4a 5a       	subi	r20, 0xAA	; 170
     c88:	5e 4f       	sbci	r21, 0xFE	; 254
     c8a:	fa 01       	movw	r30, r20
     c8c:	60 83       	st	Z, r22
     c8e:	24 5b       	subi	r18, 0xB4	; 180
     c90:	3e 4f       	sbci	r19, 0xFE	; 254
     c92:	f9 01       	movw	r30, r18
     c94:	60 83       	st	Z, r22
     c96:	8e 5b       	subi	r24, 0xBE	; 190
     c98:	9e 4f       	sbci	r25, 0xFE	; 254
     c9a:	fc 01       	movw	r30, r24
     c9c:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	99 81       	ldd	r25, Y+1	; 0x01
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	98 17       	cp	r25, r24
     caa:	60 f2       	brcs	.-104    	; 0xc44 <CAN_Init+0x18>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	08 95       	ret

00000cba <CAN_CheckRX>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	1f 92       	push	r1
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	89 83       	std	Y+1, r24	; 0x01
	return rxCounter[nodeID - 1];
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	8a 5a       	subi	r24, 0xAA	; 170
     cd0:	9e 4f       	sbci	r25, 0xFE	; 254
     cd2:	fc 01       	movw	r30, r24
     cd4:	80 81       	ld	r24, Z
}
     cd6:	0f 90       	pop	r0
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	08 95       	ret

00000cde <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <CAN_Read+0x6>
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <CAN_Read+0x8>
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	9b 83       	std	Y+3, r25	; 0x03
     cec:	8a 83       	std	Y+2, r24	; 0x02
     cee:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
     cf0:	84 e3       	ldi	r24, 0x34	; 52
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 83       	st	Z, r18
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     cfa:	00 00       	nop
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	88 2f       	mov	r24, r24
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	8a 5a       	subi	r24, 0xAA	; 170
     d06:	9e 4f       	sbci	r25, 0xFE	; 254
     d08:	fc 01       	movw	r30, r24
     d0a:	80 81       	ld	r24, Z
     d0c:	88 23       	and	r24, r24
     d0e:	b1 f3       	breq	.-20     	; 0xcfc <CAN_Read+0x1e>

	for(i = 0; i < 8; ++i)
     d10:	19 82       	std	Y+1, r1	; 0x01
     d12:	2c c0       	rjmp	.+88     	; 0xd6c <CAN_Read+0x8e>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	88 2f       	mov	r24, r24
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	2a 81       	ldd	r18, Y+2	; 0x02
     d1c:	3b 81       	ldd	r19, Y+3	; 0x03
     d1e:	82 0f       	add	r24, r18
     d20:	93 1f       	adc	r25, r19
     d22:	2c 81       	ldd	r18, Y+4	; 0x04
     d24:	22 2f       	mov	r18, r18
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	21 50       	subi	r18, 0x01	; 1
     d2a:	30 48       	sbci	r19, 0x80	; 128
     d2c:	22 0f       	add	r18, r18
     d2e:	33 1f       	adc	r19, r19
     d30:	22 5d       	subi	r18, 0xD2	; 210
     d32:	3e 4f       	sbci	r19, 0xFE	; 254
     d34:	f9 01       	movw	r30, r18
     d36:	40 81       	ld	r20, Z
     d38:	51 81       	ldd	r21, Z+1	; 0x01
     d3a:	2c 81       	ldd	r18, Y+4	; 0x04
     d3c:	22 2f       	mov	r18, r18
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	21 50       	subi	r18, 0x01	; 1
     d42:	31 09       	sbc	r19, r1
     d44:	24 5b       	subi	r18, 0xB4	; 180
     d46:	3e 4f       	sbci	r19, 0xFE	; 254
     d48:	f9 01       	movw	r30, r18
     d4a:	20 81       	ld	r18, Z
     d4c:	62 2f       	mov	r22, r18
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	29 81       	ldd	r18, Y+1	; 0x01
     d52:	22 2f       	mov	r18, r18
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	26 0f       	add	r18, r22
     d58:	37 1f       	adc	r19, r23
     d5a:	24 0f       	add	r18, r20
     d5c:	35 1f       	adc	r19, r21
     d5e:	f9 01       	movw	r30, r18
     d60:	20 81       	ld	r18, Z
     d62:	fc 01       	movw	r30, r24
     d64:	20 83       	st	Z, r18
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	88 30       	cpi	r24, 0x08	; 8
     d70:	88 f2       	brcs	.-94     	; 0xd14 <CAN_Read+0x36>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	84 5b       	subi	r24, 0xB4	; 180
     d7c:	9e 4f       	sbci	r25, 0xFE	; 254
     d7e:	fc 01       	movw	r30, r24
     d80:	20 81       	ld	r18, Z
     d82:	2f 5f       	subi	r18, 0xFF	; 255
     d84:	fc 01       	movw	r30, r24
     d86:	20 83       	st	Z, r18
     d88:	25 30       	cpi	r18, 0x05	; 5
     d8a:	41 f4       	brne	.+16     	; 0xd9c <CAN_Read+0xbe>
	*(rxRdIndex + sendingNodeID - 1) = 0;
     d8c:	8c 81       	ldd	r24, Y+4	; 0x04
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	84 5b       	subi	r24, 0xB4	; 180
     d96:	9e 4f       	sbci	r25, 0xFE	; 254
     d98:	fc 01       	movw	r30, r24
     d9a:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	88 2f       	mov	r24, r24
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	9c 01       	movw	r18, r24
     da6:	2a 5a       	subi	r18, 0xAA	; 170
     da8:	3e 4f       	sbci	r19, 0xFE	; 254
     daa:	f9 01       	movw	r30, r18
     dac:	20 81       	ld	r18, Z
     dae:	21 50       	subi	r18, 0x01	; 1
     db0:	8a 5a       	subi	r24, 0xAA	; 170
     db2:	9e 4f       	sbci	r25, 0xFE	; 254
     db4:	fc 01       	movw	r30, r24
     db6:	20 83       	st	Z, r18

	return 0;
     db8:	80 e0       	ldi	r24, 0x00	; 0
}
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	00 d0       	rcall	.+0      	; 0xdce <CAN_Write+0x6>
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <CAN_Write+0x8>
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <CAN_Write+0xa>
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	9d 83       	std	Y+5, r25	; 0x05
     dd8:	8c 83       	std	Y+4, r24	; 0x04
     dda:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     ddc:	00 00       	nop
     dde:	89 ed       	ldi	r24, 0xD9	; 217
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	fc 01       	movw	r30, r24
     de4:	80 81       	ld	r24, Z
     de6:	82 95       	swap	r24
     de8:	8f 70       	andi	r24, 0x0F	; 15
     dea:	88 2f       	mov	r24, r24
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	81 70       	andi	r24, 0x01	; 1
     df0:	99 27       	eor	r25, r25
     df2:	89 2b       	or	r24, r25
     df4:	a1 f7       	brne	.-24     	; 0xdde <CAN_Write+0x16>
     df6:	89 ed       	ldi	r24, 0xD9	; 217
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	fc 01       	movw	r30, r24
     dfc:	80 81       	ld	r24, Z
     dfe:	86 95       	lsr	r24
     e00:	86 95       	lsr	r24
     e02:	86 95       	lsr	r24
     e04:	88 2f       	mov	r24, r24
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	81 70       	andi	r24, 0x01	; 1
     e0a:	99 27       	eor	r25, r25
     e0c:	89 2b       	or	r24, r25
     e0e:	39 f7       	brne	.-50     	; 0xdde <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     e10:	8d ee       	ldi	r24, 0xED	; 237
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	fc 01       	movw	r30, r24
     e16:	80 81       	ld	r24, Z
     e18:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
     e1a:	1a 82       	std	Y+2, r1	; 0x02
     e1c:	15 c0       	rjmp	.+42     	; 0xe48 <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
     e1e:	8d ee       	ldi	r24, 0xED	; 237
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	2a 81       	ldd	r18, Y+2	; 0x02
     e24:	22 95       	swap	r18
     e26:	20 7f       	andi	r18, 0xF0	; 240
     e28:	fc 01       	movw	r30, r24
     e2a:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
     e2c:	8f ee       	ldi	r24, 0xEF	; 239
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	fc 01       	movw	r30, r24
     e32:	80 81       	ld	r24, Z
     e34:	82 95       	swap	r24
     e36:	86 95       	lsr	r24
     e38:	86 95       	lsr	r24
     e3a:	83 70       	andi	r24, 0x03	; 3
     e3c:	88 23       	and	r24, r24
     e3e:	09 f4       	brne	.+2      	; 0xe42 <CAN_Write+0x7a>
			break;
     e40:	06 c0       	rjmp	.+12     	; 0xe4e <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	8f 5f       	subi	r24, 0xFF	; 255
     e46:	8a 83       	std	Y+2, r24	; 0x02
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	8f 30       	cpi	r24, 0x0F	; 15
     e4c:	40 f3       	brcs	.-48     	; 0xe1e <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	8f 30       	cpi	r24, 0x0F	; 15
     e52:	11 f4       	brne	.+4      	; 0xe58 <CAN_Write+0x90>
		return -1;
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	39 c0       	rjmp	.+114    	; 0xeca <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     e58:	82 ef       	ldi	r24, 0xF2	; 242
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	2e 81       	ldd	r18, Y+6	; 0x06
     e5e:	22 95       	swap	r18
     e60:	22 0f       	add	r18, r18
     e62:	20 7e       	andi	r18, 0xE0	; 224
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
     e68:	83 ef       	ldi	r24, 0xF3	; 243
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	2e 81       	ldd	r18, Y+6	; 0x06
     e6e:	26 95       	lsr	r18
     e70:	26 95       	lsr	r18
     e72:	26 95       	lsr	r18
     e74:	fc 01       	movw	r30, r24
     e76:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
     e78:	8f ee       	ldi	r24, 0xEF	; 239
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	28 e0       	ldi	r18, 0x08	; 8
     e7e:	fc 01       	movw	r30, r24
     e80:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     e82:	19 82       	std	Y+1, r1	; 0x01
     e84:	10 c0       	rjmp	.+32     	; 0xea6 <CAN_Write+0xde>
		CANMSG = data[i];
     e86:	8a ef       	ldi	r24, 0xFA	; 250
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	29 81       	ldd	r18, Y+1	; 0x01
     e8c:	22 2f       	mov	r18, r18
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	4c 81       	ldd	r20, Y+4	; 0x04
     e92:	5d 81       	ldd	r21, Y+5	; 0x05
     e94:	24 0f       	add	r18, r20
     e96:	35 1f       	adc	r19, r21
     e98:	f9 01       	movw	r30, r18
     e9a:	20 81       	ld	r18, Z
     e9c:	fc 01       	movw	r30, r24
     e9e:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	88 30       	cpi	r24, 0x08	; 8
     eaa:	68 f3       	brcs	.-38     	; 0xe86 <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     eac:	8f ee       	ldi	r24, 0xEF	; 239
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	2f ee       	ldi	r18, 0xEF	; 239
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	f9 01       	movw	r30, r18
     eb6:	20 81       	ld	r18, Z
     eb8:	20 64       	ori	r18, 0x40	; 64
     eba:	fc 01       	movw	r30, r24
     ebc:	20 83       	st	Z, r18

	CANPAGE = tempPage;
     ebe:	8d ee       	ldi	r24, 0xED	; 237
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	2b 81       	ldd	r18, Y+3	; 0x03
     ec4:	fc 01       	movw	r30, r24
     ec6:	20 83       	st	Z, r18

	return 0;
     ec8:	80 e0       	ldi	r24, 0x00	; 0
}
     eca:	26 96       	adiw	r28, 0x06	; 6
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <debug_init>:
#include "debug.h"

//pin and the starting state of debug pins
uint8_t debug_pins[5] = {48,49,50,51,52};

void debug_init() {
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62


}
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	00 d0       	rcall	.+0      	; 0xef0 <__list_add+0x6>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <__list_add+0x8>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <__list_add+0xa>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	7c 83       	std	Y+4, r23	; 0x04
     efe:	6b 83       	std	Y+3, r22	; 0x03
     f00:	5e 83       	std	Y+6, r21	; 0x06
     f02:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	29 81       	ldd	r18, Y+1	; 0x01
     f0a:	3a 81       	ldd	r19, Y+2	; 0x02
     f0c:	fc 01       	movw	r30, r24
     f0e:	31 83       	std	Z+1, r19	; 0x01
     f10:	20 83       	st	Z, r18
    new->next = next;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	2d 81       	ldd	r18, Y+5	; 0x05
     f18:	3e 81       	ldd	r19, Y+6	; 0x06
     f1a:	fc 01       	movw	r30, r24
     f1c:	33 83       	std	Z+3, r19	; 0x03
     f1e:	22 83       	std	Z+2, r18	; 0x02
    new->prev = prev;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	2b 81       	ldd	r18, Y+3	; 0x03
     f26:	3c 81       	ldd	r19, Y+4	; 0x04
     f28:	fc 01       	movw	r30, r24
     f2a:	31 83       	std	Z+1, r19	; 0x01
     f2c:	20 83       	st	Z, r18
    prev->next = new;
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	29 81       	ldd	r18, Y+1	; 0x01
     f34:	3a 81       	ldd	r19, Y+2	; 0x02
     f36:	fc 01       	movw	r30, r24
     f38:	33 83       	std	Z+3, r19	; 0x03
     f3a:	22 83       	std	Z+2, r18	; 0x02
}
     f3c:	26 96       	adiw	r28, 0x06	; 6
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <list_add>:

static inline void list_add(struct list_head* new, struct list_head* head)
{
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	00 d0       	rcall	.+0      	; 0xf54 <list_add+0x6>
     f54:	00 d0       	rcall	.+0      	; 0xf56 <list_add+0x8>
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	7c 83       	std	Y+4, r23	; 0x04
     f60:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	fc 01       	movw	r30, r24
     f68:	42 81       	ldd	r20, Z+2	; 0x02
     f6a:	53 81       	ldd	r21, Z+3	; 0x03
     f6c:	2b 81       	ldd	r18, Y+3	; 0x03
     f6e:	3c 81       	ldd	r19, Y+4	; 0x04
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	b9 01       	movw	r22, r18
     f76:	0e 94 75 07 	call	0xeea	; 0xeea <__list_add>
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	2b 97       	sbiw	r28, 0x0b	; 11
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	89 87       	std	Y+9, r24	; 0x09
     f9e:	6a 87       	std	Y+10, r22	; 0x0a
     fa0:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     fa2:	80 91 0d 01 	lds	r24, 0x010D
     fa6:	90 91 0e 01 	lds	r25, 0x010E
     faa:	9c 83       	std	Y+4, r25	; 0x04
     fac:	8b 83       	std	Y+3, r24	; 0x03
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	05 97       	sbiw	r24, 0x05	; 5
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	15 c0       	rjmp	.+42     	; 0xfe4 <gpio_register_pin+0x5c>
    {
        if(input->pin == pin)
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	fc 01       	movw	r30, r24
     fc0:	90 81       	ld	r25, Z
     fc2:	89 85       	ldd	r24, Y+9	; 0x09
     fc4:	98 17       	cp	r25, r24
     fc6:	11 f4       	brne	.+4      	; 0xfcc <gpio_register_pin+0x44>
            return 1;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	bc c0       	rjmp	.+376    	; 0x1144 <__stack+0x45>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	fc 01       	movw	r30, r24
     fd2:	87 81       	ldd	r24, Z+7	; 0x07
     fd4:	90 85       	ldd	r25, Z+8	; 0x08
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	8d 83       	std	Y+5, r24	; 0x05
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	9e 81       	ldd	r25, Y+6	; 0x06
     fde:	05 97       	sbiw	r24, 0x05	; 5
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	05 96       	adiw	r24, 0x05	; 5
     fea:	8b 50       	subi	r24, 0x0B	; 11
     fec:	91 40       	sbci	r25, 0x01	; 1
     fee:	29 f7       	brne	.-54     	; 0xfba <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     ff0:	89 85       	ldd	r24, Y+9	; 0x09
     ff2:	86 95       	lsr	r24
     ff4:	86 95       	lsr	r24
     ff6:	86 95       	lsr	r24
     ff8:	8f 5f       	subi	r24, 0xFF	; 255
     ffa:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t pin_reg = pin % 8;
     ffc:	89 85       	ldd	r24, Y+9	; 0x09
     ffe:	87 70       	andi	r24, 0x07	; 7
    1000:	88 87       	std	Y+8, r24	; 0x08
	if(direction == GPIO_DIRECTION_OUTPUT)
    1002:	8a 85       	ldd	r24, Y+10	; 0x0a
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	09 f0       	breq	.+2      	; 0x100a <gpio_register_pin+0x82>
    1008:	55 c0       	rjmp	.+170    	; 0x10b4 <gpio_register_pin+0x12c>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    100a:	8f 81       	ldd	r24, Y+7	; 0x07
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	9c 01       	movw	r18, r24
    1012:	21 50       	subi	r18, 0x01	; 1
    1014:	31 09       	sbc	r19, r1
    1016:	c9 01       	movw	r24, r18
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	82 0f       	add	r24, r18
    101e:	93 1f       	adc	r25, r19
    1020:	81 96       	adiw	r24, 0x21	; 33
    1022:	ac 01       	movw	r20, r24
    1024:	8f 81       	ldd	r24, Y+7	; 0x07
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	9c 01       	movw	r18, r24
    102c:	21 50       	subi	r18, 0x01	; 1
    102e:	31 09       	sbc	r19, r1
    1030:	c9 01       	movw	r24, r18
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	82 0f       	add	r24, r18
    1038:	93 1f       	adc	r25, r19
    103a:	81 96       	adiw	r24, 0x21	; 33
    103c:	fc 01       	movw	r30, r24
    103e:	80 81       	ld	r24, Z
    1040:	68 2f       	mov	r22, r24
    1042:	88 85       	ldd	r24, Y+8	; 0x08
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <gpio_register_pin+0xca>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	2a 95       	dec	r18
    1054:	e2 f7       	brpl	.-8      	; 0x104e <gpio_register_pin+0xc6>
    1056:	86 2b       	or	r24, r22
    1058:	fa 01       	movw	r30, r20
    105a:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    105c:	8f 81       	ldd	r24, Y+7	; 0x07
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	9c 01       	movw	r18, r24
    1064:	21 50       	subi	r18, 0x01	; 1
    1066:	31 09       	sbc	r19, r1
    1068:	c9 01       	movw	r24, r18
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	82 0f       	add	r24, r18
    1070:	93 1f       	adc	r25, r19
    1072:	82 96       	adiw	r24, 0x22	; 34
    1074:	ac 01       	movw	r20, r24
    1076:	8f 81       	ldd	r24, Y+7	; 0x07
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9c 01       	movw	r18, r24
    107e:	21 50       	subi	r18, 0x01	; 1
    1080:	31 09       	sbc	r19, r1
    1082:	c9 01       	movw	r24, r18
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	82 0f       	add	r24, r18
    108a:	93 1f       	adc	r25, r19
    108c:	82 96       	adiw	r24, 0x22	; 34
    108e:	fc 01       	movw	r30, r24
    1090:	80 81       	ld	r24, Z
    1092:	68 2f       	mov	r22, r24
    1094:	88 85       	ldd	r24, Y+8	; 0x08
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <gpio_register_pin+0x11c>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	2a 95       	dec	r18
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <gpio_register_pin+0x118>
    10a8:	80 95       	com	r24
    10aa:	86 23       	and	r24, r22
    10ac:	fa 01       	movw	r30, r20
    10ae:	80 83       	st	Z, r24
        return 0;
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	48 c0       	rjmp	.+144    	; 0x1144 <__stack+0x45>
	}
	else
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    10b4:	8f 81       	ldd	r24, Y+7	; 0x07
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9c 01       	movw	r18, r24
    10bc:	21 50       	subi	r18, 0x01	; 1
    10be:	31 09       	sbc	r19, r1
    10c0:	c9 01       	movw	r24, r18
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	82 0f       	add	r24, r18
    10c8:	93 1f       	adc	r25, r19
    10ca:	81 96       	adiw	r24, 0x21	; 33
    10cc:	ac 01       	movw	r20, r24
    10ce:	8f 81       	ldd	r24, Y+7	; 0x07
    10d0:	88 2f       	mov	r24, r24
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9c 01       	movw	r18, r24
    10d6:	21 50       	subi	r18, 0x01	; 1
    10d8:	31 09       	sbc	r19, r1
    10da:	c9 01       	movw	r24, r18
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	82 0f       	add	r24, r18
    10e2:	93 1f       	adc	r25, r19
    10e4:	81 96       	adiw	r24, 0x21	; 33
    10e6:	fc 01       	movw	r30, r24
    10e8:	80 81       	ld	r24, Z
    10ea:	68 2f       	mov	r22, r24
    10ec:	88 85       	ldd	r24, Y+8	; 0x08
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <gpio_register_pin+0x174>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	2a 95       	dec	r18
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <gpio_register_pin+0x170>
    1100:	80 95       	com	r24
    1102:	86 23       	and	r24, r22
    1104:	fa 01       	movw	r30, r20
    1106:	80 83       	st	Z, r24

    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1108:	89 e0       	ldi	r24, 0x09	; 9
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 0c 20 	call	0x4018	; 0x4018 <malloc>
    1110:	9a 83       	std	Y+2, r25	; 0x02
    1112:	89 83       	std	Y+1, r24	; 0x01
    if(input == NULL)
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	89 2b       	or	r24, r25
    111a:	11 f4       	brne	.+4      	; 0x1120 <__stack+0x21>
        return 1;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	12 c0       	rjmp	.+36     	; 0x1144 <__stack+0x45>

    input->pin       = pin;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	29 85       	ldd	r18, Y+9	; 0x09
    1126:	fc 01       	movw	r30, r24
    1128:	20 83       	st	Z, r18
    input->pulled_up = pulled_up;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1130:	fc 01       	movw	r30, r24
    1132:	21 83       	std	Z+1, r18	; 0x01
    list_add(&input->list, &gpio_inputs);
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	9a 81       	ldd	r25, Y+2	; 0x02
    1138:	05 96       	adiw	r24, 0x05	; 5
    113a:	6b e0       	ldi	r22, 0x0B	; 11
    113c:	71 e0       	ldi	r23, 0x01	; 1
    113e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <list_add>

    return 0;
    1142:	80 e0       	ldi	r24, 0x00	; 0
}
    1144:	2b 96       	adiw	r28, 0x0b	; 11
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	00 d0       	rcall	.+0      	; 0x115c <gpio_write_pin+0x6>
    115c:	00 d0       	rcall	.+0      	; 0x115e <gpio_write_pin+0x8>
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	8b 83       	std	Y+3, r24	; 0x03
    1164:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	86 95       	lsr	r24
    116a:	86 95       	lsr	r24
    116c:	86 95       	lsr	r24
    116e:	8f 5f       	subi	r24, 0xFF	; 255
    1170:	89 83       	std	Y+1, r24	; 0x01
	pin = pin % 8;
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	87 70       	andi	r24, 0x07	; 7
    1176:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9c 01       	movw	r18, r24
    1180:	21 50       	subi	r18, 0x01	; 1
    1182:	31 09       	sbc	r19, r1
    1184:	c9 01       	movw	r24, r18
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	82 0f       	add	r24, r18
    118c:	93 1f       	adc	r25, r19
    118e:	82 96       	adiw	r24, 0x22	; 34
    1190:	fc 01       	movw	r30, r24
    1192:	80 81       	ld	r24, Z
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	a2 81       	ldd	r26, Z+2	; 0x02
    1198:	b3 81       	ldd	r27, Z+3	; 0x03
    119a:	8a 83       	std	Y+2, r24	; 0x02
	if(value != 0)
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	88 23       	and	r24, r24
    11a0:	31 f1       	breq	.+76     	; 0x11ee <gpio_write_pin+0x98>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	9c 01       	movw	r18, r24
    11aa:	21 50       	subi	r18, 0x01	; 1
    11ac:	31 09       	sbc	r19, r1
    11ae:	c9 01       	movw	r24, r18
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	82 0f       	add	r24, r18
    11b6:	93 1f       	adc	r25, r19
    11b8:	82 96       	adiw	r24, 0x22	; 34
    11ba:	ac 01       	movw	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	68 2f       	mov	r22, r24
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <gpio_write_pin+0x7c>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	6a 95       	dec	r22
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <gpio_write_pin+0x78>
    11d6:	82 2b       	or	r24, r18
    11d8:	93 2b       	or	r25, r19
    11da:	09 2e       	mov	r0, r25
    11dc:	00 0c       	add	r0, r0
    11de:	aa 0b       	sbc	r26, r26
    11e0:	bb 0b       	sbc	r27, r27
    11e2:	fa 01       	movw	r30, r20
    11e4:	80 83       	st	Z, r24
    11e6:	91 83       	std	Z+1, r25	; 0x01
    11e8:	a2 83       	std	Z+2, r26	; 0x02
    11ea:	b3 83       	std	Z+3, r27	; 0x03
    11ec:	27 c0       	rjmp	.+78     	; 0x123c <gpio_write_pin+0xe6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9c 01       	movw	r18, r24
    11f6:	21 50       	subi	r18, 0x01	; 1
    11f8:	31 09       	sbc	r19, r1
    11fa:	c9 01       	movw	r24, r18
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	82 0f       	add	r24, r18
    1202:	93 1f       	adc	r25, r19
    1204:	82 96       	adiw	r24, 0x22	; 34
    1206:	ac 01       	movw	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	68 2f       	mov	r22, r24
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 c0       	rjmp	.+4      	; 0x121e <gpio_write_pin+0xc8>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	6a 95       	dec	r22
    1220:	e2 f7       	brpl	.-8      	; 0x121a <gpio_write_pin+0xc4>
    1222:	80 95       	com	r24
    1224:	90 95       	com	r25
    1226:	82 23       	and	r24, r18
    1228:	93 23       	and	r25, r19
    122a:	09 2e       	mov	r0, r25
    122c:	00 0c       	add	r0, r0
    122e:	aa 0b       	sbc	r26, r26
    1230:	bb 0b       	sbc	r27, r27
    1232:	fa 01       	movw	r30, r20
    1234:	80 83       	st	Z, r24
    1236:	91 83       	std	Z+1, r25	; 0x01
    1238:	a2 83       	std	Z+2, r26	; 0x02
    123a:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    123c:	80 e0       	ldi	r24, 0x00	; 0
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	00 d0       	rcall	.+0      	; 0x1252 <__gpio_read_pin+0x6>
    1252:	1f 92       	push	r1
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	86 95       	lsr	r24
    125e:	86 95       	lsr	r24
    1260:	86 95       	lsr	r24
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	87 70       	andi	r24, 0x07	; 7
    126a:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	9c 01       	movw	r18, r24
    1274:	21 50       	subi	r18, 0x01	; 1
    1276:	31 09       	sbc	r19, r1
    1278:	c9 01       	movw	r24, r18
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	82 0f       	add	r24, r18
    1280:	93 1f       	adc	r25, r19
    1282:	80 96       	adiw	r24, 0x20	; 32
    1284:	fc 01       	movw	r30, r24
    1286:	80 81       	ld	r24, Z
    1288:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	2b 81       	ldd	r18, Y+3	; 0x03
    1292:	22 2f       	mov	r18, r18
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	02 c0       	rjmp	.+4      	; 0x129c <__gpio_read_pin+0x50>
    1298:	95 95       	asr	r25
    129a:	87 95       	ror	r24
    129c:	2a 95       	dec	r18
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <__gpio_read_pin+0x4c>
    12a0:	81 70       	andi	r24, 0x01	; 1
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	08 95       	ret

000012ae <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	29 97       	sbiw	r28, 0x09	; 9
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    12c4:	80 91 0d 01 	lds	r24, 0x010D
    12c8:	90 91 0e 01 	lds	r25, 0x010E
    12cc:	9d 83       	std	Y+5, r25	; 0x05
    12ce:	8c 83       	std	Y+4, r24	; 0x04
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	9d 81       	ldd	r25, Y+5	; 0x05
    12d4:	05 97       	sbiw	r24, 0x05	; 5
    12d6:	9a 83       	std	Y+2, r25	; 0x02
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	55 c0       	rjmp	.+170    	; 0x1386 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	fc 01       	movw	r30, r24
    12e2:	90 81       	ld	r25, Z
    12e4:	89 85       	ldd	r24, Y+9	; 0x09
    12e6:	98 17       	cp	r25, r24
    12e8:	09 f0       	breq	.+2      	; 0x12ec <gpio_read_pin+0x3e>
    12ea:	41 c0       	rjmp	.+130    	; 0x136e <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
    12ec:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    12ee:	1f c0       	rjmp	.+62     	; 0x132e <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	88 2f       	mov	r24, r24
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	29 81       	ldd	r18, Y+1	; 0x01
    12f8:	3a 81       	ldd	r19, Y+2	; 0x02
    12fa:	82 0f       	add	r24, r18
    12fc:	93 1f       	adc	r25, r19
    12fe:	02 96       	adiw	r24, 0x02	; 2
    1300:	fc 01       	movw	r30, r24
    1302:	40 81       	ld	r20, Z
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	29 81       	ldd	r18, Y+1	; 0x01
    130e:	3a 81       	ldd	r19, Y+2	; 0x02
    1310:	82 0f       	add	r24, r18
    1312:	93 1f       	adc	r25, r19
    1314:	02 96       	adiw	r24, 0x02	; 2
    1316:	fc 01       	movw	r30, r24
    1318:	80 81       	ld	r24, Z
    131a:	48 17       	cp	r20, r24
    131c:	29 f0       	breq	.+10     	; 0x1328 <gpio_read_pin+0x7a>
                    return input->previous_state;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	fc 01       	movw	r30, r24
    1324:	84 81       	ldd	r24, Z+4	; 0x04
    1326:	37 c0       	rjmp	.+110    	; 0x1396 <gpio_read_pin+0xe8>
                i++;
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	8f 5f       	subi	r24, 0xFF	; 255
    132c:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	88 23       	and	r24, r24
    1332:	f1 f2       	breq	.-68     	; 0x12f0 <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	fc 01       	movw	r30, r24
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	89 27       	eor	r24, r25
    1340:	88 23       	and	r24, r24
    1342:	29 f0       	breq	.+10     	; 0x134e <gpio_read_pin+0xa0>
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	fc 01       	movw	r30, r24
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	08 c0       	rjmp	.+16     	; 0x135e <gpio_read_pin+0xb0>
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	9a 81       	ldd	r25, Y+2	; 0x02
    1352:	fc 01       	movw	r30, r24
    1354:	92 81       	ldd	r25, Z+2	; 0x02
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	99 23       	and	r25, r25
    135a:	09 f0       	breq	.+2      	; 0x135e <gpio_read_pin+0xb0>
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	9a 81       	ldd	r25, Y+2	; 0x02
    1364:	28 85       	ldd	r18, Y+8	; 0x08
    1366:	fc 01       	movw	r30, r24
    1368:	24 83       	std	Z+4, r18	; 0x04

            return state;
    136a:	88 85       	ldd	r24, Y+8	; 0x08
    136c:	14 c0       	rjmp	.+40     	; 0x1396 <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	9a 81       	ldd	r25, Y+2	; 0x02
    1372:	fc 01       	movw	r30, r24
    1374:	87 81       	ldd	r24, Z+7	; 0x07
    1376:	90 85       	ldd	r25, Z+8	; 0x08
    1378:	9f 83       	std	Y+7, r25	; 0x07
    137a:	8e 83       	std	Y+6, r24	; 0x06
    137c:	8e 81       	ldd	r24, Y+6	; 0x06
    137e:	9f 81       	ldd	r25, Y+7	; 0x07
    1380:	05 97       	sbiw	r24, 0x05	; 5
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	9a 81       	ldd	r25, Y+2	; 0x02
    138a:	05 96       	adiw	r24, 0x05	; 5
    138c:	8b 50       	subi	r24, 0x0B	; 11
    138e:	91 40       	sbci	r25, 0x01	; 1
    1390:	09 f0       	breq	.+2      	; 0x1394 <gpio_read_pin+0xe6>
    1392:	a4 cf       	rjmp	.-184    	; 0x12dc <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
}
    1396:	29 96       	adiw	r28, 0x09	; 9
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	08 95       	ret

000013a8 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <gpio_debouncer+0xa>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <gpio_debouncer+0xc>
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <gpio_debouncer+0xe>
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13ba:	80 91 0d 01 	lds	r24, 0x010D
    13be:	90 91 0e 01 	lds	r25, 0x010E
    13c2:	9c 83       	std	Y+4, r25	; 0x04
    13c4:	8b 83       	std	Y+3, r24	; 0x03
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	05 97       	sbiw	r24, 0x05	; 5
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	1e c0       	rjmp	.+60     	; 0x140e <gpio_debouncer+0x66>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    13d2:	00 91 62 01 	lds	r16, 0x0162
    13d6:	10 91 63 01 	lds	r17, 0x0163
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	9a 81       	ldd	r25, Y+2	; 0x02
    13de:	fc 01       	movw	r30, r24
    13e0:	80 81       	ld	r24, Z
    13e2:	0e 94 26 09 	call	0x124c	; 0x124c <__gpio_read_pin>
    13e6:	28 2f       	mov	r18, r24
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	80 0f       	add	r24, r16
    13ee:	91 1f       	adc	r25, r17
    13f0:	02 96       	adiw	r24, 0x02	; 2
    13f2:	fc 01       	movw	r30, r24
    13f4:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	fc 01       	movw	r30, r24
    13fc:	87 81       	ldd	r24, Z+7	; 0x07
    13fe:	90 85       	ldd	r25, Z+8	; 0x08
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	05 97       	sbiw	r24, 0x05	; 5
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	9a 81       	ldd	r25, Y+2	; 0x02
    1412:	05 96       	adiw	r24, 0x05	; 5
    1414:	8b 50       	subi	r24, 0x0B	; 11
    1416:	91 40       	sbci	r25, 0x01	; 1
    1418:	e1 f6       	brne	.-72     	; 0x13d2 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    141a:	80 91 62 01 	lds	r24, 0x0162
    141e:	90 91 63 01 	lds	r25, 0x0163
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	90 93 63 01 	sts	0x0163, r25
    1428:	80 93 62 01 	sts	0x0162, r24
    142c:	02 97       	sbiw	r24, 0x02	; 2
    142e:	21 f4       	brne	.+8      	; 0x1438 <gpio_debouncer+0x90>
        count = 0;
    1430:	10 92 63 01 	sts	0x0163, r1
    1434:	10 92 62 01 	sts	0x0162, r1

}
    1438:	26 96       	adiw	r28, 0x06	; 6
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	08 95       	ret

0000144e <odometry_set_speed>:
 * 	void odometry_set_speed(uint8_t speed)
 *
 * 	Send odometry board the max speed
 */
void odometry_set_speed(uint8_t speed)
{
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	67 97       	sbiw	r28, 0x17	; 23
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1464:	80 91 64 01 	lds	r24, 0x0164
    1468:	9f 89       	ldd	r25, Y+23	; 0x17
    146a:	98 17       	cp	r25, r24
    146c:	09 f4       	brne	.+2      	; 0x1470 <odometry_set_speed+0x22>
    146e:	82 c0       	rjmp	.+260    	; 0x1574 <odometry_set_speed+0x126>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1470:	86 e5       	ldi	r24, 0x56	; 86
    1472:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1474:	8f 89       	ldd	r24, Y+23	; 0x17
    1476:	88 8b       	std	Y+16, r24	; 0x10
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1478:	72 c0       	rjmp	.+228    	; 0x155e <odometry_set_speed+0x110>
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	a8 e4       	ldi	r26, 0x48	; 72
    1480:	b2 e4       	ldi	r27, 0x42	; 66
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	ab 83       	std	Y+3, r26	; 0x03
    1488:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e4       	ldi	r19, 0x40	; 64
    148e:	4c e1       	ldi	r20, 0x1C	; 28
    1490:	55 e4       	ldi	r21, 0x45	; 69
    1492:	69 81       	ldd	r22, Y+1	; 0x01
    1494:	7a 81       	ldd	r23, Y+2	; 0x02
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	8d 83       	std	Y+5, r24	; 0x05
    14a4:	9e 83       	std	Y+6, r25	; 0x06
    14a6:	af 83       	std	Y+7, r26	; 0x07
    14a8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e8       	ldi	r20, 0x80	; 128
    14b0:	5f e3       	ldi	r21, 0x3F	; 63
    14b2:	6d 81       	ldd	r22, Y+5	; 0x05
    14b4:	7e 81       	ldd	r23, Y+6	; 0x06
    14b6:	8f 81       	ldd	r24, Y+7	; 0x07
    14b8:	98 85       	ldd	r25, Y+8	; 0x08
    14ba:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    14be:	88 23       	and	r24, r24
    14c0:	2c f4       	brge	.+10     	; 0x14cc <odometry_set_speed+0x7e>
		__ticks = 1;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	9a 87       	std	Y+10, r25	; 0x0a
    14c8:	89 87       	std	Y+9, r24	; 0x09
    14ca:	3f c0       	rjmp	.+126    	; 0x154a <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	3f ef       	ldi	r19, 0xFF	; 255
    14d0:	4f e7       	ldi	r20, 0x7F	; 127
    14d2:	57 e4       	ldi	r21, 0x47	; 71
    14d4:	6d 81       	ldd	r22, Y+5	; 0x05
    14d6:	7e 81       	ldd	r23, Y+6	; 0x06
    14d8:	8f 81       	ldd	r24, Y+7	; 0x07
    14da:	98 85       	ldd	r25, Y+8	; 0x08
    14dc:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    14e0:	18 16       	cp	r1, r24
    14e2:	4c f5       	brge	.+82     	; 0x1536 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e2       	ldi	r20, 0x20	; 32
    14ea:	51 e4       	ldi	r21, 0x41	; 65
    14ec:	69 81       	ldd	r22, Y+1	; 0x01
    14ee:	7a 81       	ldd	r23, Y+2	; 0x02
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	bc 01       	movw	r22, r24
    14fe:	cd 01       	movw	r24, r26
    1500:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	9a 87       	std	Y+10, r25	; 0x0a
    150a:	89 87       	std	Y+9, r24	; 0x09
    150c:	0f c0       	rjmp	.+30     	; 0x152c <odometry_set_speed+0xde>
    150e:	8a ef       	ldi	r24, 0xFA	; 250
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	9c 87       	std	Y+12, r25	; 0x0c
    1514:	8b 87       	std	Y+11, r24	; 0x0b
    1516:	8b 85       	ldd	r24, Y+11	; 0x0b
    1518:	9c 85       	ldd	r25, Y+12	; 0x0c
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	f1 f7       	brne	.-4      	; 0x151a <odometry_set_speed+0xcc>
    151e:	9c 87       	std	Y+12, r25	; 0x0c
    1520:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1522:	89 85       	ldd	r24, Y+9	; 0x09
    1524:	9a 85       	ldd	r25, Y+10	; 0x0a
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	9a 87       	std	Y+10, r25	; 0x0a
    152a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    152c:	89 85       	ldd	r24, Y+9	; 0x09
    152e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1530:	89 2b       	or	r24, r25
    1532:	69 f7       	brne	.-38     	; 0x150e <odometry_set_speed+0xc0>
    1534:	14 c0       	rjmp	.+40     	; 0x155e <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1536:	6d 81       	ldd	r22, Y+5	; 0x05
    1538:	7e 81       	ldd	r23, Y+6	; 0x06
    153a:	8f 81       	ldd	r24, Y+7	; 0x07
    153c:	98 85       	ldd	r25, Y+8	; 0x08
    153e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	9a 87       	std	Y+10, r25	; 0x0a
    1548:	89 87       	std	Y+9, r24	; 0x09
    154a:	89 85       	ldd	r24, Y+9	; 0x09
    154c:	9a 85       	ldd	r25, Y+10	; 0x0a
    154e:	9e 87       	std	Y+14, r25	; 0x0e
    1550:	8d 87       	std	Y+13, r24	; 0x0d
    1552:	8d 85       	ldd	r24, Y+13	; 0x0d
    1554:	9e 85       	ldd	r25, Y+14	; 0x0e
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <odometry_set_speed+0x108>
    155a:	9e 87       	std	Y+14, r25	; 0x0e
    155c:	8d 87       	std	Y+13, r24	; 0x0d
    155e:	ce 01       	movw	r24, r28
    1560:	0f 96       	adiw	r24, 0x0f	; 15
    1562:	63 ec       	ldi	r22, 0xC3	; 195
    1564:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <CAN_Write>
    1568:	88 23       	and	r24, r24
    156a:	09 f0       	breq	.+2      	; 0x156e <odometry_set_speed+0x120>
    156c:	86 cf       	rjmp	.-244    	; 0x147a <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    156e:	8f 89       	ldd	r24, Y+23	; 0x17
    1570:	80 93 64 01 	sts	0x0164, r24
}
    1574:	67 96       	adiw	r28, 0x17	; 23
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	08 95       	ret

00001586 <odometry_query_position>:
 * 	void odometry_query_position(void)
 *
 * 	Get the current position. Update it to position
 */
void odometry_query_position(void)
{
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	66 97       	sbiw	r28, 0x16	; 22
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    159a:	80 e5       	ldi	r24, 0x50	; 80
    159c:	8f 87       	std	Y+15, r24	; 0x0f
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    159e:	72 c0       	rjmp	.+228    	; 0x1684 <odometry_query_position+0xfe>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	a8 e4       	ldi	r26, 0x48	; 72
    15a6:	b2 e4       	ldi	r27, 0x42	; 66
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	ab 83       	std	Y+3, r26	; 0x03
    15ae:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e4       	ldi	r19, 0x40	; 64
    15b4:	4c e1       	ldi	r20, 0x1C	; 28
    15b6:	55 e4       	ldi	r21, 0x45	; 69
    15b8:	69 81       	ldd	r22, Y+1	; 0x01
    15ba:	7a 81       	ldd	r23, Y+2	; 0x02
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	9c 81       	ldd	r25, Y+4	; 0x04
    15c0:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	8d 83       	std	Y+5, r24	; 0x05
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	af 83       	std	Y+7, r26	; 0x07
    15ce:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e8       	ldi	r20, 0x80	; 128
    15d6:	5f e3       	ldi	r21, 0x3F	; 63
    15d8:	6d 81       	ldd	r22, Y+5	; 0x05
    15da:	7e 81       	ldd	r23, Y+6	; 0x06
    15dc:	8f 81       	ldd	r24, Y+7	; 0x07
    15de:	98 85       	ldd	r25, Y+8	; 0x08
    15e0:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    15e4:	88 23       	and	r24, r24
    15e6:	2c f4       	brge	.+10     	; 0x15f2 <odometry_query_position+0x6c>
		__ticks = 1;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	9a 87       	std	Y+10, r25	; 0x0a
    15ee:	89 87       	std	Y+9, r24	; 0x09
    15f0:	3f c0       	rjmp	.+126    	; 0x1670 <odometry_query_position+0xea>
	else if (__tmp > 65535)
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	3f ef       	ldi	r19, 0xFF	; 255
    15f6:	4f e7       	ldi	r20, 0x7F	; 127
    15f8:	57 e4       	ldi	r21, 0x47	; 71
    15fa:	6d 81       	ldd	r22, Y+5	; 0x05
    15fc:	7e 81       	ldd	r23, Y+6	; 0x06
    15fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1600:	98 85       	ldd	r25, Y+8	; 0x08
    1602:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    1606:	18 16       	cp	r1, r24
    1608:	4c f5       	brge	.+82     	; 0x165c <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e2       	ldi	r20, 0x20	; 32
    1610:	51 e4       	ldi	r21, 0x41	; 65
    1612:	69 81       	ldd	r22, Y+1	; 0x01
    1614:	7a 81       	ldd	r23, Y+2	; 0x02
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	bc 01       	movw	r22, r24
    1624:	cd 01       	movw	r24, r26
    1626:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9a 87       	std	Y+10, r25	; 0x0a
    1630:	89 87       	std	Y+9, r24	; 0x09
    1632:	0f c0       	rjmp	.+30     	; 0x1652 <odometry_query_position+0xcc>
    1634:	8a ef       	ldi	r24, 0xFA	; 250
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	9c 87       	std	Y+12, r25	; 0x0c
    163a:	8b 87       	std	Y+11, r24	; 0x0b
    163c:	8b 85       	ldd	r24, Y+11	; 0x0b
    163e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <odometry_query_position+0xba>
    1644:	9c 87       	std	Y+12, r25	; 0x0c
    1646:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1648:	89 85       	ldd	r24, Y+9	; 0x09
    164a:	9a 85       	ldd	r25, Y+10	; 0x0a
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	9a 87       	std	Y+10, r25	; 0x0a
    1650:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	9a 85       	ldd	r25, Y+10	; 0x0a
    1656:	89 2b       	or	r24, r25
    1658:	69 f7       	brne	.-38     	; 0x1634 <odometry_query_position+0xae>
    165a:	14 c0       	rjmp	.+40     	; 0x1684 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165c:	6d 81       	ldd	r22, Y+5	; 0x05
    165e:	7e 81       	ldd	r23, Y+6	; 0x06
    1660:	8f 81       	ldd	r24, Y+7	; 0x07
    1662:	98 85       	ldd	r25, Y+8	; 0x08
    1664:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	9a 87       	std	Y+10, r25	; 0x0a
    166e:	89 87       	std	Y+9, r24	; 0x09
    1670:	89 85       	ldd	r24, Y+9	; 0x09
    1672:	9a 85       	ldd	r25, Y+10	; 0x0a
    1674:	9e 87       	std	Y+14, r25	; 0x0e
    1676:	8d 87       	std	Y+13, r24	; 0x0d
    1678:	8d 85       	ldd	r24, Y+13	; 0x0d
    167a:	9e 85       	ldd	r25, Y+14	; 0x0e
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <odometry_query_position+0xf6>
    1680:	9e 87       	std	Y+14, r25	; 0x0e
    1682:	8d 87       	std	Y+13, r24	; 0x0d
    1684:	ce 01       	movw	r24, r28
    1686:	0f 96       	adiw	r24, 0x0f	; 15
    1688:	63 ec       	ldi	r22, 0xC3	; 195
    168a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <CAN_Write>
    168e:	88 23       	and	r24, r24
    1690:	09 f0       	breq	.+2      	; 0x1694 <odometry_query_position+0x10e>
    1692:	86 cf       	rjmp	.-244    	; 0x15a0 <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1694:	ce 01       	movw	r24, r28
    1696:	0f 96       	adiw	r24, 0x0f	; 15
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	0e 94 6f 06 	call	0xcde	; 0xcde <CAN_Read>

	position.state = buffer[0];
    169e:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a0:	80 93 15 01 	sts	0x0115, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    16a4:	88 89       	ldd	r24, Y+16	; 0x10
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	38 2f       	mov	r19, r24
    16ac:	22 27       	eor	r18, r18
    16ae:	89 89       	ldd	r24, Y+17	; 0x11
    16b0:	88 2f       	mov	r24, r24
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	82 2b       	or	r24, r18
    16b6:	93 2b       	or	r25, r19
    16b8:	90 93 10 01 	sts	0x0110, r25
    16bc:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    16c0:	8a 89       	ldd	r24, Y+18	; 0x12
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	38 2f       	mov	r19, r24
    16c8:	22 27       	eor	r18, r18
    16ca:	8b 89       	ldd	r24, Y+19	; 0x13
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	82 2b       	or	r24, r18
    16d2:	93 2b       	or	r25, r19
    16d4:	90 93 12 01 	sts	0x0112, r25
    16d8:	80 93 11 01 	sts	0x0111, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    16dc:	8c 89       	ldd	r24, Y+20	; 0x14
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	38 2f       	mov	r19, r24
    16e4:	22 27       	eor	r18, r18
    16e6:	8d 89       	ldd	r24, Y+21	; 0x15
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	82 2b       	or	r24, r18
    16ee:	93 2b       	or	r25, r19
    16f0:	90 93 14 01 	sts	0x0114, r25
    16f4:	80 93 13 01 	sts	0x0113, r24
}
    16f8:	66 96       	adiw	r28, 0x16	; 22
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	08 95       	ret

0000170a <odometry_wait_until_done>:
 * 	static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
 *
 * 	Callback function, execute function while odometry is moving
 */
static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	00 d0       	rcall	.+0      	; 0x1710 <odometry_wait_until_done+0x6>
    1710:	00 d0       	rcall	.+0      	; 0x1712 <odometry_wait_until_done+0x8>
    1712:	00 d0       	rcall	.+0      	; 0x1714 <odometry_wait_until_done+0xa>
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    171c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <system_get_system_time>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	9a 83       	std	Y+2, r25	; 0x02
    1728:	ab 83       	std	Y+3, r26	; 0x03
    172a:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    172c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <odometry_query_position>
		if(callback != NULL)
    1730:	8d 81       	ldd	r24, Y+5	; 0x05
    1732:	9e 81       	ldd	r25, Y+6	; 0x06
    1734:	89 2b       	or	r24, r25
    1736:	71 f0       	breq	.+28     	; 0x1754 <odometry_wait_until_done+0x4a>
		{
			if(callback(time) == 1)
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	9a 81       	ldd	r25, Y+2	; 0x02
    173c:	ab 81       	ldd	r26, Y+3	; 0x03
    173e:	bc 81       	ldd	r27, Y+4	; 0x04
    1740:	2d 81       	ldd	r18, Y+5	; 0x05
    1742:	3e 81       	ldd	r19, Y+6	; 0x06
    1744:	bc 01       	movw	r22, r24
    1746:	cd 01       	movw	r24, r26
    1748:	f9 01       	movw	r30, r18
    174a:	09 95       	icall
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	11 f4       	brne	.+4      	; 0x1754 <odometry_wait_until_done+0x4a>
				return ODOMETRY_FAIL;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	09 c0       	rjmp	.+18     	; 0x1766 <odometry_wait_until_done+0x5c>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1754:	80 91 15 01 	lds	r24, 0x0115
    1758:	8d 34       	cpi	r24, 0x4D	; 77
    175a:	41 f3       	breq	.-48     	; 0x172c <odometry_wait_until_done+0x22>
    175c:	80 91 15 01 	lds	r24, 0x0115
    1760:	82 35       	cpi	r24, 0x52	; 82
    1762:	21 f3       	breq	.-56     	; 0x172c <odometry_wait_until_done+0x22>

	return ODOMETRY_SUCCESS;
    1764:	80 e0       	ldi	r24, 0x00	; 0
}
    1766:	26 96       	adiw	r28, 0x06	; 6
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	08 95       	ret

00001778 <odometry_stop>:
 * 	void odometry_stop(int8_t type)
 *
 * 	Send stop to odometry
 */
void odometry_stop(int8_t type)
{
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	67 97       	sbiw	r28, 0x17	; 23
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    178e:	8f 89       	ldd	r24, Y+23	; 0x17
    1790:	8f 87       	std	Y+15, r24	; 0x0f

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1792:	72 c0       	rjmp	.+228    	; 0x1878 <odometry_stop+0x100>
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	a8 e4       	ldi	r26, 0x48	; 72
    179a:	b2 e4       	ldi	r27, 0x42	; 66
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	ab 83       	std	Y+3, r26	; 0x03
    17a2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e4       	ldi	r19, 0x40	; 64
    17a8:	4c e1       	ldi	r20, 0x1C	; 28
    17aa:	55 e4       	ldi	r21, 0x45	; 69
    17ac:	69 81       	ldd	r22, Y+1	; 0x01
    17ae:	7a 81       	ldd	r23, Y+2	; 0x02
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	8d 83       	std	Y+5, r24	; 0x05
    17be:	9e 83       	std	Y+6, r25	; 0x06
    17c0:	af 83       	std	Y+7, r26	; 0x07
    17c2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e8       	ldi	r20, 0x80	; 128
    17ca:	5f e3       	ldi	r21, 0x3F	; 63
    17cc:	6d 81       	ldd	r22, Y+5	; 0x05
    17ce:	7e 81       	ldd	r23, Y+6	; 0x06
    17d0:	8f 81       	ldd	r24, Y+7	; 0x07
    17d2:	98 85       	ldd	r25, Y+8	; 0x08
    17d4:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    17d8:	88 23       	and	r24, r24
    17da:	2c f4       	brge	.+10     	; 0x17e6 <odometry_stop+0x6e>
		__ticks = 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	9a 87       	std	Y+10, r25	; 0x0a
    17e2:	89 87       	std	Y+9, r24	; 0x09
    17e4:	3f c0       	rjmp	.+126    	; 0x1864 <odometry_stop+0xec>
	else if (__tmp > 65535)
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	3f ef       	ldi	r19, 0xFF	; 255
    17ea:	4f e7       	ldi	r20, 0x7F	; 127
    17ec:	57 e4       	ldi	r21, 0x47	; 71
    17ee:	6d 81       	ldd	r22, Y+5	; 0x05
    17f0:	7e 81       	ldd	r23, Y+6	; 0x06
    17f2:	8f 81       	ldd	r24, Y+7	; 0x07
    17f4:	98 85       	ldd	r25, Y+8	; 0x08
    17f6:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    17fa:	18 16       	cp	r1, r24
    17fc:	4c f5       	brge	.+82     	; 0x1850 <odometry_stop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e2       	ldi	r20, 0x20	; 32
    1804:	51 e4       	ldi	r21, 0x41	; 65
    1806:	69 81       	ldd	r22, Y+1	; 0x01
    1808:	7a 81       	ldd	r23, Y+2	; 0x02
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	9a 87       	std	Y+10, r25	; 0x0a
    1824:	89 87       	std	Y+9, r24	; 0x09
    1826:	0f c0       	rjmp	.+30     	; 0x1846 <odometry_stop+0xce>
    1828:	8a ef       	ldi	r24, 0xFA	; 250
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9c 87       	std	Y+12, r25	; 0x0c
    182e:	8b 87       	std	Y+11, r24	; 0x0b
    1830:	8b 85       	ldd	r24, Y+11	; 0x0b
    1832:	9c 85       	ldd	r25, Y+12	; 0x0c
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <odometry_stop+0xbc>
    1838:	9c 87       	std	Y+12, r25	; 0x0c
    183a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183c:	89 85       	ldd	r24, Y+9	; 0x09
    183e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	9a 87       	std	Y+10, r25	; 0x0a
    1844:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1846:	89 85       	ldd	r24, Y+9	; 0x09
    1848:	9a 85       	ldd	r25, Y+10	; 0x0a
    184a:	89 2b       	or	r24, r25
    184c:	69 f7       	brne	.-38     	; 0x1828 <odometry_stop+0xb0>
    184e:	14 c0       	rjmp	.+40     	; 0x1878 <odometry_stop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1850:	6d 81       	ldd	r22, Y+5	; 0x05
    1852:	7e 81       	ldd	r23, Y+6	; 0x06
    1854:	8f 81       	ldd	r24, Y+7	; 0x07
    1856:	98 85       	ldd	r25, Y+8	; 0x08
    1858:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9a 87       	std	Y+10, r25	; 0x0a
    1862:	89 87       	std	Y+9, r24	; 0x09
    1864:	89 85       	ldd	r24, Y+9	; 0x09
    1866:	9a 85       	ldd	r25, Y+10	; 0x0a
    1868:	9e 87       	std	Y+14, r25	; 0x0e
    186a:	8d 87       	std	Y+13, r24	; 0x0d
    186c:	8d 85       	ldd	r24, Y+13	; 0x0d
    186e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <odometry_stop+0xf8>
    1874:	9e 87       	std	Y+14, r25	; 0x0e
    1876:	8d 87       	std	Y+13, r24	; 0x0d
    1878:	ce 01       	movw	r24, r28
    187a:	0f 96       	adiw	r24, 0x0f	; 15
    187c:	63 ec       	ldi	r22, 0xC3	; 195
    187e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <CAN_Write>
    1882:	88 23       	and	r24, r24
    1884:	09 f0       	breq	.+2      	; 0x1888 <odometry_stop+0x110>
    1886:	86 cf       	rjmp	.-244    	; 0x1794 <odometry_stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    1888:	0e 94 c3 0a 	call	0x1586	; 0x1586 <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    188c:	80 91 15 01 	lds	r24, 0x0115
    1890:	8d 34       	cpi	r24, 0x4D	; 77
    1892:	09 f4       	brne	.+2      	; 0x1896 <odometry_stop+0x11e>
    1894:	7c cf       	rjmp	.-264    	; 0x178e <odometry_stop+0x16>
    1896:	80 91 15 01 	lds	r24, 0x0115
    189a:	82 35       	cpi	r24, 0x52	; 82
    189c:	09 f4       	brne	.+2      	; 0x18a0 <odometry_stop+0x128>
    189e:	77 cf       	rjmp	.-274    	; 0x178e <odometry_stop+0x16>
}
    18a0:	67 96       	adiw	r28, 0x17	; 23
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <odometry_move_straight>:
 * 	uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move straight command to odometry
 */
uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	6b 97       	sbiw	r28, 0x1b	; 27
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	98 8f       	std	Y+24, r25	; 0x18
    18c8:	8f 8b       	std	Y+23, r24	; 0x17
    18ca:	69 8f       	std	Y+25, r22	; 0x19
    18cc:	5b 8f       	std	Y+27, r21	; 0x1b
    18ce:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    18d0:	89 8d       	ldd	r24, Y+25	; 0x19
    18d2:	0e 94 27 0a 	call	0x144e	; 0x144e <odometry_set_speed>
	buffer[0] = 'D';
    18d6:	84 e4       	ldi	r24, 0x44	; 68
    18d8:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    18da:	8f 89       	ldd	r24, Y+23	; 0x17
    18dc:	98 8d       	ldd	r25, Y+24	; 0x18
    18de:	89 2f       	mov	r24, r25
    18e0:	99 0f       	add	r25, r25
    18e2:	99 0b       	sbc	r25, r25
    18e4:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    18e6:	8f 89       	ldd	r24, Y+23	; 0x17
    18e8:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    18ea:	72 c0       	rjmp	.+228    	; 0x19d0 <odometry_move_straight+0x11e>
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a8 e4       	ldi	r26, 0x48	; 72
    18f2:	b2 e4       	ldi	r27, 0x42	; 66
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	9a 83       	std	Y+2, r25	; 0x02
    18f8:	ab 83       	std	Y+3, r26	; 0x03
    18fa:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e4       	ldi	r19, 0x40	; 64
    1900:	4c e1       	ldi	r20, 0x1C	; 28
    1902:	55 e4       	ldi	r21, 0x45	; 69
    1904:	69 81       	ldd	r22, Y+1	; 0x01
    1906:	7a 81       	ldd	r23, Y+2	; 0x02
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	8d 83       	std	Y+5, r24	; 0x05
    1916:	9e 83       	std	Y+6, r25	; 0x06
    1918:	af 83       	std	Y+7, r26	; 0x07
    191a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	5f e3       	ldi	r21, 0x3F	; 63
    1924:	6d 81       	ldd	r22, Y+5	; 0x05
    1926:	7e 81       	ldd	r23, Y+6	; 0x06
    1928:	8f 81       	ldd	r24, Y+7	; 0x07
    192a:	98 85       	ldd	r25, Y+8	; 0x08
    192c:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    1930:	88 23       	and	r24, r24
    1932:	2c f4       	brge	.+10     	; 0x193e <odometry_move_straight+0x8c>
		__ticks = 1;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9a 87       	std	Y+10, r25	; 0x0a
    193a:	89 87       	std	Y+9, r24	; 0x09
    193c:	3f c0       	rjmp	.+126    	; 0x19bc <odometry_move_straight+0x10a>
	else if (__tmp > 65535)
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	3f ef       	ldi	r19, 0xFF	; 255
    1942:	4f e7       	ldi	r20, 0x7F	; 127
    1944:	57 e4       	ldi	r21, 0x47	; 71
    1946:	6d 81       	ldd	r22, Y+5	; 0x05
    1948:	7e 81       	ldd	r23, Y+6	; 0x06
    194a:	8f 81       	ldd	r24, Y+7	; 0x07
    194c:	98 85       	ldd	r25, Y+8	; 0x08
    194e:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    1952:	18 16       	cp	r1, r24
    1954:	4c f5       	brge	.+82     	; 0x19a8 <odometry_move_straight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e2       	ldi	r20, 0x20	; 32
    195c:	51 e4       	ldi	r21, 0x41	; 65
    195e:	69 81       	ldd	r22, Y+1	; 0x01
    1960:	7a 81       	ldd	r23, Y+2	; 0x02
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	bc 01       	movw	r22, r24
    1970:	cd 01       	movw	r24, r26
    1972:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	9a 87       	std	Y+10, r25	; 0x0a
    197c:	89 87       	std	Y+9, r24	; 0x09
    197e:	0f c0       	rjmp	.+30     	; 0x199e <odometry_move_straight+0xec>
    1980:	8a ef       	ldi	r24, 0xFA	; 250
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	9c 87       	std	Y+12, r25	; 0x0c
    1986:	8b 87       	std	Y+11, r24	; 0x0b
    1988:	8b 85       	ldd	r24, Y+11	; 0x0b
    198a:	9c 85       	ldd	r25, Y+12	; 0x0c
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <odometry_move_straight+0xda>
    1990:	9c 87       	std	Y+12, r25	; 0x0c
    1992:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1994:	89 85       	ldd	r24, Y+9	; 0x09
    1996:	9a 85       	ldd	r25, Y+10	; 0x0a
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	9a 87       	std	Y+10, r25	; 0x0a
    199c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199e:	89 85       	ldd	r24, Y+9	; 0x09
    19a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a2:	89 2b       	or	r24, r25
    19a4:	69 f7       	brne	.-38     	; 0x1980 <odometry_move_straight+0xce>
    19a6:	14 c0       	rjmp	.+40     	; 0x19d0 <odometry_move_straight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a8:	6d 81       	ldd	r22, Y+5	; 0x05
    19aa:	7e 81       	ldd	r23, Y+6	; 0x06
    19ac:	8f 81       	ldd	r24, Y+7	; 0x07
    19ae:	98 85       	ldd	r25, Y+8	; 0x08
    19b0:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	9a 87       	std	Y+10, r25	; 0x0a
    19ba:	89 87       	std	Y+9, r24	; 0x09
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	9e 87       	std	Y+14, r25	; 0x0e
    19c2:	8d 87       	std	Y+13, r24	; 0x0d
    19c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <odometry_move_straight+0x116>
    19cc:	9e 87       	std	Y+14, r25	; 0x0e
    19ce:	8d 87       	std	Y+13, r24	; 0x0d
    19d0:	ce 01       	movw	r24, r28
    19d2:	0f 96       	adiw	r24, 0x0f	; 15
    19d4:	63 ec       	ldi	r22, 0xC3	; 195
    19d6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <CAN_Write>
    19da:	88 23       	and	r24, r24
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <odometry_move_straight+0x12e>
    19de:	86 cf       	rjmp	.-244    	; 0x18ec <odometry_move_straight+0x3a>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    19e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19e4:	0e 94 85 0b 	call	0x170a	; 0x170a <odometry_wait_until_done>
}
    19e8:	6b 96       	adiw	r28, 0x1b	; 27
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	08 95       	ret

000019fa <odometry_move_to_position>:
 * 	uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move to position function to odometry
 */
uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, char (*callback)(uint32_t start_time))
{
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	6c 97       	sbiw	r28, 0x1c	; 28
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	98 8f       	std	Y+24, r25	; 0x18
    1a10:	8f 8b       	std	Y+23, r24	; 0x17
    1a12:	69 8f       	std	Y+25, r22	; 0x19
    1a14:	4a 8f       	std	Y+26, r20	; 0x1a
    1a16:	3c 8f       	std	Y+28, r19	; 0x1c
    1a18:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1a1a:	89 8d       	ldd	r24, Y+25	; 0x19
    1a1c:	0e 94 27 0a 	call	0x144e	; 0x144e <odometry_set_speed>

	buffer[0] = 'G';
    1a20:	87 e4       	ldi	r24, 0x47	; 71
    1a22:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    1a24:	8f 89       	ldd	r24, Y+23	; 0x17
    1a26:	98 8d       	ldd	r25, Y+24	; 0x18
    1a28:	fc 01       	movw	r30, r24
    1a2a:	80 81       	ld	r24, Z
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	89 2f       	mov	r24, r25
    1a30:	99 0f       	add	r25, r25
    1a32:	99 0b       	sbc	r25, r25
    1a34:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    1a36:	8f 89       	ldd	r24, Y+23	; 0x17
    1a38:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	80 81       	ld	r24, Z
    1a3e:	91 81       	ldd	r25, Z+1	; 0x01
    1a40:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	98 8d       	ldd	r25, Y+24	; 0x18
    1a46:	fc 01       	movw	r30, r24
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	89 2f       	mov	r24, r25
    1a4e:	99 0f       	add	r25, r25
    1a50:	99 0b       	sbc	r25, r25
    1a52:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1a54:	8f 89       	ldd	r24, Y+23	; 0x17
    1a56:	98 8d       	ldd	r25, Y+24	; 0x18
    1a58:	fc 01       	movw	r30, r24
    1a5a:	82 81       	ldd	r24, Z+2	; 0x02
    1a5c:	93 81       	ldd	r25, Z+3	; 0x03
    1a5e:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    1a60:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    1a62:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a64:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1a66:	72 c0       	rjmp	.+228    	; 0x1b4c <odometry_move_to_position+0x152>
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	a8 e4       	ldi	r26, 0x48	; 72
    1a6e:	b2 e4       	ldi	r27, 0x42	; 66
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	9a 83       	std	Y+2, r25	; 0x02
    1a74:	ab 83       	std	Y+3, r26	; 0x03
    1a76:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e4       	ldi	r19, 0x40	; 64
    1a7c:	4c e1       	ldi	r20, 0x1C	; 28
    1a7e:	55 e4       	ldi	r21, 0x45	; 69
    1a80:	69 81       	ldd	r22, Y+1	; 0x01
    1a82:	7a 81       	ldd	r23, Y+2	; 0x02
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	8d 83       	std	Y+5, r24	; 0x05
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	af 83       	std	Y+7, r26	; 0x07
    1a96:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	6d 81       	ldd	r22, Y+5	; 0x05
    1aa2:	7e 81       	ldd	r23, Y+6	; 0x06
    1aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa6:	98 85       	ldd	r25, Y+8	; 0x08
    1aa8:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    1aac:	88 23       	and	r24, r24
    1aae:	2c f4       	brge	.+10     	; 0x1aba <odometry_move_to_position+0xc0>
		__ticks = 1;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	9a 87       	std	Y+10, r25	; 0x0a
    1ab6:	89 87       	std	Y+9, r24	; 0x09
    1ab8:	3f c0       	rjmp	.+126    	; 0x1b38 <odometry_move_to_position+0x13e>
	else if (__tmp > 65535)
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	3f ef       	ldi	r19, 0xFF	; 255
    1abe:	4f e7       	ldi	r20, 0x7F	; 127
    1ac0:	57 e4       	ldi	r21, 0x47	; 71
    1ac2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ac4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ac6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac8:	98 85       	ldd	r25, Y+8	; 0x08
    1aca:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    1ace:	18 16       	cp	r1, r24
    1ad0:	4c f5       	brge	.+82     	; 0x1b24 <odometry_move_to_position+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e2       	ldi	r20, 0x20	; 32
    1ad8:	51 e4       	ldi	r21, 0x41	; 65
    1ada:	69 81       	ldd	r22, Y+1	; 0x01
    1adc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	bc 01       	movw	r22, r24
    1aec:	cd 01       	movw	r24, r26
    1aee:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	9a 87       	std	Y+10, r25	; 0x0a
    1af8:	89 87       	std	Y+9, r24	; 0x09
    1afa:	0f c0       	rjmp	.+30     	; 0x1b1a <odometry_move_to_position+0x120>
    1afc:	8a ef       	ldi	r24, 0xFA	; 250
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	9c 87       	std	Y+12, r25	; 0x0c
    1b02:	8b 87       	std	Y+11, r24	; 0x0b
    1b04:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b06:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <odometry_move_to_position+0x10e>
    1b0c:	9c 87       	std	Y+12, r25	; 0x0c
    1b0e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b10:	89 85       	ldd	r24, Y+9	; 0x09
    1b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	9a 87       	std	Y+10, r25	; 0x0a
    1b18:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1a:	89 85       	ldd	r24, Y+9	; 0x09
    1b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1e:	89 2b       	or	r24, r25
    1b20:	69 f7       	brne	.-38     	; 0x1afc <odometry_move_to_position+0x102>
    1b22:	14 c0       	rjmp	.+40     	; 0x1b4c <odometry_move_to_position+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b24:	6d 81       	ldd	r22, Y+5	; 0x05
    1b26:	7e 81       	ldd	r23, Y+6	; 0x06
    1b28:	8f 81       	ldd	r24, Y+7	; 0x07
    1b2a:	98 85       	ldd	r25, Y+8	; 0x08
    1b2c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9a 87       	std	Y+10, r25	; 0x0a
    1b36:	89 87       	std	Y+9, r24	; 0x09
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	9e 87       	std	Y+14, r25	; 0x0e
    1b3e:	8d 87       	std	Y+13, r24	; 0x0d
    1b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <odometry_move_to_position+0x14a>
    1b48:	9e 87       	std	Y+14, r25	; 0x0e
    1b4a:	8d 87       	std	Y+13, r24	; 0x0d
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	0f 96       	adiw	r24, 0x0f	; 15
    1b50:	63 ec       	ldi	r22, 0xC3	; 195
    1b52:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <CAN_Write>
    1b56:	88 23       	and	r24, r24
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <odometry_move_to_position+0x162>
    1b5a:	86 cf       	rjmp	.-244    	; 0x1a68 <odometry_move_to_position+0x6e>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b60:	0e 94 85 0b 	call	0x170a	; 0x170a <odometry_wait_until_done>
}
    1b64:	6c 96       	adiw	r28, 0x1c	; 28
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	08 95       	ret

00001b76 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	68 97       	sbiw	r28, 0x18	; 24
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	98 8f       	std	Y+24, r25	; 0x18
    1b8c:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    1b8e:	89 e4       	ldi	r24, 0x49	; 73
    1b90:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    1b92:	8f 89       	ldd	r24, Y+23	; 0x17
    1b94:	98 8d       	ldd	r25, Y+24	; 0x18
    1b96:	fc 01       	movw	r30, r24
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	89 2f       	mov	r24, r25
    1b9e:	99 0f       	add	r25, r25
    1ba0:	99 0b       	sbc	r25, r25
    1ba2:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	fc 01       	movw	r30, r24
    1baa:	80 81       	ld	r24, Z
    1bac:	91 81       	ldd	r25, Z+1	; 0x01
    1bae:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    1bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	82 81       	ldd	r24, Z+2	; 0x02
    1bb8:	93 81       	ldd	r25, Z+3	; 0x03
    1bba:	89 2f       	mov	r24, r25
    1bbc:	99 0f       	add	r25, r25
    1bbe:	99 0b       	sbc	r25, r25
    1bc0:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    1bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    1bce:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	84 81       	ldd	r24, Z+4	; 0x04
    1bd6:	95 81       	ldd	r25, Z+5	; 0x05
    1bd8:	89 2f       	mov	r24, r25
    1bda:	99 0f       	add	r25, r25
    1bdc:	99 0b       	sbc	r25, r25
    1bde:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    1be0:	8f 89       	ldd	r24, Y+23	; 0x17
    1be2:	98 8d       	ldd	r25, Y+24	; 0x18
    1be4:	fc 01       	movw	r30, r24
    1be6:	84 81       	ldd	r24, Z+4	; 0x04
    1be8:	95 81       	ldd	r25, Z+5	; 0x05
    1bea:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    1bec:	8f 89       	ldd	r24, Y+23	; 0x17
    1bee:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	80 81       	ld	r24, Z
    1bf4:	91 81       	ldd	r25, Z+1	; 0x01
    1bf6:	90 93 10 01 	sts	0x0110, r25
    1bfa:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = new_position->y;
    1bfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1c00:	98 8d       	ldd	r25, Y+24	; 0x18
    1c02:	fc 01       	movw	r30, r24
    1c04:	82 81       	ldd	r24, Z+2	; 0x02
    1c06:	93 81       	ldd	r25, Z+3	; 0x03
    1c08:	90 93 12 01 	sts	0x0112, r25
    1c0c:	80 93 11 01 	sts	0x0111, r24
	position.angle = new_position->angle;
    1c10:	8f 89       	ldd	r24, Y+23	; 0x17
    1c12:	98 8d       	ldd	r25, Y+24	; 0x18
    1c14:	fc 01       	movw	r30, r24
    1c16:	84 81       	ldd	r24, Z+4	; 0x04
    1c18:	95 81       	ldd	r25, Z+5	; 0x05
    1c1a:	90 93 14 01 	sts	0x0114, r25
    1c1e:	80 93 13 01 	sts	0x0113, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1c22:	72 c0       	rjmp	.+228    	; 0x1d08 <odometry_set_position+0x192>
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	a8 e4       	ldi	r26, 0x48	; 72
    1c2a:	b2 e4       	ldi	r27, 0x42	; 66
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	9a 83       	std	Y+2, r25	; 0x02
    1c30:	ab 83       	std	Y+3, r26	; 0x03
    1c32:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e4       	ldi	r19, 0x40	; 64
    1c38:	4c e1       	ldi	r20, 0x1C	; 28
    1c3a:	55 e4       	ldi	r21, 0x45	; 69
    1c3c:	69 81       	ldd	r22, Y+1	; 0x01
    1c3e:	7a 81       	ldd	r23, Y+2	; 0x02
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	9e 83       	std	Y+6, r25	; 0x06
    1c50:	af 83       	std	Y+7, r26	; 0x07
    1c52:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e8       	ldi	r20, 0x80	; 128
    1c5a:	5f e3       	ldi	r21, 0x3F	; 63
    1c5c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c5e:	7e 81       	ldd	r23, Y+6	; 0x06
    1c60:	8f 81       	ldd	r24, Y+7	; 0x07
    1c62:	98 85       	ldd	r25, Y+8	; 0x08
    1c64:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    1c68:	88 23       	and	r24, r24
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <odometry_set_position+0x100>
		__ticks = 1;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9a 87       	std	Y+10, r25	; 0x0a
    1c72:	89 87       	std	Y+9, r24	; 0x09
    1c74:	3f c0       	rjmp	.+126    	; 0x1cf4 <odometry_set_position+0x17e>
	else if (__tmp > 65535)
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	3f ef       	ldi	r19, 0xFF	; 255
    1c7a:	4f e7       	ldi	r20, 0x7F	; 127
    1c7c:	57 e4       	ldi	r21, 0x47	; 71
    1c7e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c80:	7e 81       	ldd	r23, Y+6	; 0x06
    1c82:	8f 81       	ldd	r24, Y+7	; 0x07
    1c84:	98 85       	ldd	r25, Y+8	; 0x08
    1c86:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    1c8a:	18 16       	cp	r1, r24
    1c8c:	4c f5       	brge	.+82     	; 0x1ce0 <odometry_set_position+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e2       	ldi	r20, 0x20	; 32
    1c94:	51 e4       	ldi	r21, 0x41	; 65
    1c96:	69 81       	ldd	r22, Y+1	; 0x01
    1c98:	7a 81       	ldd	r23, Y+2	; 0x02
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9e:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9a 87       	std	Y+10, r25	; 0x0a
    1cb4:	89 87       	std	Y+9, r24	; 0x09
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <odometry_set_position+0x160>
    1cb8:	8a ef       	ldi	r24, 0xFA	; 250
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	9c 87       	std	Y+12, r25	; 0x0c
    1cbe:	8b 87       	std	Y+11, r24	; 0x0b
    1cc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <odometry_set_position+0x14e>
    1cc8:	9c 87       	std	Y+12, r25	; 0x0c
    1cca:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ccc:	89 85       	ldd	r24, Y+9	; 0x09
    1cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	9a 87       	std	Y+10, r25	; 0x0a
    1cd4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd6:	89 85       	ldd	r24, Y+9	; 0x09
    1cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cda:	89 2b       	or	r24, r25
    1cdc:	69 f7       	brne	.-38     	; 0x1cb8 <odometry_set_position+0x142>
    1cde:	14 c0       	rjmp	.+40     	; 0x1d08 <odometry_set_position+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ce2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ce4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce6:	98 85       	ldd	r25, Y+8	; 0x08
    1ce8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	9a 87       	std	Y+10, r25	; 0x0a
    1cf2:	89 87       	std	Y+9, r24	; 0x09
    1cf4:	89 85       	ldd	r24, Y+9	; 0x09
    1cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf8:	9e 87       	std	Y+14, r25	; 0x0e
    1cfa:	8d 87       	std	Y+13, r24	; 0x0d
    1cfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <odometry_set_position+0x18a>
    1d04:	9e 87       	std	Y+14, r25	; 0x0e
    1d06:	8d 87       	std	Y+13, r24	; 0x0d
    1d08:	ce 01       	movw	r24, r28
    1d0a:	0f 96       	adiw	r24, 0x0f	; 15
    1d0c:	63 ec       	ldi	r22, 0xC3	; 195
    1d0e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <CAN_Write>
    1d12:	88 23       	and	r24, r24
    1d14:	09 f0       	breq	.+2      	; 0x1d18 <odometry_set_position+0x1a2>
    1d16:	86 cf       	rjmp	.-244    	; 0x1c24 <odometry_set_position+0xae>
		_delay_ms(50);
}
    1d18:	68 96       	adiw	r28, 0x18	; 24
    1d1a:	0f b6       	in	r0, 0x3f	; 63
    1d1c:	f8 94       	cli
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	cd bf       	out	0x3d, r28	; 61
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	08 95       	ret

00001d2a <odometry_rotate_for>:
 * 	uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send rotate for command to odometry board
 */
uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	6b 97       	sbiw	r28, 0x1b	; 27
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	98 8f       	std	Y+24, r25	; 0x18
    1d40:	8f 8b       	std	Y+23, r24	; 0x17
    1d42:	69 8f       	std	Y+25, r22	; 0x19
    1d44:	5b 8f       	std	Y+27, r21	; 0x1b
    1d46:	4a 8f       	std	Y+26, r20	; 0x1a

	uint8_t buffer[8];
	odometry_set_speed(speed);
    1d48:	89 8d       	ldd	r24, Y+25	; 0x19
    1d4a:	0e 94 27 0a 	call	0x144e	; 0x144e <odometry_set_speed>

	buffer[0] = 'T';
    1d4e:	84 e5       	ldi	r24, 0x54	; 84
    1d50:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1d52:	8f 89       	ldd	r24, Y+23	; 0x17
    1d54:	98 8d       	ldd	r25, Y+24	; 0x18
    1d56:	89 2f       	mov	r24, r25
    1d58:	99 27       	eor	r25, r25
    1d5a:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1d5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5e:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1d60:	72 c0       	rjmp	.+228    	; 0x1e46 <odometry_rotate_for+0x11c>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a8 e4       	ldi	r26, 0x48	; 72
    1d68:	b2 e4       	ldi	r27, 0x42	; 66
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	ab 83       	std	Y+3, r26	; 0x03
    1d70:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e4       	ldi	r19, 0x40	; 64
    1d76:	4c e1       	ldi	r20, 0x1C	; 28
    1d78:	55 e4       	ldi	r21, 0x45	; 69
    1d7a:	69 81       	ldd	r22, Y+1	; 0x01
    1d7c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	9c 81       	ldd	r25, Y+4	; 0x04
    1d82:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	af 83       	std	Y+7, r26	; 0x07
    1d90:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e8       	ldi	r20, 0x80	; 128
    1d98:	5f e3       	ldi	r21, 0x3F	; 63
    1d9a:	6d 81       	ldd	r22, Y+5	; 0x05
    1d9c:	7e 81       	ldd	r23, Y+6	; 0x06
    1d9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1da0:	98 85       	ldd	r25, Y+8	; 0x08
    1da2:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <odometry_rotate_for+0x8a>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9a 87       	std	Y+10, r25	; 0x0a
    1db0:	89 87       	std	Y+9, r24	; 0x09
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <odometry_rotate_for+0x108>
	else if (__tmp > 65535)
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	3f ef       	ldi	r19, 0xFF	; 255
    1db8:	4f e7       	ldi	r20, 0x7F	; 127
    1dba:	57 e4       	ldi	r21, 0x47	; 71
    1dbc:	6d 81       	ldd	r22, Y+5	; 0x05
    1dbe:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc2:	98 85       	ldd	r25, Y+8	; 0x08
    1dc4:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <odometry_rotate_for+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e2       	ldi	r20, 0x20	; 32
    1dd2:	51 e4       	ldi	r21, 0x41	; 65
    1dd4:	69 81       	ldd	r22, Y+1	; 0x01
    1dd6:	7a 81       	ldd	r23, Y+2	; 0x02
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9a 87       	std	Y+10, r25	; 0x0a
    1df2:	89 87       	std	Y+9, r24	; 0x09
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <odometry_rotate_for+0xea>
    1df6:	8a ef       	ldi	r24, 0xFA	; 250
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9c 87       	std	Y+12, r25	; 0x0c
    1dfc:	8b 87       	std	Y+11, r24	; 0x0b
    1dfe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e00:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <odometry_rotate_for+0xd8>
    1e06:	9c 87       	std	Y+12, r25	; 0x0c
    1e08:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	9a 87       	std	Y+10, r25	; 0x0a
    1e12:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	89 2b       	or	r24, r25
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <odometry_rotate_for+0xcc>
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <odometry_rotate_for+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	6d 81       	ldd	r22, Y+5	; 0x05
    1e20:	7e 81       	ldd	r23, Y+6	; 0x06
    1e22:	8f 81       	ldd	r24, Y+7	; 0x07
    1e24:	98 85       	ldd	r25, Y+8	; 0x08
    1e26:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9a 87       	std	Y+10, r25	; 0x0a
    1e30:	89 87       	std	Y+9, r24	; 0x09
    1e32:	89 85       	ldd	r24, Y+9	; 0x09
    1e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e36:	9e 87       	std	Y+14, r25	; 0x0e
    1e38:	8d 87       	std	Y+13, r24	; 0x0d
    1e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <odometry_rotate_for+0x114>
    1e42:	9e 87       	std	Y+14, r25	; 0x0e
    1e44:	8d 87       	std	Y+13, r24	; 0x0d
    1e46:	ce 01       	movw	r24, r28
    1e48:	0f 96       	adiw	r24, 0x0f	; 15
    1e4a:	63 ec       	ldi	r22, 0xC3	; 195
    1e4c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <CAN_Write>
    1e50:	88 23       	and	r24, r24
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <odometry_rotate_for+0x12c>
    1e54:	86 cf       	rjmp	.-244    	; 0x1d62 <odometry_rotate_for+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1e56:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e58:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e5a:	0e 94 85 0b 	call	0x170a	; 0x170a <odometry_wait_until_done>

}
    1e5e:	6b 96       	adiw	r28, 0x1b	; 27
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	08 95       	ret

00001e70 <odometry_set_angle>:
 * 	uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Set angle for odometry
 */
uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	6b 97       	sbiw	r28, 0x1b	; 27
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	98 8f       	std	Y+24, r25	; 0x18
    1e86:	8f 8b       	std	Y+23, r24	; 0x17
    1e88:	69 8f       	std	Y+25, r22	; 0x19
    1e8a:	5b 8f       	std	Y+27, r21	; 0x1b
    1e8c:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1e8e:	89 8d       	ldd	r24, Y+25	; 0x19
    1e90:	0e 94 27 0a 	call	0x144e	; 0x144e <odometry_set_speed>

	buffer[0] = 'A';
    1e94:	81 e4       	ldi	r24, 0x41	; 65
    1e96:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1e98:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9c:	89 2f       	mov	r24, r25
    1e9e:	99 27       	eor	r25, r25
    1ea0:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1ea2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea4:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1ea6:	72 c0       	rjmp	.+228    	; 0x1f8c <odometry_set_angle+0x11c>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a8 e4       	ldi	r26, 0x48	; 72
    1eae:	b2 e4       	ldi	r27, 0x42	; 66
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	ab 83       	std	Y+3, r26	; 0x03
    1eb6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e4       	ldi	r19, 0x40	; 64
    1ebc:	4c e1       	ldi	r20, 0x1C	; 28
    1ebe:	55 e4       	ldi	r21, 0x45	; 69
    1ec0:	69 81       	ldd	r22, Y+1	; 0x01
    1ec2:	7a 81       	ldd	r23, Y+2	; 0x02
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	8d 83       	std	Y+5, r24	; 0x05
    1ed2:	9e 83       	std	Y+6, r25	; 0x06
    1ed4:	af 83       	std	Y+7, r26	; 0x07
    1ed6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ee2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee6:	98 85       	ldd	r25, Y+8	; 0x08
    1ee8:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	2c f4       	brge	.+10     	; 0x1efa <odometry_set_angle+0x8a>
		__ticks = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9a 87       	std	Y+10, r25	; 0x0a
    1ef6:	89 87       	std	Y+9, r24	; 0x09
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <odometry_set_angle+0x108>
	else if (__tmp > 65535)
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	3f ef       	ldi	r19, 0xFF	; 255
    1efe:	4f e7       	ldi	r20, 0x7F	; 127
    1f00:	57 e4       	ldi	r21, 0x47	; 71
    1f02:	6d 81       	ldd	r22, Y+5	; 0x05
    1f04:	7e 81       	ldd	r23, Y+6	; 0x06
    1f06:	8f 81       	ldd	r24, Y+7	; 0x07
    1f08:	98 85       	ldd	r25, Y+8	; 0x08
    1f0a:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	4c f5       	brge	.+82     	; 0x1f64 <odometry_set_angle+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e2       	ldi	r20, 0x20	; 32
    1f18:	51 e4       	ldi	r21, 0x41	; 65
    1f1a:	69 81       	ldd	r22, Y+1	; 0x01
    1f1c:	7a 81       	ldd	r23, Y+2	; 0x02
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	9c 81       	ldd	r25, Y+4	; 0x04
    1f22:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9a 87       	std	Y+10, r25	; 0x0a
    1f38:	89 87       	std	Y+9, r24	; 0x09
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <odometry_set_angle+0xea>
    1f3c:	8a ef       	ldi	r24, 0xFA	; 250
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9c 87       	std	Y+12, r25	; 0x0c
    1f42:	8b 87       	std	Y+11, r24	; 0x0b
    1f44:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f46:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <odometry_set_angle+0xd8>
    1f4c:	9c 87       	std	Y+12, r25	; 0x0c
    1f4e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	89 85       	ldd	r24, Y+9	; 0x09
    1f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	9a 87       	std	Y+10, r25	; 0x0a
    1f58:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	89 85       	ldd	r24, Y+9	; 0x09
    1f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5e:	89 2b       	or	r24, r25
    1f60:	69 f7       	brne	.-38     	; 0x1f3c <odometry_set_angle+0xcc>
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <odometry_set_angle+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	6d 81       	ldd	r22, Y+5	; 0x05
    1f66:	7e 81       	ldd	r23, Y+6	; 0x06
    1f68:	8f 81       	ldd	r24, Y+7	; 0x07
    1f6a:	98 85       	ldd	r25, Y+8	; 0x08
    1f6c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9a 87       	std	Y+10, r25	; 0x0a
    1f76:	89 87       	std	Y+9, r24	; 0x09
    1f78:	89 85       	ldd	r24, Y+9	; 0x09
    1f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7c:	9e 87       	std	Y+14, r25	; 0x0e
    1f7e:	8d 87       	std	Y+13, r24	; 0x0d
    1f80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <odometry_set_angle+0x114>
    1f88:	9e 87       	std	Y+14, r25	; 0x0e
    1f8a:	8d 87       	std	Y+13, r24	; 0x0d
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	0f 96       	adiw	r24, 0x0f	; 15
    1f90:	63 ec       	ldi	r22, 0xC3	; 195
    1f92:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <CAN_Write>
    1f96:	88 23       	and	r24, r24
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <odometry_set_angle+0x12c>
    1f9a:	86 cf       	rjmp	.-244    	; 0x1ea8 <odometry_set_angle+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1f9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f9e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fa0:	0e 94 85 0b 	call	0x170a	; 0x170a <odometry_wait_until_done>
}
    1fa4:	6b 96       	adiw	r28, 0x1b	; 27
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	08 95       	ret

00001fb6 <odometry_kurva>:

uint8_t odometry_kurva(uint16_t x_pos, uint16_t y_pos, int8_t angle, uint8_t direction, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1fb6:	ef 92       	push	r14
    1fb8:	ff 92       	push	r15
    1fba:	0f 93       	push	r16
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	6f 97       	sbiw	r28, 0x1f	; 31
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	98 8f       	std	Y+24, r25	; 0x18
    1fd2:	8f 8b       	std	Y+23, r24	; 0x17
    1fd4:	7a 8f       	std	Y+26, r23	; 0x1a
    1fd6:	69 8f       	std	Y+25, r22	; 0x19
    1fd8:	4b 8f       	std	Y+27, r20	; 0x1b
    1fda:	2c 8f       	std	Y+28, r18	; 0x1c
    1fdc:	0d 8f       	std	Y+29, r16	; 0x1d
    1fde:	ff 8e       	std	Y+31, r15	; 0x1f
    1fe0:	ee 8e       	std	Y+30, r14	; 0x1e
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1fe2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fe4:	0e 94 27 0a 	call	0x144e	; 0x144e <odometry_set_speed>

	buffer[0] = 'Q';
    1fe8:	81 e5       	ldi	r24, 0x51	; 81
    1fea:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = x_pos >> 8;
    1fec:	8f 89       	ldd	r24, Y+23	; 0x17
    1fee:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff0:	89 2f       	mov	r24, r25
    1ff2:	99 27       	eor	r25, r25
    1ff4:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = x_pos & 0xFF;
    1ff6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff8:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = y_pos >> 8;
    1ffa:	89 8d       	ldd	r24, Y+25	; 0x19
    1ffc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ffe:	89 2f       	mov	r24, r25
    2000:	99 27       	eor	r25, r25
    2002:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = y_pos & 0xFF;
    2004:	89 8d       	ldd	r24, Y+25	; 0x19
    2006:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = angle >> 8;
    2008:	8b 8d       	ldd	r24, Y+27	; 0x1b
    200a:	08 2e       	mov	r0, r24
    200c:	00 0c       	add	r0, r0
    200e:	99 0b       	sbc	r25, r25
    2010:	89 2f       	mov	r24, r25
    2012:	99 0f       	add	r25, r25
    2014:	99 0b       	sbc	r25, r25
    2016:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = angle & 0xFF;
    2018:	8b 8d       	ldd	r24, Y+27	; 0x1b
    201a:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[7] = direction;
    201c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    201e:	8e 8b       	std	Y+22, r24	; 0x16

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2020:	72 c0       	rjmp	.+228    	; 0x2106 <odometry_kurva+0x150>
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	a8 e4       	ldi	r26, 0x48	; 72
    2028:	b2 e4       	ldi	r27, 0x42	; 66
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	ab 83       	std	Y+3, r26	; 0x03
    2030:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e4       	ldi	r19, 0x40	; 64
    2036:	4c e1       	ldi	r20, 0x1C	; 28
    2038:	55 e4       	ldi	r21, 0x45	; 69
    203a:	69 81       	ldd	r22, Y+1	; 0x01
    203c:	7a 81       	ldd	r23, Y+2	; 0x02
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	9c 81       	ldd	r25, Y+4	; 0x04
    2042:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	8d 83       	std	Y+5, r24	; 0x05
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	af 83       	std	Y+7, r26	; 0x07
    2050:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e8       	ldi	r20, 0x80	; 128
    2058:	5f e3       	ldi	r21, 0x3F	; 63
    205a:	6d 81       	ldd	r22, Y+5	; 0x05
    205c:	7e 81       	ldd	r23, Y+6	; 0x06
    205e:	8f 81       	ldd	r24, Y+7	; 0x07
    2060:	98 85       	ldd	r25, Y+8	; 0x08
    2062:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    2066:	88 23       	and	r24, r24
    2068:	2c f4       	brge	.+10     	; 0x2074 <odometry_kurva+0xbe>
		__ticks = 1;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9a 87       	std	Y+10, r25	; 0x0a
    2070:	89 87       	std	Y+9, r24	; 0x09
    2072:	3f c0       	rjmp	.+126    	; 0x20f2 <odometry_kurva+0x13c>
	else if (__tmp > 65535)
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	3f ef       	ldi	r19, 0xFF	; 255
    2078:	4f e7       	ldi	r20, 0x7F	; 127
    207a:	57 e4       	ldi	r21, 0x47	; 71
    207c:	6d 81       	ldd	r22, Y+5	; 0x05
    207e:	7e 81       	ldd	r23, Y+6	; 0x06
    2080:	8f 81       	ldd	r24, Y+7	; 0x07
    2082:	98 85       	ldd	r25, Y+8	; 0x08
    2084:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    2088:	18 16       	cp	r1, r24
    208a:	4c f5       	brge	.+82     	; 0x20de <odometry_kurva+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	40 e2       	ldi	r20, 0x20	; 32
    2092:	51 e4       	ldi	r21, 0x41	; 65
    2094:	69 81       	ldd	r22, Y+1	; 0x01
    2096:	7a 81       	ldd	r23, Y+2	; 0x02
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	bc 01       	movw	r22, r24
    20a6:	cd 01       	movw	r24, r26
    20a8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9a 87       	std	Y+10, r25	; 0x0a
    20b2:	89 87       	std	Y+9, r24	; 0x09
    20b4:	0f c0       	rjmp	.+30     	; 0x20d4 <odometry_kurva+0x11e>
    20b6:	8a ef       	ldi	r24, 0xFA	; 250
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9c 87       	std	Y+12, r25	; 0x0c
    20bc:	8b 87       	std	Y+11, r24	; 0x0b
    20be:	8b 85       	ldd	r24, Y+11	; 0x0b
    20c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <odometry_kurva+0x10c>
    20c6:	9c 87       	std	Y+12, r25	; 0x0c
    20c8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	9a 87       	std	Y+10, r25	; 0x0a
    20d2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	89 85       	ldd	r24, Y+9	; 0x09
    20d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d8:	89 2b       	or	r24, r25
    20da:	69 f7       	brne	.-38     	; 0x20b6 <odometry_kurva+0x100>
    20dc:	14 c0       	rjmp	.+40     	; 0x2106 <odometry_kurva+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20de:	6d 81       	ldd	r22, Y+5	; 0x05
    20e0:	7e 81       	ldd	r23, Y+6	; 0x06
    20e2:	8f 81       	ldd	r24, Y+7	; 0x07
    20e4:	98 85       	ldd	r25, Y+8	; 0x08
    20e6:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9a 87       	std	Y+10, r25	; 0x0a
    20f0:	89 87       	std	Y+9, r24	; 0x09
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	9e 87       	std	Y+14, r25	; 0x0e
    20f8:	8d 87       	std	Y+13, r24	; 0x0d
    20fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f1 f7       	brne	.-4      	; 0x20fe <odometry_kurva+0x148>
    2102:	9e 87       	std	Y+14, r25	; 0x0e
    2104:	8d 87       	std	Y+13, r24	; 0x0d
    2106:	ce 01       	movw	r24, r28
    2108:	0f 96       	adiw	r24, 0x0f	; 15
    210a:	63 ec       	ldi	r22, 0xC3	; 195
    210c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <CAN_Write>
    2110:	88 23       	and	r24, r24
    2112:	09 f0       	breq	.+2      	; 0x2116 <odometry_kurva+0x160>
    2114:	86 cf       	rjmp	.-244    	; 0x2022 <odometry_kurva+0x6c>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2116:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2118:	9f 8d       	ldd	r25, Y+31	; 0x1f
    211a:	0e 94 85 0b 	call	0x170a	; 0x170a <odometry_wait_until_done>
}
    211e:	6f 96       	adiw	r28, 0x1f	; 31
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	0f 91       	pop	r16
    2130:	ff 90       	pop	r15
    2132:	ef 90       	pop	r14
    2134:	08 95       	ret

00002136 <odometry_match_end>:

void odometry_match_end()
{
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	66 97       	sbiw	r28, 0x16	; 22
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];

	buffer[0] = 'K';
    214a:	8b e4       	ldi	r24, 0x4B	; 75
    214c:	8f 87       	std	Y+15, r24	; 0x0f

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    214e:	72 c0       	rjmp	.+228    	; 0x2234 <odometry_match_end+0xfe>
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a8 e4       	ldi	r26, 0x48	; 72
    2156:	b2 e4       	ldi	r27, 0x42	; 66
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	9a 83       	std	Y+2, r25	; 0x02
    215c:	ab 83       	std	Y+3, r26	; 0x03
    215e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e4       	ldi	r19, 0x40	; 64
    2164:	4c e1       	ldi	r20, 0x1C	; 28
    2166:	55 e4       	ldi	r21, 0x45	; 69
    2168:	69 81       	ldd	r22, Y+1	; 0x01
    216a:	7a 81       	ldd	r23, Y+2	; 0x02
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	9c 81       	ldd	r25, Y+4	; 0x04
    2170:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	8d 83       	std	Y+5, r24	; 0x05
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	af 83       	std	Y+7, r26	; 0x07
    217e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	6d 81       	ldd	r22, Y+5	; 0x05
    218a:	7e 81       	ldd	r23, Y+6	; 0x06
    218c:	8f 81       	ldd	r24, Y+7	; 0x07
    218e:	98 85       	ldd	r25, Y+8	; 0x08
    2190:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    2194:	88 23       	and	r24, r24
    2196:	2c f4       	brge	.+10     	; 0x21a2 <odometry_match_end+0x6c>
		__ticks = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	9a 87       	std	Y+10, r25	; 0x0a
    219e:	89 87       	std	Y+9, r24	; 0x09
    21a0:	3f c0       	rjmp	.+126    	; 0x2220 <odometry_match_end+0xea>
	else if (__tmp > 65535)
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	3f ef       	ldi	r19, 0xFF	; 255
    21a6:	4f e7       	ldi	r20, 0x7F	; 127
    21a8:	57 e4       	ldi	r21, 0x47	; 71
    21aa:	6d 81       	ldd	r22, Y+5	; 0x05
    21ac:	7e 81       	ldd	r23, Y+6	; 0x06
    21ae:	8f 81       	ldd	r24, Y+7	; 0x07
    21b0:	98 85       	ldd	r25, Y+8	; 0x08
    21b2:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	4c f5       	brge	.+82     	; 0x220c <odometry_match_end+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	51 e4       	ldi	r21, 0x41	; 65
    21c2:	69 81       	ldd	r22, Y+1	; 0x01
    21c4:	7a 81       	ldd	r23, Y+2	; 0x02
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9a 87       	std	Y+10, r25	; 0x0a
    21e0:	89 87       	std	Y+9, r24	; 0x09
    21e2:	0f c0       	rjmp	.+30     	; 0x2202 <odometry_match_end+0xcc>
    21e4:	8a ef       	ldi	r24, 0xFA	; 250
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9c 87       	std	Y+12, r25	; 0x0c
    21ea:	8b 87       	std	Y+11, r24	; 0x0b
    21ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    21ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <odometry_match_end+0xba>
    21f4:	9c 87       	std	Y+12, r25	; 0x0c
    21f6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	9a 87       	std	Y+10, r25	; 0x0a
    2200:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2202:	89 85       	ldd	r24, Y+9	; 0x09
    2204:	9a 85       	ldd	r25, Y+10	; 0x0a
    2206:	89 2b       	or	r24, r25
    2208:	69 f7       	brne	.-38     	; 0x21e4 <odometry_match_end+0xae>
    220a:	14 c0       	rjmp	.+40     	; 0x2234 <odometry_match_end+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220c:	6d 81       	ldd	r22, Y+5	; 0x05
    220e:	7e 81       	ldd	r23, Y+6	; 0x06
    2210:	8f 81       	ldd	r24, Y+7	; 0x07
    2212:	98 85       	ldd	r25, Y+8	; 0x08
    2214:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	9a 87       	std	Y+10, r25	; 0x0a
    221e:	89 87       	std	Y+9, r24	; 0x09
    2220:	89 85       	ldd	r24, Y+9	; 0x09
    2222:	9a 85       	ldd	r25, Y+10	; 0x0a
    2224:	9e 87       	std	Y+14, r25	; 0x0e
    2226:	8d 87       	std	Y+13, r24	; 0x0d
    2228:	8d 85       	ldd	r24, Y+13	; 0x0d
    222a:	9e 85       	ldd	r25, Y+14	; 0x0e
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <odometry_match_end+0xf6>
    2230:	9e 87       	std	Y+14, r25	; 0x0e
    2232:	8d 87       	std	Y+13, r24	; 0x0d
    2234:	ce 01       	movw	r24, r28
    2236:	0f 96       	adiw	r24, 0x0f	; 15
    2238:	63 ec       	ldi	r22, 0xC3	; 195
    223a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <CAN_Write>
    223e:	88 23       	and	r24, r24
    2240:	09 f0       	breq	.+2      	; 0x2244 <odometry_match_end+0x10e>
    2242:	86 cf       	rjmp	.-244    	; 0x2150 <odometry_match_end+0x1a>
			_delay_ms(50);

}
    2244:	66 96       	adiw	r28, 0x16	; 22
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	08 95       	ret

00002256 <getState>:

/*
 * 	Update position
 */
uint8_t getState(void)
{
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    225e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <odometry_query_position>
	return position.state;
    2262:	80 91 15 01 	lds	r24, 0x0115
}
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	08 95       	ret

0000226c <odometry_get_x>:

int16_t odometry_get_x(void)
{
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2274:	0e 94 c3 0a 	call	0x1586	; 0x1586 <odometry_query_position>
	return position.x;
    2278:	80 91 0f 01 	lds	r24, 0x010F
    227c:	90 91 10 01 	lds	r25, 0x0110
}
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	08 95       	ret

00002286 <odometry_get_y>:

int16_t odometry_get_y(void)
{
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    228e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <odometry_query_position>
	return position.y;
    2292:	80 91 11 01 	lds	r24, 0x0111
    2296:	90 91 12 01 	lds	r25, 0x0112
}
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	08 95       	ret

000022a0 <odometry_get_angle>:

int16_t odometry_get_angle(void)
{
    22a0:	cf 93       	push	r28
    22a2:	df 93       	push	r29
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    22a8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <odometry_query_position>
	return position.angle;
    22ac:	80 91 13 01 	lds	r24, 0x0113
    22b0:	90 91 14 01 	lds	r25, 0x0114
}
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	08 95       	ret

000022ba <timer_register_callback>:
 *	Function: 		void timer_register_callback(void (*callback)(void))
 *	Parameters: 	void (*callback)(void))
 *	Description: 	timer callbacks
 */
void timer_register_callback(void (*callback)(void))
{
    22ba:	cf 93       	push	r28
    22bc:	df 93       	push	r29
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <timer_register_callback+0x6>
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	9a 83       	std	Y+2, r25	; 0x02
    22c6:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	9a 81       	ldd	r25, Y+2	; 0x02
    22cc:	90 93 6b 01 	sts	0x016B, r25
    22d0:	80 93 6a 01 	sts	0x016A, r24
}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	08 95       	ret

000022de <timer_init>:
 *	Function: 		void timer_init(unsigned int freq)
 *	Parameters: 	unsigned int freq - frequency of timer
 *	Description: 	setup timer
 */
void timer_init(unsigned int freq)
{
    22de:	0f 93       	push	r16
    22e0:	1f 93       	push	r17
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <timer_init+0xa>
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01

    TCCR1A = 0;
    22f0:	80 e8       	ldi	r24, 0x80	; 128
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	fc 01       	movw	r30, r24
    22f6:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    22f8:	81 e8       	ldi	r24, 0x81	; 129
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	29 e0       	ldi	r18, 0x09	; 9
    22fe:	fc 01       	movw	r30, r24
    2300:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    2302:	08 e8       	ldi	r16, 0x88	; 136
    2304:	10 e0       	ldi	r17, 0x00	; 0
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	cc 01       	movw	r24, r24
    230c:	a0 e0       	ldi	r26, 0x00	; 0
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	bc 01       	movw	r22, r24
    2312:	cd 01       	movw	r24, r26
    2314:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <__floatunsisf>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9c 01       	movw	r18, r24
    231e:	ad 01       	movw	r20, r26
    2320:	60 e8       	ldi	r22, 0x80	; 128
    2322:	76 e9       	ldi	r23, 0x96	; 150
    2324:	88 e1       	ldi	r24, 0x18	; 24
    2326:	9b e4       	ldi	r25, 0x4B	; 75
    2328:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <__divsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e0       	ldi	r20, 0x00	; 0
    2336:	5f e3       	ldi	r21, 0x3F	; 63
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__addsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	f8 01       	movw	r30, r16
    2352:	91 83       	std	Z+1, r25	; 0x01
    2354:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2356:	8f e6       	ldi	r24, 0x6F	; 111
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	22 e0       	ldi	r18, 0x02	; 2
    235c:	fc 01       	movw	r30, r24
    235e:	20 83       	st	Z, r18

	SREG |= 0x80;
    2360:	8f e5       	ldi	r24, 0x5F	; 95
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	2f e5       	ldi	r18, 0x5F	; 95
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	f9 01       	movw	r30, r18
    236a:	20 81       	ld	r18, Z
    236c:	20 68       	ori	r18, 0x80	; 128
    236e:	fc 01       	movw	r30, r24
    2370:	20 83       	st	Z, r18
}
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	df 91       	pop	r29
    2378:	cf 91       	pop	r28
    237a:	1f 91       	pop	r17
    237c:	0f 91       	pop	r16
    237e:	08 95       	ret

00002380 <__vector_12>:
/*
 *	Function: 		ISR(TIMER1_COMPA_vect)
 *	Description: 	ISR interrupt for timer
 */
ISR(TIMER1_COMPA_vect)
{
    2380:	1f 92       	push	r1
    2382:	0f 92       	push	r0
    2384:	00 90 5f 00 	lds	r0, 0x005F
    2388:	0f 92       	push	r0
    238a:	11 24       	eor	r1, r1
    238c:	00 90 5b 00 	lds	r0, 0x005B
    2390:	0f 92       	push	r0
    2392:	2f 93       	push	r18
    2394:	3f 93       	push	r19
    2396:	4f 93       	push	r20
    2398:	5f 93       	push	r21
    239a:	6f 93       	push	r22
    239c:	7f 93       	push	r23
    239e:	8f 93       	push	r24
    23a0:	9f 93       	push	r25
    23a2:	af 93       	push	r26
    23a4:	bf 93       	push	r27
    23a6:	ef 93       	push	r30
    23a8:	ff 93       	push	r31
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	62 97       	sbiw	r28, 0x12	; 18
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	cd bf       	out	0x3d, r28	; 61
    if(timer_callback != NULL)
    23b8:	80 91 6a 01 	lds	r24, 0x016A
    23bc:	90 91 6b 01 	lds	r25, 0x016B
    23c0:	89 2b       	or	r24, r25
    23c2:	31 f0       	breq	.+12     	; 0x23d0 <__vector_12+0x50>
        timer_callback();
    23c4:	80 91 6a 01 	lds	r24, 0x016A
    23c8:	90 91 6b 01 	lds	r25, 0x016B
    23cc:	fc 01       	movw	r30, r24
    23ce:	09 95       	icall
	if(sys_time >= 90000)					// if match end
    23d0:	80 91 65 01 	lds	r24, 0x0165
    23d4:	90 91 66 01 	lds	r25, 0x0166
    23d8:	a0 91 67 01 	lds	r26, 0x0167
    23dc:	b0 91 68 01 	lds	r27, 0x0168
    23e0:	80 39       	cpi	r24, 0x90	; 144
    23e2:	9f 45       	sbci	r25, 0x5F	; 95
    23e4:	a1 40       	sbci	r26, 0x01	; 1
    23e6:	b1 05       	cpc	r27, r1
    23e8:	08 f4       	brcc	.+2      	; 0x23ec <__vector_12+0x6c>
    23ea:	84 c0       	rjmp	.+264    	; 0x24f4 <__vector_12+0x174>
	{
		if(system_get_match_started())		// if the match has started before
    23ec:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <system_get_match_started>
    23f0:	88 23       	and	r24, r24
    23f2:	09 f4       	brne	.+2      	; 0x23f6 <__vector_12+0x76>
    23f4:	7f c0       	rjmp	.+254    	; 0x24f4 <__vector_12+0x174>
		{
			odometry_match_end();
    23f6:	0e 94 9b 10 	call	0x2136	; 0x2136 <odometry_match_end>
			while(1) {
				PORTG ^= 1 << 0;
    23fa:	84 e3       	ldi	r24, 0x34	; 52
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	24 e3       	ldi	r18, 0x34	; 52
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	f9 01       	movw	r30, r18
    2404:	30 81       	ld	r19, Z
    2406:	21 e0       	ldi	r18, 0x01	; 1
    2408:	23 27       	eor	r18, r19
    240a:	fc 01       	movw	r30, r24
    240c:	20 83       	st	Z, r18
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	aa e7       	ldi	r26, 0x7A	; 122
    2414:	b4 e4       	ldi	r27, 0x44	; 68
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	9a 83       	std	Y+2, r25	; 0x02
    241a:	ab 83       	std	Y+3, r26	; 0x03
    241c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e4       	ldi	r19, 0x40	; 64
    2422:	4c e1       	ldi	r20, 0x1C	; 28
    2424:	55 e4       	ldi	r21, 0x45	; 69
    2426:	69 81       	ldd	r22, Y+1	; 0x01
    2428:	7a 81       	ldd	r23, Y+2	; 0x02
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	9c 81       	ldd	r25, Y+4	; 0x04
    242e:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	8d 83       	std	Y+5, r24	; 0x05
    2438:	9e 83       	std	Y+6, r25	; 0x06
    243a:	af 83       	std	Y+7, r26	; 0x07
    243c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e8       	ldi	r20, 0x80	; 128
    2444:	5f e3       	ldi	r21, 0x3F	; 63
    2446:	6d 81       	ldd	r22, Y+5	; 0x05
    2448:	7e 81       	ldd	r23, Y+6	; 0x06
    244a:	8f 81       	ldd	r24, Y+7	; 0x07
    244c:	98 85       	ldd	r25, Y+8	; 0x08
    244e:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    2452:	88 23       	and	r24, r24
    2454:	2c f4       	brge	.+10     	; 0x2460 <__vector_12+0xe0>
		__ticks = 1;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9a 87       	std	Y+10, r25	; 0x0a
    245c:	89 87       	std	Y+9, r24	; 0x09
    245e:	3f c0       	rjmp	.+126    	; 0x24de <__vector_12+0x15e>
	else if (__tmp > 65535)
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	3f ef       	ldi	r19, 0xFF	; 255
    2464:	4f e7       	ldi	r20, 0x7F	; 127
    2466:	57 e4       	ldi	r21, 0x47	; 71
    2468:	6d 81       	ldd	r22, Y+5	; 0x05
    246a:	7e 81       	ldd	r23, Y+6	; 0x06
    246c:	8f 81       	ldd	r24, Y+7	; 0x07
    246e:	98 85       	ldd	r25, Y+8	; 0x08
    2470:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    2474:	18 16       	cp	r1, r24
    2476:	4c f5       	brge	.+82     	; 0x24ca <__vector_12+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e2       	ldi	r20, 0x20	; 32
    247e:	51 e4       	ldi	r21, 0x41	; 65
    2480:	69 81       	ldd	r22, Y+1	; 0x01
    2482:	7a 81       	ldd	r23, Y+2	; 0x02
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	bc 01       	movw	r22, r24
    2492:	cd 01       	movw	r24, r26
    2494:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9a 87       	std	Y+10, r25	; 0x0a
    249e:	89 87       	std	Y+9, r24	; 0x09
    24a0:	0f c0       	rjmp	.+30     	; 0x24c0 <__vector_12+0x140>
    24a2:	8a ef       	ldi	r24, 0xFA	; 250
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9c 87       	std	Y+12, r25	; 0x0c
    24a8:	8b 87       	std	Y+11, r24	; 0x0b
    24aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    24ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <__vector_12+0x12e>
    24b2:	9c 87       	std	Y+12, r25	; 0x0c
    24b4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	9a 87       	std	Y+10, r25	; 0x0a
    24be:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c0:	89 85       	ldd	r24, Y+9	; 0x09
    24c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c4:	89 2b       	or	r24, r25
    24c6:	69 f7       	brne	.-38     	; 0x24a2 <__vector_12+0x122>
    24c8:	14 c0       	rjmp	.+40     	; 0x24f2 <__vector_12+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ca:	6d 81       	ldd	r22, Y+5	; 0x05
    24cc:	7e 81       	ldd	r23, Y+6	; 0x06
    24ce:	8f 81       	ldd	r24, Y+7	; 0x07
    24d0:	98 85       	ldd	r25, Y+8	; 0x08
    24d2:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	9a 87       	std	Y+10, r25	; 0x0a
    24dc:	89 87       	std	Y+9, r24	; 0x09
    24de:	89 85       	ldd	r24, Y+9	; 0x09
    24e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e2:	9e 87       	std	Y+14, r25	; 0x0e
    24e4:	8d 87       	std	Y+13, r24	; 0x0d
    24e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <__vector_12+0x16a>
    24ee:	9e 87       	std	Y+14, r25	; 0x0e
    24f0:	8d 87       	std	Y+13, r24	; 0x0d
				_delay_ms(1000);
			}
    24f2:	83 cf       	rjmp	.-250    	; 0x23fa <__vector_12+0x7a>
		}
	}

	// for testing if the timer is working
	if((sys_time % 1000) == 0 && !setup_complete) {
    24f4:	80 91 65 01 	lds	r24, 0x0165
    24f8:	90 91 66 01 	lds	r25, 0x0166
    24fc:	a0 91 67 01 	lds	r26, 0x0167
    2500:	b0 91 68 01 	lds	r27, 0x0168
    2504:	28 ee       	ldi	r18, 0xE8	; 232
    2506:	33 e0       	ldi	r19, 0x03	; 3
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	bc 01       	movw	r22, r24
    250e:	cd 01       	movw	r24, r26
    2510:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <__udivmodsi4>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	89 2b       	or	r24, r25
    251a:	8a 2b       	or	r24, r26
    251c:	8b 2b       	or	r24, r27
    251e:	71 f4       	brne	.+28     	; 0x253c <__vector_12+0x1bc>
    2520:	80 91 6f 01 	lds	r24, 0x016F
    2524:	88 23       	and	r24, r24
    2526:	51 f4       	brne	.+20     	; 0x253c <__vector_12+0x1bc>

		PORTG ^= 1 << 0;
    2528:	84 e3       	ldi	r24, 0x34	; 52
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	24 e3       	ldi	r18, 0x34	; 52
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	f9 01       	movw	r30, r18
    2532:	30 81       	ld	r19, Z
    2534:	21 e0       	ldi	r18, 0x01	; 1
    2536:	23 27       	eor	r18, r19
    2538:	fc 01       	movw	r30, r24
    253a:	20 83       	st	Z, r18
	}

	sys_time++;
    253c:	80 91 65 01 	lds	r24, 0x0165
    2540:	90 91 66 01 	lds	r25, 0x0166
    2544:	a0 91 67 01 	lds	r26, 0x0167
    2548:	b0 91 68 01 	lds	r27, 0x0168
    254c:	01 96       	adiw	r24, 0x01	; 1
    254e:	a1 1d       	adc	r26, r1
    2550:	b1 1d       	adc	r27, r1
    2552:	80 93 65 01 	sts	0x0165, r24
    2556:	90 93 66 01 	sts	0x0166, r25
    255a:	a0 93 67 01 	sts	0x0167, r26
    255e:	b0 93 68 01 	sts	0x0168, r27


}
    2562:	62 96       	adiw	r28, 0x12	; 18
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	ff 91       	pop	r31
    2574:	ef 91       	pop	r30
    2576:	bf 91       	pop	r27
    2578:	af 91       	pop	r26
    257a:	9f 91       	pop	r25
    257c:	8f 91       	pop	r24
    257e:	7f 91       	pop	r23
    2580:	6f 91       	pop	r22
    2582:	5f 91       	pop	r21
    2584:	4f 91       	pop	r20
    2586:	3f 91       	pop	r19
    2588:	2f 91       	pop	r18
    258a:	0f 90       	pop	r0
    258c:	00 92 5b 00 	sts	0x005B, r0
    2590:	0f 90       	pop	r0
    2592:	00 92 5f 00 	sts	0x005F, r0
    2596:	0f 90       	pop	r0
    2598:	1f 90       	pop	r1
    259a:	18 95       	reti

0000259c <system_reset_system_time>:

void system_reset_system_time(void) 	{ 	sys_time = 0; 			}
    259c:	cf 93       	push	r28
    259e:	df 93       	push	r29
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	10 92 65 01 	sts	0x0165, r1
    25a8:	10 92 66 01 	sts	0x0166, r1
    25ac:	10 92 67 01 	sts	0x0167, r1
    25b0:	10 92 68 01 	sts	0x0168, r1
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	08 95       	ret

000025ba <system_set_match_started>:
void system_set_match_started(void) 	{ 	match_started = 1; 		}
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	80 93 69 01 	sts	0x0169, r24
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	08 95       	ret

000025ce <system_get_system_time>:
uint32_t system_get_system_time(void) 	{ 	return sys_time; 		}
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	80 91 65 01 	lds	r24, 0x0165
    25da:	90 91 66 01 	lds	r25, 0x0166
    25de:	a0 91 67 01 	lds	r26, 0x0167
    25e2:	b0 91 68 01 	lds	r27, 0x0168
    25e6:	bc 01       	movw	r22, r24
    25e8:	cd 01       	movw	r24, r26
    25ea:	df 91       	pop	r29
    25ec:	cf 91       	pop	r28
    25ee:	08 95       	ret

000025f0 <system_get_match_started>:
uint8_t system_get_match_started(void) 	{ 	return match_started; 	}
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	80 91 69 01 	lds	r24, 0x0169
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	08 95       	ret

00002602 <__vector_8>:


ISR(INT7_vect) {
    2602:	1f 92       	push	r1
    2604:	0f 92       	push	r0
    2606:	00 90 5f 00 	lds	r0, 0x005F
    260a:	0f 92       	push	r0
    260c:	11 24       	eor	r1, r1
    260e:	8f 93       	push	r24
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
	jumper_pulled = true;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	80 93 6e 01 	sts	0x016E, r24
}
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	8f 91       	pop	r24
    2624:	0f 90       	pop	r0
    2626:	00 92 5f 00 	sts	0x005F, r0
    262a:	0f 90       	pop	r0
    262c:	1f 90       	pop	r1
    262e:	18 95       	reti

00002630 <system_setup_jumper>:

static void system_setup_jumper() {
    2630:	cf 93       	push	r28
    2632:	df 93       	push	r29
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	2e 97       	sbiw	r28, 0x0e	; 14
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61

	DDRE &= ~(1 << PIN7);			// setup pin as input
    2644:	8d e2       	ldi	r24, 0x2D	; 45
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	2d e2       	ldi	r18, 0x2D	; 45
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	f9 01       	movw	r30, r18
    264e:	20 81       	ld	r18, Z
    2650:	2f 77       	andi	r18, 0x7F	; 127
    2652:	fc 01       	movw	r30, r24
    2654:	20 83       	st	Z, r18

	PORTE |= (1 << PIN7);			// pullup
    2656:	8e e2       	ldi	r24, 0x2E	; 46
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	2e e2       	ldi	r18, 0x2E	; 46
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	f9 01       	movw	r30, r18
    2660:	20 81       	ld	r18, Z
    2662:	20 68       	ori	r18, 0x80	; 128
    2664:	fc 01       	movw	r30, r24
    2666:	20 83       	st	Z, r18

	EICRB = (1 << ISC70);			// set on status change to triggure interrupt
    2668:	8a e6       	ldi	r24, 0x6A	; 106
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	20 e4       	ldi	r18, 0x40	; 64
    266e:	fc 01       	movw	r30, r24
    2670:	20 83       	st	Z, r18

	EIMSK |= (1 << INT7);			// enable interrupt
    2672:	8d e3       	ldi	r24, 0x3D	; 61
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	2d e3       	ldi	r18, 0x3D	; 61
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	f9 01       	movw	r30, r18
    267c:	20 81       	ld	r18, Z
    267e:	20 68       	ori	r18, 0x80	; 128
    2680:	fc 01       	movw	r30, r24
    2682:	20 83       	st	Z, r18
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	a8 ec       	ldi	r26, 0xC8	; 200
    268a:	b2 e4       	ldi	r27, 0x42	; 66
    268c:	89 83       	std	Y+1, r24	; 0x01
    268e:	9a 83       	std	Y+2, r25	; 0x02
    2690:	ab 83       	std	Y+3, r26	; 0x03
    2692:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e4       	ldi	r19, 0x40	; 64
    2698:	4c e1       	ldi	r20, 0x1C	; 28
    269a:	55 e4       	ldi	r21, 0x45	; 69
    269c:	69 81       	ldd	r22, Y+1	; 0x01
    269e:	7a 81       	ldd	r23, Y+2	; 0x02
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	9c 81       	ldd	r25, Y+4	; 0x04
    26a4:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	8d 83       	std	Y+5, r24	; 0x05
    26ae:	9e 83       	std	Y+6, r25	; 0x06
    26b0:	af 83       	std	Y+7, r26	; 0x07
    26b2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e8       	ldi	r20, 0x80	; 128
    26ba:	5f e3       	ldi	r21, 0x3F	; 63
    26bc:	6d 81       	ldd	r22, Y+5	; 0x05
    26be:	7e 81       	ldd	r23, Y+6	; 0x06
    26c0:	8f 81       	ldd	r24, Y+7	; 0x07
    26c2:	98 85       	ldd	r25, Y+8	; 0x08
    26c4:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    26c8:	88 23       	and	r24, r24
    26ca:	2c f4       	brge	.+10     	; 0x26d6 <system_setup_jumper+0xa6>
		__ticks = 1;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	9a 87       	std	Y+10, r25	; 0x0a
    26d2:	89 87       	std	Y+9, r24	; 0x09
    26d4:	3f c0       	rjmp	.+126    	; 0x2754 <system_setup_jumper+0x124>
	else if (__tmp > 65535)
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	3f ef       	ldi	r19, 0xFF	; 255
    26da:	4f e7       	ldi	r20, 0x7F	; 127
    26dc:	57 e4       	ldi	r21, 0x47	; 71
    26de:	6d 81       	ldd	r22, Y+5	; 0x05
    26e0:	7e 81       	ldd	r23, Y+6	; 0x06
    26e2:	8f 81       	ldd	r24, Y+7	; 0x07
    26e4:	98 85       	ldd	r25, Y+8	; 0x08
    26e6:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    26ea:	18 16       	cp	r1, r24
    26ec:	4c f5       	brge	.+82     	; 0x2740 <system_setup_jumper+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	40 e2       	ldi	r20, 0x20	; 32
    26f4:	51 e4       	ldi	r21, 0x41	; 65
    26f6:	69 81       	ldd	r22, Y+1	; 0x01
    26f8:	7a 81       	ldd	r23, Y+2	; 0x02
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	bc 01       	movw	r22, r24
    2708:	cd 01       	movw	r24, r26
    270a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	9a 87       	std	Y+10, r25	; 0x0a
    2714:	89 87       	std	Y+9, r24	; 0x09
    2716:	0f c0       	rjmp	.+30     	; 0x2736 <system_setup_jumper+0x106>
    2718:	8a ef       	ldi	r24, 0xFA	; 250
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	9c 87       	std	Y+12, r25	; 0x0c
    271e:	8b 87       	std	Y+11, r24	; 0x0b
    2720:	8b 85       	ldd	r24, Y+11	; 0x0b
    2722:	9c 85       	ldd	r25, Y+12	; 0x0c
    2724:	01 97       	sbiw	r24, 0x01	; 1
    2726:	f1 f7       	brne	.-4      	; 0x2724 <system_setup_jumper+0xf4>
    2728:	9c 87       	std	Y+12, r25	; 0x0c
    272a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272c:	89 85       	ldd	r24, Y+9	; 0x09
    272e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	9a 87       	std	Y+10, r25	; 0x0a
    2734:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2736:	89 85       	ldd	r24, Y+9	; 0x09
    2738:	9a 85       	ldd	r25, Y+10	; 0x0a
    273a:	89 2b       	or	r24, r25
    273c:	69 f7       	brne	.-38     	; 0x2718 <system_setup_jumper+0xe8>
    273e:	14 c0       	rjmp	.+40     	; 0x2768 <system_setup_jumper+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2740:	6d 81       	ldd	r22, Y+5	; 0x05
    2742:	7e 81       	ldd	r23, Y+6	; 0x06
    2744:	8f 81       	ldd	r24, Y+7	; 0x07
    2746:	98 85       	ldd	r25, Y+8	; 0x08
    2748:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	9a 87       	std	Y+10, r25	; 0x0a
    2752:	89 87       	std	Y+9, r24	; 0x09
    2754:	89 85       	ldd	r24, Y+9	; 0x09
    2756:	9a 85       	ldd	r25, Y+10	; 0x0a
    2758:	9e 87       	std	Y+14, r25	; 0x0e
    275a:	8d 87       	std	Y+13, r24	; 0x0d
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <system_setup_jumper+0x130>
    2764:	9e 87       	std	Y+14, r25	; 0x0e
    2766:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);

	sei();							// enable global interrupts
    2768:	78 94       	sei
}
    276a:	2e 96       	adiw	r28, 0x0e	; 14
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	f8 94       	cli
    2770:	de bf       	out	0x3e, r29	; 62
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	cd bf       	out	0x3d, r28	; 61
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	08 95       	ret

0000277c <system_wait_for_jumper>:

static void system_wait_for_jumper() {
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	2e 97       	sbiw	r28, 0x0e	; 14
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61

	while(jumper_pulled == false)		// wait for jumper_pulled t be set true
    2790:	72 c0       	rjmp	.+228    	; 0x2876 <system_wait_for_jumper+0xfa>
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	a0 e2       	ldi	r26, 0x20	; 32
    2798:	b1 e4       	ldi	r27, 0x41	; 65
    279a:	89 83       	std	Y+1, r24	; 0x01
    279c:	9a 83       	std	Y+2, r25	; 0x02
    279e:	ab 83       	std	Y+3, r26	; 0x03
    27a0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e4       	ldi	r19, 0x40	; 64
    27a6:	4c e1       	ldi	r20, 0x1C	; 28
    27a8:	55 e4       	ldi	r21, 0x45	; 69
    27aa:	69 81       	ldd	r22, Y+1	; 0x01
    27ac:	7a 81       	ldd	r23, Y+2	; 0x02
    27ae:	8b 81       	ldd	r24, Y+3	; 0x03
    27b0:	9c 81       	ldd	r25, Y+4	; 0x04
    27b2:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	8d 83       	std	Y+5, r24	; 0x05
    27bc:	9e 83       	std	Y+6, r25	; 0x06
    27be:	af 83       	std	Y+7, r26	; 0x07
    27c0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e8       	ldi	r20, 0x80	; 128
    27c8:	5f e3       	ldi	r21, 0x3F	; 63
    27ca:	6d 81       	ldd	r22, Y+5	; 0x05
    27cc:	7e 81       	ldd	r23, Y+6	; 0x06
    27ce:	8f 81       	ldd	r24, Y+7	; 0x07
    27d0:	98 85       	ldd	r25, Y+8	; 0x08
    27d2:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    27d6:	88 23       	and	r24, r24
    27d8:	2c f4       	brge	.+10     	; 0x27e4 <system_wait_for_jumper+0x68>
		__ticks = 1;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	9a 87       	std	Y+10, r25	; 0x0a
    27e0:	89 87       	std	Y+9, r24	; 0x09
    27e2:	3f c0       	rjmp	.+126    	; 0x2862 <system_wait_for_jumper+0xe6>
	else if (__tmp > 65535)
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	3f ef       	ldi	r19, 0xFF	; 255
    27e8:	4f e7       	ldi	r20, 0x7F	; 127
    27ea:	57 e4       	ldi	r21, 0x47	; 71
    27ec:	6d 81       	ldd	r22, Y+5	; 0x05
    27ee:	7e 81       	ldd	r23, Y+6	; 0x06
    27f0:	8f 81       	ldd	r24, Y+7	; 0x07
    27f2:	98 85       	ldd	r25, Y+8	; 0x08
    27f4:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    27f8:	18 16       	cp	r1, r24
    27fa:	4c f5       	brge	.+82     	; 0x284e <system_wait_for_jumper+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e2       	ldi	r20, 0x20	; 32
    2802:	51 e4       	ldi	r21, 0x41	; 65
    2804:	69 81       	ldd	r22, Y+1	; 0x01
    2806:	7a 81       	ldd	r23, Y+2	; 0x02
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	9c 81       	ldd	r25, Y+4	; 0x04
    280c:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	bc 01       	movw	r22, r24
    2816:	cd 01       	movw	r24, r26
    2818:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	9a 87       	std	Y+10, r25	; 0x0a
    2822:	89 87       	std	Y+9, r24	; 0x09
    2824:	0f c0       	rjmp	.+30     	; 0x2844 <system_wait_for_jumper+0xc8>
    2826:	8a ef       	ldi	r24, 0xFA	; 250
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	9c 87       	std	Y+12, r25	; 0x0c
    282c:	8b 87       	std	Y+11, r24	; 0x0b
    282e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2830:	9c 85       	ldd	r25, Y+12	; 0x0c
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <system_wait_for_jumper+0xb6>
    2836:	9c 87       	std	Y+12, r25	; 0x0c
    2838:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283a:	89 85       	ldd	r24, Y+9	; 0x09
    283c:	9a 85       	ldd	r25, Y+10	; 0x0a
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	9a 87       	std	Y+10, r25	; 0x0a
    2842:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2844:	89 85       	ldd	r24, Y+9	; 0x09
    2846:	9a 85       	ldd	r25, Y+10	; 0x0a
    2848:	89 2b       	or	r24, r25
    284a:	69 f7       	brne	.-38     	; 0x2826 <system_wait_for_jumper+0xaa>
    284c:	14 c0       	rjmp	.+40     	; 0x2876 <system_wait_for_jumper+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284e:	6d 81       	ldd	r22, Y+5	; 0x05
    2850:	7e 81       	ldd	r23, Y+6	; 0x06
    2852:	8f 81       	ldd	r24, Y+7	; 0x07
    2854:	98 85       	ldd	r25, Y+8	; 0x08
    2856:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	9a 87       	std	Y+10, r25	; 0x0a
    2860:	89 87       	std	Y+9, r24	; 0x09
    2862:	89 85       	ldd	r24, Y+9	; 0x09
    2864:	9a 85       	ldd	r25, Y+10	; 0x0a
    2866:	9e 87       	std	Y+14, r25	; 0x0e
    2868:	8d 87       	std	Y+13, r24	; 0x0d
    286a:	8d 85       	ldd	r24, Y+13	; 0x0d
    286c:	9e 85       	ldd	r25, Y+14	; 0x0e
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <system_wait_for_jumper+0xf2>
    2872:	9e 87       	std	Y+14, r25	; 0x0e
    2874:	8d 87       	std	Y+13, r24	; 0x0d
    2876:	80 91 6e 01 	lds	r24, 0x016E
    287a:	88 23       	and	r24, r24
    287c:	09 f4       	brne	.+2      	; 0x2880 <system_wait_for_jumper+0x104>
    287e:	89 cf       	rjmp	.-238    	; 0x2792 <system_wait_for_jumper+0x16>
		_delay_ms(10);

}
    2880:	2e 96       	adiw	r28, 0x0e	; 14
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	08 95       	ret

00002892 <system_init>:
 *	Function: 		void system_init(void)
 *	Parameters: 	void
 *	Description:	initing all the things
 */
void system_init(void)
{
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	aa 97       	sbiw	r28, 0x2a	; 42
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	de bf       	out	0x3e, r29	; 62
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	cd bf       	out	0x3d, r28	; 61
	// sets debouncer
	timer_register_callback(gpio_debouncer);
    28a6:	84 ed       	ldi	r24, 0xD4	; 212
    28a8:	99 e0       	ldi	r25, 0x09	; 9
    28aa:	0e 94 5d 11 	call	0x22ba	; 0x22ba <timer_register_callback>
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	a8 ec       	ldi	r26, 0xC8	; 200
    28b4:	b2 e4       	ldi	r27, 0x42	; 66
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	ab 83       	std	Y+3, r26	; 0x03
    28bc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e4       	ldi	r19, 0x40	; 64
    28c2:	4c e1       	ldi	r20, 0x1C	; 28
    28c4:	55 e4       	ldi	r21, 0x45	; 69
    28c6:	69 81       	ldd	r22, Y+1	; 0x01
    28c8:	7a 81       	ldd	r23, Y+2	; 0x02
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	9c 81       	ldd	r25, Y+4	; 0x04
    28ce:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	8d 83       	std	Y+5, r24	; 0x05
    28d8:	9e 83       	std	Y+6, r25	; 0x06
    28da:	af 83       	std	Y+7, r26	; 0x07
    28dc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	40 e8       	ldi	r20, 0x80	; 128
    28e4:	5f e3       	ldi	r21, 0x3F	; 63
    28e6:	6d 81       	ldd	r22, Y+5	; 0x05
    28e8:	7e 81       	ldd	r23, Y+6	; 0x06
    28ea:	8f 81       	ldd	r24, Y+7	; 0x07
    28ec:	98 85       	ldd	r25, Y+8	; 0x08
    28ee:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    28f2:	88 23       	and	r24, r24
    28f4:	2c f4       	brge	.+10     	; 0x2900 <system_init+0x6e>
		__ticks = 1;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	9a 87       	std	Y+10, r25	; 0x0a
    28fc:	89 87       	std	Y+9, r24	; 0x09
    28fe:	3f c0       	rjmp	.+126    	; 0x297e <system_init+0xec>
	else if (__tmp > 65535)
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	3f ef       	ldi	r19, 0xFF	; 255
    2904:	4f e7       	ldi	r20, 0x7F	; 127
    2906:	57 e4       	ldi	r21, 0x47	; 71
    2908:	6d 81       	ldd	r22, Y+5	; 0x05
    290a:	7e 81       	ldd	r23, Y+6	; 0x06
    290c:	8f 81       	ldd	r24, Y+7	; 0x07
    290e:	98 85       	ldd	r25, Y+8	; 0x08
    2910:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    2914:	18 16       	cp	r1, r24
    2916:	4c f5       	brge	.+82     	; 0x296a <system_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e2       	ldi	r20, 0x20	; 32
    291e:	51 e4       	ldi	r21, 0x41	; 65
    2920:	69 81       	ldd	r22, Y+1	; 0x01
    2922:	7a 81       	ldd	r23, Y+2	; 0x02
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	9c 81       	ldd	r25, Y+4	; 0x04
    2928:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	bc 01       	movw	r22, r24
    2932:	cd 01       	movw	r24, r26
    2934:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	9a 87       	std	Y+10, r25	; 0x0a
    293e:	89 87       	std	Y+9, r24	; 0x09
    2940:	0f c0       	rjmp	.+30     	; 0x2960 <system_init+0xce>
    2942:	8a ef       	ldi	r24, 0xFA	; 250
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	9c 87       	std	Y+12, r25	; 0x0c
    2948:	8b 87       	std	Y+11, r24	; 0x0b
    294a:	8b 85       	ldd	r24, Y+11	; 0x0b
    294c:	9c 85       	ldd	r25, Y+12	; 0x0c
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	f1 f7       	brne	.-4      	; 0x294e <system_init+0xbc>
    2952:	9c 87       	std	Y+12, r25	; 0x0c
    2954:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2956:	89 85       	ldd	r24, Y+9	; 0x09
    2958:	9a 85       	ldd	r25, Y+10	; 0x0a
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	9a 87       	std	Y+10, r25	; 0x0a
    295e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2960:	89 85       	ldd	r24, Y+9	; 0x09
    2962:	9a 85       	ldd	r25, Y+10	; 0x0a
    2964:	89 2b       	or	r24, r25
    2966:	69 f7       	brne	.-38     	; 0x2942 <system_init+0xb0>
    2968:	14 c0       	rjmp	.+40     	; 0x2992 <system_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296a:	6d 81       	ldd	r22, Y+5	; 0x05
    296c:	7e 81       	ldd	r23, Y+6	; 0x06
    296e:	8f 81       	ldd	r24, Y+7	; 0x07
    2970:	98 85       	ldd	r25, Y+8	; 0x08
    2972:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	9a 87       	std	Y+10, r25	; 0x0a
    297c:	89 87       	std	Y+9, r24	; 0x09
    297e:	89 85       	ldd	r24, Y+9	; 0x09
    2980:	9a 85       	ldd	r25, Y+10	; 0x0a
    2982:	9e 87       	std	Y+14, r25	; 0x0e
    2984:	8d 87       	std	Y+13, r24	; 0x0d
    2986:	8d 85       	ldd	r24, Y+13	; 0x0d
    2988:	9e 85       	ldd	r25, Y+14	; 0x0e
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <system_init+0xf8>
    298e:	9e 87       	std	Y+14, r25	; 0x0e
    2990:	8d 87       	std	Y+13, r24	; 0x0d


	_delay_ms(100);

	gpio_register_pin(0, GPIO_DIRECTION_INPUT, true);									// test detection
    2992:	41 e0       	ldi	r20, 0x01	; 1
    2994:	60 e0       	ldi	r22, 0x00	; 0
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	0e 94 c4 07 	call	0xf88	; 0xf88 <gpio_register_pin>
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	a8 ec       	ldi	r26, 0xC8	; 200
    29a2:	b2 e4       	ldi	r27, 0x42	; 66
    29a4:	8f 87       	std	Y+15, r24	; 0x0f
    29a6:	98 8b       	std	Y+16, r25	; 0x10
    29a8:	a9 8b       	std	Y+17, r26	; 0x11
    29aa:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e4       	ldi	r19, 0x40	; 64
    29b0:	4c e1       	ldi	r20, 0x1C	; 28
    29b2:	55 e4       	ldi	r21, 0x45	; 69
    29b4:	6f 85       	ldd	r22, Y+15	; 0x0f
    29b6:	78 89       	ldd	r23, Y+16	; 0x10
    29b8:	89 89       	ldd	r24, Y+17	; 0x11
    29ba:	9a 89       	ldd	r25, Y+18	; 0x12
    29bc:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	8b 8b       	std	Y+19, r24	; 0x13
    29c6:	9c 8b       	std	Y+20, r25	; 0x14
    29c8:	ad 8b       	std	Y+21, r26	; 0x15
    29ca:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e8       	ldi	r20, 0x80	; 128
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	6b 89       	ldd	r22, Y+19	; 0x13
    29d6:	7c 89       	ldd	r23, Y+20	; 0x14
    29d8:	8d 89       	ldd	r24, Y+21	; 0x15
    29da:	9e 89       	ldd	r25, Y+22	; 0x16
    29dc:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    29e0:	88 23       	and	r24, r24
    29e2:	2c f4       	brge	.+10     	; 0x29ee <system_init+0x15c>
		__ticks = 1;
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	98 8f       	std	Y+24, r25	; 0x18
    29ea:	8f 8b       	std	Y+23, r24	; 0x17
    29ec:	3f c0       	rjmp	.+126    	; 0x2a6c <system_init+0x1da>
	else if (__tmp > 65535)
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	3f ef       	ldi	r19, 0xFF	; 255
    29f2:	4f e7       	ldi	r20, 0x7F	; 127
    29f4:	57 e4       	ldi	r21, 0x47	; 71
    29f6:	6b 89       	ldd	r22, Y+19	; 0x13
    29f8:	7c 89       	ldd	r23, Y+20	; 0x14
    29fa:	8d 89       	ldd	r24, Y+21	; 0x15
    29fc:	9e 89       	ldd	r25, Y+22	; 0x16
    29fe:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    2a02:	18 16       	cp	r1, r24
    2a04:	4c f5       	brge	.+82     	; 0x2a58 <system_init+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e2       	ldi	r20, 0x20	; 32
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a10:	78 89       	ldd	r23, Y+16	; 0x10
    2a12:	89 89       	ldd	r24, Y+17	; 0x11
    2a14:	9a 89       	ldd	r25, Y+18	; 0x12
    2a16:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	bc 01       	movw	r22, r24
    2a20:	cd 01       	movw	r24, r26
    2a22:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	98 8f       	std	Y+24, r25	; 0x18
    2a2c:	8f 8b       	std	Y+23, r24	; 0x17
    2a2e:	0f c0       	rjmp	.+30     	; 0x2a4e <system_init+0x1bc>
    2a30:	8a ef       	ldi	r24, 0xFA	; 250
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	9a 8f       	std	Y+26, r25	; 0x1a
    2a36:	89 8f       	std	Y+25, r24	; 0x19
    2a38:	89 8d       	ldd	r24, Y+25	; 0x19
    2a3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <system_init+0x1aa>
    2a40:	9a 8f       	std	Y+26, r25	; 0x1a
    2a42:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a44:	8f 89       	ldd	r24, Y+23	; 0x17
    2a46:	98 8d       	ldd	r25, Y+24	; 0x18
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	98 8f       	std	Y+24, r25	; 0x18
    2a4c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a50:	98 8d       	ldd	r25, Y+24	; 0x18
    2a52:	89 2b       	or	r24, r25
    2a54:	69 f7       	brne	.-38     	; 0x2a30 <system_init+0x19e>
    2a56:	14 c0       	rjmp	.+40     	; 0x2a80 <system_init+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a58:	6b 89       	ldd	r22, Y+19	; 0x13
    2a5a:	7c 89       	ldd	r23, Y+20	; 0x14
    2a5c:	8d 89       	ldd	r24, Y+21	; 0x15
    2a5e:	9e 89       	ldd	r25, Y+22	; 0x16
    2a60:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	98 8f       	std	Y+24, r25	; 0x18
    2a6a:	8f 8b       	std	Y+23, r24	; 0x17
    2a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a70:	9c 8f       	std	Y+28, r25	; 0x1c
    2a72:	8b 8f       	std	Y+27, r24	; 0x1b
    2a74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <system_init+0x1e6>
    2a7c:	9c 8f       	std	Y+28, r25	; 0x1c
    2a7e:	8b 8f       	std	Y+27, r24	; 0x1b

	// small delay
	_delay_ms(100);

	DDRG = 0x01;
    2a80:	83 e3       	ldi	r24, 0x33	; 51
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	21 e0       	ldi	r18, 0x01	; 1
    2a86:	fc 01       	movw	r30, r24
    2a88:	20 83       	st	Z, r18
	PORTG = 0x00;
    2a8a:	84 e3       	ldi	r24, 0x34	; 52
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	fc 01       	movw	r30, r24
    2a90:	10 82       	st	Z, r1

	// initing
	timer_init(1000);
    2a92:	88 ee       	ldi	r24, 0xE8	; 232
    2a94:	93 e0       	ldi	r25, 0x03	; 3
    2a96:	0e 94 6f 11 	call	0x22de	; 0x22de <timer_init>
	CAN_Init(1);
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	0e 94 16 06 	call	0xc2c	; 0xc2c <CAN_Init>
	UART1_Init(UART1_BAUD, UART_ISR_OFF);
    2aa0:	40 e0       	ldi	r20, 0x00	; 0
    2aa2:	60 e8       	ldi	r22, 0x80	; 128
    2aa4:	75 e2       	ldi	r23, 0x25	; 37
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	0e 94 89 17 	call	0x2f12	; 0x2f12 <UART1_Init>
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	aa ef       	ldi	r26, 0xFA	; 250
    2ab4:	b3 e4       	ldi	r27, 0x43	; 67
    2ab6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ab8:	9e 8f       	std	Y+30, r25	; 0x1e
    2aba:	af 8f       	std	Y+31, r26	; 0x1f
    2abc:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e4       	ldi	r19, 0x40	; 64
    2ac2:	4c e1       	ldi	r20, 0x1C	; 28
    2ac4:	55 e4       	ldi	r21, 0x45	; 69
    2ac6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2ac8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2aca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2acc:	98 a1       	ldd	r25, Y+32	; 0x20
    2ace:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	89 a3       	std	Y+33, r24	; 0x21
    2ad8:	9a a3       	std	Y+34, r25	; 0x22
    2ada:	ab a3       	std	Y+35, r26	; 0x23
    2adc:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e8       	ldi	r20, 0x80	; 128
    2ae4:	5f e3       	ldi	r21, 0x3F	; 63
    2ae6:	69 a1       	ldd	r22, Y+33	; 0x21
    2ae8:	7a a1       	ldd	r23, Y+34	; 0x22
    2aea:	8b a1       	ldd	r24, Y+35	; 0x23
    2aec:	9c a1       	ldd	r25, Y+36	; 0x24
    2aee:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    2af2:	88 23       	and	r24, r24
    2af4:	2c f4       	brge	.+10     	; 0x2b00 <system_init+0x26e>
		__ticks = 1;
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	9e a3       	std	Y+38, r25	; 0x26
    2afc:	8d a3       	std	Y+37, r24	; 0x25
    2afe:	3f c0       	rjmp	.+126    	; 0x2b7e <system_init+0x2ec>
	else if (__tmp > 65535)
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	3f ef       	ldi	r19, 0xFF	; 255
    2b04:	4f e7       	ldi	r20, 0x7F	; 127
    2b06:	57 e4       	ldi	r21, 0x47	; 71
    2b08:	69 a1       	ldd	r22, Y+33	; 0x21
    2b0a:	7a a1       	ldd	r23, Y+34	; 0x22
    2b0c:	8b a1       	ldd	r24, Y+35	; 0x23
    2b0e:	9c a1       	ldd	r25, Y+36	; 0x24
    2b10:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    2b14:	18 16       	cp	r1, r24
    2b16:	4c f5       	brge	.+82     	; 0x2b6a <system_init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e2       	ldi	r20, 0x20	; 32
    2b1e:	51 e4       	ldi	r21, 0x41	; 65
    2b20:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2b22:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2b24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b26:	98 a1       	ldd	r25, Y+32	; 0x20
    2b28:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	bc 01       	movw	r22, r24
    2b32:	cd 01       	movw	r24, r26
    2b34:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	9e a3       	std	Y+38, r25	; 0x26
    2b3e:	8d a3       	std	Y+37, r24	; 0x25
    2b40:	0f c0       	rjmp	.+30     	; 0x2b60 <system_init+0x2ce>
    2b42:	8a ef       	ldi	r24, 0xFA	; 250
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	98 a7       	std	Y+40, r25	; 0x28
    2b48:	8f a3       	std	Y+39, r24	; 0x27
    2b4a:	8f a1       	ldd	r24, Y+39	; 0x27
    2b4c:	98 a5       	ldd	r25, Y+40	; 0x28
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <system_init+0x2bc>
    2b52:	98 a7       	std	Y+40, r25	; 0x28
    2b54:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b56:	8d a1       	ldd	r24, Y+37	; 0x25
    2b58:	9e a1       	ldd	r25, Y+38	; 0x26
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	9e a3       	std	Y+38, r25	; 0x26
    2b5e:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b60:	8d a1       	ldd	r24, Y+37	; 0x25
    2b62:	9e a1       	ldd	r25, Y+38	; 0x26
    2b64:	89 2b       	or	r24, r25
    2b66:	69 f7       	brne	.-38     	; 0x2b42 <system_init+0x2b0>
    2b68:	14 c0       	rjmp	.+40     	; 0x2b92 <system_init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b6a:	69 a1       	ldd	r22, Y+33	; 0x21
    2b6c:	7a a1       	ldd	r23, Y+34	; 0x22
    2b6e:	8b a1       	ldd	r24, Y+35	; 0x23
    2b70:	9c a1       	ldd	r25, Y+36	; 0x24
    2b72:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	9e a3       	std	Y+38, r25	; 0x26
    2b7c:	8d a3       	std	Y+37, r24	; 0x25
    2b7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2b80:	9e a1       	ldd	r25, Y+38	; 0x26
    2b82:	9a a7       	std	Y+42, r25	; 0x2a
    2b84:	89 a7       	std	Y+41, r24	; 0x29
    2b86:	89 a5       	ldd	r24, Y+41	; 0x29
    2b88:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
    2b8c:	f1 f7       	brne	.-4      	; 0x2b8a <system_init+0x2f8>
    2b8e:	9a a7       	std	Y+42, r25	; 0x2a
    2b90:	89 a7       	std	Y+41, r24	; 0x29

	_delay_ms(500);

	system_setup_jumper();
    2b92:	0e 94 18 13 	call	0x2630	; 0x2630 <system_setup_jumper>

	// uart1 ping
	ping_actuator();
    2b96:	0e 94 ac 00 	call	0x158	; 0x158 <ping_actuator>

	//detection_setup();
	//debug_init();

	setup_complete = true;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	80 93 6f 01 	sts	0x016F, r24

	PORTG = 0x01;
    2ba0:	84 e3       	ldi	r24, 0x34	; 52
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	21 e0       	ldi	r18, 0x01	; 1
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	20 83       	st	Z, r18

	// waiting for jumper
	//system_wait_for_jumper();

	PORTG = 0x00;
    2baa:	84 e3       	ldi	r24, 0x34	; 52
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	fc 01       	movw	r30, r24
    2bb0:	10 82       	st	Z, r1

	system_reset_system_time();															// reset system time
    2bb2:	0e 94 ce 12 	call	0x259c	; 0x259c <system_reset_system_time>
	system_set_match_started();															// match has started!
    2bb6:	0e 94 dd 12 	call	0x25ba	; 0x25ba <system_set_match_started>

}
    2bba:	aa 96       	adiw	r28, 0x2a	; 42
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	08 95       	ret

00002bcc <UART0_Init>:
* Parameters        : unsigned int baud
					  char isrOnOff
* Return Value      : void
*********************************************************************************/
void UART0_Init(unsigned long baud, char isrOnOff)
{
    2bcc:	cf 93       	push	r28
    2bce:	df 93       	push	r29
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
    2bd4:	27 97       	sbiw	r28, 0x07	; 7
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	f8 94       	cli
    2bda:	de bf       	out	0x3e, r29	; 62
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	cd bf       	out	0x3d, r28	; 61
    2be0:	6b 83       	std	Y+3, r22	; 0x03
    2be2:	7c 83       	std	Y+4, r23	; 0x04
    2be4:	8d 83       	std	Y+5, r24	; 0x05
    2be6:	9e 83       	std	Y+6, r25	; 0x06
    2be8:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR0A = 0;
    2bea:	80 ec       	ldi	r24, 0xC0	; 192
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	fc 01       	movw	r30, r24
    2bf0:	10 82       	st	Z, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    2bf2:	81 ec       	ldi	r24, 0xC1	; 193
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	28 e1       	ldi	r18, 0x18	; 24
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    2bfc:	82 ec       	ldi	r24, 0xC2	; 194
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	26 e0       	ldi	r18, 0x06	; 6
    2c02:	fc 01       	movw	r30, r24
    2c04:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    2c06:	8f 81       	ldd	r24, Y+7	; 0x07
    2c08:	81 30       	cpi	r24, 0x01	; 1
    2c0a:	91 f4       	brne	.+36     	; 0x2c30 <UART0_Init+0x64>
	{
		UCSR0B |= ((1 << RXCIE0) | (1 << TXCIE0));
    2c0c:	81 ec       	ldi	r24, 0xC1	; 193
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	21 ec       	ldi	r18, 0xC1	; 193
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	f9 01       	movw	r30, r18
    2c16:	20 81       	ld	r18, Z
    2c18:	20 6c       	ori	r18, 0xC0	; 192
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	20 83       	st	Z, r18
		SREG |= 0x80;
    2c1e:	8f e5       	ldi	r24, 0x5F	; 95
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	2f e5       	ldi	r18, 0x5F	; 95
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	f9 01       	movw	r30, r18
    2c28:	20 81       	ld	r18, Z
    2c2a:	20 68       	ori	r18, 0x80	; 128
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    2c30:	6b 81       	ldd	r22, Y+3	; 0x03
    2c32:	7c 81       	ldd	r23, Y+4	; 0x04
    2c34:	8d 81       	ldd	r24, Y+5	; 0x05
    2c36:	9e 81       	ldd	r25, Y+6	; 0x06
    2c38:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <__floatunsisf>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e8       	ldi	r20, 0x80	; 128
    2c46:	51 e4       	ldi	r21, 0x41	; 65
    2c48:	bc 01       	movw	r22, r24
    2c4a:	cd 01       	movw	r24, r26
    2c4c:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	9c 01       	movw	r18, r24
    2c56:	ad 01       	movw	r20, r26
    2c58:	60 e8       	ldi	r22, 0x80	; 128
    2c5a:	76 e9       	ldi	r23, 0x96	; 150
    2c5c:	88 e1       	ldi	r24, 0x18	; 24
    2c5e:	9b e4       	ldi	r25, 0x4B	; 75
    2c60:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <__divsf3>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e8       	ldi	r20, 0x80	; 128
    2c6e:	5f e3       	ldi	r21, 0x3F	; 63
    2c70:	bc 01       	movw	r22, r24
    2c72:	cd 01       	movw	r24, r26
    2c74:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__subsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	5f e3       	ldi	r21, 0x3F	; 63
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__addsf3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	bc 01       	movw	r22, r24
    2c92:	cd 01       	movw	r24, r26
    2c94:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	9a 83       	std	Y+2, r25	; 0x02
    2c9e:	89 83       	std	Y+1, r24	; 0x01

	UBRR0H = temp >> 8;
    2ca0:	85 ec       	ldi	r24, 0xC5	; 197
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	29 81       	ldd	r18, Y+1	; 0x01
    2ca6:	3a 81       	ldd	r19, Y+2	; 0x02
    2ca8:	23 2f       	mov	r18, r19
    2caa:	33 27       	eor	r19, r19
    2cac:	fc 01       	movw	r30, r24
    2cae:	20 83       	st	Z, r18
	UBRR0L = temp;
    2cb0:	84 ec       	ldi	r24, 0xC4	; 196
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	29 81       	ldd	r18, Y+1	; 0x01
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	20 83       	st	Z, r18
}
    2cba:	27 96       	adiw	r28, 0x07	; 7
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	f8 94       	cli
    2cc0:	de bf       	out	0x3e, r29	; 62
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	cd bf       	out	0x3d, r28	; 61
    2cc6:	df 91       	pop	r29
    2cc8:	cf 91       	pop	r28
    2cca:	08 95       	ret

00002ccc <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    2ccc:	1f 92       	push	r1
    2cce:	0f 92       	push	r0
    2cd0:	00 90 5f 00 	lds	r0, 0x005F
    2cd4:	0f 92       	push	r0
    2cd6:	11 24       	eor	r1, r1
    2cd8:	00 90 5b 00 	lds	r0, 0x005B
    2cdc:	0f 92       	push	r0
    2cde:	2f 93       	push	r18
    2ce0:	3f 93       	push	r19
    2ce2:	8f 93       	push	r24
    2ce4:	9f 93       	push	r25
    2ce6:	ef 93       	push	r30
    2ce8:	ff 93       	push	r31
    2cea:	cf 93       	push	r28
    2cec:	df 93       	push	r29
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    2cf2:	80 91 b1 01 	lds	r24, 0x01B1
    2cf6:	88 23       	and	r24, r24
    2cf8:	d1 f0       	breq	.+52     	; 0x2d2e <__vector_23+0x62>
	{
		tx0_counter--;
    2cfa:	80 91 b1 01 	lds	r24, 0x01B1
    2cfe:	81 50       	subi	r24, 0x01	; 1
    2d00:	80 93 b1 01 	sts	0x01B1, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    2d04:	86 ec       	ldi	r24, 0xC6	; 198
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	20 91 b2 01 	lds	r18, 0x01B2
    2d0c:	22 2f       	mov	r18, r18
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	20 59       	subi	r18, 0x90	; 144
    2d12:	3e 4f       	sbci	r19, 0xFE	; 254
    2d14:	f9 01       	movw	r30, r18
    2d16:	20 81       	ld	r18, Z
    2d18:	fc 01       	movw	r30, r24
    2d1a:	20 83       	st	Z, r18
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    2d1c:	80 91 b2 01 	lds	r24, 0x01B2
    2d20:	8f 5f       	subi	r24, 0xFF	; 255
    2d22:	80 93 b2 01 	sts	0x01B2, r24
    2d26:	80 34       	cpi	r24, 0x40	; 64
    2d28:	11 f4       	brne	.+4      	; 0x2d2e <__vector_23+0x62>
			tx0_rd_index = 0;
    2d2a:	10 92 b2 01 	sts	0x01B2, r1
	}
}
    2d2e:	df 91       	pop	r29
    2d30:	cf 91       	pop	r28
    2d32:	ff 91       	pop	r31
    2d34:	ef 91       	pop	r30
    2d36:	9f 91       	pop	r25
    2d38:	8f 91       	pop	r24
    2d3a:	3f 91       	pop	r19
    2d3c:	2f 91       	pop	r18
    2d3e:	0f 90       	pop	r0
    2d40:	00 92 5b 00 	sts	0x005B, r0
    2d44:	0f 90       	pop	r0
    2d46:	00 92 5f 00 	sts	0x005F, r0
    2d4a:	0f 90       	pop	r0
    2d4c:	1f 90       	pop	r1
    2d4e:	18 95       	reti

00002d50 <UART0_Write>:
/****************************************************************************************************************************************
Slanje podataka USART0 modulom
****************************************************************************************************************************************/

void UART0_Write(unsigned char data)
{
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	1f 92       	push	r1
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
    2d5a:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR0B >> TXCIE0) & 0x01)
    2d5c:	81 ec       	ldi	r24, 0xC1	; 193
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	fc 01       	movw	r30, r24
    2d62:	80 81       	ld	r24, Z
    2d64:	82 95       	swap	r24
    2d66:	86 95       	lsr	r24
    2d68:	86 95       	lsr	r24
    2d6a:	83 70       	andi	r24, 0x03	; 3
    2d6c:	88 2f       	mov	r24, r24
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	81 70       	andi	r24, 0x01	; 1
    2d72:	99 27       	eor	r25, r25
    2d74:	89 2b       	or	r24, r25
    2d76:	99 f1       	breq	.+102    	; 0x2dde <UART0_Write+0x8e>
	{
		while(tx0_counter == TX0_BUFFER_SIZE);
    2d78:	00 00       	nop
    2d7a:	80 91 b1 01 	lds	r24, 0x01B1
    2d7e:	80 34       	cpi	r24, 0x40	; 64
    2d80:	e1 f3       	breq	.-8      	; 0x2d7a <UART0_Write+0x2a>

		cli();
    2d82:	f8 94       	cli

		if(tx0_counter || (UCSR0A & 0x20) == 0)
    2d84:	80 91 b1 01 	lds	r24, 0x01B1
    2d88:	88 23       	and	r24, r24
    2d8a:	51 f4       	brne	.+20     	; 0x2da0 <UART0_Write+0x50>
    2d8c:	80 ec       	ldi	r24, 0xC0	; 192
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	fc 01       	movw	r30, r24
    2d92:	80 81       	ld	r24, Z
    2d94:	88 2f       	mov	r24, r24
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	80 72       	andi	r24, 0x20	; 32
    2d9a:	99 27       	eor	r25, r25
    2d9c:	89 2b       	or	r24, r25
    2d9e:	c1 f4       	brne	.+48     	; 0x2dd0 <UART0_Write+0x80>
		{
			tx0_buffer[tx0_wr_index] = data;
    2da0:	80 91 b0 01 	lds	r24, 0x01B0
    2da4:	88 2f       	mov	r24, r24
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	80 59       	subi	r24, 0x90	; 144
    2daa:	9e 4f       	sbci	r25, 0xFE	; 254
    2dac:	29 81       	ldd	r18, Y+1	; 0x01
    2dae:	fc 01       	movw	r30, r24
    2db0:	20 83       	st	Z, r18
			if(++tx0_wr_index == TX0_BUFFER_SIZE)
    2db2:	80 91 b0 01 	lds	r24, 0x01B0
    2db6:	8f 5f       	subi	r24, 0xFF	; 255
    2db8:	80 93 b0 01 	sts	0x01B0, r24
    2dbc:	80 34       	cpi	r24, 0x40	; 64
    2dbe:	11 f4       	brne	.+4      	; 0x2dc4 <UART0_Write+0x74>
				tx0_wr_index = 0;
    2dc0:	10 92 b0 01 	sts	0x01B0, r1

			tx0_counter++;
    2dc4:	80 91 b1 01 	lds	r24, 0x01B1
    2dc8:	8f 5f       	subi	r24, 0xFF	; 255
    2dca:	80 93 b1 01 	sts	0x01B1, r24
    2dce:	05 c0       	rjmp	.+10     	; 0x2dda <UART0_Write+0x8a>
		}
		else
			UDR0 = data;
    2dd0:	86 ec       	ldi	r24, 0xC6	; 198
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	29 81       	ldd	r18, Y+1	; 0x01
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	20 83       	st	Z, r18

		sei();
    2dda:	78 94       	sei
    2ddc:	03 c0       	rjmp	.+6      	; 0x2de4 <UART0_Write+0x94>
	}
	else
		altUart0Write(data);
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	0e 94 97 18 	call	0x312e	; 0x312e <altUart0Write>
}
    2de4:	0f 90       	pop	r0
    2de6:	df 91       	pop	r29
    2de8:	cf 91       	pop	r28
    2dea:	08 95       	ret

00002dec <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    2dec:	1f 92       	push	r1
    2dee:	0f 92       	push	r0
    2df0:	00 90 5f 00 	lds	r0, 0x005F
    2df4:	0f 92       	push	r0
    2df6:	11 24       	eor	r1, r1
    2df8:	00 90 5b 00 	lds	r0, 0x005B
    2dfc:	0f 92       	push	r0
    2dfe:	2f 93       	push	r18
    2e00:	3f 93       	push	r19
    2e02:	8f 93       	push	r24
    2e04:	9f 93       	push	r25
    2e06:	ef 93       	push	r30
    2e08:	ff 93       	push	r31
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	1f 92       	push	r1
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    2e14:	80 ec       	ldi	r24, 0xC0	; 192
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	fc 01       	movw	r30, r24
    2e1a:	80 81       	ld	r24, Z
    2e1c:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	88 2f       	mov	r24, r24
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	8c 71       	andi	r24, 0x1C	; 28
    2e26:	99 27       	eor	r25, r25
    2e28:	89 2b       	or	r24, r25
    2e2a:	d1 f4       	brne	.+52     	; 0x2e60 <__vector_21+0x74>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    2e2c:	80 91 f3 01 	lds	r24, 0x01F3
    2e30:	88 2f       	mov	r24, r24
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	26 ec       	ldi	r18, 0xC6	; 198
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	f9 01       	movw	r30, r18
    2e3a:	20 81       	ld	r18, Z
    2e3c:	8d 54       	subi	r24, 0x4D	; 77
    2e3e:	9e 4f       	sbci	r25, 0xFE	; 254
    2e40:	fc 01       	movw	r30, r24
    2e42:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    2e44:	80 91 f3 01 	lds	r24, 0x01F3
    2e48:	8f 5f       	subi	r24, 0xFF	; 255
    2e4a:	80 93 f3 01 	sts	0x01F3, r24
    2e4e:	80 34       	cpi	r24, 0x40	; 64
    2e50:	11 f4       	brne	.+4      	; 0x2e56 <__vector_21+0x6a>
			rx0_wr_index = 0;
    2e52:	10 92 f3 01 	sts	0x01F3, r1

		rx0_counter++;
    2e56:	80 91 f4 01 	lds	r24, 0x01F4
    2e5a:	8f 5f       	subi	r24, 0xFF	; 255
    2e5c:	80 93 f4 01 	sts	0x01F4, r24
	}
}
    2e60:	0f 90       	pop	r0
    2e62:	df 91       	pop	r29
    2e64:	cf 91       	pop	r28
    2e66:	ff 91       	pop	r31
    2e68:	ef 91       	pop	r30
    2e6a:	9f 91       	pop	r25
    2e6c:	8f 91       	pop	r24
    2e6e:	3f 91       	pop	r19
    2e70:	2f 91       	pop	r18
    2e72:	0f 90       	pop	r0
    2e74:	00 92 5b 00 	sts	0x005B, r0
    2e78:	0f 90       	pop	r0
    2e7a:	00 92 5f 00 	sts	0x005F, r0
    2e7e:	0f 90       	pop	r0
    2e80:	1f 90       	pop	r1
    2e82:	18 95       	reti

00002e84 <UART0_Read>:
/****************************************************************************************************************************************
Primanje podataka USART0 modulom
****************************************************************************************************************************************/

unsigned char UART0_Read(void)
{
    2e84:	cf 93       	push	r28
    2e86:	df 93       	push	r29
    2e88:	1f 92       	push	r1
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR0B >> RXCIE0) & 0x01)
    2e8e:	81 ec       	ldi	r24, 0xC1	; 193
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	fc 01       	movw	r30, r24
    2e94:	80 81       	ld	r24, Z
    2e96:	88 1f       	adc	r24, r24
    2e98:	88 27       	eor	r24, r24
    2e9a:	88 1f       	adc	r24, r24
    2e9c:	88 2f       	mov	r24, r24
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	81 70       	andi	r24, 0x01	; 1
    2ea2:	99 27       	eor	r25, r25
    2ea4:	89 2b       	or	r24, r25
    2ea6:	e9 f0       	breq	.+58     	; 0x2ee2 <UART0_Read+0x5e>
	{
		while(rx0_counter == 0);
    2ea8:	00 00       	nop
    2eaa:	80 91 f4 01 	lds	r24, 0x01F4
    2eae:	88 23       	and	r24, r24
    2eb0:	e1 f3       	breq	.-8      	; 0x2eaa <UART0_Read+0x26>

		data = rx0_buffer[rx0_rd_index];
    2eb2:	80 91 f5 01 	lds	r24, 0x01F5
    2eb6:	88 2f       	mov	r24, r24
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	8d 54       	subi	r24, 0x4D	; 77
    2ebc:	9e 4f       	sbci	r25, 0xFE	; 254
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	80 81       	ld	r24, Z
    2ec2:	89 83       	std	Y+1, r24	; 0x01

		if(++rx0_rd_index == RX0_BUFFER_SIZE)
    2ec4:	80 91 f5 01 	lds	r24, 0x01F5
    2ec8:	8f 5f       	subi	r24, 0xFF	; 255
    2eca:	80 93 f5 01 	sts	0x01F5, r24
    2ece:	80 34       	cpi	r24, 0x40	; 64
    2ed0:	11 f4       	brne	.+4      	; 0x2ed6 <UART0_Read+0x52>
			rx0_rd_index = 0;
    2ed2:	10 92 f5 01 	sts	0x01F5, r1

		rx0_counter--;
    2ed6:	80 91 f4 01 	lds	r24, 0x01F4
    2eda:	81 50       	subi	r24, 0x01	; 1
    2edc:	80 93 f4 01 	sts	0x01F4, r24
    2ee0:	13 c0       	rjmp	.+38     	; 0x2f08 <UART0_Read+0x84>
	}
	else
	{
		while( !((UCSR0A >> RXC0) & 0x01));
    2ee2:	00 00       	nop
    2ee4:	80 ec       	ldi	r24, 0xC0	; 192
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	fc 01       	movw	r30, r24
    2eea:	80 81       	ld	r24, Z
    2eec:	88 1f       	adc	r24, r24
    2eee:	88 27       	eor	r24, r24
    2ef0:	88 1f       	adc	r24, r24
    2ef2:	88 2f       	mov	r24, r24
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	81 70       	andi	r24, 0x01	; 1
    2ef8:	99 27       	eor	r25, r25
    2efa:	89 2b       	or	r24, r25
    2efc:	99 f3       	breq	.-26     	; 0x2ee4 <UART0_Read+0x60>
		data = UDR0;
    2efe:	86 ec       	ldi	r24, 0xC6	; 198
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	fc 01       	movw	r30, r24
    2f04:	80 81       	ld	r24, Z
    2f06:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f0a:	0f 90       	pop	r0
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	08 95       	ret

00002f12 <UART1_Init>:
-bez paritet
-9600baud
-asynchron
****************************************************************************************************************************************/
void UART1_Init(unsigned long baud, char isrOnOff)
{
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	27 97       	sbiw	r28, 0x07	; 7
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	6b 83       	std	Y+3, r22	; 0x03
    2f28:	7c 83       	std	Y+4, r23	; 0x04
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
    2f2c:	9e 83       	std	Y+6, r25	; 0x06
    2f2e:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
    2f30:	88 ec       	ldi	r24, 0xC8	; 200
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	fc 01       	movw	r30, r24
    2f36:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
    2f38:	89 ec       	ldi	r24, 0xC9	; 201
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	28 e1       	ldi	r18, 0x18	; 24
    2f3e:	fc 01       	movw	r30, r24
    2f40:	20 83       	st	Z, r18


	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); //sa 1stop bit
    2f42:	8a ec       	ldi	r24, 0xCA	; 202
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	26 e0       	ldi	r18, 0x06	; 6
    2f48:	fc 01       	movw	r30, r24
    2f4a:	20 83       	st	Z, r18


	if(isrOnOff == UART_ISR_ON)
    2f4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f4e:	81 30       	cpi	r24, 0x01	; 1
    2f50:	91 f4       	brne	.+36     	; 0x2f76 <UART1_Init+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
    2f52:	89 ec       	ldi	r24, 0xC9	; 201
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	29 ec       	ldi	r18, 0xC9	; 201
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	f9 01       	movw	r30, r18
    2f5c:	20 81       	ld	r18, Z
    2f5e:	20 6c       	ori	r18, 0xC0	; 192
    2f60:	fc 01       	movw	r30, r24
    2f62:	20 83       	st	Z, r18
		SREG |= 0x80;
    2f64:	8f e5       	ldi	r24, 0x5F	; 95
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	2f e5       	ldi	r18, 0x5F	; 95
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	f9 01       	movw	r30, r18
    2f6e:	20 81       	ld	r18, Z
    2f70:	20 68       	ori	r18, 0x80	; 128
    2f72:	fc 01       	movw	r30, r24
    2f74:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    2f76:	6b 81       	ldd	r22, Y+3	; 0x03
    2f78:	7c 81       	ldd	r23, Y+4	; 0x04
    2f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7e:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <__floatunsisf>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	40 e8       	ldi	r20, 0x80	; 128
    2f8c:	51 e4       	ldi	r21, 0x41	; 65
    2f8e:	bc 01       	movw	r22, r24
    2f90:	cd 01       	movw	r24, r26
    2f92:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	9c 01       	movw	r18, r24
    2f9c:	ad 01       	movw	r20, r26
    2f9e:	60 e8       	ldi	r22, 0x80	; 128
    2fa0:	76 e9       	ldi	r23, 0x96	; 150
    2fa2:	88 e1       	ldi	r24, 0x18	; 24
    2fa4:	9b e4       	ldi	r25, 0x4B	; 75
    2fa6:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <__divsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e8       	ldi	r20, 0x80	; 128
    2fb4:	5f e3       	ldi	r21, 0x3F	; 63
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__subsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	40 e0       	ldi	r20, 0x00	; 0
    2fc8:	5f e3       	ldi	r21, 0x3F	; 63
    2fca:	bc 01       	movw	r22, r24
    2fcc:	cd 01       	movw	r24, r26
    2fce:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <__addsf3>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9a 83       	std	Y+2, r25	; 0x02
    2fe4:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
    2fe6:	8d ec       	ldi	r24, 0xCD	; 205
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	29 81       	ldd	r18, Y+1	; 0x01
    2fec:	3a 81       	ldd	r19, Y+2	; 0x02
    2fee:	23 2f       	mov	r18, r19
    2ff0:	33 27       	eor	r19, r19
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	20 83       	st	Z, r18
	UBRR1L = temp;
    2ff6:	8c ec       	ldi	r24, 0xCC	; 204
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	29 81       	ldd	r18, Y+1	; 0x01
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	20 83       	st	Z, r18
}
    3000:	27 96       	adiw	r28, 0x07	; 7
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	df 91       	pop	r29
    300e:	cf 91       	pop	r28
    3010:	08 95       	ret

00003012 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    3012:	1f 92       	push	r1
    3014:	0f 92       	push	r0
    3016:	00 90 5f 00 	lds	r0, 0x005F
    301a:	0f 92       	push	r0
    301c:	11 24       	eor	r1, r1
    301e:	00 90 5b 00 	lds	r0, 0x005B
    3022:	0f 92       	push	r0
    3024:	2f 93       	push	r18
    3026:	3f 93       	push	r19
    3028:	8f 93       	push	r24
    302a:	9f 93       	push	r25
    302c:	ef 93       	push	r30
    302e:	ff 93       	push	r31
    3030:	cf 93       	push	r28
    3032:	df 93       	push	r29
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    3038:	80 91 37 02 	lds	r24, 0x0237
    303c:	88 23       	and	r24, r24
    303e:	d1 f0       	breq	.+52     	; 0x3074 <__vector_34+0x62>
	{
		tx1_counter--;
    3040:	80 91 37 02 	lds	r24, 0x0237
    3044:	81 50       	subi	r24, 0x01	; 1
    3046:	80 93 37 02 	sts	0x0237, r24
		UDR1=tx1_buffer[tx1_rd_index];
    304a:	8e ec       	ldi	r24, 0xCE	; 206
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	20 91 38 02 	lds	r18, 0x0238
    3052:	22 2f       	mov	r18, r18
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	2a 50       	subi	r18, 0x0A	; 10
    3058:	3e 4f       	sbci	r19, 0xFE	; 254
    305a:	f9 01       	movw	r30, r18
    305c:	20 81       	ld	r18, Z
    305e:	fc 01       	movw	r30, r24
    3060:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    3062:	80 91 38 02 	lds	r24, 0x0238
    3066:	8f 5f       	subi	r24, 0xFF	; 255
    3068:	80 93 38 02 	sts	0x0238, r24
    306c:	80 34       	cpi	r24, 0x40	; 64
    306e:	11 f4       	brne	.+4      	; 0x3074 <__vector_34+0x62>
			tx1_rd_index = 0;
    3070:	10 92 38 02 	sts	0x0238, r1
	}
}
    3074:	df 91       	pop	r29
    3076:	cf 91       	pop	r28
    3078:	ff 91       	pop	r31
    307a:	ef 91       	pop	r30
    307c:	9f 91       	pop	r25
    307e:	8f 91       	pop	r24
    3080:	3f 91       	pop	r19
    3082:	2f 91       	pop	r18
    3084:	0f 90       	pop	r0
    3086:	00 92 5b 00 	sts	0x005B, r0
    308a:	0f 90       	pop	r0
    308c:	00 92 5f 00 	sts	0x005F, r0
    3090:	0f 90       	pop	r0
    3092:	1f 90       	pop	r1
    3094:	18 95       	reti

00003096 <__vector_32>:

ISR(USART1_RX_vect)
{
    3096:	1f 92       	push	r1
    3098:	0f 92       	push	r0
    309a:	00 90 5f 00 	lds	r0, 0x005F
    309e:	0f 92       	push	r0
    30a0:	11 24       	eor	r1, r1
    30a2:	00 90 5b 00 	lds	r0, 0x005B
    30a6:	0f 92       	push	r0
    30a8:	2f 93       	push	r18
    30aa:	3f 93       	push	r19
    30ac:	8f 93       	push	r24
    30ae:	9f 93       	push	r25
    30b0:	ef 93       	push	r30
    30b2:	ff 93       	push	r31
    30b4:	cf 93       	push	r28
    30b6:	df 93       	push	r29
    30b8:	1f 92       	push	r1
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    30be:	88 ec       	ldi	r24, 0xC8	; 200
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	fc 01       	movw	r30, r24
    30c4:	80 81       	ld	r24, Z
    30c6:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	88 2f       	mov	r24, r24
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	8c 71       	andi	r24, 0x1C	; 28
    30d0:	99 27       	eor	r25, r25
    30d2:	89 2b       	or	r24, r25
    30d4:	d1 f4       	brne	.+52     	; 0x310a <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    30d6:	80 91 79 02 	lds	r24, 0x0279
    30da:	88 2f       	mov	r24, r24
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	2e ec       	ldi	r18, 0xCE	; 206
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	f9 01       	movw	r30, r18
    30e4:	20 81       	ld	r18, Z
    30e6:	87 5c       	subi	r24, 0xC7	; 199
    30e8:	9d 4f       	sbci	r25, 0xFD	; 253
    30ea:	fc 01       	movw	r30, r24
    30ec:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    30ee:	80 91 79 02 	lds	r24, 0x0279
    30f2:	8f 5f       	subi	r24, 0xFF	; 255
    30f4:	80 93 79 02 	sts	0x0279, r24
    30f8:	80 34       	cpi	r24, 0x40	; 64
    30fa:	11 f4       	brne	.+4      	; 0x3100 <__vector_32+0x6a>
		rx1_wr_index = 0;
    30fc:	10 92 79 02 	sts	0x0279, r1

		rx1_counter++;
    3100:	80 91 7a 02 	lds	r24, 0x027A
    3104:	8f 5f       	subi	r24, 0xFF	; 255
    3106:	80 93 7a 02 	sts	0x027A, r24
	}
}
    310a:	0f 90       	pop	r0
    310c:	df 91       	pop	r29
    310e:	cf 91       	pop	r28
    3110:	ff 91       	pop	r31
    3112:	ef 91       	pop	r30
    3114:	9f 91       	pop	r25
    3116:	8f 91       	pop	r24
    3118:	3f 91       	pop	r19
    311a:	2f 91       	pop	r18
    311c:	0f 90       	pop	r0
    311e:	00 92 5b 00 	sts	0x005B, r0
    3122:	0f 90       	pop	r0
    3124:	00 92 5f 00 	sts	0x005F, r0
    3128:	0f 90       	pop	r0
    312a:	1f 90       	pop	r1
    312c:	18 95       	reti

0000312e <altUart0Write>:

void altUart0Write(unsigned char data)
{
    312e:	cf 93       	push	r28
    3130:	df 93       	push	r29
    3132:	1f 92       	push	r1
    3134:	cd b7       	in	r28, 0x3d	; 61
    3136:	de b7       	in	r29, 0x3e	; 62
    3138:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
    313a:	00 00       	nop
    313c:	80 ec       	ldi	r24, 0xC0	; 192
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	fc 01       	movw	r30, r24
    3142:	80 81       	ld	r24, Z
    3144:	88 2f       	mov	r24, r24
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	80 72       	andi	r24, 0x20	; 32
    314a:	99 27       	eor	r25, r25
    314c:	89 2b       	or	r24, r25
    314e:	b1 f3       	breq	.-20     	; 0x313c <altUart0Write+0xe>

	UDR0 = data;
    3150:	86 ec       	ldi	r24, 0xC6	; 198
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	29 81       	ldd	r18, Y+1	; 0x01
    3156:	fc 01       	movw	r30, r24
    3158:	20 83       	st	Z, r18
}
    315a:	0f 90       	pop	r0
    315c:	df 91       	pop	r29
    315e:	cf 91       	pop	r28
    3160:	08 95       	ret

00003162 <altUart1Write>:

void altUart1Write(unsigned char data)
{
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	1f 92       	push	r1
    3168:	cd b7       	in	r28, 0x3d	; 61
    316a:	de b7       	in	r29, 0x3e	; 62
    316c:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
    316e:	00 00       	nop
    3170:	88 ec       	ldi	r24, 0xC8	; 200
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	fc 01       	movw	r30, r24
    3176:	80 81       	ld	r24, Z
    3178:	88 2f       	mov	r24, r24
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	80 72       	andi	r24, 0x20	; 32
    317e:	99 27       	eor	r25, r25
    3180:	89 2b       	or	r24, r25
    3182:	b1 f3       	breq	.-20     	; 0x3170 <altUart1Write+0xe>
	UDR1 = data;
    3184:	8e ec       	ldi	r24, 0xCE	; 206
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	29 81       	ldd	r18, Y+1	; 0x01
    318a:	fc 01       	movw	r30, r24
    318c:	20 83       	st	Z, r18
}
    318e:	0f 90       	pop	r0
    3190:	df 91       	pop	r29
    3192:	cf 91       	pop	r28
    3194:	08 95       	ret

00003196 <UART1_Write>:
Slanje podataka USART1 modulom
**
**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
    3196:	cf 93       	push	r28
    3198:	df 93       	push	r29
    319a:	1f 92       	push	r1
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
    31a2:	89 ec       	ldi	r24, 0xC9	; 201
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	fc 01       	movw	r30, r24
    31a8:	80 81       	ld	r24, Z
    31aa:	82 95       	swap	r24
    31ac:	86 95       	lsr	r24
    31ae:	86 95       	lsr	r24
    31b0:	83 70       	andi	r24, 0x03	; 3
    31b2:	88 2f       	mov	r24, r24
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	81 70       	andi	r24, 0x01	; 1
    31b8:	99 27       	eor	r25, r25
    31ba:	89 2b       	or	r24, r25
    31bc:	99 f1       	breq	.+102    	; 0x3224 <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
    31be:	00 00       	nop
    31c0:	80 91 37 02 	lds	r24, 0x0237
    31c4:	80 34       	cpi	r24, 0x40	; 64
    31c6:	e1 f3       	breq	.-8      	; 0x31c0 <UART1_Write+0x2a>

		cli();
    31c8:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
    31ca:	80 91 37 02 	lds	r24, 0x0237
    31ce:	88 23       	and	r24, r24
    31d0:	51 f4       	brne	.+20     	; 0x31e6 <UART1_Write+0x50>
    31d2:	88 ec       	ldi	r24, 0xC8	; 200
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	fc 01       	movw	r30, r24
    31d8:	80 81       	ld	r24, Z
    31da:	88 2f       	mov	r24, r24
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	80 72       	andi	r24, 0x20	; 32
    31e0:	99 27       	eor	r25, r25
    31e2:	89 2b       	or	r24, r25
    31e4:	c1 f4       	brne	.+48     	; 0x3216 <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
    31e6:	80 91 36 02 	lds	r24, 0x0236
    31ea:	88 2f       	mov	r24, r24
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	8a 50       	subi	r24, 0x0A	; 10
    31f0:	9e 4f       	sbci	r25, 0xFE	; 254
    31f2:	29 81       	ldd	r18, Y+1	; 0x01
    31f4:	fc 01       	movw	r30, r24
    31f6:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
    31f8:	80 91 36 02 	lds	r24, 0x0236
    31fc:	8f 5f       	subi	r24, 0xFF	; 255
    31fe:	80 93 36 02 	sts	0x0236, r24
    3202:	80 34       	cpi	r24, 0x40	; 64
    3204:	11 f4       	brne	.+4      	; 0x320a <UART1_Write+0x74>
				tx1_wr_index = 0;
    3206:	10 92 36 02 	sts	0x0236, r1

			tx1_counter++;
    320a:	80 91 37 02 	lds	r24, 0x0237
    320e:	8f 5f       	subi	r24, 0xFF	; 255
    3210:	80 93 37 02 	sts	0x0237, r24
    3214:	05 c0       	rjmp	.+10     	; 0x3220 <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
    3216:	8e ec       	ldi	r24, 0xCE	; 206
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	29 81       	ldd	r18, Y+1	; 0x01
    321c:	fc 01       	movw	r30, r24
    321e:	20 83       	st	Z, r18

		sei();
    3220:	78 94       	sei
    3222:	03 c0       	rjmp	.+6      	; 0x322a <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	0e 94 b1 18 	call	0x3162	; 0x3162 <altUart1Write>
}
    322a:	0f 90       	pop	r0
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	08 95       	ret

00003232 <UART1_Read>:

unsigned char UART1_Read(void)
{
    3232:	cf 93       	push	r28
    3234:	df 93       	push	r29
    3236:	1f 92       	push	r1
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
    323c:	89 ec       	ldi	r24, 0xC9	; 201
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	fc 01       	movw	r30, r24
    3242:	80 81       	ld	r24, Z
    3244:	88 1f       	adc	r24, r24
    3246:	88 27       	eor	r24, r24
    3248:	88 1f       	adc	r24, r24
    324a:	88 2f       	mov	r24, r24
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	81 70       	andi	r24, 0x01	; 1
    3250:	99 27       	eor	r25, r25
    3252:	89 2b       	or	r24, r25
    3254:	e9 f0       	breq	.+58     	; 0x3290 <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
    3256:	00 00       	nop
    3258:	80 91 7a 02 	lds	r24, 0x027A
    325c:	88 23       	and	r24, r24
    325e:	e1 f3       	breq	.-8      	; 0x3258 <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
    3260:	80 91 7b 02 	lds	r24, 0x027B
    3264:	88 2f       	mov	r24, r24
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	87 5c       	subi	r24, 0xC7	; 199
    326a:	9d 4f       	sbci	r25, 0xFD	; 253
    326c:	fc 01       	movw	r30, r24
    326e:	80 81       	ld	r24, Z
    3270:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
    3272:	80 91 7b 02 	lds	r24, 0x027B
    3276:	8f 5f       	subi	r24, 0xFF	; 255
    3278:	80 93 7b 02 	sts	0x027B, r24
    327c:	80 34       	cpi	r24, 0x40	; 64
    327e:	11 f4       	brne	.+4      	; 0x3284 <UART1_Read+0x52>
			rx1_rd_index = 0;
    3280:	10 92 7b 02 	sts	0x027B, r1

		rx1_counter--;
    3284:	80 91 7a 02 	lds	r24, 0x027A
    3288:	81 50       	subi	r24, 0x01	; 1
    328a:	80 93 7a 02 	sts	0x027A, r24
    328e:	13 c0       	rjmp	.+38     	; 0x32b6 <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
    3290:	00 00       	nop
    3292:	88 ec       	ldi	r24, 0xC8	; 200
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	fc 01       	movw	r30, r24
    3298:	80 81       	ld	r24, Z
    329a:	88 1f       	adc	r24, r24
    329c:	88 27       	eor	r24, r24
    329e:	88 1f       	adc	r24, r24
    32a0:	88 2f       	mov	r24, r24
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	81 70       	andi	r24, 0x01	; 1
    32a6:	99 27       	eor	r25, r25
    32a8:	89 2b       	or	r24, r25
    32aa:	99 f3       	breq	.-26     	; 0x3292 <UART1_Read+0x60>
		data = UDR1;
    32ac:	8e ec       	ldi	r24, 0xCE	; 206
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	fc 01       	movw	r30, r24
    32b2:	80 81       	ld	r24, Z
    32b4:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    32b8:	0f 90       	pop	r0
    32ba:	df 91       	pop	r29
    32bc:	cf 91       	pop	r28
    32be:	08 95       	ret

000032c0 <UART1_Buffer>:

void UART1_Buffer(uint8_t* str) {
    32c0:	cf 93       	push	r28
    32c2:	df 93       	push	r29
    32c4:	00 d0       	rcall	.+0      	; 0x32c6 <UART1_Buffer+0x6>
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
    32ca:	9a 83       	std	Y+2, r25	; 0x02
    32cc:	89 83       	std	Y+1, r24	; 0x01
	while(*str) {
    32ce:	0b c0       	rjmp	.+22     	; 0x32e6 <UART1_Buffer+0x26>
		altUart1Write(*str++);
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	9a 81       	ldd	r25, Y+2	; 0x02
    32d4:	9c 01       	movw	r18, r24
    32d6:	2f 5f       	subi	r18, 0xFF	; 255
    32d8:	3f 4f       	sbci	r19, 0xFF	; 255
    32da:	3a 83       	std	Y+2, r19	; 0x02
    32dc:	29 83       	std	Y+1, r18	; 0x01
    32de:	fc 01       	movw	r30, r24
    32e0:	80 81       	ld	r24, Z
    32e2:	0e 94 b1 18 	call	0x3162	; 0x3162 <altUart1Write>

	return data;
}

void UART1_Buffer(uint8_t* str) {
	while(*str) {
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ea:	fc 01       	movw	r30, r24
    32ec:	80 81       	ld	r24, Z
    32ee:	88 23       	and	r24, r24
    32f0:	79 f7       	brne	.-34     	; 0x32d0 <UART1_Buffer+0x10>
		altUart1Write(*str++);
	}
}
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	df 91       	pop	r29
    32f8:	cf 91       	pop	r28
    32fa:	08 95       	ret

000032fc <test_sensor>:
#include "actuator.h"

// if this is defined it will execute the coordinates for the "first desk" if commented it will move on to the "second desk"
#define first_desk

char test_sensor(unsigned long start_time) {
    32fc:	cf 93       	push	r28
    32fe:	df 93       	push	r29
    3300:	00 d0       	rcall	.+0      	; 0x3302 <test_sensor+0x6>
    3302:	00 d0       	rcall	.+0      	; 0x3304 <test_sensor+0x8>
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	69 83       	std	Y+1, r22	; 0x01
    330a:	7a 83       	std	Y+2, r23	; 0x02
    330c:	8b 83       	std	Y+3, r24	; 0x03
    330e:	9c 83       	std	Y+4, r25	; 0x04

	if(gpio_read_pin(0) == 1) {
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	0e 94 57 09 	call	0x12ae	; 0x12ae <gpio_read_pin>
    3316:	81 30       	cpi	r24, 0x01	; 1
    3318:	29 f4       	brne	.+10     	; 0x3324 <test_sensor+0x28>
		odometry_stop(HARD_STOP);
    331a:	83 e5       	ldi	r24, 0x53	; 83
    331c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <odometry_stop>
		return 1;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	01 c0       	rjmp	.+2      	; 0x3326 <test_sensor+0x2a>
	}

	return 0;
    3324:	80 e0       	ldi	r24, 0x00	; 0
}
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	df 91       	pop	r29
    3330:	cf 91       	pop	r28
    3332:	08 95       	ret

00003334 <wait_while_detection_tactic_one>:

/*
 * 	Function: 	 static void wait_while_detection_tactic_one(void)
 * 	Description: This will wait until the callback(sensor) is returning 1, so called detecting the enemy
 */
static void wait_while_detection_tactic_one(void) {
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
    333c:	6c 97       	sbiw	r28, 0x1c	; 28
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	cd bf       	out	0x3d, r28	; 61
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	a8 e4       	ldi	r26, 0x48	; 72
    334e:	b3 e4       	ldi	r27, 0x43	; 67
    3350:	89 83       	std	Y+1, r24	; 0x01
    3352:	9a 83       	std	Y+2, r25	; 0x02
    3354:	ab 83       	std	Y+3, r26	; 0x03
    3356:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e4       	ldi	r19, 0x40	; 64
    335c:	4c e1       	ldi	r20, 0x1C	; 28
    335e:	55 e4       	ldi	r21, 0x45	; 69
    3360:	69 81       	ldd	r22, Y+1	; 0x01
    3362:	7a 81       	ldd	r23, Y+2	; 0x02
    3364:	8b 81       	ldd	r24, Y+3	; 0x03
    3366:	9c 81       	ldd	r25, Y+4	; 0x04
    3368:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	8d 83       	std	Y+5, r24	; 0x05
    3372:	9e 83       	std	Y+6, r25	; 0x06
    3374:	af 83       	std	Y+7, r26	; 0x07
    3376:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	40 e8       	ldi	r20, 0x80	; 128
    337e:	5f e3       	ldi	r21, 0x3F	; 63
    3380:	6d 81       	ldd	r22, Y+5	; 0x05
    3382:	7e 81       	ldd	r23, Y+6	; 0x06
    3384:	8f 81       	ldd	r24, Y+7	; 0x07
    3386:	98 85       	ldd	r25, Y+8	; 0x08
    3388:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    338c:	88 23       	and	r24, r24
    338e:	2c f4       	brge	.+10     	; 0x339a <wait_while_detection_tactic_one+0x66>
		__ticks = 1;
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	9a 87       	std	Y+10, r25	; 0x0a
    3396:	89 87       	std	Y+9, r24	; 0x09
    3398:	3f c0       	rjmp	.+126    	; 0x3418 <wait_while_detection_tactic_one+0xe4>
	else if (__tmp > 65535)
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	3f ef       	ldi	r19, 0xFF	; 255
    339e:	4f e7       	ldi	r20, 0x7F	; 127
    33a0:	57 e4       	ldi	r21, 0x47	; 71
    33a2:	6d 81       	ldd	r22, Y+5	; 0x05
    33a4:	7e 81       	ldd	r23, Y+6	; 0x06
    33a6:	8f 81       	ldd	r24, Y+7	; 0x07
    33a8:	98 85       	ldd	r25, Y+8	; 0x08
    33aa:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    33ae:	18 16       	cp	r1, r24
    33b0:	4c f5       	brge	.+82     	; 0x3404 <wait_while_detection_tactic_one+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	40 e2       	ldi	r20, 0x20	; 32
    33b8:	51 e4       	ldi	r21, 0x41	; 65
    33ba:	69 81       	ldd	r22, Y+1	; 0x01
    33bc:	7a 81       	ldd	r23, Y+2	; 0x02
    33be:	8b 81       	ldd	r24, Y+3	; 0x03
    33c0:	9c 81       	ldd	r25, Y+4	; 0x04
    33c2:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	bc 01       	movw	r22, r24
    33cc:	cd 01       	movw	r24, r26
    33ce:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	9a 87       	std	Y+10, r25	; 0x0a
    33d8:	89 87       	std	Y+9, r24	; 0x09
    33da:	0f c0       	rjmp	.+30     	; 0x33fa <wait_while_detection_tactic_one+0xc6>
    33dc:	8a ef       	ldi	r24, 0xFA	; 250
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	9c 87       	std	Y+12, r25	; 0x0c
    33e2:	8b 87       	std	Y+11, r24	; 0x0b
    33e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    33e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	f1 f7       	brne	.-4      	; 0x33e8 <wait_while_detection_tactic_one+0xb4>
    33ec:	9c 87       	std	Y+12, r25	; 0x0c
    33ee:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f0:	89 85       	ldd	r24, Y+9	; 0x09
    33f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	9a 87       	std	Y+10, r25	; 0x0a
    33f8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fa:	89 85       	ldd	r24, Y+9	; 0x09
    33fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fe:	89 2b       	or	r24, r25
    3400:	69 f7       	brne	.-38     	; 0x33dc <wait_while_detection_tactic_one+0xa8>
    3402:	14 c0       	rjmp	.+40     	; 0x342c <wait_while_detection_tactic_one+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3404:	6d 81       	ldd	r22, Y+5	; 0x05
    3406:	7e 81       	ldd	r23, Y+6	; 0x06
    3408:	8f 81       	ldd	r24, Y+7	; 0x07
    340a:	98 85       	ldd	r25, Y+8	; 0x08
    340c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	9a 87       	std	Y+10, r25	; 0x0a
    3416:	89 87       	std	Y+9, r24	; 0x09
    3418:	89 85       	ldd	r24, Y+9	; 0x09
    341a:	9a 85       	ldd	r25, Y+10	; 0x0a
    341c:	9e 87       	std	Y+14, r25	; 0x0e
    341e:	8d 87       	std	Y+13, r24	; 0x0d
    3420:	8d 85       	ldd	r24, Y+13	; 0x0d
    3422:	9e 85       	ldd	r25, Y+14	; 0x0e
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	f1 f7       	brne	.-4      	; 0x3424 <wait_while_detection_tactic_one+0xf0>
    3428:	9e 87       	std	Y+14, r25	; 0x0e
    342a:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(200);
	while(TACTIC_ONE_POSITION[current_position].callback(0) == 1)
    342c:	72 c0       	rjmp	.+228    	; 0x3512 <wait_while_detection_tactic_one+0x1de>
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	a0 e2       	ldi	r26, 0x20	; 32
    3434:	b1 e4       	ldi	r27, 0x41	; 65
    3436:	8f 87       	std	Y+15, r24	; 0x0f
    3438:	98 8b       	std	Y+16, r25	; 0x10
    343a:	a9 8b       	std	Y+17, r26	; 0x11
    343c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e4       	ldi	r19, 0x40	; 64
    3442:	4c e1       	ldi	r20, 0x1C	; 28
    3444:	55 e4       	ldi	r21, 0x45	; 69
    3446:	6f 85       	ldd	r22, Y+15	; 0x0f
    3448:	78 89       	ldd	r23, Y+16	; 0x10
    344a:	89 89       	ldd	r24, Y+17	; 0x11
    344c:	9a 89       	ldd	r25, Y+18	; 0x12
    344e:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	8b 8b       	std	Y+19, r24	; 0x13
    3458:	9c 8b       	std	Y+20, r25	; 0x14
    345a:	ad 8b       	std	Y+21, r26	; 0x15
    345c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	40 e8       	ldi	r20, 0x80	; 128
    3464:	5f e3       	ldi	r21, 0x3F	; 63
    3466:	6b 89       	ldd	r22, Y+19	; 0x13
    3468:	7c 89       	ldd	r23, Y+20	; 0x14
    346a:	8d 89       	ldd	r24, Y+21	; 0x15
    346c:	9e 89       	ldd	r25, Y+22	; 0x16
    346e:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    3472:	88 23       	and	r24, r24
    3474:	2c f4       	brge	.+10     	; 0x3480 <wait_while_detection_tactic_one+0x14c>
		__ticks = 1;
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	98 8f       	std	Y+24, r25	; 0x18
    347c:	8f 8b       	std	Y+23, r24	; 0x17
    347e:	3f c0       	rjmp	.+126    	; 0x34fe <wait_while_detection_tactic_one+0x1ca>
	else if (__tmp > 65535)
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	3f ef       	ldi	r19, 0xFF	; 255
    3484:	4f e7       	ldi	r20, 0x7F	; 127
    3486:	57 e4       	ldi	r21, 0x47	; 71
    3488:	6b 89       	ldd	r22, Y+19	; 0x13
    348a:	7c 89       	ldd	r23, Y+20	; 0x14
    348c:	8d 89       	ldd	r24, Y+21	; 0x15
    348e:	9e 89       	ldd	r25, Y+22	; 0x16
    3490:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    3494:	18 16       	cp	r1, r24
    3496:	4c f5       	brge	.+82     	; 0x34ea <wait_while_detection_tactic_one+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	40 e2       	ldi	r20, 0x20	; 32
    349e:	51 e4       	ldi	r21, 0x41	; 65
    34a0:	6f 85       	ldd	r22, Y+15	; 0x0f
    34a2:	78 89       	ldd	r23, Y+16	; 0x10
    34a4:	89 89       	ldd	r24, Y+17	; 0x11
    34a6:	9a 89       	ldd	r25, Y+18	; 0x12
    34a8:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    34ac:	dc 01       	movw	r26, r24
    34ae:	cb 01       	movw	r24, r22
    34b0:	bc 01       	movw	r22, r24
    34b2:	cd 01       	movw	r24, r26
    34b4:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	98 8f       	std	Y+24, r25	; 0x18
    34be:	8f 8b       	std	Y+23, r24	; 0x17
    34c0:	0f c0       	rjmp	.+30     	; 0x34e0 <wait_while_detection_tactic_one+0x1ac>
    34c2:	8a ef       	ldi	r24, 0xFA	; 250
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	9a 8f       	std	Y+26, r25	; 0x1a
    34c8:	89 8f       	std	Y+25, r24	; 0x19
    34ca:	89 8d       	ldd	r24, Y+25	; 0x19
    34cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    34ce:	01 97       	sbiw	r24, 0x01	; 1
    34d0:	f1 f7       	brne	.-4      	; 0x34ce <wait_while_detection_tactic_one+0x19a>
    34d2:	9a 8f       	std	Y+26, r25	; 0x1a
    34d4:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d6:	8f 89       	ldd	r24, Y+23	; 0x17
    34d8:	98 8d       	ldd	r25, Y+24	; 0x18
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	98 8f       	std	Y+24, r25	; 0x18
    34de:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e0:	8f 89       	ldd	r24, Y+23	; 0x17
    34e2:	98 8d       	ldd	r25, Y+24	; 0x18
    34e4:	89 2b       	or	r24, r25
    34e6:	69 f7       	brne	.-38     	; 0x34c2 <wait_while_detection_tactic_one+0x18e>
    34e8:	14 c0       	rjmp	.+40     	; 0x3512 <wait_while_detection_tactic_one+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ea:	6b 89       	ldd	r22, Y+19	; 0x13
    34ec:	7c 89       	ldd	r23, Y+20	; 0x14
    34ee:	8d 89       	ldd	r24, Y+21	; 0x15
    34f0:	9e 89       	ldd	r25, Y+22	; 0x16
    34f2:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	98 8f       	std	Y+24, r25	; 0x18
    34fc:	8f 8b       	std	Y+23, r24	; 0x17
    34fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3500:	98 8d       	ldd	r25, Y+24	; 0x18
    3502:	9c 8f       	std	Y+28, r25	; 0x1c
    3504:	8b 8f       	std	Y+27, r24	; 0x1b
    3506:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3508:	9c 8d       	ldd	r25, Y+28	; 0x1c
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	f1 f7       	brne	.-4      	; 0x350a <wait_while_detection_tactic_one+0x1d6>
    350e:	9c 8f       	std	Y+28, r25	; 0x1c
    3510:	8b 8f       	std	Y+27, r24	; 0x1b
    3512:	80 91 7c 02 	lds	r24, 0x027C
    3516:	28 2f       	mov	r18, r24
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	4b e0       	ldi	r20, 0x0B	; 11
    351c:	42 9f       	mul	r20, r18
    351e:	c0 01       	movw	r24, r0
    3520:	43 9f       	mul	r20, r19
    3522:	90 0d       	add	r25, r0
    3524:	11 24       	eor	r1, r1
    3526:	80 5e       	subi	r24, 0xE0	; 224
    3528:	9e 4f       	sbci	r25, 0xFE	; 254
    352a:	fc 01       	movw	r30, r24
    352c:	20 81       	ld	r18, Z
    352e:	31 81       	ldd	r19, Z+1	; 0x01
    3530:	60 e0       	ldi	r22, 0x00	; 0
    3532:	70 e0       	ldi	r23, 0x00	; 0
    3534:	cb 01       	movw	r24, r22
    3536:	f9 01       	movw	r30, r18
    3538:	09 95       	icall
    353a:	81 30       	cpi	r24, 0x01	; 1
    353c:	09 f4       	brne	.+2      	; 0x3540 <wait_while_detection_tactic_one+0x20c>
    353e:	77 cf       	rjmp	.-274    	; 0x342e <wait_while_detection_tactic_one+0xfa>
		_delay_ms(10);
	next_position = current_position;
    3540:	80 91 7c 02 	lds	r24, 0x027C
    3544:	80 93 7d 02 	sts	0x027D, r24
	active_state = TACTIC_ONE;
    3548:	81 e0       	ldi	r24, 0x01	; 1
    354a:	80 93 16 01 	sts	0x0116, r24

}
    354e:	6c 96       	adiw	r28, 0x1c	; 28
    3550:	0f b6       	in	r0, 0x3f	; 63
    3552:	f8 94       	cli
    3554:	de bf       	out	0x3e, r29	; 62
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	df 91       	pop	r29
    355c:	cf 91       	pop	r28
    355e:	08 95       	ret

00003560 <darkside>:

void darkside(void) {
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	cd b7       	in	r28, 0x3d	; 61
    3566:	de b7       	in	r29, 0x3e	; 62
    3568:	a3 97       	sbiw	r28, 0x23	; 35
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	de bf       	out	0x3e, r29	; 62
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	cd bf       	out	0x3d, r28	; 61


	// setting the starting position
	struct odometry_position startingPosition; startingPosition.x = 0; startingPosition.y = 0; startingPosition.angle = 0;
    3574:	1e 8e       	std	Y+30, r1	; 0x1e
    3576:	1d 8e       	std	Y+29, r1	; 0x1d
    3578:	18 a2       	std	Y+32, r1	; 0x20
    357a:	1f 8e       	std	Y+31, r1	; 0x1f
    357c:	1a a2       	std	Y+34, r1	; 0x22
    357e:	19 a2       	std	Y+33, r1	; 0x21

	// sending the starting position to odometry
	odometry_set_position(&startingPosition);
    3580:	ce 01       	movw	r24, r28
    3582:	4d 96       	adiw	r24, 0x1d	; 29
    3584:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <odometry_set_position>

	while(1) {
		switch(active_state) {
    3588:	80 91 16 01 	lds	r24, 0x0116
    358c:	88 2f       	mov	r24, r24
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	81 30       	cpi	r24, 0x01	; 1
    3592:	91 05       	cpc	r25, r1
    3594:	09 f4       	brne	.+2      	; 0x3598 <darkside+0x38>
    3596:	8f c0       	rjmp	.+286    	; 0x36b6 <darkside+0x156>
    3598:	83 35       	cpi	r24, 0x53	; 83
    359a:	91 05       	cpc	r25, r1
    359c:	91 f0       	breq	.+36     	; 0x35c2 <darkside+0x62>
    359e:	89 2b       	or	r24, r25
    35a0:	09 f0       	breq	.+2      	; 0x35a4 <darkside+0x44>
    35a2:	59 c1       	rjmp	.+690    	; 0x3856 <darkside+0x2f6>
		case COLLISION:		// COLLISION ! DON'T FORGET BREAK !
			if(current_position == 0) {
    35a4:	80 91 7c 02 	lds	r24, 0x027C
    35a8:	88 23       	and	r24, r24
    35aa:	19 f4       	brne	.+6      	; 0x35b2 <darkside+0x52>
				wait_while_detection_tactic_one();
    35ac:	0e 94 9a 19 	call	0x3334	; 0x3334 <wait_while_detection_tactic_one>
				break;
    35b0:	52 c1       	rjmp	.+676    	; 0x3856 <darkside+0x2f6>
			} else if(current_position == 1) {
    35b2:	80 91 7c 02 	lds	r24, 0x027C
    35b6:	81 30       	cpi	r24, 0x01	; 1
    35b8:	19 f4       	brne	.+6      	; 0x35c0 <darkside+0x60>
				wait_while_detection_tactic_one();
    35ba:	0e 94 9a 19 	call	0x3334	; 0x3334 <wait_while_detection_tactic_one>
				break;
    35be:	4b c1       	rjmp	.+662    	; 0x3856 <darkside+0x2f6>
			}

			break;
    35c0:	4a c1       	rjmp	.+660    	; 0x3856 <darkside+0x2f6>
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	aa e7       	ldi	r26, 0x7A	; 122
    35c8:	b4 e4       	ldi	r27, 0x44	; 68
    35ca:	89 83       	std	Y+1, r24	; 0x01
    35cc:	9a 83       	std	Y+2, r25	; 0x02
    35ce:	ab 83       	std	Y+3, r26	; 0x03
    35d0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	30 e4       	ldi	r19, 0x40	; 64
    35d6:	4c e1       	ldi	r20, 0x1C	; 28
    35d8:	55 e4       	ldi	r21, 0x45	; 69
    35da:	69 81       	ldd	r22, Y+1	; 0x01
    35dc:	7a 81       	ldd	r23, Y+2	; 0x02
    35de:	8b 81       	ldd	r24, Y+3	; 0x03
    35e0:	9c 81       	ldd	r25, Y+4	; 0x04
    35e2:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	8d 83       	std	Y+5, r24	; 0x05
    35ec:	9e 83       	std	Y+6, r25	; 0x06
    35ee:	af 83       	std	Y+7, r26	; 0x07
    35f0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	40 e8       	ldi	r20, 0x80	; 128
    35f8:	5f e3       	ldi	r21, 0x3F	; 63
    35fa:	6d 81       	ldd	r22, Y+5	; 0x05
    35fc:	7e 81       	ldd	r23, Y+6	; 0x06
    35fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3600:	98 85       	ldd	r25, Y+8	; 0x08
    3602:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    3606:	88 23       	and	r24, r24
    3608:	2c f4       	brge	.+10     	; 0x3614 <darkside+0xb4>
		__ticks = 1;
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	9a 87       	std	Y+10, r25	; 0x0a
    3610:	89 87       	std	Y+9, r24	; 0x09
    3612:	3f c0       	rjmp	.+126    	; 0x3692 <darkside+0x132>
	else if (__tmp > 65535)
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	3f ef       	ldi	r19, 0xFF	; 255
    3618:	4f e7       	ldi	r20, 0x7F	; 127
    361a:	57 e4       	ldi	r21, 0x47	; 71
    361c:	6d 81       	ldd	r22, Y+5	; 0x05
    361e:	7e 81       	ldd	r23, Y+6	; 0x06
    3620:	8f 81       	ldd	r24, Y+7	; 0x07
    3622:	98 85       	ldd	r25, Y+8	; 0x08
    3624:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    3628:	18 16       	cp	r1, r24
    362a:	4c f5       	brge	.+82     	; 0x367e <darkside+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	40 e2       	ldi	r20, 0x20	; 32
    3632:	51 e4       	ldi	r21, 0x41	; 65
    3634:	69 81       	ldd	r22, Y+1	; 0x01
    3636:	7a 81       	ldd	r23, Y+2	; 0x02
    3638:	8b 81       	ldd	r24, Y+3	; 0x03
    363a:	9c 81       	ldd	r25, Y+4	; 0x04
    363c:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	bc 01       	movw	r22, r24
    3646:	cd 01       	movw	r24, r26
    3648:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	9a 87       	std	Y+10, r25	; 0x0a
    3652:	89 87       	std	Y+9, r24	; 0x09
    3654:	0f c0       	rjmp	.+30     	; 0x3674 <darkside+0x114>
    3656:	8a ef       	ldi	r24, 0xFA	; 250
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	9c 87       	std	Y+12, r25	; 0x0c
    365c:	8b 87       	std	Y+11, r24	; 0x0b
    365e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3660:	9c 85       	ldd	r25, Y+12	; 0x0c
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	f1 f7       	brne	.-4      	; 0x3662 <darkside+0x102>
    3666:	9c 87       	std	Y+12, r25	; 0x0c
    3668:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    366a:	89 85       	ldd	r24, Y+9	; 0x09
    366c:	9a 85       	ldd	r25, Y+10	; 0x0a
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	9a 87       	std	Y+10, r25	; 0x0a
    3672:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3674:	89 85       	ldd	r24, Y+9	; 0x09
    3676:	9a 85       	ldd	r25, Y+10	; 0x0a
    3678:	89 2b       	or	r24, r25
    367a:	69 f7       	brne	.-38     	; 0x3656 <darkside+0xf6>
    367c:	14 c0       	rjmp	.+40     	; 0x36a6 <darkside+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    367e:	6d 81       	ldd	r22, Y+5	; 0x05
    3680:	7e 81       	ldd	r23, Y+6	; 0x06
    3682:	8f 81       	ldd	r24, Y+7	; 0x07
    3684:	98 85       	ldd	r25, Y+8	; 0x08
    3686:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	9a 87       	std	Y+10, r25	; 0x0a
    3690:	89 87       	std	Y+9, r24	; 0x09
    3692:	89 85       	ldd	r24, Y+9	; 0x09
    3694:	9a 85       	ldd	r25, Y+10	; 0x0a
    3696:	9e 87       	std	Y+14, r25	; 0x0e
    3698:	8d 87       	std	Y+13, r24	; 0x0d
    369a:	8d 85       	ldd	r24, Y+13	; 0x0d
    369c:	9e 85       	ldd	r25, Y+14	; 0x0e
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	f1 f7       	brne	.-4      	; 0x369e <darkside+0x13e>
    36a2:	9e 87       	std	Y+14, r25	; 0x0e
    36a4:	8d 87       	std	Y+13, r24	; 0x0d
		case STUCK:			// STUCK
			_delay_ms(1000);
			active_state = TACTIC_ONE;
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	80 93 16 01 	sts	0x0116, r24
			next_position = current_position;
    36ac:	80 91 7c 02 	lds	r24, 0x027C
    36b0:	80 93 7d 02 	sts	0x027D, r24

			break;
    36b4:	d0 c0       	rjmp	.+416    	; 0x3856 <darkside+0x2f6>
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    36b6:	80 91 7d 02 	lds	r24, 0x027D
    36ba:	80 93 7c 02 	sts	0x027C, r24
    36be:	c6 c0       	rjmp	.+396    	; 0x384c <darkside+0x2ec>

				// send the gotoField and receive status
				odometry_status = odometry_move_to_position(&TACTIC_ONE_POSITION[current_position].point, TACTIC_ONE_POSITION[current_position].speed, TACTIC_ONE_POSITION[current_position].direction, TACTIC_ONE_POSITION[current_position].callback);
    36c0:	80 91 7c 02 	lds	r24, 0x027C
    36c4:	28 2f       	mov	r18, r24
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	4b e0       	ldi	r20, 0x0B	; 11
    36ca:	42 9f       	mul	r20, r18
    36cc:	c0 01       	movw	r24, r0
    36ce:	43 9f       	mul	r20, r19
    36d0:	90 0d       	add	r25, r0
    36d2:	11 24       	eor	r1, r1
    36d4:	80 5e       	subi	r24, 0xE0	; 224
    36d6:	9e 4f       	sbci	r25, 0xFE	; 254
    36d8:	dc 01       	movw	r26, r24
    36da:	4d 91       	ld	r20, X+
    36dc:	5c 91       	ld	r21, X
    36de:	80 91 7c 02 	lds	r24, 0x027C
    36e2:	28 2f       	mov	r18, r24
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	6b e0       	ldi	r22, 0x0B	; 11
    36e8:	62 9f       	mul	r22, r18
    36ea:	c0 01       	movw	r24, r0
    36ec:	63 9f       	mul	r22, r19
    36ee:	90 0d       	add	r25, r0
    36f0:	11 24       	eor	r1, r1
    36f2:	81 5e       	subi	r24, 0xE1	; 225
    36f4:	9e 4f       	sbci	r25, 0xFE	; 254
    36f6:	dc 01       	movw	r26, r24
    36f8:	ec 91       	ld	r30, X
    36fa:	80 91 7c 02 	lds	r24, 0x027C
    36fe:	28 2f       	mov	r18, r24
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	6b e0       	ldi	r22, 0x0B	; 11
    3704:	62 9f       	mul	r22, r18
    3706:	c0 01       	movw	r24, r0
    3708:	63 9f       	mul	r22, r19
    370a:	90 0d       	add	r25, r0
    370c:	11 24       	eor	r1, r1
    370e:	82 5e       	subi	r24, 0xE2	; 226
    3710:	9e 4f       	sbci	r25, 0xFE	; 254
    3712:	dc 01       	movw	r26, r24
    3714:	7c 91       	ld	r23, X
    3716:	80 91 7c 02 	lds	r24, 0x027C
    371a:	28 2f       	mov	r18, r24
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	6b e0       	ldi	r22, 0x0B	; 11
    3720:	62 9f       	mul	r22, r18
    3722:	c0 01       	movw	r24, r0
    3724:	63 9f       	mul	r22, r19
    3726:	90 0d       	add	r25, r0
    3728:	11 24       	eor	r1, r1
    372a:	89 5e       	subi	r24, 0xE9	; 233
    372c:	9e 4f       	sbci	r25, 0xFE	; 254
    372e:	9a 01       	movw	r18, r20
    3730:	4e 2f       	mov	r20, r30
    3732:	67 2f       	mov	r22, r23
    3734:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <odometry_move_to_position>
    3738:	80 93 7e 02 	sts	0x027E, r24

				// if odometry fails set state to collision
				if(odometry_status == ODOMETRY_FAIL)
    373c:	80 91 7e 02 	lds	r24, 0x027E
    3740:	81 30       	cpi	r24, 0x01	; 1
    3742:	19 f4       	brne	.+6      	; 0x374a <darkside+0x1ea>
				{
					active_state = COLLISION;
    3744:	10 92 16 01 	sts	0x0116, r1
					break;
    3748:	86 c0       	rjmp	.+268    	; 0x3856 <darkside+0x2f6>
				}
				else if(odometry_status == ODOMETRY_STUCK)
				{

				}
				if(current_position == 0) {
    374a:	80 91 7c 02 	lds	r24, 0x027C
    374e:	88 23       	and	r24, r24
    3750:	09 f0       	breq	.+2      	; 0x3754 <darkside+0x1f4>
    3752:	72 c0       	rjmp	.+228    	; 0x3838 <darkside+0x2d8>
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	aa ef       	ldi	r26, 0xFA	; 250
    375a:	b4 e4       	ldi	r27, 0x44	; 68
    375c:	8f 87       	std	Y+15, r24	; 0x0f
    375e:	98 8b       	std	Y+16, r25	; 0x10
    3760:	a9 8b       	std	Y+17, r26	; 0x11
    3762:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e4       	ldi	r19, 0x40	; 64
    3768:	4c e1       	ldi	r20, 0x1C	; 28
    376a:	55 e4       	ldi	r21, 0x45	; 69
    376c:	6f 85       	ldd	r22, Y+15	; 0x0f
    376e:	78 89       	ldd	r23, Y+16	; 0x10
    3770:	89 89       	ldd	r24, Y+17	; 0x11
    3772:	9a 89       	ldd	r25, Y+18	; 0x12
    3774:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	8b 8b       	std	Y+19, r24	; 0x13
    377e:	9c 8b       	std	Y+20, r25	; 0x14
    3780:	ad 8b       	std	Y+21, r26	; 0x15
    3782:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	40 e8       	ldi	r20, 0x80	; 128
    378a:	5f e3       	ldi	r21, 0x3F	; 63
    378c:	6b 89       	ldd	r22, Y+19	; 0x13
    378e:	7c 89       	ldd	r23, Y+20	; 0x14
    3790:	8d 89       	ldd	r24, Y+21	; 0x15
    3792:	9e 89       	ldd	r25, Y+22	; 0x16
    3794:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    3798:	88 23       	and	r24, r24
    379a:	2c f4       	brge	.+10     	; 0x37a6 <darkside+0x246>
		__ticks = 1;
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	98 8f       	std	Y+24, r25	; 0x18
    37a2:	8f 8b       	std	Y+23, r24	; 0x17
    37a4:	3f c0       	rjmp	.+126    	; 0x3824 <darkside+0x2c4>
	else if (__tmp > 65535)
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	3f ef       	ldi	r19, 0xFF	; 255
    37aa:	4f e7       	ldi	r20, 0x7F	; 127
    37ac:	57 e4       	ldi	r21, 0x47	; 71
    37ae:	6b 89       	ldd	r22, Y+19	; 0x13
    37b0:	7c 89       	ldd	r23, Y+20	; 0x14
    37b2:	8d 89       	ldd	r24, Y+21	; 0x15
    37b4:	9e 89       	ldd	r25, Y+22	; 0x16
    37b6:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    37ba:	18 16       	cp	r1, r24
    37bc:	4c f5       	brge	.+82     	; 0x3810 <darkside+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	40 e2       	ldi	r20, 0x20	; 32
    37c4:	51 e4       	ldi	r21, 0x41	; 65
    37c6:	6f 85       	ldd	r22, Y+15	; 0x0f
    37c8:	78 89       	ldd	r23, Y+16	; 0x10
    37ca:	89 89       	ldd	r24, Y+17	; 0x11
    37cc:	9a 89       	ldd	r25, Y+18	; 0x12
    37ce:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	bc 01       	movw	r22, r24
    37d8:	cd 01       	movw	r24, r26
    37da:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	98 8f       	std	Y+24, r25	; 0x18
    37e4:	8f 8b       	std	Y+23, r24	; 0x17
    37e6:	0f c0       	rjmp	.+30     	; 0x3806 <darkside+0x2a6>
    37e8:	8a ef       	ldi	r24, 0xFA	; 250
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	9a 8f       	std	Y+26, r25	; 0x1a
    37ee:	89 8f       	std	Y+25, r24	; 0x19
    37f0:	89 8d       	ldd	r24, Y+25	; 0x19
    37f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    37f4:	01 97       	sbiw	r24, 0x01	; 1
    37f6:	f1 f7       	brne	.-4      	; 0x37f4 <darkside+0x294>
    37f8:	9a 8f       	std	Y+26, r25	; 0x1a
    37fa:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fc:	8f 89       	ldd	r24, Y+23	; 0x17
    37fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3800:	01 97       	sbiw	r24, 0x01	; 1
    3802:	98 8f       	std	Y+24, r25	; 0x18
    3804:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3806:	8f 89       	ldd	r24, Y+23	; 0x17
    3808:	98 8d       	ldd	r25, Y+24	; 0x18
    380a:	89 2b       	or	r24, r25
    380c:	69 f7       	brne	.-38     	; 0x37e8 <darkside+0x288>
    380e:	14 c0       	rjmp	.+40     	; 0x3838 <darkside+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3810:	6b 89       	ldd	r22, Y+19	; 0x13
    3812:	7c 89       	ldd	r23, Y+20	; 0x14
    3814:	8d 89       	ldd	r24, Y+21	; 0x15
    3816:	9e 89       	ldd	r25, Y+22	; 0x16
    3818:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	98 8f       	std	Y+24, r25	; 0x18
    3822:	8f 8b       	std	Y+23, r24	; 0x17
    3824:	8f 89       	ldd	r24, Y+23	; 0x17
    3826:	98 8d       	ldd	r25, Y+24	; 0x18
    3828:	9c 8f       	std	Y+28, r25	; 0x1c
    382a:	8b 8f       	std	Y+27, r24	; 0x1b
    382c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    382e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	f1 f7       	brne	.-4      	; 0x3830 <darkside+0x2d0>
    3834:	9c 8f       	std	Y+28, r25	; 0x1c
    3836:	8b 8f       	std	Y+27, r24	; 0x1b
					_delay_ms(2000);
				}
				// last position
				if(current_position == (TACTIC_ONE_POSITION_COUNT - 1))
    3838:	80 91 7c 02 	lds	r24, 0x027C
    383c:	81 30       	cpi	r24, 0x01	; 1
    383e:	09 f4       	brne	.+2      	; 0x3842 <darkside+0x2e2>
				{
					while(1);
    3840:	ff cf       	rjmp	.-2      	; 0x3840 <darkside+0x2e0>
			active_state = TACTIC_ONE;
			next_position = current_position;

			break;
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    3842:	80 91 7c 02 	lds	r24, 0x027C
    3846:	8f 5f       	subi	r24, 0xFF	; 255
    3848:	80 93 7c 02 	sts	0x027C, r24
    384c:	80 91 7c 02 	lds	r24, 0x027C
    3850:	82 30       	cpi	r24, 0x02	; 2
    3852:	08 f4       	brcc	.+2      	; 0x3856 <darkside+0x2f6>
    3854:	35 cf       	rjmp	.-406    	; 0x36c0 <darkside+0x160>
				{
					while(1);
				}
			}//end of for
		}//end of switch
	}//end of while
    3856:	98 ce       	rjmp	.-720    	; 0x3588 <darkside+0x28>

00003858 <main>:
#include "debug.h"
#include "can.h"
#include <avr/interrupt.h>

int main()
{
    3858:	cf 93       	push	r28
    385a:	df 93       	push	r29
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62
    3860:	aa 97       	sbiw	r28, 0x2a	; 42
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	f8 94       	cli
    3866:	de bf       	out	0x3e, r29	; 62
    3868:	0f be       	out	0x3f, r0	; 63
    386a:	cd bf       	out	0x3d, r28	; 61

	system_init();
    386c:	0e 94 49 14 	call	0x2892	; 0x2892 <system_init>
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	90 e8       	ldi	r25, 0x80	; 128
    3874:	ab e3       	ldi	r26, 0x3B	; 59
    3876:	b5 e4       	ldi	r27, 0x45	; 69
    3878:	89 83       	std	Y+1, r24	; 0x01
    387a:	9a 83       	std	Y+2, r25	; 0x02
    387c:	ab 83       	std	Y+3, r26	; 0x03
    387e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	30 e4       	ldi	r19, 0x40	; 64
    3884:	4c e1       	ldi	r20, 0x1C	; 28
    3886:	55 e4       	ldi	r21, 0x45	; 69
    3888:	69 81       	ldd	r22, Y+1	; 0x01
    388a:	7a 81       	ldd	r23, Y+2	; 0x02
    388c:	8b 81       	ldd	r24, Y+3	; 0x03
    388e:	9c 81       	ldd	r25, Y+4	; 0x04
    3890:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	8d 83       	std	Y+5, r24	; 0x05
    389a:	9e 83       	std	Y+6, r25	; 0x06
    389c:	af 83       	std	Y+7, r26	; 0x07
    389e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	40 e8       	ldi	r20, 0x80	; 128
    38a6:	5f e3       	ldi	r21, 0x3F	; 63
    38a8:	6d 81       	ldd	r22, Y+5	; 0x05
    38aa:	7e 81       	ldd	r23, Y+6	; 0x06
    38ac:	8f 81       	ldd	r24, Y+7	; 0x07
    38ae:	98 85       	ldd	r25, Y+8	; 0x08
    38b0:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    38b4:	88 23       	and	r24, r24
    38b6:	2c f4       	brge	.+10     	; 0x38c2 <main+0x6a>
		__ticks = 1;
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	9a 87       	std	Y+10, r25	; 0x0a
    38be:	89 87       	std	Y+9, r24	; 0x09
    38c0:	3f c0       	rjmp	.+126    	; 0x3940 <main+0xe8>
	else if (__tmp > 65535)
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	3f ef       	ldi	r19, 0xFF	; 255
    38c6:	4f e7       	ldi	r20, 0x7F	; 127
    38c8:	57 e4       	ldi	r21, 0x47	; 71
    38ca:	6d 81       	ldd	r22, Y+5	; 0x05
    38cc:	7e 81       	ldd	r23, Y+6	; 0x06
    38ce:	8f 81       	ldd	r24, Y+7	; 0x07
    38d0:	98 85       	ldd	r25, Y+8	; 0x08
    38d2:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    38d6:	18 16       	cp	r1, r24
    38d8:	4c f5       	brge	.+82     	; 0x392c <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	40 e2       	ldi	r20, 0x20	; 32
    38e0:	51 e4       	ldi	r21, 0x41	; 65
    38e2:	69 81       	ldd	r22, Y+1	; 0x01
    38e4:	7a 81       	ldd	r23, Y+2	; 0x02
    38e6:	8b 81       	ldd	r24, Y+3	; 0x03
    38e8:	9c 81       	ldd	r25, Y+4	; 0x04
    38ea:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    38ee:	dc 01       	movw	r26, r24
    38f0:	cb 01       	movw	r24, r22
    38f2:	bc 01       	movw	r22, r24
    38f4:	cd 01       	movw	r24, r26
    38f6:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	9a 87       	std	Y+10, r25	; 0x0a
    3900:	89 87       	std	Y+9, r24	; 0x09
    3902:	0f c0       	rjmp	.+30     	; 0x3922 <main+0xca>
    3904:	8a ef       	ldi	r24, 0xFA	; 250
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	9c 87       	std	Y+12, r25	; 0x0c
    390a:	8b 87       	std	Y+11, r24	; 0x0b
    390c:	8b 85       	ldd	r24, Y+11	; 0x0b
    390e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	f1 f7       	brne	.-4      	; 0x3910 <main+0xb8>
    3914:	9c 87       	std	Y+12, r25	; 0x0c
    3916:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3918:	89 85       	ldd	r24, Y+9	; 0x09
    391a:	9a 85       	ldd	r25, Y+10	; 0x0a
    391c:	01 97       	sbiw	r24, 0x01	; 1
    391e:	9a 87       	std	Y+10, r25	; 0x0a
    3920:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3922:	89 85       	ldd	r24, Y+9	; 0x09
    3924:	9a 85       	ldd	r25, Y+10	; 0x0a
    3926:	89 2b       	or	r24, r25
    3928:	69 f7       	brne	.-38     	; 0x3904 <main+0xac>
    392a:	14 c0       	rjmp	.+40     	; 0x3954 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    392c:	6d 81       	ldd	r22, Y+5	; 0x05
    392e:	7e 81       	ldd	r23, Y+6	; 0x06
    3930:	8f 81       	ldd	r24, Y+7	; 0x07
    3932:	98 85       	ldd	r25, Y+8	; 0x08
    3934:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    3938:	dc 01       	movw	r26, r24
    393a:	cb 01       	movw	r24, r22
    393c:	9a 87       	std	Y+10, r25	; 0x0a
    393e:	89 87       	std	Y+9, r24	; 0x09
    3940:	89 85       	ldd	r24, Y+9	; 0x09
    3942:	9a 85       	ldd	r25, Y+10	; 0x0a
    3944:	9e 87       	std	Y+14, r25	; 0x0e
    3946:	8d 87       	std	Y+13, r24	; 0x0d
    3948:	8d 85       	ldd	r24, Y+13	; 0x0d
    394a:	9e 85       	ldd	r25, Y+14	; 0x0e
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	f1 f7       	brne	.-4      	; 0x394c <main+0xf4>
    3950:	9e 87       	std	Y+14, r25	; 0x0e
    3952:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(3000);

	while(1) {
		SER_1(180);
    3954:	6f e7       	ldi	r22, 0x7F	; 127
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	0e 94 9b 00 	call	0x136	; 0x136 <servo_move>
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	aa e7       	ldi	r26, 0x7A	; 122
    3962:	b4 e4       	ldi	r27, 0x44	; 68
    3964:	8f 87       	std	Y+15, r24	; 0x0f
    3966:	98 8b       	std	Y+16, r25	; 0x10
    3968:	a9 8b       	std	Y+17, r26	; 0x11
    396a:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e4       	ldi	r19, 0x40	; 64
    3970:	4c e1       	ldi	r20, 0x1C	; 28
    3972:	55 e4       	ldi	r21, 0x45	; 69
    3974:	6f 85       	ldd	r22, Y+15	; 0x0f
    3976:	78 89       	ldd	r23, Y+16	; 0x10
    3978:	89 89       	ldd	r24, Y+17	; 0x11
    397a:	9a 89       	ldd	r25, Y+18	; 0x12
    397c:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    3980:	dc 01       	movw	r26, r24
    3982:	cb 01       	movw	r24, r22
    3984:	8b 8b       	std	Y+19, r24	; 0x13
    3986:	9c 8b       	std	Y+20, r25	; 0x14
    3988:	ad 8b       	std	Y+21, r26	; 0x15
    398a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	40 e8       	ldi	r20, 0x80	; 128
    3992:	5f e3       	ldi	r21, 0x3F	; 63
    3994:	6b 89       	ldd	r22, Y+19	; 0x13
    3996:	7c 89       	ldd	r23, Y+20	; 0x14
    3998:	8d 89       	ldd	r24, Y+21	; 0x15
    399a:	9e 89       	ldd	r25, Y+22	; 0x16
    399c:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    39a0:	88 23       	and	r24, r24
    39a2:	2c f4       	brge	.+10     	; 0x39ae <main+0x156>
		__ticks = 1;
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	98 8f       	std	Y+24, r25	; 0x18
    39aa:	8f 8b       	std	Y+23, r24	; 0x17
    39ac:	3f c0       	rjmp	.+126    	; 0x3a2c <main+0x1d4>
	else if (__tmp > 65535)
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	3f ef       	ldi	r19, 0xFF	; 255
    39b2:	4f e7       	ldi	r20, 0x7F	; 127
    39b4:	57 e4       	ldi	r21, 0x47	; 71
    39b6:	6b 89       	ldd	r22, Y+19	; 0x13
    39b8:	7c 89       	ldd	r23, Y+20	; 0x14
    39ba:	8d 89       	ldd	r24, Y+21	; 0x15
    39bc:	9e 89       	ldd	r25, Y+22	; 0x16
    39be:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    39c2:	18 16       	cp	r1, r24
    39c4:	4c f5       	brge	.+82     	; 0x3a18 <main+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	40 e2       	ldi	r20, 0x20	; 32
    39cc:	51 e4       	ldi	r21, 0x41	; 65
    39ce:	6f 85       	ldd	r22, Y+15	; 0x0f
    39d0:	78 89       	ldd	r23, Y+16	; 0x10
    39d2:	89 89       	ldd	r24, Y+17	; 0x11
    39d4:	9a 89       	ldd	r25, Y+18	; 0x12
    39d6:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	bc 01       	movw	r22, r24
    39e0:	cd 01       	movw	r24, r26
    39e2:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    39e6:	dc 01       	movw	r26, r24
    39e8:	cb 01       	movw	r24, r22
    39ea:	98 8f       	std	Y+24, r25	; 0x18
    39ec:	8f 8b       	std	Y+23, r24	; 0x17
    39ee:	0f c0       	rjmp	.+30     	; 0x3a0e <main+0x1b6>
    39f0:	8a ef       	ldi	r24, 0xFA	; 250
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	9a 8f       	std	Y+26, r25	; 0x1a
    39f6:	89 8f       	std	Y+25, r24	; 0x19
    39f8:	89 8d       	ldd	r24, Y+25	; 0x19
    39fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    39fc:	01 97       	sbiw	r24, 0x01	; 1
    39fe:	f1 f7       	brne	.-4      	; 0x39fc <main+0x1a4>
    3a00:	9a 8f       	std	Y+26, r25	; 0x1a
    3a02:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a04:	8f 89       	ldd	r24, Y+23	; 0x17
    3a06:	98 8d       	ldd	r25, Y+24	; 0x18
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	98 8f       	std	Y+24, r25	; 0x18
    3a0c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a10:	98 8d       	ldd	r25, Y+24	; 0x18
    3a12:	89 2b       	or	r24, r25
    3a14:	69 f7       	brne	.-38     	; 0x39f0 <main+0x198>
    3a16:	14 c0       	rjmp	.+40     	; 0x3a40 <main+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a18:	6b 89       	ldd	r22, Y+19	; 0x13
    3a1a:	7c 89       	ldd	r23, Y+20	; 0x14
    3a1c:	8d 89       	ldd	r24, Y+21	; 0x15
    3a1e:	9e 89       	ldd	r25, Y+22	; 0x16
    3a20:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	98 8f       	std	Y+24, r25	; 0x18
    3a2a:	8f 8b       	std	Y+23, r24	; 0x17
    3a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a30:	9c 8f       	std	Y+28, r25	; 0x1c
    3a32:	8b 8f       	std	Y+27, r24	; 0x1b
    3a34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a38:	01 97       	sbiw	r24, 0x01	; 1
    3a3a:	f1 f7       	brne	.-4      	; 0x3a38 <main+0x1e0>
    3a3c:	9c 8f       	std	Y+28, r25	; 0x1c
    3a3e:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1000);
		SER_1(0);
    3a40:	60 e0       	ldi	r22, 0x00	; 0
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	0e 94 9b 00 	call	0x136	; 0x136 <servo_move>
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	aa ef       	ldi	r26, 0xFA	; 250
    3a4e:	b4 e4       	ldi	r27, 0x44	; 68
    3a50:	8d 8f       	std	Y+29, r24	; 0x1d
    3a52:	9e 8f       	std	Y+30, r25	; 0x1e
    3a54:	af 8f       	std	Y+31, r26	; 0x1f
    3a56:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e4       	ldi	r19, 0x40	; 64
    3a5c:	4c e1       	ldi	r20, 0x1C	; 28
    3a5e:	55 e4       	ldi	r21, 0x45	; 69
    3a60:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3a62:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3a64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a66:	98 a1       	ldd	r25, Y+32	; 0x20
    3a68:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	89 a3       	std	Y+33, r24	; 0x21
    3a72:	9a a3       	std	Y+34, r25	; 0x22
    3a74:	ab a3       	std	Y+35, r26	; 0x23
    3a76:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e8       	ldi	r20, 0x80	; 128
    3a7e:	5f e3       	ldi	r21, 0x3F	; 63
    3a80:	69 a1       	ldd	r22, Y+33	; 0x21
    3a82:	7a a1       	ldd	r23, Y+34	; 0x22
    3a84:	8b a1       	ldd	r24, Y+35	; 0x23
    3a86:	9c a1       	ldd	r25, Y+36	; 0x24
    3a88:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__cmpsf2>
    3a8c:	88 23       	and	r24, r24
    3a8e:	2c f4       	brge	.+10     	; 0x3a9a <main+0x242>
		__ticks = 1;
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	9e a3       	std	Y+38, r25	; 0x26
    3a96:	8d a3       	std	Y+37, r24	; 0x25
    3a98:	3f c0       	rjmp	.+126    	; 0x3b18 <main+0x2c0>
	else if (__tmp > 65535)
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	3f ef       	ldi	r19, 0xFF	; 255
    3a9e:	4f e7       	ldi	r20, 0x7F	; 127
    3aa0:	57 e4       	ldi	r21, 0x47	; 71
    3aa2:	69 a1       	ldd	r22, Y+33	; 0x21
    3aa4:	7a a1       	ldd	r23, Y+34	; 0x22
    3aa6:	8b a1       	ldd	r24, Y+35	; 0x23
    3aa8:	9c a1       	ldd	r25, Y+36	; 0x24
    3aaa:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__gesf2>
    3aae:	18 16       	cp	r1, r24
    3ab0:	4c f5       	brge	.+82     	; 0x3b04 <main+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	40 e2       	ldi	r20, 0x20	; 32
    3ab8:	51 e4       	ldi	r21, 0x41	; 65
    3aba:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3abc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3abe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ac0:	98 a1       	ldd	r25, Y+32	; 0x20
    3ac2:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__mulsf3>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	bc 01       	movw	r22, r24
    3acc:	cd 01       	movw	r24, r26
    3ace:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	9e a3       	std	Y+38, r25	; 0x26
    3ad8:	8d a3       	std	Y+37, r24	; 0x25
    3ada:	0f c0       	rjmp	.+30     	; 0x3afa <main+0x2a2>
    3adc:	8a ef       	ldi	r24, 0xFA	; 250
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	98 a7       	std	Y+40, r25	; 0x28
    3ae2:	8f a3       	std	Y+39, r24	; 0x27
    3ae4:	8f a1       	ldd	r24, Y+39	; 0x27
    3ae6:	98 a5       	ldd	r25, Y+40	; 0x28
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	f1 f7       	brne	.-4      	; 0x3ae8 <main+0x290>
    3aec:	98 a7       	std	Y+40, r25	; 0x28
    3aee:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af0:	8d a1       	ldd	r24, Y+37	; 0x25
    3af2:	9e a1       	ldd	r25, Y+38	; 0x26
    3af4:	01 97       	sbiw	r24, 0x01	; 1
    3af6:	9e a3       	std	Y+38, r25	; 0x26
    3af8:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3afa:	8d a1       	ldd	r24, Y+37	; 0x25
    3afc:	9e a1       	ldd	r25, Y+38	; 0x26
    3afe:	89 2b       	or	r24, r25
    3b00:	69 f7       	brne	.-38     	; 0x3adc <main+0x284>
    3b02:	14 c0       	rjmp	.+40     	; 0x3b2c <main+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b04:	69 a1       	ldd	r22, Y+33	; 0x21
    3b06:	7a a1       	ldd	r23, Y+34	; 0x22
    3b08:	8b a1       	ldd	r24, Y+35	; 0x23
    3b0a:	9c a1       	ldd	r25, Y+36	; 0x24
    3b0c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__fixunssfsi>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	9e a3       	std	Y+38, r25	; 0x26
    3b16:	8d a3       	std	Y+37, r24	; 0x25
    3b18:	8d a1       	ldd	r24, Y+37	; 0x25
    3b1a:	9e a1       	ldd	r25, Y+38	; 0x26
    3b1c:	9a a7       	std	Y+42, r25	; 0x2a
    3b1e:	89 a7       	std	Y+41, r24	; 0x29
    3b20:	89 a5       	ldd	r24, Y+41	; 0x29
    3b22:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b24:	01 97       	sbiw	r24, 0x01	; 1
    3b26:	f1 f7       	brne	.-4      	; 0x3b24 <main+0x2cc>
    3b28:	9a a7       	std	Y+42, r25	; 0x2a
    3b2a:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(2000);
	}
    3b2c:	13 cf       	rjmp	.-474    	; 0x3954 <main+0xfc>

00003b2e <__udivmodsi4>:
    3b2e:	a1 e2       	ldi	r26, 0x21	; 33
    3b30:	1a 2e       	mov	r1, r26
    3b32:	aa 1b       	sub	r26, r26
    3b34:	bb 1b       	sub	r27, r27
    3b36:	fd 01       	movw	r30, r26
    3b38:	0d c0       	rjmp	.+26     	; 0x3b54 <__udivmodsi4_ep>

00003b3a <__udivmodsi4_loop>:
    3b3a:	aa 1f       	adc	r26, r26
    3b3c:	bb 1f       	adc	r27, r27
    3b3e:	ee 1f       	adc	r30, r30
    3b40:	ff 1f       	adc	r31, r31
    3b42:	a2 17       	cp	r26, r18
    3b44:	b3 07       	cpc	r27, r19
    3b46:	e4 07       	cpc	r30, r20
    3b48:	f5 07       	cpc	r31, r21
    3b4a:	20 f0       	brcs	.+8      	; 0x3b54 <__udivmodsi4_ep>
    3b4c:	a2 1b       	sub	r26, r18
    3b4e:	b3 0b       	sbc	r27, r19
    3b50:	e4 0b       	sbc	r30, r20
    3b52:	f5 0b       	sbc	r31, r21

00003b54 <__udivmodsi4_ep>:
    3b54:	66 1f       	adc	r22, r22
    3b56:	77 1f       	adc	r23, r23
    3b58:	88 1f       	adc	r24, r24
    3b5a:	99 1f       	adc	r25, r25
    3b5c:	1a 94       	dec	r1
    3b5e:	69 f7       	brne	.-38     	; 0x3b3a <__udivmodsi4_loop>
    3b60:	60 95       	com	r22
    3b62:	70 95       	com	r23
    3b64:	80 95       	com	r24
    3b66:	90 95       	com	r25
    3b68:	9b 01       	movw	r18, r22
    3b6a:	ac 01       	movw	r20, r24
    3b6c:	bd 01       	movw	r22, r26
    3b6e:	cf 01       	movw	r24, r30
    3b70:	08 95       	ret

00003b72 <__subsf3>:
    3b72:	50 58       	subi	r21, 0x80	; 128

00003b74 <__addsf3>:
    3b74:	bb 27       	eor	r27, r27
    3b76:	aa 27       	eor	r26, r26
    3b78:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <__addsf3x>
    3b7c:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__fp_round>
    3b80:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__fp_pscA>
    3b84:	38 f0       	brcs	.+14     	; 0x3b94 <__addsf3+0x20>
    3b86:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <__fp_pscB>
    3b8a:	20 f0       	brcs	.+8      	; 0x3b94 <__addsf3+0x20>
    3b8c:	39 f4       	brne	.+14     	; 0x3b9c <__addsf3+0x28>
    3b8e:	9f 3f       	cpi	r25, 0xFF	; 255
    3b90:	19 f4       	brne	.+6      	; 0x3b98 <__addsf3+0x24>
    3b92:	26 f4       	brtc	.+8      	; 0x3b9c <__addsf3+0x28>
    3b94:	0c 94 33 1f 	jmp	0x3e66	; 0x3e66 <__fp_nan>
    3b98:	0e f4       	brtc	.+2      	; 0x3b9c <__addsf3+0x28>
    3b9a:	e0 95       	com	r30
    3b9c:	e7 fb       	bst	r30, 7
    3b9e:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <__fp_inf>

00003ba2 <__addsf3x>:
    3ba2:	e9 2f       	mov	r30, r25
    3ba4:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <__fp_split3>
    3ba8:	58 f3       	brcs	.-42     	; 0x3b80 <__addsf3+0xc>
    3baa:	ba 17       	cp	r27, r26
    3bac:	62 07       	cpc	r22, r18
    3bae:	73 07       	cpc	r23, r19
    3bb0:	84 07       	cpc	r24, r20
    3bb2:	95 07       	cpc	r25, r21
    3bb4:	20 f0       	brcs	.+8      	; 0x3bbe <__addsf3x+0x1c>
    3bb6:	79 f4       	brne	.+30     	; 0x3bd6 <__addsf3x+0x34>
    3bb8:	a6 f5       	brtc	.+104    	; 0x3c22 <__addsf3x+0x80>
    3bba:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__fp_zero>
    3bbe:	0e f4       	brtc	.+2      	; 0x3bc2 <__addsf3x+0x20>
    3bc0:	e0 95       	com	r30
    3bc2:	0b 2e       	mov	r0, r27
    3bc4:	ba 2f       	mov	r27, r26
    3bc6:	a0 2d       	mov	r26, r0
    3bc8:	0b 01       	movw	r0, r22
    3bca:	b9 01       	movw	r22, r18
    3bcc:	90 01       	movw	r18, r0
    3bce:	0c 01       	movw	r0, r24
    3bd0:	ca 01       	movw	r24, r20
    3bd2:	a0 01       	movw	r20, r0
    3bd4:	11 24       	eor	r1, r1
    3bd6:	ff 27       	eor	r31, r31
    3bd8:	59 1b       	sub	r21, r25
    3bda:	99 f0       	breq	.+38     	; 0x3c02 <__addsf3x+0x60>
    3bdc:	59 3f       	cpi	r21, 0xF9	; 249
    3bde:	50 f4       	brcc	.+20     	; 0x3bf4 <__addsf3x+0x52>
    3be0:	50 3e       	cpi	r21, 0xE0	; 224
    3be2:	68 f1       	brcs	.+90     	; 0x3c3e <__addsf3x+0x9c>
    3be4:	1a 16       	cp	r1, r26
    3be6:	f0 40       	sbci	r31, 0x00	; 0
    3be8:	a2 2f       	mov	r26, r18
    3bea:	23 2f       	mov	r18, r19
    3bec:	34 2f       	mov	r19, r20
    3bee:	44 27       	eor	r20, r20
    3bf0:	58 5f       	subi	r21, 0xF8	; 248
    3bf2:	f3 cf       	rjmp	.-26     	; 0x3bda <__addsf3x+0x38>
    3bf4:	46 95       	lsr	r20
    3bf6:	37 95       	ror	r19
    3bf8:	27 95       	ror	r18
    3bfa:	a7 95       	ror	r26
    3bfc:	f0 40       	sbci	r31, 0x00	; 0
    3bfe:	53 95       	inc	r21
    3c00:	c9 f7       	brne	.-14     	; 0x3bf4 <__addsf3x+0x52>
    3c02:	7e f4       	brtc	.+30     	; 0x3c22 <__addsf3x+0x80>
    3c04:	1f 16       	cp	r1, r31
    3c06:	ba 0b       	sbc	r27, r26
    3c08:	62 0b       	sbc	r22, r18
    3c0a:	73 0b       	sbc	r23, r19
    3c0c:	84 0b       	sbc	r24, r20
    3c0e:	ba f0       	brmi	.+46     	; 0x3c3e <__addsf3x+0x9c>
    3c10:	91 50       	subi	r25, 0x01	; 1
    3c12:	a1 f0       	breq	.+40     	; 0x3c3c <__addsf3x+0x9a>
    3c14:	ff 0f       	add	r31, r31
    3c16:	bb 1f       	adc	r27, r27
    3c18:	66 1f       	adc	r22, r22
    3c1a:	77 1f       	adc	r23, r23
    3c1c:	88 1f       	adc	r24, r24
    3c1e:	c2 f7       	brpl	.-16     	; 0x3c10 <__addsf3x+0x6e>
    3c20:	0e c0       	rjmp	.+28     	; 0x3c3e <__addsf3x+0x9c>
    3c22:	ba 0f       	add	r27, r26
    3c24:	62 1f       	adc	r22, r18
    3c26:	73 1f       	adc	r23, r19
    3c28:	84 1f       	adc	r24, r20
    3c2a:	48 f4       	brcc	.+18     	; 0x3c3e <__addsf3x+0x9c>
    3c2c:	87 95       	ror	r24
    3c2e:	77 95       	ror	r23
    3c30:	67 95       	ror	r22
    3c32:	b7 95       	ror	r27
    3c34:	f7 95       	ror	r31
    3c36:	9e 3f       	cpi	r25, 0xFE	; 254
    3c38:	08 f0       	brcs	.+2      	; 0x3c3c <__addsf3x+0x9a>
    3c3a:	b0 cf       	rjmp	.-160    	; 0x3b9c <__addsf3+0x28>
    3c3c:	93 95       	inc	r25
    3c3e:	88 0f       	add	r24, r24
    3c40:	08 f0       	brcs	.+2      	; 0x3c44 <__addsf3x+0xa2>
    3c42:	99 27       	eor	r25, r25
    3c44:	ee 0f       	add	r30, r30
    3c46:	97 95       	ror	r25
    3c48:	87 95       	ror	r24
    3c4a:	08 95       	ret

00003c4c <__cmpsf2>:
    3c4c:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <__fp_cmp>
    3c50:	08 f4       	brcc	.+2      	; 0x3c54 <__cmpsf2+0x8>
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	08 95       	ret

00003c56 <__divsf3>:
    3c56:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <__divsf3x>
    3c5a:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__fp_round>
    3c5e:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <__fp_pscB>
    3c62:	58 f0       	brcs	.+22     	; 0x3c7a <__divsf3+0x24>
    3c64:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__fp_pscA>
    3c68:	40 f0       	brcs	.+16     	; 0x3c7a <__divsf3+0x24>
    3c6a:	29 f4       	brne	.+10     	; 0x3c76 <__divsf3+0x20>
    3c6c:	5f 3f       	cpi	r21, 0xFF	; 255
    3c6e:	29 f0       	breq	.+10     	; 0x3c7a <__divsf3+0x24>
    3c70:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <__fp_inf>
    3c74:	51 11       	cpse	r21, r1
    3c76:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__fp_szero>
    3c7a:	0c 94 33 1f 	jmp	0x3e66	; 0x3e66 <__fp_nan>

00003c7e <__divsf3x>:
    3c7e:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <__fp_split3>
    3c82:	68 f3       	brcs	.-38     	; 0x3c5e <__divsf3+0x8>

00003c84 <__divsf3_pse>:
    3c84:	99 23       	and	r25, r25
    3c86:	b1 f3       	breq	.-20     	; 0x3c74 <__divsf3+0x1e>
    3c88:	55 23       	and	r21, r21
    3c8a:	91 f3       	breq	.-28     	; 0x3c70 <__divsf3+0x1a>
    3c8c:	95 1b       	sub	r25, r21
    3c8e:	55 0b       	sbc	r21, r21
    3c90:	bb 27       	eor	r27, r27
    3c92:	aa 27       	eor	r26, r26
    3c94:	62 17       	cp	r22, r18
    3c96:	73 07       	cpc	r23, r19
    3c98:	84 07       	cpc	r24, r20
    3c9a:	38 f0       	brcs	.+14     	; 0x3caa <__divsf3_pse+0x26>
    3c9c:	9f 5f       	subi	r25, 0xFF	; 255
    3c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    3ca0:	22 0f       	add	r18, r18
    3ca2:	33 1f       	adc	r19, r19
    3ca4:	44 1f       	adc	r20, r20
    3ca6:	aa 1f       	adc	r26, r26
    3ca8:	a9 f3       	breq	.-22     	; 0x3c94 <__divsf3_pse+0x10>
    3caa:	35 d0       	rcall	.+106    	; 0x3d16 <__divsf3_pse+0x92>
    3cac:	0e 2e       	mov	r0, r30
    3cae:	3a f0       	brmi	.+14     	; 0x3cbe <__divsf3_pse+0x3a>
    3cb0:	e0 e8       	ldi	r30, 0x80	; 128
    3cb2:	32 d0       	rcall	.+100    	; 0x3d18 <__divsf3_pse+0x94>
    3cb4:	91 50       	subi	r25, 0x01	; 1
    3cb6:	50 40       	sbci	r21, 0x00	; 0
    3cb8:	e6 95       	lsr	r30
    3cba:	00 1c       	adc	r0, r0
    3cbc:	ca f7       	brpl	.-14     	; 0x3cb0 <__divsf3_pse+0x2c>
    3cbe:	2b d0       	rcall	.+86     	; 0x3d16 <__divsf3_pse+0x92>
    3cc0:	fe 2f       	mov	r31, r30
    3cc2:	29 d0       	rcall	.+82     	; 0x3d16 <__divsf3_pse+0x92>
    3cc4:	66 0f       	add	r22, r22
    3cc6:	77 1f       	adc	r23, r23
    3cc8:	88 1f       	adc	r24, r24
    3cca:	bb 1f       	adc	r27, r27
    3ccc:	26 17       	cp	r18, r22
    3cce:	37 07       	cpc	r19, r23
    3cd0:	48 07       	cpc	r20, r24
    3cd2:	ab 07       	cpc	r26, r27
    3cd4:	b0 e8       	ldi	r27, 0x80	; 128
    3cd6:	09 f0       	breq	.+2      	; 0x3cda <__divsf3_pse+0x56>
    3cd8:	bb 0b       	sbc	r27, r27
    3cda:	80 2d       	mov	r24, r0
    3cdc:	bf 01       	movw	r22, r30
    3cde:	ff 27       	eor	r31, r31
    3ce0:	93 58       	subi	r25, 0x83	; 131
    3ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    3ce4:	3a f0       	brmi	.+14     	; 0x3cf4 <__divsf3_pse+0x70>
    3ce6:	9e 3f       	cpi	r25, 0xFE	; 254
    3ce8:	51 05       	cpc	r21, r1
    3cea:	78 f0       	brcs	.+30     	; 0x3d0a <__divsf3_pse+0x86>
    3cec:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <__fp_inf>
    3cf0:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__fp_szero>
    3cf4:	5f 3f       	cpi	r21, 0xFF	; 255
    3cf6:	e4 f3       	brlt	.-8      	; 0x3cf0 <__divsf3_pse+0x6c>
    3cf8:	98 3e       	cpi	r25, 0xE8	; 232
    3cfa:	d4 f3       	brlt	.-12     	; 0x3cf0 <__divsf3_pse+0x6c>
    3cfc:	86 95       	lsr	r24
    3cfe:	77 95       	ror	r23
    3d00:	67 95       	ror	r22
    3d02:	b7 95       	ror	r27
    3d04:	f7 95       	ror	r31
    3d06:	9f 5f       	subi	r25, 0xFF	; 255
    3d08:	c9 f7       	brne	.-14     	; 0x3cfc <__divsf3_pse+0x78>
    3d0a:	88 0f       	add	r24, r24
    3d0c:	91 1d       	adc	r25, r1
    3d0e:	96 95       	lsr	r25
    3d10:	87 95       	ror	r24
    3d12:	97 f9       	bld	r25, 7
    3d14:	08 95       	ret
    3d16:	e1 e0       	ldi	r30, 0x01	; 1
    3d18:	66 0f       	add	r22, r22
    3d1a:	77 1f       	adc	r23, r23
    3d1c:	88 1f       	adc	r24, r24
    3d1e:	bb 1f       	adc	r27, r27
    3d20:	62 17       	cp	r22, r18
    3d22:	73 07       	cpc	r23, r19
    3d24:	84 07       	cpc	r24, r20
    3d26:	ba 07       	cpc	r27, r26
    3d28:	20 f0       	brcs	.+8      	; 0x3d32 <__divsf3_pse+0xae>
    3d2a:	62 1b       	sub	r22, r18
    3d2c:	73 0b       	sbc	r23, r19
    3d2e:	84 0b       	sbc	r24, r20
    3d30:	ba 0b       	sbc	r27, r26
    3d32:	ee 1f       	adc	r30, r30
    3d34:	88 f7       	brcc	.-30     	; 0x3d18 <__divsf3_pse+0x94>
    3d36:	e0 95       	com	r30
    3d38:	08 95       	ret

00003d3a <__fixunssfsi>:
    3d3a:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <__fp_splitA>
    3d3e:	88 f0       	brcs	.+34     	; 0x3d62 <__fixunssfsi+0x28>
    3d40:	9f 57       	subi	r25, 0x7F	; 127
    3d42:	98 f0       	brcs	.+38     	; 0x3d6a <__fixunssfsi+0x30>
    3d44:	b9 2f       	mov	r27, r25
    3d46:	99 27       	eor	r25, r25
    3d48:	b7 51       	subi	r27, 0x17	; 23
    3d4a:	b0 f0       	brcs	.+44     	; 0x3d78 <__fixunssfsi+0x3e>
    3d4c:	e1 f0       	breq	.+56     	; 0x3d86 <__fixunssfsi+0x4c>
    3d4e:	66 0f       	add	r22, r22
    3d50:	77 1f       	adc	r23, r23
    3d52:	88 1f       	adc	r24, r24
    3d54:	99 1f       	adc	r25, r25
    3d56:	1a f0       	brmi	.+6      	; 0x3d5e <__fixunssfsi+0x24>
    3d58:	ba 95       	dec	r27
    3d5a:	c9 f7       	brne	.-14     	; 0x3d4e <__fixunssfsi+0x14>
    3d5c:	14 c0       	rjmp	.+40     	; 0x3d86 <__fixunssfsi+0x4c>
    3d5e:	b1 30       	cpi	r27, 0x01	; 1
    3d60:	91 f0       	breq	.+36     	; 0x3d86 <__fixunssfsi+0x4c>
    3d62:	0e 94 77 1f 	call	0x3eee	; 0x3eee <__fp_zero>
    3d66:	b1 e0       	ldi	r27, 0x01	; 1
    3d68:	08 95       	ret
    3d6a:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__fp_zero>
    3d6e:	67 2f       	mov	r22, r23
    3d70:	78 2f       	mov	r23, r24
    3d72:	88 27       	eor	r24, r24
    3d74:	b8 5f       	subi	r27, 0xF8	; 248
    3d76:	39 f0       	breq	.+14     	; 0x3d86 <__fixunssfsi+0x4c>
    3d78:	b9 3f       	cpi	r27, 0xF9	; 249
    3d7a:	cc f3       	brlt	.-14     	; 0x3d6e <__fixunssfsi+0x34>
    3d7c:	86 95       	lsr	r24
    3d7e:	77 95       	ror	r23
    3d80:	67 95       	ror	r22
    3d82:	b3 95       	inc	r27
    3d84:	d9 f7       	brne	.-10     	; 0x3d7c <__fixunssfsi+0x42>
    3d86:	3e f4       	brtc	.+14     	; 0x3d96 <__fixunssfsi+0x5c>
    3d88:	90 95       	com	r25
    3d8a:	80 95       	com	r24
    3d8c:	70 95       	com	r23
    3d8e:	61 95       	neg	r22
    3d90:	7f 4f       	sbci	r23, 0xFF	; 255
    3d92:	8f 4f       	sbci	r24, 0xFF	; 255
    3d94:	9f 4f       	sbci	r25, 0xFF	; 255
    3d96:	08 95       	ret

00003d98 <__floatunsisf>:
    3d98:	e8 94       	clt
    3d9a:	09 c0       	rjmp	.+18     	; 0x3dae <__floatsisf+0x12>

00003d9c <__floatsisf>:
    3d9c:	97 fb       	bst	r25, 7
    3d9e:	3e f4       	brtc	.+14     	; 0x3dae <__floatsisf+0x12>
    3da0:	90 95       	com	r25
    3da2:	80 95       	com	r24
    3da4:	70 95       	com	r23
    3da6:	61 95       	neg	r22
    3da8:	7f 4f       	sbci	r23, 0xFF	; 255
    3daa:	8f 4f       	sbci	r24, 0xFF	; 255
    3dac:	9f 4f       	sbci	r25, 0xFF	; 255
    3dae:	99 23       	and	r25, r25
    3db0:	a9 f0       	breq	.+42     	; 0x3ddc <__floatsisf+0x40>
    3db2:	f9 2f       	mov	r31, r25
    3db4:	96 e9       	ldi	r25, 0x96	; 150
    3db6:	bb 27       	eor	r27, r27
    3db8:	93 95       	inc	r25
    3dba:	f6 95       	lsr	r31
    3dbc:	87 95       	ror	r24
    3dbe:	77 95       	ror	r23
    3dc0:	67 95       	ror	r22
    3dc2:	b7 95       	ror	r27
    3dc4:	f1 11       	cpse	r31, r1
    3dc6:	f8 cf       	rjmp	.-16     	; 0x3db8 <__floatsisf+0x1c>
    3dc8:	fa f4       	brpl	.+62     	; 0x3e08 <__floatsisf+0x6c>
    3dca:	bb 0f       	add	r27, r27
    3dcc:	11 f4       	brne	.+4      	; 0x3dd2 <__floatsisf+0x36>
    3dce:	60 ff       	sbrs	r22, 0
    3dd0:	1b c0       	rjmp	.+54     	; 0x3e08 <__floatsisf+0x6c>
    3dd2:	6f 5f       	subi	r22, 0xFF	; 255
    3dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dda:	16 c0       	rjmp	.+44     	; 0x3e08 <__floatsisf+0x6c>
    3ddc:	88 23       	and	r24, r24
    3dde:	11 f0       	breq	.+4      	; 0x3de4 <__floatsisf+0x48>
    3de0:	96 e9       	ldi	r25, 0x96	; 150
    3de2:	11 c0       	rjmp	.+34     	; 0x3e06 <__floatsisf+0x6a>
    3de4:	77 23       	and	r23, r23
    3de6:	21 f0       	breq	.+8      	; 0x3df0 <__floatsisf+0x54>
    3de8:	9e e8       	ldi	r25, 0x8E	; 142
    3dea:	87 2f       	mov	r24, r23
    3dec:	76 2f       	mov	r23, r22
    3dee:	05 c0       	rjmp	.+10     	; 0x3dfa <__floatsisf+0x5e>
    3df0:	66 23       	and	r22, r22
    3df2:	71 f0       	breq	.+28     	; 0x3e10 <__floatsisf+0x74>
    3df4:	96 e8       	ldi	r25, 0x86	; 134
    3df6:	86 2f       	mov	r24, r22
    3df8:	70 e0       	ldi	r23, 0x00	; 0
    3dfa:	60 e0       	ldi	r22, 0x00	; 0
    3dfc:	2a f0       	brmi	.+10     	; 0x3e08 <__floatsisf+0x6c>
    3dfe:	9a 95       	dec	r25
    3e00:	66 0f       	add	r22, r22
    3e02:	77 1f       	adc	r23, r23
    3e04:	88 1f       	adc	r24, r24
    3e06:	da f7       	brpl	.-10     	; 0x3dfe <__floatsisf+0x62>
    3e08:	88 0f       	add	r24, r24
    3e0a:	96 95       	lsr	r25
    3e0c:	87 95       	ror	r24
    3e0e:	97 f9       	bld	r25, 7
    3e10:	08 95       	ret

00003e12 <__fp_cmp>:
    3e12:	99 0f       	add	r25, r25
    3e14:	00 08       	sbc	r0, r0
    3e16:	55 0f       	add	r21, r21
    3e18:	aa 0b       	sbc	r26, r26
    3e1a:	e0 e8       	ldi	r30, 0x80	; 128
    3e1c:	fe ef       	ldi	r31, 0xFE	; 254
    3e1e:	16 16       	cp	r1, r22
    3e20:	17 06       	cpc	r1, r23
    3e22:	e8 07       	cpc	r30, r24
    3e24:	f9 07       	cpc	r31, r25
    3e26:	c0 f0       	brcs	.+48     	; 0x3e58 <__fp_cmp+0x46>
    3e28:	12 16       	cp	r1, r18
    3e2a:	13 06       	cpc	r1, r19
    3e2c:	e4 07       	cpc	r30, r20
    3e2e:	f5 07       	cpc	r31, r21
    3e30:	98 f0       	brcs	.+38     	; 0x3e58 <__fp_cmp+0x46>
    3e32:	62 1b       	sub	r22, r18
    3e34:	73 0b       	sbc	r23, r19
    3e36:	84 0b       	sbc	r24, r20
    3e38:	95 0b       	sbc	r25, r21
    3e3a:	39 f4       	brne	.+14     	; 0x3e4a <__fp_cmp+0x38>
    3e3c:	0a 26       	eor	r0, r26
    3e3e:	61 f0       	breq	.+24     	; 0x3e58 <__fp_cmp+0x46>
    3e40:	23 2b       	or	r18, r19
    3e42:	24 2b       	or	r18, r20
    3e44:	25 2b       	or	r18, r21
    3e46:	21 f4       	brne	.+8      	; 0x3e50 <__fp_cmp+0x3e>
    3e48:	08 95       	ret
    3e4a:	0a 26       	eor	r0, r26
    3e4c:	09 f4       	brne	.+2      	; 0x3e50 <__fp_cmp+0x3e>
    3e4e:	a1 40       	sbci	r26, 0x01	; 1
    3e50:	a6 95       	lsr	r26
    3e52:	8f ef       	ldi	r24, 0xFF	; 255
    3e54:	81 1d       	adc	r24, r1
    3e56:	81 1d       	adc	r24, r1
    3e58:	08 95       	ret

00003e5a <__fp_inf>:
    3e5a:	97 f9       	bld	r25, 7
    3e5c:	9f 67       	ori	r25, 0x7F	; 127
    3e5e:	80 e8       	ldi	r24, 0x80	; 128
    3e60:	70 e0       	ldi	r23, 0x00	; 0
    3e62:	60 e0       	ldi	r22, 0x00	; 0
    3e64:	08 95       	ret

00003e66 <__fp_nan>:
    3e66:	9f ef       	ldi	r25, 0xFF	; 255
    3e68:	80 ec       	ldi	r24, 0xC0	; 192
    3e6a:	08 95       	ret

00003e6c <__fp_pscA>:
    3e6c:	00 24       	eor	r0, r0
    3e6e:	0a 94       	dec	r0
    3e70:	16 16       	cp	r1, r22
    3e72:	17 06       	cpc	r1, r23
    3e74:	18 06       	cpc	r1, r24
    3e76:	09 06       	cpc	r0, r25
    3e78:	08 95       	ret

00003e7a <__fp_pscB>:
    3e7a:	00 24       	eor	r0, r0
    3e7c:	0a 94       	dec	r0
    3e7e:	12 16       	cp	r1, r18
    3e80:	13 06       	cpc	r1, r19
    3e82:	14 06       	cpc	r1, r20
    3e84:	05 06       	cpc	r0, r21
    3e86:	08 95       	ret

00003e88 <__fp_round>:
    3e88:	09 2e       	mov	r0, r25
    3e8a:	03 94       	inc	r0
    3e8c:	00 0c       	add	r0, r0
    3e8e:	11 f4       	brne	.+4      	; 0x3e94 <__fp_round+0xc>
    3e90:	88 23       	and	r24, r24
    3e92:	52 f0       	brmi	.+20     	; 0x3ea8 <__fp_round+0x20>
    3e94:	bb 0f       	add	r27, r27
    3e96:	40 f4       	brcc	.+16     	; 0x3ea8 <__fp_round+0x20>
    3e98:	bf 2b       	or	r27, r31
    3e9a:	11 f4       	brne	.+4      	; 0x3ea0 <__fp_round+0x18>
    3e9c:	60 ff       	sbrs	r22, 0
    3e9e:	04 c0       	rjmp	.+8      	; 0x3ea8 <__fp_round+0x20>
    3ea0:	6f 5f       	subi	r22, 0xFF	; 255
    3ea2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ea4:	8f 4f       	sbci	r24, 0xFF	; 255
    3ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea8:	08 95       	ret

00003eaa <__fp_split3>:
    3eaa:	57 fd       	sbrc	r21, 7
    3eac:	90 58       	subi	r25, 0x80	; 128
    3eae:	44 0f       	add	r20, r20
    3eb0:	55 1f       	adc	r21, r21
    3eb2:	59 f0       	breq	.+22     	; 0x3eca <__fp_splitA+0x10>
    3eb4:	5f 3f       	cpi	r21, 0xFF	; 255
    3eb6:	71 f0       	breq	.+28     	; 0x3ed4 <__fp_splitA+0x1a>
    3eb8:	47 95       	ror	r20

00003eba <__fp_splitA>:
    3eba:	88 0f       	add	r24, r24
    3ebc:	97 fb       	bst	r25, 7
    3ebe:	99 1f       	adc	r25, r25
    3ec0:	61 f0       	breq	.+24     	; 0x3eda <__fp_splitA+0x20>
    3ec2:	9f 3f       	cpi	r25, 0xFF	; 255
    3ec4:	79 f0       	breq	.+30     	; 0x3ee4 <__fp_splitA+0x2a>
    3ec6:	87 95       	ror	r24
    3ec8:	08 95       	ret
    3eca:	12 16       	cp	r1, r18
    3ecc:	13 06       	cpc	r1, r19
    3ece:	14 06       	cpc	r1, r20
    3ed0:	55 1f       	adc	r21, r21
    3ed2:	f2 cf       	rjmp	.-28     	; 0x3eb8 <__fp_split3+0xe>
    3ed4:	46 95       	lsr	r20
    3ed6:	f1 df       	rcall	.-30     	; 0x3eba <__fp_splitA>
    3ed8:	08 c0       	rjmp	.+16     	; 0x3eea <__fp_splitA+0x30>
    3eda:	16 16       	cp	r1, r22
    3edc:	17 06       	cpc	r1, r23
    3ede:	18 06       	cpc	r1, r24
    3ee0:	99 1f       	adc	r25, r25
    3ee2:	f1 cf       	rjmp	.-30     	; 0x3ec6 <__fp_splitA+0xc>
    3ee4:	86 95       	lsr	r24
    3ee6:	71 05       	cpc	r23, r1
    3ee8:	61 05       	cpc	r22, r1
    3eea:	08 94       	sec
    3eec:	08 95       	ret

00003eee <__fp_zero>:
    3eee:	e8 94       	clt

00003ef0 <__fp_szero>:
    3ef0:	bb 27       	eor	r27, r27
    3ef2:	66 27       	eor	r22, r22
    3ef4:	77 27       	eor	r23, r23
    3ef6:	cb 01       	movw	r24, r22
    3ef8:	97 f9       	bld	r25, 7
    3efa:	08 95       	ret

00003efc <__gesf2>:
    3efc:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <__fp_cmp>
    3f00:	08 f4       	brcc	.+2      	; 0x3f04 <__gesf2+0x8>
    3f02:	8f ef       	ldi	r24, 0xFF	; 255
    3f04:	08 95       	ret

00003f06 <__mulsf3>:
    3f06:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <__mulsf3x>
    3f0a:	0c 94 44 1f 	jmp	0x3e88	; 0x3e88 <__fp_round>
    3f0e:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__fp_pscA>
    3f12:	38 f0       	brcs	.+14     	; 0x3f22 <__mulsf3+0x1c>
    3f14:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <__fp_pscB>
    3f18:	20 f0       	brcs	.+8      	; 0x3f22 <__mulsf3+0x1c>
    3f1a:	95 23       	and	r25, r21
    3f1c:	11 f0       	breq	.+4      	; 0x3f22 <__mulsf3+0x1c>
    3f1e:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <__fp_inf>
    3f22:	0c 94 33 1f 	jmp	0x3e66	; 0x3e66 <__fp_nan>
    3f26:	11 24       	eor	r1, r1
    3f28:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__fp_szero>

00003f2c <__mulsf3x>:
    3f2c:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <__fp_split3>
    3f30:	70 f3       	brcs	.-36     	; 0x3f0e <__mulsf3+0x8>

00003f32 <__mulsf3_pse>:
    3f32:	95 9f       	mul	r25, r21
    3f34:	c1 f3       	breq	.-16     	; 0x3f26 <__mulsf3+0x20>
    3f36:	95 0f       	add	r25, r21
    3f38:	50 e0       	ldi	r21, 0x00	; 0
    3f3a:	55 1f       	adc	r21, r21
    3f3c:	62 9f       	mul	r22, r18
    3f3e:	f0 01       	movw	r30, r0
    3f40:	72 9f       	mul	r23, r18
    3f42:	bb 27       	eor	r27, r27
    3f44:	f0 0d       	add	r31, r0
    3f46:	b1 1d       	adc	r27, r1
    3f48:	63 9f       	mul	r22, r19
    3f4a:	aa 27       	eor	r26, r26
    3f4c:	f0 0d       	add	r31, r0
    3f4e:	b1 1d       	adc	r27, r1
    3f50:	aa 1f       	adc	r26, r26
    3f52:	64 9f       	mul	r22, r20
    3f54:	66 27       	eor	r22, r22
    3f56:	b0 0d       	add	r27, r0
    3f58:	a1 1d       	adc	r26, r1
    3f5a:	66 1f       	adc	r22, r22
    3f5c:	82 9f       	mul	r24, r18
    3f5e:	22 27       	eor	r18, r18
    3f60:	b0 0d       	add	r27, r0
    3f62:	a1 1d       	adc	r26, r1
    3f64:	62 1f       	adc	r22, r18
    3f66:	73 9f       	mul	r23, r19
    3f68:	b0 0d       	add	r27, r0
    3f6a:	a1 1d       	adc	r26, r1
    3f6c:	62 1f       	adc	r22, r18
    3f6e:	83 9f       	mul	r24, r19
    3f70:	a0 0d       	add	r26, r0
    3f72:	61 1d       	adc	r22, r1
    3f74:	22 1f       	adc	r18, r18
    3f76:	74 9f       	mul	r23, r20
    3f78:	33 27       	eor	r19, r19
    3f7a:	a0 0d       	add	r26, r0
    3f7c:	61 1d       	adc	r22, r1
    3f7e:	23 1f       	adc	r18, r19
    3f80:	84 9f       	mul	r24, r20
    3f82:	60 0d       	add	r22, r0
    3f84:	21 1d       	adc	r18, r1
    3f86:	82 2f       	mov	r24, r18
    3f88:	76 2f       	mov	r23, r22
    3f8a:	6a 2f       	mov	r22, r26
    3f8c:	11 24       	eor	r1, r1
    3f8e:	9f 57       	subi	r25, 0x7F	; 127
    3f90:	50 40       	sbci	r21, 0x00	; 0
    3f92:	9a f0       	brmi	.+38     	; 0x3fba <__mulsf3_pse+0x88>
    3f94:	f1 f0       	breq	.+60     	; 0x3fd2 <__mulsf3_pse+0xa0>
    3f96:	88 23       	and	r24, r24
    3f98:	4a f0       	brmi	.+18     	; 0x3fac <__mulsf3_pse+0x7a>
    3f9a:	ee 0f       	add	r30, r30
    3f9c:	ff 1f       	adc	r31, r31
    3f9e:	bb 1f       	adc	r27, r27
    3fa0:	66 1f       	adc	r22, r22
    3fa2:	77 1f       	adc	r23, r23
    3fa4:	88 1f       	adc	r24, r24
    3fa6:	91 50       	subi	r25, 0x01	; 1
    3fa8:	50 40       	sbci	r21, 0x00	; 0
    3faa:	a9 f7       	brne	.-22     	; 0x3f96 <__mulsf3_pse+0x64>
    3fac:	9e 3f       	cpi	r25, 0xFE	; 254
    3fae:	51 05       	cpc	r21, r1
    3fb0:	80 f0       	brcs	.+32     	; 0x3fd2 <__mulsf3_pse+0xa0>
    3fb2:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <__fp_inf>
    3fb6:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__fp_szero>
    3fba:	5f 3f       	cpi	r21, 0xFF	; 255
    3fbc:	e4 f3       	brlt	.-8      	; 0x3fb6 <__mulsf3_pse+0x84>
    3fbe:	98 3e       	cpi	r25, 0xE8	; 232
    3fc0:	d4 f3       	brlt	.-12     	; 0x3fb6 <__mulsf3_pse+0x84>
    3fc2:	86 95       	lsr	r24
    3fc4:	77 95       	ror	r23
    3fc6:	67 95       	ror	r22
    3fc8:	b7 95       	ror	r27
    3fca:	f7 95       	ror	r31
    3fcc:	e7 95       	ror	r30
    3fce:	9f 5f       	subi	r25, 0xFF	; 255
    3fd0:	c1 f7       	brne	.-16     	; 0x3fc2 <__mulsf3_pse+0x90>
    3fd2:	fe 2b       	or	r31, r30
    3fd4:	88 0f       	add	r24, r24
    3fd6:	91 1d       	adc	r25, r1
    3fd8:	96 95       	lsr	r25
    3fda:	87 95       	ror	r24
    3fdc:	97 f9       	bld	r25, 7
    3fde:	08 95       	ret

00003fe0 <calloc>:
    3fe0:	0f 93       	push	r16
    3fe2:	1f 93       	push	r17
    3fe4:	cf 93       	push	r28
    3fe6:	df 93       	push	r29
    3fe8:	86 9f       	mul	r24, r22
    3fea:	80 01       	movw	r16, r0
    3fec:	87 9f       	mul	r24, r23
    3fee:	10 0d       	add	r17, r0
    3ff0:	96 9f       	mul	r25, r22
    3ff2:	10 0d       	add	r17, r0
    3ff4:	11 24       	eor	r1, r1
    3ff6:	c8 01       	movw	r24, r16
    3ff8:	0e 94 0c 20 	call	0x4018	; 0x4018 <malloc>
    3ffc:	ec 01       	movw	r28, r24
    3ffe:	00 97       	sbiw	r24, 0x00	; 0
    4000:	29 f0       	breq	.+10     	; 0x400c <calloc+0x2c>
    4002:	a8 01       	movw	r20, r16
    4004:	60 e0       	ldi	r22, 0x00	; 0
    4006:	70 e0       	ldi	r23, 0x00	; 0
    4008:	0e 94 39 21 	call	0x4272	; 0x4272 <memset>
    400c:	ce 01       	movw	r24, r28
    400e:	df 91       	pop	r29
    4010:	cf 91       	pop	r28
    4012:	1f 91       	pop	r17
    4014:	0f 91       	pop	r16
    4016:	08 95       	ret

00004018 <malloc>:
    4018:	cf 93       	push	r28
    401a:	df 93       	push	r29
    401c:	82 30       	cpi	r24, 0x02	; 2
    401e:	91 05       	cpc	r25, r1
    4020:	10 f4       	brcc	.+4      	; 0x4026 <malloc+0xe>
    4022:	82 e0       	ldi	r24, 0x02	; 2
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	e0 91 81 02 	lds	r30, 0x0281
    402a:	f0 91 82 02 	lds	r31, 0x0282
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	c0 e0       	ldi	r28, 0x00	; 0
    4034:	d0 e0       	ldi	r29, 0x00	; 0
    4036:	30 97       	sbiw	r30, 0x00	; 0
    4038:	11 f1       	breq	.+68     	; 0x407e <malloc+0x66>
    403a:	40 81       	ld	r20, Z
    403c:	51 81       	ldd	r21, Z+1	; 0x01
    403e:	48 17       	cp	r20, r24
    4040:	59 07       	cpc	r21, r25
    4042:	c0 f0       	brcs	.+48     	; 0x4074 <malloc+0x5c>
    4044:	48 17       	cp	r20, r24
    4046:	59 07       	cpc	r21, r25
    4048:	61 f4       	brne	.+24     	; 0x4062 <malloc+0x4a>
    404a:	82 81       	ldd	r24, Z+2	; 0x02
    404c:	93 81       	ldd	r25, Z+3	; 0x03
    404e:	20 97       	sbiw	r28, 0x00	; 0
    4050:	19 f0       	breq	.+6      	; 0x4058 <malloc+0x40>
    4052:	9b 83       	std	Y+3, r25	; 0x03
    4054:	8a 83       	std	Y+2, r24	; 0x02
    4056:	2b c0       	rjmp	.+86     	; 0x40ae <malloc+0x96>
    4058:	90 93 82 02 	sts	0x0282, r25
    405c:	80 93 81 02 	sts	0x0281, r24
    4060:	26 c0       	rjmp	.+76     	; 0x40ae <malloc+0x96>
    4062:	21 15       	cp	r18, r1
    4064:	31 05       	cpc	r19, r1
    4066:	19 f0       	breq	.+6      	; 0x406e <malloc+0x56>
    4068:	42 17       	cp	r20, r18
    406a:	53 07       	cpc	r21, r19
    406c:	18 f4       	brcc	.+6      	; 0x4074 <malloc+0x5c>
    406e:	9a 01       	movw	r18, r20
    4070:	be 01       	movw	r22, r28
    4072:	df 01       	movw	r26, r30
    4074:	ef 01       	movw	r28, r30
    4076:	02 80       	ldd	r0, Z+2	; 0x02
    4078:	f3 81       	ldd	r31, Z+3	; 0x03
    407a:	e0 2d       	mov	r30, r0
    407c:	dc cf       	rjmp	.-72     	; 0x4036 <malloc+0x1e>
    407e:	21 15       	cp	r18, r1
    4080:	31 05       	cpc	r19, r1
    4082:	09 f1       	breq	.+66     	; 0x40c6 <malloc+0xae>
    4084:	28 1b       	sub	r18, r24
    4086:	39 0b       	sbc	r19, r25
    4088:	24 30       	cpi	r18, 0x04	; 4
    408a:	31 05       	cpc	r19, r1
    408c:	90 f4       	brcc	.+36     	; 0x40b2 <malloc+0x9a>
    408e:	12 96       	adiw	r26, 0x02	; 2
    4090:	8d 91       	ld	r24, X+
    4092:	9c 91       	ld	r25, X
    4094:	13 97       	sbiw	r26, 0x03	; 3
    4096:	61 15       	cp	r22, r1
    4098:	71 05       	cpc	r23, r1
    409a:	21 f0       	breq	.+8      	; 0x40a4 <malloc+0x8c>
    409c:	fb 01       	movw	r30, r22
    409e:	93 83       	std	Z+3, r25	; 0x03
    40a0:	82 83       	std	Z+2, r24	; 0x02
    40a2:	04 c0       	rjmp	.+8      	; 0x40ac <malloc+0x94>
    40a4:	90 93 82 02 	sts	0x0282, r25
    40a8:	80 93 81 02 	sts	0x0281, r24
    40ac:	fd 01       	movw	r30, r26
    40ae:	32 96       	adiw	r30, 0x02	; 2
    40b0:	44 c0       	rjmp	.+136    	; 0x413a <malloc+0x122>
    40b2:	fd 01       	movw	r30, r26
    40b4:	e2 0f       	add	r30, r18
    40b6:	f3 1f       	adc	r31, r19
    40b8:	81 93       	st	Z+, r24
    40ba:	91 93       	st	Z+, r25
    40bc:	22 50       	subi	r18, 0x02	; 2
    40be:	31 09       	sbc	r19, r1
    40c0:	2d 93       	st	X+, r18
    40c2:	3c 93       	st	X, r19
    40c4:	3a c0       	rjmp	.+116    	; 0x413a <malloc+0x122>
    40c6:	20 91 7f 02 	lds	r18, 0x027F
    40ca:	30 91 80 02 	lds	r19, 0x0280
    40ce:	23 2b       	or	r18, r19
    40d0:	41 f4       	brne	.+16     	; 0x40e2 <malloc+0xca>
    40d2:	20 91 02 01 	lds	r18, 0x0102
    40d6:	30 91 03 01 	lds	r19, 0x0103
    40da:	30 93 80 02 	sts	0x0280, r19
    40de:	20 93 7f 02 	sts	0x027F, r18
    40e2:	20 91 00 01 	lds	r18, 0x0100
    40e6:	30 91 01 01 	lds	r19, 0x0101
    40ea:	21 15       	cp	r18, r1
    40ec:	31 05       	cpc	r19, r1
    40ee:	41 f4       	brne	.+16     	; 0x4100 <malloc+0xe8>
    40f0:	2d b7       	in	r18, 0x3d	; 61
    40f2:	3e b7       	in	r19, 0x3e	; 62
    40f4:	40 91 04 01 	lds	r20, 0x0104
    40f8:	50 91 05 01 	lds	r21, 0x0105
    40fc:	24 1b       	sub	r18, r20
    40fe:	35 0b       	sbc	r19, r21
    4100:	e0 91 7f 02 	lds	r30, 0x027F
    4104:	f0 91 80 02 	lds	r31, 0x0280
    4108:	e2 17       	cp	r30, r18
    410a:	f3 07       	cpc	r31, r19
    410c:	a0 f4       	brcc	.+40     	; 0x4136 <malloc+0x11e>
    410e:	2e 1b       	sub	r18, r30
    4110:	3f 0b       	sbc	r19, r31
    4112:	28 17       	cp	r18, r24
    4114:	39 07       	cpc	r19, r25
    4116:	78 f0       	brcs	.+30     	; 0x4136 <malloc+0x11e>
    4118:	ac 01       	movw	r20, r24
    411a:	4e 5f       	subi	r20, 0xFE	; 254
    411c:	5f 4f       	sbci	r21, 0xFF	; 255
    411e:	24 17       	cp	r18, r20
    4120:	35 07       	cpc	r19, r21
    4122:	48 f0       	brcs	.+18     	; 0x4136 <malloc+0x11e>
    4124:	4e 0f       	add	r20, r30
    4126:	5f 1f       	adc	r21, r31
    4128:	50 93 80 02 	sts	0x0280, r21
    412c:	40 93 7f 02 	sts	0x027F, r20
    4130:	81 93       	st	Z+, r24
    4132:	91 93       	st	Z+, r25
    4134:	02 c0       	rjmp	.+4      	; 0x413a <malloc+0x122>
    4136:	e0 e0       	ldi	r30, 0x00	; 0
    4138:	f0 e0       	ldi	r31, 0x00	; 0
    413a:	cf 01       	movw	r24, r30
    413c:	df 91       	pop	r29
    413e:	cf 91       	pop	r28
    4140:	08 95       	ret

00004142 <free>:
    4142:	0f 93       	push	r16
    4144:	1f 93       	push	r17
    4146:	cf 93       	push	r28
    4148:	df 93       	push	r29
    414a:	00 97       	sbiw	r24, 0x00	; 0
    414c:	09 f4       	brne	.+2      	; 0x4150 <free+0xe>
    414e:	8c c0       	rjmp	.+280    	; 0x4268 <free+0x126>
    4150:	fc 01       	movw	r30, r24
    4152:	32 97       	sbiw	r30, 0x02	; 2
    4154:	13 82       	std	Z+3, r1	; 0x03
    4156:	12 82       	std	Z+2, r1	; 0x02
    4158:	00 91 81 02 	lds	r16, 0x0281
    415c:	10 91 82 02 	lds	r17, 0x0282
    4160:	01 15       	cp	r16, r1
    4162:	11 05       	cpc	r17, r1
    4164:	81 f4       	brne	.+32     	; 0x4186 <free+0x44>
    4166:	20 81       	ld	r18, Z
    4168:	31 81       	ldd	r19, Z+1	; 0x01
    416a:	82 0f       	add	r24, r18
    416c:	93 1f       	adc	r25, r19
    416e:	20 91 7f 02 	lds	r18, 0x027F
    4172:	30 91 80 02 	lds	r19, 0x0280
    4176:	28 17       	cp	r18, r24
    4178:	39 07       	cpc	r19, r25
    417a:	79 f5       	brne	.+94     	; 0x41da <free+0x98>
    417c:	f0 93 80 02 	sts	0x0280, r31
    4180:	e0 93 7f 02 	sts	0x027F, r30
    4184:	71 c0       	rjmp	.+226    	; 0x4268 <free+0x126>
    4186:	d8 01       	movw	r26, r16
    4188:	40 e0       	ldi	r20, 0x00	; 0
    418a:	50 e0       	ldi	r21, 0x00	; 0
    418c:	ae 17       	cp	r26, r30
    418e:	bf 07       	cpc	r27, r31
    4190:	50 f4       	brcc	.+20     	; 0x41a6 <free+0x64>
    4192:	12 96       	adiw	r26, 0x02	; 2
    4194:	2d 91       	ld	r18, X+
    4196:	3c 91       	ld	r19, X
    4198:	13 97       	sbiw	r26, 0x03	; 3
    419a:	ad 01       	movw	r20, r26
    419c:	21 15       	cp	r18, r1
    419e:	31 05       	cpc	r19, r1
    41a0:	09 f1       	breq	.+66     	; 0x41e4 <free+0xa2>
    41a2:	d9 01       	movw	r26, r18
    41a4:	f3 cf       	rjmp	.-26     	; 0x418c <free+0x4a>
    41a6:	9d 01       	movw	r18, r26
    41a8:	da 01       	movw	r26, r20
    41aa:	33 83       	std	Z+3, r19	; 0x03
    41ac:	22 83       	std	Z+2, r18	; 0x02
    41ae:	60 81       	ld	r22, Z
    41b0:	71 81       	ldd	r23, Z+1	; 0x01
    41b2:	86 0f       	add	r24, r22
    41b4:	97 1f       	adc	r25, r23
    41b6:	82 17       	cp	r24, r18
    41b8:	93 07       	cpc	r25, r19
    41ba:	69 f4       	brne	.+26     	; 0x41d6 <free+0x94>
    41bc:	ec 01       	movw	r28, r24
    41be:	28 81       	ld	r18, Y
    41c0:	39 81       	ldd	r19, Y+1	; 0x01
    41c2:	26 0f       	add	r18, r22
    41c4:	37 1f       	adc	r19, r23
    41c6:	2e 5f       	subi	r18, 0xFE	; 254
    41c8:	3f 4f       	sbci	r19, 0xFF	; 255
    41ca:	31 83       	std	Z+1, r19	; 0x01
    41cc:	20 83       	st	Z, r18
    41ce:	8a 81       	ldd	r24, Y+2	; 0x02
    41d0:	9b 81       	ldd	r25, Y+3	; 0x03
    41d2:	93 83       	std	Z+3, r25	; 0x03
    41d4:	82 83       	std	Z+2, r24	; 0x02
    41d6:	45 2b       	or	r20, r21
    41d8:	29 f4       	brne	.+10     	; 0x41e4 <free+0xa2>
    41da:	f0 93 82 02 	sts	0x0282, r31
    41de:	e0 93 81 02 	sts	0x0281, r30
    41e2:	42 c0       	rjmp	.+132    	; 0x4268 <free+0x126>
    41e4:	13 96       	adiw	r26, 0x03	; 3
    41e6:	fc 93       	st	X, r31
    41e8:	ee 93       	st	-X, r30
    41ea:	12 97       	sbiw	r26, 0x02	; 2
    41ec:	ed 01       	movw	r28, r26
    41ee:	49 91       	ld	r20, Y+
    41f0:	59 91       	ld	r21, Y+
    41f2:	9e 01       	movw	r18, r28
    41f4:	24 0f       	add	r18, r20
    41f6:	35 1f       	adc	r19, r21
    41f8:	e2 17       	cp	r30, r18
    41fa:	f3 07       	cpc	r31, r19
    41fc:	71 f4       	brne	.+28     	; 0x421a <free+0xd8>
    41fe:	80 81       	ld	r24, Z
    4200:	91 81       	ldd	r25, Z+1	; 0x01
    4202:	84 0f       	add	r24, r20
    4204:	95 1f       	adc	r25, r21
    4206:	02 96       	adiw	r24, 0x02	; 2
    4208:	11 96       	adiw	r26, 0x01	; 1
    420a:	9c 93       	st	X, r25
    420c:	8e 93       	st	-X, r24
    420e:	82 81       	ldd	r24, Z+2	; 0x02
    4210:	93 81       	ldd	r25, Z+3	; 0x03
    4212:	13 96       	adiw	r26, 0x03	; 3
    4214:	9c 93       	st	X, r25
    4216:	8e 93       	st	-X, r24
    4218:	12 97       	sbiw	r26, 0x02	; 2
    421a:	e0 e0       	ldi	r30, 0x00	; 0
    421c:	f0 e0       	ldi	r31, 0x00	; 0
    421e:	d8 01       	movw	r26, r16
    4220:	12 96       	adiw	r26, 0x02	; 2
    4222:	8d 91       	ld	r24, X+
    4224:	9c 91       	ld	r25, X
    4226:	13 97       	sbiw	r26, 0x03	; 3
    4228:	00 97       	sbiw	r24, 0x00	; 0
    422a:	19 f0       	breq	.+6      	; 0x4232 <free+0xf0>
    422c:	f8 01       	movw	r30, r16
    422e:	8c 01       	movw	r16, r24
    4230:	f6 cf       	rjmp	.-20     	; 0x421e <free+0xdc>
    4232:	8d 91       	ld	r24, X+
    4234:	9c 91       	ld	r25, X
    4236:	98 01       	movw	r18, r16
    4238:	2e 5f       	subi	r18, 0xFE	; 254
    423a:	3f 4f       	sbci	r19, 0xFF	; 255
    423c:	82 0f       	add	r24, r18
    423e:	93 1f       	adc	r25, r19
    4240:	20 91 7f 02 	lds	r18, 0x027F
    4244:	30 91 80 02 	lds	r19, 0x0280
    4248:	28 17       	cp	r18, r24
    424a:	39 07       	cpc	r19, r25
    424c:	69 f4       	brne	.+26     	; 0x4268 <free+0x126>
    424e:	30 97       	sbiw	r30, 0x00	; 0
    4250:	29 f4       	brne	.+10     	; 0x425c <free+0x11a>
    4252:	10 92 82 02 	sts	0x0282, r1
    4256:	10 92 81 02 	sts	0x0281, r1
    425a:	02 c0       	rjmp	.+4      	; 0x4260 <free+0x11e>
    425c:	13 82       	std	Z+3, r1	; 0x03
    425e:	12 82       	std	Z+2, r1	; 0x02
    4260:	10 93 80 02 	sts	0x0280, r17
    4264:	00 93 7f 02 	sts	0x027F, r16
    4268:	df 91       	pop	r29
    426a:	cf 91       	pop	r28
    426c:	1f 91       	pop	r17
    426e:	0f 91       	pop	r16
    4270:	08 95       	ret

00004272 <memset>:
    4272:	dc 01       	movw	r26, r24
    4274:	01 c0       	rjmp	.+2      	; 0x4278 <memset+0x6>
    4276:	6d 93       	st	X+, r22
    4278:	41 50       	subi	r20, 0x01	; 1
    427a:	50 40       	sbci	r21, 0x00	; 0
    427c:	e0 f7       	brcc	.-8      	; 0x4276 <memset+0x4>
    427e:	08 95       	ret

00004280 <_exit>:
    4280:	f8 94       	cli

00004282 <__stop_program>:
    4282:	ff cf       	rjmp	.-2      	; 0x4282 <__stop_program>
