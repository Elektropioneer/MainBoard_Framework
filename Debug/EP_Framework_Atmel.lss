
EP_Framework_Atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000042f0  00004384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000042f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000154  0080012e  0080012e  000043b2  2**0
                  ALLOC
  3 .stab         000062c4  00000000  00000000  000043b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002035  00000000  00000000  0000a678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000c6ad  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000c6c0  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__vector_8>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 ba 04 	jmp	0x974	; 0x974 <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__vector_23>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__vector_32>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__vector_34>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e0 ef       	ldi	r30, 0xF0	; 240
      a8:	f2 e4       	ldi	r31, 0x42	; 66
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 32       	cpi	r26, 0x2E	; 46
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	ae e2       	ldi	r26, 0x2E	; 46
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a2 38       	cpi	r26, 0x82	; 130
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 84 1c 	call	0x3908	; 0x3908 <main>
      ce:	0c 94 76 21 	jmp	0x42ec	; 0x42ec <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <send_arduino>:
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	00 d0       	rcall	.+0      	; 0xdc <send_arduino+0x6>
      dc:	1f 92       	push	r1
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	89 83       	std	Y+1, r24	; 0x01
      e4:	6a 83       	std	Y+2, r22	; 0x02
      e6:	4b 83       	std	Y+3, r20	; 0x03
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	0e 94 23 19 	call	0x3246	; 0x3246 <UART1_Write>
      ee:	8a 81       	ldd	r24, Y+2	; 0x02
      f0:	0e 94 23 19 	call	0x3246	; 0x3246 <UART1_Write>
      f4:	8b 81       	ldd	r24, Y+3	; 0x03
      f6:	0e 94 23 19 	call	0x3246	; 0x3246 <UART1_Write>
      fa:	88 e5       	ldi	r24, 0x58	; 88
      fc:	0e 94 23 19 	call	0x3246	; 0x3246 <UART1_Write>
     100:	0f 90       	pop	r0
     102:	0f 90       	pop	r0
     104:	0f 90       	pop	r0
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <get_arduino>:
 * 	Function: 	 unsigned char get_arduino(unsigned char type, unsigned char id)
 * 	Description: Gets status of the device
 * 	Parameters:	 unsigned char type - the type of device ('R', 'M', 'S')
 * 				 unsigned char id   - the id of the device 1-x
 */
unsigned char get_arduino(unsigned char type, unsigned char id) {
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	00 d0       	rcall	.+0      	; 0x112 <get_arduino+0x6>
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	89 83       	std	Y+1, r24	; 0x01
     118:	6a 83       	std	Y+2, r22	; 0x02
	send_arduino('G',type,(unsigned char)id);	// send the "get data protocol"
     11a:	4a 81       	ldd	r20, Y+2	; 0x02
     11c:	69 81       	ldd	r22, Y+1	; 0x01
     11e:	87 e4       	ldi	r24, 0x47	; 71
     120:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_arduino>
	UART1_Read();								// read (because it is sending 2x)
     124:	0e 94 71 19 	call	0x32e2	; 0x32e2 <UART1_Read>

	return UART1_Read();						// return the read
     128:	0e 94 71 19 	call	0x32e2	; 0x32e2 <UART1_Read>

}
     12c:	0f 90       	pop	r0
     12e:	0f 90       	pop	r0
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	08 95       	ret

00000136 <servo_move>:
 * 	Function: 	 void servo_move(unsigned char id, unsigned char data);
 * 	Description: Sending the angle of the id of the servo
 * 	Parameters:  unsigned char id   - the id of the servo
 * 				 unsigned char data - the angle of the servo
 */
void servo_move(unsigned char id, unsigned char data) { send_arduino('S', id, data); }
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	00 d0       	rcall	.+0      	; 0x13c <servo_move+0x6>
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
     140:	89 83       	std	Y+1, r24	; 0x01
     142:	6a 83       	std	Y+2, r22	; 0x02
     144:	4a 81       	ldd	r20, Y+2	; 0x02
     146:	69 81       	ldd	r22, Y+1	; 0x01
     148:	83 e5       	ldi	r24, 0x53	; 83
     14a:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_arduino>
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <ping_actuator>:

/*
 * 	Function: 	 void ping_actuator()
 * 	Description: this will ping the actuator and it will run until ping is good
 */
void ping_actuator() {
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	2e 97       	sbiw	r28, 0x0e	; 14
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61

	do {
		UART1_Write('P');
     16c:	80 e5       	ldi	r24, 0x50	; 80
     16e:	0e 94 23 19 	call	0x3246	; 0x3246 <UART1_Write>
		UART1_Write(0);
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	0e 94 23 19 	call	0x3246	; 0x3246 <UART1_Write>
		UART1_Write(0);
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	0e 94 23 19 	call	0x3246	; 0x3246 <UART1_Write>
		UART1_Write('X');
     17e:	88 e5       	ldi	r24, 0x58	; 88
     180:	0e 94 23 19 	call	0x3246	; 0x3246 <UART1_Write>

		PORTG = 0x01;
     184:	84 e3       	ldi	r24, 0x34	; 52
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	21 e0       	ldi	r18, 0x01	; 1
     18a:	fc 01       	movw	r30, r24
     18c:	20 83       	st	Z, r18
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	a8 e4       	ldi	r26, 0x48	; 72
     194:	b2 e4       	ldi	r27, 0x42	; 66
     196:	89 83       	std	Y+1, r24	; 0x01
     198:	9a 83       	std	Y+2, r25	; 0x02
     19a:	ab 83       	std	Y+3, r26	; 0x03
     19c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e4       	ldi	r19, 0x40	; 64
     1a2:	4c e1       	ldi	r20, 0x1C	; 28
     1a4:	55 e4       	ldi	r21, 0x45	; 69
     1a6:	69 81       	ldd	r22, Y+1	; 0x01
     1a8:	7a 81       	ldd	r23, Y+2	; 0x02
     1aa:	8b 81       	ldd	r24, Y+3	; 0x03
     1ac:	9c 81       	ldd	r25, Y+4	; 0x04
     1ae:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
     1b2:	dc 01       	movw	r26, r24
     1b4:	cb 01       	movw	r24, r22
     1b6:	8d 83       	std	Y+5, r24	; 0x05
     1b8:	9e 83       	std	Y+6, r25	; 0x06
     1ba:	af 83       	std	Y+7, r26	; 0x07
     1bc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e8       	ldi	r20, 0x80	; 128
     1c4:	5f e3       	ldi	r21, 0x3F	; 63
     1c6:	6d 81       	ldd	r22, Y+5	; 0x05
     1c8:	7e 81       	ldd	r23, Y+6	; 0x06
     1ca:	8f 81       	ldd	r24, Y+7	; 0x07
     1cc:	98 85       	ldd	r25, Y+8	; 0x08
     1ce:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
     1d2:	88 23       	and	r24, r24
     1d4:	2c f4       	brge	.+10     	; 0x1e0 <ping_actuator+0x88>
		__ticks = 1;
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	9a 87       	std	Y+10, r25	; 0x0a
     1dc:	89 87       	std	Y+9, r24	; 0x09
     1de:	3f c0       	rjmp	.+126    	; 0x25e <ping_actuator+0x106>
	else if (__tmp > 65535)
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	3f ef       	ldi	r19, 0xFF	; 255
     1e4:	4f e7       	ldi	r20, 0x7F	; 127
     1e6:	57 e4       	ldi	r21, 0x47	; 71
     1e8:	6d 81       	ldd	r22, Y+5	; 0x05
     1ea:	7e 81       	ldd	r23, Y+6	; 0x06
     1ec:	8f 81       	ldd	r24, Y+7	; 0x07
     1ee:	98 85       	ldd	r25, Y+8	; 0x08
     1f0:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
     1f4:	18 16       	cp	r1, r24
     1f6:	4c f5       	brge	.+82     	; 0x24a <ping_actuator+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	40 e2       	ldi	r20, 0x20	; 32
     1fe:	51 e4       	ldi	r21, 0x41	; 65
     200:	69 81       	ldd	r22, Y+1	; 0x01
     202:	7a 81       	ldd	r23, Y+2	; 0x02
     204:	8b 81       	ldd	r24, Y+3	; 0x03
     206:	9c 81       	ldd	r25, Y+4	; 0x04
     208:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
     20c:	dc 01       	movw	r26, r24
     20e:	cb 01       	movw	r24, r22
     210:	bc 01       	movw	r22, r24
     212:	cd 01       	movw	r24, r26
     214:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
     218:	dc 01       	movw	r26, r24
     21a:	cb 01       	movw	r24, r22
     21c:	9a 87       	std	Y+10, r25	; 0x0a
     21e:	89 87       	std	Y+9, r24	; 0x09
     220:	0f c0       	rjmp	.+30     	; 0x240 <ping_actuator+0xe8>
     222:	8a ef       	ldi	r24, 0xFA	; 250
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	9c 87       	std	Y+12, r25	; 0x0c
     228:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     22a:	8b 85       	ldd	r24, Y+11	; 0x0b
     22c:	9c 85       	ldd	r25, Y+12	; 0x0c
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <ping_actuator+0xd6>
     232:	9c 87       	std	Y+12, r25	; 0x0c
     234:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     236:	89 85       	ldd	r24, Y+9	; 0x09
     238:	9a 85       	ldd	r25, Y+10	; 0x0a
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	9a 87       	std	Y+10, r25	; 0x0a
     23e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     240:	89 85       	ldd	r24, Y+9	; 0x09
     242:	9a 85       	ldd	r25, Y+10	; 0x0a
     244:	89 2b       	or	r24, r25
     246:	69 f7       	brne	.-38     	; 0x222 <ping_actuator+0xca>
     248:	14 c0       	rjmp	.+40     	; 0x272 <ping_actuator+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     24a:	6d 81       	ldd	r22, Y+5	; 0x05
     24c:	7e 81       	ldd	r23, Y+6	; 0x06
     24e:	8f 81       	ldd	r24, Y+7	; 0x07
     250:	98 85       	ldd	r25, Y+8	; 0x08
     252:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
     256:	dc 01       	movw	r26, r24
     258:	cb 01       	movw	r24, r22
     25a:	9a 87       	std	Y+10, r25	; 0x0a
     25c:	89 87       	std	Y+9, r24	; 0x09
     25e:	89 85       	ldd	r24, Y+9	; 0x09
     260:	9a 85       	ldd	r25, Y+10	; 0x0a
     262:	9e 87       	std	Y+14, r25	; 0x0e
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	8d 85       	ldd	r24, Y+13	; 0x0d
     268:	9e 85       	ldd	r25, Y+14	; 0x0e
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <ping_actuator+0x112>
     26e:	9e 87       	std	Y+14, r25	; 0x0e
     270:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(50);

	} while(UART1_Read() != 1);
     272:	0e 94 71 19 	call	0x32e2	; 0x32e2 <UART1_Read>
     276:	81 30       	cpi	r24, 0x01	; 1
     278:	09 f0       	breq	.+2      	; 0x27c <ping_actuator+0x124>
     27a:	78 cf       	rjmp	.-272    	; 0x16c <ping_actuator+0x14>
}
     27c:	2e 96       	adiw	r28, 0x0e	; 14
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	f8 94       	cli
     282:	de bf       	out	0x3e, r29	; 62
     284:	0f be       	out	0x3f, r0	; 63
     286:	cd bf       	out	0x3d, r28	; 61
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	08 95       	ret

0000028e <AX_UART_Init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "ax.h"

void AX_UART_Init(void)
{
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	2e 97       	sbiw	r28, 0x0e	; 14
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRD &= ~((1 << 2) | (1 << 3));
     2a2:	8a e2       	ldi	r24, 0x2A	; 42
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	2a e2       	ldi	r18, 0x2A	; 42
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	f9 01       	movw	r30, r18
     2ac:	20 81       	ld	r18, Z
     2ae:	23 7f       	andi	r18, 0xF3	; 243
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 83       	st	Z, r18
	//PORTE = 0;
	UCSR1A = 0;
     2b4:	88 ec       	ldi	r24, 0xC8	; 200
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	10 82       	st	Z, r1
	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
     2bc:	89 ec       	ldi	r24, 0xC9	; 201
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	28 e1       	ldi	r18, 0x18	; 24
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
     2c6:	8a ec       	ldi	r24, 0xCA	; 202
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	26 e0       	ldi	r18, 0x06	; 6
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18

	UBRR1H = 0;
     2d0:	8d ec       	ldi	r24, 0xCD	; 205
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	fc 01       	movw	r30, r24
     2d6:	10 82       	st	Z, r1
	UBRR1L = 5;
     2d8:	8c ec       	ldi	r24, 0xCC	; 204
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	25 e0       	ldi	r18, 0x05	; 5
     2de:	fc 01       	movw	r30, r24
     2e0:	20 83       	st	Z, r18
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a8 ec       	ldi	r26, 0xC8	; 200
     2e8:	b2 e4       	ldi	r27, 0x42	; 66
     2ea:	89 83       	std	Y+1, r24	; 0x01
     2ec:	9a 83       	std	Y+2, r25	; 0x02
     2ee:	ab 83       	std	Y+3, r26	; 0x03
     2f0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e4       	ldi	r19, 0x40	; 64
     2f6:	4c e1       	ldi	r20, 0x1C	; 28
     2f8:	55 e4       	ldi	r21, 0x45	; 69
     2fa:	69 81       	ldd	r22, Y+1	; 0x01
     2fc:	7a 81       	ldd	r23, Y+2	; 0x02
     2fe:	8b 81       	ldd	r24, Y+3	; 0x03
     300:	9c 81       	ldd	r25, Y+4	; 0x04
     302:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
     306:	dc 01       	movw	r26, r24
     308:	cb 01       	movw	r24, r22
     30a:	8d 83       	std	Y+5, r24	; 0x05
     30c:	9e 83       	std	Y+6, r25	; 0x06
     30e:	af 83       	std	Y+7, r26	; 0x07
     310:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e8       	ldi	r20, 0x80	; 128
     318:	5f e3       	ldi	r21, 0x3F	; 63
     31a:	6d 81       	ldd	r22, Y+5	; 0x05
     31c:	7e 81       	ldd	r23, Y+6	; 0x06
     31e:	8f 81       	ldd	r24, Y+7	; 0x07
     320:	98 85       	ldd	r25, Y+8	; 0x08
     322:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
     326:	88 23       	and	r24, r24
     328:	2c f4       	brge	.+10     	; 0x334 <AX_UART_Init+0xa6>
		__ticks = 1;
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	9a 87       	std	Y+10, r25	; 0x0a
     330:	89 87       	std	Y+9, r24	; 0x09
     332:	3f c0       	rjmp	.+126    	; 0x3b2 <AX_UART_Init+0x124>
	else if (__tmp > 65535)
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	3f ef       	ldi	r19, 0xFF	; 255
     338:	4f e7       	ldi	r20, 0x7F	; 127
     33a:	57 e4       	ldi	r21, 0x47	; 71
     33c:	6d 81       	ldd	r22, Y+5	; 0x05
     33e:	7e 81       	ldd	r23, Y+6	; 0x06
     340:	8f 81       	ldd	r24, Y+7	; 0x07
     342:	98 85       	ldd	r25, Y+8	; 0x08
     344:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
     348:	18 16       	cp	r1, r24
     34a:	4c f5       	brge	.+82     	; 0x39e <AX_UART_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	40 e2       	ldi	r20, 0x20	; 32
     352:	51 e4       	ldi	r21, 0x41	; 65
     354:	69 81       	ldd	r22, Y+1	; 0x01
     356:	7a 81       	ldd	r23, Y+2	; 0x02
     358:	8b 81       	ldd	r24, Y+3	; 0x03
     35a:	9c 81       	ldd	r25, Y+4	; 0x04
     35c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
     360:	dc 01       	movw	r26, r24
     362:	cb 01       	movw	r24, r22
     364:	bc 01       	movw	r22, r24
     366:	cd 01       	movw	r24, r26
     368:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
     36c:	dc 01       	movw	r26, r24
     36e:	cb 01       	movw	r24, r22
     370:	9a 87       	std	Y+10, r25	; 0x0a
     372:	89 87       	std	Y+9, r24	; 0x09
     374:	0f c0       	rjmp	.+30     	; 0x394 <AX_UART_Init+0x106>
     376:	8a ef       	ldi	r24, 0xFA	; 250
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	9c 87       	std	Y+12, r25	; 0x0c
     37c:	8b 87       	std	Y+11, r24	; 0x0b
     37e:	8b 85       	ldd	r24, Y+11	; 0x0b
     380:	9c 85       	ldd	r25, Y+12	; 0x0c
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	f1 f7       	brne	.-4      	; 0x382 <AX_UART_Init+0xf4>
     386:	9c 87       	std	Y+12, r25	; 0x0c
     388:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     38a:	89 85       	ldd	r24, Y+9	; 0x09
     38c:	9a 85       	ldd	r25, Y+10	; 0x0a
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	9a 87       	std	Y+10, r25	; 0x0a
     392:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     394:	89 85       	ldd	r24, Y+9	; 0x09
     396:	9a 85       	ldd	r25, Y+10	; 0x0a
     398:	89 2b       	or	r24, r25
     39a:	69 f7       	brne	.-38     	; 0x376 <AX_UART_Init+0xe8>
     39c:	14 c0       	rjmp	.+40     	; 0x3c6 <AX_UART_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     39e:	6d 81       	ldd	r22, Y+5	; 0x05
     3a0:	7e 81       	ldd	r23, Y+6	; 0x06
     3a2:	8f 81       	ldd	r24, Y+7	; 0x07
     3a4:	98 85       	ldd	r25, Y+8	; 0x08
     3a6:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
     3aa:	dc 01       	movw	r26, r24
     3ac:	cb 01       	movw	r24, r22
     3ae:	9a 87       	std	Y+10, r25	; 0x0a
     3b0:	89 87       	std	Y+9, r24	; 0x09
     3b2:	89 85       	ldd	r24, Y+9	; 0x09
     3b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b6:	9e 87       	std	Y+14, r25	; 0x0e
     3b8:	8d 87       	std	Y+13, r24	; 0x0d
     3ba:	8d 85       	ldd	r24, Y+13	; 0x0d
     3bc:	9e 85       	ldd	r25, Y+14	; 0x0e
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <AX_UART_Init+0x130>
     3c2:	9e 87       	std	Y+14, r25	; 0x0e
     3c4:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);
}
     3c6:	2e 96       	adiw	r28, 0x0e	; 14
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	1f 92       	push	r1
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1<<UDRE1)) );
     3e4:	00 00       	nop
     3e6:	88 ec       	ldi	r24, 0xC8	; 200
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	fc 01       	movw	r30, r24
     3ec:	80 81       	ld	r24, Z
     3ee:	88 2f       	mov	r24, r24
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	80 72       	andi	r24, 0x20	; 32
     3f4:	99 27       	eor	r25, r25
     3f6:	89 2b       	or	r24, r25
     3f8:	b1 f3       	breq	.-20     	; 0x3e6 <AX_SendChar+0xe>
	UDR1 = data;
     3fa:	8e ec       	ldi	r24, 0xCE	; 206
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	29 81       	ldd	r18, Y+1	; 0x01
     400:	fc 01       	movw	r30, r24
     402:	20 83       	st	Z, r18
}
     404:	0f 90       	pop	r0
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	08 95       	ret

0000040c <AX_ReadChar>:
unsigned char AX_ReadChar(void)
{
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
   //UART1_Write('I');
   while( !( UCSR1A & (1<< RXC1)) );
     414:	00 00       	nop
     416:	88 ec       	ldi	r24, 0xC8	; 200
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	fc 01       	movw	r30, r24
     41c:	80 81       	ld	r24, Z
     41e:	88 23       	and	r24, r24
     420:	d4 f7       	brge	.-12     	; 0x416 <AX_ReadChar+0xa>
   return UDR1;
     422:	8e ec       	ldi	r24, 0xCE	; 206
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	fc 01       	movw	r30, r24
     428:	80 81       	ld	r24, Z
}
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <AX_ReadStatus>:
/*************************************************************************************************************************************************************************************
*															 Funkcije za upravljanje AX-12A servoima                                                                                                                                      *
*************************************************************************************************************************************************************************************/

void AX_ReadStatus(void)
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	27 97       	sbiw	r28, 0x07	; 7
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
	 unsigned char status[7] = {0,0,0,0,0,0};
     444:	27 e0       	ldi	r18, 0x07	; 7
     446:	ce 01       	movw	r24, r28
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	fc 01       	movw	r30, r24
     44c:	32 2f       	mov	r19, r18
     44e:	11 92       	st	Z+, r1
     450:	3a 95       	dec	r19
     452:	e9 f7       	brne	.-6      	; 0x44e <AX_ReadStatus+0x1e>

	status[0] = AX_ReadChar();
     454:	0e 94 06 02 	call	0x40c	; 0x40c <AX_ReadChar>
     458:	89 83       	std	Y+1, r24	; 0x01
	status[1] = AX_ReadChar();
     45a:	0e 94 06 02 	call	0x40c	; 0x40c <AX_ReadChar>
     45e:	8a 83       	std	Y+2, r24	; 0x02
	status[2] = AX_ReadChar();
     460:	0e 94 06 02 	call	0x40c	; 0x40c <AX_ReadChar>
     464:	8b 83       	std	Y+3, r24	; 0x03
	status[3] = AX_ReadChar();
     466:	0e 94 06 02 	call	0x40c	; 0x40c <AX_ReadChar>
     46a:	8c 83       	std	Y+4, r24	; 0x04
	status[4] = AX_ReadChar();
     46c:	0e 94 06 02 	call	0x40c	; 0x40c <AX_ReadChar>
     470:	8d 83       	std	Y+5, r24	; 0x05
	status[5] = AX_ReadChar();
     472:	0e 94 06 02 	call	0x40c	; 0x40c <AX_ReadChar>
     476:	8e 83       	std	Y+6, r24	; 0x06
}
     478:	27 96       	adiw	r28, 0x07	; 7
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <AX_StopTransmitter>:

void AX_StopTransmitter(void)
{
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
	while( !(UCSR1A & (1<<TXC1)) );
     492:	00 00       	nop
     494:	88 ec       	ldi	r24, 0xC8	; 200
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	fc 01       	movw	r30, r24
     49a:	80 81       	ld	r24, Z
     49c:	88 2f       	mov	r24, r24
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	80 74       	andi	r24, 0x40	; 64
     4a2:	99 27       	eor	r25, r25
     4a4:	89 2b       	or	r24, r25
     4a6:	b1 f3       	breq	.-20     	; 0x494 <AX_StopTransmitter+0xa>
	UCSR1B &= 0xF7;
     4a8:	89 ec       	ldi	r24, 0xC9	; 201
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	29 ec       	ldi	r18, 0xC9	; 201
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	f9 01       	movw	r30, r18
     4b2:	20 81       	ld	r18, Z
     4b4:	27 7f       	andi	r18, 0xF7	; 247
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18
	UCSR1A |= 0x40;
     4ba:	88 ec       	ldi	r24, 0xC8	; 200
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	28 ec       	ldi	r18, 0xC8	; 200
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	f9 01       	movw	r30, r18
     4c4:	20 81       	ld	r18, Z
     4c6:	20 64       	ori	r18, 0x40	; 64
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 83       	st	Z, r18
}
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x08;
     4da:	89 ec       	ldi	r24, 0xC9	; 201
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	29 ec       	ldi	r18, 0xC9	; 201
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	f9 01       	movw	r30, r18
     4e4:	20 81       	ld	r18, Z
     4e6:	28 60       	ori	r18, 0x08	; 8
     4e8:	fc 01       	movw	r30, r24
     4ea:	20 83       	st	Z, r18
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <AX_StopReceiver>:

void AX_StopReceiver(void)
{
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
	UCSR1B &= 0xEF;
     4fa:	89 ec       	ldi	r24, 0xC9	; 201
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	29 ec       	ldi	r18, 0xC9	; 201
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	f9 01       	movw	r30, r18
     504:	20 81       	ld	r18, Z
     506:	2f 7e       	andi	r18, 0xEF	; 239
     508:	fc 01       	movw	r30, r24
     50a:	20 83       	st	Z, r18
}
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x10;
     51a:	89 ec       	ldi	r24, 0xC9	; 201
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	29 ec       	ldi	r18, 0xC9	; 201
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	f9 01       	movw	r30, r18
     524:	20 81       	ld	r18, Z
     526:	20 61       	ori	r18, 0x10	; 16
     528:	fc 01       	movw	r30, r24
     52a:	20 83       	st	Z, r18
}
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	6a 97       	sbiw	r28, 0x1a	; 26
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	9e 8b       	std	Y+22, r25	; 0x16
     548:	8d 8b       	std	Y+21, r24	; 0x15
     54a:	78 8f       	std	Y+24, r23	; 0x18
     54c:	6f 8b       	std	Y+23, r22	; 0x17
     54e:	49 8f       	std	Y+25, r20	; 0x19
     550:	2a 8f       	std	Y+26, r18	; 0x1a
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;

	angle = (unsigned int)(1023 *((double)angle/300.0));
     552:	8d 89       	ldd	r24, Y+21	; 0x15
     554:	9e 89       	ldd	r25, Y+22	; 0x16
     556:	cc 01       	movw	r24, r24
     558:	a0 e0       	ldi	r26, 0x00	; 0
     55a:	b0 e0       	ldi	r27, 0x00	; 0
     55c:	bc 01       	movw	r22, r24
     55e:	cd 01       	movw	r24, r26
     560:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__floatunsisf>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	46 e9       	ldi	r20, 0x96	; 150
     56e:	53 e4       	ldi	r21, 0x43	; 67
     570:	bc 01       	movw	r22, r24
     572:	cd 01       	movw	r24, r26
     574:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__divsf3>
     578:	dc 01       	movw	r26, r24
     57a:	cb 01       	movw	r24, r22
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 ec       	ldi	r19, 0xC0	; 192
     580:	4f e7       	ldi	r20, 0x7F	; 127
     582:	54 e4       	ldi	r21, 0x44	; 68
     584:	bc 01       	movw	r22, r24
     586:	cd 01       	movw	r24, r26
     588:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
     58c:	dc 01       	movw	r26, r24
     58e:	cb 01       	movw	r24, r22
     590:	bc 01       	movw	r22, r24
     592:	cd 01       	movw	r24, r26
     594:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
     598:	dc 01       	movw	r26, r24
     59a:	cb 01       	movw	r24, r22
     59c:	9e 8b       	std	Y+22, r25	; 0x16
     59e:	8d 8b       	std	Y+21, r24	; 0x15

	angle_H = (unsigned char)(angle >> 8);
     5a0:	8d 89       	ldd	r24, Y+21	; 0x15
     5a2:	9e 89       	ldd	r25, Y+22	; 0x16
     5a4:	89 2f       	mov	r24, r25
     5a6:	99 27       	eor	r25, r25
     5a8:	89 83       	std	Y+1, r24	; 0x01
	angle_L = (unsigned char)(angle & 0x00FF);
     5aa:	8d 89       	ldd	r24, Y+21	; 0x15
     5ac:	8a 83       	std	Y+2, r24	; 0x02

	speed |= (direction << 10);
     5ae:	89 8d       	ldd	r24, Y+25	; 0x19
     5b0:	88 2f       	mov	r24, r24
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	98 2f       	mov	r25, r24
     5b6:	88 27       	eor	r24, r24
     5b8:	99 0f       	add	r25, r25
     5ba:	99 0f       	add	r25, r25
     5bc:	9c 01       	movw	r18, r24
     5be:	8f 89       	ldd	r24, Y+23	; 0x17
     5c0:	98 8d       	ldd	r25, Y+24	; 0x18
     5c2:	82 2b       	or	r24, r18
     5c4:	93 2b       	or	r25, r19
     5c6:	98 8f       	std	Y+24, r25	; 0x18
     5c8:	8f 8b       	std	Y+23, r24	; 0x17
	speed_H = (unsigned char)(speed >> 8);
     5ca:	8f 89       	ldd	r24, Y+23	; 0x17
     5cc:	98 8d       	ldd	r25, Y+24	; 0x18
     5ce:	89 2f       	mov	r24, r25
     5d0:	99 27       	eor	r25, r25
     5d2:	8b 83       	std	Y+3, r24	; 0x03
	speed_L = (unsigned char)(speed & 0x00FF);
     5d4:	8f 89       	ldd	r24, Y+23	; 0x17
     5d6:	8c 83       	std	Y+4, r24	; 0x04

	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
     5d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     5da:	88 2f       	mov	r24, r24
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	9c 01       	movw	r18, r24
     5e0:	28 5d       	subi	r18, 0xD8	; 216
     5e2:	3f 4f       	sbci	r19, 0xFF	; 255
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
     5e6:	88 2f       	mov	r24, r24
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	28 0f       	add	r18, r24
     5ec:	39 1f       	adc	r19, r25
     5ee:	8c 81       	ldd	r24, Y+4	; 0x04
     5f0:	88 2f       	mov	r24, r24
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	28 0f       	add	r18, r24
     5f6:	39 1f       	adc	r19, r25
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	88 2f       	mov	r24, r24
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	28 0f       	add	r18, r24
     600:	39 1f       	adc	r19, r25
     602:	8a 81       	ldd	r24, Y+2	; 0x02
     604:	88 2f       	mov	r24, r24
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	82 0f       	add	r24, r18
     60a:	93 1f       	adc	r25, r19
     60c:	80 95       	com	r24
     60e:	90 95       	com	r25
     610:	9e 83       	std	Y+6, r25	; 0x06
     612:	8d 83       	std	Y+5, r24	; 0x05

	AX_StopReceiver();
     614:	0e 94 79 02 	call	0x4f2	; 0x4f2 <AX_StopReceiver>

	AX_SendChar(START);
     618:	8f ef       	ldi	r24, 0xFF	; 255
     61a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(START);
     61e:	8f ef       	ldi	r24, 0xFF	; 255
     620:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(id);
     624:	8a 8d       	ldd	r24, Y+26	; 0x1a
     626:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(LENGTH);
     62a:	87 e0       	ldi	r24, 0x07	; 7
     62c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(INSTR);
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(ADDRESS);
     636:	8e e1       	ldi	r24, 0x1E	; 30
     638:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(angle_L);
     63c:	8a 81       	ldd	r24, Y+2	; 0x02
     63e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(angle_H);
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(speed_L);
     648:	8c 81       	ldd	r24, Y+4	; 0x04
     64a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(speed_H);
     64e:	8b 81       	ldd	r24, Y+3	; 0x03
     650:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(checksum);
     654:	8d 81       	ldd	r24, Y+5	; 0x05
     656:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>

	AX_StopTransmitter();
     65a:	0e 94 45 02 	call	0x48a	; 0x48a <AX_StopTransmitter>
	AX_ReleaseReceiver();
     65e:	0e 94 89 02 	call	0x512	; 0x512 <AX_ReleaseReceiver>
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	a8 e4       	ldi	r26, 0x48	; 72
     668:	b2 e4       	ldi	r27, 0x42	; 66
     66a:	8f 83       	std	Y+7, r24	; 0x07
     66c:	98 87       	std	Y+8, r25	; 0x08
     66e:	a9 87       	std	Y+9, r26	; 0x09
     670:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e4       	ldi	r19, 0x40	; 64
     676:	4c e1       	ldi	r20, 0x1C	; 28
     678:	55 e4       	ldi	r21, 0x45	; 69
     67a:	6f 81       	ldd	r22, Y+7	; 0x07
     67c:	78 85       	ldd	r23, Y+8	; 0x08
     67e:	89 85       	ldd	r24, Y+9	; 0x09
     680:	9a 85       	ldd	r25, Y+10	; 0x0a
     682:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
     686:	dc 01       	movw	r26, r24
     688:	cb 01       	movw	r24, r22
     68a:	8b 87       	std	Y+11, r24	; 0x0b
     68c:	9c 87       	std	Y+12, r25	; 0x0c
     68e:	ad 87       	std	Y+13, r26	; 0x0d
     690:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	40 e8       	ldi	r20, 0x80	; 128
     698:	5f e3       	ldi	r21, 0x3F	; 63
     69a:	6b 85       	ldd	r22, Y+11	; 0x0b
     69c:	7c 85       	ldd	r23, Y+12	; 0x0c
     69e:	8d 85       	ldd	r24, Y+13	; 0x0d
     6a0:	9e 85       	ldd	r25, Y+14	; 0x0e
     6a2:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
     6a6:	88 23       	and	r24, r24
     6a8:	2c f4       	brge	.+10     	; 0x6b4 <AX_SetAngle+0x182>
		__ticks = 1;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	98 8b       	std	Y+16, r25	; 0x10
     6b0:	8f 87       	std	Y+15, r24	; 0x0f
     6b2:	3f c0       	rjmp	.+126    	; 0x732 <AX_SetAngle+0x200>
	else if (__tmp > 65535)
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	3f ef       	ldi	r19, 0xFF	; 255
     6b8:	4f e7       	ldi	r20, 0x7F	; 127
     6ba:	57 e4       	ldi	r21, 0x47	; 71
     6bc:	6b 85       	ldd	r22, Y+11	; 0x0b
     6be:	7c 85       	ldd	r23, Y+12	; 0x0c
     6c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     6c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     6c4:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
     6c8:	18 16       	cp	r1, r24
     6ca:	4c f5       	brge	.+82     	; 0x71e <AX_SetAngle+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 e2       	ldi	r20, 0x20	; 32
     6d2:	51 e4       	ldi	r21, 0x41	; 65
     6d4:	6f 81       	ldd	r22, Y+7	; 0x07
     6d6:	78 85       	ldd	r23, Y+8	; 0x08
     6d8:	89 85       	ldd	r24, Y+9	; 0x09
     6da:	9a 85       	ldd	r25, Y+10	; 0x0a
     6dc:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
     6e0:	dc 01       	movw	r26, r24
     6e2:	cb 01       	movw	r24, r22
     6e4:	bc 01       	movw	r22, r24
     6e6:	cd 01       	movw	r24, r26
     6e8:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
     6ec:	dc 01       	movw	r26, r24
     6ee:	cb 01       	movw	r24, r22
     6f0:	98 8b       	std	Y+16, r25	; 0x10
     6f2:	8f 87       	std	Y+15, r24	; 0x0f
     6f4:	0f c0       	rjmp	.+30     	; 0x714 <AX_SetAngle+0x1e2>
     6f6:	8a ef       	ldi	r24, 0xFA	; 250
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	9a 8b       	std	Y+18, r25	; 0x12
     6fc:	89 8b       	std	Y+17, r24	; 0x11
     6fe:	89 89       	ldd	r24, Y+17	; 0x11
     700:	9a 89       	ldd	r25, Y+18	; 0x12
     702:	01 97       	sbiw	r24, 0x01	; 1
     704:	f1 f7       	brne	.-4      	; 0x702 <AX_SetAngle+0x1d0>
     706:	9a 8b       	std	Y+18, r25	; 0x12
     708:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     70a:	8f 85       	ldd	r24, Y+15	; 0x0f
     70c:	98 89       	ldd	r25, Y+16	; 0x10
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	98 8b       	std	Y+16, r25	; 0x10
     712:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     714:	8f 85       	ldd	r24, Y+15	; 0x0f
     716:	98 89       	ldd	r25, Y+16	; 0x10
     718:	89 2b       	or	r24, r25
     71a:	69 f7       	brne	.-38     	; 0x6f6 <AX_SetAngle+0x1c4>
     71c:	14 c0       	rjmp	.+40     	; 0x746 <AX_SetAngle+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     71e:	6b 85       	ldd	r22, Y+11	; 0x0b
     720:	7c 85       	ldd	r23, Y+12	; 0x0c
     722:	8d 85       	ldd	r24, Y+13	; 0x0d
     724:	9e 85       	ldd	r25, Y+14	; 0x0e
     726:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	98 8b       	std	Y+16, r25	; 0x10
     730:	8f 87       	std	Y+15, r24	; 0x0f
     732:	8f 85       	ldd	r24, Y+15	; 0x0f
     734:	98 89       	ldd	r25, Y+16	; 0x10
     736:	9c 8b       	std	Y+20, r25	; 0x14
     738:	8b 8b       	std	Y+19, r24	; 0x13
     73a:	8b 89       	ldd	r24, Y+19	; 0x13
     73c:	9c 89       	ldd	r25, Y+20	; 0x14
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <AX_SetAngle+0x20c>
     742:	9c 8b       	std	Y+20, r25	; 0x14
     744:	8b 8b       	std	Y+19, r24	; 0x13

	_delay_ms(50);

	AX_ReleaseTransmitter();
     746:	0e 94 69 02 	call	0x4d2	; 0x4d2 <AX_ReleaseTransmitter>
}
     74a:	6a 96       	adiw	r28, 0x1a	; 26
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	08 95       	ret

0000075c <AX_EndlessTurn>:


void AX_EndlessTurn(void)
{
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	60 97       	sbiw	r28, 0x10	; 16
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61

	unsigned int checksum;

	checksum = ~(0x01 + 0x07 + 0x03 + 0x06 + (1023 & 0xFF) + (1023 >> 8) & 0xFF);
     770:	8c ee       	ldi	r24, 0xEC	; 236
     772:	9f ef       	ldi	r25, 0xFF	; 255
     774:	9a 83       	std	Y+2, r25	; 0x02
     776:	89 83       	std	Y+1, r24	; 0x01

	AX_StopReceiver();
     778:	0e 94 79 02 	call	0x4f2	; 0x4f2 <AX_StopReceiver>

	AX_SendChar(0xFF);
     77c:	8f ef       	ldi	r24, 0xFF	; 255
     77e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(0xFF);
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(0x01);
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(0x07);
     78e:	87 e0       	ldi	r24, 0x07	; 7
     790:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(0x03);
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(0x06);
     79a:	86 e0       	ldi	r24, 0x06	; 6
     79c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(0x00);
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(0x00);
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(1023 & 0xFF);
     7ac:	8f ef       	ldi	r24, 0xFF	; 255
     7ae:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(1023 >> 8);
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(checksum);
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>

	AX_StopTransmitter();
     7be:	0e 94 45 02 	call	0x48a	; 0x48a <AX_StopTransmitter>
	AX_ReleaseReceiver();
     7c2:	0e 94 89 02 	call	0x512	; 0x512 <AX_ReleaseReceiver>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a8 e4       	ldi	r26, 0x48	; 72
     7cc:	b2 e4       	ldi	r27, 0x42	; 66
     7ce:	8b 83       	std	Y+3, r24	; 0x03
     7d0:	9c 83       	std	Y+4, r25	; 0x04
     7d2:	ad 83       	std	Y+5, r26	; 0x05
     7d4:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e4       	ldi	r19, 0x40	; 64
     7da:	4c e1       	ldi	r20, 0x1C	; 28
     7dc:	55 e4       	ldi	r21, 0x45	; 69
     7de:	6b 81       	ldd	r22, Y+3	; 0x03
     7e0:	7c 81       	ldd	r23, Y+4	; 0x04
     7e2:	8d 81       	ldd	r24, Y+5	; 0x05
     7e4:	9e 81       	ldd	r25, Y+6	; 0x06
     7e6:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
     7ea:	dc 01       	movw	r26, r24
     7ec:	cb 01       	movw	r24, r22
     7ee:	8f 83       	std	Y+7, r24	; 0x07
     7f0:	98 87       	std	Y+8, r25	; 0x08
     7f2:	a9 87       	std	Y+9, r26	; 0x09
     7f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 e8       	ldi	r20, 0x80	; 128
     7fc:	5f e3       	ldi	r21, 0x3F	; 63
     7fe:	6f 81       	ldd	r22, Y+7	; 0x07
     800:	78 85       	ldd	r23, Y+8	; 0x08
     802:	89 85       	ldd	r24, Y+9	; 0x09
     804:	9a 85       	ldd	r25, Y+10	; 0x0a
     806:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
     80a:	88 23       	and	r24, r24
     80c:	2c f4       	brge	.+10     	; 0x818 <AX_EndlessTurn+0xbc>
		__ticks = 1;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	9c 87       	std	Y+12, r25	; 0x0c
     814:	8b 87       	std	Y+11, r24	; 0x0b
     816:	3f c0       	rjmp	.+126    	; 0x896 <AX_EndlessTurn+0x13a>
	else if (__tmp > 65535)
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	3f ef       	ldi	r19, 0xFF	; 255
     81c:	4f e7       	ldi	r20, 0x7F	; 127
     81e:	57 e4       	ldi	r21, 0x47	; 71
     820:	6f 81       	ldd	r22, Y+7	; 0x07
     822:	78 85       	ldd	r23, Y+8	; 0x08
     824:	89 85       	ldd	r24, Y+9	; 0x09
     826:	9a 85       	ldd	r25, Y+10	; 0x0a
     828:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
     82c:	18 16       	cp	r1, r24
     82e:	4c f5       	brge	.+82     	; 0x882 <AX_EndlessTurn+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e2       	ldi	r20, 0x20	; 32
     836:	51 e4       	ldi	r21, 0x41	; 65
     838:	6b 81       	ldd	r22, Y+3	; 0x03
     83a:	7c 81       	ldd	r23, Y+4	; 0x04
     83c:	8d 81       	ldd	r24, Y+5	; 0x05
     83e:	9e 81       	ldd	r25, Y+6	; 0x06
     840:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
     844:	dc 01       	movw	r26, r24
     846:	cb 01       	movw	r24, r22
     848:	bc 01       	movw	r22, r24
     84a:	cd 01       	movw	r24, r26
     84c:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	9c 87       	std	Y+12, r25	; 0x0c
     856:	8b 87       	std	Y+11, r24	; 0x0b
     858:	0f c0       	rjmp	.+30     	; 0x878 <AX_EndlessTurn+0x11c>
     85a:	8a ef       	ldi	r24, 0xFA	; 250
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	9e 87       	std	Y+14, r25	; 0x0e
     860:	8d 87       	std	Y+13, r24	; 0x0d
     862:	8d 85       	ldd	r24, Y+13	; 0x0d
     864:	9e 85       	ldd	r25, Y+14	; 0x0e
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	f1 f7       	brne	.-4      	; 0x866 <AX_EndlessTurn+0x10a>
     86a:	9e 87       	std	Y+14, r25	; 0x0e
     86c:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     86e:	8b 85       	ldd	r24, Y+11	; 0x0b
     870:	9c 85       	ldd	r25, Y+12	; 0x0c
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	9c 87       	std	Y+12, r25	; 0x0c
     876:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     878:	8b 85       	ldd	r24, Y+11	; 0x0b
     87a:	9c 85       	ldd	r25, Y+12	; 0x0c
     87c:	89 2b       	or	r24, r25
     87e:	69 f7       	brne	.-38     	; 0x85a <AX_EndlessTurn+0xfe>
     880:	14 c0       	rjmp	.+40     	; 0x8aa <AX_EndlessTurn+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     882:	6f 81       	ldd	r22, Y+7	; 0x07
     884:	78 85       	ldd	r23, Y+8	; 0x08
     886:	89 85       	ldd	r24, Y+9	; 0x09
     888:	9a 85       	ldd	r25, Y+10	; 0x0a
     88a:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
     88e:	dc 01       	movw	r26, r24
     890:	cb 01       	movw	r24, r22
     892:	9c 87       	std	Y+12, r25	; 0x0c
     894:	8b 87       	std	Y+11, r24	; 0x0b
     896:	8b 85       	ldd	r24, Y+11	; 0x0b
     898:	9c 85       	ldd	r25, Y+12	; 0x0c
     89a:	98 8b       	std	Y+16, r25	; 0x10
     89c:	8f 87       	std	Y+15, r24	; 0x0f
     89e:	8f 85       	ldd	r24, Y+15	; 0x0f
     8a0:	98 89       	ldd	r25, Y+16	; 0x10
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	f1 f7       	brne	.-4      	; 0x8a2 <AX_EndlessTurn+0x146>
     8a6:	98 8b       	std	Y+16, r25	; 0x10
     8a8:	8f 87       	std	Y+15, r24	; 0x0f

	//AX_ReadStatus();
	_delay_ms(50);

	AX_ReleaseTransmitter();
     8aa:	0e 94 69 02 	call	0x4d2	; 0x4d2 <AX_ReleaseTransmitter>
}
     8ae:	60 96       	adiw	r28, 0x10	; 16
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <AX_SetSpeed>:

void AX_SetSpeed(unsigned int direction, unsigned int speed)
{
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	28 97       	sbiw	r28, 0x08	; 8
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	9e 83       	std	Y+6, r25	; 0x06
     8d6:	8d 83       	std	Y+5, r24	; 0x05
     8d8:	78 87       	std	Y+8, r23	; 0x08
     8da:	6f 83       	std	Y+7, r22	; 0x07
	/*
		direction ---> TurnDirection -> 1 - ClockWise   0 - CounterClockWise
	*/

	unsigned int data = 0x0000;
     8dc:	1a 82       	std	Y+2, r1	; 0x02
     8de:	19 82       	std	Y+1, r1	; 0x01
	unsigned int checksum = 0;
     8e0:	1c 82       	std	Y+4, r1	; 0x04
     8e2:	1b 82       	std	Y+3, r1	; 0x03

	data = speed;
     8e4:	8f 81       	ldd	r24, Y+7	; 0x07
     8e6:	98 85       	ldd	r25, Y+8	; 0x08
     8e8:	9a 83       	std	Y+2, r25	; 0x02
     8ea:	89 83       	std	Y+1, r24	; 0x01
	data |= (direction << 10);
     8ec:	8d 81       	ldd	r24, Y+5	; 0x05
     8ee:	9e 81       	ldd	r25, Y+6	; 0x06
     8f0:	98 2f       	mov	r25, r24
     8f2:	88 27       	eor	r24, r24
     8f4:	99 0f       	add	r25, r25
     8f6:	99 0f       	add	r25, r25
     8f8:	29 81       	ldd	r18, Y+1	; 0x01
     8fa:	3a 81       	ldd	r19, Y+2	; 0x02
     8fc:	82 2b       	or	r24, r18
     8fe:	93 2b       	or	r25, r19
     900:	9a 83       	std	Y+2, r25	; 0x02
     902:	89 83       	std	Y+1, r24	; 0x01


	checksum = ~(0x01 + 0x05 + 0x03 + 0x20 + data);
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	9a 81       	ldd	r25, Y+2	; 0x02
     908:	89 96       	adiw	r24, 0x29	; 41
     90a:	80 95       	com	r24
     90c:	90 95       	com	r25
     90e:	9c 83       	std	Y+4, r25	; 0x04
     910:	8b 83       	std	Y+3, r24	; 0x03

	AX_StopReceiver();
     912:	0e 94 79 02 	call	0x4f2	; 0x4f2 <AX_StopReceiver>

	AX_SendChar(0xFF);
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(0xFF);
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(0x01);
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(0x05);
     928:	85 e0       	ldi	r24, 0x05	; 5
     92a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(0x03);
     92e:	83 e0       	ldi	r24, 0x03	; 3
     930:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(0x20);
     934:	80 e2       	ldi	r24, 0x20	; 32
     936:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(data);
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(data >> 8);
     940:	89 81       	ldd	r24, Y+1	; 0x01
     942:	9a 81       	ldd	r25, Y+2	; 0x02
     944:	89 2f       	mov	r24, r25
     946:	99 27       	eor	r25, r25
     948:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>
	AX_SendChar(checksum);
     94c:	8b 81       	ldd	r24, Y+3	; 0x03
     94e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <AX_SendChar>

	AX_StopTransmitter();
     952:	0e 94 45 02 	call	0x48a	; 0x48a <AX_StopTransmitter>
	AX_ReleaseReceiver();
     956:	0e 94 89 02 	call	0x512	; 0x512 <AX_ReleaseReceiver>

	AX_ReadStatus();
     95a:	0e 94 18 02 	call	0x430	; 0x430 <AX_ReadStatus>

	AX_ReleaseTransmitter();
     95e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <AX_ReleaseTransmitter>
}
     962:	28 96       	adiw	r28, 0x08	; 8
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	de bf       	out	0x3e, r29	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	cd bf       	out	0x3d, r28	; 61
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <__vector_18>:
static volatile unsigned char rxCounter[10];
//volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     974:	1f 92       	push	r1
     976:	0f 92       	push	r0
     978:	00 90 5f 00 	lds	r0, 0x005F
     97c:	0f 92       	push	r0
     97e:	11 24       	eor	r1, r1
     980:	00 90 5b 00 	lds	r0, 0x005B
     984:	0f 92       	push	r0
     986:	2f 93       	push	r18
     988:	3f 93       	push	r19
     98a:	4f 93       	push	r20
     98c:	5f 93       	push	r21
     98e:	8f 93       	push	r24
     990:	9f 93       	push	r25
     992:	ef 93       	push	r30
     994:	ff 93       	push	r31
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	00 d0       	rcall	.+0      	; 0x99c <__vector_18+0x28>
     99c:	00 d0       	rcall	.+0      	; 0x99e <__vector_18+0x2a>
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     9a2:	8d ee       	ldi	r24, 0xED	; 237
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	fc 01       	movw	r30, r24
     9a8:	80 81       	ld	r24, Z
     9aa:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     9ac:	19 82       	std	Y+1, r1	; 0x01
     9ae:	a4 c0       	rjmp	.+328    	; 0xaf8 <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
     9b0:	8d ee       	ldi	r24, 0xED	; 237
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	29 81       	ldd	r18, Y+1	; 0x01
     9b6:	22 95       	swap	r18
     9b8:	20 7f       	andi	r18, 0xF0	; 240
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     9be:	8e ee       	ldi	r24, 0xEE	; 238
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	fc 01       	movw	r30, r24
     9c4:	80 81       	ld	r24, Z
     9c6:	82 95       	swap	r24
     9c8:	86 95       	lsr	r24
     9ca:	87 70       	andi	r24, 0x07	; 7
     9cc:	88 2f       	mov	r24, r24
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	81 70       	andi	r24, 0x01	; 1
     9d2:	99 27       	eor	r25, r25
     9d4:	89 2b       	or	r24, r25
     9d6:	09 f4       	brne	.+2      	; 0x9da <__vector_18+0x66>
     9d8:	70 c0       	rjmp	.+224    	; 0xaba <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     9da:	8f ee       	ldi	r24, 0xEF	; 239
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	20 e8       	ldi	r18, 0x80	; 128
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     9e4:	8e ee       	ldi	r24, 0xEE	; 238
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	2e ee       	ldi	r18, 0xEE	; 238
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	f9 01       	movw	r30, r18
     9ee:	20 81       	ld	r18, Z
     9f0:	2f 7d       	andi	r18, 0xDF	; 223
     9f2:	fc 01       	movw	r30, r24
     9f4:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     9f6:	82 ef       	ldi	r24, 0xF2	; 242
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	fc 01       	movw	r30, r24
     9fc:	80 81       	ld	r24, Z
     9fe:	82 95       	swap	r24
     a00:	86 95       	lsr	r24
     a02:	87 70       	andi	r24, 0x07	; 7
     a04:	28 2f       	mov	r18, r24
     a06:	83 ef       	ldi	r24, 0xF3	; 243
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	fc 01       	movw	r30, r24
     a0c:	80 81       	ld	r24, Z
     a0e:	88 2f       	mov	r24, r24
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	82 2b       	or	r24, r18
     a20:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	26 c0       	rjmp	.+76     	; 0xa72 <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     a26:	8c 81       	ldd	r24, Y+4	; 0x04
     a28:	88 2f       	mov	r24, r24
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	81 50       	subi	r24, 0x01	; 1
     a2e:	90 48       	sbci	r25, 0x80	; 128
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	82 5d       	subi	r24, 0xD2	; 210
     a36:	9e 4f       	sbci	r25, 0xFE	; 254
     a38:	fc 01       	movw	r30, r24
     a3a:	20 81       	ld	r18, Z
     a3c:	31 81       	ldd	r19, Z+1	; 0x01
     a3e:	8c 81       	ldd	r24, Y+4	; 0x04
     a40:	88 2f       	mov	r24, r24
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	8e 5b       	subi	r24, 0xBE	; 190
     a48:	9e 4f       	sbci	r25, 0xFE	; 254
     a4a:	fc 01       	movw	r30, r24
     a4c:	80 81       	ld	r24, Z
     a4e:	48 2f       	mov	r20, r24
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	8a 81       	ldd	r24, Y+2	; 0x02
     a54:	88 2f       	mov	r24, r24
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	84 0f       	add	r24, r20
     a5a:	95 1f       	adc	r25, r21
     a5c:	82 0f       	add	r24, r18
     a5e:	93 1f       	adc	r25, r19
     a60:	2a ef       	ldi	r18, 0xFA	; 250
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	f9 01       	movw	r30, r18
     a66:	20 81       	ld	r18, Z
     a68:	fc 01       	movw	r30, r24
     a6a:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     a6c:	8a 81       	ldd	r24, Y+2	; 0x02
     a6e:	8f 5f       	subi	r24, 0xFF	; 255
     a70:	8a 83       	std	Y+2, r24	; 0x02
     a72:	8a 81       	ldd	r24, Y+2	; 0x02
     a74:	88 30       	cpi	r24, 0x08	; 8
     a76:	b8 f2       	brcs	.-82     	; 0xa26 <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     a78:	8c 81       	ldd	r24, Y+4	; 0x04
     a7a:	88 2f       	mov	r24, r24
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	8e 5b       	subi	r24, 0xBE	; 190
     a82:	9e 4f       	sbci	r25, 0xFE	; 254
     a84:	fc 01       	movw	r30, r24
     a86:	20 81       	ld	r18, Z
     a88:	2f 5f       	subi	r18, 0xFF	; 255
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 83       	st	Z, r18
     a8e:	25 30       	cpi	r18, 0x05	; 5
     a90:	41 f4       	brne	.+16     	; 0xaa2 <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
     a92:	8c 81       	ldd	r24, Y+4	; 0x04
     a94:	88 2f       	mov	r24, r24
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	8e 5b       	subi	r24, 0xBE	; 190
     a9c:	9e 4f       	sbci	r25, 0xFE	; 254
     a9e:	fc 01       	movw	r30, r24
     aa0:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     aa2:	8c 81       	ldd	r24, Y+4	; 0x04
     aa4:	88 2f       	mov	r24, r24
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	8a 5a       	subi	r24, 0xAA	; 170
     aac:	9e 4f       	sbci	r25, 0xFE	; 254
     aae:	fc 01       	movw	r30, r24
     ab0:	20 81       	ld	r18, Z
     ab2:	2f 5f       	subi	r18, 0xFF	; 255
     ab4:	fc 01       	movw	r30, r24
     ab6:	20 83       	st	Z, r18

			break;
     ab8:	23 c0       	rjmp	.+70     	; 0xb00 <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     aba:	8e ee       	ldi	r24, 0xEE	; 238
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	fc 01       	movw	r30, r24
     ac0:	80 81       	ld	r24, Z
     ac2:	82 95       	swap	r24
     ac4:	86 95       	lsr	r24
     ac6:	86 95       	lsr	r24
     ac8:	83 70       	andi	r24, 0x03	; 3
     aca:	88 2f       	mov	r24, r24
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	81 70       	andi	r24, 0x01	; 1
     ad0:	99 27       	eor	r25, r25
     ad2:	89 2b       	or	r24, r25
     ad4:	71 f0       	breq	.+28     	; 0xaf2 <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
     ad6:	8f ee       	ldi	r24, 0xEF	; 239
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	fc 01       	movw	r30, r24
     adc:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     ade:	8e ee       	ldi	r24, 0xEE	; 238
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	2e ee       	ldi	r18, 0xEE	; 238
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	f9 01       	movw	r30, r18
     ae8:	20 81       	ld	r18, Z
     aea:	2f 7b       	andi	r18, 0xBF	; 191
     aec:	fc 01       	movw	r30, r24
     aee:	20 83       	st	Z, r18

			break;
     af0:	07 c0       	rjmp	.+14     	; 0xb00 <__vector_18+0x18c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	8f 5f       	subi	r24, 0xFF	; 255
     af6:	89 83       	std	Y+1, r24	; 0x01
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	8f 30       	cpi	r24, 0x0F	; 15
     afc:	08 f4       	brcc	.+2      	; 0xb00 <__vector_18+0x18c>
     afe:	58 cf       	rjmp	.-336    	; 0x9b0 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     b00:	8d ee       	ldi	r24, 0xED	; 237
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	2b 81       	ldd	r18, Y+3	; 0x03
     b06:	fc 01       	movw	r30, r24
     b08:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // zato sto tako treba.
}
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	ff 91       	pop	r31
     b18:	ef 91       	pop	r30
     b1a:	9f 91       	pop	r25
     b1c:	8f 91       	pop	r24
     b1e:	5f 91       	pop	r21
     b20:	4f 91       	pop	r20
     b22:	3f 91       	pop	r19
     b24:	2f 91       	pop	r18
     b26:	0f 90       	pop	r0
     b28:	00 92 5b 00 	sts	0x005B, r0
     b2c:	0f 90       	pop	r0
     b2e:	00 92 5f 00 	sts	0x005F, r0
     b32:	0f 90       	pop	r0
     b34:	1f 90       	pop	r1
     b36:	18 95       	reti

00000b38 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <CAN_InitModule+0x6>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     b42:	88 ed       	ldi	r24, 0xD8	; 216
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	21 e0       	ldi	r18, 0x01	; 1
     b48:	fc 01       	movw	r30, r24
     b4a:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     b4c:	19 82       	std	Y+1, r1	; 0x01
     b4e:	3e c0       	rjmp	.+124    	; 0xbcc <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
     b50:	8d ee       	ldi	r24, 0xED	; 237
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	29 81       	ldd	r18, Y+1	; 0x01
     b56:	22 95       	swap	r18
     b58:	20 7f       	andi	r18, 0xF0	; 240
     b5a:	fc 01       	movw	r30, r24
     b5c:	20 83       	st	Z, r18

		CANSTMOB = 0;
     b5e:	8e ee       	ldi	r24, 0xEE	; 238
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	fc 01       	movw	r30, r24
     b64:	10 82       	st	Z, r1
		CANCDMOB = 0;
     b66:	8f ee       	ldi	r24, 0xEF	; 239
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	fc 01       	movw	r30, r24
     b6c:	10 82       	st	Z, r1

		CANIDT1 = 0;
     b6e:	83 ef       	ldi	r24, 0xF3	; 243
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	fc 01       	movw	r30, r24
     b74:	10 82       	st	Z, r1
		CANIDT2 = 0;
     b76:	82 ef       	ldi	r24, 0xF2	; 242
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	fc 01       	movw	r30, r24
     b7c:	10 82       	st	Z, r1
		CANIDT3 = 0;
     b7e:	81 ef       	ldi	r24, 0xF1	; 241
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	fc 01       	movw	r30, r24
     b84:	10 82       	st	Z, r1
		CANIDT4 = 0;
     b86:	80 ef       	ldi	r24, 0xF0	; 240
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	fc 01       	movw	r30, r24
     b8c:	10 82       	st	Z, r1
		CANIDM1 = 0;
     b8e:	87 ef       	ldi	r24, 0xF7	; 247
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	fc 01       	movw	r30, r24
     b94:	10 82       	st	Z, r1
		CANIDM2 = 0;
     b96:	86 ef       	ldi	r24, 0xF6	; 246
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	fc 01       	movw	r30, r24
     b9c:	10 82       	st	Z, r1
		CANIDM3 = 0;
     b9e:	85 ef       	ldi	r24, 0xF5	; 245
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	fc 01       	movw	r30, r24
     ba4:	10 82       	st	Z, r1
		CANIDM4 = 0;
     ba6:	84 ef       	ldi	r24, 0xF4	; 244
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	fc 01       	movw	r30, r24
     bac:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     bae:	1a 82       	std	Y+2, r1	; 0x02
     bb0:	07 c0       	rjmp	.+14     	; 0xbc0 <CAN_InitModule+0x88>
			CANMSG = 0;
     bb2:	8a ef       	ldi	r24, 0xFA	; 250
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	fc 01       	movw	r30, r24
     bb8:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	8f 5f       	subi	r24, 0xFF	; 255
     bbe:	8a 83       	std	Y+2, r24	; 0x02
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	88 30       	cpi	r24, 0x08	; 8
     bc4:	b0 f3       	brcs	.-20     	; 0xbb2 <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	8f 30       	cpi	r24, 0x0F	; 15
     bd0:	08 f4       	brcc	.+2      	; 0xbd4 <CAN_InitModule+0x9c>
     bd2:	be cf       	rjmp	.-132    	; 0xb50 <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     bd4:	88 ed       	ldi	r24, 0xD8	; 216
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	22 e0       	ldi	r18, 0x02	; 2
     bda:	fc 01       	movw	r30, r24
     bdc:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     bde:	82 ee       	ldi	r24, 0xE2	; 226
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	fc 01       	movw	r30, r24
     be6:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     be8:	83 ee       	ldi	r24, 0xE3	; 227
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	28 e0       	ldi	r18, 0x08	; 8
     bee:	fc 01       	movw	r30, r24
     bf0:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     bf2:	84 ee       	ldi	r24, 0xE4	; 228
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	2e e5       	ldi	r18, 0x5E	; 94
     bf8:	fc 01       	movw	r30, r24
     bfa:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     bfc:	85 ee       	ldi	r24, 0xE5	; 229
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	fc 01       	movw	r30, r24
     c02:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     c04:	8b ed       	ldi	r24, 0xDB	; 219
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	20 eb       	ldi	r18, 0xB0	; 176
     c0a:	fc 01       	movw	r30, r24
     c0c:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     c0e:	8f ed       	ldi	r24, 0xDF	; 223
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	2f e7       	ldi	r18, 0x7F	; 127
     c14:	fc 01       	movw	r30, r24
     c16:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
     c18:	8e ed       	ldi	r24, 0xDE	; 222
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	2f ef       	ldi	r18, 0xFF	; 255
     c1e:	fc 01       	movw	r30, r24
     c20:	20 83       	st	Z, r18
	sei();
     c22:	78 94       	sei
}
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	00 d0       	rcall	.+0      	; 0xc34 <CAN_InitRxMob+0x6>
     c34:	00 d0       	rcall	.+0      	; 0xc36 <CAN_InitRxMob+0x8>
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	9c 83       	std	Y+4, r25	; 0x04
     c3c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     c3e:	8d ee       	ldi	r24, 0xED	; 237
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	fc 01       	movw	r30, r24
     c44:	80 81       	ld	r24, Z
     c46:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     c48:	00 00       	nop
     c4a:	89 ed       	ldi	r24, 0xD9	; 217
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	fc 01       	movw	r30, r24
     c50:	80 81       	ld	r24, Z
     c52:	82 95       	swap	r24
     c54:	8f 70       	andi	r24, 0x0F	; 15
     c56:	88 2f       	mov	r24, r24
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	81 70       	andi	r24, 0x01	; 1
     c5c:	99 27       	eor	r25, r25
     c5e:	89 2b       	or	r24, r25
     c60:	a1 f7       	brne	.-24     	; 0xc4a <CAN_InitRxMob+0x1c>
     c62:	89 ed       	ldi	r24, 0xD9	; 217
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	fc 01       	movw	r30, r24
     c68:	80 81       	ld	r24, Z
     c6a:	86 95       	lsr	r24
     c6c:	86 95       	lsr	r24
     c6e:	86 95       	lsr	r24
     c70:	88 2f       	mov	r24, r24
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	81 70       	andi	r24, 0x01	; 1
     c76:	99 27       	eor	r25, r25
     c78:	89 2b       	or	r24, r25
     c7a:	39 f7       	brne	.-50     	; 0xc4a <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     c7c:	19 82       	std	Y+1, r1	; 0x01
     c7e:	49 c0       	rjmp	.+146    	; 0xd12 <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
     c80:	8d ee       	ldi	r24, 0xED	; 237
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	29 81       	ldd	r18, Y+1	; 0x01
     c86:	22 95       	swap	r18
     c88:	20 7f       	andi	r18, 0xF0	; 240
     c8a:	fc 01       	movw	r30, r24
     c8c:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     c8e:	8f ee       	ldi	r24, 0xEF	; 239
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	fc 01       	movw	r30, r24
     c94:	80 81       	ld	r24, Z
     c96:	82 95       	swap	r24
     c98:	86 95       	lsr	r24
     c9a:	86 95       	lsr	r24
     c9c:	83 70       	andi	r24, 0x03	; 3
     c9e:	88 23       	and	r24, r24
     ca0:	21 f0       	breq	.+8      	; 0xcaa <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	8f 5f       	subi	r24, 0xFF	; 255
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	34 c0       	rjmp	.+104    	; 0xd12 <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     caa:	8f ee       	ldi	r24, 0xEF	; 239
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	2f e0       	ldi	r18, 0x0F	; 15
     cb0:	fc 01       	movw	r30, r24
     cb2:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     cb4:	83 ef       	ldi	r24, 0xF3	; 243
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	2b 81       	ldd	r18, Y+3	; 0x03
     cba:	3c 81       	ldd	r19, Y+4	; 0x04
     cbc:	33 27       	eor	r19, r19
     cbe:	36 95       	lsr	r19
     cc0:	27 95       	ror	r18
     cc2:	36 95       	lsr	r19
     cc4:	27 95       	ror	r18
     cc6:	36 95       	lsr	r19
     cc8:	27 95       	ror	r18
     cca:	fc 01       	movw	r30, r24
     ccc:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
     cce:	82 ef       	ldi	r24, 0xF2	; 242
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	2b 81       	ldd	r18, Y+3	; 0x03
     cd4:	22 95       	swap	r18
     cd6:	22 0f       	add	r18, r18
     cd8:	20 7e       	andi	r18, 0xE0	; 224
     cda:	fc 01       	movw	r30, r24
     cdc:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     cde:	86 ef       	ldi	r24, 0xF6	; 246
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	20 ee       	ldi	r18, 0xE0	; 224
     ce4:	fc 01       	movw	r30, r24
     ce6:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
     ce8:	87 ef       	ldi	r24, 0xF7	; 247
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	2f ef       	ldi	r18, 0xFF	; 255
     cee:	fc 01       	movw	r30, r24
     cf0:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     cf2:	8f ee       	ldi	r24, 0xEF	; 239
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	2f ee       	ldi	r18, 0xEF	; 239
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	f9 01       	movw	r30, r18
     cfc:	20 81       	ld	r18, Z
     cfe:	20 68       	ori	r18, 0x80	; 128
     d00:	fc 01       	movw	r30, r24
     d02:	20 83       	st	Z, r18

		CANPAGE = tempPage;
     d04:	8d ee       	ldi	r24, 0xED	; 237
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	2a 81       	ldd	r18, Y+2	; 0x02
     d0a:	fc 01       	movw	r30, r24
     d0c:	20 83       	st	Z, r18

		return 1;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <CAN_InitRxMob+0xf8>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	8f 30       	cpi	r24, 0x0F	; 15
     d16:	08 f4       	brcc	.+2      	; 0xd1a <CAN_InitRxMob+0xec>
     d18:	b3 cf       	rjmp	.-154    	; 0xc80 <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     d1a:	8d ee       	ldi	r24, 0xED	; 237
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	2a 81       	ldd	r18, Y+2	; 0x02
     d20:	fc 01       	movw	r30, r24
     d22:	20 83       	st	Z, r18

	return 0;
     d24:	80 e0       	ldi	r24, 0x00	; 0
}
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <CAN_Init+0xa>
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     d44:	0e 94 9c 05 	call	0xb38	; 0xb38 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     d48:	19 82       	std	Y+1, r1	; 0x01
     d4a:	30 c0       	rjmp	.+96     	; 0xdac <CAN_Init+0x78>
	{
		CAN_InitRxMob(i + 1);
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	0e 94 17 06 	call	0xc2e	; 0xc2e <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	8c 01       	movw	r16, r24
     d64:	02 5d       	subi	r16, 0xD2	; 210
     d66:	1e 4f       	sbci	r17, 0xFE	; 254
     d68:	61 e0       	ldi	r22, 0x01	; 1
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	85 e0       	ldi	r24, 0x05	; 5
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 26 20 	call	0x404c	; 0x404c <calloc>
     d74:	f8 01       	movw	r30, r16
     d76:	91 83       	std	Z+1, r25	; 0x01
     d78:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	29 81       	ldd	r18, Y+1	; 0x01
     d82:	22 2f       	mov	r18, r18
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	49 81       	ldd	r20, Y+1	; 0x01
     d88:	44 2f       	mov	r20, r20
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	4a 5a       	subi	r20, 0xAA	; 170
     d90:	5e 4f       	sbci	r21, 0xFE	; 254
     d92:	fa 01       	movw	r30, r20
     d94:	60 83       	st	Z, r22
     d96:	24 5b       	subi	r18, 0xB4	; 180
     d98:	3e 4f       	sbci	r19, 0xFE	; 254
     d9a:	f9 01       	movw	r30, r18
     d9c:	60 83       	st	Z, r22
     d9e:	8e 5b       	subi	r24, 0xBE	; 190
     da0:	9e 4f       	sbci	r25, 0xFE	; 254
     da2:	fc 01       	movw	r30, r24
     da4:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	8f 5f       	subi	r24, 0xFF	; 255
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	99 81       	ldd	r25, Y+1	; 0x01
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	98 17       	cp	r25, r24
     db2:	60 f2       	brcs	.-104    	; 0xd4c <CAN_Init+0x18>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	08 95       	ret

00000dc2 <CAN_CheckRX>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	1f 92       	push	r1
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	89 83       	std	Y+1, r24	; 0x01
	return rxCounter[nodeID - 1];
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	8a 5a       	subi	r24, 0xAA	; 170
     dd8:	9e 4f       	sbci	r25, 0xFE	; 254
     dda:	fc 01       	movw	r30, r24
     ddc:	80 81       	ld	r24, Z
}
     dde:	0f 90       	pop	r0
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	08 95       	ret

00000de6 <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	00 d0       	rcall	.+0      	; 0xdec <CAN_Read+0x6>
     dec:	00 d0       	rcall	.+0      	; 0xdee <CAN_Read+0x8>
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	9b 83       	std	Y+3, r25	; 0x03
     df4:	8a 83       	std	Y+2, r24	; 0x02
     df6:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
     df8:	84 e3       	ldi	r24, 0x34	; 52
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	2f ef       	ldi	r18, 0xFF	; 255
     dfe:	fc 01       	movw	r30, r24
     e00:	20 83       	st	Z, r18
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     e02:	00 00       	nop
     e04:	8c 81       	ldd	r24, Y+4	; 0x04
     e06:	88 2f       	mov	r24, r24
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	8a 5a       	subi	r24, 0xAA	; 170
     e0e:	9e 4f       	sbci	r25, 0xFE	; 254
     e10:	fc 01       	movw	r30, r24
     e12:	80 81       	ld	r24, Z
     e14:	88 23       	and	r24, r24
     e16:	b1 f3       	breq	.-20     	; 0xe04 <CAN_Read+0x1e>

	for(i = 0; i < 8; ++i)
     e18:	19 82       	std	Y+1, r1	; 0x01
     e1a:	2c c0       	rjmp	.+88     	; 0xe74 <CAN_Read+0x8e>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	2a 81       	ldd	r18, Y+2	; 0x02
     e24:	3b 81       	ldd	r19, Y+3	; 0x03
     e26:	82 0f       	add	r24, r18
     e28:	93 1f       	adc	r25, r19
     e2a:	2c 81       	ldd	r18, Y+4	; 0x04
     e2c:	22 2f       	mov	r18, r18
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	21 50       	subi	r18, 0x01	; 1
     e32:	30 48       	sbci	r19, 0x80	; 128
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	22 5d       	subi	r18, 0xD2	; 210
     e3a:	3e 4f       	sbci	r19, 0xFE	; 254
     e3c:	f9 01       	movw	r30, r18
     e3e:	40 81       	ld	r20, Z
     e40:	51 81       	ldd	r21, Z+1	; 0x01
     e42:	2c 81       	ldd	r18, Y+4	; 0x04
     e44:	22 2f       	mov	r18, r18
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	21 50       	subi	r18, 0x01	; 1
     e4a:	31 09       	sbc	r19, r1
     e4c:	24 5b       	subi	r18, 0xB4	; 180
     e4e:	3e 4f       	sbci	r19, 0xFE	; 254
     e50:	f9 01       	movw	r30, r18
     e52:	20 81       	ld	r18, Z
     e54:	62 2f       	mov	r22, r18
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	29 81       	ldd	r18, Y+1	; 0x01
     e5a:	22 2f       	mov	r18, r18
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	26 0f       	add	r18, r22
     e60:	37 1f       	adc	r19, r23
     e62:	24 0f       	add	r18, r20
     e64:	35 1f       	adc	r19, r21
     e66:	f9 01       	movw	r30, r18
     e68:	20 81       	ld	r18, Z
     e6a:	fc 01       	movw	r30, r24
     e6c:	20 83       	st	Z, r18
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	8f 5f       	subi	r24, 0xFF	; 255
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	88 30       	cpi	r24, 0x08	; 8
     e78:	88 f2       	brcs	.-94     	; 0xe1c <CAN_Read+0x36>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	88 2f       	mov	r24, r24
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	84 5b       	subi	r24, 0xB4	; 180
     e84:	9e 4f       	sbci	r25, 0xFE	; 254
     e86:	fc 01       	movw	r30, r24
     e88:	20 81       	ld	r18, Z
     e8a:	2f 5f       	subi	r18, 0xFF	; 255
     e8c:	fc 01       	movw	r30, r24
     e8e:	20 83       	st	Z, r18
     e90:	25 30       	cpi	r18, 0x05	; 5
     e92:	41 f4       	brne	.+16     	; 0xea4 <CAN_Read+0xbe>
	*(rxRdIndex + sendingNodeID - 1) = 0;
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	84 5b       	subi	r24, 0xB4	; 180
     e9e:	9e 4f       	sbci	r25, 0xFE	; 254
     ea0:	fc 01       	movw	r30, r24
     ea2:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     ea4:	8c 81       	ldd	r24, Y+4	; 0x04
     ea6:	88 2f       	mov	r24, r24
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	9c 01       	movw	r18, r24
     eae:	2a 5a       	subi	r18, 0xAA	; 170
     eb0:	3e 4f       	sbci	r19, 0xFE	; 254
     eb2:	f9 01       	movw	r30, r18
     eb4:	20 81       	ld	r18, Z
     eb6:	21 50       	subi	r18, 0x01	; 1
     eb8:	8a 5a       	subi	r24, 0xAA	; 170
     eba:	9e 4f       	sbci	r25, 0xFE	; 254
     ebc:	fc 01       	movw	r30, r24
     ebe:	20 83       	st	Z, r18

	return 0;
     ec0:	80 e0       	ldi	r24, 0x00	; 0
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	08 95       	ret

00000ed0 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <CAN_Write+0x6>
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <CAN_Write+0x8>
     ed8:	00 d0       	rcall	.+0      	; 0xeda <CAN_Write+0xa>
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	9d 83       	std	Y+5, r25	; 0x05
     ee0:	8c 83       	std	Y+4, r24	; 0x04
     ee2:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     ee4:	00 00       	nop
     ee6:	89 ed       	ldi	r24, 0xD9	; 217
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	fc 01       	movw	r30, r24
     eec:	80 81       	ld	r24, Z
     eee:	82 95       	swap	r24
     ef0:	8f 70       	andi	r24, 0x0F	; 15
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	81 70       	andi	r24, 0x01	; 1
     ef8:	99 27       	eor	r25, r25
     efa:	89 2b       	or	r24, r25
     efc:	a1 f7       	brne	.-24     	; 0xee6 <CAN_Write+0x16>
     efe:	89 ed       	ldi	r24, 0xD9	; 217
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	fc 01       	movw	r30, r24
     f04:	80 81       	ld	r24, Z
     f06:	86 95       	lsr	r24
     f08:	86 95       	lsr	r24
     f0a:	86 95       	lsr	r24
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	81 70       	andi	r24, 0x01	; 1
     f12:	99 27       	eor	r25, r25
     f14:	89 2b       	or	r24, r25
     f16:	39 f7       	brne	.-50     	; 0xee6 <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     f18:	8d ee       	ldi	r24, 0xED	; 237
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	fc 01       	movw	r30, r24
     f1e:	80 81       	ld	r24, Z
     f20:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
     f22:	1a 82       	std	Y+2, r1	; 0x02
     f24:	15 c0       	rjmp	.+42     	; 0xf50 <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
     f26:	8d ee       	ldi	r24, 0xED	; 237
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	2a 81       	ldd	r18, Y+2	; 0x02
     f2c:	22 95       	swap	r18
     f2e:	20 7f       	andi	r18, 0xF0	; 240
     f30:	fc 01       	movw	r30, r24
     f32:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
     f34:	8f ee       	ldi	r24, 0xEF	; 239
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	fc 01       	movw	r30, r24
     f3a:	80 81       	ld	r24, Z
     f3c:	82 95       	swap	r24
     f3e:	86 95       	lsr	r24
     f40:	86 95       	lsr	r24
     f42:	83 70       	andi	r24, 0x03	; 3
     f44:	88 23       	and	r24, r24
     f46:	09 f4       	brne	.+2      	; 0xf4a <CAN_Write+0x7a>
			break;
     f48:	06 c0       	rjmp	.+12     	; 0xf56 <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	8f 5f       	subi	r24, 0xFF	; 255
     f4e:	8a 83       	std	Y+2, r24	; 0x02
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	8f 30       	cpi	r24, 0x0F	; 15
     f54:	40 f3       	brcs	.-48     	; 0xf26 <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	8f 30       	cpi	r24, 0x0F	; 15
     f5a:	11 f4       	brne	.+4      	; 0xf60 <CAN_Write+0x90>
		return -1;
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	39 c0       	rjmp	.+114    	; 0xfd2 <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     f60:	82 ef       	ldi	r24, 0xF2	; 242
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	2e 81       	ldd	r18, Y+6	; 0x06
     f66:	22 95       	swap	r18
     f68:	22 0f       	add	r18, r18
     f6a:	20 7e       	andi	r18, 0xE0	; 224
     f6c:	fc 01       	movw	r30, r24
     f6e:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
     f70:	83 ef       	ldi	r24, 0xF3	; 243
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	2e 81       	ldd	r18, Y+6	; 0x06
     f76:	26 95       	lsr	r18
     f78:	26 95       	lsr	r18
     f7a:	26 95       	lsr	r18
     f7c:	fc 01       	movw	r30, r24
     f7e:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
     f80:	8f ee       	ldi	r24, 0xEF	; 239
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	28 e0       	ldi	r18, 0x08	; 8
     f86:	fc 01       	movw	r30, r24
     f88:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     f8a:	19 82       	std	Y+1, r1	; 0x01
     f8c:	10 c0       	rjmp	.+32     	; 0xfae <CAN_Write+0xde>
		CANMSG = data[i];
     f8e:	8a ef       	ldi	r24, 0xFA	; 250
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	29 81       	ldd	r18, Y+1	; 0x01
     f94:	22 2f       	mov	r18, r18
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	4c 81       	ldd	r20, Y+4	; 0x04
     f9a:	5d 81       	ldd	r21, Y+5	; 0x05
     f9c:	24 0f       	add	r18, r20
     f9e:	35 1f       	adc	r19, r21
     fa0:	f9 01       	movw	r30, r18
     fa2:	20 81       	ld	r18, Z
     fa4:	fc 01       	movw	r30, r24
     fa6:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	88 30       	cpi	r24, 0x08	; 8
     fb2:	68 f3       	brcs	.-38     	; 0xf8e <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     fb4:	8f ee       	ldi	r24, 0xEF	; 239
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	2f ee       	ldi	r18, 0xEF	; 239
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	f9 01       	movw	r30, r18
     fbe:	20 81       	ld	r18, Z
     fc0:	20 64       	ori	r18, 0x40	; 64
     fc2:	fc 01       	movw	r30, r24
     fc4:	20 83       	st	Z, r18

	CANPAGE = tempPage;
     fc6:	8d ee       	ldi	r24, 0xED	; 237
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	2b 81       	ldd	r18, Y+3	; 0x03
     fcc:	fc 01       	movw	r30, r24
     fce:	20 83       	st	Z, r18

	return 0;
     fd0:	80 e0       	ldi	r24, 0x00	; 0
}
     fd2:	26 96       	adiw	r28, 0x06	; 6
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <debug_init>:
#include "debug.h"

//pin and the starting state of debug pins
uint8_t debug_pins[5] = {48,49,50,51,52};

void debug_init() {
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62


}
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	08 95       	ret

00000ff2 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <__list_add+0x6>
     ff8:	00 d0       	rcall	.+0      	; 0xffa <__list_add+0x8>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <__list_add+0xa>
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	7c 83       	std	Y+4, r23	; 0x04
    1006:	6b 83       	std	Y+3, r22	; 0x03
    1008:	5e 83       	std	Y+6, r21	; 0x06
    100a:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    100c:	8d 81       	ldd	r24, Y+5	; 0x05
    100e:	9e 81       	ldd	r25, Y+6	; 0x06
    1010:	29 81       	ldd	r18, Y+1	; 0x01
    1012:	3a 81       	ldd	r19, Y+2	; 0x02
    1014:	fc 01       	movw	r30, r24
    1016:	31 83       	std	Z+1, r19	; 0x01
    1018:	20 83       	st	Z, r18
    new->next = next;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	9a 81       	ldd	r25, Y+2	; 0x02
    101e:	2d 81       	ldd	r18, Y+5	; 0x05
    1020:	3e 81       	ldd	r19, Y+6	; 0x06
    1022:	fc 01       	movw	r30, r24
    1024:	33 83       	std	Z+3, r19	; 0x03
    1026:	22 83       	std	Z+2, r18	; 0x02
    new->prev = prev;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	9a 81       	ldd	r25, Y+2	; 0x02
    102c:	2b 81       	ldd	r18, Y+3	; 0x03
    102e:	3c 81       	ldd	r19, Y+4	; 0x04
    1030:	fc 01       	movw	r30, r24
    1032:	31 83       	std	Z+1, r19	; 0x01
    1034:	20 83       	st	Z, r18
    prev->next = new;
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	9c 81       	ldd	r25, Y+4	; 0x04
    103a:	29 81       	ldd	r18, Y+1	; 0x01
    103c:	3a 81       	ldd	r19, Y+2	; 0x02
    103e:	fc 01       	movw	r30, r24
    1040:	33 83       	std	Z+3, r19	; 0x03
    1042:	22 83       	std	Z+2, r18	; 0x02
}
    1044:	26 96       	adiw	r28, 0x06	; 6
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <list_add>:

static inline void list_add(struct list_head* new, struct list_head* head)
{
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	00 d0       	rcall	.+0      	; 0x105c <list_add+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <list_add+0x8>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	9a 83       	std	Y+2, r25	; 0x02
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	7c 83       	std	Y+4, r23	; 0x04
    1068:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	fc 01       	movw	r30, r24
    1070:	42 81       	ldd	r20, Z+2	; 0x02
    1072:	53 81       	ldd	r21, Z+3	; 0x03
    1074:	2b 81       	ldd	r18, Y+3	; 0x03
    1076:	3c 81       	ldd	r19, Y+4	; 0x04
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	b9 01       	movw	r22, r18
    107e:	0e 94 f9 07 	call	0xff2	; 0xff2 <__list_add>
}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	2b 97       	sbiw	r28, 0x0b	; 11
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	89 87       	std	Y+9, r24	; 0x09
    10a6:	6a 87       	std	Y+10, r22	; 0x0a
    10a8:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    10aa:	80 91 0d 01 	lds	r24, 0x010D
    10ae:	90 91 0e 01 	lds	r25, 0x010E
    10b2:	9c 83       	std	Y+4, r25	; 0x04
    10b4:	8b 83       	std	Y+3, r24	; 0x03
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	05 97       	sbiw	r24, 0x05	; 5
    10bc:	9a 83       	std	Y+2, r25	; 0x02
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	15 c0       	rjmp	.+42     	; 0x10ec <gpio_register_pin+0x5c>
    {
        if(input->pin == pin)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
    10c6:	fc 01       	movw	r30, r24
    10c8:	90 81       	ld	r25, Z
    10ca:	89 85       	ldd	r24, Y+9	; 0x09
    10cc:	98 17       	cp	r25, r24
    10ce:	11 f4       	brne	.+4      	; 0x10d4 <gpio_register_pin+0x44>
            return 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	bc c0       	rjmp	.+376    	; 0x124c <__stack+0x14d>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	fc 01       	movw	r30, r24
    10da:	87 81       	ldd	r24, Z+7	; 0x07
    10dc:	90 85       	ldd	r25, Z+8	; 0x08
    10de:	9e 83       	std	Y+6, r25	; 0x06
    10e0:	8d 83       	std	Y+5, r24	; 0x05
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	05 97       	sbiw	r24, 0x05	; 5
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	05 96       	adiw	r24, 0x05	; 5
    10f2:	8b 50       	subi	r24, 0x0B	; 11
    10f4:	91 40       	sbci	r25, 0x01	; 1
    10f6:	29 f7       	brne	.-54     	; 0x10c2 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    10f8:	89 85       	ldd	r24, Y+9	; 0x09
    10fa:	86 95       	lsr	r24
    10fc:	86 95       	lsr	r24
    10fe:	86 95       	lsr	r24
    1100:	8f 5f       	subi	r24, 0xFF	; 255
    1102:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t pin_reg = pin % 8;
    1104:	89 85       	ldd	r24, Y+9	; 0x09
    1106:	87 70       	andi	r24, 0x07	; 7
    1108:	88 87       	std	Y+8, r24	; 0x08
	if(direction == GPIO_DIRECTION_OUTPUT)
    110a:	8a 85       	ldd	r24, Y+10	; 0x0a
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	09 f0       	breq	.+2      	; 0x1112 <__stack+0x13>
    1110:	55 c0       	rjmp	.+170    	; 0x11bc <__stack+0xbd>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    1112:	8f 81       	ldd	r24, Y+7	; 0x07
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	9c 01       	movw	r18, r24
    111a:	21 50       	subi	r18, 0x01	; 1
    111c:	31 09       	sbc	r19, r1
    111e:	c9 01       	movw	r24, r18
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	82 0f       	add	r24, r18
    1126:	93 1f       	adc	r25, r19
    1128:	81 96       	adiw	r24, 0x21	; 33
    112a:	ac 01       	movw	r20, r24
    112c:	8f 81       	ldd	r24, Y+7	; 0x07
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	9c 01       	movw	r18, r24
    1134:	21 50       	subi	r18, 0x01	; 1
    1136:	31 09       	sbc	r19, r1
    1138:	c9 01       	movw	r24, r18
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	82 0f       	add	r24, r18
    1140:	93 1f       	adc	r25, r19
    1142:	81 96       	adiw	r24, 0x21	; 33
    1144:	fc 01       	movw	r30, r24
    1146:	80 81       	ld	r24, Z
    1148:	68 2f       	mov	r22, r24
    114a:	88 85       	ldd	r24, Y+8	; 0x08
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	02 c0       	rjmp	.+4      	; 0x115a <__stack+0x5b>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	2a 95       	dec	r18
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <__stack+0x57>
    115e:	86 2b       	or	r24, r22
    1160:	fa 01       	movw	r30, r20
    1162:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1164:	8f 81       	ldd	r24, Y+7	; 0x07
    1166:	88 2f       	mov	r24, r24
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	9c 01       	movw	r18, r24
    116c:	21 50       	subi	r18, 0x01	; 1
    116e:	31 09       	sbc	r19, r1
    1170:	c9 01       	movw	r24, r18
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	82 0f       	add	r24, r18
    1178:	93 1f       	adc	r25, r19
    117a:	82 96       	adiw	r24, 0x22	; 34
    117c:	ac 01       	movw	r20, r24
    117e:	8f 81       	ldd	r24, Y+7	; 0x07
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	9c 01       	movw	r18, r24
    1186:	21 50       	subi	r18, 0x01	; 1
    1188:	31 09       	sbc	r19, r1
    118a:	c9 01       	movw	r24, r18
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	82 0f       	add	r24, r18
    1192:	93 1f       	adc	r25, r19
    1194:	82 96       	adiw	r24, 0x22	; 34
    1196:	fc 01       	movw	r30, r24
    1198:	80 81       	ld	r24, Z
    119a:	68 2f       	mov	r22, r24
    119c:	88 85       	ldd	r24, Y+8	; 0x08
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <__stack+0xad>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	2a 95       	dec	r18
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <__stack+0xa9>
    11b0:	80 95       	com	r24
    11b2:	86 23       	and	r24, r22
    11b4:	fa 01       	movw	r30, r20
    11b6:	80 83       	st	Z, r24
        return 0;
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	48 c0       	rjmp	.+144    	; 0x124c <__stack+0x14d>
	}
	else
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    11bc:	8f 81       	ldd	r24, Y+7	; 0x07
    11be:	88 2f       	mov	r24, r24
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	9c 01       	movw	r18, r24
    11c4:	21 50       	subi	r18, 0x01	; 1
    11c6:	31 09       	sbc	r19, r1
    11c8:	c9 01       	movw	r24, r18
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	82 0f       	add	r24, r18
    11d0:	93 1f       	adc	r25, r19
    11d2:	81 96       	adiw	r24, 0x21	; 33
    11d4:	ac 01       	movw	r20, r24
    11d6:	8f 81       	ldd	r24, Y+7	; 0x07
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	9c 01       	movw	r18, r24
    11de:	21 50       	subi	r18, 0x01	; 1
    11e0:	31 09       	sbc	r19, r1
    11e2:	c9 01       	movw	r24, r18
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	82 0f       	add	r24, r18
    11ea:	93 1f       	adc	r25, r19
    11ec:	81 96       	adiw	r24, 0x21	; 33
    11ee:	fc 01       	movw	r30, r24
    11f0:	80 81       	ld	r24, Z
    11f2:	68 2f       	mov	r22, r24
    11f4:	88 85       	ldd	r24, Y+8	; 0x08
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <__stack+0x105>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	2a 95       	dec	r18
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <__stack+0x101>
    1208:	80 95       	com	r24
    120a:	86 23       	and	r24, r22
    120c:	fa 01       	movw	r30, r20
    120e:	80 83       	st	Z, r24

    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1210:	89 e0       	ldi	r24, 0x09	; 9
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 42 20 	call	0x4084	; 0x4084 <malloc>
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	89 83       	std	Y+1, r24	; 0x01
    if(input == NULL)
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	9a 81       	ldd	r25, Y+2	; 0x02
    1220:	89 2b       	or	r24, r25
    1222:	11 f4       	brne	.+4      	; 0x1228 <__stack+0x129>
        return 1;
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	12 c0       	rjmp	.+36     	; 0x124c <__stack+0x14d>

    input->pin       = pin;
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	29 85       	ldd	r18, Y+9	; 0x09
    122e:	fc 01       	movw	r30, r24
    1230:	20 83       	st	Z, r18
    input->pulled_up = pulled_up;
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	2b 85       	ldd	r18, Y+11	; 0x0b
    1238:	fc 01       	movw	r30, r24
    123a:	21 83       	std	Z+1, r18	; 0x01
    list_add(&input->list, &gpio_inputs);
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	05 96       	adiw	r24, 0x05	; 5
    1242:	6b e0       	ldi	r22, 0x0B	; 11
    1244:	71 e0       	ldi	r23, 0x01	; 1
    1246:	0e 94 2b 08 	call	0x1056	; 0x1056 <list_add>

    return 0;
    124a:	80 e0       	ldi	r24, 0x00	; 0
}
    124c:	2b 96       	adiw	r28, 0x0b	; 11
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	00 d0       	rcall	.+0      	; 0x1264 <gpio_write_pin+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <gpio_write_pin+0x8>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	8b 83       	std	Y+3, r24	; 0x03
    126c:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	86 95       	lsr	r24
    1272:	86 95       	lsr	r24
    1274:	86 95       	lsr	r24
    1276:	8f 5f       	subi	r24, 0xFF	; 255
    1278:	89 83       	std	Y+1, r24	; 0x01
	pin = pin % 8;
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	87 70       	andi	r24, 0x07	; 7
    127e:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	9c 01       	movw	r18, r24
    1288:	21 50       	subi	r18, 0x01	; 1
    128a:	31 09       	sbc	r19, r1
    128c:	c9 01       	movw	r24, r18
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	82 0f       	add	r24, r18
    1294:	93 1f       	adc	r25, r19
    1296:	82 96       	adiw	r24, 0x22	; 34
    1298:	fc 01       	movw	r30, r24
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	a2 81       	ldd	r26, Z+2	; 0x02
    12a0:	b3 81       	ldd	r27, Z+3	; 0x03
    12a2:	8a 83       	std	Y+2, r24	; 0x02
	if(value != 0)
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	88 23       	and	r24, r24
    12a8:	31 f1       	breq	.+76     	; 0x12f6 <gpio_write_pin+0x98>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	88 2f       	mov	r24, r24
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9c 01       	movw	r18, r24
    12b2:	21 50       	subi	r18, 0x01	; 1
    12b4:	31 09       	sbc	r19, r1
    12b6:	c9 01       	movw	r24, r18
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	82 0f       	add	r24, r18
    12be:	93 1f       	adc	r25, r19
    12c0:	82 96       	adiw	r24, 0x22	; 34
    12c2:	ac 01       	movw	r20, r24
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	68 2f       	mov	r22, r24
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <gpio_write_pin+0x7c>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	6a 95       	dec	r22
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <gpio_write_pin+0x78>
    12de:	82 2b       	or	r24, r18
    12e0:	93 2b       	or	r25, r19
    12e2:	09 2e       	mov	r0, r25
    12e4:	00 0c       	add	r0, r0
    12e6:	aa 0b       	sbc	r26, r26
    12e8:	bb 0b       	sbc	r27, r27
    12ea:	fa 01       	movw	r30, r20
    12ec:	80 83       	st	Z, r24
    12ee:	91 83       	std	Z+1, r25	; 0x01
    12f0:	a2 83       	std	Z+2, r26	; 0x02
    12f2:	b3 83       	std	Z+3, r27	; 0x03
    12f4:	27 c0       	rjmp	.+78     	; 0x1344 <gpio_write_pin+0xe6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	9c 01       	movw	r18, r24
    12fe:	21 50       	subi	r18, 0x01	; 1
    1300:	31 09       	sbc	r19, r1
    1302:	c9 01       	movw	r24, r18
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	82 0f       	add	r24, r18
    130a:	93 1f       	adc	r25, r19
    130c:	82 96       	adiw	r24, 0x22	; 34
    130e:	ac 01       	movw	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	68 2f       	mov	r22, r24
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <gpio_write_pin+0xc8>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	6a 95       	dec	r22
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <gpio_write_pin+0xc4>
    132a:	80 95       	com	r24
    132c:	90 95       	com	r25
    132e:	82 23       	and	r24, r18
    1330:	93 23       	and	r25, r19
    1332:	09 2e       	mov	r0, r25
    1334:	00 0c       	add	r0, r0
    1336:	aa 0b       	sbc	r26, r26
    1338:	bb 0b       	sbc	r27, r27
    133a:	fa 01       	movw	r30, r20
    133c:	80 83       	st	Z, r24
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	a2 83       	std	Z+2, r26	; 0x02
    1342:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    1344:	80 e0       	ldi	r24, 0x00	; 0
}
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	08 95       	ret

00001354 <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	00 d0       	rcall	.+0      	; 0x135a <__gpio_read_pin+0x6>
    135a:	1f 92       	push	r1
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	86 95       	lsr	r24
    1366:	86 95       	lsr	r24
    1368:	86 95       	lsr	r24
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	87 70       	andi	r24, 0x07	; 7
    1372:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	9c 01       	movw	r18, r24
    137c:	21 50       	subi	r18, 0x01	; 1
    137e:	31 09       	sbc	r19, r1
    1380:	c9 01       	movw	r24, r18
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	82 0f       	add	r24, r18
    1388:	93 1f       	adc	r25, r19
    138a:	80 96       	adiw	r24, 0x20	; 32
    138c:	fc 01       	movw	r30, r24
    138e:	80 81       	ld	r24, Z
    1390:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	2b 81       	ldd	r18, Y+3	; 0x03
    139a:	22 2f       	mov	r18, r18
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <__gpio_read_pin+0x50>
    13a0:	95 95       	asr	r25
    13a2:	87 95       	ror	r24
    13a4:	2a 95       	dec	r18
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <__gpio_read_pin+0x4c>
    13a8:	81 70       	andi	r24, 0x01	; 1
}
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	08 95       	ret

000013b6 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	29 97       	sbiw	r28, 0x09	; 9
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13cc:	80 91 0d 01 	lds	r24, 0x010D
    13d0:	90 91 0e 01 	lds	r25, 0x010E
    13d4:	9d 83       	std	Y+5, r25	; 0x05
    13d6:	8c 83       	std	Y+4, r24	; 0x04
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	05 97       	sbiw	r24, 0x05	; 5
    13de:	9a 83       	std	Y+2, r25	; 0x02
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	55 c0       	rjmp	.+170    	; 0x148e <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	9a 81       	ldd	r25, Y+2	; 0x02
    13e8:	fc 01       	movw	r30, r24
    13ea:	90 81       	ld	r25, Z
    13ec:	89 85       	ldd	r24, Y+9	; 0x09
    13ee:	98 17       	cp	r25, r24
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <gpio_read_pin+0x3e>
    13f2:	41 c0       	rjmp	.+130    	; 0x1476 <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
    13f4:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    13f6:	1f c0       	rjmp	.+62     	; 0x1436 <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	29 81       	ldd	r18, Y+1	; 0x01
    1400:	3a 81       	ldd	r19, Y+2	; 0x02
    1402:	82 0f       	add	r24, r18
    1404:	93 1f       	adc	r25, r19
    1406:	02 96       	adiw	r24, 0x02	; 2
    1408:	fc 01       	movw	r30, r24
    140a:	40 81       	ld	r20, Z
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	01 96       	adiw	r24, 0x01	; 1
    1414:	29 81       	ldd	r18, Y+1	; 0x01
    1416:	3a 81       	ldd	r19, Y+2	; 0x02
    1418:	82 0f       	add	r24, r18
    141a:	93 1f       	adc	r25, r19
    141c:	02 96       	adiw	r24, 0x02	; 2
    141e:	fc 01       	movw	r30, r24
    1420:	80 81       	ld	r24, Z
    1422:	48 17       	cp	r20, r24
    1424:	29 f0       	breq	.+10     	; 0x1430 <gpio_read_pin+0x7a>
                    return input->previous_state;
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	9a 81       	ldd	r25, Y+2	; 0x02
    142a:	fc 01       	movw	r30, r24
    142c:	84 81       	ldd	r24, Z+4	; 0x04
    142e:	37 c0       	rjmp	.+110    	; 0x149e <gpio_read_pin+0xe8>
                i++;
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	8f 5f       	subi	r24, 0xFF	; 255
    1434:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	88 23       	and	r24, r24
    143a:	f1 f2       	breq	.-68     	; 0x13f8 <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
    1440:	fc 01       	movw	r30, r24
    1442:	91 81       	ldd	r25, Z+1	; 0x01
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	89 27       	eor	r24, r25
    1448:	88 23       	and	r24, r24
    144a:	29 f0       	breq	.+10     	; 0x1456 <gpio_read_pin+0xa0>
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	fc 01       	movw	r30, r24
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	08 c0       	rjmp	.+16     	; 0x1466 <gpio_read_pin+0xb0>
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	9a 81       	ldd	r25, Y+2	; 0x02
    145a:	fc 01       	movw	r30, r24
    145c:	92 81       	ldd	r25, Z+2	; 0x02
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	99 23       	and	r25, r25
    1462:	09 f0       	breq	.+2      	; 0x1466 <gpio_read_pin+0xb0>
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	9a 81       	ldd	r25, Y+2	; 0x02
    146c:	28 85       	ldd	r18, Y+8	; 0x08
    146e:	fc 01       	movw	r30, r24
    1470:	24 83       	std	Z+4, r18	; 0x04

            return state;
    1472:	88 85       	ldd	r24, Y+8	; 0x08
    1474:	14 c0       	rjmp	.+40     	; 0x149e <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	9a 81       	ldd	r25, Y+2	; 0x02
    147a:	fc 01       	movw	r30, r24
    147c:	87 81       	ldd	r24, Z+7	; 0x07
    147e:	90 85       	ldd	r25, Z+8	; 0x08
    1480:	9f 83       	std	Y+7, r25	; 0x07
    1482:	8e 83       	std	Y+6, r24	; 0x06
    1484:	8e 81       	ldd	r24, Y+6	; 0x06
    1486:	9f 81       	ldd	r25, Y+7	; 0x07
    1488:	05 97       	sbiw	r24, 0x05	; 5
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	9a 81       	ldd	r25, Y+2	; 0x02
    1492:	05 96       	adiw	r24, 0x05	; 5
    1494:	8b 50       	subi	r24, 0x0B	; 11
    1496:	91 40       	sbci	r25, 0x01	; 1
    1498:	09 f0       	breq	.+2      	; 0x149c <gpio_read_pin+0xe6>
    149a:	a4 cf       	rjmp	.-184    	; 0x13e4 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    149c:	81 e0       	ldi	r24, 0x01	; 1
}
    149e:	29 96       	adiw	r28, 0x09	; 9
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	08 95       	ret

000014b0 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <gpio_debouncer+0xa>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <gpio_debouncer+0xc>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <gpio_debouncer+0xe>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    14c2:	80 91 0d 01 	lds	r24, 0x010D
    14c6:	90 91 0e 01 	lds	r25, 0x010E
    14ca:	9c 83       	std	Y+4, r25	; 0x04
    14cc:	8b 83       	std	Y+3, r24	; 0x03
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	05 97       	sbiw	r24, 0x05	; 5
    14d4:	9a 83       	std	Y+2, r25	; 0x02
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	1e c0       	rjmp	.+60     	; 0x1516 <gpio_debouncer+0x66>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    14da:	00 91 62 01 	lds	r16, 0x0162
    14de:	10 91 63 01 	lds	r17, 0x0163
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	9a 81       	ldd	r25, Y+2	; 0x02
    14e6:	fc 01       	movw	r30, r24
    14e8:	80 81       	ld	r24, Z
    14ea:	0e 94 aa 09 	call	0x1354	; 0x1354 <__gpio_read_pin>
    14ee:	28 2f       	mov	r18, r24
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	80 0f       	add	r24, r16
    14f6:	91 1f       	adc	r25, r17
    14f8:	02 96       	adiw	r24, 0x02	; 2
    14fa:	fc 01       	movw	r30, r24
    14fc:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	fc 01       	movw	r30, r24
    1504:	87 81       	ldd	r24, Z+7	; 0x07
    1506:	90 85       	ldd	r25, Z+8	; 0x08
    1508:	9e 83       	std	Y+6, r25	; 0x06
    150a:	8d 83       	std	Y+5, r24	; 0x05
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	05 97       	sbiw	r24, 0x05	; 5
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	9a 81       	ldd	r25, Y+2	; 0x02
    151a:	05 96       	adiw	r24, 0x05	; 5
    151c:	8b 50       	subi	r24, 0x0B	; 11
    151e:	91 40       	sbci	r25, 0x01	; 1
    1520:	e1 f6       	brne	.-72     	; 0x14da <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1522:	80 91 62 01 	lds	r24, 0x0162
    1526:	90 91 63 01 	lds	r25, 0x0163
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	90 93 63 01 	sts	0x0163, r25
    1530:	80 93 62 01 	sts	0x0162, r24
    1534:	02 97       	sbiw	r24, 0x02	; 2
    1536:	21 f4       	brne	.+8      	; 0x1540 <gpio_debouncer+0x90>
        count = 0;
    1538:	10 92 63 01 	sts	0x0163, r1
    153c:	10 92 62 01 	sts	0x0162, r1

}
    1540:	26 96       	adiw	r28, 0x06	; 6
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	08 95       	ret

00001556 <odometry_set_speed>:
 * 	void odometry_set_speed(uint8_t speed)
 *
 * 	Send odometry board the max speed
 */
void odometry_set_speed(uint8_t speed)
{
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	67 97       	sbiw	r28, 0x17	; 23
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    156c:	80 91 64 01 	lds	r24, 0x0164
    1570:	9f 89       	ldd	r25, Y+23	; 0x17
    1572:	98 17       	cp	r25, r24
    1574:	09 f4       	brne	.+2      	; 0x1578 <odometry_set_speed+0x22>
    1576:	82 c0       	rjmp	.+260    	; 0x167c <odometry_set_speed+0x126>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1578:	86 e5       	ldi	r24, 0x56	; 86
    157a:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    157c:	8f 89       	ldd	r24, Y+23	; 0x17
    157e:	88 8b       	std	Y+16, r24	; 0x10
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1580:	72 c0       	rjmp	.+228    	; 0x1666 <odometry_set_speed+0x110>
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	a8 e4       	ldi	r26, 0x48	; 72
    1588:	b2 e4       	ldi	r27, 0x42	; 66
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	9a 83       	std	Y+2, r25	; 0x02
    158e:	ab 83       	std	Y+3, r26	; 0x03
    1590:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e4       	ldi	r19, 0x40	; 64
    1596:	4c e1       	ldi	r20, 0x1C	; 28
    1598:	55 e4       	ldi	r21, 0x45	; 69
    159a:	69 81       	ldd	r22, Y+1	; 0x01
    159c:	7a 81       	ldd	r23, Y+2	; 0x02
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	8d 83       	std	Y+5, r24	; 0x05
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	af 83       	std	Y+7, r26	; 0x07
    15b0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	6d 81       	ldd	r22, Y+5	; 0x05
    15bc:	7e 81       	ldd	r23, Y+6	; 0x06
    15be:	8f 81       	ldd	r24, Y+7	; 0x07
    15c0:	98 85       	ldd	r25, Y+8	; 0x08
    15c2:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    15c6:	88 23       	and	r24, r24
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <odometry_set_speed+0x7e>
		__ticks = 1;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9a 87       	std	Y+10, r25	; 0x0a
    15d0:	89 87       	std	Y+9, r24	; 0x09
    15d2:	3f c0       	rjmp	.+126    	; 0x1652 <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	3f ef       	ldi	r19, 0xFF	; 255
    15d8:	4f e7       	ldi	r20, 0x7F	; 127
    15da:	57 e4       	ldi	r21, 0x47	; 71
    15dc:	6d 81       	ldd	r22, Y+5	; 0x05
    15de:	7e 81       	ldd	r23, Y+6	; 0x06
    15e0:	8f 81       	ldd	r24, Y+7	; 0x07
    15e2:	98 85       	ldd	r25, Y+8	; 0x08
    15e4:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    15e8:	18 16       	cp	r1, r24
    15ea:	4c f5       	brge	.+82     	; 0x163e <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	69 81       	ldd	r22, Y+1	; 0x01
    15f6:	7a 81       	ldd	r23, Y+2	; 0x02
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	9a 87       	std	Y+10, r25	; 0x0a
    1612:	89 87       	std	Y+9, r24	; 0x09
    1614:	0f c0       	rjmp	.+30     	; 0x1634 <odometry_set_speed+0xde>
    1616:	8a ef       	ldi	r24, 0xFA	; 250
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	9c 87       	std	Y+12, r25	; 0x0c
    161c:	8b 87       	std	Y+11, r24	; 0x0b
    161e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1620:	9c 85       	ldd	r25, Y+12	; 0x0c
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <odometry_set_speed+0xcc>
    1626:	9c 87       	std	Y+12, r25	; 0x0c
    1628:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162a:	89 85       	ldd	r24, Y+9	; 0x09
    162c:	9a 85       	ldd	r25, Y+10	; 0x0a
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	9a 87       	std	Y+10, r25	; 0x0a
    1632:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1634:	89 85       	ldd	r24, Y+9	; 0x09
    1636:	9a 85       	ldd	r25, Y+10	; 0x0a
    1638:	89 2b       	or	r24, r25
    163a:	69 f7       	brne	.-38     	; 0x1616 <odometry_set_speed+0xc0>
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163e:	6d 81       	ldd	r22, Y+5	; 0x05
    1640:	7e 81       	ldd	r23, Y+6	; 0x06
    1642:	8f 81       	ldd	r24, Y+7	; 0x07
    1644:	98 85       	ldd	r25, Y+8	; 0x08
    1646:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9a 87       	std	Y+10, r25	; 0x0a
    1650:	89 87       	std	Y+9, r24	; 0x09
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	9a 85       	ldd	r25, Y+10	; 0x0a
    1656:	9e 87       	std	Y+14, r25	; 0x0e
    1658:	8d 87       	std	Y+13, r24	; 0x0d
    165a:	8d 85       	ldd	r24, Y+13	; 0x0d
    165c:	9e 85       	ldd	r25, Y+14	; 0x0e
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <odometry_set_speed+0x108>
    1662:	9e 87       	std	Y+14, r25	; 0x0e
    1664:	8d 87       	std	Y+13, r24	; 0x0d
    1666:	ce 01       	movw	r24, r28
    1668:	0f 96       	adiw	r24, 0x0f	; 15
    166a:	63 ec       	ldi	r22, 0xC3	; 195
    166c:	0e 94 68 07 	call	0xed0	; 0xed0 <CAN_Write>
    1670:	88 23       	and	r24, r24
    1672:	09 f0       	breq	.+2      	; 0x1676 <odometry_set_speed+0x120>
    1674:	86 cf       	rjmp	.-244    	; 0x1582 <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    1676:	8f 89       	ldd	r24, Y+23	; 0x17
    1678:	80 93 64 01 	sts	0x0164, r24
}
    167c:	67 96       	adiw	r28, 0x17	; 23
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	08 95       	ret

0000168e <odometry_query_position>:
 * 	void odometry_query_position(void)
 *
 * 	Get the current position. Update it to position
 */
void odometry_query_position(void)
{
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	66 97       	sbiw	r28, 0x16	; 22
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    16a2:	80 e5       	ldi	r24, 0x50	; 80
    16a4:	8f 87       	std	Y+15, r24	; 0x0f
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    16a6:	72 c0       	rjmp	.+228    	; 0x178c <odometry_query_position+0xfe>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	a8 e4       	ldi	r26, 0x48	; 72
    16ae:	b2 e4       	ldi	r27, 0x42	; 66
    16b0:	89 83       	std	Y+1, r24	; 0x01
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	ab 83       	std	Y+3, r26	; 0x03
    16b6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e4       	ldi	r19, 0x40	; 64
    16bc:	4c e1       	ldi	r20, 0x1C	; 28
    16be:	55 e4       	ldi	r21, 0x45	; 69
    16c0:	69 81       	ldd	r22, Y+1	; 0x01
    16c2:	7a 81       	ldd	r23, Y+2	; 0x02
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	9e 83       	std	Y+6, r25	; 0x06
    16d4:	af 83       	std	Y+7, r26	; 0x07
    16d6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e8       	ldi	r20, 0x80	; 128
    16de:	5f e3       	ldi	r21, 0x3F	; 63
    16e0:	6d 81       	ldd	r22, Y+5	; 0x05
    16e2:	7e 81       	ldd	r23, Y+6	; 0x06
    16e4:	8f 81       	ldd	r24, Y+7	; 0x07
    16e6:	98 85       	ldd	r25, Y+8	; 0x08
    16e8:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	2c f4       	brge	.+10     	; 0x16fa <odometry_query_position+0x6c>
		__ticks = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9a 87       	std	Y+10, r25	; 0x0a
    16f6:	89 87       	std	Y+9, r24	; 0x09
    16f8:	3f c0       	rjmp	.+126    	; 0x1778 <odometry_query_position+0xea>
	else if (__tmp > 65535)
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	3f ef       	ldi	r19, 0xFF	; 255
    16fe:	4f e7       	ldi	r20, 0x7F	; 127
    1700:	57 e4       	ldi	r21, 0x47	; 71
    1702:	6d 81       	ldd	r22, Y+5	; 0x05
    1704:	7e 81       	ldd	r23, Y+6	; 0x06
    1706:	8f 81       	ldd	r24, Y+7	; 0x07
    1708:	98 85       	ldd	r25, Y+8	; 0x08
    170a:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    170e:	18 16       	cp	r1, r24
    1710:	4c f5       	brge	.+82     	; 0x1764 <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e2       	ldi	r20, 0x20	; 32
    1718:	51 e4       	ldi	r21, 0x41	; 65
    171a:	69 81       	ldd	r22, Y+1	; 0x01
    171c:	7a 81       	ldd	r23, Y+2	; 0x02
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9a 87       	std	Y+10, r25	; 0x0a
    1738:	89 87       	std	Y+9, r24	; 0x09
    173a:	0f c0       	rjmp	.+30     	; 0x175a <odometry_query_position+0xcc>
    173c:	8a ef       	ldi	r24, 0xFA	; 250
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	9c 87       	std	Y+12, r25	; 0x0c
    1742:	8b 87       	std	Y+11, r24	; 0x0b
    1744:	8b 85       	ldd	r24, Y+11	; 0x0b
    1746:	9c 85       	ldd	r25, Y+12	; 0x0c
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <odometry_query_position+0xba>
    174c:	9c 87       	std	Y+12, r25	; 0x0c
    174e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1750:	89 85       	ldd	r24, Y+9	; 0x09
    1752:	9a 85       	ldd	r25, Y+10	; 0x0a
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	9a 87       	std	Y+10, r25	; 0x0a
    1758:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175a:	89 85       	ldd	r24, Y+9	; 0x09
    175c:	9a 85       	ldd	r25, Y+10	; 0x0a
    175e:	89 2b       	or	r24, r25
    1760:	69 f7       	brne	.-38     	; 0x173c <odometry_query_position+0xae>
    1762:	14 c0       	rjmp	.+40     	; 0x178c <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1764:	6d 81       	ldd	r22, Y+5	; 0x05
    1766:	7e 81       	ldd	r23, Y+6	; 0x06
    1768:	8f 81       	ldd	r24, Y+7	; 0x07
    176a:	98 85       	ldd	r25, Y+8	; 0x08
    176c:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9a 87       	std	Y+10, r25	; 0x0a
    1776:	89 87       	std	Y+9, r24	; 0x09
    1778:	89 85       	ldd	r24, Y+9	; 0x09
    177a:	9a 85       	ldd	r25, Y+10	; 0x0a
    177c:	9e 87       	std	Y+14, r25	; 0x0e
    177e:	8d 87       	std	Y+13, r24	; 0x0d
    1780:	8d 85       	ldd	r24, Y+13	; 0x0d
    1782:	9e 85       	ldd	r25, Y+14	; 0x0e
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <odometry_query_position+0xf6>
    1788:	9e 87       	std	Y+14, r25	; 0x0e
    178a:	8d 87       	std	Y+13, r24	; 0x0d
    178c:	ce 01       	movw	r24, r28
    178e:	0f 96       	adiw	r24, 0x0f	; 15
    1790:	63 ec       	ldi	r22, 0xC3	; 195
    1792:	0e 94 68 07 	call	0xed0	; 0xed0 <CAN_Write>
    1796:	88 23       	and	r24, r24
    1798:	09 f0       	breq	.+2      	; 0x179c <odometry_query_position+0x10e>
    179a:	86 cf       	rjmp	.-244    	; 0x16a8 <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    179c:	ce 01       	movw	r24, r28
    179e:	0f 96       	adiw	r24, 0x0f	; 15
    17a0:	61 e0       	ldi	r22, 0x01	; 1
    17a2:	0e 94 f3 06 	call	0xde6	; 0xde6 <CAN_Read>

	position.state = buffer[0];
    17a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a8:	80 93 15 01 	sts	0x0115, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    17ac:	88 89       	ldd	r24, Y+16	; 0x10
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	38 2f       	mov	r19, r24
    17b4:	22 27       	eor	r18, r18
    17b6:	89 89       	ldd	r24, Y+17	; 0x11
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	82 2b       	or	r24, r18
    17be:	93 2b       	or	r25, r19
    17c0:	90 93 10 01 	sts	0x0110, r25
    17c4:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    17c8:	8a 89       	ldd	r24, Y+18	; 0x12
    17ca:	88 2f       	mov	r24, r24
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	38 2f       	mov	r19, r24
    17d0:	22 27       	eor	r18, r18
    17d2:	8b 89       	ldd	r24, Y+19	; 0x13
    17d4:	88 2f       	mov	r24, r24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	82 2b       	or	r24, r18
    17da:	93 2b       	or	r25, r19
    17dc:	90 93 12 01 	sts	0x0112, r25
    17e0:	80 93 11 01 	sts	0x0111, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    17e4:	8c 89       	ldd	r24, Y+20	; 0x14
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	38 2f       	mov	r19, r24
    17ec:	22 27       	eor	r18, r18
    17ee:	8d 89       	ldd	r24, Y+21	; 0x15
    17f0:	88 2f       	mov	r24, r24
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	82 2b       	or	r24, r18
    17f6:	93 2b       	or	r25, r19
    17f8:	90 93 14 01 	sts	0x0114, r25
    17fc:	80 93 13 01 	sts	0x0113, r24
}
    1800:	66 96       	adiw	r28, 0x16	; 22
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	08 95       	ret

00001812 <odometry_wait_until_done>:
 * 	static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
 *
 * 	Callback function, execute function while odometry is moving
 */
static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	00 d0       	rcall	.+0      	; 0x1818 <odometry_wait_until_done+0x6>
    1818:	00 d0       	rcall	.+0      	; 0x181a <odometry_wait_until_done+0x8>
    181a:	00 d0       	rcall	.+0      	; 0x181c <odometry_wait_until_done+0xa>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    1824:	0e 94 46 13 	call	0x268c	; 0x268c <system_get_system_time>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	ab 83       	std	Y+3, r26	; 0x03
    1832:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    1834:	0e 94 47 0b 	call	0x168e	; 0x168e <odometry_query_position>
		if(callback != NULL)
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	89 2b       	or	r24, r25
    183e:	71 f0       	breq	.+28     	; 0x185c <odometry_wait_until_done+0x4a>
		{
			if(callback(time) == 1)
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	9a 81       	ldd	r25, Y+2	; 0x02
    1844:	ab 81       	ldd	r26, Y+3	; 0x03
    1846:	bc 81       	ldd	r27, Y+4	; 0x04
    1848:	2d 81       	ldd	r18, Y+5	; 0x05
    184a:	3e 81       	ldd	r19, Y+6	; 0x06
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	f9 01       	movw	r30, r18
    1852:	09 95       	icall
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	11 f4       	brne	.+4      	; 0x185c <odometry_wait_until_done+0x4a>
				return ODOMETRY_FAIL;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	09 c0       	rjmp	.+18     	; 0x186e <odometry_wait_until_done+0x5c>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    185c:	80 91 15 01 	lds	r24, 0x0115
    1860:	8d 34       	cpi	r24, 0x4D	; 77
    1862:	41 f3       	breq	.-48     	; 0x1834 <odometry_wait_until_done+0x22>
    1864:	80 91 15 01 	lds	r24, 0x0115
    1868:	82 35       	cpi	r24, 0x52	; 82
    186a:	21 f3       	breq	.-56     	; 0x1834 <odometry_wait_until_done+0x22>

	return ODOMETRY_SUCCESS;
    186c:	80 e0       	ldi	r24, 0x00	; 0
}
    186e:	26 96       	adiw	r28, 0x06	; 6
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <odometry_stop>:
 * 	void odometry_stop(int8_t type)
 *
 * 	Send stop to odometry
 */
void odometry_stop(int8_t type)
{
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	67 97       	sbiw	r28, 0x17	; 23
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    1896:	8f 89       	ldd	r24, Y+23	; 0x17
    1898:	8f 87       	std	Y+15, r24	; 0x0f

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    189a:	72 c0       	rjmp	.+228    	; 0x1980 <odometry_stop+0x100>
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a8 e4       	ldi	r26, 0x48	; 72
    18a2:	b2 e4       	ldi	r27, 0x42	; 66
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	9a 83       	std	Y+2, r25	; 0x02
    18a8:	ab 83       	std	Y+3, r26	; 0x03
    18aa:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e4       	ldi	r19, 0x40	; 64
    18b0:	4c e1       	ldi	r20, 0x1C	; 28
    18b2:	55 e4       	ldi	r21, 0x45	; 69
    18b4:	69 81       	ldd	r22, Y+1	; 0x01
    18b6:	7a 81       	ldd	r23, Y+2	; 0x02
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	8d 83       	std	Y+5, r24	; 0x05
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	af 83       	std	Y+7, r26	; 0x07
    18ca:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	6d 81       	ldd	r22, Y+5	; 0x05
    18d6:	7e 81       	ldd	r23, Y+6	; 0x06
    18d8:	8f 81       	ldd	r24, Y+7	; 0x07
    18da:	98 85       	ldd	r25, Y+8	; 0x08
    18dc:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    18e0:	88 23       	and	r24, r24
    18e2:	2c f4       	brge	.+10     	; 0x18ee <odometry_stop+0x6e>
		__ticks = 1;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9a 87       	std	Y+10, r25	; 0x0a
    18ea:	89 87       	std	Y+9, r24	; 0x09
    18ec:	3f c0       	rjmp	.+126    	; 0x196c <odometry_stop+0xec>
	else if (__tmp > 65535)
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	6d 81       	ldd	r22, Y+5	; 0x05
    18f8:	7e 81       	ldd	r23, Y+6	; 0x06
    18fa:	8f 81       	ldd	r24, Y+7	; 0x07
    18fc:	98 85       	ldd	r25, Y+8	; 0x08
    18fe:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    1902:	18 16       	cp	r1, r24
    1904:	4c f5       	brge	.+82     	; 0x1958 <odometry_stop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	69 81       	ldd	r22, Y+1	; 0x01
    1910:	7a 81       	ldd	r23, Y+2	; 0x02
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	9a 87       	std	Y+10, r25	; 0x0a
    192c:	89 87       	std	Y+9, r24	; 0x09
    192e:	0f c0       	rjmp	.+30     	; 0x194e <odometry_stop+0xce>
    1930:	8a ef       	ldi	r24, 0xFA	; 250
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9c 87       	std	Y+12, r25	; 0x0c
    1936:	8b 87       	std	Y+11, r24	; 0x0b
    1938:	8b 85       	ldd	r24, Y+11	; 0x0b
    193a:	9c 85       	ldd	r25, Y+12	; 0x0c
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <odometry_stop+0xbc>
    1940:	9c 87       	std	Y+12, r25	; 0x0c
    1942:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1944:	89 85       	ldd	r24, Y+9	; 0x09
    1946:	9a 85       	ldd	r25, Y+10	; 0x0a
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	9a 87       	std	Y+10, r25	; 0x0a
    194c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194e:	89 85       	ldd	r24, Y+9	; 0x09
    1950:	9a 85       	ldd	r25, Y+10	; 0x0a
    1952:	89 2b       	or	r24, r25
    1954:	69 f7       	brne	.-38     	; 0x1930 <odometry_stop+0xb0>
    1956:	14 c0       	rjmp	.+40     	; 0x1980 <odometry_stop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1958:	6d 81       	ldd	r22, Y+5	; 0x05
    195a:	7e 81       	ldd	r23, Y+6	; 0x06
    195c:	8f 81       	ldd	r24, Y+7	; 0x07
    195e:	98 85       	ldd	r25, Y+8	; 0x08
    1960:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	9a 87       	std	Y+10, r25	; 0x0a
    196a:	89 87       	std	Y+9, r24	; 0x09
    196c:	89 85       	ldd	r24, Y+9	; 0x09
    196e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1970:	9e 87       	std	Y+14, r25	; 0x0e
    1972:	8d 87       	std	Y+13, r24	; 0x0d
    1974:	8d 85       	ldd	r24, Y+13	; 0x0d
    1976:	9e 85       	ldd	r25, Y+14	; 0x0e
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <odometry_stop+0xf8>
    197c:	9e 87       	std	Y+14, r25	; 0x0e
    197e:	8d 87       	std	Y+13, r24	; 0x0d
    1980:	ce 01       	movw	r24, r28
    1982:	0f 96       	adiw	r24, 0x0f	; 15
    1984:	63 ec       	ldi	r22, 0xC3	; 195
    1986:	0e 94 68 07 	call	0xed0	; 0xed0 <CAN_Write>
    198a:	88 23       	and	r24, r24
    198c:	09 f0       	breq	.+2      	; 0x1990 <odometry_stop+0x110>
    198e:	86 cf       	rjmp	.-244    	; 0x189c <odometry_stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    1990:	0e 94 47 0b 	call	0x168e	; 0x168e <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    1994:	80 91 15 01 	lds	r24, 0x0115
    1998:	8d 34       	cpi	r24, 0x4D	; 77
    199a:	09 f4       	brne	.+2      	; 0x199e <odometry_stop+0x11e>
    199c:	7c cf       	rjmp	.-264    	; 0x1896 <odometry_stop+0x16>
    199e:	80 91 15 01 	lds	r24, 0x0115
    19a2:	82 35       	cpi	r24, 0x52	; 82
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <odometry_stop+0x128>
    19a6:	77 cf       	rjmp	.-274    	; 0x1896 <odometry_stop+0x16>
}
    19a8:	67 96       	adiw	r28, 0x17	; 23
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	08 95       	ret

000019ba <odometry_move_straight>:
 * 	uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move straight command to odometry
 */
uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	6b 97       	sbiw	r28, 0x1b	; 27
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	98 8f       	std	Y+24, r25	; 0x18
    19d0:	8f 8b       	std	Y+23, r24	; 0x17
    19d2:	69 8f       	std	Y+25, r22	; 0x19
    19d4:	5b 8f       	std	Y+27, r21	; 0x1b
    19d6:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    19d8:	89 8d       	ldd	r24, Y+25	; 0x19
    19da:	0e 94 ab 0a 	call	0x1556	; 0x1556 <odometry_set_speed>
	buffer[0] = 'D';
    19de:	84 e4       	ldi	r24, 0x44	; 68
    19e0:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    19e2:	8f 89       	ldd	r24, Y+23	; 0x17
    19e4:	98 8d       	ldd	r25, Y+24	; 0x18
    19e6:	89 2f       	mov	r24, r25
    19e8:	99 0f       	add	r25, r25
    19ea:	99 0b       	sbc	r25, r25
    19ec:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    19ee:	8f 89       	ldd	r24, Y+23	; 0x17
    19f0:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    19f2:	72 c0       	rjmp	.+228    	; 0x1ad8 <odometry_move_straight+0x11e>
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	a8 e4       	ldi	r26, 0x48	; 72
    19fa:	b2 e4       	ldi	r27, 0x42	; 66
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	9a 83       	std	Y+2, r25	; 0x02
    1a00:	ab 83       	std	Y+3, r26	; 0x03
    1a02:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e4       	ldi	r19, 0x40	; 64
    1a08:	4c e1       	ldi	r20, 0x1C	; 28
    1a0a:	55 e4       	ldi	r21, 0x45	; 69
    1a0c:	69 81       	ldd	r22, Y+1	; 0x01
    1a0e:	7a 81       	ldd	r23, Y+2	; 0x02
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	af 83       	std	Y+7, r26	; 0x07
    1a22:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	6d 81       	ldd	r22, Y+5	; 0x05
    1a2e:	7e 81       	ldd	r23, Y+6	; 0x06
    1a30:	8f 81       	ldd	r24, Y+7	; 0x07
    1a32:	98 85       	ldd	r25, Y+8	; 0x08
    1a34:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    1a38:	88 23       	and	r24, r24
    1a3a:	2c f4       	brge	.+10     	; 0x1a46 <odometry_move_straight+0x8c>
		__ticks = 1;
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	9a 87       	std	Y+10, r25	; 0x0a
    1a42:	89 87       	std	Y+9, r24	; 0x09
    1a44:	3f c0       	rjmp	.+126    	; 0x1ac4 <odometry_move_straight+0x10a>
	else if (__tmp > 65535)
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	6d 81       	ldd	r22, Y+5	; 0x05
    1a50:	7e 81       	ldd	r23, Y+6	; 0x06
    1a52:	8f 81       	ldd	r24, Y+7	; 0x07
    1a54:	98 85       	ldd	r25, Y+8	; 0x08
    1a56:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    1a5a:	18 16       	cp	r1, r24
    1a5c:	4c f5       	brge	.+82     	; 0x1ab0 <odometry_move_straight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	69 81       	ldd	r22, Y+1	; 0x01
    1a68:	7a 81       	ldd	r23, Y+2	; 0x02
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	bc 01       	movw	r22, r24
    1a78:	cd 01       	movw	r24, r26
    1a7a:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	9a 87       	std	Y+10, r25	; 0x0a
    1a84:	89 87       	std	Y+9, r24	; 0x09
    1a86:	0f c0       	rjmp	.+30     	; 0x1aa6 <odometry_move_straight+0xec>
    1a88:	8a ef       	ldi	r24, 0xFA	; 250
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9c 87       	std	Y+12, r25	; 0x0c
    1a8e:	8b 87       	std	Y+11, r24	; 0x0b
    1a90:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a92:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <odometry_move_straight+0xda>
    1a98:	9c 87       	std	Y+12, r25	; 0x0c
    1a9a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	9a 87       	std	Y+10, r25	; 0x0a
    1aa4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa6:	89 85       	ldd	r24, Y+9	; 0x09
    1aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aaa:	89 2b       	or	r24, r25
    1aac:	69 f7       	brne	.-38     	; 0x1a88 <odometry_move_straight+0xce>
    1aae:	14 c0       	rjmp	.+40     	; 0x1ad8 <odometry_move_straight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ab2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ab4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab6:	98 85       	ldd	r25, Y+8	; 0x08
    1ab8:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	9a 87       	std	Y+10, r25	; 0x0a
    1ac2:	89 87       	std	Y+9, r24	; 0x09
    1ac4:	89 85       	ldd	r24, Y+9	; 0x09
    1ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac8:	9e 87       	std	Y+14, r25	; 0x0e
    1aca:	8d 87       	std	Y+13, r24	; 0x0d
    1acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ace:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <odometry_move_straight+0x116>
    1ad4:	9e 87       	std	Y+14, r25	; 0x0e
    1ad6:	8d 87       	std	Y+13, r24	; 0x0d
    1ad8:	ce 01       	movw	r24, r28
    1ada:	0f 96       	adiw	r24, 0x0f	; 15
    1adc:	63 ec       	ldi	r22, 0xC3	; 195
    1ade:	0e 94 68 07 	call	0xed0	; 0xed0 <CAN_Write>
    1ae2:	88 23       	and	r24, r24
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <odometry_move_straight+0x12e>
    1ae6:	86 cf       	rjmp	.-244    	; 0x19f4 <odometry_move_straight+0x3a>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1ae8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1aea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1aec:	0e 94 09 0c 	call	0x1812	; 0x1812 <odometry_wait_until_done>
}
    1af0:	6b 96       	adiw	r28, 0x1b	; 27
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	08 95       	ret

00001b02 <odometry_move_to_position>:
 * 	uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move to position function to odometry
 */
uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, char (*callback)(uint32_t start_time))
{
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	6c 97       	sbiw	r28, 0x1c	; 28
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	98 8f       	std	Y+24, r25	; 0x18
    1b18:	8f 8b       	std	Y+23, r24	; 0x17
    1b1a:	69 8f       	std	Y+25, r22	; 0x19
    1b1c:	4a 8f       	std	Y+26, r20	; 0x1a
    1b1e:	3c 8f       	std	Y+28, r19	; 0x1c
    1b20:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1b22:	89 8d       	ldd	r24, Y+25	; 0x19
    1b24:	0e 94 ab 0a 	call	0x1556	; 0x1556 <odometry_set_speed>

	buffer[0] = 'G';
    1b28:	87 e4       	ldi	r24, 0x47	; 71
    1b2a:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    1b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b30:	fc 01       	movw	r30, r24
    1b32:	80 81       	ld	r24, Z
    1b34:	91 81       	ldd	r25, Z+1	; 0x01
    1b36:	89 2f       	mov	r24, r25
    1b38:	99 0f       	add	r25, r25
    1b3a:	99 0b       	sbc	r25, r25
    1b3c:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    1b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b40:	98 8d       	ldd	r25, Y+24	; 0x18
    1b42:	fc 01       	movw	r30, r24
    1b44:	80 81       	ld	r24, Z
    1b46:	91 81       	ldd	r25, Z+1	; 0x01
    1b48:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    1b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4e:	fc 01       	movw	r30, r24
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	93 81       	ldd	r25, Z+3	; 0x03
    1b54:	89 2f       	mov	r24, r25
    1b56:	99 0f       	add	r25, r25
    1b58:	99 0b       	sbc	r25, r25
    1b5a:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1b5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b60:	fc 01       	movw	r30, r24
    1b62:	82 81       	ldd	r24, Z+2	; 0x02
    1b64:	93 81       	ldd	r25, Z+3	; 0x03
    1b66:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    1b68:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    1b6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b6c:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1b6e:	72 c0       	rjmp	.+228    	; 0x1c54 <odometry_move_to_position+0x152>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a8 e4       	ldi	r26, 0x48	; 72
    1b76:	b2 e4       	ldi	r27, 0x42	; 66
    1b78:	89 83       	std	Y+1, r24	; 0x01
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	ab 83       	std	Y+3, r26	; 0x03
    1b7e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e4       	ldi	r19, 0x40	; 64
    1b84:	4c e1       	ldi	r20, 0x1C	; 28
    1b86:	55 e4       	ldi	r21, 0x45	; 69
    1b88:	69 81       	ldd	r22, Y+1	; 0x01
    1b8a:	7a 81       	ldd	r23, Y+2	; 0x02
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b90:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	8d 83       	std	Y+5, r24	; 0x05
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	af 83       	std	Y+7, r26	; 0x07
    1b9e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e8       	ldi	r20, 0x80	; 128
    1ba6:	5f e3       	ldi	r21, 0x3F	; 63
    1ba8:	6d 81       	ldd	r22, Y+5	; 0x05
    1baa:	7e 81       	ldd	r23, Y+6	; 0x06
    1bac:	8f 81       	ldd	r24, Y+7	; 0x07
    1bae:	98 85       	ldd	r25, Y+8	; 0x08
    1bb0:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	2c f4       	brge	.+10     	; 0x1bc2 <odometry_move_to_position+0xc0>
		__ticks = 1;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9a 87       	std	Y+10, r25	; 0x0a
    1bbe:	89 87       	std	Y+9, r24	; 0x09
    1bc0:	3f c0       	rjmp	.+126    	; 0x1c40 <odometry_move_to_position+0x13e>
	else if (__tmp > 65535)
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	3f ef       	ldi	r19, 0xFF	; 255
    1bc6:	4f e7       	ldi	r20, 0x7F	; 127
    1bc8:	57 e4       	ldi	r21, 0x47	; 71
    1bca:	6d 81       	ldd	r22, Y+5	; 0x05
    1bcc:	7e 81       	ldd	r23, Y+6	; 0x06
    1bce:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd0:	98 85       	ldd	r25, Y+8	; 0x08
    1bd2:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	4c f5       	brge	.+82     	; 0x1c2c <odometry_move_to_position+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e2       	ldi	r20, 0x20	; 32
    1be0:	51 e4       	ldi	r21, 0x41	; 65
    1be2:	69 81       	ldd	r22, Y+1	; 0x01
    1be4:	7a 81       	ldd	r23, Y+2	; 0x02
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	9a 87       	std	Y+10, r25	; 0x0a
    1c00:	89 87       	std	Y+9, r24	; 0x09
    1c02:	0f c0       	rjmp	.+30     	; 0x1c22 <odometry_move_to_position+0x120>
    1c04:	8a ef       	ldi	r24, 0xFA	; 250
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9c 87       	std	Y+12, r25	; 0x0c
    1c0a:	8b 87       	std	Y+11, r24	; 0x0b
    1c0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <odometry_move_to_position+0x10e>
    1c14:	9c 87       	std	Y+12, r25	; 0x0c
    1c16:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c18:	89 85       	ldd	r24, Y+9	; 0x09
    1c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	9a 87       	std	Y+10, r25	; 0x0a
    1c20:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c22:	89 85       	ldd	r24, Y+9	; 0x09
    1c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c26:	89 2b       	or	r24, r25
    1c28:	69 f7       	brne	.-38     	; 0x1c04 <odometry_move_to_position+0x102>
    1c2a:	14 c0       	rjmp	.+40     	; 0x1c54 <odometry_move_to_position+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c2e:	7e 81       	ldd	r23, Y+6	; 0x06
    1c30:	8f 81       	ldd	r24, Y+7	; 0x07
    1c32:	98 85       	ldd	r25, Y+8	; 0x08
    1c34:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	9a 87       	std	Y+10, r25	; 0x0a
    1c3e:	89 87       	std	Y+9, r24	; 0x09
    1c40:	89 85       	ldd	r24, Y+9	; 0x09
    1c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c44:	9e 87       	std	Y+14, r25	; 0x0e
    1c46:	8d 87       	std	Y+13, r24	; 0x0d
    1c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <odometry_move_to_position+0x14a>
    1c50:	9e 87       	std	Y+14, r25	; 0x0e
    1c52:	8d 87       	std	Y+13, r24	; 0x0d
    1c54:	ce 01       	movw	r24, r28
    1c56:	0f 96       	adiw	r24, 0x0f	; 15
    1c58:	63 ec       	ldi	r22, 0xC3	; 195
    1c5a:	0e 94 68 07 	call	0xed0	; 0xed0 <CAN_Write>
    1c5e:	88 23       	and	r24, r24
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <odometry_move_to_position+0x162>
    1c62:	86 cf       	rjmp	.-244    	; 0x1b70 <odometry_move_to_position+0x6e>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1c64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c68:	0e 94 09 0c 	call	0x1812	; 0x1812 <odometry_wait_until_done>
}
    1c6c:	6c 96       	adiw	r28, 0x1c	; 28
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

00001c7e <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	68 97       	sbiw	r28, 0x18	; 24
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	98 8f       	std	Y+24, r25	; 0x18
    1c94:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    1c96:	89 e4       	ldi	r24, 0x49	; 73
    1c98:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    1c9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	80 81       	ld	r24, Z
    1ca2:	91 81       	ldd	r25, Z+1	; 0x01
    1ca4:	89 2f       	mov	r24, r25
    1ca6:	99 0f       	add	r25, r25
    1ca8:	99 0b       	sbc	r25, r25
    1caa:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    1cac:	8f 89       	ldd	r24, Y+23	; 0x17
    1cae:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	80 81       	ld	r24, Z
    1cb4:	91 81       	ldd	r25, Z+1	; 0x01
    1cb6:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    1cb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cba:	98 8d       	ldd	r25, Y+24	; 0x18
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	89 2f       	mov	r24, r25
    1cc4:	99 0f       	add	r25, r25
    1cc6:	99 0b       	sbc	r25, r25
    1cc8:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    1cca:	8f 89       	ldd	r24, Y+23	; 0x17
    1ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cce:	fc 01       	movw	r30, r24
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    1cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cda:	fc 01       	movw	r30, r24
    1cdc:	84 81       	ldd	r24, Z+4	; 0x04
    1cde:	95 81       	ldd	r25, Z+5	; 0x05
    1ce0:	89 2f       	mov	r24, r25
    1ce2:	99 0f       	add	r25, r25
    1ce4:	99 0b       	sbc	r25, r25
    1ce6:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    1ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cea:	98 8d       	ldd	r25, Y+24	; 0x18
    1cec:	fc 01       	movw	r30, r24
    1cee:	84 81       	ldd	r24, Z+4	; 0x04
    1cf0:	95 81       	ldd	r25, Z+5	; 0x05
    1cf2:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    1cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	80 81       	ld	r24, Z
    1cfc:	91 81       	ldd	r25, Z+1	; 0x01
    1cfe:	90 93 10 01 	sts	0x0110, r25
    1d02:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = new_position->y;
    1d06:	8f 89       	ldd	r24, Y+23	; 0x17
    1d08:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	82 81       	ldd	r24, Z+2	; 0x02
    1d0e:	93 81       	ldd	r25, Z+3	; 0x03
    1d10:	90 93 12 01 	sts	0x0112, r25
    1d14:	80 93 11 01 	sts	0x0111, r24
	position.angle = new_position->angle;
    1d18:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	84 81       	ldd	r24, Z+4	; 0x04
    1d20:	95 81       	ldd	r25, Z+5	; 0x05
    1d22:	90 93 14 01 	sts	0x0114, r25
    1d26:	80 93 13 01 	sts	0x0113, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1d2a:	72 c0       	rjmp	.+228    	; 0x1e10 <odometry_set_position+0x192>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	a8 e4       	ldi	r26, 0x48	; 72
    1d32:	b2 e4       	ldi	r27, 0x42	; 66
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	ab 83       	std	Y+3, r26	; 0x03
    1d3a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e4       	ldi	r19, 0x40	; 64
    1d40:	4c e1       	ldi	r20, 0x1C	; 28
    1d42:	55 e4       	ldi	r21, 0x45	; 69
    1d44:	69 81       	ldd	r22, Y+1	; 0x01
    1d46:	7a 81       	ldd	r23, Y+2	; 0x02
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	8d 83       	std	Y+5, r24	; 0x05
    1d56:	9e 83       	std	Y+6, r25	; 0x06
    1d58:	af 83       	std	Y+7, r26	; 0x07
    1d5a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e8       	ldi	r20, 0x80	; 128
    1d62:	5f e3       	ldi	r21, 0x3F	; 63
    1d64:	6d 81       	ldd	r22, Y+5	; 0x05
    1d66:	7e 81       	ldd	r23, Y+6	; 0x06
    1d68:	8f 81       	ldd	r24, Y+7	; 0x07
    1d6a:	98 85       	ldd	r25, Y+8	; 0x08
    1d6c:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    1d70:	88 23       	and	r24, r24
    1d72:	2c f4       	brge	.+10     	; 0x1d7e <odometry_set_position+0x100>
		__ticks = 1;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9a 87       	std	Y+10, r25	; 0x0a
    1d7a:	89 87       	std	Y+9, r24	; 0x09
    1d7c:	3f c0       	rjmp	.+126    	; 0x1dfc <odometry_set_position+0x17e>
	else if (__tmp > 65535)
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	3f ef       	ldi	r19, 0xFF	; 255
    1d82:	4f e7       	ldi	r20, 0x7F	; 127
    1d84:	57 e4       	ldi	r21, 0x47	; 71
    1d86:	6d 81       	ldd	r22, Y+5	; 0x05
    1d88:	7e 81       	ldd	r23, Y+6	; 0x06
    1d8a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d8c:	98 85       	ldd	r25, Y+8	; 0x08
    1d8e:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    1d92:	18 16       	cp	r1, r24
    1d94:	4c f5       	brge	.+82     	; 0x1de8 <odometry_set_position+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e2       	ldi	r20, 0x20	; 32
    1d9c:	51 e4       	ldi	r21, 0x41	; 65
    1d9e:	69 81       	ldd	r22, Y+1	; 0x01
    1da0:	7a 81       	ldd	r23, Y+2	; 0x02
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	bc 01       	movw	r22, r24
    1db0:	cd 01       	movw	r24, r26
    1db2:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9a 87       	std	Y+10, r25	; 0x0a
    1dbc:	89 87       	std	Y+9, r24	; 0x09
    1dbe:	0f c0       	rjmp	.+30     	; 0x1dde <odometry_set_position+0x160>
    1dc0:	8a ef       	ldi	r24, 0xFA	; 250
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9c 87       	std	Y+12, r25	; 0x0c
    1dc6:	8b 87       	std	Y+11, r24	; 0x0b
    1dc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dca:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <odometry_set_position+0x14e>
    1dd0:	9c 87       	std	Y+12, r25	; 0x0c
    1dd2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	9a 87       	std	Y+10, r25	; 0x0a
    1ddc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dde:	89 85       	ldd	r24, Y+9	; 0x09
    1de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de2:	89 2b       	or	r24, r25
    1de4:	69 f7       	brne	.-38     	; 0x1dc0 <odometry_set_position+0x142>
    1de6:	14 c0       	rjmp	.+40     	; 0x1e10 <odometry_set_position+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de8:	6d 81       	ldd	r22, Y+5	; 0x05
    1dea:	7e 81       	ldd	r23, Y+6	; 0x06
    1dec:	8f 81       	ldd	r24, Y+7	; 0x07
    1dee:	98 85       	ldd	r25, Y+8	; 0x08
    1df0:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9a 87       	std	Y+10, r25	; 0x0a
    1dfa:	89 87       	std	Y+9, r24	; 0x09
    1dfc:	89 85       	ldd	r24, Y+9	; 0x09
    1dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e00:	9e 87       	std	Y+14, r25	; 0x0e
    1e02:	8d 87       	std	Y+13, r24	; 0x0d
    1e04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <odometry_set_position+0x18a>
    1e0c:	9e 87       	std	Y+14, r25	; 0x0e
    1e0e:	8d 87       	std	Y+13, r24	; 0x0d
    1e10:	ce 01       	movw	r24, r28
    1e12:	0f 96       	adiw	r24, 0x0f	; 15
    1e14:	63 ec       	ldi	r22, 0xC3	; 195
    1e16:	0e 94 68 07 	call	0xed0	; 0xed0 <CAN_Write>
    1e1a:	88 23       	and	r24, r24
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <odometry_set_position+0x1a2>
    1e1e:	86 cf       	rjmp	.-244    	; 0x1d2c <odometry_set_position+0xae>
		_delay_ms(50);
}
    1e20:	68 96       	adiw	r28, 0x18	; 24
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	08 95       	ret

00001e32 <odometry_rotate_for>:
 * 	uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send rotate for command to odometry board
 */
uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	6b 97       	sbiw	r28, 0x1b	; 27
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
    1e46:	98 8f       	std	Y+24, r25	; 0x18
    1e48:	8f 8b       	std	Y+23, r24	; 0x17
    1e4a:	69 8f       	std	Y+25, r22	; 0x19
    1e4c:	5b 8f       	std	Y+27, r21	; 0x1b
    1e4e:	4a 8f       	std	Y+26, r20	; 0x1a

	uint8_t buffer[8];
	odometry_set_speed(speed);
    1e50:	89 8d       	ldd	r24, Y+25	; 0x19
    1e52:	0e 94 ab 0a 	call	0x1556	; 0x1556 <odometry_set_speed>

	buffer[0] = 'T';
    1e56:	84 e5       	ldi	r24, 0x54	; 84
    1e58:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1e5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5e:	89 2f       	mov	r24, r25
    1e60:	99 27       	eor	r25, r25
    1e62:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1e64:	8f 89       	ldd	r24, Y+23	; 0x17
    1e66:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1e68:	72 c0       	rjmp	.+228    	; 0x1f4e <odometry_rotate_for+0x11c>
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	a8 e4       	ldi	r26, 0x48	; 72
    1e70:	b2 e4       	ldi	r27, 0x42	; 66
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	ab 83       	std	Y+3, r26	; 0x03
    1e78:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e4       	ldi	r19, 0x40	; 64
    1e7e:	4c e1       	ldi	r20, 0x1C	; 28
    1e80:	55 e4       	ldi	r21, 0x45	; 69
    1e82:	69 81       	ldd	r22, Y+1	; 0x01
    1e84:	7a 81       	ldd	r23, Y+2	; 0x02
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	af 83       	std	Y+7, r26	; 0x07
    1e98:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ea4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ea6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea8:	98 85       	ldd	r25, Y+8	; 0x08
    1eaa:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    1eae:	88 23       	and	r24, r24
    1eb0:	2c f4       	brge	.+10     	; 0x1ebc <odometry_rotate_for+0x8a>
		__ticks = 1;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9a 87       	std	Y+10, r25	; 0x0a
    1eb8:	89 87       	std	Y+9, r24	; 0x09
    1eba:	3f c0       	rjmp	.+126    	; 0x1f3a <odometry_rotate_for+0x108>
	else if (__tmp > 65535)
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ec6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ec8:	8f 81       	ldd	r24, Y+7	; 0x07
    1eca:	98 85       	ldd	r25, Y+8	; 0x08
    1ecc:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    1ed0:	18 16       	cp	r1, r24
    1ed2:	4c f5       	brge	.+82     	; 0x1f26 <odometry_rotate_for+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	69 81       	ldd	r22, Y+1	; 0x01
    1ede:	7a 81       	ldd	r23, Y+2	; 0x02
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee4:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9a 87       	std	Y+10, r25	; 0x0a
    1efa:	89 87       	std	Y+9, r24	; 0x09
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <odometry_rotate_for+0xea>
    1efe:	8a ef       	ldi	r24, 0xFA	; 250
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	9c 87       	std	Y+12, r25	; 0x0c
    1f04:	8b 87       	std	Y+11, r24	; 0x0b
    1f06:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f08:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <odometry_rotate_for+0xd8>
    1f0e:	9c 87       	std	Y+12, r25	; 0x0c
    1f10:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f12:	89 85       	ldd	r24, Y+9	; 0x09
    1f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	9a 87       	std	Y+10, r25	; 0x0a
    1f1a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f20:	89 2b       	or	r24, r25
    1f22:	69 f7       	brne	.-38     	; 0x1efe <odometry_rotate_for+0xcc>
    1f24:	14 c0       	rjmp	.+40     	; 0x1f4e <odometry_rotate_for+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f26:	6d 81       	ldd	r22, Y+5	; 0x05
    1f28:	7e 81       	ldd	r23, Y+6	; 0x06
    1f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2c:	98 85       	ldd	r25, Y+8	; 0x08
    1f2e:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9a 87       	std	Y+10, r25	; 0x0a
    1f38:	89 87       	std	Y+9, r24	; 0x09
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	9e 87       	std	Y+14, r25	; 0x0e
    1f40:	8d 87       	std	Y+13, r24	; 0x0d
    1f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <odometry_rotate_for+0x114>
    1f4a:	9e 87       	std	Y+14, r25	; 0x0e
    1f4c:	8d 87       	std	Y+13, r24	; 0x0d
    1f4e:	ce 01       	movw	r24, r28
    1f50:	0f 96       	adiw	r24, 0x0f	; 15
    1f52:	63 ec       	ldi	r22, 0xC3	; 195
    1f54:	0e 94 68 07 	call	0xed0	; 0xed0 <CAN_Write>
    1f58:	88 23       	and	r24, r24
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <odometry_rotate_for+0x12c>
    1f5c:	86 cf       	rjmp	.-244    	; 0x1e6a <odometry_rotate_for+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1f5e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f60:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f62:	0e 94 09 0c 	call	0x1812	; 0x1812 <odometry_wait_until_done>

}
    1f66:	6b 96       	adiw	r28, 0x1b	; 27
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	08 95       	ret

00001f78 <odometry_set_angle>:
 * 	uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Set angle for odometry
 */
uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	6b 97       	sbiw	r28, 0x1b	; 27
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	98 8f       	std	Y+24, r25	; 0x18
    1f8e:	8f 8b       	std	Y+23, r24	; 0x17
    1f90:	69 8f       	std	Y+25, r22	; 0x19
    1f92:	5b 8f       	std	Y+27, r21	; 0x1b
    1f94:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1f96:	89 8d       	ldd	r24, Y+25	; 0x19
    1f98:	0e 94 ab 0a 	call	0x1556	; 0x1556 <odometry_set_speed>

	buffer[0] = 'A';
    1f9c:	81 e4       	ldi	r24, 0x41	; 65
    1f9e:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1fa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa4:	89 2f       	mov	r24, r25
    1fa6:	99 27       	eor	r25, r25
    1fa8:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1faa:	8f 89       	ldd	r24, Y+23	; 0x17
    1fac:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1fae:	72 c0       	rjmp	.+228    	; 0x2094 <odometry_set_angle+0x11c>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a8 e4       	ldi	r26, 0x48	; 72
    1fb6:	b2 e4       	ldi	r27, 0x42	; 66
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	ab 83       	std	Y+3, r26	; 0x03
    1fbe:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e4       	ldi	r19, 0x40	; 64
    1fc4:	4c e1       	ldi	r20, 0x1C	; 28
    1fc6:	55 e4       	ldi	r21, 0x45	; 69
    1fc8:	69 81       	ldd	r22, Y+1	; 0x01
    1fca:	7a 81       	ldd	r23, Y+2	; 0x02
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8d 83       	std	Y+5, r24	; 0x05
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	af 83       	std	Y+7, r26	; 0x07
    1fde:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e8       	ldi	r20, 0x80	; 128
    1fe6:	5f e3       	ldi	r21, 0x3F	; 63
    1fe8:	6d 81       	ldd	r22, Y+5	; 0x05
    1fea:	7e 81       	ldd	r23, Y+6	; 0x06
    1fec:	8f 81       	ldd	r24, Y+7	; 0x07
    1fee:	98 85       	ldd	r25, Y+8	; 0x08
    1ff0:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <odometry_set_angle+0x8a>
		__ticks = 1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9a 87       	std	Y+10, r25	; 0x0a
    1ffe:	89 87       	std	Y+9, r24	; 0x09
    2000:	3f c0       	rjmp	.+126    	; 0x2080 <odometry_set_angle+0x108>
	else if (__tmp > 65535)
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	3f ef       	ldi	r19, 0xFF	; 255
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	57 e4       	ldi	r21, 0x47	; 71
    200a:	6d 81       	ldd	r22, Y+5	; 0x05
    200c:	7e 81       	ldd	r23, Y+6	; 0x06
    200e:	8f 81       	ldd	r24, Y+7	; 0x07
    2010:	98 85       	ldd	r25, Y+8	; 0x08
    2012:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    2016:	18 16       	cp	r1, r24
    2018:	4c f5       	brge	.+82     	; 0x206c <odometry_set_angle+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e2       	ldi	r20, 0x20	; 32
    2020:	51 e4       	ldi	r21, 0x41	; 65
    2022:	69 81       	ldd	r22, Y+1	; 0x01
    2024:	7a 81       	ldd	r23, Y+2	; 0x02
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	9a 87       	std	Y+10, r25	; 0x0a
    2040:	89 87       	std	Y+9, r24	; 0x09
    2042:	0f c0       	rjmp	.+30     	; 0x2062 <odometry_set_angle+0xea>
    2044:	8a ef       	ldi	r24, 0xFA	; 250
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9c 87       	std	Y+12, r25	; 0x0c
    204a:	8b 87       	std	Y+11, r24	; 0x0b
    204c:	8b 85       	ldd	r24, Y+11	; 0x0b
    204e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <odometry_set_angle+0xd8>
    2054:	9c 87       	std	Y+12, r25	; 0x0c
    2056:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2058:	89 85       	ldd	r24, Y+9	; 0x09
    205a:	9a 85       	ldd	r25, Y+10	; 0x0a
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	9a 87       	std	Y+10, r25	; 0x0a
    2060:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2062:	89 85       	ldd	r24, Y+9	; 0x09
    2064:	9a 85       	ldd	r25, Y+10	; 0x0a
    2066:	89 2b       	or	r24, r25
    2068:	69 f7       	brne	.-38     	; 0x2044 <odometry_set_angle+0xcc>
    206a:	14 c0       	rjmp	.+40     	; 0x2094 <odometry_set_angle+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206c:	6d 81       	ldd	r22, Y+5	; 0x05
    206e:	7e 81       	ldd	r23, Y+6	; 0x06
    2070:	8f 81       	ldd	r24, Y+7	; 0x07
    2072:	98 85       	ldd	r25, Y+8	; 0x08
    2074:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9a 87       	std	Y+10, r25	; 0x0a
    207e:	89 87       	std	Y+9, r24	; 0x09
    2080:	89 85       	ldd	r24, Y+9	; 0x09
    2082:	9a 85       	ldd	r25, Y+10	; 0x0a
    2084:	9e 87       	std	Y+14, r25	; 0x0e
    2086:	8d 87       	std	Y+13, r24	; 0x0d
    2088:	8d 85       	ldd	r24, Y+13	; 0x0d
    208a:	9e 85       	ldd	r25, Y+14	; 0x0e
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <odometry_set_angle+0x114>
    2090:	9e 87       	std	Y+14, r25	; 0x0e
    2092:	8d 87       	std	Y+13, r24	; 0x0d
    2094:	ce 01       	movw	r24, r28
    2096:	0f 96       	adiw	r24, 0x0f	; 15
    2098:	63 ec       	ldi	r22, 0xC3	; 195
    209a:	0e 94 68 07 	call	0xed0	; 0xed0 <CAN_Write>
    209e:	88 23       	and	r24, r24
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <odometry_set_angle+0x12c>
    20a2:	86 cf       	rjmp	.-244    	; 0x1fb0 <odometry_set_angle+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    20a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20a8:	0e 94 09 0c 	call	0x1812	; 0x1812 <odometry_wait_until_done>
}
    20ac:	6b 96       	adiw	r28, 0x1b	; 27
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	08 95       	ret

000020be <odometry_kurva>:

uint8_t odometry_kurva(uint16_t x_pos, uint16_t y_pos, int8_t angle, uint8_t direction, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    20be:	ef 92       	push	r14
    20c0:	ff 92       	push	r15
    20c2:	0f 93       	push	r16
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	6f 97       	sbiw	r28, 0x1f	; 31
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	98 8f       	std	Y+24, r25	; 0x18
    20da:	8f 8b       	std	Y+23, r24	; 0x17
    20dc:	7a 8f       	std	Y+26, r23	; 0x1a
    20de:	69 8f       	std	Y+25, r22	; 0x19
    20e0:	4b 8f       	std	Y+27, r20	; 0x1b
    20e2:	2c 8f       	std	Y+28, r18	; 0x1c
    20e4:	0d 8f       	std	Y+29, r16	; 0x1d
    20e6:	ff 8e       	std	Y+31, r15	; 0x1f
    20e8:	ee 8e       	std	Y+30, r14	; 0x1e
	uint8_t buffer[8];

	odometry_set_speed(speed);
    20ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ec:	0e 94 ab 0a 	call	0x1556	; 0x1556 <odometry_set_speed>

	buffer[0] = 'Q';
    20f0:	81 e5       	ldi	r24, 0x51	; 81
    20f2:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = x_pos >> 8;
    20f4:	8f 89       	ldd	r24, Y+23	; 0x17
    20f6:	98 8d       	ldd	r25, Y+24	; 0x18
    20f8:	89 2f       	mov	r24, r25
    20fa:	99 27       	eor	r25, r25
    20fc:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = x_pos & 0xFF;
    20fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2100:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = y_pos >> 8;
    2102:	89 8d       	ldd	r24, Y+25	; 0x19
    2104:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2106:	89 2f       	mov	r24, r25
    2108:	99 27       	eor	r25, r25
    210a:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = y_pos & 0xFF;
    210c:	89 8d       	ldd	r24, Y+25	; 0x19
    210e:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = angle >> 8;
    2110:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2112:	08 2e       	mov	r0, r24
    2114:	00 0c       	add	r0, r0
    2116:	99 0b       	sbc	r25, r25
    2118:	89 2f       	mov	r24, r25
    211a:	99 0f       	add	r25, r25
    211c:	99 0b       	sbc	r25, r25
    211e:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = angle & 0xFF;
    2120:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2122:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[7] = direction;
    2124:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2126:	8e 8b       	std	Y+22, r24	; 0x16

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2128:	72 c0       	rjmp	.+228    	; 0x220e <odometry_kurva+0x150>
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a8 e4       	ldi	r26, 0x48	; 72
    2130:	b2 e4       	ldi	r27, 0x42	; 66
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	ab 83       	std	Y+3, r26	; 0x03
    2138:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e4       	ldi	r19, 0x40	; 64
    213e:	4c e1       	ldi	r20, 0x1C	; 28
    2140:	55 e4       	ldi	r21, 0x45	; 69
    2142:	69 81       	ldd	r22, Y+1	; 0x01
    2144:	7a 81       	ldd	r23, Y+2	; 0x02
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	8d 83       	std	Y+5, r24	; 0x05
    2154:	9e 83       	std	Y+6, r25	; 0x06
    2156:	af 83       	std	Y+7, r26	; 0x07
    2158:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e8       	ldi	r20, 0x80	; 128
    2160:	5f e3       	ldi	r21, 0x3F	; 63
    2162:	6d 81       	ldd	r22, Y+5	; 0x05
    2164:	7e 81       	ldd	r23, Y+6	; 0x06
    2166:	8f 81       	ldd	r24, Y+7	; 0x07
    2168:	98 85       	ldd	r25, Y+8	; 0x08
    216a:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <odometry_kurva+0xbe>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9a 87       	std	Y+10, r25	; 0x0a
    2178:	89 87       	std	Y+9, r24	; 0x09
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <odometry_kurva+0x13c>
	else if (__tmp > 65535)
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	6d 81       	ldd	r22, Y+5	; 0x05
    2186:	7e 81       	ldd	r23, Y+6	; 0x06
    2188:	8f 81       	ldd	r24, Y+7	; 0x07
    218a:	98 85       	ldd	r25, Y+8	; 0x08
    218c:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    2190:	18 16       	cp	r1, r24
    2192:	4c f5       	brge	.+82     	; 0x21e6 <odometry_kurva+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e2       	ldi	r20, 0x20	; 32
    219a:	51 e4       	ldi	r21, 0x41	; 65
    219c:	69 81       	ldd	r22, Y+1	; 0x01
    219e:	7a 81       	ldd	r23, Y+2	; 0x02
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	9c 81       	ldd	r25, Y+4	; 0x04
    21a4:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9a 87       	std	Y+10, r25	; 0x0a
    21ba:	89 87       	std	Y+9, r24	; 0x09
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <odometry_kurva+0x11e>
    21be:	8a ef       	ldi	r24, 0xFA	; 250
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	9c 87       	std	Y+12, r25	; 0x0c
    21c4:	8b 87       	std	Y+11, r24	; 0x0b
    21c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    21c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <odometry_kurva+0x10c>
    21ce:	9c 87       	std	Y+12, r25	; 0x0c
    21d0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9a 87       	std	Y+10, r25	; 0x0a
    21da:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	89 85       	ldd	r24, Y+9	; 0x09
    21de:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e0:	89 2b       	or	r24, r25
    21e2:	69 f7       	brne	.-38     	; 0x21be <odometry_kurva+0x100>
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <odometry_kurva+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	6d 81       	ldd	r22, Y+5	; 0x05
    21e8:	7e 81       	ldd	r23, Y+6	; 0x06
    21ea:	8f 81       	ldd	r24, Y+7	; 0x07
    21ec:	98 85       	ldd	r25, Y+8	; 0x08
    21ee:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9a 87       	std	Y+10, r25	; 0x0a
    21f8:	89 87       	std	Y+9, r24	; 0x09
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fe:	9e 87       	std	Y+14, r25	; 0x0e
    2200:	8d 87       	std	Y+13, r24	; 0x0d
    2202:	8d 85       	ldd	r24, Y+13	; 0x0d
    2204:	9e 85       	ldd	r25, Y+14	; 0x0e
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <odometry_kurva+0x148>
    220a:	9e 87       	std	Y+14, r25	; 0x0e
    220c:	8d 87       	std	Y+13, r24	; 0x0d
    220e:	ce 01       	movw	r24, r28
    2210:	0f 96       	adiw	r24, 0x0f	; 15
    2212:	63 ec       	ldi	r22, 0xC3	; 195
    2214:	0e 94 68 07 	call	0xed0	; 0xed0 <CAN_Write>
    2218:	88 23       	and	r24, r24
    221a:	09 f0       	breq	.+2      	; 0x221e <odometry_kurva+0x160>
    221c:	86 cf       	rjmp	.-244    	; 0x212a <odometry_kurva+0x6c>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    221e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2220:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2222:	0e 94 09 0c 	call	0x1812	; 0x1812 <odometry_wait_until_done>
}
    2226:	6f 96       	adiw	r28, 0x1f	; 31
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	0f 91       	pop	r16
    2238:	ff 90       	pop	r15
    223a:	ef 90       	pop	r14
    223c:	08 95       	ret

0000223e <odometry_match_end>:

void odometry_match_end(void)
{
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	66 97       	sbiw	r28, 0x16	; 22
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];

	buffer[0] = 'K';
    2252:	8b e4       	ldi	r24, 0x4B	; 75
    2254:	8f 87       	std	Y+15, r24	; 0x0f

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2256:	72 c0       	rjmp	.+228    	; 0x233c <odometry_match_end+0xfe>
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	a8 e4       	ldi	r26, 0x48	; 72
    225e:	b2 e4       	ldi	r27, 0x42	; 66
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	ab 83       	std	Y+3, r26	; 0x03
    2266:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e4       	ldi	r19, 0x40	; 64
    226c:	4c e1       	ldi	r20, 0x1C	; 28
    226e:	55 e4       	ldi	r21, 0x45	; 69
    2270:	69 81       	ldd	r22, Y+1	; 0x01
    2272:	7a 81       	ldd	r23, Y+2	; 0x02
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	9c 81       	ldd	r25, Y+4	; 0x04
    2278:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	8d 83       	std	Y+5, r24	; 0x05
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	af 83       	std	Y+7, r26	; 0x07
    2286:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e8       	ldi	r20, 0x80	; 128
    228e:	5f e3       	ldi	r21, 0x3F	; 63
    2290:	6d 81       	ldd	r22, Y+5	; 0x05
    2292:	7e 81       	ldd	r23, Y+6	; 0x06
    2294:	8f 81       	ldd	r24, Y+7	; 0x07
    2296:	98 85       	ldd	r25, Y+8	; 0x08
    2298:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    229c:	88 23       	and	r24, r24
    229e:	2c f4       	brge	.+10     	; 0x22aa <odometry_match_end+0x6c>
		__ticks = 1;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	9a 87       	std	Y+10, r25	; 0x0a
    22a6:	89 87       	std	Y+9, r24	; 0x09
    22a8:	3f c0       	rjmp	.+126    	; 0x2328 <odometry_match_end+0xea>
	else if (__tmp > 65535)
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	3f ef       	ldi	r19, 0xFF	; 255
    22ae:	4f e7       	ldi	r20, 0x7F	; 127
    22b0:	57 e4       	ldi	r21, 0x47	; 71
    22b2:	6d 81       	ldd	r22, Y+5	; 0x05
    22b4:	7e 81       	ldd	r23, Y+6	; 0x06
    22b6:	8f 81       	ldd	r24, Y+7	; 0x07
    22b8:	98 85       	ldd	r25, Y+8	; 0x08
    22ba:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    22be:	18 16       	cp	r1, r24
    22c0:	4c f5       	brge	.+82     	; 0x2314 <odometry_match_end+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e2       	ldi	r20, 0x20	; 32
    22c8:	51 e4       	ldi	r21, 0x41	; 65
    22ca:	69 81       	ldd	r22, Y+1	; 0x01
    22cc:	7a 81       	ldd	r23, Y+2	; 0x02
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	9c 81       	ldd	r25, Y+4	; 0x04
    22d2:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	bc 01       	movw	r22, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	9a 87       	std	Y+10, r25	; 0x0a
    22e8:	89 87       	std	Y+9, r24	; 0x09
    22ea:	0f c0       	rjmp	.+30     	; 0x230a <odometry_match_end+0xcc>
    22ec:	8a ef       	ldi	r24, 0xFA	; 250
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9c 87       	std	Y+12, r25	; 0x0c
    22f2:	8b 87       	std	Y+11, r24	; 0x0b
    22f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    22f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <odometry_match_end+0xba>
    22fc:	9c 87       	std	Y+12, r25	; 0x0c
    22fe:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	9a 87       	std	Y+10, r25	; 0x0a
    2308:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	89 2b       	or	r24, r25
    2310:	69 f7       	brne	.-38     	; 0x22ec <odometry_match_end+0xae>
    2312:	14 c0       	rjmp	.+40     	; 0x233c <odometry_match_end+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2314:	6d 81       	ldd	r22, Y+5	; 0x05
    2316:	7e 81       	ldd	r23, Y+6	; 0x06
    2318:	8f 81       	ldd	r24, Y+7	; 0x07
    231a:	98 85       	ldd	r25, Y+8	; 0x08
    231c:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	9a 87       	std	Y+10, r25	; 0x0a
    2326:	89 87       	std	Y+9, r24	; 0x09
    2328:	89 85       	ldd	r24, Y+9	; 0x09
    232a:	9a 85       	ldd	r25, Y+10	; 0x0a
    232c:	9e 87       	std	Y+14, r25	; 0x0e
    232e:	8d 87       	std	Y+13, r24	; 0x0d
    2330:	8d 85       	ldd	r24, Y+13	; 0x0d
    2332:	9e 85       	ldd	r25, Y+14	; 0x0e
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	f1 f7       	brne	.-4      	; 0x2334 <odometry_match_end+0xf6>
    2338:	9e 87       	std	Y+14, r25	; 0x0e
    233a:	8d 87       	std	Y+13, r24	; 0x0d
    233c:	ce 01       	movw	r24, r28
    233e:	0f 96       	adiw	r24, 0x0f	; 15
    2340:	63 ec       	ldi	r22, 0xC3	; 195
    2342:	0e 94 68 07 	call	0xed0	; 0xed0 <CAN_Write>
    2346:	88 23       	and	r24, r24
    2348:	09 f0       	breq	.+2      	; 0x234c <odometry_match_end+0x10e>
    234a:	86 cf       	rjmp	.-244    	; 0x2258 <odometry_match_end+0x1a>
			_delay_ms(50);

}
    234c:	66 96       	adiw	r28, 0x16	; 22
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	df 91       	pop	r29
    235a:	cf 91       	pop	r28
    235c:	08 95       	ret

0000235e <getState>:

/*
 * 	Update position
 */
uint8_t getState(void)
{
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2366:	0e 94 47 0b 	call	0x168e	; 0x168e <odometry_query_position>
	return position.state;
    236a:	80 91 15 01 	lds	r24, 0x0115
}
    236e:	df 91       	pop	r29
    2370:	cf 91       	pop	r28
    2372:	08 95       	ret

00002374 <odometry_get_x>:

int16_t odometry_get_x(void)
{
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    237c:	0e 94 47 0b 	call	0x168e	; 0x168e <odometry_query_position>
	return position.x;
    2380:	80 91 0f 01 	lds	r24, 0x010F
    2384:	90 91 10 01 	lds	r25, 0x0110
}
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	08 95       	ret

0000238e <odometry_get_y>:

int16_t odometry_get_y(void)
{
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2396:	0e 94 47 0b 	call	0x168e	; 0x168e <odometry_query_position>
	return position.y;
    239a:	80 91 11 01 	lds	r24, 0x0111
    239e:	90 91 12 01 	lds	r25, 0x0112
}
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	08 95       	ret

000023a8 <odometry_get_angle>:

int16_t odometry_get_angle(void)
{
    23a8:	cf 93       	push	r28
    23aa:	df 93       	push	r29
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    23b0:	0e 94 47 0b 	call	0x168e	; 0x168e <odometry_query_position>
	return position.angle;
    23b4:	80 91 13 01 	lds	r24, 0x0113
    23b8:	90 91 14 01 	lds	r25, 0x0114
}
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	08 95       	ret

000023c2 <timer_register_callback>:
 *	Function: 		void timer_register_callback(void (*callback)(void))
 *	Parameters: 	void (*callback)(void))
 *	Description: 	timer callbacks
 */
void timer_register_callback(void (*callback)(void))
{
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <timer_register_callback+0x6>
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	9a 81       	ldd	r25, Y+2	; 0x02
    23d4:	90 93 6b 01 	sts	0x016B, r25
    23d8:	80 93 6a 01 	sts	0x016A, r24
}
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	08 95       	ret

000023e6 <timer_init>:
 *	Function: 		void timer_init(unsigned int freq)
 *	Parameters: 	unsigned int freq - frequency of timer
 *	Description: 	setup timer
 */
void timer_init(unsigned int freq)
{
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <timer_init+0xa>
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	9a 83       	std	Y+2, r25	; 0x02
    23f6:	89 83       	std	Y+1, r24	; 0x01

    TCCR1A = 0;
    23f8:	80 e8       	ldi	r24, 0x80	; 128
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	fc 01       	movw	r30, r24
    23fe:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    2400:	81 e8       	ldi	r24, 0x81	; 129
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	29 e0       	ldi	r18, 0x09	; 9
    2406:	fc 01       	movw	r30, r24
    2408:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    240a:	08 e8       	ldi	r16, 0x88	; 136
    240c:	10 e0       	ldi	r17, 0x00	; 0
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	9a 81       	ldd	r25, Y+2	; 0x02
    2412:	cc 01       	movw	r24, r24
    2414:	a0 e0       	ldi	r26, 0x00	; 0
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__floatunsisf>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	9c 01       	movw	r18, r24
    2426:	ad 01       	movw	r20, r26
    2428:	60 e8       	ldi	r22, 0x80	; 128
    242a:	76 e9       	ldi	r23, 0x96	; 150
    242c:	88 e1       	ldi	r24, 0x18	; 24
    242e:	9b e4       	ldi	r25, 0x4B	; 75
    2430:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__divsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	bc 01       	movw	r22, r24
    2442:	cd 01       	movw	r24, r26
    2444:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__addsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	f8 01       	movw	r30, r16
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    245e:	8f e6       	ldi	r24, 0x6F	; 111
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	22 e0       	ldi	r18, 0x02	; 2
    2464:	fc 01       	movw	r30, r24
    2466:	20 83       	st	Z, r18

	SREG |= 0x80;
    2468:	8f e5       	ldi	r24, 0x5F	; 95
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	2f e5       	ldi	r18, 0x5F	; 95
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	f9 01       	movw	r30, r18
    2472:	20 81       	ld	r18, Z
    2474:	20 68       	ori	r18, 0x80	; 128
    2476:	fc 01       	movw	r30, r24
    2478:	20 83       	st	Z, r18
}
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	08 95       	ret

00002488 <__vector_12>:
/*
 *	Function: 		ISR(TIMER1_COMPA_vect)
 *	Description: 	ISR interrupt for timer
 */
ISR(TIMER1_COMPA_vect)
{
    2488:	1f 92       	push	r1
    248a:	0f 92       	push	r0
    248c:	00 90 5f 00 	lds	r0, 0x005F
    2490:	0f 92       	push	r0
    2492:	11 24       	eor	r1, r1
    2494:	00 90 5b 00 	lds	r0, 0x005B
    2498:	0f 92       	push	r0
    249a:	2f 93       	push	r18
    249c:	3f 93       	push	r19
    249e:	4f 93       	push	r20
    24a0:	5f 93       	push	r21
    24a2:	6f 93       	push	r22
    24a4:	7f 93       	push	r23
    24a6:	8f 93       	push	r24
    24a8:	9f 93       	push	r25
    24aa:	af 93       	push	r26
    24ac:	bf 93       	push	r27
    24ae:	ef 93       	push	r30
    24b0:	ff 93       	push	r31
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	2e 97       	sbiw	r28, 0x0e	; 14
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	cd bf       	out	0x3d, r28	; 61
    if(timer_callback != NULL)
    24c0:	80 91 6a 01 	lds	r24, 0x016A
    24c4:	90 91 6b 01 	lds	r25, 0x016B
    24c8:	89 2b       	or	r24, r25
    24ca:	31 f0       	breq	.+12     	; 0x24d8 <__vector_12+0x50>
        timer_callback();
    24cc:	80 91 6a 01 	lds	r24, 0x016A
    24d0:	90 91 6b 01 	lds	r25, 0x016B
    24d4:	fc 01       	movw	r30, r24
    24d6:	09 95       	icall
	if(sys_time >= 90000)					// if match end
    24d8:	80 91 65 01 	lds	r24, 0x0165
    24dc:	90 91 66 01 	lds	r25, 0x0166
    24e0:	a0 91 67 01 	lds	r26, 0x0167
    24e4:	b0 91 68 01 	lds	r27, 0x0168
    24e8:	80 39       	cpi	r24, 0x90	; 144
    24ea:	9f 45       	sbci	r25, 0x5F	; 95
    24ec:	a1 40       	sbci	r26, 0x01	; 1
    24ee:	b1 05       	cpc	r27, r1
    24f0:	08 f4       	brcc	.+2      	; 0x24f4 <__vector_12+0x6c>
    24f2:	83 c0       	rjmp	.+262    	; 0x25fa <__vector_12+0x172>
	{
		if(system_get_match_started())		// if the match has started before
    24f4:	0e 94 57 13 	call	0x26ae	; 0x26ae <system_get_match_started>
    24f8:	88 23       	and	r24, r24
    24fa:	09 f4       	brne	.+2      	; 0x24fe <__vector_12+0x76>
    24fc:	7e c0       	rjmp	.+252    	; 0x25fa <__vector_12+0x172>
		{
			odometry_match_end();
    24fe:	0e 94 1f 11 	call	0x223e	; 0x223e <odometry_match_end>
			while(1) {
				PORTG = ~PORTG;
    2502:	84 e3       	ldi	r24, 0x34	; 52
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	24 e3       	ldi	r18, 0x34	; 52
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	f9 01       	movw	r30, r18
    250c:	20 81       	ld	r18, Z
    250e:	20 95       	com	r18
    2510:	fc 01       	movw	r30, r24
    2512:	20 83       	st	Z, r18
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	aa e7       	ldi	r26, 0x7A	; 122
    251a:	b4 e4       	ldi	r27, 0x44	; 68
    251c:	89 83       	std	Y+1, r24	; 0x01
    251e:	9a 83       	std	Y+2, r25	; 0x02
    2520:	ab 83       	std	Y+3, r26	; 0x03
    2522:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e4       	ldi	r19, 0x40	; 64
    2528:	4c e1       	ldi	r20, 0x1C	; 28
    252a:	55 e4       	ldi	r21, 0x45	; 69
    252c:	69 81       	ldd	r22, Y+1	; 0x01
    252e:	7a 81       	ldd	r23, Y+2	; 0x02
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	9c 81       	ldd	r25, Y+4	; 0x04
    2534:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	8d 83       	std	Y+5, r24	; 0x05
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	af 83       	std	Y+7, r26	; 0x07
    2542:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	6d 81       	ldd	r22, Y+5	; 0x05
    254e:	7e 81       	ldd	r23, Y+6	; 0x06
    2550:	8f 81       	ldd	r24, Y+7	; 0x07
    2552:	98 85       	ldd	r25, Y+8	; 0x08
    2554:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    2558:	88 23       	and	r24, r24
    255a:	2c f4       	brge	.+10     	; 0x2566 <__vector_12+0xde>
		__ticks = 1;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	9a 87       	std	Y+10, r25	; 0x0a
    2562:	89 87       	std	Y+9, r24	; 0x09
    2564:	3f c0       	rjmp	.+126    	; 0x25e4 <__vector_12+0x15c>
	else if (__tmp > 65535)
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	3f ef       	ldi	r19, 0xFF	; 255
    256a:	4f e7       	ldi	r20, 0x7F	; 127
    256c:	57 e4       	ldi	r21, 0x47	; 71
    256e:	6d 81       	ldd	r22, Y+5	; 0x05
    2570:	7e 81       	ldd	r23, Y+6	; 0x06
    2572:	8f 81       	ldd	r24, Y+7	; 0x07
    2574:	98 85       	ldd	r25, Y+8	; 0x08
    2576:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    257a:	18 16       	cp	r1, r24
    257c:	4c f5       	brge	.+82     	; 0x25d0 <__vector_12+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e2       	ldi	r20, 0x20	; 32
    2584:	51 e4       	ldi	r21, 0x41	; 65
    2586:	69 81       	ldd	r22, Y+1	; 0x01
    2588:	7a 81       	ldd	r23, Y+2	; 0x02
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	9c 81       	ldd	r25, Y+4	; 0x04
    258e:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	9a 87       	std	Y+10, r25	; 0x0a
    25a4:	89 87       	std	Y+9, r24	; 0x09
    25a6:	0f c0       	rjmp	.+30     	; 0x25c6 <__vector_12+0x13e>
    25a8:	8a ef       	ldi	r24, 0xFA	; 250
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9c 87       	std	Y+12, r25	; 0x0c
    25ae:	8b 87       	std	Y+11, r24	; 0x0b
    25b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    25b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <__vector_12+0x12c>
    25b8:	9c 87       	std	Y+12, r25	; 0x0c
    25ba:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25bc:	89 85       	ldd	r24, Y+9	; 0x09
    25be:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	9a 87       	std	Y+10, r25	; 0x0a
    25c4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c6:	89 85       	ldd	r24, Y+9	; 0x09
    25c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ca:	89 2b       	or	r24, r25
    25cc:	69 f7       	brne	.-38     	; 0x25a8 <__vector_12+0x120>
    25ce:	14 c0       	rjmp	.+40     	; 0x25f8 <__vector_12+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d0:	6d 81       	ldd	r22, Y+5	; 0x05
    25d2:	7e 81       	ldd	r23, Y+6	; 0x06
    25d4:	8f 81       	ldd	r24, Y+7	; 0x07
    25d6:	98 85       	ldd	r25, Y+8	; 0x08
    25d8:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	9a 87       	std	Y+10, r25	; 0x0a
    25e2:	89 87       	std	Y+9, r24	; 0x09
    25e4:	89 85       	ldd	r24, Y+9	; 0x09
    25e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e8:	9e 87       	std	Y+14, r25	; 0x0e
    25ea:	8d 87       	std	Y+13, r24	; 0x0d
    25ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <__vector_12+0x168>
    25f4:	9e 87       	std	Y+14, r25	; 0x0e
    25f6:	8d 87       	std	Y+13, r24	; 0x0d
				_delay_ms(1000);
			}
    25f8:	84 cf       	rjmp	.-248    	; 0x2502 <__vector_12+0x7a>
	/*if((sys_time % 1000) == 0) {

		PORTG = ~PORTG;
	}*/

	sys_time++;
    25fa:	80 91 65 01 	lds	r24, 0x0165
    25fe:	90 91 66 01 	lds	r25, 0x0166
    2602:	a0 91 67 01 	lds	r26, 0x0167
    2606:	b0 91 68 01 	lds	r27, 0x0168
    260a:	01 96       	adiw	r24, 0x01	; 1
    260c:	a1 1d       	adc	r26, r1
    260e:	b1 1d       	adc	r27, r1
    2610:	80 93 65 01 	sts	0x0165, r24
    2614:	90 93 66 01 	sts	0x0166, r25
    2618:	a0 93 67 01 	sts	0x0167, r26
    261c:	b0 93 68 01 	sts	0x0168, r27


}
    2620:	2e 96       	adiw	r28, 0x0e	; 14
    2622:	0f b6       	in	r0, 0x3f	; 63
    2624:	f8 94       	cli
    2626:	de bf       	out	0x3e, r29	; 62
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	cd bf       	out	0x3d, r28	; 61
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	ff 91       	pop	r31
    2632:	ef 91       	pop	r30
    2634:	bf 91       	pop	r27
    2636:	af 91       	pop	r26
    2638:	9f 91       	pop	r25
    263a:	8f 91       	pop	r24
    263c:	7f 91       	pop	r23
    263e:	6f 91       	pop	r22
    2640:	5f 91       	pop	r21
    2642:	4f 91       	pop	r20
    2644:	3f 91       	pop	r19
    2646:	2f 91       	pop	r18
    2648:	0f 90       	pop	r0
    264a:	00 92 5b 00 	sts	0x005B, r0
    264e:	0f 90       	pop	r0
    2650:	00 92 5f 00 	sts	0x005F, r0
    2654:	0f 90       	pop	r0
    2656:	1f 90       	pop	r1
    2658:	18 95       	reti

0000265a <system_reset_system_time>:

void system_reset_system_time(void) 	{ 	sys_time = 0; 			}
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	10 92 65 01 	sts	0x0165, r1
    2666:	10 92 66 01 	sts	0x0166, r1
    266a:	10 92 67 01 	sts	0x0167, r1
    266e:	10 92 68 01 	sts	0x0168, r1
    2672:	df 91       	pop	r29
    2674:	cf 91       	pop	r28
    2676:	08 95       	ret

00002678 <system_set_match_started>:
void system_set_match_started(void) 	{ 	match_started = 1; 		}
    2678:	cf 93       	push	r28
    267a:	df 93       	push	r29
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	80 93 69 01 	sts	0x0169, r24
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	08 95       	ret

0000268c <system_get_system_time>:
uint32_t system_get_system_time(void) 	{ 	return sys_time; 		}
    268c:	cf 93       	push	r28
    268e:	df 93       	push	r29
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	80 91 65 01 	lds	r24, 0x0165
    2698:	90 91 66 01 	lds	r25, 0x0166
    269c:	a0 91 67 01 	lds	r26, 0x0167
    26a0:	b0 91 68 01 	lds	r27, 0x0168
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	df 91       	pop	r29
    26aa:	cf 91       	pop	r28
    26ac:	08 95       	ret

000026ae <system_get_match_started>:
uint8_t system_get_match_started(void) 	{ 	return match_started; 	}
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	80 91 69 01 	lds	r24, 0x0169
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	08 95       	ret

000026c0 <__vector_8>:


ISR(INT7_vect) {
    26c0:	1f 92       	push	r1
    26c2:	0f 92       	push	r0
    26c4:	00 90 5f 00 	lds	r0, 0x005F
    26c8:	0f 92       	push	r0
    26ca:	11 24       	eor	r1, r1
    26cc:	8f 93       	push	r24
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
	jumper_pulled = true;
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	80 93 6e 01 	sts	0x016E, r24
}
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	8f 91       	pop	r24
    26e2:	0f 90       	pop	r0
    26e4:	00 92 5f 00 	sts	0x005F, r0
    26e8:	0f 90       	pop	r0
    26ea:	1f 90       	pop	r1
    26ec:	18 95       	reti

000026ee <system_setup_jumper>:

static void system_setup_jumper() {
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	2e 97       	sbiw	r28, 0x0e	; 14
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61

	DDRE &= ~(1 << PIN7);			// setup pin as input
    2702:	8d e2       	ldi	r24, 0x2D	; 45
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	2d e2       	ldi	r18, 0x2D	; 45
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	f9 01       	movw	r30, r18
    270c:	20 81       	ld	r18, Z
    270e:	2f 77       	andi	r18, 0x7F	; 127
    2710:	fc 01       	movw	r30, r24
    2712:	20 83       	st	Z, r18

	PORTE |= (1 << PIN7);			// pullup
    2714:	8e e2       	ldi	r24, 0x2E	; 46
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	2e e2       	ldi	r18, 0x2E	; 46
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	f9 01       	movw	r30, r18
    271e:	20 81       	ld	r18, Z
    2720:	20 68       	ori	r18, 0x80	; 128
    2722:	fc 01       	movw	r30, r24
    2724:	20 83       	st	Z, r18

	EICRB = (1 << ISC70);			// set on status change to triggure interrupt
    2726:	8a e6       	ldi	r24, 0x6A	; 106
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	20 e4       	ldi	r18, 0x40	; 64
    272c:	fc 01       	movw	r30, r24
    272e:	20 83       	st	Z, r18

	EIMSK |= (1 << INT7);			// enable interrupt
    2730:	8d e3       	ldi	r24, 0x3D	; 61
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	2d e3       	ldi	r18, 0x3D	; 61
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	f9 01       	movw	r30, r18
    273a:	20 81       	ld	r18, Z
    273c:	20 68       	ori	r18, 0x80	; 128
    273e:	fc 01       	movw	r30, r24
    2740:	20 83       	st	Z, r18
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	a8 ec       	ldi	r26, 0xC8	; 200
    2748:	b2 e4       	ldi	r27, 0x42	; 66
    274a:	89 83       	std	Y+1, r24	; 0x01
    274c:	9a 83       	std	Y+2, r25	; 0x02
    274e:	ab 83       	std	Y+3, r26	; 0x03
    2750:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e4       	ldi	r19, 0x40	; 64
    2756:	4c e1       	ldi	r20, 0x1C	; 28
    2758:	55 e4       	ldi	r21, 0x45	; 69
    275a:	69 81       	ldd	r22, Y+1	; 0x01
    275c:	7a 81       	ldd	r23, Y+2	; 0x02
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	9c 81       	ldd	r25, Y+4	; 0x04
    2762:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	9e 83       	std	Y+6, r25	; 0x06
    276e:	af 83       	std	Y+7, r26	; 0x07
    2770:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e8       	ldi	r20, 0x80	; 128
    2778:	5f e3       	ldi	r21, 0x3F	; 63
    277a:	6d 81       	ldd	r22, Y+5	; 0x05
    277c:	7e 81       	ldd	r23, Y+6	; 0x06
    277e:	8f 81       	ldd	r24, Y+7	; 0x07
    2780:	98 85       	ldd	r25, Y+8	; 0x08
    2782:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    2786:	88 23       	and	r24, r24
    2788:	2c f4       	brge	.+10     	; 0x2794 <system_setup_jumper+0xa6>
		__ticks = 1;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9a 87       	std	Y+10, r25	; 0x0a
    2790:	89 87       	std	Y+9, r24	; 0x09
    2792:	3f c0       	rjmp	.+126    	; 0x2812 <system_setup_jumper+0x124>
	else if (__tmp > 65535)
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	3f ef       	ldi	r19, 0xFF	; 255
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	57 e4       	ldi	r21, 0x47	; 71
    279c:	6d 81       	ldd	r22, Y+5	; 0x05
    279e:	7e 81       	ldd	r23, Y+6	; 0x06
    27a0:	8f 81       	ldd	r24, Y+7	; 0x07
    27a2:	98 85       	ldd	r25, Y+8	; 0x08
    27a4:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    27a8:	18 16       	cp	r1, r24
    27aa:	4c f5       	brge	.+82     	; 0x27fe <system_setup_jumper+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e2       	ldi	r20, 0x20	; 32
    27b2:	51 e4       	ldi	r21, 0x41	; 65
    27b4:	69 81       	ldd	r22, Y+1	; 0x01
    27b6:	7a 81       	ldd	r23, Y+2	; 0x02
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	9c 81       	ldd	r25, Y+4	; 0x04
    27bc:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	bc 01       	movw	r22, r24
    27c6:	cd 01       	movw	r24, r26
    27c8:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	9a 87       	std	Y+10, r25	; 0x0a
    27d2:	89 87       	std	Y+9, r24	; 0x09
    27d4:	0f c0       	rjmp	.+30     	; 0x27f4 <system_setup_jumper+0x106>
    27d6:	8a ef       	ldi	r24, 0xFA	; 250
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	9c 87       	std	Y+12, r25	; 0x0c
    27dc:	8b 87       	std	Y+11, r24	; 0x0b
    27de:	8b 85       	ldd	r24, Y+11	; 0x0b
    27e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <system_setup_jumper+0xf4>
    27e6:	9c 87       	std	Y+12, r25	; 0x0c
    27e8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ea:	89 85       	ldd	r24, Y+9	; 0x09
    27ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	9a 87       	std	Y+10, r25	; 0x0a
    27f2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f4:	89 85       	ldd	r24, Y+9	; 0x09
    27f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f8:	89 2b       	or	r24, r25
    27fa:	69 f7       	brne	.-38     	; 0x27d6 <system_setup_jumper+0xe8>
    27fc:	14 c0       	rjmp	.+40     	; 0x2826 <system_setup_jumper+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2800:	7e 81       	ldd	r23, Y+6	; 0x06
    2802:	8f 81       	ldd	r24, Y+7	; 0x07
    2804:	98 85       	ldd	r25, Y+8	; 0x08
    2806:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9a 87       	std	Y+10, r25	; 0x0a
    2810:	89 87       	std	Y+9, r24	; 0x09
    2812:	89 85       	ldd	r24, Y+9	; 0x09
    2814:	9a 85       	ldd	r25, Y+10	; 0x0a
    2816:	9e 87       	std	Y+14, r25	; 0x0e
    2818:	8d 87       	std	Y+13, r24	; 0x0d
    281a:	8d 85       	ldd	r24, Y+13	; 0x0d
    281c:	9e 85       	ldd	r25, Y+14	; 0x0e
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <system_setup_jumper+0x130>
    2822:	9e 87       	std	Y+14, r25	; 0x0e
    2824:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);

	sei();							// enable global interrupts
    2826:	78 94       	sei
}
    2828:	2e 96       	adiw	r28, 0x0e	; 14
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	08 95       	ret

0000283a <system_wait_for_jumper>:

static void system_wait_for_jumper() {
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	2e 97       	sbiw	r28, 0x0e	; 14
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61

	while(jumper_pulled == false)		// wait for jumper_pulled t be set true
    284e:	72 c0       	rjmp	.+228    	; 0x2934 <system_wait_for_jumper+0xfa>
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	a0 e2       	ldi	r26, 0x20	; 32
    2856:	b1 e4       	ldi	r27, 0x41	; 65
    2858:	89 83       	std	Y+1, r24	; 0x01
    285a:	9a 83       	std	Y+2, r25	; 0x02
    285c:	ab 83       	std	Y+3, r26	; 0x03
    285e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e4       	ldi	r19, 0x40	; 64
    2864:	4c e1       	ldi	r20, 0x1C	; 28
    2866:	55 e4       	ldi	r21, 0x45	; 69
    2868:	69 81       	ldd	r22, Y+1	; 0x01
    286a:	7a 81       	ldd	r23, Y+2	; 0x02
    286c:	8b 81       	ldd	r24, Y+3	; 0x03
    286e:	9c 81       	ldd	r25, Y+4	; 0x04
    2870:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	8d 83       	std	Y+5, r24	; 0x05
    287a:	9e 83       	std	Y+6, r25	; 0x06
    287c:	af 83       	std	Y+7, r26	; 0x07
    287e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e8       	ldi	r20, 0x80	; 128
    2886:	5f e3       	ldi	r21, 0x3F	; 63
    2888:	6d 81       	ldd	r22, Y+5	; 0x05
    288a:	7e 81       	ldd	r23, Y+6	; 0x06
    288c:	8f 81       	ldd	r24, Y+7	; 0x07
    288e:	98 85       	ldd	r25, Y+8	; 0x08
    2890:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    2894:	88 23       	and	r24, r24
    2896:	2c f4       	brge	.+10     	; 0x28a2 <system_wait_for_jumper+0x68>
		__ticks = 1;
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	9a 87       	std	Y+10, r25	; 0x0a
    289e:	89 87       	std	Y+9, r24	; 0x09
    28a0:	3f c0       	rjmp	.+126    	; 0x2920 <system_wait_for_jumper+0xe6>
	else if (__tmp > 65535)
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	3f ef       	ldi	r19, 0xFF	; 255
    28a6:	4f e7       	ldi	r20, 0x7F	; 127
    28a8:	57 e4       	ldi	r21, 0x47	; 71
    28aa:	6d 81       	ldd	r22, Y+5	; 0x05
    28ac:	7e 81       	ldd	r23, Y+6	; 0x06
    28ae:	8f 81       	ldd	r24, Y+7	; 0x07
    28b0:	98 85       	ldd	r25, Y+8	; 0x08
    28b2:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    28b6:	18 16       	cp	r1, r24
    28b8:	4c f5       	brge	.+82     	; 0x290c <system_wait_for_jumper+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e2       	ldi	r20, 0x20	; 32
    28c0:	51 e4       	ldi	r21, 0x41	; 65
    28c2:	69 81       	ldd	r22, Y+1	; 0x01
    28c4:	7a 81       	ldd	r23, Y+2	; 0x02
    28c6:	8b 81       	ldd	r24, Y+3	; 0x03
    28c8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ca:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	9a 87       	std	Y+10, r25	; 0x0a
    28e0:	89 87       	std	Y+9, r24	; 0x09
    28e2:	0f c0       	rjmp	.+30     	; 0x2902 <system_wait_for_jumper+0xc8>
    28e4:	8a ef       	ldi	r24, 0xFA	; 250
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	9c 87       	std	Y+12, r25	; 0x0c
    28ea:	8b 87       	std	Y+11, r24	; 0x0b
    28ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <system_wait_for_jumper+0xb6>
    28f4:	9c 87       	std	Y+12, r25	; 0x0c
    28f6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f8:	89 85       	ldd	r24, Y+9	; 0x09
    28fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	9a 87       	std	Y+10, r25	; 0x0a
    2900:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2902:	89 85       	ldd	r24, Y+9	; 0x09
    2904:	9a 85       	ldd	r25, Y+10	; 0x0a
    2906:	89 2b       	or	r24, r25
    2908:	69 f7       	brne	.-38     	; 0x28e4 <system_wait_for_jumper+0xaa>
    290a:	14 c0       	rjmp	.+40     	; 0x2934 <system_wait_for_jumper+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290c:	6d 81       	ldd	r22, Y+5	; 0x05
    290e:	7e 81       	ldd	r23, Y+6	; 0x06
    2910:	8f 81       	ldd	r24, Y+7	; 0x07
    2912:	98 85       	ldd	r25, Y+8	; 0x08
    2914:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	9a 87       	std	Y+10, r25	; 0x0a
    291e:	89 87       	std	Y+9, r24	; 0x09
    2920:	89 85       	ldd	r24, Y+9	; 0x09
    2922:	9a 85       	ldd	r25, Y+10	; 0x0a
    2924:	9e 87       	std	Y+14, r25	; 0x0e
    2926:	8d 87       	std	Y+13, r24	; 0x0d
    2928:	8d 85       	ldd	r24, Y+13	; 0x0d
    292a:	9e 85       	ldd	r25, Y+14	; 0x0e
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <system_wait_for_jumper+0xf2>
    2930:	9e 87       	std	Y+14, r25	; 0x0e
    2932:	8d 87       	std	Y+13, r24	; 0x0d
    2934:	80 91 6e 01 	lds	r24, 0x016E
    2938:	88 23       	and	r24, r24
    293a:	09 f4       	brne	.+2      	; 0x293e <system_wait_for_jumper+0x104>
    293c:	89 cf       	rjmp	.-238    	; 0x2850 <system_wait_for_jumper+0x16>
		_delay_ms(10);

}
    293e:	2e 96       	adiw	r28, 0x0e	; 14
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	df 91       	pop	r29
    294c:	cf 91       	pop	r28
    294e:	08 95       	ret

00002950 <system_init>:
 *	Function: 		void system_init(void)
 *	Parameters: 	void
 *	Description:	initing all the things
 */
void system_init(void)
{
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
    2958:	aa 97       	sbiw	r28, 0x2a	; 42
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	f8 94       	cli
    295e:	de bf       	out	0x3e, r29	; 62
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	cd bf       	out	0x3d, r28	; 61
	// sets debouncer
	timer_register_callback(gpio_debouncer);
    2964:	88 e5       	ldi	r24, 0x58	; 88
    2966:	9a e0       	ldi	r25, 0x0A	; 10
    2968:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <timer_register_callback>
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	a8 ec       	ldi	r26, 0xC8	; 200
    2972:	b2 e4       	ldi	r27, 0x42	; 66
    2974:	89 83       	std	Y+1, r24	; 0x01
    2976:	9a 83       	std	Y+2, r25	; 0x02
    2978:	ab 83       	std	Y+3, r26	; 0x03
    297a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e4       	ldi	r19, 0x40	; 64
    2980:	4c e1       	ldi	r20, 0x1C	; 28
    2982:	55 e4       	ldi	r21, 0x45	; 69
    2984:	69 81       	ldd	r22, Y+1	; 0x01
    2986:	7a 81       	ldd	r23, Y+2	; 0x02
    2988:	8b 81       	ldd	r24, Y+3	; 0x03
    298a:	9c 81       	ldd	r25, Y+4	; 0x04
    298c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	8d 83       	std	Y+5, r24	; 0x05
    2996:	9e 83       	std	Y+6, r25	; 0x06
    2998:	af 83       	std	Y+7, r26	; 0x07
    299a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	6d 81       	ldd	r22, Y+5	; 0x05
    29a6:	7e 81       	ldd	r23, Y+6	; 0x06
    29a8:	8f 81       	ldd	r24, Y+7	; 0x07
    29aa:	98 85       	ldd	r25, Y+8	; 0x08
    29ac:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    29b0:	88 23       	and	r24, r24
    29b2:	2c f4       	brge	.+10     	; 0x29be <system_init+0x6e>
		__ticks = 1;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9a 87       	std	Y+10, r25	; 0x0a
    29ba:	89 87       	std	Y+9, r24	; 0x09
    29bc:	3f c0       	rjmp	.+126    	; 0x2a3c <system_init+0xec>
	else if (__tmp > 65535)
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	3f ef       	ldi	r19, 0xFF	; 255
    29c2:	4f e7       	ldi	r20, 0x7F	; 127
    29c4:	57 e4       	ldi	r21, 0x47	; 71
    29c6:	6d 81       	ldd	r22, Y+5	; 0x05
    29c8:	7e 81       	ldd	r23, Y+6	; 0x06
    29ca:	8f 81       	ldd	r24, Y+7	; 0x07
    29cc:	98 85       	ldd	r25, Y+8	; 0x08
    29ce:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    29d2:	18 16       	cp	r1, r24
    29d4:	4c f5       	brge	.+82     	; 0x2a28 <system_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e2       	ldi	r20, 0x20	; 32
    29dc:	51 e4       	ldi	r21, 0x41	; 65
    29de:	69 81       	ldd	r22, Y+1	; 0x01
    29e0:	7a 81       	ldd	r23, Y+2	; 0x02
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	9c 81       	ldd	r25, Y+4	; 0x04
    29e6:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9a 87       	std	Y+10, r25	; 0x0a
    29fc:	89 87       	std	Y+9, r24	; 0x09
    29fe:	0f c0       	rjmp	.+30     	; 0x2a1e <system_init+0xce>
    2a00:	8a ef       	ldi	r24, 0xFA	; 250
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9c 87       	std	Y+12, r25	; 0x0c
    2a06:	8b 87       	std	Y+11, r24	; 0x0b
    2a08:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <system_init+0xbc>
    2a10:	9c 87       	std	Y+12, r25	; 0x0c
    2a12:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a14:	89 85       	ldd	r24, Y+9	; 0x09
    2a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	9a 87       	std	Y+10, r25	; 0x0a
    2a1c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1e:	89 85       	ldd	r24, Y+9	; 0x09
    2a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a22:	89 2b       	or	r24, r25
    2a24:	69 f7       	brne	.-38     	; 0x2a00 <system_init+0xb0>
    2a26:	14 c0       	rjmp	.+40     	; 0x2a50 <system_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a28:	6d 81       	ldd	r22, Y+5	; 0x05
    2a2a:	7e 81       	ldd	r23, Y+6	; 0x06
    2a2c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a2e:	98 85       	ldd	r25, Y+8	; 0x08
    2a30:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9a 87       	std	Y+10, r25	; 0x0a
    2a3a:	89 87       	std	Y+9, r24	; 0x09
    2a3c:	89 85       	ldd	r24, Y+9	; 0x09
    2a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a40:	9e 87       	std	Y+14, r25	; 0x0e
    2a42:	8d 87       	std	Y+13, r24	; 0x0d
    2a44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <system_init+0xf8>
    2a4c:	9e 87       	std	Y+14, r25	; 0x0e
    2a4e:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);

	gpio_register_pin(0, GPIO_DIRECTION_INPUT, true);									// test detection
    2a50:	41 e0       	ldi	r20, 0x01	; 1
    2a52:	60 e0       	ldi	r22, 0x00	; 0
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	0e 94 48 08 	call	0x1090	; 0x1090 <gpio_register_pin>
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	a8 ec       	ldi	r26, 0xC8	; 200
    2a60:	b2 e4       	ldi	r27, 0x42	; 66
    2a62:	8f 87       	std	Y+15, r24	; 0x0f
    2a64:	98 8b       	std	Y+16, r25	; 0x10
    2a66:	a9 8b       	std	Y+17, r26	; 0x11
    2a68:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e4       	ldi	r19, 0x40	; 64
    2a6e:	4c e1       	ldi	r20, 0x1C	; 28
    2a70:	55 e4       	ldi	r21, 0x45	; 69
    2a72:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a74:	78 89       	ldd	r23, Y+16	; 0x10
    2a76:	89 89       	ldd	r24, Y+17	; 0x11
    2a78:	9a 89       	ldd	r25, Y+18	; 0x12
    2a7a:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	8b 8b       	std	Y+19, r24	; 0x13
    2a84:	9c 8b       	std	Y+20, r25	; 0x14
    2a86:	ad 8b       	std	Y+21, r26	; 0x15
    2a88:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e8       	ldi	r20, 0x80	; 128
    2a90:	5f e3       	ldi	r21, 0x3F	; 63
    2a92:	6b 89       	ldd	r22, Y+19	; 0x13
    2a94:	7c 89       	ldd	r23, Y+20	; 0x14
    2a96:	8d 89       	ldd	r24, Y+21	; 0x15
    2a98:	9e 89       	ldd	r25, Y+22	; 0x16
    2a9a:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    2a9e:	88 23       	and	r24, r24
    2aa0:	2c f4       	brge	.+10     	; 0x2aac <system_init+0x15c>
		__ticks = 1;
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	98 8f       	std	Y+24, r25	; 0x18
    2aa8:	8f 8b       	std	Y+23, r24	; 0x17
    2aaa:	3f c0       	rjmp	.+126    	; 0x2b2a <system_init+0x1da>
	else if (__tmp > 65535)
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	3f ef       	ldi	r19, 0xFF	; 255
    2ab0:	4f e7       	ldi	r20, 0x7F	; 127
    2ab2:	57 e4       	ldi	r21, 0x47	; 71
    2ab4:	6b 89       	ldd	r22, Y+19	; 0x13
    2ab6:	7c 89       	ldd	r23, Y+20	; 0x14
    2ab8:	8d 89       	ldd	r24, Y+21	; 0x15
    2aba:	9e 89       	ldd	r25, Y+22	; 0x16
    2abc:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    2ac0:	18 16       	cp	r1, r24
    2ac2:	4c f5       	brge	.+82     	; 0x2b16 <system_init+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e2       	ldi	r20, 0x20	; 32
    2aca:	51 e4       	ldi	r21, 0x41	; 65
    2acc:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ace:	78 89       	ldd	r23, Y+16	; 0x10
    2ad0:	89 89       	ldd	r24, Y+17	; 0x11
    2ad2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ad4:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	bc 01       	movw	r22, r24
    2ade:	cd 01       	movw	r24, r26
    2ae0:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	98 8f       	std	Y+24, r25	; 0x18
    2aea:	8f 8b       	std	Y+23, r24	; 0x17
    2aec:	0f c0       	rjmp	.+30     	; 0x2b0c <system_init+0x1bc>
    2aee:	8a ef       	ldi	r24, 0xFA	; 250
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	9a 8f       	std	Y+26, r25	; 0x1a
    2af4:	89 8f       	std	Y+25, r24	; 0x19
    2af6:	89 8d       	ldd	r24, Y+25	; 0x19
    2af8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	f1 f7       	brne	.-4      	; 0x2afa <system_init+0x1aa>
    2afe:	9a 8f       	std	Y+26, r25	; 0x1a
    2b00:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b02:	8f 89       	ldd	r24, Y+23	; 0x17
    2b04:	98 8d       	ldd	r25, Y+24	; 0x18
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	98 8f       	std	Y+24, r25	; 0x18
    2b0a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b10:	89 2b       	or	r24, r25
    2b12:	69 f7       	brne	.-38     	; 0x2aee <system_init+0x19e>
    2b14:	14 c0       	rjmp	.+40     	; 0x2b3e <system_init+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b16:	6b 89       	ldd	r22, Y+19	; 0x13
    2b18:	7c 89       	ldd	r23, Y+20	; 0x14
    2b1a:	8d 89       	ldd	r24, Y+21	; 0x15
    2b1c:	9e 89       	ldd	r25, Y+22	; 0x16
    2b1e:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	98 8f       	std	Y+24, r25	; 0x18
    2b28:	8f 8b       	std	Y+23, r24	; 0x17
    2b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2e:	9c 8f       	std	Y+28, r25	; 0x1c
    2b30:	8b 8f       	std	Y+27, r24	; 0x1b
    2b32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <system_init+0x1e6>
    2b3a:	9c 8f       	std	Y+28, r25	; 0x1c
    2b3c:	8b 8f       	std	Y+27, r24	; 0x1b

	// small delay
	_delay_ms(100);

	DDRG = 0xff;
    2b3e:	83 e3       	ldi	r24, 0x33	; 51
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	2f ef       	ldi	r18, 0xFF	; 255
    2b44:	fc 01       	movw	r30, r24
    2b46:	20 83       	st	Z, r18
	PORTG = 0x00;
    2b48:	84 e3       	ldi	r24, 0x34	; 52
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	10 82       	st	Z, r1

	// waiting for jumper
	timer_init(1000);
    2b50:	88 ee       	ldi	r24, 0xE8	; 232
    2b52:	93 e0       	ldi	r25, 0x03	; 3
    2b54:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <timer_init>
	CAN_Init(1);
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	0e 94 9a 06 	call	0xd34	; 0xd34 <CAN_Init>
	UART1_Init(UART1_BAUD, UART_ISR_OFF);
    2b5e:	40 e0       	ldi	r20, 0x00	; 0
    2b60:	60 e8       	ldi	r22, 0x80	; 128
    2b62:	75 e2       	ldi	r23, 0x25	; 37
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <UART1_Init>
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	aa ef       	ldi	r26, 0xFA	; 250
    2b72:	b3 e4       	ldi	r27, 0x43	; 67
    2b74:	8d 8f       	std	Y+29, r24	; 0x1d
    2b76:	9e 8f       	std	Y+30, r25	; 0x1e
    2b78:	af 8f       	std	Y+31, r26	; 0x1f
    2b7a:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e4       	ldi	r19, 0x40	; 64
    2b80:	4c e1       	ldi	r20, 0x1C	; 28
    2b82:	55 e4       	ldi	r21, 0x45	; 69
    2b84:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2b86:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2b88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b8a:	98 a1       	ldd	r25, Y+32	; 0x20
    2b8c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	89 a3       	std	Y+33, r24	; 0x21
    2b96:	9a a3       	std	Y+34, r25	; 0x22
    2b98:	ab a3       	std	Y+35, r26	; 0x23
    2b9a:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e8       	ldi	r20, 0x80	; 128
    2ba2:	5f e3       	ldi	r21, 0x3F	; 63
    2ba4:	69 a1       	ldd	r22, Y+33	; 0x21
    2ba6:	7a a1       	ldd	r23, Y+34	; 0x22
    2ba8:	8b a1       	ldd	r24, Y+35	; 0x23
    2baa:	9c a1       	ldd	r25, Y+36	; 0x24
    2bac:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    2bb0:	88 23       	and	r24, r24
    2bb2:	2c f4       	brge	.+10     	; 0x2bbe <system_init+0x26e>
		__ticks = 1;
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	9e a3       	std	Y+38, r25	; 0x26
    2bba:	8d a3       	std	Y+37, r24	; 0x25
    2bbc:	3f c0       	rjmp	.+126    	; 0x2c3c <system_init+0x2ec>
	else if (__tmp > 65535)
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	3f ef       	ldi	r19, 0xFF	; 255
    2bc2:	4f e7       	ldi	r20, 0x7F	; 127
    2bc4:	57 e4       	ldi	r21, 0x47	; 71
    2bc6:	69 a1       	ldd	r22, Y+33	; 0x21
    2bc8:	7a a1       	ldd	r23, Y+34	; 0x22
    2bca:	8b a1       	ldd	r24, Y+35	; 0x23
    2bcc:	9c a1       	ldd	r25, Y+36	; 0x24
    2bce:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    2bd2:	18 16       	cp	r1, r24
    2bd4:	4c f5       	brge	.+82     	; 0x2c28 <system_init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	40 e2       	ldi	r20, 0x20	; 32
    2bdc:	51 e4       	ldi	r21, 0x41	; 65
    2bde:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2be0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2be2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2be4:	98 a1       	ldd	r25, Y+32	; 0x20
    2be6:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	bc 01       	movw	r22, r24
    2bf0:	cd 01       	movw	r24, r26
    2bf2:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	9e a3       	std	Y+38, r25	; 0x26
    2bfc:	8d a3       	std	Y+37, r24	; 0x25
    2bfe:	0f c0       	rjmp	.+30     	; 0x2c1e <system_init+0x2ce>
    2c00:	8a ef       	ldi	r24, 0xFA	; 250
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	98 a7       	std	Y+40, r25	; 0x28
    2c06:	8f a3       	std	Y+39, r24	; 0x27
    2c08:	8f a1       	ldd	r24, Y+39	; 0x27
    2c0a:	98 a5       	ldd	r25, Y+40	; 0x28
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <system_init+0x2bc>
    2c10:	98 a7       	std	Y+40, r25	; 0x28
    2c12:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c14:	8d a1       	ldd	r24, Y+37	; 0x25
    2c16:	9e a1       	ldd	r25, Y+38	; 0x26
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	9e a3       	std	Y+38, r25	; 0x26
    2c1c:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c20:	9e a1       	ldd	r25, Y+38	; 0x26
    2c22:	89 2b       	or	r24, r25
    2c24:	69 f7       	brne	.-38     	; 0x2c00 <system_init+0x2b0>
    2c26:	14 c0       	rjmp	.+40     	; 0x2c50 <system_init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c28:	69 a1       	ldd	r22, Y+33	; 0x21
    2c2a:	7a a1       	ldd	r23, Y+34	; 0x22
    2c2c:	8b a1       	ldd	r24, Y+35	; 0x23
    2c2e:	9c a1       	ldd	r25, Y+36	; 0x24
    2c30:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	9e a3       	std	Y+38, r25	; 0x26
    2c3a:	8d a3       	std	Y+37, r24	; 0x25
    2c3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c40:	9a a7       	std	Y+42, r25	; 0x2a
    2c42:	89 a7       	std	Y+41, r24	; 0x29
    2c44:	89 a5       	ldd	r24, Y+41	; 0x29
    2c46:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <system_init+0x2f8>
    2c4c:	9a a7       	std	Y+42, r25	; 0x2a
    2c4e:	89 a7       	std	Y+41, r24	; 0x29

	_delay_ms(500);

	system_setup_jumper();
    2c50:	0e 94 77 13 	call	0x26ee	; 0x26ee <system_setup_jumper>

	ping_actuator();
    2c54:	0e 94 ac 00 	call	0x158	; 0x158 <ping_actuator>
	//debug_init();


	// waiting for jumper
	//system_wait_for_jumper();
	PORTG = 0xff;
    2c58:	84 e3       	ldi	r24, 0x34	; 52
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	2f ef       	ldi	r18, 0xFF	; 255
    2c5e:	fc 01       	movw	r30, r24
    2c60:	20 83       	st	Z, r18


	system_reset_system_time();															// reset system time
    2c62:	0e 94 2d 13 	call	0x265a	; 0x265a <system_reset_system_time>
	system_set_match_started();															// match has started!
    2c66:	0e 94 3c 13 	call	0x2678	; 0x2678 <system_set_match_started>

}
    2c6a:	aa 96       	adiw	r28, 0x2a	; 42
    2c6c:	0f b6       	in	r0, 0x3f	; 63
    2c6e:	f8 94       	cli
    2c70:	de bf       	out	0x3e, r29	; 62
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	cd bf       	out	0x3d, r28	; 61
    2c76:	df 91       	pop	r29
    2c78:	cf 91       	pop	r28
    2c7a:	08 95       	ret

00002c7c <UART0_Init>:
* Parameters        : unsigned int baud
					  char isrOnOff
* Return Value      : void
*********************************************************************************/
void UART0_Init(unsigned long baud, char isrOnOff)
{
    2c7c:	cf 93       	push	r28
    2c7e:	df 93       	push	r29
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	27 97       	sbiw	r28, 0x07	; 7
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	f8 94       	cli
    2c8a:	de bf       	out	0x3e, r29	; 62
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	cd bf       	out	0x3d, r28	; 61
    2c90:	6b 83       	std	Y+3, r22	; 0x03
    2c92:	7c 83       	std	Y+4, r23	; 0x04
    2c94:	8d 83       	std	Y+5, r24	; 0x05
    2c96:	9e 83       	std	Y+6, r25	; 0x06
    2c98:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR0A = 0;
    2c9a:	80 ec       	ldi	r24, 0xC0	; 192
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	10 82       	st	Z, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    2ca2:	81 ec       	ldi	r24, 0xC1	; 193
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	28 e1       	ldi	r18, 0x18	; 24
    2ca8:	fc 01       	movw	r30, r24
    2caa:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    2cac:	82 ec       	ldi	r24, 0xC2	; 194
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	26 e0       	ldi	r18, 0x06	; 6
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    2cb6:	8f 81       	ldd	r24, Y+7	; 0x07
    2cb8:	81 30       	cpi	r24, 0x01	; 1
    2cba:	91 f4       	brne	.+36     	; 0x2ce0 <UART0_Init+0x64>
	{
		UCSR0B |= ((1 << RXCIE0) | (1 << TXCIE0));
    2cbc:	81 ec       	ldi	r24, 0xC1	; 193
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	21 ec       	ldi	r18, 0xC1	; 193
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	f9 01       	movw	r30, r18
    2cc6:	20 81       	ld	r18, Z
    2cc8:	20 6c       	ori	r18, 0xC0	; 192
    2cca:	fc 01       	movw	r30, r24
    2ccc:	20 83       	st	Z, r18
		SREG |= 0x80;
    2cce:	8f e5       	ldi	r24, 0x5F	; 95
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	2f e5       	ldi	r18, 0x5F	; 95
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	f9 01       	movw	r30, r18
    2cd8:	20 81       	ld	r18, Z
    2cda:	20 68       	ori	r18, 0x80	; 128
    2cdc:	fc 01       	movw	r30, r24
    2cde:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    2ce0:	6b 81       	ldd	r22, Y+3	; 0x03
    2ce2:	7c 81       	ldd	r23, Y+4	; 0x04
    2ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce8:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__floatunsisf>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e8       	ldi	r20, 0x80	; 128
    2cf6:	51 e4       	ldi	r21, 0x41	; 65
    2cf8:	bc 01       	movw	r22, r24
    2cfa:	cd 01       	movw	r24, r26
    2cfc:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	9c 01       	movw	r18, r24
    2d06:	ad 01       	movw	r20, r26
    2d08:	60 e8       	ldi	r22, 0x80	; 128
    2d0a:	76 e9       	ldi	r23, 0x96	; 150
    2d0c:	88 e1       	ldi	r24, 0x18	; 24
    2d0e:	9b e4       	ldi	r25, 0x4B	; 75
    2d10:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__divsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	40 e8       	ldi	r20, 0x80	; 128
    2d1e:	5f e3       	ldi	r21, 0x3F	; 63
    2d20:	bc 01       	movw	r22, r24
    2d22:	cd 01       	movw	r24, r26
    2d24:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__subsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e0       	ldi	r20, 0x00	; 0
    2d32:	5f e3       	ldi	r21, 0x3F	; 63
    2d34:	bc 01       	movw	r22, r24
    2d36:	cd 01       	movw	r24, r26
    2d38:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__addsf3>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	bc 01       	movw	r22, r24
    2d42:	cd 01       	movw	r24, r26
    2d44:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	9a 83       	std	Y+2, r25	; 0x02
    2d4e:	89 83       	std	Y+1, r24	; 0x01

	UBRR0H = temp >> 8;
    2d50:	85 ec       	ldi	r24, 0xC5	; 197
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	29 81       	ldd	r18, Y+1	; 0x01
    2d56:	3a 81       	ldd	r19, Y+2	; 0x02
    2d58:	23 2f       	mov	r18, r19
    2d5a:	33 27       	eor	r19, r19
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	20 83       	st	Z, r18
	UBRR0L = temp;
    2d60:	84 ec       	ldi	r24, 0xC4	; 196
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	29 81       	ldd	r18, Y+1	; 0x01
    2d66:	fc 01       	movw	r30, r24
    2d68:	20 83       	st	Z, r18
}
    2d6a:	27 96       	adiw	r28, 0x07	; 7
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	08 95       	ret

00002d7c <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    2d7c:	1f 92       	push	r1
    2d7e:	0f 92       	push	r0
    2d80:	00 90 5f 00 	lds	r0, 0x005F
    2d84:	0f 92       	push	r0
    2d86:	11 24       	eor	r1, r1
    2d88:	00 90 5b 00 	lds	r0, 0x005B
    2d8c:	0f 92       	push	r0
    2d8e:	2f 93       	push	r18
    2d90:	3f 93       	push	r19
    2d92:	8f 93       	push	r24
    2d94:	9f 93       	push	r25
    2d96:	ef 93       	push	r30
    2d98:	ff 93       	push	r31
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    2da2:	80 91 b0 01 	lds	r24, 0x01B0
    2da6:	88 23       	and	r24, r24
    2da8:	d1 f0       	breq	.+52     	; 0x2dde <__vector_23+0x62>
	{
		tx0_counter--;
    2daa:	80 91 b0 01 	lds	r24, 0x01B0
    2dae:	81 50       	subi	r24, 0x01	; 1
    2db0:	80 93 b0 01 	sts	0x01B0, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    2db4:	86 ec       	ldi	r24, 0xC6	; 198
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	20 91 b1 01 	lds	r18, 0x01B1
    2dbc:	22 2f       	mov	r18, r18
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	21 59       	subi	r18, 0x91	; 145
    2dc2:	3e 4f       	sbci	r19, 0xFE	; 254
    2dc4:	f9 01       	movw	r30, r18
    2dc6:	20 81       	ld	r18, Z
    2dc8:	fc 01       	movw	r30, r24
    2dca:	20 83       	st	Z, r18
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    2dcc:	80 91 b1 01 	lds	r24, 0x01B1
    2dd0:	8f 5f       	subi	r24, 0xFF	; 255
    2dd2:	80 93 b1 01 	sts	0x01B1, r24
    2dd6:	80 34       	cpi	r24, 0x40	; 64
    2dd8:	11 f4       	brne	.+4      	; 0x2dde <__vector_23+0x62>
			tx0_rd_index = 0;
    2dda:	10 92 b1 01 	sts	0x01B1, r1
	}
}
    2dde:	df 91       	pop	r29
    2de0:	cf 91       	pop	r28
    2de2:	ff 91       	pop	r31
    2de4:	ef 91       	pop	r30
    2de6:	9f 91       	pop	r25
    2de8:	8f 91       	pop	r24
    2dea:	3f 91       	pop	r19
    2dec:	2f 91       	pop	r18
    2dee:	0f 90       	pop	r0
    2df0:	00 92 5b 00 	sts	0x005B, r0
    2df4:	0f 90       	pop	r0
    2df6:	00 92 5f 00 	sts	0x005F, r0
    2dfa:	0f 90       	pop	r0
    2dfc:	1f 90       	pop	r1
    2dfe:	18 95       	reti

00002e00 <UART0_Write>:
/****************************************************************************************************************************************
Slanje podataka USART0 modulom
****************************************************************************************************************************************/

void UART0_Write(unsigned char data)
{
    2e00:	cf 93       	push	r28
    2e02:	df 93       	push	r29
    2e04:	1f 92       	push	r1
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR0B >> TXCIE0) & 0x01)
    2e0c:	81 ec       	ldi	r24, 0xC1	; 193
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	fc 01       	movw	r30, r24
    2e12:	80 81       	ld	r24, Z
    2e14:	82 95       	swap	r24
    2e16:	86 95       	lsr	r24
    2e18:	86 95       	lsr	r24
    2e1a:	83 70       	andi	r24, 0x03	; 3
    2e1c:	88 2f       	mov	r24, r24
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	81 70       	andi	r24, 0x01	; 1
    2e22:	99 27       	eor	r25, r25
    2e24:	89 2b       	or	r24, r25
    2e26:	99 f1       	breq	.+102    	; 0x2e8e <UART0_Write+0x8e>
	{
		while(tx0_counter == TX0_BUFFER_SIZE);
    2e28:	00 00       	nop
    2e2a:	80 91 b0 01 	lds	r24, 0x01B0
    2e2e:	80 34       	cpi	r24, 0x40	; 64
    2e30:	e1 f3       	breq	.-8      	; 0x2e2a <UART0_Write+0x2a>

		cli();
    2e32:	f8 94       	cli

		if(tx0_counter || (UCSR0A & 0x20) == 0)
    2e34:	80 91 b0 01 	lds	r24, 0x01B0
    2e38:	88 23       	and	r24, r24
    2e3a:	51 f4       	brne	.+20     	; 0x2e50 <UART0_Write+0x50>
    2e3c:	80 ec       	ldi	r24, 0xC0	; 192
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	fc 01       	movw	r30, r24
    2e42:	80 81       	ld	r24, Z
    2e44:	88 2f       	mov	r24, r24
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	80 72       	andi	r24, 0x20	; 32
    2e4a:	99 27       	eor	r25, r25
    2e4c:	89 2b       	or	r24, r25
    2e4e:	c1 f4       	brne	.+48     	; 0x2e80 <UART0_Write+0x80>
		{
			tx0_buffer[tx0_wr_index] = data;
    2e50:	80 91 af 01 	lds	r24, 0x01AF
    2e54:	88 2f       	mov	r24, r24
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	81 59       	subi	r24, 0x91	; 145
    2e5a:	9e 4f       	sbci	r25, 0xFE	; 254
    2e5c:	29 81       	ldd	r18, Y+1	; 0x01
    2e5e:	fc 01       	movw	r30, r24
    2e60:	20 83       	st	Z, r18
			if(++tx0_wr_index == TX0_BUFFER_SIZE)
    2e62:	80 91 af 01 	lds	r24, 0x01AF
    2e66:	8f 5f       	subi	r24, 0xFF	; 255
    2e68:	80 93 af 01 	sts	0x01AF, r24
    2e6c:	80 34       	cpi	r24, 0x40	; 64
    2e6e:	11 f4       	brne	.+4      	; 0x2e74 <UART0_Write+0x74>
				tx0_wr_index = 0;
    2e70:	10 92 af 01 	sts	0x01AF, r1

			tx0_counter++;
    2e74:	80 91 b0 01 	lds	r24, 0x01B0
    2e78:	8f 5f       	subi	r24, 0xFF	; 255
    2e7a:	80 93 b0 01 	sts	0x01B0, r24
    2e7e:	05 c0       	rjmp	.+10     	; 0x2e8a <UART0_Write+0x8a>
		}
		else
			UDR0 = data;
    2e80:	86 ec       	ldi	r24, 0xC6	; 198
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	29 81       	ldd	r18, Y+1	; 0x01
    2e86:	fc 01       	movw	r30, r24
    2e88:	20 83       	st	Z, r18

		sei();
    2e8a:	78 94       	sei
    2e8c:	03 c0       	rjmp	.+6      	; 0x2e94 <UART0_Write+0x94>
	}
	else
		altUart0Write(data);
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
    2e90:	0e 94 ef 18 	call	0x31de	; 0x31de <altUart0Write>
}
    2e94:	0f 90       	pop	r0
    2e96:	df 91       	pop	r29
    2e98:	cf 91       	pop	r28
    2e9a:	08 95       	ret

00002e9c <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    2e9c:	1f 92       	push	r1
    2e9e:	0f 92       	push	r0
    2ea0:	00 90 5f 00 	lds	r0, 0x005F
    2ea4:	0f 92       	push	r0
    2ea6:	11 24       	eor	r1, r1
    2ea8:	00 90 5b 00 	lds	r0, 0x005B
    2eac:	0f 92       	push	r0
    2eae:	2f 93       	push	r18
    2eb0:	3f 93       	push	r19
    2eb2:	8f 93       	push	r24
    2eb4:	9f 93       	push	r25
    2eb6:	ef 93       	push	r30
    2eb8:	ff 93       	push	r31
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	1f 92       	push	r1
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    2ec4:	80 ec       	ldi	r24, 0xC0	; 192
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	fc 01       	movw	r30, r24
    2eca:	80 81       	ld	r24, Z
    2ecc:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	88 2f       	mov	r24, r24
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	8c 71       	andi	r24, 0x1C	; 28
    2ed6:	99 27       	eor	r25, r25
    2ed8:	89 2b       	or	r24, r25
    2eda:	d1 f4       	brne	.+52     	; 0x2f10 <__vector_21+0x74>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    2edc:	80 91 f2 01 	lds	r24, 0x01F2
    2ee0:	88 2f       	mov	r24, r24
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	26 ec       	ldi	r18, 0xC6	; 198
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	f9 01       	movw	r30, r18
    2eea:	20 81       	ld	r18, Z
    2eec:	8e 54       	subi	r24, 0x4E	; 78
    2eee:	9e 4f       	sbci	r25, 0xFE	; 254
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    2ef4:	80 91 f2 01 	lds	r24, 0x01F2
    2ef8:	8f 5f       	subi	r24, 0xFF	; 255
    2efa:	80 93 f2 01 	sts	0x01F2, r24
    2efe:	80 34       	cpi	r24, 0x40	; 64
    2f00:	11 f4       	brne	.+4      	; 0x2f06 <__vector_21+0x6a>
			rx0_wr_index = 0;
    2f02:	10 92 f2 01 	sts	0x01F2, r1

		rx0_counter++;
    2f06:	80 91 f3 01 	lds	r24, 0x01F3
    2f0a:	8f 5f       	subi	r24, 0xFF	; 255
    2f0c:	80 93 f3 01 	sts	0x01F3, r24
	}
}
    2f10:	0f 90       	pop	r0
    2f12:	df 91       	pop	r29
    2f14:	cf 91       	pop	r28
    2f16:	ff 91       	pop	r31
    2f18:	ef 91       	pop	r30
    2f1a:	9f 91       	pop	r25
    2f1c:	8f 91       	pop	r24
    2f1e:	3f 91       	pop	r19
    2f20:	2f 91       	pop	r18
    2f22:	0f 90       	pop	r0
    2f24:	00 92 5b 00 	sts	0x005B, r0
    2f28:	0f 90       	pop	r0
    2f2a:	00 92 5f 00 	sts	0x005F, r0
    2f2e:	0f 90       	pop	r0
    2f30:	1f 90       	pop	r1
    2f32:	18 95       	reti

00002f34 <UART0_Read>:
/****************************************************************************************************************************************
Primanje podataka USART0 modulom
****************************************************************************************************************************************/

unsigned char UART0_Read(void)
{
    2f34:	cf 93       	push	r28
    2f36:	df 93       	push	r29
    2f38:	1f 92       	push	r1
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR0B >> RXCIE0) & 0x01)
    2f3e:	81 ec       	ldi	r24, 0xC1	; 193
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	fc 01       	movw	r30, r24
    2f44:	80 81       	ld	r24, Z
    2f46:	88 1f       	adc	r24, r24
    2f48:	88 27       	eor	r24, r24
    2f4a:	88 1f       	adc	r24, r24
    2f4c:	88 2f       	mov	r24, r24
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	81 70       	andi	r24, 0x01	; 1
    2f52:	99 27       	eor	r25, r25
    2f54:	89 2b       	or	r24, r25
    2f56:	e9 f0       	breq	.+58     	; 0x2f92 <UART0_Read+0x5e>
	{
		while(rx0_counter == 0);
    2f58:	00 00       	nop
    2f5a:	80 91 f3 01 	lds	r24, 0x01F3
    2f5e:	88 23       	and	r24, r24
    2f60:	e1 f3       	breq	.-8      	; 0x2f5a <UART0_Read+0x26>

		data = rx0_buffer[rx0_rd_index];
    2f62:	80 91 f4 01 	lds	r24, 0x01F4
    2f66:	88 2f       	mov	r24, r24
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	8e 54       	subi	r24, 0x4E	; 78
    2f6c:	9e 4f       	sbci	r25, 0xFE	; 254
    2f6e:	fc 01       	movw	r30, r24
    2f70:	80 81       	ld	r24, Z
    2f72:	89 83       	std	Y+1, r24	; 0x01

		if(++rx0_rd_index == RX0_BUFFER_SIZE)
    2f74:	80 91 f4 01 	lds	r24, 0x01F4
    2f78:	8f 5f       	subi	r24, 0xFF	; 255
    2f7a:	80 93 f4 01 	sts	0x01F4, r24
    2f7e:	80 34       	cpi	r24, 0x40	; 64
    2f80:	11 f4       	brne	.+4      	; 0x2f86 <UART0_Read+0x52>
			rx0_rd_index = 0;
    2f82:	10 92 f4 01 	sts	0x01F4, r1

		rx0_counter--;
    2f86:	80 91 f3 01 	lds	r24, 0x01F3
    2f8a:	81 50       	subi	r24, 0x01	; 1
    2f8c:	80 93 f3 01 	sts	0x01F3, r24
    2f90:	13 c0       	rjmp	.+38     	; 0x2fb8 <UART0_Read+0x84>
	}
	else
	{
		while( !((UCSR0A >> RXC0) & 0x01));
    2f92:	00 00       	nop
    2f94:	80 ec       	ldi	r24, 0xC0	; 192
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	fc 01       	movw	r30, r24
    2f9a:	80 81       	ld	r24, Z
    2f9c:	88 1f       	adc	r24, r24
    2f9e:	88 27       	eor	r24, r24
    2fa0:	88 1f       	adc	r24, r24
    2fa2:	88 2f       	mov	r24, r24
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	81 70       	andi	r24, 0x01	; 1
    2fa8:	99 27       	eor	r25, r25
    2faa:	89 2b       	or	r24, r25
    2fac:	99 f3       	breq	.-26     	; 0x2f94 <UART0_Read+0x60>
		data = UDR0;
    2fae:	86 ec       	ldi	r24, 0xC6	; 198
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	80 81       	ld	r24, Z
    2fb6:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fba:	0f 90       	pop	r0
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	08 95       	ret

00002fc2 <UART1_Init>:
-bez paritet
-9600baud
-asynchron
****************************************************************************************************************************************/
void UART1_Init(unsigned long baud, char isrOnOff)
{
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	27 97       	sbiw	r28, 0x07	; 7
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	6b 83       	std	Y+3, r22	; 0x03
    2fd8:	7c 83       	std	Y+4, r23	; 0x04
    2fda:	8d 83       	std	Y+5, r24	; 0x05
    2fdc:	9e 83       	std	Y+6, r25	; 0x06
    2fde:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
    2fe0:	88 ec       	ldi	r24, 0xC8	; 200
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
    2fe8:	89 ec       	ldi	r24, 0xC9	; 201
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	28 e1       	ldi	r18, 0x18	; 24
    2fee:	fc 01       	movw	r30, r24
    2ff0:	20 83       	st	Z, r18


	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); //sa 1stop bit
    2ff2:	8a ec       	ldi	r24, 0xCA	; 202
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	26 e0       	ldi	r18, 0x06	; 6
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	20 83       	st	Z, r18


	if(isrOnOff == UART_ISR_ON)
    2ffc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ffe:	81 30       	cpi	r24, 0x01	; 1
    3000:	91 f4       	brne	.+36     	; 0x3026 <UART1_Init+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
    3002:	89 ec       	ldi	r24, 0xC9	; 201
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	29 ec       	ldi	r18, 0xC9	; 201
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	f9 01       	movw	r30, r18
    300c:	20 81       	ld	r18, Z
    300e:	20 6c       	ori	r18, 0xC0	; 192
    3010:	fc 01       	movw	r30, r24
    3012:	20 83       	st	Z, r18
		SREG |= 0x80;
    3014:	8f e5       	ldi	r24, 0x5F	; 95
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	2f e5       	ldi	r18, 0x5F	; 95
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	f9 01       	movw	r30, r18
    301e:	20 81       	ld	r18, Z
    3020:	20 68       	ori	r18, 0x80	; 128
    3022:	fc 01       	movw	r30, r24
    3024:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    3026:	6b 81       	ldd	r22, Y+3	; 0x03
    3028:	7c 81       	ldd	r23, Y+4	; 0x04
    302a:	8d 81       	ldd	r24, Y+5	; 0x05
    302c:	9e 81       	ldd	r25, Y+6	; 0x06
    302e:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__floatunsisf>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	40 e8       	ldi	r20, 0x80	; 128
    303c:	51 e4       	ldi	r21, 0x41	; 65
    303e:	bc 01       	movw	r22, r24
    3040:	cd 01       	movw	r24, r26
    3042:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	9c 01       	movw	r18, r24
    304c:	ad 01       	movw	r20, r26
    304e:	60 e8       	ldi	r22, 0x80	; 128
    3050:	76 e9       	ldi	r23, 0x96	; 150
    3052:	88 e1       	ldi	r24, 0x18	; 24
    3054:	9b e4       	ldi	r25, 0x4B	; 75
    3056:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__divsf3>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e8       	ldi	r20, 0x80	; 128
    3064:	5f e3       	ldi	r21, 0x3F	; 63
    3066:	bc 01       	movw	r22, r24
    3068:	cd 01       	movw	r24, r26
    306a:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__subsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e0       	ldi	r20, 0x00	; 0
    3078:	5f e3       	ldi	r21, 0x3F	; 63
    307a:	bc 01       	movw	r22, r24
    307c:	cd 01       	movw	r24, r26
    307e:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__addsf3>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	bc 01       	movw	r22, r24
    3088:	cd 01       	movw	r24, r26
    308a:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	9a 83       	std	Y+2, r25	; 0x02
    3094:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
    3096:	8d ec       	ldi	r24, 0xCD	; 205
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	29 81       	ldd	r18, Y+1	; 0x01
    309c:	3a 81       	ldd	r19, Y+2	; 0x02
    309e:	23 2f       	mov	r18, r19
    30a0:	33 27       	eor	r19, r19
    30a2:	fc 01       	movw	r30, r24
    30a4:	20 83       	st	Z, r18
	UBRR1L = temp;
    30a6:	8c ec       	ldi	r24, 0xCC	; 204
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	29 81       	ldd	r18, Y+1	; 0x01
    30ac:	fc 01       	movw	r30, r24
    30ae:	20 83       	st	Z, r18
}
    30b0:	27 96       	adiw	r28, 0x07	; 7
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	f8 94       	cli
    30b6:	de bf       	out	0x3e, r29	; 62
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	cd bf       	out	0x3d, r28	; 61
    30bc:	df 91       	pop	r29
    30be:	cf 91       	pop	r28
    30c0:	08 95       	ret

000030c2 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    30c2:	1f 92       	push	r1
    30c4:	0f 92       	push	r0
    30c6:	00 90 5f 00 	lds	r0, 0x005F
    30ca:	0f 92       	push	r0
    30cc:	11 24       	eor	r1, r1
    30ce:	00 90 5b 00 	lds	r0, 0x005B
    30d2:	0f 92       	push	r0
    30d4:	2f 93       	push	r18
    30d6:	3f 93       	push	r19
    30d8:	8f 93       	push	r24
    30da:	9f 93       	push	r25
    30dc:	ef 93       	push	r30
    30de:	ff 93       	push	r31
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    30e8:	80 91 36 02 	lds	r24, 0x0236
    30ec:	88 23       	and	r24, r24
    30ee:	d1 f0       	breq	.+52     	; 0x3124 <__vector_34+0x62>
	{
		tx1_counter--;
    30f0:	80 91 36 02 	lds	r24, 0x0236
    30f4:	81 50       	subi	r24, 0x01	; 1
    30f6:	80 93 36 02 	sts	0x0236, r24
		UDR1=tx1_buffer[tx1_rd_index];
    30fa:	8e ec       	ldi	r24, 0xCE	; 206
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	20 91 37 02 	lds	r18, 0x0237
    3102:	22 2f       	mov	r18, r18
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	2b 50       	subi	r18, 0x0B	; 11
    3108:	3e 4f       	sbci	r19, 0xFE	; 254
    310a:	f9 01       	movw	r30, r18
    310c:	20 81       	ld	r18, Z
    310e:	fc 01       	movw	r30, r24
    3110:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    3112:	80 91 37 02 	lds	r24, 0x0237
    3116:	8f 5f       	subi	r24, 0xFF	; 255
    3118:	80 93 37 02 	sts	0x0237, r24
    311c:	80 34       	cpi	r24, 0x40	; 64
    311e:	11 f4       	brne	.+4      	; 0x3124 <__vector_34+0x62>
			tx1_rd_index = 0;
    3120:	10 92 37 02 	sts	0x0237, r1
	}
}
    3124:	df 91       	pop	r29
    3126:	cf 91       	pop	r28
    3128:	ff 91       	pop	r31
    312a:	ef 91       	pop	r30
    312c:	9f 91       	pop	r25
    312e:	8f 91       	pop	r24
    3130:	3f 91       	pop	r19
    3132:	2f 91       	pop	r18
    3134:	0f 90       	pop	r0
    3136:	00 92 5b 00 	sts	0x005B, r0
    313a:	0f 90       	pop	r0
    313c:	00 92 5f 00 	sts	0x005F, r0
    3140:	0f 90       	pop	r0
    3142:	1f 90       	pop	r1
    3144:	18 95       	reti

00003146 <__vector_32>:

ISR(USART1_RX_vect)
{
    3146:	1f 92       	push	r1
    3148:	0f 92       	push	r0
    314a:	00 90 5f 00 	lds	r0, 0x005F
    314e:	0f 92       	push	r0
    3150:	11 24       	eor	r1, r1
    3152:	00 90 5b 00 	lds	r0, 0x005B
    3156:	0f 92       	push	r0
    3158:	2f 93       	push	r18
    315a:	3f 93       	push	r19
    315c:	8f 93       	push	r24
    315e:	9f 93       	push	r25
    3160:	ef 93       	push	r30
    3162:	ff 93       	push	r31
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	1f 92       	push	r1
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    316e:	88 ec       	ldi	r24, 0xC8	; 200
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	fc 01       	movw	r30, r24
    3174:	80 81       	ld	r24, Z
    3176:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	88 2f       	mov	r24, r24
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	8c 71       	andi	r24, 0x1C	; 28
    3180:	99 27       	eor	r25, r25
    3182:	89 2b       	or	r24, r25
    3184:	d1 f4       	brne	.+52     	; 0x31ba <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    3186:	80 91 78 02 	lds	r24, 0x0278
    318a:	88 2f       	mov	r24, r24
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	2e ec       	ldi	r18, 0xCE	; 206
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	f9 01       	movw	r30, r18
    3194:	20 81       	ld	r18, Z
    3196:	88 5c       	subi	r24, 0xC8	; 200
    3198:	9d 4f       	sbci	r25, 0xFD	; 253
    319a:	fc 01       	movw	r30, r24
    319c:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    319e:	80 91 78 02 	lds	r24, 0x0278
    31a2:	8f 5f       	subi	r24, 0xFF	; 255
    31a4:	80 93 78 02 	sts	0x0278, r24
    31a8:	80 34       	cpi	r24, 0x40	; 64
    31aa:	11 f4       	brne	.+4      	; 0x31b0 <__vector_32+0x6a>
		rx1_wr_index = 0;
    31ac:	10 92 78 02 	sts	0x0278, r1

		rx1_counter++;
    31b0:	80 91 79 02 	lds	r24, 0x0279
    31b4:	8f 5f       	subi	r24, 0xFF	; 255
    31b6:	80 93 79 02 	sts	0x0279, r24
	}
}
    31ba:	0f 90       	pop	r0
    31bc:	df 91       	pop	r29
    31be:	cf 91       	pop	r28
    31c0:	ff 91       	pop	r31
    31c2:	ef 91       	pop	r30
    31c4:	9f 91       	pop	r25
    31c6:	8f 91       	pop	r24
    31c8:	3f 91       	pop	r19
    31ca:	2f 91       	pop	r18
    31cc:	0f 90       	pop	r0
    31ce:	00 92 5b 00 	sts	0x005B, r0
    31d2:	0f 90       	pop	r0
    31d4:	00 92 5f 00 	sts	0x005F, r0
    31d8:	0f 90       	pop	r0
    31da:	1f 90       	pop	r1
    31dc:	18 95       	reti

000031de <altUart0Write>:

void altUart0Write(unsigned char data)
{
    31de:	cf 93       	push	r28
    31e0:	df 93       	push	r29
    31e2:	1f 92       	push	r1
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
    31ea:	00 00       	nop
    31ec:	80 ec       	ldi	r24, 0xC0	; 192
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	fc 01       	movw	r30, r24
    31f2:	80 81       	ld	r24, Z
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	80 72       	andi	r24, 0x20	; 32
    31fa:	99 27       	eor	r25, r25
    31fc:	89 2b       	or	r24, r25
    31fe:	b1 f3       	breq	.-20     	; 0x31ec <altUart0Write+0xe>

	UDR0 = data;
    3200:	86 ec       	ldi	r24, 0xC6	; 198
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	29 81       	ldd	r18, Y+1	; 0x01
    3206:	fc 01       	movw	r30, r24
    3208:	20 83       	st	Z, r18
}
    320a:	0f 90       	pop	r0
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	08 95       	ret

00003212 <altUart1Write>:

void altUart1Write(unsigned char data)
{
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    3216:	1f 92       	push	r1
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
    321e:	00 00       	nop
    3220:	88 ec       	ldi	r24, 0xC8	; 200
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	fc 01       	movw	r30, r24
    3226:	80 81       	ld	r24, Z
    3228:	88 2f       	mov	r24, r24
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	80 72       	andi	r24, 0x20	; 32
    322e:	99 27       	eor	r25, r25
    3230:	89 2b       	or	r24, r25
    3232:	b1 f3       	breq	.-20     	; 0x3220 <altUart1Write+0xe>
	UDR1 = data;
    3234:	8e ec       	ldi	r24, 0xCE	; 206
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	29 81       	ldd	r18, Y+1	; 0x01
    323a:	fc 01       	movw	r30, r24
    323c:	20 83       	st	Z, r18
}
    323e:	0f 90       	pop	r0
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	08 95       	ret

00003246 <UART1_Write>:
Slanje podataka USART1 modulom
**
**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
    324a:	1f 92       	push	r1
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
    3250:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
    3252:	89 ec       	ldi	r24, 0xC9	; 201
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	fc 01       	movw	r30, r24
    3258:	80 81       	ld	r24, Z
    325a:	82 95       	swap	r24
    325c:	86 95       	lsr	r24
    325e:	86 95       	lsr	r24
    3260:	83 70       	andi	r24, 0x03	; 3
    3262:	88 2f       	mov	r24, r24
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	81 70       	andi	r24, 0x01	; 1
    3268:	99 27       	eor	r25, r25
    326a:	89 2b       	or	r24, r25
    326c:	99 f1       	breq	.+102    	; 0x32d4 <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
    326e:	00 00       	nop
    3270:	80 91 36 02 	lds	r24, 0x0236
    3274:	80 34       	cpi	r24, 0x40	; 64
    3276:	e1 f3       	breq	.-8      	; 0x3270 <UART1_Write+0x2a>

		cli();
    3278:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
    327a:	80 91 36 02 	lds	r24, 0x0236
    327e:	88 23       	and	r24, r24
    3280:	51 f4       	brne	.+20     	; 0x3296 <UART1_Write+0x50>
    3282:	88 ec       	ldi	r24, 0xC8	; 200
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	fc 01       	movw	r30, r24
    3288:	80 81       	ld	r24, Z
    328a:	88 2f       	mov	r24, r24
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	80 72       	andi	r24, 0x20	; 32
    3290:	99 27       	eor	r25, r25
    3292:	89 2b       	or	r24, r25
    3294:	c1 f4       	brne	.+48     	; 0x32c6 <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
    3296:	80 91 35 02 	lds	r24, 0x0235
    329a:	88 2f       	mov	r24, r24
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	8b 50       	subi	r24, 0x0B	; 11
    32a0:	9e 4f       	sbci	r25, 0xFE	; 254
    32a2:	29 81       	ldd	r18, Y+1	; 0x01
    32a4:	fc 01       	movw	r30, r24
    32a6:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
    32a8:	80 91 35 02 	lds	r24, 0x0235
    32ac:	8f 5f       	subi	r24, 0xFF	; 255
    32ae:	80 93 35 02 	sts	0x0235, r24
    32b2:	80 34       	cpi	r24, 0x40	; 64
    32b4:	11 f4       	brne	.+4      	; 0x32ba <UART1_Write+0x74>
				tx1_wr_index = 0;
    32b6:	10 92 35 02 	sts	0x0235, r1

			tx1_counter++;
    32ba:	80 91 36 02 	lds	r24, 0x0236
    32be:	8f 5f       	subi	r24, 0xFF	; 255
    32c0:	80 93 36 02 	sts	0x0236, r24
    32c4:	05 c0       	rjmp	.+10     	; 0x32d0 <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
    32c6:	8e ec       	ldi	r24, 0xCE	; 206
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	29 81       	ldd	r18, Y+1	; 0x01
    32cc:	fc 01       	movw	r30, r24
    32ce:	20 83       	st	Z, r18

		sei();
    32d0:	78 94       	sei
    32d2:	03 c0       	rjmp	.+6      	; 0x32da <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	0e 94 09 19 	call	0x3212	; 0x3212 <altUart1Write>
}
    32da:	0f 90       	pop	r0
    32dc:	df 91       	pop	r29
    32de:	cf 91       	pop	r28
    32e0:	08 95       	ret

000032e2 <UART1_Read>:

unsigned char UART1_Read(void)
{
    32e2:	cf 93       	push	r28
    32e4:	df 93       	push	r29
    32e6:	1f 92       	push	r1
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
    32ec:	89 ec       	ldi	r24, 0xC9	; 201
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	fc 01       	movw	r30, r24
    32f2:	80 81       	ld	r24, Z
    32f4:	88 1f       	adc	r24, r24
    32f6:	88 27       	eor	r24, r24
    32f8:	88 1f       	adc	r24, r24
    32fa:	88 2f       	mov	r24, r24
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	81 70       	andi	r24, 0x01	; 1
    3300:	99 27       	eor	r25, r25
    3302:	89 2b       	or	r24, r25
    3304:	e9 f0       	breq	.+58     	; 0x3340 <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
    3306:	00 00       	nop
    3308:	80 91 79 02 	lds	r24, 0x0279
    330c:	88 23       	and	r24, r24
    330e:	e1 f3       	breq	.-8      	; 0x3308 <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
    3310:	80 91 7a 02 	lds	r24, 0x027A
    3314:	88 2f       	mov	r24, r24
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	88 5c       	subi	r24, 0xC8	; 200
    331a:	9d 4f       	sbci	r25, 0xFD	; 253
    331c:	fc 01       	movw	r30, r24
    331e:	80 81       	ld	r24, Z
    3320:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
    3322:	80 91 7a 02 	lds	r24, 0x027A
    3326:	8f 5f       	subi	r24, 0xFF	; 255
    3328:	80 93 7a 02 	sts	0x027A, r24
    332c:	80 34       	cpi	r24, 0x40	; 64
    332e:	11 f4       	brne	.+4      	; 0x3334 <UART1_Read+0x52>
			rx1_rd_index = 0;
    3330:	10 92 7a 02 	sts	0x027A, r1

		rx1_counter--;
    3334:	80 91 79 02 	lds	r24, 0x0279
    3338:	81 50       	subi	r24, 0x01	; 1
    333a:	80 93 79 02 	sts	0x0279, r24
    333e:	13 c0       	rjmp	.+38     	; 0x3366 <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
    3340:	00 00       	nop
    3342:	88 ec       	ldi	r24, 0xC8	; 200
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	fc 01       	movw	r30, r24
    3348:	80 81       	ld	r24, Z
    334a:	88 1f       	adc	r24, r24
    334c:	88 27       	eor	r24, r24
    334e:	88 1f       	adc	r24, r24
    3350:	88 2f       	mov	r24, r24
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	81 70       	andi	r24, 0x01	; 1
    3356:	99 27       	eor	r25, r25
    3358:	89 2b       	or	r24, r25
    335a:	99 f3       	breq	.-26     	; 0x3342 <UART1_Read+0x60>
		data = UDR1;
    335c:	8e ec       	ldi	r24, 0xCE	; 206
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	fc 01       	movw	r30, r24
    3362:	80 81       	ld	r24, Z
    3364:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    3366:	89 81       	ldd	r24, Y+1	; 0x01
}
    3368:	0f 90       	pop	r0
    336a:	df 91       	pop	r29
    336c:	cf 91       	pop	r28
    336e:	08 95       	ret

00003370 <UART1_Buffer>:

void UART1_Buffer(uint8_t* str) {
    3370:	cf 93       	push	r28
    3372:	df 93       	push	r29
    3374:	00 d0       	rcall	.+0      	; 0x3376 <UART1_Buffer+0x6>
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	9a 83       	std	Y+2, r25	; 0x02
    337c:	89 83       	std	Y+1, r24	; 0x01
	while(*str) {
    337e:	0b c0       	rjmp	.+22     	; 0x3396 <UART1_Buffer+0x26>
		altUart1Write(*str++);
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	9a 81       	ldd	r25, Y+2	; 0x02
    3384:	9c 01       	movw	r18, r24
    3386:	2f 5f       	subi	r18, 0xFF	; 255
    3388:	3f 4f       	sbci	r19, 0xFF	; 255
    338a:	3a 83       	std	Y+2, r19	; 0x02
    338c:	29 83       	std	Y+1, r18	; 0x01
    338e:	fc 01       	movw	r30, r24
    3390:	80 81       	ld	r24, Z
    3392:	0e 94 09 19 	call	0x3212	; 0x3212 <altUart1Write>

	return data;
}

void UART1_Buffer(uint8_t* str) {
	while(*str) {
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	9a 81       	ldd	r25, Y+2	; 0x02
    339a:	fc 01       	movw	r30, r24
    339c:	80 81       	ld	r24, Z
    339e:	88 23       	and	r24, r24
    33a0:	79 f7       	brne	.-34     	; 0x3380 <UART1_Buffer+0x10>
		altUart1Write(*str++);
	}
}
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	df 91       	pop	r29
    33a8:	cf 91       	pop	r28
    33aa:	08 95       	ret

000033ac <test_sensor>:
#include "actuator.h"

// if this is defined it will execute the coordinates for the "first desk" if commented it will move on to the "second desk"
#define first_desk

char test_sensor(unsigned long start_time) {
    33ac:	cf 93       	push	r28
    33ae:	df 93       	push	r29
    33b0:	00 d0       	rcall	.+0      	; 0x33b2 <test_sensor+0x6>
    33b2:	00 d0       	rcall	.+0      	; 0x33b4 <test_sensor+0x8>
    33b4:	cd b7       	in	r28, 0x3d	; 61
    33b6:	de b7       	in	r29, 0x3e	; 62
    33b8:	69 83       	std	Y+1, r22	; 0x01
    33ba:	7a 83       	std	Y+2, r23	; 0x02
    33bc:	8b 83       	std	Y+3, r24	; 0x03
    33be:	9c 83       	std	Y+4, r25	; 0x04
	if(gpio_read_pin(0) == 1) {
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <gpio_read_pin>
    33c6:	81 30       	cpi	r24, 0x01	; 1
    33c8:	29 f4       	brne	.+10     	; 0x33d4 <test_sensor+0x28>
		odometry_stop(HARD_STOP);
    33ca:	83 e5       	ldi	r24, 0x53	; 83
    33cc:	0e 94 40 0c 	call	0x1880	; 0x1880 <odometry_stop>
		return 1;
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	01 c0       	rjmp	.+2      	; 0x33d6 <test_sensor+0x2a>
	}

	return 0;
    33d4:	80 e0       	ldi	r24, 0x00	; 0
}
    33d6:	0f 90       	pop	r0
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	08 95       	ret

000033e4 <wait_while_detection_tactic_one>:

/*
 * 	Function: static void wait_while_detection_tactic_one(void)
 * 	Description: This will wait until the callback(sensor) is returning 1, so called detecting the enemy
 */
static void wait_while_detection_tactic_one(void) {
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	6c 97       	sbiw	r28, 0x1c	; 28
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	a8 e4       	ldi	r26, 0x48	; 72
    33fe:	b3 e4       	ldi	r27, 0x43	; 67
    3400:	89 83       	std	Y+1, r24	; 0x01
    3402:	9a 83       	std	Y+2, r25	; 0x02
    3404:	ab 83       	std	Y+3, r26	; 0x03
    3406:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e4       	ldi	r19, 0x40	; 64
    340c:	4c e1       	ldi	r20, 0x1C	; 28
    340e:	55 e4       	ldi	r21, 0x45	; 69
    3410:	69 81       	ldd	r22, Y+1	; 0x01
    3412:	7a 81       	ldd	r23, Y+2	; 0x02
    3414:	8b 81       	ldd	r24, Y+3	; 0x03
    3416:	9c 81       	ldd	r25, Y+4	; 0x04
    3418:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	8d 83       	std	Y+5, r24	; 0x05
    3422:	9e 83       	std	Y+6, r25	; 0x06
    3424:	af 83       	std	Y+7, r26	; 0x07
    3426:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	40 e8       	ldi	r20, 0x80	; 128
    342e:	5f e3       	ldi	r21, 0x3F	; 63
    3430:	6d 81       	ldd	r22, Y+5	; 0x05
    3432:	7e 81       	ldd	r23, Y+6	; 0x06
    3434:	8f 81       	ldd	r24, Y+7	; 0x07
    3436:	98 85       	ldd	r25, Y+8	; 0x08
    3438:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    343c:	88 23       	and	r24, r24
    343e:	2c f4       	brge	.+10     	; 0x344a <wait_while_detection_tactic_one+0x66>
		__ticks = 1;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	9a 87       	std	Y+10, r25	; 0x0a
    3446:	89 87       	std	Y+9, r24	; 0x09
    3448:	3f c0       	rjmp	.+126    	; 0x34c8 <wait_while_detection_tactic_one+0xe4>
	else if (__tmp > 65535)
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	3f ef       	ldi	r19, 0xFF	; 255
    344e:	4f e7       	ldi	r20, 0x7F	; 127
    3450:	57 e4       	ldi	r21, 0x47	; 71
    3452:	6d 81       	ldd	r22, Y+5	; 0x05
    3454:	7e 81       	ldd	r23, Y+6	; 0x06
    3456:	8f 81       	ldd	r24, Y+7	; 0x07
    3458:	98 85       	ldd	r25, Y+8	; 0x08
    345a:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    345e:	18 16       	cp	r1, r24
    3460:	4c f5       	brge	.+82     	; 0x34b4 <wait_while_detection_tactic_one+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	40 e2       	ldi	r20, 0x20	; 32
    3468:	51 e4       	ldi	r21, 0x41	; 65
    346a:	69 81       	ldd	r22, Y+1	; 0x01
    346c:	7a 81       	ldd	r23, Y+2	; 0x02
    346e:	8b 81       	ldd	r24, Y+3	; 0x03
    3470:	9c 81       	ldd	r25, Y+4	; 0x04
    3472:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	bc 01       	movw	r22, r24
    347c:	cd 01       	movw	r24, r26
    347e:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	9a 87       	std	Y+10, r25	; 0x0a
    3488:	89 87       	std	Y+9, r24	; 0x09
    348a:	0f c0       	rjmp	.+30     	; 0x34aa <wait_while_detection_tactic_one+0xc6>
    348c:	8a ef       	ldi	r24, 0xFA	; 250
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	9c 87       	std	Y+12, r25	; 0x0c
    3492:	8b 87       	std	Y+11, r24	; 0x0b
    3494:	8b 85       	ldd	r24, Y+11	; 0x0b
    3496:	9c 85       	ldd	r25, Y+12	; 0x0c
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	f1 f7       	brne	.-4      	; 0x3498 <wait_while_detection_tactic_one+0xb4>
    349c:	9c 87       	std	Y+12, r25	; 0x0c
    349e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a0:	89 85       	ldd	r24, Y+9	; 0x09
    34a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	9a 87       	std	Y+10, r25	; 0x0a
    34a8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34aa:	89 85       	ldd	r24, Y+9	; 0x09
    34ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ae:	89 2b       	or	r24, r25
    34b0:	69 f7       	brne	.-38     	; 0x348c <wait_while_detection_tactic_one+0xa8>
    34b2:	14 c0       	rjmp	.+40     	; 0x34dc <wait_while_detection_tactic_one+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b4:	6d 81       	ldd	r22, Y+5	; 0x05
    34b6:	7e 81       	ldd	r23, Y+6	; 0x06
    34b8:	8f 81       	ldd	r24, Y+7	; 0x07
    34ba:	98 85       	ldd	r25, Y+8	; 0x08
    34bc:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	9a 87       	std	Y+10, r25	; 0x0a
    34c6:	89 87       	std	Y+9, r24	; 0x09
    34c8:	89 85       	ldd	r24, Y+9	; 0x09
    34ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    34cc:	9e 87       	std	Y+14, r25	; 0x0e
    34ce:	8d 87       	std	Y+13, r24	; 0x0d
    34d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	f1 f7       	brne	.-4      	; 0x34d4 <wait_while_detection_tactic_one+0xf0>
    34d8:	9e 87       	std	Y+14, r25	; 0x0e
    34da:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(200);
	while(TACTIC_ONE_POSITION[current_position].callback(0) == 1)
    34dc:	72 c0       	rjmp	.+228    	; 0x35c2 <wait_while_detection_tactic_one+0x1de>
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	a0 e2       	ldi	r26, 0x20	; 32
    34e4:	b1 e4       	ldi	r27, 0x41	; 65
    34e6:	8f 87       	std	Y+15, r24	; 0x0f
    34e8:	98 8b       	std	Y+16, r25	; 0x10
    34ea:	a9 8b       	std	Y+17, r26	; 0x11
    34ec:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e4       	ldi	r19, 0x40	; 64
    34f2:	4c e1       	ldi	r20, 0x1C	; 28
    34f4:	55 e4       	ldi	r21, 0x45	; 69
    34f6:	6f 85       	ldd	r22, Y+15	; 0x0f
    34f8:	78 89       	ldd	r23, Y+16	; 0x10
    34fa:	89 89       	ldd	r24, Y+17	; 0x11
    34fc:	9a 89       	ldd	r25, Y+18	; 0x12
    34fe:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	8b 8b       	std	Y+19, r24	; 0x13
    3508:	9c 8b       	std	Y+20, r25	; 0x14
    350a:	ad 8b       	std	Y+21, r26	; 0x15
    350c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	40 e8       	ldi	r20, 0x80	; 128
    3514:	5f e3       	ldi	r21, 0x3F	; 63
    3516:	6b 89       	ldd	r22, Y+19	; 0x13
    3518:	7c 89       	ldd	r23, Y+20	; 0x14
    351a:	8d 89       	ldd	r24, Y+21	; 0x15
    351c:	9e 89       	ldd	r25, Y+22	; 0x16
    351e:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    3522:	88 23       	and	r24, r24
    3524:	2c f4       	brge	.+10     	; 0x3530 <wait_while_detection_tactic_one+0x14c>
		__ticks = 1;
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	98 8f       	std	Y+24, r25	; 0x18
    352c:	8f 8b       	std	Y+23, r24	; 0x17
    352e:	3f c0       	rjmp	.+126    	; 0x35ae <wait_while_detection_tactic_one+0x1ca>
	else if (__tmp > 65535)
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	3f ef       	ldi	r19, 0xFF	; 255
    3534:	4f e7       	ldi	r20, 0x7F	; 127
    3536:	57 e4       	ldi	r21, 0x47	; 71
    3538:	6b 89       	ldd	r22, Y+19	; 0x13
    353a:	7c 89       	ldd	r23, Y+20	; 0x14
    353c:	8d 89       	ldd	r24, Y+21	; 0x15
    353e:	9e 89       	ldd	r25, Y+22	; 0x16
    3540:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    3544:	18 16       	cp	r1, r24
    3546:	4c f5       	brge	.+82     	; 0x359a <wait_while_detection_tactic_one+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e2       	ldi	r20, 0x20	; 32
    354e:	51 e4       	ldi	r21, 0x41	; 65
    3550:	6f 85       	ldd	r22, Y+15	; 0x0f
    3552:	78 89       	ldd	r23, Y+16	; 0x10
    3554:	89 89       	ldd	r24, Y+17	; 0x11
    3556:	9a 89       	ldd	r25, Y+18	; 0x12
    3558:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	bc 01       	movw	r22, r24
    3562:	cd 01       	movw	r24, r26
    3564:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	98 8f       	std	Y+24, r25	; 0x18
    356e:	8f 8b       	std	Y+23, r24	; 0x17
    3570:	0f c0       	rjmp	.+30     	; 0x3590 <wait_while_detection_tactic_one+0x1ac>
    3572:	8a ef       	ldi	r24, 0xFA	; 250
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	9a 8f       	std	Y+26, r25	; 0x1a
    3578:	89 8f       	std	Y+25, r24	; 0x19
    357a:	89 8d       	ldd	r24, Y+25	; 0x19
    357c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    357e:	01 97       	sbiw	r24, 0x01	; 1
    3580:	f1 f7       	brne	.-4      	; 0x357e <wait_while_detection_tactic_one+0x19a>
    3582:	9a 8f       	std	Y+26, r25	; 0x1a
    3584:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3586:	8f 89       	ldd	r24, Y+23	; 0x17
    3588:	98 8d       	ldd	r25, Y+24	; 0x18
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	98 8f       	std	Y+24, r25	; 0x18
    358e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3590:	8f 89       	ldd	r24, Y+23	; 0x17
    3592:	98 8d       	ldd	r25, Y+24	; 0x18
    3594:	89 2b       	or	r24, r25
    3596:	69 f7       	brne	.-38     	; 0x3572 <wait_while_detection_tactic_one+0x18e>
    3598:	14 c0       	rjmp	.+40     	; 0x35c2 <wait_while_detection_tactic_one+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359a:	6b 89       	ldd	r22, Y+19	; 0x13
    359c:	7c 89       	ldd	r23, Y+20	; 0x14
    359e:	8d 89       	ldd	r24, Y+21	; 0x15
    35a0:	9e 89       	ldd	r25, Y+22	; 0x16
    35a2:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	98 8f       	std	Y+24, r25	; 0x18
    35ac:	8f 8b       	std	Y+23, r24	; 0x17
    35ae:	8f 89       	ldd	r24, Y+23	; 0x17
    35b0:	98 8d       	ldd	r25, Y+24	; 0x18
    35b2:	9c 8f       	std	Y+28, r25	; 0x1c
    35b4:	8b 8f       	std	Y+27, r24	; 0x1b
    35b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	f1 f7       	brne	.-4      	; 0x35ba <wait_while_detection_tactic_one+0x1d6>
    35be:	9c 8f       	std	Y+28, r25	; 0x1c
    35c0:	8b 8f       	std	Y+27, r24	; 0x1b
    35c2:	80 91 7b 02 	lds	r24, 0x027B
    35c6:	28 2f       	mov	r18, r24
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	4b e0       	ldi	r20, 0x0B	; 11
    35cc:	42 9f       	mul	r20, r18
    35ce:	c0 01       	movw	r24, r0
    35d0:	43 9f       	mul	r20, r19
    35d2:	90 0d       	add	r25, r0
    35d4:	11 24       	eor	r1, r1
    35d6:	80 5e       	subi	r24, 0xE0	; 224
    35d8:	9e 4f       	sbci	r25, 0xFE	; 254
    35da:	fc 01       	movw	r30, r24
    35dc:	20 81       	ld	r18, Z
    35de:	31 81       	ldd	r19, Z+1	; 0x01
    35e0:	60 e0       	ldi	r22, 0x00	; 0
    35e2:	70 e0       	ldi	r23, 0x00	; 0
    35e4:	cb 01       	movw	r24, r22
    35e6:	f9 01       	movw	r30, r18
    35e8:	09 95       	icall
    35ea:	81 30       	cpi	r24, 0x01	; 1
    35ec:	09 f4       	brne	.+2      	; 0x35f0 <wait_while_detection_tactic_one+0x20c>
    35ee:	77 cf       	rjmp	.-274    	; 0x34de <wait_while_detection_tactic_one+0xfa>
		_delay_ms(10);
	next_position = current_position;
    35f0:	80 91 7b 02 	lds	r24, 0x027B
    35f4:	80 93 7c 02 	sts	0x027C, r24
	active_state = TACTIC_ONE;
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	80 93 16 01 	sts	0x0116, r24

}
    35fe:	6c 96       	adiw	r28, 0x1c	; 28
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	de bf       	out	0x3e, r29	; 62
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	cd bf       	out	0x3d, r28	; 61
    360a:	df 91       	pop	r29
    360c:	cf 91       	pop	r28
    360e:	08 95       	ret

00003610 <darkside>:

void darkside(void) {
    3610:	cf 93       	push	r28
    3612:	df 93       	push	r29
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
    3618:	a3 97       	sbiw	r28, 0x23	; 35
    361a:	0f b6       	in	r0, 0x3f	; 63
    361c:	f8 94       	cli
    361e:	de bf       	out	0x3e, r29	; 62
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	cd bf       	out	0x3d, r28	; 61


	// setting the starting position
	struct odometry_position startingPosition; startingPosition.x = 0; startingPosition.y = 0; startingPosition.angle = 0;
    3624:	1e 8e       	std	Y+30, r1	; 0x1e
    3626:	1d 8e       	std	Y+29, r1	; 0x1d
    3628:	18 a2       	std	Y+32, r1	; 0x20
    362a:	1f 8e       	std	Y+31, r1	; 0x1f
    362c:	1a a2       	std	Y+34, r1	; 0x22
    362e:	19 a2       	std	Y+33, r1	; 0x21

	// sending the starting position to odometry
	odometry_set_position(&startingPosition);
    3630:	ce 01       	movw	r24, r28
    3632:	4d 96       	adiw	r24, 0x1d	; 29
    3634:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <odometry_set_position>

	while(1) {
		switch(active_state) {
    3638:	80 91 16 01 	lds	r24, 0x0116
    363c:	88 2f       	mov	r24, r24
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	81 30       	cpi	r24, 0x01	; 1
    3642:	91 05       	cpc	r25, r1
    3644:	09 f4       	brne	.+2      	; 0x3648 <darkside+0x38>
    3646:	8f c0       	rjmp	.+286    	; 0x3766 <darkside+0x156>
    3648:	83 35       	cpi	r24, 0x53	; 83
    364a:	91 05       	cpc	r25, r1
    364c:	91 f0       	breq	.+36     	; 0x3672 <darkside+0x62>
    364e:	89 2b       	or	r24, r25
    3650:	09 f0       	breq	.+2      	; 0x3654 <darkside+0x44>
    3652:	59 c1       	rjmp	.+690    	; 0x3906 <darkside+0x2f6>
		case COLLISION:		// COLLISION ! DON'T FORGET BREAK !
			if(current_position == 0) {
    3654:	80 91 7b 02 	lds	r24, 0x027B
    3658:	88 23       	and	r24, r24
    365a:	19 f4       	brne	.+6      	; 0x3662 <darkside+0x52>
				wait_while_detection_tactic_one();
    365c:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <wait_while_detection_tactic_one>
				break;
    3660:	52 c1       	rjmp	.+676    	; 0x3906 <darkside+0x2f6>
			} else if(current_position == 1) {
    3662:	80 91 7b 02 	lds	r24, 0x027B
    3666:	81 30       	cpi	r24, 0x01	; 1
    3668:	19 f4       	brne	.+6      	; 0x3670 <darkside+0x60>
				wait_while_detection_tactic_one();
    366a:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <wait_while_detection_tactic_one>
				break;
    366e:	4b c1       	rjmp	.+662    	; 0x3906 <darkside+0x2f6>
			}

			break;
    3670:	4a c1       	rjmp	.+660    	; 0x3906 <darkside+0x2f6>
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	aa e7       	ldi	r26, 0x7A	; 122
    3678:	b4 e4       	ldi	r27, 0x44	; 68
    367a:	89 83       	std	Y+1, r24	; 0x01
    367c:	9a 83       	std	Y+2, r25	; 0x02
    367e:	ab 83       	std	Y+3, r26	; 0x03
    3680:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e4       	ldi	r19, 0x40	; 64
    3686:	4c e1       	ldi	r20, 0x1C	; 28
    3688:	55 e4       	ldi	r21, 0x45	; 69
    368a:	69 81       	ldd	r22, Y+1	; 0x01
    368c:	7a 81       	ldd	r23, Y+2	; 0x02
    368e:	8b 81       	ldd	r24, Y+3	; 0x03
    3690:	9c 81       	ldd	r25, Y+4	; 0x04
    3692:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	8d 83       	std	Y+5, r24	; 0x05
    369c:	9e 83       	std	Y+6, r25	; 0x06
    369e:	af 83       	std	Y+7, r26	; 0x07
    36a0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	40 e8       	ldi	r20, 0x80	; 128
    36a8:	5f e3       	ldi	r21, 0x3F	; 63
    36aa:	6d 81       	ldd	r22, Y+5	; 0x05
    36ac:	7e 81       	ldd	r23, Y+6	; 0x06
    36ae:	8f 81       	ldd	r24, Y+7	; 0x07
    36b0:	98 85       	ldd	r25, Y+8	; 0x08
    36b2:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    36b6:	88 23       	and	r24, r24
    36b8:	2c f4       	brge	.+10     	; 0x36c4 <darkside+0xb4>
		__ticks = 1;
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	9a 87       	std	Y+10, r25	; 0x0a
    36c0:	89 87       	std	Y+9, r24	; 0x09
    36c2:	3f c0       	rjmp	.+126    	; 0x3742 <darkside+0x132>
	else if (__tmp > 65535)
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	3f ef       	ldi	r19, 0xFF	; 255
    36c8:	4f e7       	ldi	r20, 0x7F	; 127
    36ca:	57 e4       	ldi	r21, 0x47	; 71
    36cc:	6d 81       	ldd	r22, Y+5	; 0x05
    36ce:	7e 81       	ldd	r23, Y+6	; 0x06
    36d0:	8f 81       	ldd	r24, Y+7	; 0x07
    36d2:	98 85       	ldd	r25, Y+8	; 0x08
    36d4:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    36d8:	18 16       	cp	r1, r24
    36da:	4c f5       	brge	.+82     	; 0x372e <darkside+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36dc:	20 e0       	ldi	r18, 0x00	; 0
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	40 e2       	ldi	r20, 0x20	; 32
    36e2:	51 e4       	ldi	r21, 0x41	; 65
    36e4:	69 81       	ldd	r22, Y+1	; 0x01
    36e6:	7a 81       	ldd	r23, Y+2	; 0x02
    36e8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ea:	9c 81       	ldd	r25, Y+4	; 0x04
    36ec:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	bc 01       	movw	r22, r24
    36f6:	cd 01       	movw	r24, r26
    36f8:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	9a 87       	std	Y+10, r25	; 0x0a
    3702:	89 87       	std	Y+9, r24	; 0x09
    3704:	0f c0       	rjmp	.+30     	; 0x3724 <darkside+0x114>
    3706:	8a ef       	ldi	r24, 0xFA	; 250
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	9c 87       	std	Y+12, r25	; 0x0c
    370c:	8b 87       	std	Y+11, r24	; 0x0b
    370e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3710:	9c 85       	ldd	r25, Y+12	; 0x0c
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	f1 f7       	brne	.-4      	; 0x3712 <darkside+0x102>
    3716:	9c 87       	std	Y+12, r25	; 0x0c
    3718:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    371a:	89 85       	ldd	r24, Y+9	; 0x09
    371c:	9a 85       	ldd	r25, Y+10	; 0x0a
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	9a 87       	std	Y+10, r25	; 0x0a
    3722:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3724:	89 85       	ldd	r24, Y+9	; 0x09
    3726:	9a 85       	ldd	r25, Y+10	; 0x0a
    3728:	89 2b       	or	r24, r25
    372a:	69 f7       	brne	.-38     	; 0x3706 <darkside+0xf6>
    372c:	14 c0       	rjmp	.+40     	; 0x3756 <darkside+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    372e:	6d 81       	ldd	r22, Y+5	; 0x05
    3730:	7e 81       	ldd	r23, Y+6	; 0x06
    3732:	8f 81       	ldd	r24, Y+7	; 0x07
    3734:	98 85       	ldd	r25, Y+8	; 0x08
    3736:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	9a 87       	std	Y+10, r25	; 0x0a
    3740:	89 87       	std	Y+9, r24	; 0x09
    3742:	89 85       	ldd	r24, Y+9	; 0x09
    3744:	9a 85       	ldd	r25, Y+10	; 0x0a
    3746:	9e 87       	std	Y+14, r25	; 0x0e
    3748:	8d 87       	std	Y+13, r24	; 0x0d
    374a:	8d 85       	ldd	r24, Y+13	; 0x0d
    374c:	9e 85       	ldd	r25, Y+14	; 0x0e
    374e:	01 97       	sbiw	r24, 0x01	; 1
    3750:	f1 f7       	brne	.-4      	; 0x374e <darkside+0x13e>
    3752:	9e 87       	std	Y+14, r25	; 0x0e
    3754:	8d 87       	std	Y+13, r24	; 0x0d
		case STUCK:			// STUCK
			_delay_ms(1000);
			active_state = TACTIC_ONE;
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	80 93 16 01 	sts	0x0116, r24
			next_position = current_position;
    375c:	80 91 7b 02 	lds	r24, 0x027B
    3760:	80 93 7c 02 	sts	0x027C, r24

			break;
    3764:	d0 c0       	rjmp	.+416    	; 0x3906 <darkside+0x2f6>
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    3766:	80 91 7c 02 	lds	r24, 0x027C
    376a:	80 93 7b 02 	sts	0x027B, r24
    376e:	c6 c0       	rjmp	.+396    	; 0x38fc <darkside+0x2ec>

				// send the gotoField and receive status
				odometry_status = odometry_move_to_position(&TACTIC_ONE_POSITION[current_position].point, TACTIC_ONE_POSITION[current_position].speed, TACTIC_ONE_POSITION[current_position].direction, TACTIC_ONE_POSITION[current_position].callback);
    3770:	80 91 7b 02 	lds	r24, 0x027B
    3774:	28 2f       	mov	r18, r24
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	4b e0       	ldi	r20, 0x0B	; 11
    377a:	42 9f       	mul	r20, r18
    377c:	c0 01       	movw	r24, r0
    377e:	43 9f       	mul	r20, r19
    3780:	90 0d       	add	r25, r0
    3782:	11 24       	eor	r1, r1
    3784:	80 5e       	subi	r24, 0xE0	; 224
    3786:	9e 4f       	sbci	r25, 0xFE	; 254
    3788:	dc 01       	movw	r26, r24
    378a:	4d 91       	ld	r20, X+
    378c:	5c 91       	ld	r21, X
    378e:	80 91 7b 02 	lds	r24, 0x027B
    3792:	28 2f       	mov	r18, r24
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	6b e0       	ldi	r22, 0x0B	; 11
    3798:	62 9f       	mul	r22, r18
    379a:	c0 01       	movw	r24, r0
    379c:	63 9f       	mul	r22, r19
    379e:	90 0d       	add	r25, r0
    37a0:	11 24       	eor	r1, r1
    37a2:	81 5e       	subi	r24, 0xE1	; 225
    37a4:	9e 4f       	sbci	r25, 0xFE	; 254
    37a6:	dc 01       	movw	r26, r24
    37a8:	ec 91       	ld	r30, X
    37aa:	80 91 7b 02 	lds	r24, 0x027B
    37ae:	28 2f       	mov	r18, r24
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	6b e0       	ldi	r22, 0x0B	; 11
    37b4:	62 9f       	mul	r22, r18
    37b6:	c0 01       	movw	r24, r0
    37b8:	63 9f       	mul	r22, r19
    37ba:	90 0d       	add	r25, r0
    37bc:	11 24       	eor	r1, r1
    37be:	82 5e       	subi	r24, 0xE2	; 226
    37c0:	9e 4f       	sbci	r25, 0xFE	; 254
    37c2:	dc 01       	movw	r26, r24
    37c4:	7c 91       	ld	r23, X
    37c6:	80 91 7b 02 	lds	r24, 0x027B
    37ca:	28 2f       	mov	r18, r24
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	6b e0       	ldi	r22, 0x0B	; 11
    37d0:	62 9f       	mul	r22, r18
    37d2:	c0 01       	movw	r24, r0
    37d4:	63 9f       	mul	r22, r19
    37d6:	90 0d       	add	r25, r0
    37d8:	11 24       	eor	r1, r1
    37da:	89 5e       	subi	r24, 0xE9	; 233
    37dc:	9e 4f       	sbci	r25, 0xFE	; 254
    37de:	9a 01       	movw	r18, r20
    37e0:	4e 2f       	mov	r20, r30
    37e2:	67 2f       	mov	r22, r23
    37e4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <odometry_move_to_position>
    37e8:	80 93 7d 02 	sts	0x027D, r24

				// if odometry fails set state to collision
				if(odometry_status == ODOMETRY_FAIL)
    37ec:	80 91 7d 02 	lds	r24, 0x027D
    37f0:	81 30       	cpi	r24, 0x01	; 1
    37f2:	19 f4       	brne	.+6      	; 0x37fa <darkside+0x1ea>
				{
					active_state = COLLISION;
    37f4:	10 92 16 01 	sts	0x0116, r1
					break;
    37f8:	86 c0       	rjmp	.+268    	; 0x3906 <darkside+0x2f6>
				}
				else if(odometry_status == ODOMETRY_STUCK)
				{

				}
				if(current_position == 0) {
    37fa:	80 91 7b 02 	lds	r24, 0x027B
    37fe:	88 23       	and	r24, r24
    3800:	09 f0       	breq	.+2      	; 0x3804 <darkside+0x1f4>
    3802:	72 c0       	rjmp	.+228    	; 0x38e8 <darkside+0x2d8>
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	aa ef       	ldi	r26, 0xFA	; 250
    380a:	b4 e4       	ldi	r27, 0x44	; 68
    380c:	8f 87       	std	Y+15, r24	; 0x0f
    380e:	98 8b       	std	Y+16, r25	; 0x10
    3810:	a9 8b       	std	Y+17, r26	; 0x11
    3812:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	30 e4       	ldi	r19, 0x40	; 64
    3818:	4c e1       	ldi	r20, 0x1C	; 28
    381a:	55 e4       	ldi	r21, 0x45	; 69
    381c:	6f 85       	ldd	r22, Y+15	; 0x0f
    381e:	78 89       	ldd	r23, Y+16	; 0x10
    3820:	89 89       	ldd	r24, Y+17	; 0x11
    3822:	9a 89       	ldd	r25, Y+18	; 0x12
    3824:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	8b 8b       	std	Y+19, r24	; 0x13
    382e:	9c 8b       	std	Y+20, r25	; 0x14
    3830:	ad 8b       	std	Y+21, r26	; 0x15
    3832:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	40 e8       	ldi	r20, 0x80	; 128
    383a:	5f e3       	ldi	r21, 0x3F	; 63
    383c:	6b 89       	ldd	r22, Y+19	; 0x13
    383e:	7c 89       	ldd	r23, Y+20	; 0x14
    3840:	8d 89       	ldd	r24, Y+21	; 0x15
    3842:	9e 89       	ldd	r25, Y+22	; 0x16
    3844:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    3848:	88 23       	and	r24, r24
    384a:	2c f4       	brge	.+10     	; 0x3856 <darkside+0x246>
		__ticks = 1;
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	98 8f       	std	Y+24, r25	; 0x18
    3852:	8f 8b       	std	Y+23, r24	; 0x17
    3854:	3f c0       	rjmp	.+126    	; 0x38d4 <darkside+0x2c4>
	else if (__tmp > 65535)
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	3f ef       	ldi	r19, 0xFF	; 255
    385a:	4f e7       	ldi	r20, 0x7F	; 127
    385c:	57 e4       	ldi	r21, 0x47	; 71
    385e:	6b 89       	ldd	r22, Y+19	; 0x13
    3860:	7c 89       	ldd	r23, Y+20	; 0x14
    3862:	8d 89       	ldd	r24, Y+21	; 0x15
    3864:	9e 89       	ldd	r25, Y+22	; 0x16
    3866:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    386a:	18 16       	cp	r1, r24
    386c:	4c f5       	brge	.+82     	; 0x38c0 <darkside+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	40 e2       	ldi	r20, 0x20	; 32
    3874:	51 e4       	ldi	r21, 0x41	; 65
    3876:	6f 85       	ldd	r22, Y+15	; 0x0f
    3878:	78 89       	ldd	r23, Y+16	; 0x10
    387a:	89 89       	ldd	r24, Y+17	; 0x11
    387c:	9a 89       	ldd	r25, Y+18	; 0x12
    387e:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	bc 01       	movw	r22, r24
    3888:	cd 01       	movw	r24, r26
    388a:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	98 8f       	std	Y+24, r25	; 0x18
    3894:	8f 8b       	std	Y+23, r24	; 0x17
    3896:	0f c0       	rjmp	.+30     	; 0x38b6 <darkside+0x2a6>
    3898:	8a ef       	ldi	r24, 0xFA	; 250
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	9a 8f       	std	Y+26, r25	; 0x1a
    389e:	89 8f       	std	Y+25, r24	; 0x19
    38a0:	89 8d       	ldd	r24, Y+25	; 0x19
    38a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	f1 f7       	brne	.-4      	; 0x38a4 <darkside+0x294>
    38a8:	9a 8f       	std	Y+26, r25	; 0x1a
    38aa:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ac:	8f 89       	ldd	r24, Y+23	; 0x17
    38ae:	98 8d       	ldd	r25, Y+24	; 0x18
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	98 8f       	std	Y+24, r25	; 0x18
    38b4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b6:	8f 89       	ldd	r24, Y+23	; 0x17
    38b8:	98 8d       	ldd	r25, Y+24	; 0x18
    38ba:	89 2b       	or	r24, r25
    38bc:	69 f7       	brne	.-38     	; 0x3898 <darkside+0x288>
    38be:	14 c0       	rjmp	.+40     	; 0x38e8 <darkside+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c0:	6b 89       	ldd	r22, Y+19	; 0x13
    38c2:	7c 89       	ldd	r23, Y+20	; 0x14
    38c4:	8d 89       	ldd	r24, Y+21	; 0x15
    38c6:	9e 89       	ldd	r25, Y+22	; 0x16
    38c8:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	98 8f       	std	Y+24, r25	; 0x18
    38d2:	8f 8b       	std	Y+23, r24	; 0x17
    38d4:	8f 89       	ldd	r24, Y+23	; 0x17
    38d6:	98 8d       	ldd	r25, Y+24	; 0x18
    38d8:	9c 8f       	std	Y+28, r25	; 0x1c
    38da:	8b 8f       	std	Y+27, r24	; 0x1b
    38dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	f1 f7       	brne	.-4      	; 0x38e0 <darkside+0x2d0>
    38e4:	9c 8f       	std	Y+28, r25	; 0x1c
    38e6:	8b 8f       	std	Y+27, r24	; 0x1b
					_delay_ms(2000);
				}
				// last position
				if(current_position == (TACTIC_ONE_POSITION_COUNT - 1))
    38e8:	80 91 7b 02 	lds	r24, 0x027B
    38ec:	81 30       	cpi	r24, 0x01	; 1
    38ee:	09 f4       	brne	.+2      	; 0x38f2 <darkside+0x2e2>
				{
					while(1);
    38f0:	ff cf       	rjmp	.-2      	; 0x38f0 <darkside+0x2e0>
			active_state = TACTIC_ONE;
			next_position = current_position;

			break;
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    38f2:	80 91 7b 02 	lds	r24, 0x027B
    38f6:	8f 5f       	subi	r24, 0xFF	; 255
    38f8:	80 93 7b 02 	sts	0x027B, r24
    38fc:	80 91 7b 02 	lds	r24, 0x027B
    3900:	82 30       	cpi	r24, 0x02	; 2
    3902:	08 f4       	brcc	.+2      	; 0x3906 <darkside+0x2f6>
    3904:	35 cf       	rjmp	.-406    	; 0x3770 <darkside+0x160>
				{
					while(1);
				}
			}//end of for
		}//end of switch
	}//end of while
    3906:	98 ce       	rjmp	.-720    	; 0x3638 <darkside+0x28>

00003908 <main>:
#include "debug.h"
#include "can.h"
#include <avr/interrupt.h>

int main()
{
    3908:	cf 93       	push	r28
    390a:	df 93       	push	r29
    390c:	cd b7       	in	r28, 0x3d	; 61
    390e:	de b7       	in	r29, 0x3e	; 62
    3910:	aa 97       	sbiw	r28, 0x2a	; 42
    3912:	0f b6       	in	r0, 0x3f	; 63
    3914:	f8 94       	cli
    3916:	de bf       	out	0x3e, r29	; 62
    3918:	0f be       	out	0x3f, r0	; 63
    391a:	cd bf       	out	0x3d, r28	; 61

	system_init();
    391c:	0e 94 a8 14 	call	0x2950	; 0x2950 <system_init>
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	90 e8       	ldi	r25, 0x80	; 128
    3924:	ab e3       	ldi	r26, 0x3B	; 59
    3926:	b5 e4       	ldi	r27, 0x45	; 69
    3928:	89 83       	std	Y+1, r24	; 0x01
    392a:	9a 83       	std	Y+2, r25	; 0x02
    392c:	ab 83       	std	Y+3, r26	; 0x03
    392e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e4       	ldi	r19, 0x40	; 64
    3934:	4c e1       	ldi	r20, 0x1C	; 28
    3936:	55 e4       	ldi	r21, 0x45	; 69
    3938:	69 81       	ldd	r22, Y+1	; 0x01
    393a:	7a 81       	ldd	r23, Y+2	; 0x02
    393c:	8b 81       	ldd	r24, Y+3	; 0x03
    393e:	9c 81       	ldd	r25, Y+4	; 0x04
    3940:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    3944:	dc 01       	movw	r26, r24
    3946:	cb 01       	movw	r24, r22
    3948:	8d 83       	std	Y+5, r24	; 0x05
    394a:	9e 83       	std	Y+6, r25	; 0x06
    394c:	af 83       	std	Y+7, r26	; 0x07
    394e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	40 e8       	ldi	r20, 0x80	; 128
    3956:	5f e3       	ldi	r21, 0x3F	; 63
    3958:	6d 81       	ldd	r22, Y+5	; 0x05
    395a:	7e 81       	ldd	r23, Y+6	; 0x06
    395c:	8f 81       	ldd	r24, Y+7	; 0x07
    395e:	98 85       	ldd	r25, Y+8	; 0x08
    3960:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    3964:	88 23       	and	r24, r24
    3966:	2c f4       	brge	.+10     	; 0x3972 <main+0x6a>
		__ticks = 1;
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	9a 87       	std	Y+10, r25	; 0x0a
    396e:	89 87       	std	Y+9, r24	; 0x09
    3970:	3f c0       	rjmp	.+126    	; 0x39f0 <main+0xe8>
	else if (__tmp > 65535)
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	3f ef       	ldi	r19, 0xFF	; 255
    3976:	4f e7       	ldi	r20, 0x7F	; 127
    3978:	57 e4       	ldi	r21, 0x47	; 71
    397a:	6d 81       	ldd	r22, Y+5	; 0x05
    397c:	7e 81       	ldd	r23, Y+6	; 0x06
    397e:	8f 81       	ldd	r24, Y+7	; 0x07
    3980:	98 85       	ldd	r25, Y+8	; 0x08
    3982:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    3986:	18 16       	cp	r1, r24
    3988:	4c f5       	brge	.+82     	; 0x39dc <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	40 e2       	ldi	r20, 0x20	; 32
    3990:	51 e4       	ldi	r21, 0x41	; 65
    3992:	69 81       	ldd	r22, Y+1	; 0x01
    3994:	7a 81       	ldd	r23, Y+2	; 0x02
    3996:	8b 81       	ldd	r24, Y+3	; 0x03
    3998:	9c 81       	ldd	r25, Y+4	; 0x04
    399a:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    399e:	dc 01       	movw	r26, r24
    39a0:	cb 01       	movw	r24, r22
    39a2:	bc 01       	movw	r22, r24
    39a4:	cd 01       	movw	r24, r26
    39a6:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	9a 87       	std	Y+10, r25	; 0x0a
    39b0:	89 87       	std	Y+9, r24	; 0x09
    39b2:	0f c0       	rjmp	.+30     	; 0x39d2 <main+0xca>
    39b4:	8a ef       	ldi	r24, 0xFA	; 250
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	9c 87       	std	Y+12, r25	; 0x0c
    39ba:	8b 87       	std	Y+11, r24	; 0x0b
    39bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    39be:	9c 85       	ldd	r25, Y+12	; 0x0c
    39c0:	01 97       	sbiw	r24, 0x01	; 1
    39c2:	f1 f7       	brne	.-4      	; 0x39c0 <main+0xb8>
    39c4:	9c 87       	std	Y+12, r25	; 0x0c
    39c6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c8:	89 85       	ldd	r24, Y+9	; 0x09
    39ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	9a 87       	std	Y+10, r25	; 0x0a
    39d0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d2:	89 85       	ldd	r24, Y+9	; 0x09
    39d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d6:	89 2b       	or	r24, r25
    39d8:	69 f7       	brne	.-38     	; 0x39b4 <main+0xac>
    39da:	14 c0       	rjmp	.+40     	; 0x3a04 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39dc:	6d 81       	ldd	r22, Y+5	; 0x05
    39de:	7e 81       	ldd	r23, Y+6	; 0x06
    39e0:	8f 81       	ldd	r24, Y+7	; 0x07
    39e2:	98 85       	ldd	r25, Y+8	; 0x08
    39e4:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	9a 87       	std	Y+10, r25	; 0x0a
    39ee:	89 87       	std	Y+9, r24	; 0x09
    39f0:	89 85       	ldd	r24, Y+9	; 0x09
    39f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f4:	9e 87       	std	Y+14, r25	; 0x0e
    39f6:	8d 87       	std	Y+13, r24	; 0x0d
    39f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fc:	01 97       	sbiw	r24, 0x01	; 1
    39fe:	f1 f7       	brne	.-4      	; 0x39fc <main+0xf4>
    3a00:	9e 87       	std	Y+14, r25	; 0x0e
    3a02:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(3000);



	while(1) {
		SER_1(180);
    3a04:	6f e7       	ldi	r22, 0x7F	; 127
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	0e 94 9b 00 	call	0x136	; 0x136 <servo_move>
    3a0c:	80 e0       	ldi	r24, 0x00	; 0
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	aa e7       	ldi	r26, 0x7A	; 122
    3a12:	b4 e4       	ldi	r27, 0x44	; 68
    3a14:	8f 87       	std	Y+15, r24	; 0x0f
    3a16:	98 8b       	std	Y+16, r25	; 0x10
    3a18:	a9 8b       	std	Y+17, r26	; 0x11
    3a1a:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	30 e4       	ldi	r19, 0x40	; 64
    3a20:	4c e1       	ldi	r20, 0x1C	; 28
    3a22:	55 e4       	ldi	r21, 0x45	; 69
    3a24:	6f 85       	ldd	r22, Y+15	; 0x0f
    3a26:	78 89       	ldd	r23, Y+16	; 0x10
    3a28:	89 89       	ldd	r24, Y+17	; 0x11
    3a2a:	9a 89       	ldd	r25, Y+18	; 0x12
    3a2c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    3a30:	dc 01       	movw	r26, r24
    3a32:	cb 01       	movw	r24, r22
    3a34:	8b 8b       	std	Y+19, r24	; 0x13
    3a36:	9c 8b       	std	Y+20, r25	; 0x14
    3a38:	ad 8b       	std	Y+21, r26	; 0x15
    3a3a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	40 e8       	ldi	r20, 0x80	; 128
    3a42:	5f e3       	ldi	r21, 0x3F	; 63
    3a44:	6b 89       	ldd	r22, Y+19	; 0x13
    3a46:	7c 89       	ldd	r23, Y+20	; 0x14
    3a48:	8d 89       	ldd	r24, Y+21	; 0x15
    3a4a:	9e 89       	ldd	r25, Y+22	; 0x16
    3a4c:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    3a50:	88 23       	and	r24, r24
    3a52:	2c f4       	brge	.+10     	; 0x3a5e <main+0x156>
		__ticks = 1;
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	98 8f       	std	Y+24, r25	; 0x18
    3a5a:	8f 8b       	std	Y+23, r24	; 0x17
    3a5c:	3f c0       	rjmp	.+126    	; 0x3adc <main+0x1d4>
	else if (__tmp > 65535)
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	3f ef       	ldi	r19, 0xFF	; 255
    3a62:	4f e7       	ldi	r20, 0x7F	; 127
    3a64:	57 e4       	ldi	r21, 0x47	; 71
    3a66:	6b 89       	ldd	r22, Y+19	; 0x13
    3a68:	7c 89       	ldd	r23, Y+20	; 0x14
    3a6a:	8d 89       	ldd	r24, Y+21	; 0x15
    3a6c:	9e 89       	ldd	r25, Y+22	; 0x16
    3a6e:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    3a72:	18 16       	cp	r1, r24
    3a74:	4c f5       	brge	.+82     	; 0x3ac8 <main+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	40 e2       	ldi	r20, 0x20	; 32
    3a7c:	51 e4       	ldi	r21, 0x41	; 65
    3a7e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3a80:	78 89       	ldd	r23, Y+16	; 0x10
    3a82:	89 89       	ldd	r24, Y+17	; 0x11
    3a84:	9a 89       	ldd	r25, Y+18	; 0x12
    3a86:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    3a8a:	dc 01       	movw	r26, r24
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	bc 01       	movw	r22, r24
    3a90:	cd 01       	movw	r24, r26
    3a92:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	98 8f       	std	Y+24, r25	; 0x18
    3a9c:	8f 8b       	std	Y+23, r24	; 0x17
    3a9e:	0f c0       	rjmp	.+30     	; 0x3abe <main+0x1b6>
    3aa0:	8a ef       	ldi	r24, 0xFA	; 250
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	9a 8f       	std	Y+26, r25	; 0x1a
    3aa6:	89 8f       	std	Y+25, r24	; 0x19
    3aa8:	89 8d       	ldd	r24, Y+25	; 0x19
    3aaa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3aac:	01 97       	sbiw	r24, 0x01	; 1
    3aae:	f1 f7       	brne	.-4      	; 0x3aac <main+0x1a4>
    3ab0:	9a 8f       	std	Y+26, r25	; 0x1a
    3ab2:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ab8:	01 97       	sbiw	r24, 0x01	; 1
    3aba:	98 8f       	std	Y+24, r25	; 0x18
    3abc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3abe:	8f 89       	ldd	r24, Y+23	; 0x17
    3ac0:	98 8d       	ldd	r25, Y+24	; 0x18
    3ac2:	89 2b       	or	r24, r25
    3ac4:	69 f7       	brne	.-38     	; 0x3aa0 <main+0x198>
    3ac6:	14 c0       	rjmp	.+40     	; 0x3af0 <main+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac8:	6b 89       	ldd	r22, Y+19	; 0x13
    3aca:	7c 89       	ldd	r23, Y+20	; 0x14
    3acc:	8d 89       	ldd	r24, Y+21	; 0x15
    3ace:	9e 89       	ldd	r25, Y+22	; 0x16
    3ad0:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	98 8f       	std	Y+24, r25	; 0x18
    3ada:	8f 8b       	std	Y+23, r24	; 0x17
    3adc:	8f 89       	ldd	r24, Y+23	; 0x17
    3ade:	98 8d       	ldd	r25, Y+24	; 0x18
    3ae0:	9c 8f       	std	Y+28, r25	; 0x1c
    3ae2:	8b 8f       	std	Y+27, r24	; 0x1b
    3ae4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ae6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	f1 f7       	brne	.-4      	; 0x3ae8 <main+0x1e0>
    3aec:	9c 8f       	std	Y+28, r25	; 0x1c
    3aee:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1000);
		SER_1(0);
    3af0:	60 e0       	ldi	r22, 0x00	; 0
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	0e 94 9b 00 	call	0x136	; 0x136 <servo_move>
    3af8:	80 e0       	ldi	r24, 0x00	; 0
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	aa ef       	ldi	r26, 0xFA	; 250
    3afe:	b4 e4       	ldi	r27, 0x44	; 68
    3b00:	8d 8f       	std	Y+29, r24	; 0x1d
    3b02:	9e 8f       	std	Y+30, r25	; 0x1e
    3b04:	af 8f       	std	Y+31, r26	; 0x1f
    3b06:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e4       	ldi	r19, 0x40	; 64
    3b0c:	4c e1       	ldi	r20, 0x1C	; 28
    3b0e:	55 e4       	ldi	r21, 0x45	; 69
    3b10:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3b12:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3b14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b16:	98 a1       	ldd	r25, Y+32	; 0x20
    3b18:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	89 a3       	std	Y+33, r24	; 0x21
    3b22:	9a a3       	std	Y+34, r25	; 0x22
    3b24:	ab a3       	std	Y+35, r26	; 0x23
    3b26:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	40 e8       	ldi	r20, 0x80	; 128
    3b2e:	5f e3       	ldi	r21, 0x3F	; 63
    3b30:	69 a1       	ldd	r22, Y+33	; 0x21
    3b32:	7a a1       	ldd	r23, Y+34	; 0x22
    3b34:	8b a1       	ldd	r24, Y+35	; 0x23
    3b36:	9c a1       	ldd	r25, Y+36	; 0x24
    3b38:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <__cmpsf2>
    3b3c:	88 23       	and	r24, r24
    3b3e:	2c f4       	brge	.+10     	; 0x3b4a <main+0x242>
		__ticks = 1;
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	9e a3       	std	Y+38, r25	; 0x26
    3b46:	8d a3       	std	Y+37, r24	; 0x25
    3b48:	3f c0       	rjmp	.+126    	; 0x3bc8 <main+0x2c0>
	else if (__tmp > 65535)
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	3f ef       	ldi	r19, 0xFF	; 255
    3b4e:	4f e7       	ldi	r20, 0x7F	; 127
    3b50:	57 e4       	ldi	r21, 0x47	; 71
    3b52:	69 a1       	ldd	r22, Y+33	; 0x21
    3b54:	7a a1       	ldd	r23, Y+34	; 0x22
    3b56:	8b a1       	ldd	r24, Y+35	; 0x23
    3b58:	9c a1       	ldd	r25, Y+36	; 0x24
    3b5a:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <__gesf2>
    3b5e:	18 16       	cp	r1, r24
    3b60:	4c f5       	brge	.+82     	; 0x3bb4 <main+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	40 e2       	ldi	r20, 0x20	; 32
    3b68:	51 e4       	ldi	r21, 0x41	; 65
    3b6a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3b6c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3b6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b70:	98 a1       	ldd	r25, Y+32	; 0x20
    3b72:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__mulsf3>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	bc 01       	movw	r22, r24
    3b7c:	cd 01       	movw	r24, r26
    3b7e:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	9e a3       	std	Y+38, r25	; 0x26
    3b88:	8d a3       	std	Y+37, r24	; 0x25
    3b8a:	0f c0       	rjmp	.+30     	; 0x3baa <main+0x2a2>
    3b8c:	8a ef       	ldi	r24, 0xFA	; 250
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	98 a7       	std	Y+40, r25	; 0x28
    3b92:	8f a3       	std	Y+39, r24	; 0x27
    3b94:	8f a1       	ldd	r24, Y+39	; 0x27
    3b96:	98 a5       	ldd	r25, Y+40	; 0x28
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	f1 f7       	brne	.-4      	; 0x3b98 <main+0x290>
    3b9c:	98 a7       	std	Y+40, r25	; 0x28
    3b9e:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ba2:	9e a1       	ldd	r25, Y+38	; 0x26
    3ba4:	01 97       	sbiw	r24, 0x01	; 1
    3ba6:	9e a3       	std	Y+38, r25	; 0x26
    3ba8:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3baa:	8d a1       	ldd	r24, Y+37	; 0x25
    3bac:	9e a1       	ldd	r25, Y+38	; 0x26
    3bae:	89 2b       	or	r24, r25
    3bb0:	69 f7       	brne	.-38     	; 0x3b8c <main+0x284>
    3bb2:	14 c0       	rjmp	.+40     	; 0x3bdc <main+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb4:	69 a1       	ldd	r22, Y+33	; 0x21
    3bb6:	7a a1       	ldd	r23, Y+34	; 0x22
    3bb8:	8b a1       	ldd	r24, Y+35	; 0x23
    3bba:	9c a1       	ldd	r25, Y+36	; 0x24
    3bbc:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__fixunssfsi>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	9e a3       	std	Y+38, r25	; 0x26
    3bc6:	8d a3       	std	Y+37, r24	; 0x25
    3bc8:	8d a1       	ldd	r24, Y+37	; 0x25
    3bca:	9e a1       	ldd	r25, Y+38	; 0x26
    3bcc:	9a a7       	std	Y+42, r25	; 0x2a
    3bce:	89 a7       	std	Y+41, r24	; 0x29
    3bd0:	89 a5       	ldd	r24, Y+41	; 0x29
    3bd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bd4:	01 97       	sbiw	r24, 0x01	; 1
    3bd6:	f1 f7       	brne	.-4      	; 0x3bd4 <main+0x2cc>
    3bd8:	9a a7       	std	Y+42, r25	; 0x2a
    3bda:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(2000);
	}
    3bdc:	13 cf       	rjmp	.-474    	; 0x3a04 <main+0xfc>

00003bde <__subsf3>:
    3bde:	50 58       	subi	r21, 0x80	; 128

00003be0 <__addsf3>:
    3be0:	bb 27       	eor	r27, r27
    3be2:	aa 27       	eor	r26, r26
    3be4:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <__addsf3x>
    3be8:	0c 94 7a 1f 	jmp	0x3ef4	; 0x3ef4 <__fp_round>
    3bec:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <__fp_pscA>
    3bf0:	38 f0       	brcs	.+14     	; 0x3c00 <__addsf3+0x20>
    3bf2:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <__fp_pscB>
    3bf6:	20 f0       	brcs	.+8      	; 0x3c00 <__addsf3+0x20>
    3bf8:	39 f4       	brne	.+14     	; 0x3c08 <__addsf3+0x28>
    3bfa:	9f 3f       	cpi	r25, 0xFF	; 255
    3bfc:	19 f4       	brne	.+6      	; 0x3c04 <__addsf3+0x24>
    3bfe:	26 f4       	brtc	.+8      	; 0x3c08 <__addsf3+0x28>
    3c00:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <__fp_nan>
    3c04:	0e f4       	brtc	.+2      	; 0x3c08 <__addsf3+0x28>
    3c06:	e0 95       	com	r30
    3c08:	e7 fb       	bst	r30, 7
    3c0a:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__fp_inf>

00003c0e <__addsf3x>:
    3c0e:	e9 2f       	mov	r30, r25
    3c10:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__fp_split3>
    3c14:	58 f3       	brcs	.-42     	; 0x3bec <__addsf3+0xc>
    3c16:	ba 17       	cp	r27, r26
    3c18:	62 07       	cpc	r22, r18
    3c1a:	73 07       	cpc	r23, r19
    3c1c:	84 07       	cpc	r24, r20
    3c1e:	95 07       	cpc	r25, r21
    3c20:	20 f0       	brcs	.+8      	; 0x3c2a <__addsf3x+0x1c>
    3c22:	79 f4       	brne	.+30     	; 0x3c42 <__addsf3x+0x34>
    3c24:	a6 f5       	brtc	.+104    	; 0x3c8e <__addsf3x+0x80>
    3c26:	0c 94 ad 1f 	jmp	0x3f5a	; 0x3f5a <__fp_zero>
    3c2a:	0e f4       	brtc	.+2      	; 0x3c2e <__addsf3x+0x20>
    3c2c:	e0 95       	com	r30
    3c2e:	0b 2e       	mov	r0, r27
    3c30:	ba 2f       	mov	r27, r26
    3c32:	a0 2d       	mov	r26, r0
    3c34:	0b 01       	movw	r0, r22
    3c36:	b9 01       	movw	r22, r18
    3c38:	90 01       	movw	r18, r0
    3c3a:	0c 01       	movw	r0, r24
    3c3c:	ca 01       	movw	r24, r20
    3c3e:	a0 01       	movw	r20, r0
    3c40:	11 24       	eor	r1, r1
    3c42:	ff 27       	eor	r31, r31
    3c44:	59 1b       	sub	r21, r25
    3c46:	99 f0       	breq	.+38     	; 0x3c6e <__addsf3x+0x60>
    3c48:	59 3f       	cpi	r21, 0xF9	; 249
    3c4a:	50 f4       	brcc	.+20     	; 0x3c60 <__addsf3x+0x52>
    3c4c:	50 3e       	cpi	r21, 0xE0	; 224
    3c4e:	68 f1       	brcs	.+90     	; 0x3caa <__addsf3x+0x9c>
    3c50:	1a 16       	cp	r1, r26
    3c52:	f0 40       	sbci	r31, 0x00	; 0
    3c54:	a2 2f       	mov	r26, r18
    3c56:	23 2f       	mov	r18, r19
    3c58:	34 2f       	mov	r19, r20
    3c5a:	44 27       	eor	r20, r20
    3c5c:	58 5f       	subi	r21, 0xF8	; 248
    3c5e:	f3 cf       	rjmp	.-26     	; 0x3c46 <__addsf3x+0x38>
    3c60:	46 95       	lsr	r20
    3c62:	37 95       	ror	r19
    3c64:	27 95       	ror	r18
    3c66:	a7 95       	ror	r26
    3c68:	f0 40       	sbci	r31, 0x00	; 0
    3c6a:	53 95       	inc	r21
    3c6c:	c9 f7       	brne	.-14     	; 0x3c60 <__addsf3x+0x52>
    3c6e:	7e f4       	brtc	.+30     	; 0x3c8e <__addsf3x+0x80>
    3c70:	1f 16       	cp	r1, r31
    3c72:	ba 0b       	sbc	r27, r26
    3c74:	62 0b       	sbc	r22, r18
    3c76:	73 0b       	sbc	r23, r19
    3c78:	84 0b       	sbc	r24, r20
    3c7a:	ba f0       	brmi	.+46     	; 0x3caa <__addsf3x+0x9c>
    3c7c:	91 50       	subi	r25, 0x01	; 1
    3c7e:	a1 f0       	breq	.+40     	; 0x3ca8 <__addsf3x+0x9a>
    3c80:	ff 0f       	add	r31, r31
    3c82:	bb 1f       	adc	r27, r27
    3c84:	66 1f       	adc	r22, r22
    3c86:	77 1f       	adc	r23, r23
    3c88:	88 1f       	adc	r24, r24
    3c8a:	c2 f7       	brpl	.-16     	; 0x3c7c <__addsf3x+0x6e>
    3c8c:	0e c0       	rjmp	.+28     	; 0x3caa <__addsf3x+0x9c>
    3c8e:	ba 0f       	add	r27, r26
    3c90:	62 1f       	adc	r22, r18
    3c92:	73 1f       	adc	r23, r19
    3c94:	84 1f       	adc	r24, r20
    3c96:	48 f4       	brcc	.+18     	; 0x3caa <__addsf3x+0x9c>
    3c98:	87 95       	ror	r24
    3c9a:	77 95       	ror	r23
    3c9c:	67 95       	ror	r22
    3c9e:	b7 95       	ror	r27
    3ca0:	f7 95       	ror	r31
    3ca2:	9e 3f       	cpi	r25, 0xFE	; 254
    3ca4:	08 f0       	brcs	.+2      	; 0x3ca8 <__addsf3x+0x9a>
    3ca6:	b0 cf       	rjmp	.-160    	; 0x3c08 <__addsf3+0x28>
    3ca8:	93 95       	inc	r25
    3caa:	88 0f       	add	r24, r24
    3cac:	08 f0       	brcs	.+2      	; 0x3cb0 <__addsf3x+0xa2>
    3cae:	99 27       	eor	r25, r25
    3cb0:	ee 0f       	add	r30, r30
    3cb2:	97 95       	ror	r25
    3cb4:	87 95       	ror	r24
    3cb6:	08 95       	ret

00003cb8 <__cmpsf2>:
    3cb8:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__fp_cmp>
    3cbc:	08 f4       	brcc	.+2      	; 0x3cc0 <__cmpsf2+0x8>
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	08 95       	ret

00003cc2 <__divsf3>:
    3cc2:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__divsf3x>
    3cc6:	0c 94 7a 1f 	jmp	0x3ef4	; 0x3ef4 <__fp_round>
    3cca:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <__fp_pscB>
    3cce:	58 f0       	brcs	.+22     	; 0x3ce6 <__divsf3+0x24>
    3cd0:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <__fp_pscA>
    3cd4:	40 f0       	brcs	.+16     	; 0x3ce6 <__divsf3+0x24>
    3cd6:	29 f4       	brne	.+10     	; 0x3ce2 <__divsf3+0x20>
    3cd8:	5f 3f       	cpi	r21, 0xFF	; 255
    3cda:	29 f0       	breq	.+10     	; 0x3ce6 <__divsf3+0x24>
    3cdc:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__fp_inf>
    3ce0:	51 11       	cpse	r21, r1
    3ce2:	0c 94 ae 1f 	jmp	0x3f5c	; 0x3f5c <__fp_szero>
    3ce6:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <__fp_nan>

00003cea <__divsf3x>:
    3cea:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__fp_split3>
    3cee:	68 f3       	brcs	.-38     	; 0x3cca <__divsf3+0x8>

00003cf0 <__divsf3_pse>:
    3cf0:	99 23       	and	r25, r25
    3cf2:	b1 f3       	breq	.-20     	; 0x3ce0 <__divsf3+0x1e>
    3cf4:	55 23       	and	r21, r21
    3cf6:	91 f3       	breq	.-28     	; 0x3cdc <__divsf3+0x1a>
    3cf8:	95 1b       	sub	r25, r21
    3cfa:	55 0b       	sbc	r21, r21
    3cfc:	bb 27       	eor	r27, r27
    3cfe:	aa 27       	eor	r26, r26
    3d00:	62 17       	cp	r22, r18
    3d02:	73 07       	cpc	r23, r19
    3d04:	84 07       	cpc	r24, r20
    3d06:	38 f0       	brcs	.+14     	; 0x3d16 <__divsf3_pse+0x26>
    3d08:	9f 5f       	subi	r25, 0xFF	; 255
    3d0a:	5f 4f       	sbci	r21, 0xFF	; 255
    3d0c:	22 0f       	add	r18, r18
    3d0e:	33 1f       	adc	r19, r19
    3d10:	44 1f       	adc	r20, r20
    3d12:	aa 1f       	adc	r26, r26
    3d14:	a9 f3       	breq	.-22     	; 0x3d00 <__divsf3_pse+0x10>
    3d16:	35 d0       	rcall	.+106    	; 0x3d82 <__divsf3_pse+0x92>
    3d18:	0e 2e       	mov	r0, r30
    3d1a:	3a f0       	brmi	.+14     	; 0x3d2a <__divsf3_pse+0x3a>
    3d1c:	e0 e8       	ldi	r30, 0x80	; 128
    3d1e:	32 d0       	rcall	.+100    	; 0x3d84 <__divsf3_pse+0x94>
    3d20:	91 50       	subi	r25, 0x01	; 1
    3d22:	50 40       	sbci	r21, 0x00	; 0
    3d24:	e6 95       	lsr	r30
    3d26:	00 1c       	adc	r0, r0
    3d28:	ca f7       	brpl	.-14     	; 0x3d1c <__divsf3_pse+0x2c>
    3d2a:	2b d0       	rcall	.+86     	; 0x3d82 <__divsf3_pse+0x92>
    3d2c:	fe 2f       	mov	r31, r30
    3d2e:	29 d0       	rcall	.+82     	; 0x3d82 <__divsf3_pse+0x92>
    3d30:	66 0f       	add	r22, r22
    3d32:	77 1f       	adc	r23, r23
    3d34:	88 1f       	adc	r24, r24
    3d36:	bb 1f       	adc	r27, r27
    3d38:	26 17       	cp	r18, r22
    3d3a:	37 07       	cpc	r19, r23
    3d3c:	48 07       	cpc	r20, r24
    3d3e:	ab 07       	cpc	r26, r27
    3d40:	b0 e8       	ldi	r27, 0x80	; 128
    3d42:	09 f0       	breq	.+2      	; 0x3d46 <__divsf3_pse+0x56>
    3d44:	bb 0b       	sbc	r27, r27
    3d46:	80 2d       	mov	r24, r0
    3d48:	bf 01       	movw	r22, r30
    3d4a:	ff 27       	eor	r31, r31
    3d4c:	93 58       	subi	r25, 0x83	; 131
    3d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d50:	3a f0       	brmi	.+14     	; 0x3d60 <__divsf3_pse+0x70>
    3d52:	9e 3f       	cpi	r25, 0xFE	; 254
    3d54:	51 05       	cpc	r21, r1
    3d56:	78 f0       	brcs	.+30     	; 0x3d76 <__divsf3_pse+0x86>
    3d58:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__fp_inf>
    3d5c:	0c 94 ae 1f 	jmp	0x3f5c	; 0x3f5c <__fp_szero>
    3d60:	5f 3f       	cpi	r21, 0xFF	; 255
    3d62:	e4 f3       	brlt	.-8      	; 0x3d5c <__divsf3_pse+0x6c>
    3d64:	98 3e       	cpi	r25, 0xE8	; 232
    3d66:	d4 f3       	brlt	.-12     	; 0x3d5c <__divsf3_pse+0x6c>
    3d68:	86 95       	lsr	r24
    3d6a:	77 95       	ror	r23
    3d6c:	67 95       	ror	r22
    3d6e:	b7 95       	ror	r27
    3d70:	f7 95       	ror	r31
    3d72:	9f 5f       	subi	r25, 0xFF	; 255
    3d74:	c9 f7       	brne	.-14     	; 0x3d68 <__divsf3_pse+0x78>
    3d76:	88 0f       	add	r24, r24
    3d78:	91 1d       	adc	r25, r1
    3d7a:	96 95       	lsr	r25
    3d7c:	87 95       	ror	r24
    3d7e:	97 f9       	bld	r25, 7
    3d80:	08 95       	ret
    3d82:	e1 e0       	ldi	r30, 0x01	; 1
    3d84:	66 0f       	add	r22, r22
    3d86:	77 1f       	adc	r23, r23
    3d88:	88 1f       	adc	r24, r24
    3d8a:	bb 1f       	adc	r27, r27
    3d8c:	62 17       	cp	r22, r18
    3d8e:	73 07       	cpc	r23, r19
    3d90:	84 07       	cpc	r24, r20
    3d92:	ba 07       	cpc	r27, r26
    3d94:	20 f0       	brcs	.+8      	; 0x3d9e <__divsf3_pse+0xae>
    3d96:	62 1b       	sub	r22, r18
    3d98:	73 0b       	sbc	r23, r19
    3d9a:	84 0b       	sbc	r24, r20
    3d9c:	ba 0b       	sbc	r27, r26
    3d9e:	ee 1f       	adc	r30, r30
    3da0:	88 f7       	brcc	.-30     	; 0x3d84 <__divsf3_pse+0x94>
    3da2:	e0 95       	com	r30
    3da4:	08 95       	ret

00003da6 <__fixunssfsi>:
    3da6:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <__fp_splitA>
    3daa:	88 f0       	brcs	.+34     	; 0x3dce <__fixunssfsi+0x28>
    3dac:	9f 57       	subi	r25, 0x7F	; 127
    3dae:	98 f0       	brcs	.+38     	; 0x3dd6 <__fixunssfsi+0x30>
    3db0:	b9 2f       	mov	r27, r25
    3db2:	99 27       	eor	r25, r25
    3db4:	b7 51       	subi	r27, 0x17	; 23
    3db6:	b0 f0       	brcs	.+44     	; 0x3de4 <__fixunssfsi+0x3e>
    3db8:	e1 f0       	breq	.+56     	; 0x3df2 <__fixunssfsi+0x4c>
    3dba:	66 0f       	add	r22, r22
    3dbc:	77 1f       	adc	r23, r23
    3dbe:	88 1f       	adc	r24, r24
    3dc0:	99 1f       	adc	r25, r25
    3dc2:	1a f0       	brmi	.+6      	; 0x3dca <__fixunssfsi+0x24>
    3dc4:	ba 95       	dec	r27
    3dc6:	c9 f7       	brne	.-14     	; 0x3dba <__fixunssfsi+0x14>
    3dc8:	14 c0       	rjmp	.+40     	; 0x3df2 <__fixunssfsi+0x4c>
    3dca:	b1 30       	cpi	r27, 0x01	; 1
    3dcc:	91 f0       	breq	.+36     	; 0x3df2 <__fixunssfsi+0x4c>
    3dce:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__fp_zero>
    3dd2:	b1 e0       	ldi	r27, 0x01	; 1
    3dd4:	08 95       	ret
    3dd6:	0c 94 ad 1f 	jmp	0x3f5a	; 0x3f5a <__fp_zero>
    3dda:	67 2f       	mov	r22, r23
    3ddc:	78 2f       	mov	r23, r24
    3dde:	88 27       	eor	r24, r24
    3de0:	b8 5f       	subi	r27, 0xF8	; 248
    3de2:	39 f0       	breq	.+14     	; 0x3df2 <__fixunssfsi+0x4c>
    3de4:	b9 3f       	cpi	r27, 0xF9	; 249
    3de6:	cc f3       	brlt	.-14     	; 0x3dda <__fixunssfsi+0x34>
    3de8:	86 95       	lsr	r24
    3dea:	77 95       	ror	r23
    3dec:	67 95       	ror	r22
    3dee:	b3 95       	inc	r27
    3df0:	d9 f7       	brne	.-10     	; 0x3de8 <__fixunssfsi+0x42>
    3df2:	3e f4       	brtc	.+14     	; 0x3e02 <__fixunssfsi+0x5c>
    3df4:	90 95       	com	r25
    3df6:	80 95       	com	r24
    3df8:	70 95       	com	r23
    3dfa:	61 95       	neg	r22
    3dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    3dfe:	8f 4f       	sbci	r24, 0xFF	; 255
    3e00:	9f 4f       	sbci	r25, 0xFF	; 255
    3e02:	08 95       	ret

00003e04 <__floatunsisf>:
    3e04:	e8 94       	clt
    3e06:	09 c0       	rjmp	.+18     	; 0x3e1a <__floatsisf+0x12>

00003e08 <__floatsisf>:
    3e08:	97 fb       	bst	r25, 7
    3e0a:	3e f4       	brtc	.+14     	; 0x3e1a <__floatsisf+0x12>
    3e0c:	90 95       	com	r25
    3e0e:	80 95       	com	r24
    3e10:	70 95       	com	r23
    3e12:	61 95       	neg	r22
    3e14:	7f 4f       	sbci	r23, 0xFF	; 255
    3e16:	8f 4f       	sbci	r24, 0xFF	; 255
    3e18:	9f 4f       	sbci	r25, 0xFF	; 255
    3e1a:	99 23       	and	r25, r25
    3e1c:	a9 f0       	breq	.+42     	; 0x3e48 <__floatsisf+0x40>
    3e1e:	f9 2f       	mov	r31, r25
    3e20:	96 e9       	ldi	r25, 0x96	; 150
    3e22:	bb 27       	eor	r27, r27
    3e24:	93 95       	inc	r25
    3e26:	f6 95       	lsr	r31
    3e28:	87 95       	ror	r24
    3e2a:	77 95       	ror	r23
    3e2c:	67 95       	ror	r22
    3e2e:	b7 95       	ror	r27
    3e30:	f1 11       	cpse	r31, r1
    3e32:	f8 cf       	rjmp	.-16     	; 0x3e24 <__floatsisf+0x1c>
    3e34:	fa f4       	brpl	.+62     	; 0x3e74 <__floatsisf+0x6c>
    3e36:	bb 0f       	add	r27, r27
    3e38:	11 f4       	brne	.+4      	; 0x3e3e <__floatsisf+0x36>
    3e3a:	60 ff       	sbrs	r22, 0
    3e3c:	1b c0       	rjmp	.+54     	; 0x3e74 <__floatsisf+0x6c>
    3e3e:	6f 5f       	subi	r22, 0xFF	; 255
    3e40:	7f 4f       	sbci	r23, 0xFF	; 255
    3e42:	8f 4f       	sbci	r24, 0xFF	; 255
    3e44:	9f 4f       	sbci	r25, 0xFF	; 255
    3e46:	16 c0       	rjmp	.+44     	; 0x3e74 <__floatsisf+0x6c>
    3e48:	88 23       	and	r24, r24
    3e4a:	11 f0       	breq	.+4      	; 0x3e50 <__floatsisf+0x48>
    3e4c:	96 e9       	ldi	r25, 0x96	; 150
    3e4e:	11 c0       	rjmp	.+34     	; 0x3e72 <__floatsisf+0x6a>
    3e50:	77 23       	and	r23, r23
    3e52:	21 f0       	breq	.+8      	; 0x3e5c <__floatsisf+0x54>
    3e54:	9e e8       	ldi	r25, 0x8E	; 142
    3e56:	87 2f       	mov	r24, r23
    3e58:	76 2f       	mov	r23, r22
    3e5a:	05 c0       	rjmp	.+10     	; 0x3e66 <__floatsisf+0x5e>
    3e5c:	66 23       	and	r22, r22
    3e5e:	71 f0       	breq	.+28     	; 0x3e7c <__floatsisf+0x74>
    3e60:	96 e8       	ldi	r25, 0x86	; 134
    3e62:	86 2f       	mov	r24, r22
    3e64:	70 e0       	ldi	r23, 0x00	; 0
    3e66:	60 e0       	ldi	r22, 0x00	; 0
    3e68:	2a f0       	brmi	.+10     	; 0x3e74 <__floatsisf+0x6c>
    3e6a:	9a 95       	dec	r25
    3e6c:	66 0f       	add	r22, r22
    3e6e:	77 1f       	adc	r23, r23
    3e70:	88 1f       	adc	r24, r24
    3e72:	da f7       	brpl	.-10     	; 0x3e6a <__floatsisf+0x62>
    3e74:	88 0f       	add	r24, r24
    3e76:	96 95       	lsr	r25
    3e78:	87 95       	ror	r24
    3e7a:	97 f9       	bld	r25, 7
    3e7c:	08 95       	ret

00003e7e <__fp_cmp>:
    3e7e:	99 0f       	add	r25, r25
    3e80:	00 08       	sbc	r0, r0
    3e82:	55 0f       	add	r21, r21
    3e84:	aa 0b       	sbc	r26, r26
    3e86:	e0 e8       	ldi	r30, 0x80	; 128
    3e88:	fe ef       	ldi	r31, 0xFE	; 254
    3e8a:	16 16       	cp	r1, r22
    3e8c:	17 06       	cpc	r1, r23
    3e8e:	e8 07       	cpc	r30, r24
    3e90:	f9 07       	cpc	r31, r25
    3e92:	c0 f0       	brcs	.+48     	; 0x3ec4 <__fp_cmp+0x46>
    3e94:	12 16       	cp	r1, r18
    3e96:	13 06       	cpc	r1, r19
    3e98:	e4 07       	cpc	r30, r20
    3e9a:	f5 07       	cpc	r31, r21
    3e9c:	98 f0       	brcs	.+38     	; 0x3ec4 <__fp_cmp+0x46>
    3e9e:	62 1b       	sub	r22, r18
    3ea0:	73 0b       	sbc	r23, r19
    3ea2:	84 0b       	sbc	r24, r20
    3ea4:	95 0b       	sbc	r25, r21
    3ea6:	39 f4       	brne	.+14     	; 0x3eb6 <__fp_cmp+0x38>
    3ea8:	0a 26       	eor	r0, r26
    3eaa:	61 f0       	breq	.+24     	; 0x3ec4 <__fp_cmp+0x46>
    3eac:	23 2b       	or	r18, r19
    3eae:	24 2b       	or	r18, r20
    3eb0:	25 2b       	or	r18, r21
    3eb2:	21 f4       	brne	.+8      	; 0x3ebc <__fp_cmp+0x3e>
    3eb4:	08 95       	ret
    3eb6:	0a 26       	eor	r0, r26
    3eb8:	09 f4       	brne	.+2      	; 0x3ebc <__fp_cmp+0x3e>
    3eba:	a1 40       	sbci	r26, 0x01	; 1
    3ebc:	a6 95       	lsr	r26
    3ebe:	8f ef       	ldi	r24, 0xFF	; 255
    3ec0:	81 1d       	adc	r24, r1
    3ec2:	81 1d       	adc	r24, r1
    3ec4:	08 95       	ret

00003ec6 <__fp_inf>:
    3ec6:	97 f9       	bld	r25, 7
    3ec8:	9f 67       	ori	r25, 0x7F	; 127
    3eca:	80 e8       	ldi	r24, 0x80	; 128
    3ecc:	70 e0       	ldi	r23, 0x00	; 0
    3ece:	60 e0       	ldi	r22, 0x00	; 0
    3ed0:	08 95       	ret

00003ed2 <__fp_nan>:
    3ed2:	9f ef       	ldi	r25, 0xFF	; 255
    3ed4:	80 ec       	ldi	r24, 0xC0	; 192
    3ed6:	08 95       	ret

00003ed8 <__fp_pscA>:
    3ed8:	00 24       	eor	r0, r0
    3eda:	0a 94       	dec	r0
    3edc:	16 16       	cp	r1, r22
    3ede:	17 06       	cpc	r1, r23
    3ee0:	18 06       	cpc	r1, r24
    3ee2:	09 06       	cpc	r0, r25
    3ee4:	08 95       	ret

00003ee6 <__fp_pscB>:
    3ee6:	00 24       	eor	r0, r0
    3ee8:	0a 94       	dec	r0
    3eea:	12 16       	cp	r1, r18
    3eec:	13 06       	cpc	r1, r19
    3eee:	14 06       	cpc	r1, r20
    3ef0:	05 06       	cpc	r0, r21
    3ef2:	08 95       	ret

00003ef4 <__fp_round>:
    3ef4:	09 2e       	mov	r0, r25
    3ef6:	03 94       	inc	r0
    3ef8:	00 0c       	add	r0, r0
    3efa:	11 f4       	brne	.+4      	; 0x3f00 <__fp_round+0xc>
    3efc:	88 23       	and	r24, r24
    3efe:	52 f0       	brmi	.+20     	; 0x3f14 <__fp_round+0x20>
    3f00:	bb 0f       	add	r27, r27
    3f02:	40 f4       	brcc	.+16     	; 0x3f14 <__fp_round+0x20>
    3f04:	bf 2b       	or	r27, r31
    3f06:	11 f4       	brne	.+4      	; 0x3f0c <__fp_round+0x18>
    3f08:	60 ff       	sbrs	r22, 0
    3f0a:	04 c0       	rjmp	.+8      	; 0x3f14 <__fp_round+0x20>
    3f0c:	6f 5f       	subi	r22, 0xFF	; 255
    3f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f10:	8f 4f       	sbci	r24, 0xFF	; 255
    3f12:	9f 4f       	sbci	r25, 0xFF	; 255
    3f14:	08 95       	ret

00003f16 <__fp_split3>:
    3f16:	57 fd       	sbrc	r21, 7
    3f18:	90 58       	subi	r25, 0x80	; 128
    3f1a:	44 0f       	add	r20, r20
    3f1c:	55 1f       	adc	r21, r21
    3f1e:	59 f0       	breq	.+22     	; 0x3f36 <__fp_splitA+0x10>
    3f20:	5f 3f       	cpi	r21, 0xFF	; 255
    3f22:	71 f0       	breq	.+28     	; 0x3f40 <__fp_splitA+0x1a>
    3f24:	47 95       	ror	r20

00003f26 <__fp_splitA>:
    3f26:	88 0f       	add	r24, r24
    3f28:	97 fb       	bst	r25, 7
    3f2a:	99 1f       	adc	r25, r25
    3f2c:	61 f0       	breq	.+24     	; 0x3f46 <__fp_splitA+0x20>
    3f2e:	9f 3f       	cpi	r25, 0xFF	; 255
    3f30:	79 f0       	breq	.+30     	; 0x3f50 <__fp_splitA+0x2a>
    3f32:	87 95       	ror	r24
    3f34:	08 95       	ret
    3f36:	12 16       	cp	r1, r18
    3f38:	13 06       	cpc	r1, r19
    3f3a:	14 06       	cpc	r1, r20
    3f3c:	55 1f       	adc	r21, r21
    3f3e:	f2 cf       	rjmp	.-28     	; 0x3f24 <__fp_split3+0xe>
    3f40:	46 95       	lsr	r20
    3f42:	f1 df       	rcall	.-30     	; 0x3f26 <__fp_splitA>
    3f44:	08 c0       	rjmp	.+16     	; 0x3f56 <__fp_splitA+0x30>
    3f46:	16 16       	cp	r1, r22
    3f48:	17 06       	cpc	r1, r23
    3f4a:	18 06       	cpc	r1, r24
    3f4c:	99 1f       	adc	r25, r25
    3f4e:	f1 cf       	rjmp	.-30     	; 0x3f32 <__fp_splitA+0xc>
    3f50:	86 95       	lsr	r24
    3f52:	71 05       	cpc	r23, r1
    3f54:	61 05       	cpc	r22, r1
    3f56:	08 94       	sec
    3f58:	08 95       	ret

00003f5a <__fp_zero>:
    3f5a:	e8 94       	clt

00003f5c <__fp_szero>:
    3f5c:	bb 27       	eor	r27, r27
    3f5e:	66 27       	eor	r22, r22
    3f60:	77 27       	eor	r23, r23
    3f62:	cb 01       	movw	r24, r22
    3f64:	97 f9       	bld	r25, 7
    3f66:	08 95       	ret

00003f68 <__gesf2>:
    3f68:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__fp_cmp>
    3f6c:	08 f4       	brcc	.+2      	; 0x3f70 <__gesf2+0x8>
    3f6e:	8f ef       	ldi	r24, 0xFF	; 255
    3f70:	08 95       	ret

00003f72 <__mulsf3>:
    3f72:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <__mulsf3x>
    3f76:	0c 94 7a 1f 	jmp	0x3ef4	; 0x3ef4 <__fp_round>
    3f7a:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <__fp_pscA>
    3f7e:	38 f0       	brcs	.+14     	; 0x3f8e <__mulsf3+0x1c>
    3f80:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <__fp_pscB>
    3f84:	20 f0       	brcs	.+8      	; 0x3f8e <__mulsf3+0x1c>
    3f86:	95 23       	and	r25, r21
    3f88:	11 f0       	breq	.+4      	; 0x3f8e <__mulsf3+0x1c>
    3f8a:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__fp_inf>
    3f8e:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <__fp_nan>
    3f92:	11 24       	eor	r1, r1
    3f94:	0c 94 ae 1f 	jmp	0x3f5c	; 0x3f5c <__fp_szero>

00003f98 <__mulsf3x>:
    3f98:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <__fp_split3>
    3f9c:	70 f3       	brcs	.-36     	; 0x3f7a <__mulsf3+0x8>

00003f9e <__mulsf3_pse>:
    3f9e:	95 9f       	mul	r25, r21
    3fa0:	c1 f3       	breq	.-16     	; 0x3f92 <__mulsf3+0x20>
    3fa2:	95 0f       	add	r25, r21
    3fa4:	50 e0       	ldi	r21, 0x00	; 0
    3fa6:	55 1f       	adc	r21, r21
    3fa8:	62 9f       	mul	r22, r18
    3faa:	f0 01       	movw	r30, r0
    3fac:	72 9f       	mul	r23, r18
    3fae:	bb 27       	eor	r27, r27
    3fb0:	f0 0d       	add	r31, r0
    3fb2:	b1 1d       	adc	r27, r1
    3fb4:	63 9f       	mul	r22, r19
    3fb6:	aa 27       	eor	r26, r26
    3fb8:	f0 0d       	add	r31, r0
    3fba:	b1 1d       	adc	r27, r1
    3fbc:	aa 1f       	adc	r26, r26
    3fbe:	64 9f       	mul	r22, r20
    3fc0:	66 27       	eor	r22, r22
    3fc2:	b0 0d       	add	r27, r0
    3fc4:	a1 1d       	adc	r26, r1
    3fc6:	66 1f       	adc	r22, r22
    3fc8:	82 9f       	mul	r24, r18
    3fca:	22 27       	eor	r18, r18
    3fcc:	b0 0d       	add	r27, r0
    3fce:	a1 1d       	adc	r26, r1
    3fd0:	62 1f       	adc	r22, r18
    3fd2:	73 9f       	mul	r23, r19
    3fd4:	b0 0d       	add	r27, r0
    3fd6:	a1 1d       	adc	r26, r1
    3fd8:	62 1f       	adc	r22, r18
    3fda:	83 9f       	mul	r24, r19
    3fdc:	a0 0d       	add	r26, r0
    3fde:	61 1d       	adc	r22, r1
    3fe0:	22 1f       	adc	r18, r18
    3fe2:	74 9f       	mul	r23, r20
    3fe4:	33 27       	eor	r19, r19
    3fe6:	a0 0d       	add	r26, r0
    3fe8:	61 1d       	adc	r22, r1
    3fea:	23 1f       	adc	r18, r19
    3fec:	84 9f       	mul	r24, r20
    3fee:	60 0d       	add	r22, r0
    3ff0:	21 1d       	adc	r18, r1
    3ff2:	82 2f       	mov	r24, r18
    3ff4:	76 2f       	mov	r23, r22
    3ff6:	6a 2f       	mov	r22, r26
    3ff8:	11 24       	eor	r1, r1
    3ffa:	9f 57       	subi	r25, 0x7F	; 127
    3ffc:	50 40       	sbci	r21, 0x00	; 0
    3ffe:	9a f0       	brmi	.+38     	; 0x4026 <__mulsf3_pse+0x88>
    4000:	f1 f0       	breq	.+60     	; 0x403e <__mulsf3_pse+0xa0>
    4002:	88 23       	and	r24, r24
    4004:	4a f0       	brmi	.+18     	; 0x4018 <__mulsf3_pse+0x7a>
    4006:	ee 0f       	add	r30, r30
    4008:	ff 1f       	adc	r31, r31
    400a:	bb 1f       	adc	r27, r27
    400c:	66 1f       	adc	r22, r22
    400e:	77 1f       	adc	r23, r23
    4010:	88 1f       	adc	r24, r24
    4012:	91 50       	subi	r25, 0x01	; 1
    4014:	50 40       	sbci	r21, 0x00	; 0
    4016:	a9 f7       	brne	.-22     	; 0x4002 <__mulsf3_pse+0x64>
    4018:	9e 3f       	cpi	r25, 0xFE	; 254
    401a:	51 05       	cpc	r21, r1
    401c:	80 f0       	brcs	.+32     	; 0x403e <__mulsf3_pse+0xa0>
    401e:	0c 94 63 1f 	jmp	0x3ec6	; 0x3ec6 <__fp_inf>
    4022:	0c 94 ae 1f 	jmp	0x3f5c	; 0x3f5c <__fp_szero>
    4026:	5f 3f       	cpi	r21, 0xFF	; 255
    4028:	e4 f3       	brlt	.-8      	; 0x4022 <__mulsf3_pse+0x84>
    402a:	98 3e       	cpi	r25, 0xE8	; 232
    402c:	d4 f3       	brlt	.-12     	; 0x4022 <__mulsf3_pse+0x84>
    402e:	86 95       	lsr	r24
    4030:	77 95       	ror	r23
    4032:	67 95       	ror	r22
    4034:	b7 95       	ror	r27
    4036:	f7 95       	ror	r31
    4038:	e7 95       	ror	r30
    403a:	9f 5f       	subi	r25, 0xFF	; 255
    403c:	c1 f7       	brne	.-16     	; 0x402e <__mulsf3_pse+0x90>
    403e:	fe 2b       	or	r31, r30
    4040:	88 0f       	add	r24, r24
    4042:	91 1d       	adc	r25, r1
    4044:	96 95       	lsr	r25
    4046:	87 95       	ror	r24
    4048:	97 f9       	bld	r25, 7
    404a:	08 95       	ret

0000404c <calloc>:
    404c:	0f 93       	push	r16
    404e:	1f 93       	push	r17
    4050:	cf 93       	push	r28
    4052:	df 93       	push	r29
    4054:	86 9f       	mul	r24, r22
    4056:	80 01       	movw	r16, r0
    4058:	87 9f       	mul	r24, r23
    405a:	10 0d       	add	r17, r0
    405c:	96 9f       	mul	r25, r22
    405e:	10 0d       	add	r17, r0
    4060:	11 24       	eor	r1, r1
    4062:	c8 01       	movw	r24, r16
    4064:	0e 94 42 20 	call	0x4084	; 0x4084 <malloc>
    4068:	ec 01       	movw	r28, r24
    406a:	00 97       	sbiw	r24, 0x00	; 0
    406c:	29 f0       	breq	.+10     	; 0x4078 <calloc+0x2c>
    406e:	a8 01       	movw	r20, r16
    4070:	60 e0       	ldi	r22, 0x00	; 0
    4072:	70 e0       	ldi	r23, 0x00	; 0
    4074:	0e 94 6f 21 	call	0x42de	; 0x42de <memset>
    4078:	ce 01       	movw	r24, r28
    407a:	df 91       	pop	r29
    407c:	cf 91       	pop	r28
    407e:	1f 91       	pop	r17
    4080:	0f 91       	pop	r16
    4082:	08 95       	ret

00004084 <malloc>:
    4084:	cf 93       	push	r28
    4086:	df 93       	push	r29
    4088:	82 30       	cpi	r24, 0x02	; 2
    408a:	91 05       	cpc	r25, r1
    408c:	10 f4       	brcc	.+4      	; 0x4092 <malloc+0xe>
    408e:	82 e0       	ldi	r24, 0x02	; 2
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	e0 91 80 02 	lds	r30, 0x0280
    4096:	f0 91 81 02 	lds	r31, 0x0281
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	c0 e0       	ldi	r28, 0x00	; 0
    40a0:	d0 e0       	ldi	r29, 0x00	; 0
    40a2:	30 97       	sbiw	r30, 0x00	; 0
    40a4:	11 f1       	breq	.+68     	; 0x40ea <malloc+0x66>
    40a6:	40 81       	ld	r20, Z
    40a8:	51 81       	ldd	r21, Z+1	; 0x01
    40aa:	48 17       	cp	r20, r24
    40ac:	59 07       	cpc	r21, r25
    40ae:	c0 f0       	brcs	.+48     	; 0x40e0 <malloc+0x5c>
    40b0:	48 17       	cp	r20, r24
    40b2:	59 07       	cpc	r21, r25
    40b4:	61 f4       	brne	.+24     	; 0x40ce <malloc+0x4a>
    40b6:	82 81       	ldd	r24, Z+2	; 0x02
    40b8:	93 81       	ldd	r25, Z+3	; 0x03
    40ba:	20 97       	sbiw	r28, 0x00	; 0
    40bc:	19 f0       	breq	.+6      	; 0x40c4 <malloc+0x40>
    40be:	9b 83       	std	Y+3, r25	; 0x03
    40c0:	8a 83       	std	Y+2, r24	; 0x02
    40c2:	2b c0       	rjmp	.+86     	; 0x411a <malloc+0x96>
    40c4:	90 93 81 02 	sts	0x0281, r25
    40c8:	80 93 80 02 	sts	0x0280, r24
    40cc:	26 c0       	rjmp	.+76     	; 0x411a <malloc+0x96>
    40ce:	21 15       	cp	r18, r1
    40d0:	31 05       	cpc	r19, r1
    40d2:	19 f0       	breq	.+6      	; 0x40da <malloc+0x56>
    40d4:	42 17       	cp	r20, r18
    40d6:	53 07       	cpc	r21, r19
    40d8:	18 f4       	brcc	.+6      	; 0x40e0 <malloc+0x5c>
    40da:	9a 01       	movw	r18, r20
    40dc:	be 01       	movw	r22, r28
    40de:	df 01       	movw	r26, r30
    40e0:	ef 01       	movw	r28, r30
    40e2:	02 80       	ldd	r0, Z+2	; 0x02
    40e4:	f3 81       	ldd	r31, Z+3	; 0x03
    40e6:	e0 2d       	mov	r30, r0
    40e8:	dc cf       	rjmp	.-72     	; 0x40a2 <malloc+0x1e>
    40ea:	21 15       	cp	r18, r1
    40ec:	31 05       	cpc	r19, r1
    40ee:	09 f1       	breq	.+66     	; 0x4132 <malloc+0xae>
    40f0:	28 1b       	sub	r18, r24
    40f2:	39 0b       	sbc	r19, r25
    40f4:	24 30       	cpi	r18, 0x04	; 4
    40f6:	31 05       	cpc	r19, r1
    40f8:	90 f4       	brcc	.+36     	; 0x411e <malloc+0x9a>
    40fa:	12 96       	adiw	r26, 0x02	; 2
    40fc:	8d 91       	ld	r24, X+
    40fe:	9c 91       	ld	r25, X
    4100:	13 97       	sbiw	r26, 0x03	; 3
    4102:	61 15       	cp	r22, r1
    4104:	71 05       	cpc	r23, r1
    4106:	21 f0       	breq	.+8      	; 0x4110 <malloc+0x8c>
    4108:	fb 01       	movw	r30, r22
    410a:	93 83       	std	Z+3, r25	; 0x03
    410c:	82 83       	std	Z+2, r24	; 0x02
    410e:	04 c0       	rjmp	.+8      	; 0x4118 <malloc+0x94>
    4110:	90 93 81 02 	sts	0x0281, r25
    4114:	80 93 80 02 	sts	0x0280, r24
    4118:	fd 01       	movw	r30, r26
    411a:	32 96       	adiw	r30, 0x02	; 2
    411c:	44 c0       	rjmp	.+136    	; 0x41a6 <malloc+0x122>
    411e:	fd 01       	movw	r30, r26
    4120:	e2 0f       	add	r30, r18
    4122:	f3 1f       	adc	r31, r19
    4124:	81 93       	st	Z+, r24
    4126:	91 93       	st	Z+, r25
    4128:	22 50       	subi	r18, 0x02	; 2
    412a:	31 09       	sbc	r19, r1
    412c:	2d 93       	st	X+, r18
    412e:	3c 93       	st	X, r19
    4130:	3a c0       	rjmp	.+116    	; 0x41a6 <malloc+0x122>
    4132:	20 91 7e 02 	lds	r18, 0x027E
    4136:	30 91 7f 02 	lds	r19, 0x027F
    413a:	23 2b       	or	r18, r19
    413c:	41 f4       	brne	.+16     	; 0x414e <malloc+0xca>
    413e:	20 91 02 01 	lds	r18, 0x0102
    4142:	30 91 03 01 	lds	r19, 0x0103
    4146:	30 93 7f 02 	sts	0x027F, r19
    414a:	20 93 7e 02 	sts	0x027E, r18
    414e:	20 91 00 01 	lds	r18, 0x0100
    4152:	30 91 01 01 	lds	r19, 0x0101
    4156:	21 15       	cp	r18, r1
    4158:	31 05       	cpc	r19, r1
    415a:	41 f4       	brne	.+16     	; 0x416c <malloc+0xe8>
    415c:	2d b7       	in	r18, 0x3d	; 61
    415e:	3e b7       	in	r19, 0x3e	; 62
    4160:	40 91 04 01 	lds	r20, 0x0104
    4164:	50 91 05 01 	lds	r21, 0x0105
    4168:	24 1b       	sub	r18, r20
    416a:	35 0b       	sbc	r19, r21
    416c:	e0 91 7e 02 	lds	r30, 0x027E
    4170:	f0 91 7f 02 	lds	r31, 0x027F
    4174:	e2 17       	cp	r30, r18
    4176:	f3 07       	cpc	r31, r19
    4178:	a0 f4       	brcc	.+40     	; 0x41a2 <malloc+0x11e>
    417a:	2e 1b       	sub	r18, r30
    417c:	3f 0b       	sbc	r19, r31
    417e:	28 17       	cp	r18, r24
    4180:	39 07       	cpc	r19, r25
    4182:	78 f0       	brcs	.+30     	; 0x41a2 <malloc+0x11e>
    4184:	ac 01       	movw	r20, r24
    4186:	4e 5f       	subi	r20, 0xFE	; 254
    4188:	5f 4f       	sbci	r21, 0xFF	; 255
    418a:	24 17       	cp	r18, r20
    418c:	35 07       	cpc	r19, r21
    418e:	48 f0       	brcs	.+18     	; 0x41a2 <malloc+0x11e>
    4190:	4e 0f       	add	r20, r30
    4192:	5f 1f       	adc	r21, r31
    4194:	50 93 7f 02 	sts	0x027F, r21
    4198:	40 93 7e 02 	sts	0x027E, r20
    419c:	81 93       	st	Z+, r24
    419e:	91 93       	st	Z+, r25
    41a0:	02 c0       	rjmp	.+4      	; 0x41a6 <malloc+0x122>
    41a2:	e0 e0       	ldi	r30, 0x00	; 0
    41a4:	f0 e0       	ldi	r31, 0x00	; 0
    41a6:	cf 01       	movw	r24, r30
    41a8:	df 91       	pop	r29
    41aa:	cf 91       	pop	r28
    41ac:	08 95       	ret

000041ae <free>:
    41ae:	0f 93       	push	r16
    41b0:	1f 93       	push	r17
    41b2:	cf 93       	push	r28
    41b4:	df 93       	push	r29
    41b6:	00 97       	sbiw	r24, 0x00	; 0
    41b8:	09 f4       	brne	.+2      	; 0x41bc <free+0xe>
    41ba:	8c c0       	rjmp	.+280    	; 0x42d4 <free+0x126>
    41bc:	fc 01       	movw	r30, r24
    41be:	32 97       	sbiw	r30, 0x02	; 2
    41c0:	13 82       	std	Z+3, r1	; 0x03
    41c2:	12 82       	std	Z+2, r1	; 0x02
    41c4:	00 91 80 02 	lds	r16, 0x0280
    41c8:	10 91 81 02 	lds	r17, 0x0281
    41cc:	01 15       	cp	r16, r1
    41ce:	11 05       	cpc	r17, r1
    41d0:	81 f4       	brne	.+32     	; 0x41f2 <free+0x44>
    41d2:	20 81       	ld	r18, Z
    41d4:	31 81       	ldd	r19, Z+1	; 0x01
    41d6:	82 0f       	add	r24, r18
    41d8:	93 1f       	adc	r25, r19
    41da:	20 91 7e 02 	lds	r18, 0x027E
    41de:	30 91 7f 02 	lds	r19, 0x027F
    41e2:	28 17       	cp	r18, r24
    41e4:	39 07       	cpc	r19, r25
    41e6:	79 f5       	brne	.+94     	; 0x4246 <free+0x98>
    41e8:	f0 93 7f 02 	sts	0x027F, r31
    41ec:	e0 93 7e 02 	sts	0x027E, r30
    41f0:	71 c0       	rjmp	.+226    	; 0x42d4 <free+0x126>
    41f2:	d8 01       	movw	r26, r16
    41f4:	40 e0       	ldi	r20, 0x00	; 0
    41f6:	50 e0       	ldi	r21, 0x00	; 0
    41f8:	ae 17       	cp	r26, r30
    41fa:	bf 07       	cpc	r27, r31
    41fc:	50 f4       	brcc	.+20     	; 0x4212 <free+0x64>
    41fe:	12 96       	adiw	r26, 0x02	; 2
    4200:	2d 91       	ld	r18, X+
    4202:	3c 91       	ld	r19, X
    4204:	13 97       	sbiw	r26, 0x03	; 3
    4206:	ad 01       	movw	r20, r26
    4208:	21 15       	cp	r18, r1
    420a:	31 05       	cpc	r19, r1
    420c:	09 f1       	breq	.+66     	; 0x4250 <free+0xa2>
    420e:	d9 01       	movw	r26, r18
    4210:	f3 cf       	rjmp	.-26     	; 0x41f8 <free+0x4a>
    4212:	9d 01       	movw	r18, r26
    4214:	da 01       	movw	r26, r20
    4216:	33 83       	std	Z+3, r19	; 0x03
    4218:	22 83       	std	Z+2, r18	; 0x02
    421a:	60 81       	ld	r22, Z
    421c:	71 81       	ldd	r23, Z+1	; 0x01
    421e:	86 0f       	add	r24, r22
    4220:	97 1f       	adc	r25, r23
    4222:	82 17       	cp	r24, r18
    4224:	93 07       	cpc	r25, r19
    4226:	69 f4       	brne	.+26     	; 0x4242 <free+0x94>
    4228:	ec 01       	movw	r28, r24
    422a:	28 81       	ld	r18, Y
    422c:	39 81       	ldd	r19, Y+1	; 0x01
    422e:	26 0f       	add	r18, r22
    4230:	37 1f       	adc	r19, r23
    4232:	2e 5f       	subi	r18, 0xFE	; 254
    4234:	3f 4f       	sbci	r19, 0xFF	; 255
    4236:	31 83       	std	Z+1, r19	; 0x01
    4238:	20 83       	st	Z, r18
    423a:	8a 81       	ldd	r24, Y+2	; 0x02
    423c:	9b 81       	ldd	r25, Y+3	; 0x03
    423e:	93 83       	std	Z+3, r25	; 0x03
    4240:	82 83       	std	Z+2, r24	; 0x02
    4242:	45 2b       	or	r20, r21
    4244:	29 f4       	brne	.+10     	; 0x4250 <free+0xa2>
    4246:	f0 93 81 02 	sts	0x0281, r31
    424a:	e0 93 80 02 	sts	0x0280, r30
    424e:	42 c0       	rjmp	.+132    	; 0x42d4 <free+0x126>
    4250:	13 96       	adiw	r26, 0x03	; 3
    4252:	fc 93       	st	X, r31
    4254:	ee 93       	st	-X, r30
    4256:	12 97       	sbiw	r26, 0x02	; 2
    4258:	ed 01       	movw	r28, r26
    425a:	49 91       	ld	r20, Y+
    425c:	59 91       	ld	r21, Y+
    425e:	9e 01       	movw	r18, r28
    4260:	24 0f       	add	r18, r20
    4262:	35 1f       	adc	r19, r21
    4264:	e2 17       	cp	r30, r18
    4266:	f3 07       	cpc	r31, r19
    4268:	71 f4       	brne	.+28     	; 0x4286 <free+0xd8>
    426a:	80 81       	ld	r24, Z
    426c:	91 81       	ldd	r25, Z+1	; 0x01
    426e:	84 0f       	add	r24, r20
    4270:	95 1f       	adc	r25, r21
    4272:	02 96       	adiw	r24, 0x02	; 2
    4274:	11 96       	adiw	r26, 0x01	; 1
    4276:	9c 93       	st	X, r25
    4278:	8e 93       	st	-X, r24
    427a:	82 81       	ldd	r24, Z+2	; 0x02
    427c:	93 81       	ldd	r25, Z+3	; 0x03
    427e:	13 96       	adiw	r26, 0x03	; 3
    4280:	9c 93       	st	X, r25
    4282:	8e 93       	st	-X, r24
    4284:	12 97       	sbiw	r26, 0x02	; 2
    4286:	e0 e0       	ldi	r30, 0x00	; 0
    4288:	f0 e0       	ldi	r31, 0x00	; 0
    428a:	d8 01       	movw	r26, r16
    428c:	12 96       	adiw	r26, 0x02	; 2
    428e:	8d 91       	ld	r24, X+
    4290:	9c 91       	ld	r25, X
    4292:	13 97       	sbiw	r26, 0x03	; 3
    4294:	00 97       	sbiw	r24, 0x00	; 0
    4296:	19 f0       	breq	.+6      	; 0x429e <free+0xf0>
    4298:	f8 01       	movw	r30, r16
    429a:	8c 01       	movw	r16, r24
    429c:	f6 cf       	rjmp	.-20     	; 0x428a <free+0xdc>
    429e:	8d 91       	ld	r24, X+
    42a0:	9c 91       	ld	r25, X
    42a2:	98 01       	movw	r18, r16
    42a4:	2e 5f       	subi	r18, 0xFE	; 254
    42a6:	3f 4f       	sbci	r19, 0xFF	; 255
    42a8:	82 0f       	add	r24, r18
    42aa:	93 1f       	adc	r25, r19
    42ac:	20 91 7e 02 	lds	r18, 0x027E
    42b0:	30 91 7f 02 	lds	r19, 0x027F
    42b4:	28 17       	cp	r18, r24
    42b6:	39 07       	cpc	r19, r25
    42b8:	69 f4       	brne	.+26     	; 0x42d4 <free+0x126>
    42ba:	30 97       	sbiw	r30, 0x00	; 0
    42bc:	29 f4       	brne	.+10     	; 0x42c8 <free+0x11a>
    42be:	10 92 81 02 	sts	0x0281, r1
    42c2:	10 92 80 02 	sts	0x0280, r1
    42c6:	02 c0       	rjmp	.+4      	; 0x42cc <free+0x11e>
    42c8:	13 82       	std	Z+3, r1	; 0x03
    42ca:	12 82       	std	Z+2, r1	; 0x02
    42cc:	10 93 7f 02 	sts	0x027F, r17
    42d0:	00 93 7e 02 	sts	0x027E, r16
    42d4:	df 91       	pop	r29
    42d6:	cf 91       	pop	r28
    42d8:	1f 91       	pop	r17
    42da:	0f 91       	pop	r16
    42dc:	08 95       	ret

000042de <memset>:
    42de:	dc 01       	movw	r26, r24
    42e0:	01 c0       	rjmp	.+2      	; 0x42e4 <memset+0x6>
    42e2:	6d 93       	st	X+, r22
    42e4:	41 50       	subi	r20, 0x01	; 1
    42e6:	50 40       	sbci	r21, 0x00	; 0
    42e8:	e0 f7       	brcc	.-8      	; 0x42e2 <memset+0x4>
    42ea:	08 95       	ret

000042ec <_exit>:
    42ec:	f8 94       	cli

000042ee <__stop_program>:
    42ee:	ff cf       	rjmp	.-2      	; 0x42ee <__stop_program>
