
EP_Framework_Atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000041b6  0000424a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000154  0080012e  0080012e  00004278  2**0
                  ALLOC
  3 .stab         00006198  00000000  00000000  00004278  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000201f  00000000  00000000  0000a410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000c42f  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000c440  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__vector_8>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__vector_23>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 06 18 	jmp	0x300c	; 0x300c <__vector_32>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__vector_34>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 eb       	ldi	r30, 0xB6	; 182
      a8:	f1 e4       	ldi	r31, 0x41	; 65
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 32       	cpi	r26, 0x2E	; 46
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	ae e2       	ldi	r26, 0x2E	; 46
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a2 38       	cpi	r26, 0x82	; 130
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <main>
      ce:	0c 94 d9 20 	jmp	0x41b2	; 0x41b2 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <send_arduino>:
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	00 d0       	rcall	.+0      	; 0xdc <send_arduino+0x6>
      dc:	1f 92       	push	r1
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	89 83       	std	Y+1, r24	; 0x01
      e4:	6a 83       	std	Y+2, r22	; 0x02
      e6:	4b 83       	std	Y+3, r20	; 0x03
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	0e 94 86 18 	call	0x310c	; 0x310c <UART1_Write>
      ee:	8a 81       	ldd	r24, Y+2	; 0x02
      f0:	0e 94 86 18 	call	0x310c	; 0x310c <UART1_Write>
      f4:	8b 81       	ldd	r24, Y+3	; 0x03
      f6:	0e 94 86 18 	call	0x310c	; 0x310c <UART1_Write>
      fa:	88 e5       	ldi	r24, 0x58	; 88
      fc:	0e 94 86 18 	call	0x310c	; 0x310c <UART1_Write>
     100:	0f 90       	pop	r0
     102:	0f 90       	pop	r0
     104:	0f 90       	pop	r0
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <get_arduino>:
 * 	Function: 	 unsigned char get_arduino(unsigned char type, unsigned char id)
 * 	Description: Gets status of the device
 * 	Parameters:	 unsigned char type - the type of device ('R', 'M', 'S')
 * 				 unsigned char id   - the id of the device 1-x
 */
unsigned char get_arduino(unsigned char type, unsigned char id) {
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	00 d0       	rcall	.+0      	; 0x112 <get_arduino+0x6>
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	89 83       	std	Y+1, r24	; 0x01
     118:	6a 83       	std	Y+2, r22	; 0x02
	send_arduino('G',type,(unsigned char)id);	// send the "get data protocol"
     11a:	4a 81       	ldd	r20, Y+2	; 0x02
     11c:	69 81       	ldd	r22, Y+1	; 0x01
     11e:	87 e4       	ldi	r24, 0x47	; 71
     120:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_arduino>
	UART1_Read();								// read (because it is sending 2x)
     124:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <UART1_Read>

	return UART1_Read();						// return the read
     128:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <UART1_Read>

}
     12c:	0f 90       	pop	r0
     12e:	0f 90       	pop	r0
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	08 95       	ret

00000136 <servo_move>:

void servo_move(unsigned char id, unsigned char data) { send_arduino('S', id, data); }
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	00 d0       	rcall	.+0      	; 0x13c <servo_move+0x6>
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
     140:	89 83       	std	Y+1, r24	; 0x01
     142:	6a 83       	std	Y+2, r22	; 0x02
     144:	4a 81       	ldd	r20, Y+2	; 0x02
     146:	69 81       	ldd	r22, Y+1	; 0x01
     148:	83 e5       	ldi	r24, 0x53	; 83
     14a:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_arduino>
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <AX_UART_Init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "ax.h"

void AX_UART_Init(void)
{
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	2e 97       	sbiw	r28, 0x0e	; 14
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRD &= ~((1 << 2) | (1 << 3));
     16c:	8a e2       	ldi	r24, 0x2A	; 42
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	2a e2       	ldi	r18, 0x2A	; 42
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	f9 01       	movw	r30, r18
     176:	20 81       	ld	r18, Z
     178:	23 7f       	andi	r18, 0xF3	; 243
     17a:	fc 01       	movw	r30, r24
     17c:	20 83       	st	Z, r18
	//PORTE = 0;
	UCSR1A = 0;
     17e:	88 ec       	ldi	r24, 0xC8	; 200
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	fc 01       	movw	r30, r24
     184:	10 82       	st	Z, r1
	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
     186:	89 ec       	ldi	r24, 0xC9	; 201
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	28 e1       	ldi	r18, 0x18	; 24
     18c:	fc 01       	movw	r30, r24
     18e:	20 83       	st	Z, r18
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
     190:	8a ec       	ldi	r24, 0xCA	; 202
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	26 e0       	ldi	r18, 0x06	; 6
     196:	fc 01       	movw	r30, r24
     198:	20 83       	st	Z, r18

	UBRR1H = 0;
     19a:	8d ec       	ldi	r24, 0xCD	; 205
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	fc 01       	movw	r30, r24
     1a0:	10 82       	st	Z, r1
	UBRR1L = 5;
     1a2:	8c ec       	ldi	r24, 0xCC	; 204
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	25 e0       	ldi	r18, 0x05	; 5
     1a8:	fc 01       	movw	r30, r24
     1aa:	20 83       	st	Z, r18
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	a8 ec       	ldi	r26, 0xC8	; 200
     1b2:	b2 e4       	ldi	r27, 0x42	; 66
     1b4:	89 83       	std	Y+1, r24	; 0x01
     1b6:	9a 83       	std	Y+2, r25	; 0x02
     1b8:	ab 83       	std	Y+3, r26	; 0x03
     1ba:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	30 e4       	ldi	r19, 0x40	; 64
     1c0:	4c e1       	ldi	r20, 0x1C	; 28
     1c2:	55 e4       	ldi	r21, 0x45	; 69
     1c4:	69 81       	ldd	r22, Y+1	; 0x01
     1c6:	7a 81       	ldd	r23, Y+2	; 0x02
     1c8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ca:	9c 81       	ldd	r25, Y+4	; 0x04
     1cc:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
     1d0:	dc 01       	movw	r26, r24
     1d2:	cb 01       	movw	r24, r22
     1d4:	8d 83       	std	Y+5, r24	; 0x05
     1d6:	9e 83       	std	Y+6, r25	; 0x06
     1d8:	af 83       	std	Y+7, r26	; 0x07
     1da:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     1dc:	20 e0       	ldi	r18, 0x00	; 0
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	40 e8       	ldi	r20, 0x80	; 128
     1e2:	5f e3       	ldi	r21, 0x3F	; 63
     1e4:	6d 81       	ldd	r22, Y+5	; 0x05
     1e6:	7e 81       	ldd	r23, Y+6	; 0x06
     1e8:	8f 81       	ldd	r24, Y+7	; 0x07
     1ea:	98 85       	ldd	r25, Y+8	; 0x08
     1ec:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
     1f0:	88 23       	and	r24, r24
     1f2:	2c f4       	brge	.+10     	; 0x1fe <AX_UART_Init+0xa6>
		__ticks = 1;
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	9a 87       	std	Y+10, r25	; 0x0a
     1fa:	89 87       	std	Y+9, r24	; 0x09
     1fc:	3f c0       	rjmp	.+126    	; 0x27c <AX_UART_Init+0x124>
	else if (__tmp > 65535)
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	3f ef       	ldi	r19, 0xFF	; 255
     202:	4f e7       	ldi	r20, 0x7F	; 127
     204:	57 e4       	ldi	r21, 0x47	; 71
     206:	6d 81       	ldd	r22, Y+5	; 0x05
     208:	7e 81       	ldd	r23, Y+6	; 0x06
     20a:	8f 81       	ldd	r24, Y+7	; 0x07
     20c:	98 85       	ldd	r25, Y+8	; 0x08
     20e:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
     212:	18 16       	cp	r1, r24
     214:	4c f5       	brge	.+82     	; 0x268 <AX_UART_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e2       	ldi	r20, 0x20	; 32
     21c:	51 e4       	ldi	r21, 0x41	; 65
     21e:	69 81       	ldd	r22, Y+1	; 0x01
     220:	7a 81       	ldd	r23, Y+2	; 0x02
     222:	8b 81       	ldd	r24, Y+3	; 0x03
     224:	9c 81       	ldd	r25, Y+4	; 0x04
     226:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
     22a:	dc 01       	movw	r26, r24
     22c:	cb 01       	movw	r24, r22
     22e:	bc 01       	movw	r22, r24
     230:	cd 01       	movw	r24, r26
     232:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
     236:	dc 01       	movw	r26, r24
     238:	cb 01       	movw	r24, r22
     23a:	9a 87       	std	Y+10, r25	; 0x0a
     23c:	89 87       	std	Y+9, r24	; 0x09
     23e:	0f c0       	rjmp	.+30     	; 0x25e <AX_UART_Init+0x106>
     240:	8a ef       	ldi	r24, 0xFA	; 250
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	9c 87       	std	Y+12, r25	; 0x0c
     246:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     248:	8b 85       	ldd	r24, Y+11	; 0x0b
     24a:	9c 85       	ldd	r25, Y+12	; 0x0c
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <AX_UART_Init+0xf4>
     250:	9c 87       	std	Y+12, r25	; 0x0c
     252:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     254:	89 85       	ldd	r24, Y+9	; 0x09
     256:	9a 85       	ldd	r25, Y+10	; 0x0a
     258:	01 97       	sbiw	r24, 0x01	; 1
     25a:	9a 87       	std	Y+10, r25	; 0x0a
     25c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     25e:	89 85       	ldd	r24, Y+9	; 0x09
     260:	9a 85       	ldd	r25, Y+10	; 0x0a
     262:	89 2b       	or	r24, r25
     264:	69 f7       	brne	.-38     	; 0x240 <AX_UART_Init+0xe8>
     266:	14 c0       	rjmp	.+40     	; 0x290 <AX_UART_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     268:	6d 81       	ldd	r22, Y+5	; 0x05
     26a:	7e 81       	ldd	r23, Y+6	; 0x06
     26c:	8f 81       	ldd	r24, Y+7	; 0x07
     26e:	98 85       	ldd	r25, Y+8	; 0x08
     270:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	9a 87       	std	Y+10, r25	; 0x0a
     27a:	89 87       	std	Y+9, r24	; 0x09
     27c:	89 85       	ldd	r24, Y+9	; 0x09
     27e:	9a 85       	ldd	r25, Y+10	; 0x0a
     280:	9e 87       	std	Y+14, r25	; 0x0e
     282:	8d 87       	std	Y+13, r24	; 0x0d
     284:	8d 85       	ldd	r24, Y+13	; 0x0d
     286:	9e 85       	ldd	r25, Y+14	; 0x0e
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	f1 f7       	brne	.-4      	; 0x288 <AX_UART_Init+0x130>
     28c:	9e 87       	std	Y+14, r25	; 0x0e
     28e:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);
}
     290:	2e 96       	adiw	r28, 0x0e	; 14
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	1f 92       	push	r1
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1<<UDRE1)) );
     2ae:	00 00       	nop
     2b0:	88 ec       	ldi	r24, 0xC8	; 200
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	fc 01       	movw	r30, r24
     2b6:	80 81       	ld	r24, Z
     2b8:	88 2f       	mov	r24, r24
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	80 72       	andi	r24, 0x20	; 32
     2be:	99 27       	eor	r25, r25
     2c0:	89 2b       	or	r24, r25
     2c2:	b1 f3       	breq	.-20     	; 0x2b0 <AX_SendChar+0xe>
	UDR1 = data;
     2c4:	8e ec       	ldi	r24, 0xCE	; 206
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	29 81       	ldd	r18, Y+1	; 0x01
     2ca:	fc 01       	movw	r30, r24
     2cc:	20 83       	st	Z, r18
}
     2ce:	0f 90       	pop	r0
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <AX_ReadChar>:
unsigned char AX_ReadChar(void)
{
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
   //UART1_Write('I');
   while( !( UCSR1A & (1<< RXC1)) );
     2de:	00 00       	nop
     2e0:	88 ec       	ldi	r24, 0xC8	; 200
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	fc 01       	movw	r30, r24
     2e6:	80 81       	ld	r24, Z
     2e8:	88 23       	and	r24, r24
     2ea:	d4 f7       	brge	.-12     	; 0x2e0 <AX_ReadChar+0xa>
   return UDR1;
     2ec:	8e ec       	ldi	r24, 0xCE	; 206
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	fc 01       	movw	r30, r24
     2f2:	80 81       	ld	r24, Z
}
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <AX_ReadStatus>:
/*************************************************************************************************************************************************************************************
*															 Funkcije za upravljanje AX-12A servoima                                                                                                                                      *
*************************************************************************************************************************************************************************************/

void AX_ReadStatus(void)
{
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	cd b7       	in	r28, 0x3d	; 61
     300:	de b7       	in	r29, 0x3e	; 62
     302:	27 97       	sbiw	r28, 0x07	; 7
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	f8 94       	cli
     308:	de bf       	out	0x3e, r29	; 62
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	cd bf       	out	0x3d, r28	; 61
	 unsigned char status[7] = {0,0,0,0,0,0};
     30e:	27 e0       	ldi	r18, 0x07	; 7
     310:	ce 01       	movw	r24, r28
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	fc 01       	movw	r30, r24
     316:	32 2f       	mov	r19, r18
     318:	11 92       	st	Z+, r1
     31a:	3a 95       	dec	r19
     31c:	e9 f7       	brne	.-6      	; 0x318 <AX_ReadStatus+0x1e>

	status[0] = AX_ReadChar();
     31e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <AX_ReadChar>
     322:	89 83       	std	Y+1, r24	; 0x01
	status[1] = AX_ReadChar();
     324:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <AX_ReadChar>
     328:	8a 83       	std	Y+2, r24	; 0x02
	status[2] = AX_ReadChar();
     32a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <AX_ReadChar>
     32e:	8b 83       	std	Y+3, r24	; 0x03
	status[3] = AX_ReadChar();
     330:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <AX_ReadChar>
     334:	8c 83       	std	Y+4, r24	; 0x04
	status[4] = AX_ReadChar();
     336:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <AX_ReadChar>
     33a:	8d 83       	std	Y+5, r24	; 0x05
	status[5] = AX_ReadChar();
     33c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <AX_ReadChar>
     340:	8e 83       	std	Y+6, r24	; 0x06
}
     342:	27 96       	adiw	r28, 0x07	; 7
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	de bf       	out	0x3e, r29	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	cd bf       	out	0x3d, r28	; 61
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	08 95       	ret

00000354 <AX_StopTransmitter>:

void AX_StopTransmitter(void)
{
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
	while( !(UCSR1A & (1<<TXC1)) );
     35c:	00 00       	nop
     35e:	88 ec       	ldi	r24, 0xC8	; 200
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	fc 01       	movw	r30, r24
     364:	80 81       	ld	r24, Z
     366:	88 2f       	mov	r24, r24
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	80 74       	andi	r24, 0x40	; 64
     36c:	99 27       	eor	r25, r25
     36e:	89 2b       	or	r24, r25
     370:	b1 f3       	breq	.-20     	; 0x35e <AX_StopTransmitter+0xa>
	UCSR1B &= 0xF7;
     372:	89 ec       	ldi	r24, 0xC9	; 201
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	29 ec       	ldi	r18, 0xC9	; 201
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	f9 01       	movw	r30, r18
     37c:	20 81       	ld	r18, Z
     37e:	27 7f       	andi	r18, 0xF7	; 247
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18
	UCSR1A |= 0x40;
     384:	88 ec       	ldi	r24, 0xC8	; 200
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	28 ec       	ldi	r18, 0xC8	; 200
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	20 64       	ori	r18, 0x40	; 64
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
}
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x08;
     3a4:	89 ec       	ldi	r24, 0xC9	; 201
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	29 ec       	ldi	r18, 0xC9	; 201
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	f9 01       	movw	r30, r18
     3ae:	20 81       	ld	r18, Z
     3b0:	28 60       	ori	r18, 0x08	; 8
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <AX_StopReceiver>:

void AX_StopReceiver(void)
{
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
	UCSR1B &= 0xEF;
     3c4:	89 ec       	ldi	r24, 0xC9	; 201
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	29 ec       	ldi	r18, 0xC9	; 201
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	f9 01       	movw	r30, r18
     3ce:	20 81       	ld	r18, Z
     3d0:	2f 7e       	andi	r18, 0xEF	; 239
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 83       	st	Z, r18
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	08 95       	ret

000003dc <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x10;
     3e4:	89 ec       	ldi	r24, 0xC9	; 201
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	29 ec       	ldi	r18, 0xC9	; 201
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	f9 01       	movw	r30, r18
     3ee:	20 81       	ld	r18, Z
     3f0:	20 61       	ori	r18, 0x10	; 16
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	6a 97       	sbiw	r28, 0x1a	; 26
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	f8 94       	cli
     40a:	de bf       	out	0x3e, r29	; 62
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	cd bf       	out	0x3d, r28	; 61
     410:	9e 8b       	std	Y+22, r25	; 0x16
     412:	8d 8b       	std	Y+21, r24	; 0x15
     414:	78 8f       	std	Y+24, r23	; 0x18
     416:	6f 8b       	std	Y+23, r22	; 0x17
     418:	49 8f       	std	Y+25, r20	; 0x19
     41a:	2a 8f       	std	Y+26, r18	; 0x1a
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;

	angle = (unsigned int)(1023 *((double)angle/300.0));
     41c:	8d 89       	ldd	r24, Y+21	; 0x15
     41e:	9e 89       	ldd	r25, Y+22	; 0x16
     420:	cc 01       	movw	r24, r24
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	bc 01       	movw	r22, r24
     428:	cd 01       	movw	r24, r26
     42a:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__floatunsisf>
     42e:	dc 01       	movw	r26, r24
     430:	cb 01       	movw	r24, r22
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	46 e9       	ldi	r20, 0x96	; 150
     438:	53 e4       	ldi	r21, 0x43	; 67
     43a:	bc 01       	movw	r22, r24
     43c:	cd 01       	movw	r24, r26
     43e:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__divsf3>
     442:	dc 01       	movw	r26, r24
     444:	cb 01       	movw	r24, r22
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 ec       	ldi	r19, 0xC0	; 192
     44a:	4f e7       	ldi	r20, 0x7F	; 127
     44c:	54 e4       	ldi	r21, 0x44	; 68
     44e:	bc 01       	movw	r22, r24
     450:	cd 01       	movw	r24, r26
     452:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
     456:	dc 01       	movw	r26, r24
     458:	cb 01       	movw	r24, r22
     45a:	bc 01       	movw	r22, r24
     45c:	cd 01       	movw	r24, r26
     45e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
     462:	dc 01       	movw	r26, r24
     464:	cb 01       	movw	r24, r22
     466:	9e 8b       	std	Y+22, r25	; 0x16
     468:	8d 8b       	std	Y+21, r24	; 0x15

	angle_H = (unsigned char)(angle >> 8);
     46a:	8d 89       	ldd	r24, Y+21	; 0x15
     46c:	9e 89       	ldd	r25, Y+22	; 0x16
     46e:	89 2f       	mov	r24, r25
     470:	99 27       	eor	r25, r25
     472:	89 83       	std	Y+1, r24	; 0x01
	angle_L = (unsigned char)(angle & 0x00FF);
     474:	8d 89       	ldd	r24, Y+21	; 0x15
     476:	8a 83       	std	Y+2, r24	; 0x02

	speed |= (direction << 10);
     478:	89 8d       	ldd	r24, Y+25	; 0x19
     47a:	88 2f       	mov	r24, r24
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	98 2f       	mov	r25, r24
     480:	88 27       	eor	r24, r24
     482:	99 0f       	add	r25, r25
     484:	99 0f       	add	r25, r25
     486:	9c 01       	movw	r18, r24
     488:	8f 89       	ldd	r24, Y+23	; 0x17
     48a:	98 8d       	ldd	r25, Y+24	; 0x18
     48c:	82 2b       	or	r24, r18
     48e:	93 2b       	or	r25, r19
     490:	98 8f       	std	Y+24, r25	; 0x18
     492:	8f 8b       	std	Y+23, r24	; 0x17
	speed_H = (unsigned char)(speed >> 8);
     494:	8f 89       	ldd	r24, Y+23	; 0x17
     496:	98 8d       	ldd	r25, Y+24	; 0x18
     498:	89 2f       	mov	r24, r25
     49a:	99 27       	eor	r25, r25
     49c:	8b 83       	std	Y+3, r24	; 0x03
	speed_L = (unsigned char)(speed & 0x00FF);
     49e:	8f 89       	ldd	r24, Y+23	; 0x17
     4a0:	8c 83       	std	Y+4, r24	; 0x04

	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
     4a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     4a4:	88 2f       	mov	r24, r24
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	9c 01       	movw	r18, r24
     4aa:	28 5d       	subi	r18, 0xD8	; 216
     4ac:	3f 4f       	sbci	r19, 0xFF	; 255
     4ae:	8b 81       	ldd	r24, Y+3	; 0x03
     4b0:	88 2f       	mov	r24, r24
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	28 0f       	add	r18, r24
     4b6:	39 1f       	adc	r19, r25
     4b8:	8c 81       	ldd	r24, Y+4	; 0x04
     4ba:	88 2f       	mov	r24, r24
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	28 0f       	add	r18, r24
     4c0:	39 1f       	adc	r19, r25
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	88 2f       	mov	r24, r24
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	28 0f       	add	r18, r24
     4ca:	39 1f       	adc	r19, r25
     4cc:	8a 81       	ldd	r24, Y+2	; 0x02
     4ce:	88 2f       	mov	r24, r24
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	82 0f       	add	r24, r18
     4d4:	93 1f       	adc	r25, r19
     4d6:	80 95       	com	r24
     4d8:	90 95       	com	r25
     4da:	9e 83       	std	Y+6, r25	; 0x06
     4dc:	8d 83       	std	Y+5, r24	; 0x05

	AX_StopReceiver();
     4de:	0e 94 de 01 	call	0x3bc	; 0x3bc <AX_StopReceiver>

	AX_SendChar(START);
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(START);
     4e8:	8f ef       	ldi	r24, 0xFF	; 255
     4ea:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(id);
     4ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
     4f0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(LENGTH);
     4f4:	87 e0       	ldi	r24, 0x07	; 7
     4f6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(INSTR);
     4fa:	83 e0       	ldi	r24, 0x03	; 3
     4fc:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(ADDRESS);
     500:	8e e1       	ldi	r24, 0x1E	; 30
     502:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(angle_L);
     506:	8a 81       	ldd	r24, Y+2	; 0x02
     508:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(angle_H);
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(speed_L);
     512:	8c 81       	ldd	r24, Y+4	; 0x04
     514:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(speed_H);
     518:	8b 81       	ldd	r24, Y+3	; 0x03
     51a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(checksum);
     51e:	8d 81       	ldd	r24, Y+5	; 0x05
     520:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>

	AX_StopTransmitter();
     524:	0e 94 aa 01 	call	0x354	; 0x354 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     528:	0e 94 ee 01 	call	0x3dc	; 0x3dc <AX_ReleaseReceiver>
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	a8 e4       	ldi	r26, 0x48	; 72
     532:	b2 e4       	ldi	r27, 0x42	; 66
     534:	8f 83       	std	Y+7, r24	; 0x07
     536:	98 87       	std	Y+8, r25	; 0x08
     538:	a9 87       	std	Y+9, r26	; 0x09
     53a:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e4       	ldi	r19, 0x40	; 64
     540:	4c e1       	ldi	r20, 0x1C	; 28
     542:	55 e4       	ldi	r21, 0x45	; 69
     544:	6f 81       	ldd	r22, Y+7	; 0x07
     546:	78 85       	ldd	r23, Y+8	; 0x08
     548:	89 85       	ldd	r24, Y+9	; 0x09
     54a:	9a 85       	ldd	r25, Y+10	; 0x0a
     54c:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
     550:	dc 01       	movw	r26, r24
     552:	cb 01       	movw	r24, r22
     554:	8b 87       	std	Y+11, r24	; 0x0b
     556:	9c 87       	std	Y+12, r25	; 0x0c
     558:	ad 87       	std	Y+13, r26	; 0x0d
     55a:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	40 e8       	ldi	r20, 0x80	; 128
     562:	5f e3       	ldi	r21, 0x3F	; 63
     564:	6b 85       	ldd	r22, Y+11	; 0x0b
     566:	7c 85       	ldd	r23, Y+12	; 0x0c
     568:	8d 85       	ldd	r24, Y+13	; 0x0d
     56a:	9e 85       	ldd	r25, Y+14	; 0x0e
     56c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
     570:	88 23       	and	r24, r24
     572:	2c f4       	brge	.+10     	; 0x57e <AX_SetAngle+0x182>
		__ticks = 1;
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	98 8b       	std	Y+16, r25	; 0x10
     57a:	8f 87       	std	Y+15, r24	; 0x0f
     57c:	3f c0       	rjmp	.+126    	; 0x5fc <AX_SetAngle+0x200>
	else if (__tmp > 65535)
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	3f ef       	ldi	r19, 0xFF	; 255
     582:	4f e7       	ldi	r20, 0x7F	; 127
     584:	57 e4       	ldi	r21, 0x47	; 71
     586:	6b 85       	ldd	r22, Y+11	; 0x0b
     588:	7c 85       	ldd	r23, Y+12	; 0x0c
     58a:	8d 85       	ldd	r24, Y+13	; 0x0d
     58c:	9e 85       	ldd	r25, Y+14	; 0x0e
     58e:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
     592:	18 16       	cp	r1, r24
     594:	4c f5       	brge	.+82     	; 0x5e8 <AX_SetAngle+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	40 e2       	ldi	r20, 0x20	; 32
     59c:	51 e4       	ldi	r21, 0x41	; 65
     59e:	6f 81       	ldd	r22, Y+7	; 0x07
     5a0:	78 85       	ldd	r23, Y+8	; 0x08
     5a2:	89 85       	ldd	r24, Y+9	; 0x09
     5a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a6:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
     5aa:	dc 01       	movw	r26, r24
     5ac:	cb 01       	movw	r24, r22
     5ae:	bc 01       	movw	r22, r24
     5b0:	cd 01       	movw	r24, r26
     5b2:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
     5b6:	dc 01       	movw	r26, r24
     5b8:	cb 01       	movw	r24, r22
     5ba:	98 8b       	std	Y+16, r25	; 0x10
     5bc:	8f 87       	std	Y+15, r24	; 0x0f
     5be:	0f c0       	rjmp	.+30     	; 0x5de <AX_SetAngle+0x1e2>
     5c0:	8a ef       	ldi	r24, 0xFA	; 250
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	9a 8b       	std	Y+18, r25	; 0x12
     5c6:	89 8b       	std	Y+17, r24	; 0x11
     5c8:	89 89       	ldd	r24, Y+17	; 0x11
     5ca:	9a 89       	ldd	r25, Y+18	; 0x12
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <AX_SetAngle+0x1d0>
     5d0:	9a 8b       	std	Y+18, r25	; 0x12
     5d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     5d6:	98 89       	ldd	r25, Y+16	; 0x10
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	98 8b       	std	Y+16, r25	; 0x10
     5dc:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5de:	8f 85       	ldd	r24, Y+15	; 0x0f
     5e0:	98 89       	ldd	r25, Y+16	; 0x10
     5e2:	89 2b       	or	r24, r25
     5e4:	69 f7       	brne	.-38     	; 0x5c0 <AX_SetAngle+0x1c4>
     5e6:	14 c0       	rjmp	.+40     	; 0x610 <AX_SetAngle+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5e8:	6b 85       	ldd	r22, Y+11	; 0x0b
     5ea:	7c 85       	ldd	r23, Y+12	; 0x0c
     5ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ee:	9e 85       	ldd	r25, Y+14	; 0x0e
     5f0:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	98 8b       	std	Y+16, r25	; 0x10
     5fa:	8f 87       	std	Y+15, r24	; 0x0f
     5fc:	8f 85       	ldd	r24, Y+15	; 0x0f
     5fe:	98 89       	ldd	r25, Y+16	; 0x10
     600:	9c 8b       	std	Y+20, r25	; 0x14
     602:	8b 8b       	std	Y+19, r24	; 0x13
     604:	8b 89       	ldd	r24, Y+19	; 0x13
     606:	9c 89       	ldd	r25, Y+20	; 0x14
     608:	01 97       	sbiw	r24, 0x01	; 1
     60a:	f1 f7       	brne	.-4      	; 0x608 <AX_SetAngle+0x20c>
     60c:	9c 8b       	std	Y+20, r25	; 0x14
     60e:	8b 8b       	std	Y+19, r24	; 0x13

	_delay_ms(50);

	AX_ReleaseTransmitter();
     610:	0e 94 ce 01 	call	0x39c	; 0x39c <AX_ReleaseTransmitter>
}
     614:	6a 96       	adiw	r28, 0x1a	; 26
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	cd bf       	out	0x3d, r28	; 61
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <AX_EndlessTurn>:


void AX_EndlessTurn(void)
{
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	60 97       	sbiw	r28, 0x10	; 16
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61

	unsigned int checksum;

	checksum = ~(0x01 + 0x07 + 0x03 + 0x06 + (1023 & 0xFF) + (1023 >> 8) & 0xFF);
     63a:	8c ee       	ldi	r24, 0xEC	; 236
     63c:	9f ef       	ldi	r25, 0xFF	; 255
     63e:	9a 83       	std	Y+2, r25	; 0x02
     640:	89 83       	std	Y+1, r24	; 0x01

	AX_StopReceiver();
     642:	0e 94 de 01 	call	0x3bc	; 0x3bc <AX_StopReceiver>

	AX_SendChar(0xFF);
     646:	8f ef       	ldi	r24, 0xFF	; 255
     648:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(0xFF);
     64c:	8f ef       	ldi	r24, 0xFF	; 255
     64e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(0x01);
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(0x07);
     658:	87 e0       	ldi	r24, 0x07	; 7
     65a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(0x03);
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(0x06);
     664:	86 e0       	ldi	r24, 0x06	; 6
     666:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(0x00);
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(0x00);
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(1023 & 0xFF);
     676:	8f ef       	ldi	r24, 0xFF	; 255
     678:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(1023 >> 8);
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(checksum);
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>

	AX_StopTransmitter();
     688:	0e 94 aa 01 	call	0x354	; 0x354 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     68c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <AX_ReleaseReceiver>
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	a8 e4       	ldi	r26, 0x48	; 72
     696:	b2 e4       	ldi	r27, 0x42	; 66
     698:	8b 83       	std	Y+3, r24	; 0x03
     69a:	9c 83       	std	Y+4, r25	; 0x04
     69c:	ad 83       	std	Y+5, r26	; 0x05
     69e:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e4       	ldi	r19, 0x40	; 64
     6a4:	4c e1       	ldi	r20, 0x1C	; 28
     6a6:	55 e4       	ldi	r21, 0x45	; 69
     6a8:	6b 81       	ldd	r22, Y+3	; 0x03
     6aa:	7c 81       	ldd	r23, Y+4	; 0x04
     6ac:	8d 81       	ldd	r24, Y+5	; 0x05
     6ae:	9e 81       	ldd	r25, Y+6	; 0x06
     6b0:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
     6b4:	dc 01       	movw	r26, r24
     6b6:	cb 01       	movw	r24, r22
     6b8:	8f 83       	std	Y+7, r24	; 0x07
     6ba:	98 87       	std	Y+8, r25	; 0x08
     6bc:	a9 87       	std	Y+9, r26	; 0x09
     6be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e8       	ldi	r20, 0x80	; 128
     6c6:	5f e3       	ldi	r21, 0x3F	; 63
     6c8:	6f 81       	ldd	r22, Y+7	; 0x07
     6ca:	78 85       	ldd	r23, Y+8	; 0x08
     6cc:	89 85       	ldd	r24, Y+9	; 0x09
     6ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d0:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
     6d4:	88 23       	and	r24, r24
     6d6:	2c f4       	brge	.+10     	; 0x6e2 <AX_EndlessTurn+0xbc>
		__ticks = 1;
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	9c 87       	std	Y+12, r25	; 0x0c
     6de:	8b 87       	std	Y+11, r24	; 0x0b
     6e0:	3f c0       	rjmp	.+126    	; 0x760 <AX_EndlessTurn+0x13a>
	else if (__tmp > 65535)
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	3f ef       	ldi	r19, 0xFF	; 255
     6e6:	4f e7       	ldi	r20, 0x7F	; 127
     6e8:	57 e4       	ldi	r21, 0x47	; 71
     6ea:	6f 81       	ldd	r22, Y+7	; 0x07
     6ec:	78 85       	ldd	r23, Y+8	; 0x08
     6ee:	89 85       	ldd	r24, Y+9	; 0x09
     6f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f2:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
     6f6:	18 16       	cp	r1, r24
     6f8:	4c f5       	brge	.+82     	; 0x74c <AX_EndlessTurn+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	40 e2       	ldi	r20, 0x20	; 32
     700:	51 e4       	ldi	r21, 0x41	; 65
     702:	6b 81       	ldd	r22, Y+3	; 0x03
     704:	7c 81       	ldd	r23, Y+4	; 0x04
     706:	8d 81       	ldd	r24, Y+5	; 0x05
     708:	9e 81       	ldd	r25, Y+6	; 0x06
     70a:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
     70e:	dc 01       	movw	r26, r24
     710:	cb 01       	movw	r24, r22
     712:	bc 01       	movw	r22, r24
     714:	cd 01       	movw	r24, r26
     716:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
     71a:	dc 01       	movw	r26, r24
     71c:	cb 01       	movw	r24, r22
     71e:	9c 87       	std	Y+12, r25	; 0x0c
     720:	8b 87       	std	Y+11, r24	; 0x0b
     722:	0f c0       	rjmp	.+30     	; 0x742 <AX_EndlessTurn+0x11c>
     724:	8a ef       	ldi	r24, 0xFA	; 250
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	9e 87       	std	Y+14, r25	; 0x0e
     72a:	8d 87       	std	Y+13, r24	; 0x0d
     72c:	8d 85       	ldd	r24, Y+13	; 0x0d
     72e:	9e 85       	ldd	r25, Y+14	; 0x0e
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	f1 f7       	brne	.-4      	; 0x730 <AX_EndlessTurn+0x10a>
     734:	9e 87       	std	Y+14, r25	; 0x0e
     736:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     738:	8b 85       	ldd	r24, Y+11	; 0x0b
     73a:	9c 85       	ldd	r25, Y+12	; 0x0c
     73c:	01 97       	sbiw	r24, 0x01	; 1
     73e:	9c 87       	std	Y+12, r25	; 0x0c
     740:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     742:	8b 85       	ldd	r24, Y+11	; 0x0b
     744:	9c 85       	ldd	r25, Y+12	; 0x0c
     746:	89 2b       	or	r24, r25
     748:	69 f7       	brne	.-38     	; 0x724 <AX_EndlessTurn+0xfe>
     74a:	14 c0       	rjmp	.+40     	; 0x774 <AX_EndlessTurn+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     74c:	6f 81       	ldd	r22, Y+7	; 0x07
     74e:	78 85       	ldd	r23, Y+8	; 0x08
     750:	89 85       	ldd	r24, Y+9	; 0x09
     752:	9a 85       	ldd	r25, Y+10	; 0x0a
     754:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	9c 87       	std	Y+12, r25	; 0x0c
     75e:	8b 87       	std	Y+11, r24	; 0x0b
     760:	8b 85       	ldd	r24, Y+11	; 0x0b
     762:	9c 85       	ldd	r25, Y+12	; 0x0c
     764:	98 8b       	std	Y+16, r25	; 0x10
     766:	8f 87       	std	Y+15, r24	; 0x0f
     768:	8f 85       	ldd	r24, Y+15	; 0x0f
     76a:	98 89       	ldd	r25, Y+16	; 0x10
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <AX_EndlessTurn+0x146>
     770:	98 8b       	std	Y+16, r25	; 0x10
     772:	8f 87       	std	Y+15, r24	; 0x0f

	//AX_ReadStatus();
	_delay_ms(50);

	AX_ReleaseTransmitter();
     774:	0e 94 ce 01 	call	0x39c	; 0x39c <AX_ReleaseTransmitter>
}
     778:	60 96       	adiw	r28, 0x10	; 16
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <AX_SetSpeed>:

void AX_SetSpeed(unsigned int direction, unsigned int speed)
{
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	28 97       	sbiw	r28, 0x08	; 8
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
     79e:	9e 83       	std	Y+6, r25	; 0x06
     7a0:	8d 83       	std	Y+5, r24	; 0x05
     7a2:	78 87       	std	Y+8, r23	; 0x08
     7a4:	6f 83       	std	Y+7, r22	; 0x07
	/*
		direction ---> TurnDirection -> 1 - ClockWise   0 - CounterClockWise
	*/

	unsigned int data = 0x0000;
     7a6:	1a 82       	std	Y+2, r1	; 0x02
     7a8:	19 82       	std	Y+1, r1	; 0x01
	unsigned int checksum = 0;
     7aa:	1c 82       	std	Y+4, r1	; 0x04
     7ac:	1b 82       	std	Y+3, r1	; 0x03

	data = speed;
     7ae:	8f 81       	ldd	r24, Y+7	; 0x07
     7b0:	98 85       	ldd	r25, Y+8	; 0x08
     7b2:	9a 83       	std	Y+2, r25	; 0x02
     7b4:	89 83       	std	Y+1, r24	; 0x01
	data |= (direction << 10);
     7b6:	8d 81       	ldd	r24, Y+5	; 0x05
     7b8:	9e 81       	ldd	r25, Y+6	; 0x06
     7ba:	98 2f       	mov	r25, r24
     7bc:	88 27       	eor	r24, r24
     7be:	99 0f       	add	r25, r25
     7c0:	99 0f       	add	r25, r25
     7c2:	29 81       	ldd	r18, Y+1	; 0x01
     7c4:	3a 81       	ldd	r19, Y+2	; 0x02
     7c6:	82 2b       	or	r24, r18
     7c8:	93 2b       	or	r25, r19
     7ca:	9a 83       	std	Y+2, r25	; 0x02
     7cc:	89 83       	std	Y+1, r24	; 0x01


	checksum = ~(0x01 + 0x05 + 0x03 + 0x20 + data);
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	9a 81       	ldd	r25, Y+2	; 0x02
     7d2:	89 96       	adiw	r24, 0x29	; 41
     7d4:	80 95       	com	r24
     7d6:	90 95       	com	r25
     7d8:	9c 83       	std	Y+4, r25	; 0x04
     7da:	8b 83       	std	Y+3, r24	; 0x03

	AX_StopReceiver();
     7dc:	0e 94 de 01 	call	0x3bc	; 0x3bc <AX_StopReceiver>

	AX_SendChar(0xFF);
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(0xFF);
     7e6:	8f ef       	ldi	r24, 0xFF	; 255
     7e8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(0x01);
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(0x05);
     7f2:	85 e0       	ldi	r24, 0x05	; 5
     7f4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(0x03);
     7f8:	83 e0       	ldi	r24, 0x03	; 3
     7fa:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(0x20);
     7fe:	80 e2       	ldi	r24, 0x20	; 32
     800:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(data);
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(data >> 8);
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	89 2f       	mov	r24, r25
     810:	99 27       	eor	r25, r25
     812:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>
	AX_SendChar(checksum);
     816:	8b 81       	ldd	r24, Y+3	; 0x03
     818:	0e 94 51 01 	call	0x2a2	; 0x2a2 <AX_SendChar>

	AX_StopTransmitter();
     81c:	0e 94 aa 01 	call	0x354	; 0x354 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     820:	0e 94 ee 01 	call	0x3dc	; 0x3dc <AX_ReleaseReceiver>

	AX_ReadStatus();
     824:	0e 94 7d 01 	call	0x2fa	; 0x2fa <AX_ReadStatus>

	AX_ReleaseTransmitter();
     828:	0e 94 ce 01 	call	0x39c	; 0x39c <AX_ReleaseTransmitter>
}
     82c:	28 96       	adiw	r28, 0x08	; 8
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	de bf       	out	0x3e, r29	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	cd bf       	out	0x3d, r28	; 61
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <__vector_18>:
static volatile unsigned char rxCounter[10];
//volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     83e:	1f 92       	push	r1
     840:	0f 92       	push	r0
     842:	00 90 5f 00 	lds	r0, 0x005F
     846:	0f 92       	push	r0
     848:	11 24       	eor	r1, r1
     84a:	00 90 5b 00 	lds	r0, 0x005B
     84e:	0f 92       	push	r0
     850:	2f 93       	push	r18
     852:	3f 93       	push	r19
     854:	4f 93       	push	r20
     856:	5f 93       	push	r21
     858:	8f 93       	push	r24
     85a:	9f 93       	push	r25
     85c:	ef 93       	push	r30
     85e:	ff 93       	push	r31
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	00 d0       	rcall	.+0      	; 0x866 <__vector_18+0x28>
     866:	00 d0       	rcall	.+0      	; 0x868 <__vector_18+0x2a>
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     86c:	8d ee       	ldi	r24, 0xED	; 237
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	fc 01       	movw	r30, r24
     872:	80 81       	ld	r24, Z
     874:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     876:	19 82       	std	Y+1, r1	; 0x01
     878:	a4 c0       	rjmp	.+328    	; 0x9c2 <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
     87a:	8d ee       	ldi	r24, 0xED	; 237
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	29 81       	ldd	r18, Y+1	; 0x01
     880:	22 95       	swap	r18
     882:	20 7f       	andi	r18, 0xF0	; 240
     884:	fc 01       	movw	r30, r24
     886:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     888:	8e ee       	ldi	r24, 0xEE	; 238
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	fc 01       	movw	r30, r24
     88e:	80 81       	ld	r24, Z
     890:	82 95       	swap	r24
     892:	86 95       	lsr	r24
     894:	87 70       	andi	r24, 0x07	; 7
     896:	88 2f       	mov	r24, r24
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	81 70       	andi	r24, 0x01	; 1
     89c:	99 27       	eor	r25, r25
     89e:	89 2b       	or	r24, r25
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <__vector_18+0x66>
     8a2:	70 c0       	rjmp	.+224    	; 0x984 <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     8a4:	8f ee       	ldi	r24, 0xEF	; 239
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	20 e8       	ldi	r18, 0x80	; 128
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     8ae:	8e ee       	ldi	r24, 0xEE	; 238
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	2e ee       	ldi	r18, 0xEE	; 238
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	f9 01       	movw	r30, r18
     8b8:	20 81       	ld	r18, Z
     8ba:	2f 7d       	andi	r18, 0xDF	; 223
     8bc:	fc 01       	movw	r30, r24
     8be:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     8c0:	82 ef       	ldi	r24, 0xF2	; 242
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	fc 01       	movw	r30, r24
     8c6:	80 81       	ld	r24, Z
     8c8:	82 95       	swap	r24
     8ca:	86 95       	lsr	r24
     8cc:	87 70       	andi	r24, 0x07	; 7
     8ce:	28 2f       	mov	r18, r24
     8d0:	83 ef       	ldi	r24, 0xF3	; 243
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	fc 01       	movw	r30, r24
     8d6:	80 81       	ld	r24, Z
     8d8:	88 2f       	mov	r24, r24
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	88 0f       	add	r24, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	82 2b       	or	r24, r18
     8ea:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
     8ec:	1a 82       	std	Y+2, r1	; 0x02
     8ee:	26 c0       	rjmp	.+76     	; 0x93c <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     8f0:	8c 81       	ldd	r24, Y+4	; 0x04
     8f2:	88 2f       	mov	r24, r24
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	81 50       	subi	r24, 0x01	; 1
     8f8:	90 48       	sbci	r25, 0x80	; 128
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	82 5d       	subi	r24, 0xD2	; 210
     900:	9e 4f       	sbci	r25, 0xFE	; 254
     902:	fc 01       	movw	r30, r24
     904:	20 81       	ld	r18, Z
     906:	31 81       	ldd	r19, Z+1	; 0x01
     908:	8c 81       	ldd	r24, Y+4	; 0x04
     90a:	88 2f       	mov	r24, r24
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	8e 5b       	subi	r24, 0xBE	; 190
     912:	9e 4f       	sbci	r25, 0xFE	; 254
     914:	fc 01       	movw	r30, r24
     916:	80 81       	ld	r24, Z
     918:	48 2f       	mov	r20, r24
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	8a 81       	ldd	r24, Y+2	; 0x02
     91e:	88 2f       	mov	r24, r24
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	84 0f       	add	r24, r20
     924:	95 1f       	adc	r25, r21
     926:	82 0f       	add	r24, r18
     928:	93 1f       	adc	r25, r19
     92a:	2a ef       	ldi	r18, 0xFA	; 250
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	f9 01       	movw	r30, r18
     930:	20 81       	ld	r18, Z
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     936:	8a 81       	ldd	r24, Y+2	; 0x02
     938:	8f 5f       	subi	r24, 0xFF	; 255
     93a:	8a 83       	std	Y+2, r24	; 0x02
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	88 30       	cpi	r24, 0x08	; 8
     940:	b8 f2       	brcs	.-82     	; 0x8f0 <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     942:	8c 81       	ldd	r24, Y+4	; 0x04
     944:	88 2f       	mov	r24, r24
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	8e 5b       	subi	r24, 0xBE	; 190
     94c:	9e 4f       	sbci	r25, 0xFE	; 254
     94e:	fc 01       	movw	r30, r24
     950:	20 81       	ld	r18, Z
     952:	2f 5f       	subi	r18, 0xFF	; 255
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18
     958:	25 30       	cpi	r18, 0x05	; 5
     95a:	41 f4       	brne	.+16     	; 0x96c <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
     95c:	8c 81       	ldd	r24, Y+4	; 0x04
     95e:	88 2f       	mov	r24, r24
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	8e 5b       	subi	r24, 0xBE	; 190
     966:	9e 4f       	sbci	r25, 0xFE	; 254
     968:	fc 01       	movw	r30, r24
     96a:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     96c:	8c 81       	ldd	r24, Y+4	; 0x04
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	8a 5a       	subi	r24, 0xAA	; 170
     976:	9e 4f       	sbci	r25, 0xFE	; 254
     978:	fc 01       	movw	r30, r24
     97a:	20 81       	ld	r18, Z
     97c:	2f 5f       	subi	r18, 0xFF	; 255
     97e:	fc 01       	movw	r30, r24
     980:	20 83       	st	Z, r18

			break;
     982:	23 c0       	rjmp	.+70     	; 0x9ca <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     984:	8e ee       	ldi	r24, 0xEE	; 238
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	fc 01       	movw	r30, r24
     98a:	80 81       	ld	r24, Z
     98c:	82 95       	swap	r24
     98e:	86 95       	lsr	r24
     990:	86 95       	lsr	r24
     992:	83 70       	andi	r24, 0x03	; 3
     994:	88 2f       	mov	r24, r24
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	81 70       	andi	r24, 0x01	; 1
     99a:	99 27       	eor	r25, r25
     99c:	89 2b       	or	r24, r25
     99e:	71 f0       	breq	.+28     	; 0x9bc <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
     9a0:	8f ee       	ldi	r24, 0xEF	; 239
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	fc 01       	movw	r30, r24
     9a6:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     9a8:	8e ee       	ldi	r24, 0xEE	; 238
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	2e ee       	ldi	r18, 0xEE	; 238
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	f9 01       	movw	r30, r18
     9b2:	20 81       	ld	r18, Z
     9b4:	2f 7b       	andi	r18, 0xBF	; 191
     9b6:	fc 01       	movw	r30, r24
     9b8:	20 83       	st	Z, r18

			break;
     9ba:	07 c0       	rjmp	.+14     	; 0x9ca <__vector_18+0x18c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	8f 5f       	subi	r24, 0xFF	; 255
     9c0:	89 83       	std	Y+1, r24	; 0x01
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	8f 30       	cpi	r24, 0x0F	; 15
     9c6:	08 f4       	brcc	.+2      	; 0x9ca <__vector_18+0x18c>
     9c8:	58 cf       	rjmp	.-336    	; 0x87a <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     9ca:	8d ee       	ldi	r24, 0xED	; 237
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	2b 81       	ldd	r18, Y+3	; 0x03
     9d0:	fc 01       	movw	r30, r24
     9d2:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // zato sto tako treba.
}
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	ff 91       	pop	r31
     9e2:	ef 91       	pop	r30
     9e4:	9f 91       	pop	r25
     9e6:	8f 91       	pop	r24
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	0f 90       	pop	r0
     9f2:	00 92 5b 00 	sts	0x005B, r0
     9f6:	0f 90       	pop	r0
     9f8:	00 92 5f 00 	sts	0x005F, r0
     9fc:	0f 90       	pop	r0
     9fe:	1f 90       	pop	r1
     a00:	18 95       	reti

00000a02 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	00 d0       	rcall	.+0      	; 0xa08 <CAN_InitModule+0x6>
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     a0c:	88 ed       	ldi	r24, 0xD8	; 216
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	21 e0       	ldi	r18, 0x01	; 1
     a12:	fc 01       	movw	r30, r24
     a14:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     a16:	19 82       	std	Y+1, r1	; 0x01
     a18:	3e c0       	rjmp	.+124    	; 0xa96 <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
     a1a:	8d ee       	ldi	r24, 0xED	; 237
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	29 81       	ldd	r18, Y+1	; 0x01
     a20:	22 95       	swap	r18
     a22:	20 7f       	andi	r18, 0xF0	; 240
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18

		CANSTMOB = 0;
     a28:	8e ee       	ldi	r24, 0xEE	; 238
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	fc 01       	movw	r30, r24
     a2e:	10 82       	st	Z, r1
		CANCDMOB = 0;
     a30:	8f ee       	ldi	r24, 0xEF	; 239
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	fc 01       	movw	r30, r24
     a36:	10 82       	st	Z, r1

		CANIDT1 = 0;
     a38:	83 ef       	ldi	r24, 0xF3	; 243
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	fc 01       	movw	r30, r24
     a3e:	10 82       	st	Z, r1
		CANIDT2 = 0;
     a40:	82 ef       	ldi	r24, 0xF2	; 242
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	fc 01       	movw	r30, r24
     a46:	10 82       	st	Z, r1
		CANIDT3 = 0;
     a48:	81 ef       	ldi	r24, 0xF1	; 241
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	fc 01       	movw	r30, r24
     a4e:	10 82       	st	Z, r1
		CANIDT4 = 0;
     a50:	80 ef       	ldi	r24, 0xF0	; 240
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	fc 01       	movw	r30, r24
     a56:	10 82       	st	Z, r1
		CANIDM1 = 0;
     a58:	87 ef       	ldi	r24, 0xF7	; 247
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	fc 01       	movw	r30, r24
     a5e:	10 82       	st	Z, r1
		CANIDM2 = 0;
     a60:	86 ef       	ldi	r24, 0xF6	; 246
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	fc 01       	movw	r30, r24
     a66:	10 82       	st	Z, r1
		CANIDM3 = 0;
     a68:	85 ef       	ldi	r24, 0xF5	; 245
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	fc 01       	movw	r30, r24
     a6e:	10 82       	st	Z, r1
		CANIDM4 = 0;
     a70:	84 ef       	ldi	r24, 0xF4	; 244
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	fc 01       	movw	r30, r24
     a76:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     a78:	1a 82       	std	Y+2, r1	; 0x02
     a7a:	07 c0       	rjmp	.+14     	; 0xa8a <CAN_InitModule+0x88>
			CANMSG = 0;
     a7c:	8a ef       	ldi	r24, 0xFA	; 250
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	fc 01       	movw	r30, r24
     a82:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     a84:	8a 81       	ldd	r24, Y+2	; 0x02
     a86:	8f 5f       	subi	r24, 0xFF	; 255
     a88:	8a 83       	std	Y+2, r24	; 0x02
     a8a:	8a 81       	ldd	r24, Y+2	; 0x02
     a8c:	88 30       	cpi	r24, 0x08	; 8
     a8e:	b0 f3       	brcs	.-20     	; 0xa7c <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     a90:	89 81       	ldd	r24, Y+1	; 0x01
     a92:	8f 5f       	subi	r24, 0xFF	; 255
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	8f 30       	cpi	r24, 0x0F	; 15
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <CAN_InitModule+0x9c>
     a9c:	be cf       	rjmp	.-132    	; 0xa1a <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     a9e:	88 ed       	ldi	r24, 0xD8	; 216
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	22 e0       	ldi	r18, 0x02	; 2
     aa4:	fc 01       	movw	r30, r24
     aa6:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     aa8:	82 ee       	ldi	r24, 0xE2	; 226
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	21 e0       	ldi	r18, 0x01	; 1
     aae:	fc 01       	movw	r30, r24
     ab0:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     ab2:	83 ee       	ldi	r24, 0xE3	; 227
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	28 e0       	ldi	r18, 0x08	; 8
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     abc:	84 ee       	ldi	r24, 0xE4	; 228
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	2e e5       	ldi	r18, 0x5E	; 94
     ac2:	fc 01       	movw	r30, r24
     ac4:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     ac6:	85 ee       	ldi	r24, 0xE5	; 229
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	fc 01       	movw	r30, r24
     acc:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     ace:	8b ed       	ldi	r24, 0xDB	; 219
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	20 eb       	ldi	r18, 0xB0	; 176
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     ad8:	8f ed       	ldi	r24, 0xDF	; 223
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	2f e7       	ldi	r18, 0x7F	; 127
     ade:	fc 01       	movw	r30, r24
     ae0:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
     ae2:	8e ed       	ldi	r24, 0xDE	; 222
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	2f ef       	ldi	r18, 0xFF	; 255
     ae8:	fc 01       	movw	r30, r24
     aea:	20 83       	st	Z, r18
	sei();
     aec:	78 94       	sei
}
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	00 d0       	rcall	.+0      	; 0xafe <CAN_InitRxMob+0x6>
     afe:	00 d0       	rcall	.+0      	; 0xb00 <CAN_InitRxMob+0x8>
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	9c 83       	std	Y+4, r25	; 0x04
     b06:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     b08:	8d ee       	ldi	r24, 0xED	; 237
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	fc 01       	movw	r30, r24
     b0e:	80 81       	ld	r24, Z
     b10:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     b12:	00 00       	nop
     b14:	89 ed       	ldi	r24, 0xD9	; 217
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	fc 01       	movw	r30, r24
     b1a:	80 81       	ld	r24, Z
     b1c:	82 95       	swap	r24
     b1e:	8f 70       	andi	r24, 0x0F	; 15
     b20:	88 2f       	mov	r24, r24
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	81 70       	andi	r24, 0x01	; 1
     b26:	99 27       	eor	r25, r25
     b28:	89 2b       	or	r24, r25
     b2a:	a1 f7       	brne	.-24     	; 0xb14 <CAN_InitRxMob+0x1c>
     b2c:	89 ed       	ldi	r24, 0xD9	; 217
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	fc 01       	movw	r30, r24
     b32:	80 81       	ld	r24, Z
     b34:	86 95       	lsr	r24
     b36:	86 95       	lsr	r24
     b38:	86 95       	lsr	r24
     b3a:	88 2f       	mov	r24, r24
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	81 70       	andi	r24, 0x01	; 1
     b40:	99 27       	eor	r25, r25
     b42:	89 2b       	or	r24, r25
     b44:	39 f7       	brne	.-50     	; 0xb14 <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     b46:	19 82       	std	Y+1, r1	; 0x01
     b48:	49 c0       	rjmp	.+146    	; 0xbdc <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
     b4a:	8d ee       	ldi	r24, 0xED	; 237
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	29 81       	ldd	r18, Y+1	; 0x01
     b50:	22 95       	swap	r18
     b52:	20 7f       	andi	r18, 0xF0	; 240
     b54:	fc 01       	movw	r30, r24
     b56:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     b58:	8f ee       	ldi	r24, 0xEF	; 239
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	fc 01       	movw	r30, r24
     b5e:	80 81       	ld	r24, Z
     b60:	82 95       	swap	r24
     b62:	86 95       	lsr	r24
     b64:	86 95       	lsr	r24
     b66:	83 70       	andi	r24, 0x03	; 3
     b68:	88 23       	and	r24, r24
     b6a:	21 f0       	breq	.+8      	; 0xb74 <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	8f 5f       	subi	r24, 0xFF	; 255
     b70:	89 83       	std	Y+1, r24	; 0x01
     b72:	34 c0       	rjmp	.+104    	; 0xbdc <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     b74:	8f ee       	ldi	r24, 0xEF	; 239
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	2f e0       	ldi	r18, 0x0F	; 15
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     b7e:	83 ef       	ldi	r24, 0xF3	; 243
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	2b 81       	ldd	r18, Y+3	; 0x03
     b84:	3c 81       	ldd	r19, Y+4	; 0x04
     b86:	33 27       	eor	r19, r19
     b88:	36 95       	lsr	r19
     b8a:	27 95       	ror	r18
     b8c:	36 95       	lsr	r19
     b8e:	27 95       	ror	r18
     b90:	36 95       	lsr	r19
     b92:	27 95       	ror	r18
     b94:	fc 01       	movw	r30, r24
     b96:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
     b98:	82 ef       	ldi	r24, 0xF2	; 242
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	2b 81       	ldd	r18, Y+3	; 0x03
     b9e:	22 95       	swap	r18
     ba0:	22 0f       	add	r18, r18
     ba2:	20 7e       	andi	r18, 0xE0	; 224
     ba4:	fc 01       	movw	r30, r24
     ba6:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     ba8:	86 ef       	ldi	r24, 0xF6	; 246
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	20 ee       	ldi	r18, 0xE0	; 224
     bae:	fc 01       	movw	r30, r24
     bb0:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
     bb2:	87 ef       	ldi	r24, 0xF7	; 247
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	2f ef       	ldi	r18, 0xFF	; 255
     bb8:	fc 01       	movw	r30, r24
     bba:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     bbc:	8f ee       	ldi	r24, 0xEF	; 239
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	2f ee       	ldi	r18, 0xEF	; 239
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	f9 01       	movw	r30, r18
     bc6:	20 81       	ld	r18, Z
     bc8:	20 68       	ori	r18, 0x80	; 128
     bca:	fc 01       	movw	r30, r24
     bcc:	20 83       	st	Z, r18

		CANPAGE = tempPage;
     bce:	8d ee       	ldi	r24, 0xED	; 237
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	2a 81       	ldd	r18, Y+2	; 0x02
     bd4:	fc 01       	movw	r30, r24
     bd6:	20 83       	st	Z, r18

		return 1;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	0a c0       	rjmp	.+20     	; 0xbf0 <CAN_InitRxMob+0xf8>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	8f 30       	cpi	r24, 0x0F	; 15
     be0:	08 f4       	brcc	.+2      	; 0xbe4 <CAN_InitRxMob+0xec>
     be2:	b3 cf       	rjmp	.-154    	; 0xb4a <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     be4:	8d ee       	ldi	r24, 0xED	; 237
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	2a 81       	ldd	r18, Y+2	; 0x02
     bea:	fc 01       	movw	r30, r24
     bec:	20 83       	st	Z, r18

	return 0;
     bee:	80 e0       	ldi	r24, 0x00	; 0
}
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	00 d0       	rcall	.+0      	; 0xc08 <CAN_Init+0xa>
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     c0e:	0e 94 01 05 	call	0xa02	; 0xa02 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     c12:	19 82       	std	Y+1, r1	; 0x01
     c14:	30 c0       	rjmp	.+96     	; 0xc76 <CAN_Init+0x78>
	{
		CAN_InitRxMob(i + 1);
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	88 2f       	mov	r24, r24
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	88 2f       	mov	r24, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	8c 01       	movw	r16, r24
     c2e:	02 5d       	subi	r16, 0xD2	; 210
     c30:	1e 4f       	sbci	r17, 0xFE	; 254
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	85 e0       	ldi	r24, 0x05	; 5
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <calloc>
     c3e:	f8 01       	movw	r30, r16
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	29 81       	ldd	r18, Y+1	; 0x01
     c4c:	22 2f       	mov	r18, r18
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	49 81       	ldd	r20, Y+1	; 0x01
     c52:	44 2f       	mov	r20, r20
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	4a 5a       	subi	r20, 0xAA	; 170
     c5a:	5e 4f       	sbci	r21, 0xFE	; 254
     c5c:	fa 01       	movw	r30, r20
     c5e:	60 83       	st	Z, r22
     c60:	24 5b       	subi	r18, 0xB4	; 180
     c62:	3e 4f       	sbci	r19, 0xFE	; 254
     c64:	f9 01       	movw	r30, r18
     c66:	60 83       	st	Z, r22
     c68:	8e 5b       	subi	r24, 0xBE	; 190
     c6a:	9e 4f       	sbci	r25, 0xFE	; 254
     c6c:	fc 01       	movw	r30, r24
     c6e:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	8f 5f       	subi	r24, 0xFF	; 255
     c74:	89 83       	std	Y+1, r24	; 0x01
     c76:	99 81       	ldd	r25, Y+1	; 0x01
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	98 17       	cp	r25, r24
     c7c:	60 f2       	brcs	.-104    	; 0xc16 <CAN_Init+0x18>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	08 95       	ret

00000c8c <CAN_CheckRX>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	1f 92       	push	r1
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	89 83       	std	Y+1, r24	; 0x01
	return rxCounter[nodeID - 1];
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	88 2f       	mov	r24, r24
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	8a 5a       	subi	r24, 0xAA	; 170
     ca2:	9e 4f       	sbci	r25, 0xFE	; 254
     ca4:	fc 01       	movw	r30, r24
     ca6:	80 81       	ld	r24, Z
}
     ca8:	0f 90       	pop	r0
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	08 95       	ret

00000cb0 <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <CAN_Read+0x6>
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <CAN_Read+0x8>
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	9b 83       	std	Y+3, r25	; 0x03
     cbe:	8a 83       	std	Y+2, r24	; 0x02
     cc0:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
     cc2:	84 e3       	ldi	r24, 0x34	; 52
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	2f ef       	ldi	r18, 0xFF	; 255
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     ccc:	00 00       	nop
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
     cd0:	88 2f       	mov	r24, r24
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	8a 5a       	subi	r24, 0xAA	; 170
     cd8:	9e 4f       	sbci	r25, 0xFE	; 254
     cda:	fc 01       	movw	r30, r24
     cdc:	80 81       	ld	r24, Z
     cde:	88 23       	and	r24, r24
     ce0:	b1 f3       	breq	.-20     	; 0xcce <CAN_Read+0x1e>

	for(i = 0; i < 8; ++i)
     ce2:	19 82       	std	Y+1, r1	; 0x01
     ce4:	2c c0       	rjmp	.+88     	; 0xd3e <CAN_Read+0x8e>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	2a 81       	ldd	r18, Y+2	; 0x02
     cee:	3b 81       	ldd	r19, Y+3	; 0x03
     cf0:	82 0f       	add	r24, r18
     cf2:	93 1f       	adc	r25, r19
     cf4:	2c 81       	ldd	r18, Y+4	; 0x04
     cf6:	22 2f       	mov	r18, r18
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	21 50       	subi	r18, 0x01	; 1
     cfc:	30 48       	sbci	r19, 0x80	; 128
     cfe:	22 0f       	add	r18, r18
     d00:	33 1f       	adc	r19, r19
     d02:	22 5d       	subi	r18, 0xD2	; 210
     d04:	3e 4f       	sbci	r19, 0xFE	; 254
     d06:	f9 01       	movw	r30, r18
     d08:	40 81       	ld	r20, Z
     d0a:	51 81       	ldd	r21, Z+1	; 0x01
     d0c:	2c 81       	ldd	r18, Y+4	; 0x04
     d0e:	22 2f       	mov	r18, r18
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	21 50       	subi	r18, 0x01	; 1
     d14:	31 09       	sbc	r19, r1
     d16:	24 5b       	subi	r18, 0xB4	; 180
     d18:	3e 4f       	sbci	r19, 0xFE	; 254
     d1a:	f9 01       	movw	r30, r18
     d1c:	20 81       	ld	r18, Z
     d1e:	62 2f       	mov	r22, r18
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	29 81       	ldd	r18, Y+1	; 0x01
     d24:	22 2f       	mov	r18, r18
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	26 0f       	add	r18, r22
     d2a:	37 1f       	adc	r19, r23
     d2c:	24 0f       	add	r18, r20
     d2e:	35 1f       	adc	r19, r21
     d30:	f9 01       	movw	r30, r18
     d32:	20 81       	ld	r18, Z
     d34:	fc 01       	movw	r30, r24
     d36:	20 83       	st	Z, r18
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	8f 5f       	subi	r24, 0xFF	; 255
     d3c:	89 83       	std	Y+1, r24	; 0x01
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	88 30       	cpi	r24, 0x08	; 8
     d42:	88 f2       	brcs	.-94     	; 0xce6 <CAN_Read+0x36>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     d44:	8c 81       	ldd	r24, Y+4	; 0x04
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	84 5b       	subi	r24, 0xB4	; 180
     d4e:	9e 4f       	sbci	r25, 0xFE	; 254
     d50:	fc 01       	movw	r30, r24
     d52:	20 81       	ld	r18, Z
     d54:	2f 5f       	subi	r18, 0xFF	; 255
     d56:	fc 01       	movw	r30, r24
     d58:	20 83       	st	Z, r18
     d5a:	25 30       	cpi	r18, 0x05	; 5
     d5c:	41 f4       	brne	.+16     	; 0xd6e <CAN_Read+0xbe>
	*(rxRdIndex + sendingNodeID - 1) = 0;
     d5e:	8c 81       	ldd	r24, Y+4	; 0x04
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	84 5b       	subi	r24, 0xB4	; 180
     d68:	9e 4f       	sbci	r25, 0xFE	; 254
     d6a:	fc 01       	movw	r30, r24
     d6c:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     d6e:	8c 81       	ldd	r24, Y+4	; 0x04
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	9c 01       	movw	r18, r24
     d78:	2a 5a       	subi	r18, 0xAA	; 170
     d7a:	3e 4f       	sbci	r19, 0xFE	; 254
     d7c:	f9 01       	movw	r30, r18
     d7e:	20 81       	ld	r18, Z
     d80:	21 50       	subi	r18, 0x01	; 1
     d82:	8a 5a       	subi	r24, 0xAA	; 170
     d84:	9e 4f       	sbci	r25, 0xFE	; 254
     d86:	fc 01       	movw	r30, r24
     d88:	20 83       	st	Z, r18

	return 0;
     d8a:	80 e0       	ldi	r24, 0x00	; 0
}
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <CAN_Write+0x6>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <CAN_Write+0x8>
     da2:	00 d0       	rcall	.+0      	; 0xda4 <CAN_Write+0xa>
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	9d 83       	std	Y+5, r25	; 0x05
     daa:	8c 83       	std	Y+4, r24	; 0x04
     dac:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     dae:	00 00       	nop
     db0:	89 ed       	ldi	r24, 0xD9	; 217
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	fc 01       	movw	r30, r24
     db6:	80 81       	ld	r24, Z
     db8:	82 95       	swap	r24
     dba:	8f 70       	andi	r24, 0x0F	; 15
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	81 70       	andi	r24, 0x01	; 1
     dc2:	99 27       	eor	r25, r25
     dc4:	89 2b       	or	r24, r25
     dc6:	a1 f7       	brne	.-24     	; 0xdb0 <CAN_Write+0x16>
     dc8:	89 ed       	ldi	r24, 0xD9	; 217
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	fc 01       	movw	r30, r24
     dce:	80 81       	ld	r24, Z
     dd0:	86 95       	lsr	r24
     dd2:	86 95       	lsr	r24
     dd4:	86 95       	lsr	r24
     dd6:	88 2f       	mov	r24, r24
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	81 70       	andi	r24, 0x01	; 1
     ddc:	99 27       	eor	r25, r25
     dde:	89 2b       	or	r24, r25
     de0:	39 f7       	brne	.-50     	; 0xdb0 <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     de2:	8d ee       	ldi	r24, 0xED	; 237
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	fc 01       	movw	r30, r24
     de8:	80 81       	ld	r24, Z
     dea:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
     dec:	1a 82       	std	Y+2, r1	; 0x02
     dee:	15 c0       	rjmp	.+42     	; 0xe1a <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
     df0:	8d ee       	ldi	r24, 0xED	; 237
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	2a 81       	ldd	r18, Y+2	; 0x02
     df6:	22 95       	swap	r18
     df8:	20 7f       	andi	r18, 0xF0	; 240
     dfa:	fc 01       	movw	r30, r24
     dfc:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
     dfe:	8f ee       	ldi	r24, 0xEF	; 239
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	fc 01       	movw	r30, r24
     e04:	80 81       	ld	r24, Z
     e06:	82 95       	swap	r24
     e08:	86 95       	lsr	r24
     e0a:	86 95       	lsr	r24
     e0c:	83 70       	andi	r24, 0x03	; 3
     e0e:	88 23       	and	r24, r24
     e10:	09 f4       	brne	.+2      	; 0xe14 <CAN_Write+0x7a>
			break;
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	8f 5f       	subi	r24, 0xFF	; 255
     e18:	8a 83       	std	Y+2, r24	; 0x02
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	8f 30       	cpi	r24, 0x0F	; 15
     e1e:	40 f3       	brcs	.-48     	; 0xdf0 <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	8f 30       	cpi	r24, 0x0F	; 15
     e24:	11 f4       	brne	.+4      	; 0xe2a <CAN_Write+0x90>
		return -1;
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	39 c0       	rjmp	.+114    	; 0xe9c <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     e2a:	82 ef       	ldi	r24, 0xF2	; 242
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	2e 81       	ldd	r18, Y+6	; 0x06
     e30:	22 95       	swap	r18
     e32:	22 0f       	add	r18, r18
     e34:	20 7e       	andi	r18, 0xE0	; 224
     e36:	fc 01       	movw	r30, r24
     e38:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
     e3a:	83 ef       	ldi	r24, 0xF3	; 243
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	2e 81       	ldd	r18, Y+6	; 0x06
     e40:	26 95       	lsr	r18
     e42:	26 95       	lsr	r18
     e44:	26 95       	lsr	r18
     e46:	fc 01       	movw	r30, r24
     e48:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
     e4a:	8f ee       	ldi	r24, 0xEF	; 239
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	28 e0       	ldi	r18, 0x08	; 8
     e50:	fc 01       	movw	r30, r24
     e52:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     e54:	19 82       	std	Y+1, r1	; 0x01
     e56:	10 c0       	rjmp	.+32     	; 0xe78 <CAN_Write+0xde>
		CANMSG = data[i];
     e58:	8a ef       	ldi	r24, 0xFA	; 250
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	29 81       	ldd	r18, Y+1	; 0x01
     e5e:	22 2f       	mov	r18, r18
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	4c 81       	ldd	r20, Y+4	; 0x04
     e64:	5d 81       	ldd	r21, Y+5	; 0x05
     e66:	24 0f       	add	r18, r20
     e68:	35 1f       	adc	r19, r21
     e6a:	f9 01       	movw	r30, r18
     e6c:	20 81       	ld	r18, Z
     e6e:	fc 01       	movw	r30, r24
     e70:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	8f 5f       	subi	r24, 0xFF	; 255
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	88 30       	cpi	r24, 0x08	; 8
     e7c:	68 f3       	brcs	.-38     	; 0xe58 <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     e7e:	8f ee       	ldi	r24, 0xEF	; 239
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	2f ee       	ldi	r18, 0xEF	; 239
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	f9 01       	movw	r30, r18
     e88:	20 81       	ld	r18, Z
     e8a:	20 64       	ori	r18, 0x40	; 64
     e8c:	fc 01       	movw	r30, r24
     e8e:	20 83       	st	Z, r18

	CANPAGE = tempPage;
     e90:	8d ee       	ldi	r24, 0xED	; 237
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	2b 81       	ldd	r18, Y+3	; 0x03
     e96:	fc 01       	movw	r30, r24
     e98:	20 83       	st	Z, r18

	return 0;
     e9a:	80 e0       	ldi	r24, 0x00	; 0
}
     e9c:	26 96       	adiw	r28, 0x06	; 6
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <debug_init>:
#include "debug.h"

//pin and the starting state of debug pins
uint8_t debug_pins[5] = {48,49,50,51,52};

void debug_init() {
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62


}
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	08 95       	ret

00000ebc <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <__list_add+0x6>
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <__list_add+0x8>
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <__list_add+0xa>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	7c 83       	std	Y+4, r23	; 0x04
     ed0:	6b 83       	std	Y+3, r22	; 0x03
     ed2:	5e 83       	std	Y+6, r21	; 0x06
     ed4:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	29 81       	ldd	r18, Y+1	; 0x01
     edc:	3a 81       	ldd	r19, Y+2	; 0x02
     ede:	fc 01       	movw	r30, r24
     ee0:	31 83       	std	Z+1, r19	; 0x01
     ee2:	20 83       	st	Z, r18
    new->next = next;
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	2d 81       	ldd	r18, Y+5	; 0x05
     eea:	3e 81       	ldd	r19, Y+6	; 0x06
     eec:	fc 01       	movw	r30, r24
     eee:	33 83       	std	Z+3, r19	; 0x03
     ef0:	22 83       	std	Z+2, r18	; 0x02
    new->prev = prev;
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	2b 81       	ldd	r18, Y+3	; 0x03
     ef8:	3c 81       	ldd	r19, Y+4	; 0x04
     efa:	fc 01       	movw	r30, r24
     efc:	31 83       	std	Z+1, r19	; 0x01
     efe:	20 83       	st	Z, r18
    prev->next = new;
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	9c 81       	ldd	r25, Y+4	; 0x04
     f04:	29 81       	ldd	r18, Y+1	; 0x01
     f06:	3a 81       	ldd	r19, Y+2	; 0x02
     f08:	fc 01       	movw	r30, r24
     f0a:	33 83       	std	Z+3, r19	; 0x03
     f0c:	22 83       	std	Z+2, r18	; 0x02
}
     f0e:	26 96       	adiw	r28, 0x06	; 6
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <list_add>:

static inline void list_add(struct list_head* new, struct list_head* head)
{
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	00 d0       	rcall	.+0      	; 0xf26 <list_add+0x6>
     f26:	00 d0       	rcall	.+0      	; 0xf28 <list_add+0x8>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	7c 83       	std	Y+4, r23	; 0x04
     f32:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	fc 01       	movw	r30, r24
     f3a:	42 81       	ldd	r20, Z+2	; 0x02
     f3c:	53 81       	ldd	r21, Z+3	; 0x03
     f3e:	2b 81       	ldd	r18, Y+3	; 0x03
     f40:	3c 81       	ldd	r19, Y+4	; 0x04
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	b9 01       	movw	r22, r18
     f48:	0e 94 5e 07 	call	0xebc	; 0xebc <__list_add>
}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	2b 97       	sbiw	r28, 0x0b	; 11
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	89 87       	std	Y+9, r24	; 0x09
     f70:	6a 87       	std	Y+10, r22	; 0x0a
     f72:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     f74:	80 91 0d 01 	lds	r24, 0x010D
     f78:	90 91 0e 01 	lds	r25, 0x010E
     f7c:	9c 83       	std	Y+4, r25	; 0x04
     f7e:	8b 83       	std	Y+3, r24	; 0x03
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	05 97       	sbiw	r24, 0x05	; 5
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	15 c0       	rjmp	.+42     	; 0xfb6 <gpio_register_pin+0x5c>
    {
        if(input->pin == pin)
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	fc 01       	movw	r30, r24
     f92:	90 81       	ld	r25, Z
     f94:	89 85       	ldd	r24, Y+9	; 0x09
     f96:	98 17       	cp	r25, r24
     f98:	11 f4       	brne	.+4      	; 0xf9e <gpio_register_pin+0x44>
            return 1;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	bc c0       	rjmp	.+376    	; 0x1116 <__stack+0x17>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
     fa2:	fc 01       	movw	r30, r24
     fa4:	87 81       	ldd	r24, Z+7	; 0x07
     fa6:	90 85       	ldd	r25, Z+8	; 0x08
     fa8:	9e 83       	std	Y+6, r25	; 0x06
     faa:	8d 83       	std	Y+5, r24	; 0x05
     fac:	8d 81       	ldd	r24, Y+5	; 0x05
     fae:	9e 81       	ldd	r25, Y+6	; 0x06
     fb0:	05 97       	sbiw	r24, 0x05	; 5
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	05 96       	adiw	r24, 0x05	; 5
     fbc:	8b 50       	subi	r24, 0x0B	; 11
     fbe:	91 40       	sbci	r25, 0x01	; 1
     fc0:	29 f7       	brne	.-54     	; 0xf8c <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     fc2:	89 85       	ldd	r24, Y+9	; 0x09
     fc4:	86 95       	lsr	r24
     fc6:	86 95       	lsr	r24
     fc8:	86 95       	lsr	r24
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t pin_reg = pin % 8;
     fce:	89 85       	ldd	r24, Y+9	; 0x09
     fd0:	87 70       	andi	r24, 0x07	; 7
     fd2:	88 87       	std	Y+8, r24	; 0x08
	if(direction == GPIO_DIRECTION_OUTPUT)
     fd4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	09 f0       	breq	.+2      	; 0xfdc <gpio_register_pin+0x82>
     fda:	55 c0       	rjmp	.+170    	; 0x1086 <gpio_register_pin+0x12c>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     fdc:	8f 81       	ldd	r24, Y+7	; 0x07
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	9c 01       	movw	r18, r24
     fe4:	21 50       	subi	r18, 0x01	; 1
     fe6:	31 09       	sbc	r19, r1
     fe8:	c9 01       	movw	r24, r18
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	82 0f       	add	r24, r18
     ff0:	93 1f       	adc	r25, r19
     ff2:	81 96       	adiw	r24, 0x21	; 33
     ff4:	ac 01       	movw	r20, r24
     ff6:	8f 81       	ldd	r24, Y+7	; 0x07
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	9c 01       	movw	r18, r24
     ffe:	21 50       	subi	r18, 0x01	; 1
    1000:	31 09       	sbc	r19, r1
    1002:	c9 01       	movw	r24, r18
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	82 0f       	add	r24, r18
    100a:	93 1f       	adc	r25, r19
    100c:	81 96       	adiw	r24, 0x21	; 33
    100e:	fc 01       	movw	r30, r24
    1010:	80 81       	ld	r24, Z
    1012:	68 2f       	mov	r22, r24
    1014:	88 85       	ldd	r24, Y+8	; 0x08
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <gpio_register_pin+0xca>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	2a 95       	dec	r18
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <gpio_register_pin+0xc6>
    1028:	86 2b       	or	r24, r22
    102a:	fa 01       	movw	r30, r20
    102c:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    102e:	8f 81       	ldd	r24, Y+7	; 0x07
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9c 01       	movw	r18, r24
    1036:	21 50       	subi	r18, 0x01	; 1
    1038:	31 09       	sbc	r19, r1
    103a:	c9 01       	movw	r24, r18
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	82 0f       	add	r24, r18
    1042:	93 1f       	adc	r25, r19
    1044:	82 96       	adiw	r24, 0x22	; 34
    1046:	ac 01       	movw	r20, r24
    1048:	8f 81       	ldd	r24, Y+7	; 0x07
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9c 01       	movw	r18, r24
    1050:	21 50       	subi	r18, 0x01	; 1
    1052:	31 09       	sbc	r19, r1
    1054:	c9 01       	movw	r24, r18
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	82 0f       	add	r24, r18
    105c:	93 1f       	adc	r25, r19
    105e:	82 96       	adiw	r24, 0x22	; 34
    1060:	fc 01       	movw	r30, r24
    1062:	80 81       	ld	r24, Z
    1064:	68 2f       	mov	r22, r24
    1066:	88 85       	ldd	r24, Y+8	; 0x08
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <gpio_register_pin+0x11c>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	2a 95       	dec	r18
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <gpio_register_pin+0x118>
    107a:	80 95       	com	r24
    107c:	86 23       	and	r24, r22
    107e:	fa 01       	movw	r30, r20
    1080:	80 83       	st	Z, r24
        return 0;
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	48 c0       	rjmp	.+144    	; 0x1116 <__stack+0x17>
	}
	else
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1086:	8f 81       	ldd	r24, Y+7	; 0x07
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	9c 01       	movw	r18, r24
    108e:	21 50       	subi	r18, 0x01	; 1
    1090:	31 09       	sbc	r19, r1
    1092:	c9 01       	movw	r24, r18
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	82 0f       	add	r24, r18
    109a:	93 1f       	adc	r25, r19
    109c:	81 96       	adiw	r24, 0x21	; 33
    109e:	ac 01       	movw	r20, r24
    10a0:	8f 81       	ldd	r24, Y+7	; 0x07
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	9c 01       	movw	r18, r24
    10a8:	21 50       	subi	r18, 0x01	; 1
    10aa:	31 09       	sbc	r19, r1
    10ac:	c9 01       	movw	r24, r18
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	82 0f       	add	r24, r18
    10b4:	93 1f       	adc	r25, r19
    10b6:	81 96       	adiw	r24, 0x21	; 33
    10b8:	fc 01       	movw	r30, r24
    10ba:	80 81       	ld	r24, Z
    10bc:	68 2f       	mov	r22, r24
    10be:	88 85       	ldd	r24, Y+8	; 0x08
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <gpio_register_pin+0x174>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	2a 95       	dec	r18
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <gpio_register_pin+0x170>
    10d2:	80 95       	com	r24
    10d4:	86 23       	and	r24, r22
    10d6:	fa 01       	movw	r30, r20
    10d8:	80 83       	st	Z, r24

    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    10da:	89 e0       	ldi	r24, 0x09	; 9
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <malloc>
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	89 83       	std	Y+1, r24	; 0x01
    if(input == NULL)
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	89 2b       	or	r24, r25
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <gpio_register_pin+0x198>
        return 1;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	12 c0       	rjmp	.+36     	; 0x1116 <__stack+0x17>

    input->pin       = pin;
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	9a 81       	ldd	r25, Y+2	; 0x02
    10f6:	29 85       	ldd	r18, Y+9	; 0x09
    10f8:	fc 01       	movw	r30, r24
    10fa:	20 83       	st	Z, r18
    input->pulled_up = pulled_up;
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1100:	2b 85       	ldd	r18, Y+11	; 0x0b
    1102:	fc 01       	movw	r30, r24
    1104:	21 83       	std	Z+1, r18	; 0x01
    list_add(&input->list, &gpio_inputs);
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	05 96       	adiw	r24, 0x05	; 5
    110c:	6b e0       	ldi	r22, 0x0B	; 11
    110e:	71 e0       	ldi	r23, 0x01	; 1
    1110:	0e 94 90 07 	call	0xf20	; 0xf20 <list_add>

    return 0;
    1114:	80 e0       	ldi	r24, 0x00	; 0
}
    1116:	2b 96       	adiw	r28, 0x0b	; 11
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	08 95       	ret

00001128 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	00 d0       	rcall	.+0      	; 0x112e <gpio_write_pin+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <gpio_write_pin+0x8>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	8b 83       	std	Y+3, r24	; 0x03
    1136:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	86 95       	lsr	r24
    113c:	86 95       	lsr	r24
    113e:	86 95       	lsr	r24
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	89 83       	std	Y+1, r24	; 0x01
	pin = pin % 8;
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	87 70       	andi	r24, 0x07	; 7
    1148:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9c 01       	movw	r18, r24
    1152:	21 50       	subi	r18, 0x01	; 1
    1154:	31 09       	sbc	r19, r1
    1156:	c9 01       	movw	r24, r18
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	82 0f       	add	r24, r18
    115e:	93 1f       	adc	r25, r19
    1160:	82 96       	adiw	r24, 0x22	; 34
    1162:	fc 01       	movw	r30, r24
    1164:	80 81       	ld	r24, Z
    1166:	91 81       	ldd	r25, Z+1	; 0x01
    1168:	a2 81       	ldd	r26, Z+2	; 0x02
    116a:	b3 81       	ldd	r27, Z+3	; 0x03
    116c:	8a 83       	std	Y+2, r24	; 0x02
	if(value != 0)
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	88 23       	and	r24, r24
    1172:	31 f1       	breq	.+76     	; 0x11c0 <gpio_write_pin+0x98>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	9c 01       	movw	r18, r24
    117c:	21 50       	subi	r18, 0x01	; 1
    117e:	31 09       	sbc	r19, r1
    1180:	c9 01       	movw	r24, r18
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	82 0f       	add	r24, r18
    1188:	93 1f       	adc	r25, r19
    118a:	82 96       	adiw	r24, 0x22	; 34
    118c:	ac 01       	movw	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	68 2f       	mov	r22, r24
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <gpio_write_pin+0x7c>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	6a 95       	dec	r22
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <gpio_write_pin+0x78>
    11a8:	82 2b       	or	r24, r18
    11aa:	93 2b       	or	r25, r19
    11ac:	09 2e       	mov	r0, r25
    11ae:	00 0c       	add	r0, r0
    11b0:	aa 0b       	sbc	r26, r26
    11b2:	bb 0b       	sbc	r27, r27
    11b4:	fa 01       	movw	r30, r20
    11b6:	80 83       	st	Z, r24
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	a2 83       	std	Z+2, r26	; 0x02
    11bc:	b3 83       	std	Z+3, r27	; 0x03
    11be:	27 c0       	rjmp	.+78     	; 0x120e <gpio_write_pin+0xe6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	9c 01       	movw	r18, r24
    11c8:	21 50       	subi	r18, 0x01	; 1
    11ca:	31 09       	sbc	r19, r1
    11cc:	c9 01       	movw	r24, r18
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	82 0f       	add	r24, r18
    11d4:	93 1f       	adc	r25, r19
    11d6:	82 96       	adiw	r24, 0x22	; 34
    11d8:	ac 01       	movw	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	68 2f       	mov	r22, r24
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <gpio_write_pin+0xc8>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	6a 95       	dec	r22
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <gpio_write_pin+0xc4>
    11f4:	80 95       	com	r24
    11f6:	90 95       	com	r25
    11f8:	82 23       	and	r24, r18
    11fa:	93 23       	and	r25, r19
    11fc:	09 2e       	mov	r0, r25
    11fe:	00 0c       	add	r0, r0
    1200:	aa 0b       	sbc	r26, r26
    1202:	bb 0b       	sbc	r27, r27
    1204:	fa 01       	movw	r30, r20
    1206:	80 83       	st	Z, r24
    1208:	91 83       	std	Z+1, r25	; 0x01
    120a:	a2 83       	std	Z+2, r26	; 0x02
    120c:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    120e:	80 e0       	ldi	r24, 0x00	; 0
}
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	00 d0       	rcall	.+0      	; 0x1224 <__gpio_read_pin+0x6>
    1224:	1f 92       	push	r1
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	86 95       	lsr	r24
    1230:	86 95       	lsr	r24
    1232:	86 95       	lsr	r24
    1234:	8f 5f       	subi	r24, 0xFF	; 255
    1236:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	87 70       	andi	r24, 0x07	; 7
    123c:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	88 2f       	mov	r24, r24
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	9c 01       	movw	r18, r24
    1246:	21 50       	subi	r18, 0x01	; 1
    1248:	31 09       	sbc	r19, r1
    124a:	c9 01       	movw	r24, r18
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	82 0f       	add	r24, r18
    1252:	93 1f       	adc	r25, r19
    1254:	80 96       	adiw	r24, 0x20	; 32
    1256:	fc 01       	movw	r30, r24
    1258:	80 81       	ld	r24, Z
    125a:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	2b 81       	ldd	r18, Y+3	; 0x03
    1264:	22 2f       	mov	r18, r18
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	02 c0       	rjmp	.+4      	; 0x126e <__gpio_read_pin+0x50>
    126a:	95 95       	asr	r25
    126c:	87 95       	ror	r24
    126e:	2a 95       	dec	r18
    1270:	e2 f7       	brpl	.-8      	; 0x126a <__gpio_read_pin+0x4c>
    1272:	81 70       	andi	r24, 0x01	; 1
}
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	08 95       	ret

00001280 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	29 97       	sbiw	r28, 0x09	; 9
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1296:	80 91 0d 01 	lds	r24, 0x010D
    129a:	90 91 0e 01 	lds	r25, 0x010E
    129e:	9d 83       	std	Y+5, r25	; 0x05
    12a0:	8c 83       	std	Y+4, r24	; 0x04
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	9d 81       	ldd	r25, Y+5	; 0x05
    12a6:	05 97       	sbiw	r24, 0x05	; 5
    12a8:	9a 83       	std	Y+2, r25	; 0x02
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	55 c0       	rjmp	.+170    	; 0x1358 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	9a 81       	ldd	r25, Y+2	; 0x02
    12b2:	fc 01       	movw	r30, r24
    12b4:	90 81       	ld	r25, Z
    12b6:	89 85       	ldd	r24, Y+9	; 0x09
    12b8:	98 17       	cp	r25, r24
    12ba:	09 f0       	breq	.+2      	; 0x12be <gpio_read_pin+0x3e>
    12bc:	41 c0       	rjmp	.+130    	; 0x1340 <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
    12be:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    12c0:	1f c0       	rjmp	.+62     	; 0x1300 <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	29 81       	ldd	r18, Y+1	; 0x01
    12ca:	3a 81       	ldd	r19, Y+2	; 0x02
    12cc:	82 0f       	add	r24, r18
    12ce:	93 1f       	adc	r25, r19
    12d0:	02 96       	adiw	r24, 0x02	; 2
    12d2:	fc 01       	movw	r30, r24
    12d4:	40 81       	ld	r20, Z
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	29 81       	ldd	r18, Y+1	; 0x01
    12e0:	3a 81       	ldd	r19, Y+2	; 0x02
    12e2:	82 0f       	add	r24, r18
    12e4:	93 1f       	adc	r25, r19
    12e6:	02 96       	adiw	r24, 0x02	; 2
    12e8:	fc 01       	movw	r30, r24
    12ea:	80 81       	ld	r24, Z
    12ec:	48 17       	cp	r20, r24
    12ee:	29 f0       	breq	.+10     	; 0x12fa <gpio_read_pin+0x7a>
                    return input->previous_state;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	9a 81       	ldd	r25, Y+2	; 0x02
    12f4:	fc 01       	movw	r30, r24
    12f6:	84 81       	ldd	r24, Z+4	; 0x04
    12f8:	37 c0       	rjmp	.+110    	; 0x1368 <gpio_read_pin+0xe8>
                i++;
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	8f 5f       	subi	r24, 0xFF	; 255
    12fe:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	88 23       	and	r24, r24
    1304:	f1 f2       	breq	.-68     	; 0x12c2 <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	9a 81       	ldd	r25, Y+2	; 0x02
    130a:	fc 01       	movw	r30, r24
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	89 27       	eor	r24, r25
    1312:	88 23       	and	r24, r24
    1314:	29 f0       	breq	.+10     	; 0x1320 <gpio_read_pin+0xa0>
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	9a 81       	ldd	r25, Y+2	; 0x02
    131a:	fc 01       	movw	r30, r24
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	08 c0       	rjmp	.+16     	; 0x1330 <gpio_read_pin+0xb0>
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	9a 81       	ldd	r25, Y+2	; 0x02
    1324:	fc 01       	movw	r30, r24
    1326:	92 81       	ldd	r25, Z+2	; 0x02
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	99 23       	and	r25, r25
    132c:	09 f0       	breq	.+2      	; 0x1330 <gpio_read_pin+0xb0>
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	9a 81       	ldd	r25, Y+2	; 0x02
    1336:	28 85       	ldd	r18, Y+8	; 0x08
    1338:	fc 01       	movw	r30, r24
    133a:	24 83       	std	Z+4, r18	; 0x04

            return state;
    133c:	88 85       	ldd	r24, Y+8	; 0x08
    133e:	14 c0       	rjmp	.+40     	; 0x1368 <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	fc 01       	movw	r30, r24
    1346:	87 81       	ldd	r24, Z+7	; 0x07
    1348:	90 85       	ldd	r25, Z+8	; 0x08
    134a:	9f 83       	std	Y+7, r25	; 0x07
    134c:	8e 83       	std	Y+6, r24	; 0x06
    134e:	8e 81       	ldd	r24, Y+6	; 0x06
    1350:	9f 81       	ldd	r25, Y+7	; 0x07
    1352:	05 97       	sbiw	r24, 0x05	; 5
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	05 96       	adiw	r24, 0x05	; 5
    135e:	8b 50       	subi	r24, 0x0B	; 11
    1360:	91 40       	sbci	r25, 0x01	; 1
    1362:	09 f0       	breq	.+2      	; 0x1366 <gpio_read_pin+0xe6>
    1364:	a4 cf       	rjmp	.-184    	; 0x12ae <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1366:	81 e0       	ldi	r24, 0x01	; 1
}
    1368:	29 96       	adiw	r28, 0x09	; 9
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	00 d0       	rcall	.+0      	; 0x1384 <gpio_debouncer+0xa>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <gpio_debouncer+0xc>
    1386:	00 d0       	rcall	.+0      	; 0x1388 <gpio_debouncer+0xe>
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    138c:	80 91 0d 01 	lds	r24, 0x010D
    1390:	90 91 0e 01 	lds	r25, 0x010E
    1394:	9c 83       	std	Y+4, r25	; 0x04
    1396:	8b 83       	std	Y+3, r24	; 0x03
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	05 97       	sbiw	r24, 0x05	; 5
    139e:	9a 83       	std	Y+2, r25	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	1e c0       	rjmp	.+60     	; 0x13e0 <gpio_debouncer+0x66>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    13a4:	00 91 62 01 	lds	r16, 0x0162
    13a8:	10 91 63 01 	lds	r17, 0x0163
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	9a 81       	ldd	r25, Y+2	; 0x02
    13b0:	fc 01       	movw	r30, r24
    13b2:	80 81       	ld	r24, Z
    13b4:	0e 94 0f 09 	call	0x121e	; 0x121e <__gpio_read_pin>
    13b8:	28 2f       	mov	r18, r24
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	9a 81       	ldd	r25, Y+2	; 0x02
    13be:	80 0f       	add	r24, r16
    13c0:	91 1f       	adc	r25, r17
    13c2:	02 96       	adiw	r24, 0x02	; 2
    13c4:	fc 01       	movw	r30, r24
    13c6:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	9a 81       	ldd	r25, Y+2	; 0x02
    13cc:	fc 01       	movw	r30, r24
    13ce:	87 81       	ldd	r24, Z+7	; 0x07
    13d0:	90 85       	ldd	r25, Z+8	; 0x08
    13d2:	9e 83       	std	Y+6, r25	; 0x06
    13d4:	8d 83       	std	Y+5, r24	; 0x05
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	05 97       	sbiw	r24, 0x05	; 5
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	05 96       	adiw	r24, 0x05	; 5
    13e6:	8b 50       	subi	r24, 0x0B	; 11
    13e8:	91 40       	sbci	r25, 0x01	; 1
    13ea:	e1 f6       	brne	.-72     	; 0x13a4 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    13ec:	80 91 62 01 	lds	r24, 0x0162
    13f0:	90 91 63 01 	lds	r25, 0x0163
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	90 93 63 01 	sts	0x0163, r25
    13fa:	80 93 62 01 	sts	0x0162, r24
    13fe:	02 97       	sbiw	r24, 0x02	; 2
    1400:	21 f4       	brne	.+8      	; 0x140a <gpio_debouncer+0x90>
        count = 0;
    1402:	10 92 63 01 	sts	0x0163, r1
    1406:	10 92 62 01 	sts	0x0162, r1

}
    140a:	26 96       	adiw	r28, 0x06	; 6
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	08 95       	ret

00001420 <odometry_set_speed>:
 * 	void odometry_set_speed(uint8_t speed)
 *
 * 	Send odometry board the max speed
 */
void odometry_set_speed(uint8_t speed)
{
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	67 97       	sbiw	r28, 0x17	; 23
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1436:	80 91 64 01 	lds	r24, 0x0164
    143a:	9f 89       	ldd	r25, Y+23	; 0x17
    143c:	98 17       	cp	r25, r24
    143e:	09 f4       	brne	.+2      	; 0x1442 <odometry_set_speed+0x22>
    1440:	82 c0       	rjmp	.+260    	; 0x1546 <odometry_set_speed+0x126>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1442:	86 e5       	ldi	r24, 0x56	; 86
    1444:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1446:	8f 89       	ldd	r24, Y+23	; 0x17
    1448:	88 8b       	std	Y+16, r24	; 0x10
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    144a:	72 c0       	rjmp	.+228    	; 0x1530 <odometry_set_speed+0x110>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a8 e4       	ldi	r26, 0x48	; 72
    1452:	b2 e4       	ldi	r27, 0x42	; 66
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	ab 83       	std	Y+3, r26	; 0x03
    145a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e4       	ldi	r19, 0x40	; 64
    1460:	4c e1       	ldi	r20, 0x1C	; 28
    1462:	55 e4       	ldi	r21, 0x45	; 69
    1464:	69 81       	ldd	r22, Y+1	; 0x01
    1466:	7a 81       	ldd	r23, Y+2	; 0x02
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	af 83       	std	Y+7, r26	; 0x07
    147a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e8       	ldi	r20, 0x80	; 128
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	6d 81       	ldd	r22, Y+5	; 0x05
    1486:	7e 81       	ldd	r23, Y+6	; 0x06
    1488:	8f 81       	ldd	r24, Y+7	; 0x07
    148a:	98 85       	ldd	r25, Y+8	; 0x08
    148c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    1490:	88 23       	and	r24, r24
    1492:	2c f4       	brge	.+10     	; 0x149e <odometry_set_speed+0x7e>
		__ticks = 1;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	9a 87       	std	Y+10, r25	; 0x0a
    149a:	89 87       	std	Y+9, r24	; 0x09
    149c:	3f c0       	rjmp	.+126    	; 0x151c <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	3f ef       	ldi	r19, 0xFF	; 255
    14a2:	4f e7       	ldi	r20, 0x7F	; 127
    14a4:	57 e4       	ldi	r21, 0x47	; 71
    14a6:	6d 81       	ldd	r22, Y+5	; 0x05
    14a8:	7e 81       	ldd	r23, Y+6	; 0x06
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    14b2:	18 16       	cp	r1, r24
    14b4:	4c f5       	brge	.+82     	; 0x1508 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	40 e2       	ldi	r20, 0x20	; 32
    14bc:	51 e4       	ldi	r21, 0x41	; 65
    14be:	69 81       	ldd	r22, Y+1	; 0x01
    14c0:	7a 81       	ldd	r23, Y+2	; 0x02
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	bc 01       	movw	r22, r24
    14d0:	cd 01       	movw	r24, r26
    14d2:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	9a 87       	std	Y+10, r25	; 0x0a
    14dc:	89 87       	std	Y+9, r24	; 0x09
    14de:	0f c0       	rjmp	.+30     	; 0x14fe <odometry_set_speed+0xde>
    14e0:	8a ef       	ldi	r24, 0xFA	; 250
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	9c 87       	std	Y+12, r25	; 0x0c
    14e6:	8b 87       	std	Y+11, r24	; 0x0b
    14e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <odometry_set_speed+0xcc>
    14f0:	9c 87       	std	Y+12, r25	; 0x0c
    14f2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f4:	89 85       	ldd	r24, Y+9	; 0x09
    14f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	9a 87       	std	Y+10, r25	; 0x0a
    14fc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fe:	89 85       	ldd	r24, Y+9	; 0x09
    1500:	9a 85       	ldd	r25, Y+10	; 0x0a
    1502:	89 2b       	or	r24, r25
    1504:	69 f7       	brne	.-38     	; 0x14e0 <odometry_set_speed+0xc0>
    1506:	14 c0       	rjmp	.+40     	; 0x1530 <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1508:	6d 81       	ldd	r22, Y+5	; 0x05
    150a:	7e 81       	ldd	r23, Y+6	; 0x06
    150c:	8f 81       	ldd	r24, Y+7	; 0x07
    150e:	98 85       	ldd	r25, Y+8	; 0x08
    1510:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	9a 87       	std	Y+10, r25	; 0x0a
    151a:	89 87       	std	Y+9, r24	; 0x09
    151c:	89 85       	ldd	r24, Y+9	; 0x09
    151e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1520:	9e 87       	std	Y+14, r25	; 0x0e
    1522:	8d 87       	std	Y+13, r24	; 0x0d
    1524:	8d 85       	ldd	r24, Y+13	; 0x0d
    1526:	9e 85       	ldd	r25, Y+14	; 0x0e
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	f1 f7       	brne	.-4      	; 0x1528 <odometry_set_speed+0x108>
    152c:	9e 87       	std	Y+14, r25	; 0x0e
    152e:	8d 87       	std	Y+13, r24	; 0x0d
    1530:	ce 01       	movw	r24, r28
    1532:	0f 96       	adiw	r24, 0x0f	; 15
    1534:	63 ec       	ldi	r22, 0xC3	; 195
    1536:	0e 94 cd 06 	call	0xd9a	; 0xd9a <CAN_Write>
    153a:	88 23       	and	r24, r24
    153c:	09 f0       	breq	.+2      	; 0x1540 <odometry_set_speed+0x120>
    153e:	86 cf       	rjmp	.-244    	; 0x144c <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    1540:	8f 89       	ldd	r24, Y+23	; 0x17
    1542:	80 93 64 01 	sts	0x0164, r24
}
    1546:	67 96       	adiw	r28, 0x17	; 23
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	08 95       	ret

00001558 <odometry_query_position>:
 * 	void odometry_query_position(void)
 *
 * 	Get the current position. Update it to position
 */
void odometry_query_position(void)
{
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	66 97       	sbiw	r28, 0x16	; 22
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    156c:	80 e5       	ldi	r24, 0x50	; 80
    156e:	8f 87       	std	Y+15, r24	; 0x0f
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1570:	72 c0       	rjmp	.+228    	; 0x1656 <odometry_query_position+0xfe>
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	a8 e4       	ldi	r26, 0x48	; 72
    1578:	b2 e4       	ldi	r27, 0x42	; 66
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	ab 83       	std	Y+3, r26	; 0x03
    1580:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e4       	ldi	r19, 0x40	; 64
    1586:	4c e1       	ldi	r20, 0x1C	; 28
    1588:	55 e4       	ldi	r21, 0x45	; 69
    158a:	69 81       	ldd	r22, Y+1	; 0x01
    158c:	7a 81       	ldd	r23, Y+2	; 0x02
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	8d 83       	std	Y+5, r24	; 0x05
    159c:	9e 83       	std	Y+6, r25	; 0x06
    159e:	af 83       	std	Y+7, r26	; 0x07
    15a0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e8       	ldi	r20, 0x80	; 128
    15a8:	5f e3       	ldi	r21, 0x3F	; 63
    15aa:	6d 81       	ldd	r22, Y+5	; 0x05
    15ac:	7e 81       	ldd	r23, Y+6	; 0x06
    15ae:	8f 81       	ldd	r24, Y+7	; 0x07
    15b0:	98 85       	ldd	r25, Y+8	; 0x08
    15b2:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    15b6:	88 23       	and	r24, r24
    15b8:	2c f4       	brge	.+10     	; 0x15c4 <odometry_query_position+0x6c>
		__ticks = 1;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9a 87       	std	Y+10, r25	; 0x0a
    15c0:	89 87       	std	Y+9, r24	; 0x09
    15c2:	3f c0       	rjmp	.+126    	; 0x1642 <odometry_query_position+0xea>
	else if (__tmp > 65535)
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f e7       	ldi	r20, 0x7F	; 127
    15ca:	57 e4       	ldi	r21, 0x47	; 71
    15cc:	6d 81       	ldd	r22, Y+5	; 0x05
    15ce:	7e 81       	ldd	r23, Y+6	; 0x06
    15d0:	8f 81       	ldd	r24, Y+7	; 0x07
    15d2:	98 85       	ldd	r25, Y+8	; 0x08
    15d4:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    15d8:	18 16       	cp	r1, r24
    15da:	4c f5       	brge	.+82     	; 0x162e <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e2       	ldi	r20, 0x20	; 32
    15e2:	51 e4       	ldi	r21, 0x41	; 65
    15e4:	69 81       	ldd	r22, Y+1	; 0x01
    15e6:	7a 81       	ldd	r23, Y+2	; 0x02
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	bc 01       	movw	r22, r24
    15f6:	cd 01       	movw	r24, r26
    15f8:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	9a 87       	std	Y+10, r25	; 0x0a
    1602:	89 87       	std	Y+9, r24	; 0x09
    1604:	0f c0       	rjmp	.+30     	; 0x1624 <odometry_query_position+0xcc>
    1606:	8a ef       	ldi	r24, 0xFA	; 250
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	9c 87       	std	Y+12, r25	; 0x0c
    160c:	8b 87       	std	Y+11, r24	; 0x0b
    160e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1610:	9c 85       	ldd	r25, Y+12	; 0x0c
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <odometry_query_position+0xba>
    1616:	9c 87       	std	Y+12, r25	; 0x0c
    1618:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161a:	89 85       	ldd	r24, Y+9	; 0x09
    161c:	9a 85       	ldd	r25, Y+10	; 0x0a
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	9a 87       	std	Y+10, r25	; 0x0a
    1622:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1624:	89 85       	ldd	r24, Y+9	; 0x09
    1626:	9a 85       	ldd	r25, Y+10	; 0x0a
    1628:	89 2b       	or	r24, r25
    162a:	69 f7       	brne	.-38     	; 0x1606 <odometry_query_position+0xae>
    162c:	14 c0       	rjmp	.+40     	; 0x1656 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    162e:	6d 81       	ldd	r22, Y+5	; 0x05
    1630:	7e 81       	ldd	r23, Y+6	; 0x06
    1632:	8f 81       	ldd	r24, Y+7	; 0x07
    1634:	98 85       	ldd	r25, Y+8	; 0x08
    1636:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	9a 87       	std	Y+10, r25	; 0x0a
    1640:	89 87       	std	Y+9, r24	; 0x09
    1642:	89 85       	ldd	r24, Y+9	; 0x09
    1644:	9a 85       	ldd	r25, Y+10	; 0x0a
    1646:	9e 87       	std	Y+14, r25	; 0x0e
    1648:	8d 87       	std	Y+13, r24	; 0x0d
    164a:	8d 85       	ldd	r24, Y+13	; 0x0d
    164c:	9e 85       	ldd	r25, Y+14	; 0x0e
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <odometry_query_position+0xf6>
    1652:	9e 87       	std	Y+14, r25	; 0x0e
    1654:	8d 87       	std	Y+13, r24	; 0x0d
    1656:	ce 01       	movw	r24, r28
    1658:	0f 96       	adiw	r24, 0x0f	; 15
    165a:	63 ec       	ldi	r22, 0xC3	; 195
    165c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <CAN_Write>
    1660:	88 23       	and	r24, r24
    1662:	09 f0       	breq	.+2      	; 0x1666 <odometry_query_position+0x10e>
    1664:	86 cf       	rjmp	.-244    	; 0x1572 <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1666:	ce 01       	movw	r24, r28
    1668:	0f 96       	adiw	r24, 0x0f	; 15
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <CAN_Read>

	position.state = buffer[0];
    1670:	8f 85       	ldd	r24, Y+15	; 0x0f
    1672:	80 93 15 01 	sts	0x0115, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1676:	88 89       	ldd	r24, Y+16	; 0x10
    1678:	88 2f       	mov	r24, r24
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	38 2f       	mov	r19, r24
    167e:	22 27       	eor	r18, r18
    1680:	89 89       	ldd	r24, Y+17	; 0x11
    1682:	88 2f       	mov	r24, r24
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	82 2b       	or	r24, r18
    1688:	93 2b       	or	r25, r19
    168a:	90 93 10 01 	sts	0x0110, r25
    168e:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1692:	8a 89       	ldd	r24, Y+18	; 0x12
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	38 2f       	mov	r19, r24
    169a:	22 27       	eor	r18, r18
    169c:	8b 89       	ldd	r24, Y+19	; 0x13
    169e:	88 2f       	mov	r24, r24
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	82 2b       	or	r24, r18
    16a4:	93 2b       	or	r25, r19
    16a6:	90 93 12 01 	sts	0x0112, r25
    16aa:	80 93 11 01 	sts	0x0111, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    16ae:	8c 89       	ldd	r24, Y+20	; 0x14
    16b0:	88 2f       	mov	r24, r24
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	38 2f       	mov	r19, r24
    16b6:	22 27       	eor	r18, r18
    16b8:	8d 89       	ldd	r24, Y+21	; 0x15
    16ba:	88 2f       	mov	r24, r24
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	82 2b       	or	r24, r18
    16c0:	93 2b       	or	r25, r19
    16c2:	90 93 14 01 	sts	0x0114, r25
    16c6:	80 93 13 01 	sts	0x0113, r24
}
    16ca:	66 96       	adiw	r28, 0x16	; 22
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	08 95       	ret

000016dc <odometry_wait_until_done>:
 * 	static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
 *
 * 	Callback function, execute function while odometry is moving
 */
static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <odometry_wait_until_done+0x6>
    16e2:	00 d0       	rcall	.+0      	; 0x16e4 <odometry_wait_until_done+0x8>
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <odometry_wait_until_done+0xa>
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    16ee:	0e 94 ab 12 	call	0x2556	; 0x2556 <system_get_system_time>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	9a 83       	std	Y+2, r25	; 0x02
    16fa:	ab 83       	std	Y+3, r26	; 0x03
    16fc:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    16fe:	0e 94 ac 0a 	call	0x1558	; 0x1558 <odometry_query_position>
		if(callback != NULL)
    1702:	8d 81       	ldd	r24, Y+5	; 0x05
    1704:	9e 81       	ldd	r25, Y+6	; 0x06
    1706:	89 2b       	or	r24, r25
    1708:	71 f0       	breq	.+28     	; 0x1726 <odometry_wait_until_done+0x4a>
		{
			if(callback(time) == 1)
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	ab 81       	ldd	r26, Y+3	; 0x03
    1710:	bc 81       	ldd	r27, Y+4	; 0x04
    1712:	2d 81       	ldd	r18, Y+5	; 0x05
    1714:	3e 81       	ldd	r19, Y+6	; 0x06
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	f9 01       	movw	r30, r18
    171c:	09 95       	icall
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	11 f4       	brne	.+4      	; 0x1726 <odometry_wait_until_done+0x4a>
				return ODOMETRY_FAIL;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <odometry_wait_until_done+0x5c>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1726:	80 91 15 01 	lds	r24, 0x0115
    172a:	8d 34       	cpi	r24, 0x4D	; 77
    172c:	41 f3       	breq	.-48     	; 0x16fe <odometry_wait_until_done+0x22>
    172e:	80 91 15 01 	lds	r24, 0x0115
    1732:	82 35       	cpi	r24, 0x52	; 82
    1734:	21 f3       	breq	.-56     	; 0x16fe <odometry_wait_until_done+0x22>

	return ODOMETRY_SUCCESS;
    1736:	80 e0       	ldi	r24, 0x00	; 0
}
    1738:	26 96       	adiw	r28, 0x06	; 6
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	08 95       	ret

0000174a <odometry_stop>:
 * 	void odometry_stop(int8_t type)
 *
 * 	Send stop to odometry
 */
void odometry_stop(int8_t type)
{
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	67 97       	sbiw	r28, 0x17	; 23
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    1760:	8f 89       	ldd	r24, Y+23	; 0x17
    1762:	8f 87       	std	Y+15, r24	; 0x0f

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1764:	72 c0       	rjmp	.+228    	; 0x184a <odometry_stop+0x100>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a8 e4       	ldi	r26, 0x48	; 72
    176c:	b2 e4       	ldi	r27, 0x42	; 66
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	9a 83       	std	Y+2, r25	; 0x02
    1772:	ab 83       	std	Y+3, r26	; 0x03
    1774:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e4       	ldi	r19, 0x40	; 64
    177a:	4c e1       	ldi	r20, 0x1C	; 28
    177c:	55 e4       	ldi	r21, 0x45	; 69
    177e:	69 81       	ldd	r22, Y+1	; 0x01
    1780:	7a 81       	ldd	r23, Y+2	; 0x02
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	8d 83       	std	Y+5, r24	; 0x05
    1790:	9e 83       	std	Y+6, r25	; 0x06
    1792:	af 83       	std	Y+7, r26	; 0x07
    1794:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e8       	ldi	r20, 0x80	; 128
    179c:	5f e3       	ldi	r21, 0x3F	; 63
    179e:	6d 81       	ldd	r22, Y+5	; 0x05
    17a0:	7e 81       	ldd	r23, Y+6	; 0x06
    17a2:	8f 81       	ldd	r24, Y+7	; 0x07
    17a4:	98 85       	ldd	r25, Y+8	; 0x08
    17a6:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    17aa:	88 23       	and	r24, r24
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <odometry_stop+0x6e>
		__ticks = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9a 87       	std	Y+10, r25	; 0x0a
    17b4:	89 87       	std	Y+9, r24	; 0x09
    17b6:	3f c0       	rjmp	.+126    	; 0x1836 <odometry_stop+0xec>
	else if (__tmp > 65535)
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	3f ef       	ldi	r19, 0xFF	; 255
    17bc:	4f e7       	ldi	r20, 0x7F	; 127
    17be:	57 e4       	ldi	r21, 0x47	; 71
    17c0:	6d 81       	ldd	r22, Y+5	; 0x05
    17c2:	7e 81       	ldd	r23, Y+6	; 0x06
    17c4:	8f 81       	ldd	r24, Y+7	; 0x07
    17c6:	98 85       	ldd	r25, Y+8	; 0x08
    17c8:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    17cc:	18 16       	cp	r1, r24
    17ce:	4c f5       	brge	.+82     	; 0x1822 <odometry_stop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e2       	ldi	r20, 0x20	; 32
    17d6:	51 e4       	ldi	r21, 0x41	; 65
    17d8:	69 81       	ldd	r22, Y+1	; 0x01
    17da:	7a 81       	ldd	r23, Y+2	; 0x02
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	9a 87       	std	Y+10, r25	; 0x0a
    17f6:	89 87       	std	Y+9, r24	; 0x09
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <odometry_stop+0xce>
    17fa:	8a ef       	ldi	r24, 0xFA	; 250
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	9c 87       	std	Y+12, r25	; 0x0c
    1800:	8b 87       	std	Y+11, r24	; 0x0b
    1802:	8b 85       	ldd	r24, Y+11	; 0x0b
    1804:	9c 85       	ldd	r25, Y+12	; 0x0c
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <odometry_stop+0xbc>
    180a:	9c 87       	std	Y+12, r25	; 0x0c
    180c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	9a 87       	std	Y+10, r25	; 0x0a
    1816:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1818:	89 85       	ldd	r24, Y+9	; 0x09
    181a:	9a 85       	ldd	r25, Y+10	; 0x0a
    181c:	89 2b       	or	r24, r25
    181e:	69 f7       	brne	.-38     	; 0x17fa <odometry_stop+0xb0>
    1820:	14 c0       	rjmp	.+40     	; 0x184a <odometry_stop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1822:	6d 81       	ldd	r22, Y+5	; 0x05
    1824:	7e 81       	ldd	r23, Y+6	; 0x06
    1826:	8f 81       	ldd	r24, Y+7	; 0x07
    1828:	98 85       	ldd	r25, Y+8	; 0x08
    182a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9a 87       	std	Y+10, r25	; 0x0a
    1834:	89 87       	std	Y+9, r24	; 0x09
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	9e 87       	std	Y+14, r25	; 0x0e
    183c:	8d 87       	std	Y+13, r24	; 0x0d
    183e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1840:	9e 85       	ldd	r25, Y+14	; 0x0e
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <odometry_stop+0xf8>
    1846:	9e 87       	std	Y+14, r25	; 0x0e
    1848:	8d 87       	std	Y+13, r24	; 0x0d
    184a:	ce 01       	movw	r24, r28
    184c:	0f 96       	adiw	r24, 0x0f	; 15
    184e:	63 ec       	ldi	r22, 0xC3	; 195
    1850:	0e 94 cd 06 	call	0xd9a	; 0xd9a <CAN_Write>
    1854:	88 23       	and	r24, r24
    1856:	09 f0       	breq	.+2      	; 0x185a <odometry_stop+0x110>
    1858:	86 cf       	rjmp	.-244    	; 0x1766 <odometry_stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    185a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    185e:	80 91 15 01 	lds	r24, 0x0115
    1862:	8d 34       	cpi	r24, 0x4D	; 77
    1864:	09 f4       	brne	.+2      	; 0x1868 <odometry_stop+0x11e>
    1866:	7c cf       	rjmp	.-264    	; 0x1760 <odometry_stop+0x16>
    1868:	80 91 15 01 	lds	r24, 0x0115
    186c:	82 35       	cpi	r24, 0x52	; 82
    186e:	09 f4       	brne	.+2      	; 0x1872 <odometry_stop+0x128>
    1870:	77 cf       	rjmp	.-274    	; 0x1760 <odometry_stop+0x16>
}
    1872:	67 96       	adiw	r28, 0x17	; 23
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	08 95       	ret

00001884 <odometry_move_straight>:
 * 	uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move straight command to odometry
 */
uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	6b 97       	sbiw	r28, 0x1b	; 27
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	98 8f       	std	Y+24, r25	; 0x18
    189a:	8f 8b       	std	Y+23, r24	; 0x17
    189c:	69 8f       	std	Y+25, r22	; 0x19
    189e:	5b 8f       	std	Y+27, r21	; 0x1b
    18a0:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    18a2:	89 8d       	ldd	r24, Y+25	; 0x19
    18a4:	0e 94 10 0a 	call	0x1420	; 0x1420 <odometry_set_speed>
	buffer[0] = 'D';
    18a8:	84 e4       	ldi	r24, 0x44	; 68
    18aa:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    18ac:	8f 89       	ldd	r24, Y+23	; 0x17
    18ae:	98 8d       	ldd	r25, Y+24	; 0x18
    18b0:	89 2f       	mov	r24, r25
    18b2:	99 0f       	add	r25, r25
    18b4:	99 0b       	sbc	r25, r25
    18b6:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    18b8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ba:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    18bc:	72 c0       	rjmp	.+228    	; 0x19a2 <odometry_move_straight+0x11e>
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	a8 e4       	ldi	r26, 0x48	; 72
    18c4:	b2 e4       	ldi	r27, 0x42	; 66
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	9a 83       	std	Y+2, r25	; 0x02
    18ca:	ab 83       	std	Y+3, r26	; 0x03
    18cc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e4       	ldi	r19, 0x40	; 64
    18d2:	4c e1       	ldi	r20, 0x1C	; 28
    18d4:	55 e4       	ldi	r21, 0x45	; 69
    18d6:	69 81       	ldd	r22, Y+1	; 0x01
    18d8:	7a 81       	ldd	r23, Y+2	; 0x02
    18da:	8b 81       	ldd	r24, Y+3	; 0x03
    18dc:	9c 81       	ldd	r25, Y+4	; 0x04
    18de:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	8d 83       	std	Y+5, r24	; 0x05
    18e8:	9e 83       	std	Y+6, r25	; 0x06
    18ea:	af 83       	std	Y+7, r26	; 0x07
    18ec:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e8       	ldi	r20, 0x80	; 128
    18f4:	5f e3       	ldi	r21, 0x3F	; 63
    18f6:	6d 81       	ldd	r22, Y+5	; 0x05
    18f8:	7e 81       	ldd	r23, Y+6	; 0x06
    18fa:	8f 81       	ldd	r24, Y+7	; 0x07
    18fc:	98 85       	ldd	r25, Y+8	; 0x08
    18fe:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    1902:	88 23       	and	r24, r24
    1904:	2c f4       	brge	.+10     	; 0x1910 <odometry_move_straight+0x8c>
		__ticks = 1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9a 87       	std	Y+10, r25	; 0x0a
    190c:	89 87       	std	Y+9, r24	; 0x09
    190e:	3f c0       	rjmp	.+126    	; 0x198e <odometry_move_straight+0x10a>
	else if (__tmp > 65535)
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	3f ef       	ldi	r19, 0xFF	; 255
    1914:	4f e7       	ldi	r20, 0x7F	; 127
    1916:	57 e4       	ldi	r21, 0x47	; 71
    1918:	6d 81       	ldd	r22, Y+5	; 0x05
    191a:	7e 81       	ldd	r23, Y+6	; 0x06
    191c:	8f 81       	ldd	r24, Y+7	; 0x07
    191e:	98 85       	ldd	r25, Y+8	; 0x08
    1920:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    1924:	18 16       	cp	r1, r24
    1926:	4c f5       	brge	.+82     	; 0x197a <odometry_move_straight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e2       	ldi	r20, 0x20	; 32
    192e:	51 e4       	ldi	r21, 0x41	; 65
    1930:	69 81       	ldd	r22, Y+1	; 0x01
    1932:	7a 81       	ldd	r23, Y+2	; 0x02
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	9c 81       	ldd	r25, Y+4	; 0x04
    1938:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	bc 01       	movw	r22, r24
    1942:	cd 01       	movw	r24, r26
    1944:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	9a 87       	std	Y+10, r25	; 0x0a
    194e:	89 87       	std	Y+9, r24	; 0x09
    1950:	0f c0       	rjmp	.+30     	; 0x1970 <odometry_move_straight+0xec>
    1952:	8a ef       	ldi	r24, 0xFA	; 250
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	9c 87       	std	Y+12, r25	; 0x0c
    1958:	8b 87       	std	Y+11, r24	; 0x0b
    195a:	8b 85       	ldd	r24, Y+11	; 0x0b
    195c:	9c 85       	ldd	r25, Y+12	; 0x0c
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <odometry_move_straight+0xda>
    1962:	9c 87       	std	Y+12, r25	; 0x0c
    1964:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1966:	89 85       	ldd	r24, Y+9	; 0x09
    1968:	9a 85       	ldd	r25, Y+10	; 0x0a
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	9a 87       	std	Y+10, r25	; 0x0a
    196e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1970:	89 85       	ldd	r24, Y+9	; 0x09
    1972:	9a 85       	ldd	r25, Y+10	; 0x0a
    1974:	89 2b       	or	r24, r25
    1976:	69 f7       	brne	.-38     	; 0x1952 <odometry_move_straight+0xce>
    1978:	14 c0       	rjmp	.+40     	; 0x19a2 <odometry_move_straight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197a:	6d 81       	ldd	r22, Y+5	; 0x05
    197c:	7e 81       	ldd	r23, Y+6	; 0x06
    197e:	8f 81       	ldd	r24, Y+7	; 0x07
    1980:	98 85       	ldd	r25, Y+8	; 0x08
    1982:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	9a 87       	std	Y+10, r25	; 0x0a
    198c:	89 87       	std	Y+9, r24	; 0x09
    198e:	89 85       	ldd	r24, Y+9	; 0x09
    1990:	9a 85       	ldd	r25, Y+10	; 0x0a
    1992:	9e 87       	std	Y+14, r25	; 0x0e
    1994:	8d 87       	std	Y+13, r24	; 0x0d
    1996:	8d 85       	ldd	r24, Y+13	; 0x0d
    1998:	9e 85       	ldd	r25, Y+14	; 0x0e
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <odometry_move_straight+0x116>
    199e:	9e 87       	std	Y+14, r25	; 0x0e
    19a0:	8d 87       	std	Y+13, r24	; 0x0d
    19a2:	ce 01       	movw	r24, r28
    19a4:	0f 96       	adiw	r24, 0x0f	; 15
    19a6:	63 ec       	ldi	r22, 0xC3	; 195
    19a8:	0e 94 cd 06 	call	0xd9a	; 0xd9a <CAN_Write>
    19ac:	88 23       	and	r24, r24
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <odometry_move_straight+0x12e>
    19b0:	86 cf       	rjmp	.-244    	; 0x18be <odometry_move_straight+0x3a>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    19b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19b6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <odometry_wait_until_done>
}
    19ba:	6b 96       	adiw	r28, 0x1b	; 27
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	08 95       	ret

000019cc <odometry_move_to_position>:
 * 	uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move to position function to odometry
 */
uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, char (*callback)(uint32_t start_time))
{
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	6c 97       	sbiw	r28, 0x1c	; 28
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	98 8f       	std	Y+24, r25	; 0x18
    19e2:	8f 8b       	std	Y+23, r24	; 0x17
    19e4:	69 8f       	std	Y+25, r22	; 0x19
    19e6:	4a 8f       	std	Y+26, r20	; 0x1a
    19e8:	3c 8f       	std	Y+28, r19	; 0x1c
    19ea:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    19ec:	89 8d       	ldd	r24, Y+25	; 0x19
    19ee:	0e 94 10 0a 	call	0x1420	; 0x1420 <odometry_set_speed>

	buffer[0] = 'G';
    19f2:	87 e4       	ldi	r24, 0x47	; 71
    19f4:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    19f6:	8f 89       	ldd	r24, Y+23	; 0x17
    19f8:	98 8d       	ldd	r25, Y+24	; 0x18
    19fa:	fc 01       	movw	r30, r24
    19fc:	80 81       	ld	r24, Z
    19fe:	91 81       	ldd	r25, Z+1	; 0x01
    1a00:	89 2f       	mov	r24, r25
    1a02:	99 0f       	add	r25, r25
    1a04:	99 0b       	sbc	r25, r25
    1a06:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    1a08:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	80 81       	ld	r24, Z
    1a10:	91 81       	ldd	r25, Z+1	; 0x01
    1a12:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    1a14:	8f 89       	ldd	r24, Y+23	; 0x17
    1a16:	98 8d       	ldd	r25, Y+24	; 0x18
    1a18:	fc 01       	movw	r30, r24
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	89 2f       	mov	r24, r25
    1a20:	99 0f       	add	r25, r25
    1a22:	99 0b       	sbc	r25, r25
    1a24:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1a26:	8f 89       	ldd	r24, Y+23	; 0x17
    1a28:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    1a32:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    1a34:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a36:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1a38:	72 c0       	rjmp	.+228    	; 0x1b1e <odometry_move_to_position+0x152>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a8 e4       	ldi	r26, 0x48	; 72
    1a40:	b2 e4       	ldi	r27, 0x42	; 66
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	9a 83       	std	Y+2, r25	; 0x02
    1a46:	ab 83       	std	Y+3, r26	; 0x03
    1a48:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e4       	ldi	r19, 0x40	; 64
    1a4e:	4c e1       	ldi	r20, 0x1C	; 28
    1a50:	55 e4       	ldi	r21, 0x45	; 69
    1a52:	69 81       	ldd	r22, Y+1	; 0x01
    1a54:	7a 81       	ldd	r23, Y+2	; 0x02
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	9e 83       	std	Y+6, r25	; 0x06
    1a66:	af 83       	std	Y+7, r26	; 0x07
    1a68:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	6d 81       	ldd	r22, Y+5	; 0x05
    1a74:	7e 81       	ldd	r23, Y+6	; 0x06
    1a76:	8f 81       	ldd	r24, Y+7	; 0x07
    1a78:	98 85       	ldd	r25, Y+8	; 0x08
    1a7a:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	2c f4       	brge	.+10     	; 0x1a8c <odometry_move_to_position+0xc0>
		__ticks = 1;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9a 87       	std	Y+10, r25	; 0x0a
    1a88:	89 87       	std	Y+9, r24	; 0x09
    1a8a:	3f c0       	rjmp	.+126    	; 0x1b0a <odometry_move_to_position+0x13e>
	else if (__tmp > 65535)
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	3f ef       	ldi	r19, 0xFF	; 255
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	6d 81       	ldd	r22, Y+5	; 0x05
    1a96:	7e 81       	ldd	r23, Y+6	; 0x06
    1a98:	8f 81       	ldd	r24, Y+7	; 0x07
    1a9a:	98 85       	ldd	r25, Y+8	; 0x08
    1a9c:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    1aa0:	18 16       	cp	r1, r24
    1aa2:	4c f5       	brge	.+82     	; 0x1af6 <odometry_move_to_position+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e2       	ldi	r20, 0x20	; 32
    1aaa:	51 e4       	ldi	r21, 0x41	; 65
    1aac:	69 81       	ldd	r22, Y+1	; 0x01
    1aae:	7a 81       	ldd	r23, Y+2	; 0x02
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	bc 01       	movw	r22, r24
    1abe:	cd 01       	movw	r24, r26
    1ac0:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9a 87       	std	Y+10, r25	; 0x0a
    1aca:	89 87       	std	Y+9, r24	; 0x09
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <odometry_move_to_position+0x120>
    1ace:	8a ef       	ldi	r24, 0xFA	; 250
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9c 87       	std	Y+12, r25	; 0x0c
    1ad4:	8b 87       	std	Y+11, r24	; 0x0b
    1ad6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ad8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <odometry_move_to_position+0x10e>
    1ade:	9c 87       	std	Y+12, r25	; 0x0c
    1ae0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae2:	89 85       	ldd	r24, Y+9	; 0x09
    1ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	9a 87       	std	Y+10, r25	; 0x0a
    1aea:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aec:	89 85       	ldd	r24, Y+9	; 0x09
    1aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af0:	89 2b       	or	r24, r25
    1af2:	69 f7       	brne	.-38     	; 0x1ace <odometry_move_to_position+0x102>
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <odometry_move_to_position+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	6d 81       	ldd	r22, Y+5	; 0x05
    1af8:	7e 81       	ldd	r23, Y+6	; 0x06
    1afa:	8f 81       	ldd	r24, Y+7	; 0x07
    1afc:	98 85       	ldd	r25, Y+8	; 0x08
    1afe:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9a 87       	std	Y+10, r25	; 0x0a
    1b08:	89 87       	std	Y+9, r24	; 0x09
    1b0a:	89 85       	ldd	r24, Y+9	; 0x09
    1b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0e:	9e 87       	std	Y+14, r25	; 0x0e
    1b10:	8d 87       	std	Y+13, r24	; 0x0d
    1b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <odometry_move_to_position+0x14a>
    1b1a:	9e 87       	std	Y+14, r25	; 0x0e
    1b1c:	8d 87       	std	Y+13, r24	; 0x0d
    1b1e:	ce 01       	movw	r24, r28
    1b20:	0f 96       	adiw	r24, 0x0f	; 15
    1b22:	63 ec       	ldi	r22, 0xC3	; 195
    1b24:	0e 94 cd 06 	call	0xd9a	; 0xd9a <CAN_Write>
    1b28:	88 23       	and	r24, r24
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <odometry_move_to_position+0x162>
    1b2c:	86 cf       	rjmp	.-244    	; 0x1a3a <odometry_move_to_position+0x6e>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1b2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b32:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <odometry_wait_until_done>
}
    1b36:	6c 96       	adiw	r28, 0x1c	; 28
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	68 97       	sbiw	r28, 0x18	; 24
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	98 8f       	std	Y+24, r25	; 0x18
    1b5e:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    1b60:	89 e4       	ldi	r24, 0x49	; 73
    1b62:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    1b64:	8f 89       	ldd	r24, Y+23	; 0x17
    1b66:	98 8d       	ldd	r25, Y+24	; 0x18
    1b68:	fc 01       	movw	r30, r24
    1b6a:	80 81       	ld	r24, Z
    1b6c:	91 81       	ldd	r25, Z+1	; 0x01
    1b6e:	89 2f       	mov	r24, r25
    1b70:	99 0f       	add	r25, r25
    1b72:	99 0b       	sbc	r25, r25
    1b74:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    1b76:	8f 89       	ldd	r24, Y+23	; 0x17
    1b78:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	80 81       	ld	r24, Z
    1b7e:	91 81       	ldd	r25, Z+1	; 0x01
    1b80:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    1b82:	8f 89       	ldd	r24, Y+23	; 0x17
    1b84:	98 8d       	ldd	r25, Y+24	; 0x18
    1b86:	fc 01       	movw	r30, r24
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	89 2f       	mov	r24, r25
    1b8e:	99 0f       	add	r25, r25
    1b90:	99 0b       	sbc	r25, r25
    1b92:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    1b94:	8f 89       	ldd	r24, Y+23	; 0x17
    1b96:	98 8d       	ldd	r25, Y+24	; 0x18
    1b98:	fc 01       	movw	r30, r24
    1b9a:	82 81       	ldd	r24, Z+2	; 0x02
    1b9c:	93 81       	ldd	r25, Z+3	; 0x03
    1b9e:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    1ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	84 81       	ldd	r24, Z+4	; 0x04
    1ba8:	95 81       	ldd	r25, Z+5	; 0x05
    1baa:	89 2f       	mov	r24, r25
    1bac:	99 0f       	add	r25, r25
    1bae:	99 0b       	sbc	r25, r25
    1bb0:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    1bb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	84 81       	ldd	r24, Z+4	; 0x04
    1bba:	95 81       	ldd	r25, Z+5	; 0x05
    1bbc:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    1bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	80 81       	ld	r24, Z
    1bc6:	91 81       	ldd	r25, Z+1	; 0x01
    1bc8:	90 93 10 01 	sts	0x0110, r25
    1bcc:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = new_position->y;
    1bd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	82 81       	ldd	r24, Z+2	; 0x02
    1bd8:	93 81       	ldd	r25, Z+3	; 0x03
    1bda:	90 93 12 01 	sts	0x0112, r25
    1bde:	80 93 11 01 	sts	0x0111, r24
	position.angle = new_position->angle;
    1be2:	8f 89       	ldd	r24, Y+23	; 0x17
    1be4:	98 8d       	ldd	r25, Y+24	; 0x18
    1be6:	fc 01       	movw	r30, r24
    1be8:	84 81       	ldd	r24, Z+4	; 0x04
    1bea:	95 81       	ldd	r25, Z+5	; 0x05
    1bec:	90 93 14 01 	sts	0x0114, r25
    1bf0:	80 93 13 01 	sts	0x0113, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1bf4:	72 c0       	rjmp	.+228    	; 0x1cda <odometry_set_position+0x192>
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a8 e4       	ldi	r26, 0x48	; 72
    1bfc:	b2 e4       	ldi	r27, 0x42	; 66
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	ab 83       	std	Y+3, r26	; 0x03
    1c04:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e4       	ldi	r19, 0x40	; 64
    1c0a:	4c e1       	ldi	r20, 0x1C	; 28
    1c0c:	55 e4       	ldi	r21, 0x45	; 69
    1c0e:	69 81       	ldd	r22, Y+1	; 0x01
    1c10:	7a 81       	ldd	r23, Y+2	; 0x02
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	9c 81       	ldd	r25, Y+4	; 0x04
    1c16:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
    1c20:	9e 83       	std	Y+6, r25	; 0x06
    1c22:	af 83       	std	Y+7, r26	; 0x07
    1c24:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c30:	7e 81       	ldd	r23, Y+6	; 0x06
    1c32:	8f 81       	ldd	r24, Y+7	; 0x07
    1c34:	98 85       	ldd	r25, Y+8	; 0x08
    1c36:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    1c3a:	88 23       	and	r24, r24
    1c3c:	2c f4       	brge	.+10     	; 0x1c48 <odometry_set_position+0x100>
		__ticks = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9a 87       	std	Y+10, r25	; 0x0a
    1c44:	89 87       	std	Y+9, r24	; 0x09
    1c46:	3f c0       	rjmp	.+126    	; 0x1cc6 <odometry_set_position+0x17e>
	else if (__tmp > 65535)
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	4f e7       	ldi	r20, 0x7F	; 127
    1c4e:	57 e4       	ldi	r21, 0x47	; 71
    1c50:	6d 81       	ldd	r22, Y+5	; 0x05
    1c52:	7e 81       	ldd	r23, Y+6	; 0x06
    1c54:	8f 81       	ldd	r24, Y+7	; 0x07
    1c56:	98 85       	ldd	r25, Y+8	; 0x08
    1c58:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    1c5c:	18 16       	cp	r1, r24
    1c5e:	4c f5       	brge	.+82     	; 0x1cb2 <odometry_set_position+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	69 81       	ldd	r22, Y+1	; 0x01
    1c6a:	7a 81       	ldd	r23, Y+2	; 0x02
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	bc 01       	movw	r22, r24
    1c7a:	cd 01       	movw	r24, r26
    1c7c:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9a 87       	std	Y+10, r25	; 0x0a
    1c86:	89 87       	std	Y+9, r24	; 0x09
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <odometry_set_position+0x160>
    1c8a:	8a ef       	ldi	r24, 0xFA	; 250
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9c 87       	std	Y+12, r25	; 0x0c
    1c90:	8b 87       	std	Y+11, r24	; 0x0b
    1c92:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c94:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <odometry_set_position+0x14e>
    1c9a:	9c 87       	std	Y+12, r25	; 0x0c
    1c9c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	9a 87       	std	Y+10, r25	; 0x0a
    1ca6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca8:	89 85       	ldd	r24, Y+9	; 0x09
    1caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cac:	89 2b       	or	r24, r25
    1cae:	69 f7       	brne	.-38     	; 0x1c8a <odometry_set_position+0x142>
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <odometry_set_position+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb2:	6d 81       	ldd	r22, Y+5	; 0x05
    1cb4:	7e 81       	ldd	r23, Y+6	; 0x06
    1cb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb8:	98 85       	ldd	r25, Y+8	; 0x08
    1cba:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9a 87       	std	Y+10, r25	; 0x0a
    1cc4:	89 87       	std	Y+9, r24	; 0x09
    1cc6:	89 85       	ldd	r24, Y+9	; 0x09
    1cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cca:	9e 87       	std	Y+14, r25	; 0x0e
    1ccc:	8d 87       	std	Y+13, r24	; 0x0d
    1cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <odometry_set_position+0x18a>
    1cd6:	9e 87       	std	Y+14, r25	; 0x0e
    1cd8:	8d 87       	std	Y+13, r24	; 0x0d
    1cda:	ce 01       	movw	r24, r28
    1cdc:	0f 96       	adiw	r24, 0x0f	; 15
    1cde:	63 ec       	ldi	r22, 0xC3	; 195
    1ce0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <CAN_Write>
    1ce4:	88 23       	and	r24, r24
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <odometry_set_position+0x1a2>
    1ce8:	86 cf       	rjmp	.-244    	; 0x1bf6 <odometry_set_position+0xae>
		_delay_ms(50);
}
    1cea:	68 96       	adiw	r28, 0x18	; 24
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	08 95       	ret

00001cfc <odometry_rotate_for>:
 * 	uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send rotate for command to odometry board
 */
uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	6b 97       	sbiw	r28, 0x1b	; 27
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	98 8f       	std	Y+24, r25	; 0x18
    1d12:	8f 8b       	std	Y+23, r24	; 0x17
    1d14:	69 8f       	std	Y+25, r22	; 0x19
    1d16:	5b 8f       	std	Y+27, r21	; 0x1b
    1d18:	4a 8f       	std	Y+26, r20	; 0x1a

	uint8_t buffer[8];
	odometry_set_speed(speed);
    1d1a:	89 8d       	ldd	r24, Y+25	; 0x19
    1d1c:	0e 94 10 0a 	call	0x1420	; 0x1420 <odometry_set_speed>

	buffer[0] = 'T';
    1d20:	84 e5       	ldi	r24, 0x54	; 84
    1d22:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1d24:	8f 89       	ldd	r24, Y+23	; 0x17
    1d26:	98 8d       	ldd	r25, Y+24	; 0x18
    1d28:	89 2f       	mov	r24, r25
    1d2a:	99 27       	eor	r25, r25
    1d2c:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d30:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1d32:	72 c0       	rjmp	.+228    	; 0x1e18 <odometry_rotate_for+0x11c>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	a8 e4       	ldi	r26, 0x48	; 72
    1d3a:	b2 e4       	ldi	r27, 0x42	; 66
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	ab 83       	std	Y+3, r26	; 0x03
    1d42:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e4       	ldi	r19, 0x40	; 64
    1d48:	4c e1       	ldi	r20, 0x1C	; 28
    1d4a:	55 e4       	ldi	r21, 0x45	; 69
    1d4c:	69 81       	ldd	r22, Y+1	; 0x01
    1d4e:	7a 81       	ldd	r23, Y+2	; 0x02
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	af 83       	std	Y+7, r26	; 0x07
    1d62:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e8       	ldi	r20, 0x80	; 128
    1d6a:	5f e3       	ldi	r21, 0x3F	; 63
    1d6c:	6d 81       	ldd	r22, Y+5	; 0x05
    1d6e:	7e 81       	ldd	r23, Y+6	; 0x06
    1d70:	8f 81       	ldd	r24, Y+7	; 0x07
    1d72:	98 85       	ldd	r25, Y+8	; 0x08
    1d74:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    1d78:	88 23       	and	r24, r24
    1d7a:	2c f4       	brge	.+10     	; 0x1d86 <odometry_rotate_for+0x8a>
		__ticks = 1;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9a 87       	std	Y+10, r25	; 0x0a
    1d82:	89 87       	std	Y+9, r24	; 0x09
    1d84:	3f c0       	rjmp	.+126    	; 0x1e04 <odometry_rotate_for+0x108>
	else if (__tmp > 65535)
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	3f ef       	ldi	r19, 0xFF	; 255
    1d8a:	4f e7       	ldi	r20, 0x7F	; 127
    1d8c:	57 e4       	ldi	r21, 0x47	; 71
    1d8e:	6d 81       	ldd	r22, Y+5	; 0x05
    1d90:	7e 81       	ldd	r23, Y+6	; 0x06
    1d92:	8f 81       	ldd	r24, Y+7	; 0x07
    1d94:	98 85       	ldd	r25, Y+8	; 0x08
    1d96:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    1d9a:	18 16       	cp	r1, r24
    1d9c:	4c f5       	brge	.+82     	; 0x1df0 <odometry_rotate_for+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e2       	ldi	r20, 0x20	; 32
    1da4:	51 e4       	ldi	r21, 0x41	; 65
    1da6:	69 81       	ldd	r22, Y+1	; 0x01
    1da8:	7a 81       	ldd	r23, Y+2	; 0x02
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	9a 87       	std	Y+10, r25	; 0x0a
    1dc4:	89 87       	std	Y+9, r24	; 0x09
    1dc6:	0f c0       	rjmp	.+30     	; 0x1de6 <odometry_rotate_for+0xea>
    1dc8:	8a ef       	ldi	r24, 0xFA	; 250
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9c 87       	std	Y+12, r25	; 0x0c
    1dce:	8b 87       	std	Y+11, r24	; 0x0b
    1dd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <odometry_rotate_for+0xd8>
    1dd8:	9c 87       	std	Y+12, r25	; 0x0c
    1dda:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	9a 87       	std	Y+10, r25	; 0x0a
    1de4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de6:	89 85       	ldd	r24, Y+9	; 0x09
    1de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dea:	89 2b       	or	r24, r25
    1dec:	69 f7       	brne	.-38     	; 0x1dc8 <odometry_rotate_for+0xcc>
    1dee:	14 c0       	rjmp	.+40     	; 0x1e18 <odometry_rotate_for+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df0:	6d 81       	ldd	r22, Y+5	; 0x05
    1df2:	7e 81       	ldd	r23, Y+6	; 0x06
    1df4:	8f 81       	ldd	r24, Y+7	; 0x07
    1df6:	98 85       	ldd	r25, Y+8	; 0x08
    1df8:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9a 87       	std	Y+10, r25	; 0x0a
    1e02:	89 87       	std	Y+9, r24	; 0x09
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e08:	9e 87       	std	Y+14, r25	; 0x0e
    1e0a:	8d 87       	std	Y+13, r24	; 0x0d
    1e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <odometry_rotate_for+0x114>
    1e14:	9e 87       	std	Y+14, r25	; 0x0e
    1e16:	8d 87       	std	Y+13, r24	; 0x0d
    1e18:	ce 01       	movw	r24, r28
    1e1a:	0f 96       	adiw	r24, 0x0f	; 15
    1e1c:	63 ec       	ldi	r22, 0xC3	; 195
    1e1e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <CAN_Write>
    1e22:	88 23       	and	r24, r24
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <odometry_rotate_for+0x12c>
    1e26:	86 cf       	rjmp	.-244    	; 0x1d34 <odometry_rotate_for+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1e28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e2a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e2c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <odometry_wait_until_done>

}
    1e30:	6b 96       	adiw	r28, 0x1b	; 27
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	08 95       	ret

00001e42 <odometry_set_angle>:
 * 	uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Set angle for odometry
 */
uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	6b 97       	sbiw	r28, 0x1b	; 27
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	98 8f       	std	Y+24, r25	; 0x18
    1e58:	8f 8b       	std	Y+23, r24	; 0x17
    1e5a:	69 8f       	std	Y+25, r22	; 0x19
    1e5c:	5b 8f       	std	Y+27, r21	; 0x1b
    1e5e:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1e60:	89 8d       	ldd	r24, Y+25	; 0x19
    1e62:	0e 94 10 0a 	call	0x1420	; 0x1420 <odometry_set_speed>

	buffer[0] = 'A';
    1e66:	81 e4       	ldi	r24, 0x41	; 65
    1e68:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1e6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6e:	89 2f       	mov	r24, r25
    1e70:	99 27       	eor	r25, r25
    1e72:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1e74:	8f 89       	ldd	r24, Y+23	; 0x17
    1e76:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1e78:	72 c0       	rjmp	.+228    	; 0x1f5e <odometry_set_angle+0x11c>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a8 e4       	ldi	r26, 0x48	; 72
    1e80:	b2 e4       	ldi	r27, 0x42	; 66
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	ab 83       	std	Y+3, r26	; 0x03
    1e88:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e4       	ldi	r19, 0x40	; 64
    1e8e:	4c e1       	ldi	r20, 0x1C	; 28
    1e90:	55 e4       	ldi	r21, 0x45	; 69
    1e92:	69 81       	ldd	r22, Y+1	; 0x01
    1e94:	7a 81       	ldd	r23, Y+2	; 0x02
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	af 83       	std	Y+7, r26	; 0x07
    1ea8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e8       	ldi	r20, 0x80	; 128
    1eb0:	5f e3       	ldi	r21, 0x3F	; 63
    1eb2:	6d 81       	ldd	r22, Y+5	; 0x05
    1eb4:	7e 81       	ldd	r23, Y+6	; 0x06
    1eb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb8:	98 85       	ldd	r25, Y+8	; 0x08
    1eba:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <odometry_set_angle+0x8a>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9a 87       	std	Y+10, r25	; 0x0a
    1ec8:	89 87       	std	Y+9, r24	; 0x09
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <odometry_set_angle+0x108>
	else if (__tmp > 65535)
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	3f ef       	ldi	r19, 0xFF	; 255
    1ed0:	4f e7       	ldi	r20, 0x7F	; 127
    1ed2:	57 e4       	ldi	r21, 0x47	; 71
    1ed4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ed6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ed8:	8f 81       	ldd	r24, Y+7	; 0x07
    1eda:	98 85       	ldd	r25, Y+8	; 0x08
    1edc:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <odometry_set_angle+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e2       	ldi	r20, 0x20	; 32
    1eea:	51 e4       	ldi	r21, 0x41	; 65
    1eec:	69 81       	ldd	r22, Y+1	; 0x01
    1eee:	7a 81       	ldd	r23, Y+2	; 0x02
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef4:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9a 87       	std	Y+10, r25	; 0x0a
    1f0a:	89 87       	std	Y+9, r24	; 0x09
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <odometry_set_angle+0xea>
    1f0e:	8a ef       	ldi	r24, 0xFA	; 250
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9c 87       	std	Y+12, r25	; 0x0c
    1f14:	8b 87       	std	Y+11, r24	; 0x0b
    1f16:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f18:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <odometry_set_angle+0xd8>
    1f1e:	9c 87       	std	Y+12, r25	; 0x0c
    1f20:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	89 85       	ldd	r24, Y+9	; 0x09
    1f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	9a 87       	std	Y+10, r25	; 0x0a
    1f2a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	89 85       	ldd	r24, Y+9	; 0x09
    1f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f30:	89 2b       	or	r24, r25
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <odometry_set_angle+0xcc>
    1f34:	14 c0       	rjmp	.+40     	; 0x1f5e <odometry_set_angle+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	6d 81       	ldd	r22, Y+5	; 0x05
    1f38:	7e 81       	ldd	r23, Y+6	; 0x06
    1f3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3c:	98 85       	ldd	r25, Y+8	; 0x08
    1f3e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9a 87       	std	Y+10, r25	; 0x0a
    1f48:	89 87       	std	Y+9, r24	; 0x09
    1f4a:	89 85       	ldd	r24, Y+9	; 0x09
    1f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4e:	9e 87       	std	Y+14, r25	; 0x0e
    1f50:	8d 87       	std	Y+13, r24	; 0x0d
    1f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <odometry_set_angle+0x114>
    1f5a:	9e 87       	std	Y+14, r25	; 0x0e
    1f5c:	8d 87       	std	Y+13, r24	; 0x0d
    1f5e:	ce 01       	movw	r24, r28
    1f60:	0f 96       	adiw	r24, 0x0f	; 15
    1f62:	63 ec       	ldi	r22, 0xC3	; 195
    1f64:	0e 94 cd 06 	call	0xd9a	; 0xd9a <CAN_Write>
    1f68:	88 23       	and	r24, r24
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <odometry_set_angle+0x12c>
    1f6c:	86 cf       	rjmp	.-244    	; 0x1e7a <odometry_set_angle+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1f6e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f70:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f72:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <odometry_wait_until_done>
}
    1f76:	6b 96       	adiw	r28, 0x1b	; 27
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	08 95       	ret

00001f88 <odometry_kurva>:

uint8_t odometry_kurva(uint16_t x_pos, uint16_t y_pos, int8_t angle, uint8_t direction, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1f88:	ef 92       	push	r14
    1f8a:	ff 92       	push	r15
    1f8c:	0f 93       	push	r16
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	6f 97       	sbiw	r28, 0x1f	; 31
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	98 8f       	std	Y+24, r25	; 0x18
    1fa4:	8f 8b       	std	Y+23, r24	; 0x17
    1fa6:	7a 8f       	std	Y+26, r23	; 0x1a
    1fa8:	69 8f       	std	Y+25, r22	; 0x19
    1faa:	4b 8f       	std	Y+27, r20	; 0x1b
    1fac:	2c 8f       	std	Y+28, r18	; 0x1c
    1fae:	0d 8f       	std	Y+29, r16	; 0x1d
    1fb0:	ff 8e       	std	Y+31, r15	; 0x1f
    1fb2:	ee 8e       	std	Y+30, r14	; 0x1e
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1fb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fb6:	0e 94 10 0a 	call	0x1420	; 0x1420 <odometry_set_speed>

	buffer[0] = 'Q';
    1fba:	81 e5       	ldi	r24, 0x51	; 81
    1fbc:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = x_pos >> 8;
    1fbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc2:	89 2f       	mov	r24, r25
    1fc4:	99 27       	eor	r25, r25
    1fc6:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = x_pos & 0xFF;
    1fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fca:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = y_pos >> 8;
    1fcc:	89 8d       	ldd	r24, Y+25	; 0x19
    1fce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fd0:	89 2f       	mov	r24, r25
    1fd2:	99 27       	eor	r25, r25
    1fd4:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = y_pos & 0xFF;
    1fd6:	89 8d       	ldd	r24, Y+25	; 0x19
    1fd8:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = angle >> 8;
    1fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fdc:	08 2e       	mov	r0, r24
    1fde:	00 0c       	add	r0, r0
    1fe0:	99 0b       	sbc	r25, r25
    1fe2:	89 2f       	mov	r24, r25
    1fe4:	99 0f       	add	r25, r25
    1fe6:	99 0b       	sbc	r25, r25
    1fe8:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = angle & 0xFF;
    1fea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fec:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[7] = direction;
    1fee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ff0:	8e 8b       	std	Y+22, r24	; 0x16

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1ff2:	72 c0       	rjmp	.+228    	; 0x20d8 <odometry_kurva+0x150>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	a8 e4       	ldi	r26, 0x48	; 72
    1ffa:	b2 e4       	ldi	r27, 0x42	; 66
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	ab 83       	std	Y+3, r26	; 0x03
    2002:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e4       	ldi	r19, 0x40	; 64
    2008:	4c e1       	ldi	r20, 0x1C	; 28
    200a:	55 e4       	ldi	r21, 0x45	; 69
    200c:	69 81       	ldd	r22, Y+1	; 0x01
    200e:	7a 81       	ldd	r23, Y+2	; 0x02
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	9c 81       	ldd	r25, Y+4	; 0x04
    2014:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	9e 83       	std	Y+6, r25	; 0x06
    2020:	af 83       	std	Y+7, r26	; 0x07
    2022:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e8       	ldi	r20, 0x80	; 128
    202a:	5f e3       	ldi	r21, 0x3F	; 63
    202c:	6d 81       	ldd	r22, Y+5	; 0x05
    202e:	7e 81       	ldd	r23, Y+6	; 0x06
    2030:	8f 81       	ldd	r24, Y+7	; 0x07
    2032:	98 85       	ldd	r25, Y+8	; 0x08
    2034:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    2038:	88 23       	and	r24, r24
    203a:	2c f4       	brge	.+10     	; 0x2046 <odometry_kurva+0xbe>
		__ticks = 1;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9a 87       	std	Y+10, r25	; 0x0a
    2042:	89 87       	std	Y+9, r24	; 0x09
    2044:	3f c0       	rjmp	.+126    	; 0x20c4 <odometry_kurva+0x13c>
	else if (__tmp > 65535)
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	3f ef       	ldi	r19, 0xFF	; 255
    204a:	4f e7       	ldi	r20, 0x7F	; 127
    204c:	57 e4       	ldi	r21, 0x47	; 71
    204e:	6d 81       	ldd	r22, Y+5	; 0x05
    2050:	7e 81       	ldd	r23, Y+6	; 0x06
    2052:	8f 81       	ldd	r24, Y+7	; 0x07
    2054:	98 85       	ldd	r25, Y+8	; 0x08
    2056:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    205a:	18 16       	cp	r1, r24
    205c:	4c f5       	brge	.+82     	; 0x20b0 <odometry_kurva+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e2       	ldi	r20, 0x20	; 32
    2064:	51 e4       	ldi	r21, 0x41	; 65
    2066:	69 81       	ldd	r22, Y+1	; 0x01
    2068:	7a 81       	ldd	r23, Y+2	; 0x02
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	bc 01       	movw	r22, r24
    2078:	cd 01       	movw	r24, r26
    207a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	9a 87       	std	Y+10, r25	; 0x0a
    2084:	89 87       	std	Y+9, r24	; 0x09
    2086:	0f c0       	rjmp	.+30     	; 0x20a6 <odometry_kurva+0x11e>
    2088:	8a ef       	ldi	r24, 0xFA	; 250
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	9c 87       	std	Y+12, r25	; 0x0c
    208e:	8b 87       	std	Y+11, r24	; 0x0b
    2090:	8b 85       	ldd	r24, Y+11	; 0x0b
    2092:	9c 85       	ldd	r25, Y+12	; 0x0c
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <odometry_kurva+0x10c>
    2098:	9c 87       	std	Y+12, r25	; 0x0c
    209a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	9a 87       	std	Y+10, r25	; 0x0a
    20a4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a6:	89 85       	ldd	r24, Y+9	; 0x09
    20a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20aa:	89 2b       	or	r24, r25
    20ac:	69 f7       	brne	.-38     	; 0x2088 <odometry_kurva+0x100>
    20ae:	14 c0       	rjmp	.+40     	; 0x20d8 <odometry_kurva+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b0:	6d 81       	ldd	r22, Y+5	; 0x05
    20b2:	7e 81       	ldd	r23, Y+6	; 0x06
    20b4:	8f 81       	ldd	r24, Y+7	; 0x07
    20b6:	98 85       	ldd	r25, Y+8	; 0x08
    20b8:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	9a 87       	std	Y+10, r25	; 0x0a
    20c2:	89 87       	std	Y+9, r24	; 0x09
    20c4:	89 85       	ldd	r24, Y+9	; 0x09
    20c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c8:	9e 87       	std	Y+14, r25	; 0x0e
    20ca:	8d 87       	std	Y+13, r24	; 0x0d
    20cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <odometry_kurva+0x148>
    20d4:	9e 87       	std	Y+14, r25	; 0x0e
    20d6:	8d 87       	std	Y+13, r24	; 0x0d
    20d8:	ce 01       	movw	r24, r28
    20da:	0f 96       	adiw	r24, 0x0f	; 15
    20dc:	63 ec       	ldi	r22, 0xC3	; 195
    20de:	0e 94 cd 06 	call	0xd9a	; 0xd9a <CAN_Write>
    20e2:	88 23       	and	r24, r24
    20e4:	09 f0       	breq	.+2      	; 0x20e8 <odometry_kurva+0x160>
    20e6:	86 cf       	rjmp	.-244    	; 0x1ff4 <odometry_kurva+0x6c>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    20e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20ec:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <odometry_wait_until_done>
}
    20f0:	6f 96       	adiw	r28, 0x1f	; 31
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	0f 91       	pop	r16
    2102:	ff 90       	pop	r15
    2104:	ef 90       	pop	r14
    2106:	08 95       	ret

00002108 <odometry_match_end>:

void odometry_match_end(void)
{
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	66 97       	sbiw	r28, 0x16	; 22
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];

	buffer[0] = 'K';
    211c:	8b e4       	ldi	r24, 0x4B	; 75
    211e:	8f 87       	std	Y+15, r24	; 0x0f

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2120:	72 c0       	rjmp	.+228    	; 0x2206 <odometry_match_end+0xfe>
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a8 e4       	ldi	r26, 0x48	; 72
    2128:	b2 e4       	ldi	r27, 0x42	; 66
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	ab 83       	std	Y+3, r26	; 0x03
    2130:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e4       	ldi	r19, 0x40	; 64
    2136:	4c e1       	ldi	r20, 0x1C	; 28
    2138:	55 e4       	ldi	r21, 0x45	; 69
    213a:	69 81       	ldd	r22, Y+1	; 0x01
    213c:	7a 81       	ldd	r23, Y+2	; 0x02
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	8d 83       	std	Y+5, r24	; 0x05
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	af 83       	std	Y+7, r26	; 0x07
    2150:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	6d 81       	ldd	r22, Y+5	; 0x05
    215c:	7e 81       	ldd	r23, Y+6	; 0x06
    215e:	8f 81       	ldd	r24, Y+7	; 0x07
    2160:	98 85       	ldd	r25, Y+8	; 0x08
    2162:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    2166:	88 23       	and	r24, r24
    2168:	2c f4       	brge	.+10     	; 0x2174 <odometry_match_end+0x6c>
		__ticks = 1;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9a 87       	std	Y+10, r25	; 0x0a
    2170:	89 87       	std	Y+9, r24	; 0x09
    2172:	3f c0       	rjmp	.+126    	; 0x21f2 <odometry_match_end+0xea>
	else if (__tmp > 65535)
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	3f ef       	ldi	r19, 0xFF	; 255
    2178:	4f e7       	ldi	r20, 0x7F	; 127
    217a:	57 e4       	ldi	r21, 0x47	; 71
    217c:	6d 81       	ldd	r22, Y+5	; 0x05
    217e:	7e 81       	ldd	r23, Y+6	; 0x06
    2180:	8f 81       	ldd	r24, Y+7	; 0x07
    2182:	98 85       	ldd	r25, Y+8	; 0x08
    2184:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    2188:	18 16       	cp	r1, r24
    218a:	4c f5       	brge	.+82     	; 0x21de <odometry_match_end+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e2       	ldi	r20, 0x20	; 32
    2192:	51 e4       	ldi	r21, 0x41	; 65
    2194:	69 81       	ldd	r22, Y+1	; 0x01
    2196:	7a 81       	ldd	r23, Y+2	; 0x02
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	9c 81       	ldd	r25, Y+4	; 0x04
    219c:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	9a 87       	std	Y+10, r25	; 0x0a
    21b2:	89 87       	std	Y+9, r24	; 0x09
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <odometry_match_end+0xcc>
    21b6:	8a ef       	ldi	r24, 0xFA	; 250
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9c 87       	std	Y+12, r25	; 0x0c
    21bc:	8b 87       	std	Y+11, r24	; 0x0b
    21be:	8b 85       	ldd	r24, Y+11	; 0x0b
    21c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <odometry_match_end+0xba>
    21c6:	9c 87       	std	Y+12, r25	; 0x0c
    21c8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ca:	89 85       	ldd	r24, Y+9	; 0x09
    21cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	9a 87       	std	Y+10, r25	; 0x0a
    21d2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d4:	89 85       	ldd	r24, Y+9	; 0x09
    21d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d8:	89 2b       	or	r24, r25
    21da:	69 f7       	brne	.-38     	; 0x21b6 <odometry_match_end+0xae>
    21dc:	14 c0       	rjmp	.+40     	; 0x2206 <odometry_match_end+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21de:	6d 81       	ldd	r22, Y+5	; 0x05
    21e0:	7e 81       	ldd	r23, Y+6	; 0x06
    21e2:	8f 81       	ldd	r24, Y+7	; 0x07
    21e4:	98 85       	ldd	r25, Y+8	; 0x08
    21e6:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9a 87       	std	Y+10, r25	; 0x0a
    21f0:	89 87       	std	Y+9, r24	; 0x09
    21f2:	89 85       	ldd	r24, Y+9	; 0x09
    21f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f6:	9e 87       	std	Y+14, r25	; 0x0e
    21f8:	8d 87       	std	Y+13, r24	; 0x0d
    21fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <odometry_match_end+0xf6>
    2202:	9e 87       	std	Y+14, r25	; 0x0e
    2204:	8d 87       	std	Y+13, r24	; 0x0d
    2206:	ce 01       	movw	r24, r28
    2208:	0f 96       	adiw	r24, 0x0f	; 15
    220a:	63 ec       	ldi	r22, 0xC3	; 195
    220c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <CAN_Write>
    2210:	88 23       	and	r24, r24
    2212:	09 f0       	breq	.+2      	; 0x2216 <odometry_match_end+0x10e>
    2214:	86 cf       	rjmp	.-244    	; 0x2122 <odometry_match_end+0x1a>
			_delay_ms(50);

}
    2216:	66 96       	adiw	r28, 0x16	; 22
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	08 95       	ret

00002228 <getState>:

/*
 * 	Update position
 */
uint8_t getState(void)
{
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2230:	0e 94 ac 0a 	call	0x1558	; 0x1558 <odometry_query_position>
	return position.state;
    2234:	80 91 15 01 	lds	r24, 0x0115
}
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	08 95       	ret

0000223e <odometry_get_x>:

int16_t odometry_get_x(void)
{
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2246:	0e 94 ac 0a 	call	0x1558	; 0x1558 <odometry_query_position>
	return position.x;
    224a:	80 91 0f 01 	lds	r24, 0x010F
    224e:	90 91 10 01 	lds	r25, 0x0110
}
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	08 95       	ret

00002258 <odometry_get_y>:

int16_t odometry_get_y(void)
{
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2260:	0e 94 ac 0a 	call	0x1558	; 0x1558 <odometry_query_position>
	return position.y;
    2264:	80 91 11 01 	lds	r24, 0x0111
    2268:	90 91 12 01 	lds	r25, 0x0112
}
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	08 95       	ret

00002272 <odometry_get_angle>:

int16_t odometry_get_angle(void)
{
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    227a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <odometry_query_position>
	return position.angle;
    227e:	80 91 13 01 	lds	r24, 0x0113
    2282:	90 91 14 01 	lds	r25, 0x0114
}
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	08 95       	ret

0000228c <timer_register_callback>:
 *	Function: 		void timer_register_callback(void (*callback)(void))
 *	Parameters: 	void (*callback)(void))
 *	Description: 	timer callbacks
 */
void timer_register_callback(void (*callback)(void))
{
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	00 d0       	rcall	.+0      	; 0x2292 <timer_register_callback+0x6>
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	90 93 6b 01 	sts	0x016B, r25
    22a2:	80 93 6a 01 	sts	0x016A, r24
}
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	08 95       	ret

000022b0 <timer_init>:
 *	Function: 		void timer_init(unsigned int freq)
 *	Parameters: 	unsigned int freq - frequency of timer
 *	Description: 	setup timer
 */
void timer_init(unsigned int freq)
{
    22b0:	0f 93       	push	r16
    22b2:	1f 93       	push	r17
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <timer_init+0xa>
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	9a 83       	std	Y+2, r25	; 0x02
    22c0:	89 83       	std	Y+1, r24	; 0x01

    TCCR1A = 0;
    22c2:	80 e8       	ldi	r24, 0x80	; 128
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	fc 01       	movw	r30, r24
    22c8:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    22ca:	81 e8       	ldi	r24, 0x81	; 129
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	29 e0       	ldi	r18, 0x09	; 9
    22d0:	fc 01       	movw	r30, r24
    22d2:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    22d4:	08 e8       	ldi	r16, 0x88	; 136
    22d6:	10 e0       	ldi	r17, 0x00	; 0
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	9a 81       	ldd	r25, Y+2	; 0x02
    22dc:	cc 01       	movw	r24, r24
    22de:	a0 e0       	ldi	r26, 0x00	; 0
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__floatunsisf>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9c 01       	movw	r18, r24
    22f0:	ad 01       	movw	r20, r26
    22f2:	60 e8       	ldi	r22, 0x80	; 128
    22f4:	76 e9       	ldi	r23, 0x96	; 150
    22f6:	88 e1       	ldi	r24, 0x18	; 24
    22f8:	9b e4       	ldi	r25, 0x4B	; 75
    22fa:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__divsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	5f e3       	ldi	r21, 0x3F	; 63
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__addsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	bc 01       	movw	r22, r24
    2318:	cd 01       	movw	r24, r26
    231a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	f8 01       	movw	r30, r16
    2324:	91 83       	std	Z+1, r25	; 0x01
    2326:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2328:	8f e6       	ldi	r24, 0x6F	; 111
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	22 e0       	ldi	r18, 0x02	; 2
    232e:	fc 01       	movw	r30, r24
    2330:	20 83       	st	Z, r18

	SREG |= 0x80;
    2332:	8f e5       	ldi	r24, 0x5F	; 95
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	2f e5       	ldi	r18, 0x5F	; 95
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	f9 01       	movw	r30, r18
    233c:	20 81       	ld	r18, Z
    233e:	20 68       	ori	r18, 0x80	; 128
    2340:	fc 01       	movw	r30, r24
    2342:	20 83       	st	Z, r18
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	08 95       	ret

00002352 <__vector_12>:
/*
 *	Function: 		ISR(TIMER1_COMPA_vect)
 *	Description: 	ISR interrupt for timer
 */
ISR(TIMER1_COMPA_vect)
{
    2352:	1f 92       	push	r1
    2354:	0f 92       	push	r0
    2356:	00 90 5f 00 	lds	r0, 0x005F
    235a:	0f 92       	push	r0
    235c:	11 24       	eor	r1, r1
    235e:	00 90 5b 00 	lds	r0, 0x005B
    2362:	0f 92       	push	r0
    2364:	2f 93       	push	r18
    2366:	3f 93       	push	r19
    2368:	4f 93       	push	r20
    236a:	5f 93       	push	r21
    236c:	6f 93       	push	r22
    236e:	7f 93       	push	r23
    2370:	8f 93       	push	r24
    2372:	9f 93       	push	r25
    2374:	af 93       	push	r26
    2376:	bf 93       	push	r27
    2378:	ef 93       	push	r30
    237a:	ff 93       	push	r31
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	2e 97       	sbiw	r28, 0x0e	; 14
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	cd bf       	out	0x3d, r28	; 61
    if(timer_callback != NULL)
    238a:	80 91 6a 01 	lds	r24, 0x016A
    238e:	90 91 6b 01 	lds	r25, 0x016B
    2392:	89 2b       	or	r24, r25
    2394:	31 f0       	breq	.+12     	; 0x23a2 <__vector_12+0x50>
        timer_callback();
    2396:	80 91 6a 01 	lds	r24, 0x016A
    239a:	90 91 6b 01 	lds	r25, 0x016B
    239e:	fc 01       	movw	r30, r24
    23a0:	09 95       	icall
	if(sys_time >= 90000)					// if match end
    23a2:	80 91 65 01 	lds	r24, 0x0165
    23a6:	90 91 66 01 	lds	r25, 0x0166
    23aa:	a0 91 67 01 	lds	r26, 0x0167
    23ae:	b0 91 68 01 	lds	r27, 0x0168
    23b2:	80 39       	cpi	r24, 0x90	; 144
    23b4:	9f 45       	sbci	r25, 0x5F	; 95
    23b6:	a1 40       	sbci	r26, 0x01	; 1
    23b8:	b1 05       	cpc	r27, r1
    23ba:	08 f4       	brcc	.+2      	; 0x23be <__vector_12+0x6c>
    23bc:	83 c0       	rjmp	.+262    	; 0x24c4 <__vector_12+0x172>
	{
		if(system_get_match_started())		// if the match has started before
    23be:	0e 94 bc 12 	call	0x2578	; 0x2578 <system_get_match_started>
    23c2:	88 23       	and	r24, r24
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <__vector_12+0x76>
    23c6:	7e c0       	rjmp	.+252    	; 0x24c4 <__vector_12+0x172>
		{
			odometry_match_end();
    23c8:	0e 94 84 10 	call	0x2108	; 0x2108 <odometry_match_end>
			while(1) {
				PORTG = ~PORTG;
    23cc:	84 e3       	ldi	r24, 0x34	; 52
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	24 e3       	ldi	r18, 0x34	; 52
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	f9 01       	movw	r30, r18
    23d6:	20 81       	ld	r18, Z
    23d8:	20 95       	com	r18
    23da:	fc 01       	movw	r30, r24
    23dc:	20 83       	st	Z, r18
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	aa e7       	ldi	r26, 0x7A	; 122
    23e4:	b4 e4       	ldi	r27, 0x44	; 68
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	9a 83       	std	Y+2, r25	; 0x02
    23ea:	ab 83       	std	Y+3, r26	; 0x03
    23ec:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e4       	ldi	r19, 0x40	; 64
    23f2:	4c e1       	ldi	r20, 0x1C	; 28
    23f4:	55 e4       	ldi	r21, 0x45	; 69
    23f6:	69 81       	ldd	r22, Y+1	; 0x01
    23f8:	7a 81       	ldd	r23, Y+2	; 0x02
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	8d 83       	std	Y+5, r24	; 0x05
    2408:	9e 83       	std	Y+6, r25	; 0x06
    240a:	af 83       	std	Y+7, r26	; 0x07
    240c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e8       	ldi	r20, 0x80	; 128
    2414:	5f e3       	ldi	r21, 0x3F	; 63
    2416:	6d 81       	ldd	r22, Y+5	; 0x05
    2418:	7e 81       	ldd	r23, Y+6	; 0x06
    241a:	8f 81       	ldd	r24, Y+7	; 0x07
    241c:	98 85       	ldd	r25, Y+8	; 0x08
    241e:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    2422:	88 23       	and	r24, r24
    2424:	2c f4       	brge	.+10     	; 0x2430 <__vector_12+0xde>
		__ticks = 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9a 87       	std	Y+10, r25	; 0x0a
    242c:	89 87       	std	Y+9, r24	; 0x09
    242e:	3f c0       	rjmp	.+126    	; 0x24ae <__vector_12+0x15c>
	else if (__tmp > 65535)
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	3f ef       	ldi	r19, 0xFF	; 255
    2434:	4f e7       	ldi	r20, 0x7F	; 127
    2436:	57 e4       	ldi	r21, 0x47	; 71
    2438:	6d 81       	ldd	r22, Y+5	; 0x05
    243a:	7e 81       	ldd	r23, Y+6	; 0x06
    243c:	8f 81       	ldd	r24, Y+7	; 0x07
    243e:	98 85       	ldd	r25, Y+8	; 0x08
    2440:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    2444:	18 16       	cp	r1, r24
    2446:	4c f5       	brge	.+82     	; 0x249a <__vector_12+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e2       	ldi	r20, 0x20	; 32
    244e:	51 e4       	ldi	r21, 0x41	; 65
    2450:	69 81       	ldd	r22, Y+1	; 0x01
    2452:	7a 81       	ldd	r23, Y+2	; 0x02
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	9a 87       	std	Y+10, r25	; 0x0a
    246e:	89 87       	std	Y+9, r24	; 0x09
    2470:	0f c0       	rjmp	.+30     	; 0x2490 <__vector_12+0x13e>
    2472:	8a ef       	ldi	r24, 0xFA	; 250
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	9c 87       	std	Y+12, r25	; 0x0c
    2478:	8b 87       	std	Y+11, r24	; 0x0b
    247a:	8b 85       	ldd	r24, Y+11	; 0x0b
    247c:	9c 85       	ldd	r25, Y+12	; 0x0c
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <__vector_12+0x12c>
    2482:	9c 87       	std	Y+12, r25	; 0x0c
    2484:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	9a 85       	ldd	r25, Y+10	; 0x0a
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	9a 87       	std	Y+10, r25	; 0x0a
    248e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2490:	89 85       	ldd	r24, Y+9	; 0x09
    2492:	9a 85       	ldd	r25, Y+10	; 0x0a
    2494:	89 2b       	or	r24, r25
    2496:	69 f7       	brne	.-38     	; 0x2472 <__vector_12+0x120>
    2498:	14 c0       	rjmp	.+40     	; 0x24c2 <__vector_12+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249a:	6d 81       	ldd	r22, Y+5	; 0x05
    249c:	7e 81       	ldd	r23, Y+6	; 0x06
    249e:	8f 81       	ldd	r24, Y+7	; 0x07
    24a0:	98 85       	ldd	r25, Y+8	; 0x08
    24a2:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9a 87       	std	Y+10, r25	; 0x0a
    24ac:	89 87       	std	Y+9, r24	; 0x09
    24ae:	89 85       	ldd	r24, Y+9	; 0x09
    24b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b2:	9e 87       	std	Y+14, r25	; 0x0e
    24b4:	8d 87       	std	Y+13, r24	; 0x0d
    24b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <__vector_12+0x168>
    24be:	9e 87       	std	Y+14, r25	; 0x0e
    24c0:	8d 87       	std	Y+13, r24	; 0x0d
				_delay_ms(1000);
			}
    24c2:	84 cf       	rjmp	.-248    	; 0x23cc <__vector_12+0x7a>
	/*if((sys_time % 1000) == 0) {

		PORTG = ~PORTG;
	}*/

	sys_time++;
    24c4:	80 91 65 01 	lds	r24, 0x0165
    24c8:	90 91 66 01 	lds	r25, 0x0166
    24cc:	a0 91 67 01 	lds	r26, 0x0167
    24d0:	b0 91 68 01 	lds	r27, 0x0168
    24d4:	01 96       	adiw	r24, 0x01	; 1
    24d6:	a1 1d       	adc	r26, r1
    24d8:	b1 1d       	adc	r27, r1
    24da:	80 93 65 01 	sts	0x0165, r24
    24de:	90 93 66 01 	sts	0x0166, r25
    24e2:	a0 93 67 01 	sts	0x0167, r26
    24e6:	b0 93 68 01 	sts	0x0168, r27


}
    24ea:	2e 96       	adiw	r28, 0x0e	; 14
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	ff 91       	pop	r31
    24fc:	ef 91       	pop	r30
    24fe:	bf 91       	pop	r27
    2500:	af 91       	pop	r26
    2502:	9f 91       	pop	r25
    2504:	8f 91       	pop	r24
    2506:	7f 91       	pop	r23
    2508:	6f 91       	pop	r22
    250a:	5f 91       	pop	r21
    250c:	4f 91       	pop	r20
    250e:	3f 91       	pop	r19
    2510:	2f 91       	pop	r18
    2512:	0f 90       	pop	r0
    2514:	00 92 5b 00 	sts	0x005B, r0
    2518:	0f 90       	pop	r0
    251a:	00 92 5f 00 	sts	0x005F, r0
    251e:	0f 90       	pop	r0
    2520:	1f 90       	pop	r1
    2522:	18 95       	reti

00002524 <system_reset_system_time>:

void system_reset_system_time(void) 	{ 	sys_time = 0; 			}
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	10 92 65 01 	sts	0x0165, r1
    2530:	10 92 66 01 	sts	0x0166, r1
    2534:	10 92 67 01 	sts	0x0167, r1
    2538:	10 92 68 01 	sts	0x0168, r1
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	08 95       	ret

00002542 <system_set_match_started>:
void system_set_match_started(void) 	{ 	match_started = 1; 		}
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	80 93 69 01 	sts	0x0169, r24
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	08 95       	ret

00002556 <system_get_system_time>:
uint32_t system_get_system_time(void) 	{ 	return sys_time; 		}
    2556:	cf 93       	push	r28
    2558:	df 93       	push	r29
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	80 91 65 01 	lds	r24, 0x0165
    2562:	90 91 66 01 	lds	r25, 0x0166
    2566:	a0 91 67 01 	lds	r26, 0x0167
    256a:	b0 91 68 01 	lds	r27, 0x0168
    256e:	bc 01       	movw	r22, r24
    2570:	cd 01       	movw	r24, r26
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	08 95       	ret

00002578 <system_get_match_started>:
uint8_t system_get_match_started(void) 	{ 	return match_started; 	}
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	80 91 69 01 	lds	r24, 0x0169
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	08 95       	ret

0000258a <__vector_8>:


ISR(INT7_vect) {
    258a:	1f 92       	push	r1
    258c:	0f 92       	push	r0
    258e:	00 90 5f 00 	lds	r0, 0x005F
    2592:	0f 92       	push	r0
    2594:	11 24       	eor	r1, r1
    2596:	8f 93       	push	r24
    2598:	cf 93       	push	r28
    259a:	df 93       	push	r29
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
	jumper_pulled = true;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	80 93 6e 01 	sts	0x016E, r24
}
    25a6:	df 91       	pop	r29
    25a8:	cf 91       	pop	r28
    25aa:	8f 91       	pop	r24
    25ac:	0f 90       	pop	r0
    25ae:	00 92 5f 00 	sts	0x005F, r0
    25b2:	0f 90       	pop	r0
    25b4:	1f 90       	pop	r1
    25b6:	18 95       	reti

000025b8 <system_setup_jumper>:

static void system_setup_jumper() {
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	2e 97       	sbiw	r28, 0x0e	; 14
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	cd bf       	out	0x3d, r28	; 61

	DDRE &= ~(1 << PIN7);			// setup pin as input
    25cc:	8d e2       	ldi	r24, 0x2D	; 45
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	2d e2       	ldi	r18, 0x2D	; 45
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	f9 01       	movw	r30, r18
    25d6:	20 81       	ld	r18, Z
    25d8:	2f 77       	andi	r18, 0x7F	; 127
    25da:	fc 01       	movw	r30, r24
    25dc:	20 83       	st	Z, r18

	PORTE |= (1 << PIN7);			// pullup
    25de:	8e e2       	ldi	r24, 0x2E	; 46
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	2e e2       	ldi	r18, 0x2E	; 46
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	f9 01       	movw	r30, r18
    25e8:	20 81       	ld	r18, Z
    25ea:	20 68       	ori	r18, 0x80	; 128
    25ec:	fc 01       	movw	r30, r24
    25ee:	20 83       	st	Z, r18

	EICRB = (1 << ISC70);			// set on status change to triggure interrupt
    25f0:	8a e6       	ldi	r24, 0x6A	; 106
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	20 e4       	ldi	r18, 0x40	; 64
    25f6:	fc 01       	movw	r30, r24
    25f8:	20 83       	st	Z, r18

	EIMSK |= (1 << INT7);			// enable interrupt
    25fa:	8d e3       	ldi	r24, 0x3D	; 61
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	2d e3       	ldi	r18, 0x3D	; 61
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	f9 01       	movw	r30, r18
    2604:	20 81       	ld	r18, Z
    2606:	20 68       	ori	r18, 0x80	; 128
    2608:	fc 01       	movw	r30, r24
    260a:	20 83       	st	Z, r18
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	a8 ec       	ldi	r26, 0xC8	; 200
    2612:	b2 e4       	ldi	r27, 0x42	; 66
    2614:	89 83       	std	Y+1, r24	; 0x01
    2616:	9a 83       	std	Y+2, r25	; 0x02
    2618:	ab 83       	std	Y+3, r26	; 0x03
    261a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e4       	ldi	r19, 0x40	; 64
    2620:	4c e1       	ldi	r20, 0x1C	; 28
    2622:	55 e4       	ldi	r21, 0x45	; 69
    2624:	69 81       	ldd	r22, Y+1	; 0x01
    2626:	7a 81       	ldd	r23, Y+2	; 0x02
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	9c 81       	ldd	r25, Y+4	; 0x04
    262c:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	8d 83       	std	Y+5, r24	; 0x05
    2636:	9e 83       	std	Y+6, r25	; 0x06
    2638:	af 83       	std	Y+7, r26	; 0x07
    263a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	6d 81       	ldd	r22, Y+5	; 0x05
    2646:	7e 81       	ldd	r23, Y+6	; 0x06
    2648:	8f 81       	ldd	r24, Y+7	; 0x07
    264a:	98 85       	ldd	r25, Y+8	; 0x08
    264c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    2650:	88 23       	and	r24, r24
    2652:	2c f4       	brge	.+10     	; 0x265e <system_setup_jumper+0xa6>
		__ticks = 1;
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	9a 87       	std	Y+10, r25	; 0x0a
    265a:	89 87       	std	Y+9, r24	; 0x09
    265c:	3f c0       	rjmp	.+126    	; 0x26dc <system_setup_jumper+0x124>
	else if (__tmp > 65535)
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	6d 81       	ldd	r22, Y+5	; 0x05
    2668:	7e 81       	ldd	r23, Y+6	; 0x06
    266a:	8f 81       	ldd	r24, Y+7	; 0x07
    266c:	98 85       	ldd	r25, Y+8	; 0x08
    266e:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    2672:	18 16       	cp	r1, r24
    2674:	4c f5       	brge	.+82     	; 0x26c8 <system_setup_jumper+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	69 81       	ldd	r22, Y+1	; 0x01
    2680:	7a 81       	ldd	r23, Y+2	; 0x02
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	9a 87       	std	Y+10, r25	; 0x0a
    269c:	89 87       	std	Y+9, r24	; 0x09
    269e:	0f c0       	rjmp	.+30     	; 0x26be <system_setup_jumper+0x106>
    26a0:	8a ef       	ldi	r24, 0xFA	; 250
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	9c 87       	std	Y+12, r25	; 0x0c
    26a6:	8b 87       	std	Y+11, r24	; 0x0b
    26a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    26aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <system_setup_jumper+0xf4>
    26b0:	9c 87       	std	Y+12, r25	; 0x0c
    26b2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b4:	89 85       	ldd	r24, Y+9	; 0x09
    26b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	9a 87       	std	Y+10, r25	; 0x0a
    26bc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26be:	89 85       	ldd	r24, Y+9	; 0x09
    26c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c2:	89 2b       	or	r24, r25
    26c4:	69 f7       	brne	.-38     	; 0x26a0 <system_setup_jumper+0xe8>
    26c6:	14 c0       	rjmp	.+40     	; 0x26f0 <system_setup_jumper+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c8:	6d 81       	ldd	r22, Y+5	; 0x05
    26ca:	7e 81       	ldd	r23, Y+6	; 0x06
    26cc:	8f 81       	ldd	r24, Y+7	; 0x07
    26ce:	98 85       	ldd	r25, Y+8	; 0x08
    26d0:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	9a 87       	std	Y+10, r25	; 0x0a
    26da:	89 87       	std	Y+9, r24	; 0x09
    26dc:	89 85       	ldd	r24, Y+9	; 0x09
    26de:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e0:	9e 87       	std	Y+14, r25	; 0x0e
    26e2:	8d 87       	std	Y+13, r24	; 0x0d
    26e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <system_setup_jumper+0x130>
    26ec:	9e 87       	std	Y+14, r25	; 0x0e
    26ee:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);

	sei();							// enable global interrupts
    26f0:	78 94       	sei
}
    26f2:	2e 96       	adiw	r28, 0x0e	; 14
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	08 95       	ret

00002704 <system_wait_for_jumper>:

static void system_wait_for_jumper() {
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	2e 97       	sbiw	r28, 0x0e	; 14
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61

	while(jumper_pulled == false)		// wait for jumper_pulled t be set true
    2718:	72 c0       	rjmp	.+228    	; 0x27fe <system_wait_for_jumper+0xfa>
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	a0 e2       	ldi	r26, 0x20	; 32
    2720:	b1 e4       	ldi	r27, 0x41	; 65
    2722:	89 83       	std	Y+1, r24	; 0x01
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	ab 83       	std	Y+3, r26	; 0x03
    2728:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e4       	ldi	r19, 0x40	; 64
    272e:	4c e1       	ldi	r20, 0x1C	; 28
    2730:	55 e4       	ldi	r21, 0x45	; 69
    2732:	69 81       	ldd	r22, Y+1	; 0x01
    2734:	7a 81       	ldd	r23, Y+2	; 0x02
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	9c 81       	ldd	r25, Y+4	; 0x04
    273a:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	8d 83       	std	Y+5, r24	; 0x05
    2744:	9e 83       	std	Y+6, r25	; 0x06
    2746:	af 83       	std	Y+7, r26	; 0x07
    2748:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e8       	ldi	r20, 0x80	; 128
    2750:	5f e3       	ldi	r21, 0x3F	; 63
    2752:	6d 81       	ldd	r22, Y+5	; 0x05
    2754:	7e 81       	ldd	r23, Y+6	; 0x06
    2756:	8f 81       	ldd	r24, Y+7	; 0x07
    2758:	98 85       	ldd	r25, Y+8	; 0x08
    275a:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    275e:	88 23       	and	r24, r24
    2760:	2c f4       	brge	.+10     	; 0x276c <system_wait_for_jumper+0x68>
		__ticks = 1;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	9a 87       	std	Y+10, r25	; 0x0a
    2768:	89 87       	std	Y+9, r24	; 0x09
    276a:	3f c0       	rjmp	.+126    	; 0x27ea <system_wait_for_jumper+0xe6>
	else if (__tmp > 65535)
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	3f ef       	ldi	r19, 0xFF	; 255
    2770:	4f e7       	ldi	r20, 0x7F	; 127
    2772:	57 e4       	ldi	r21, 0x47	; 71
    2774:	6d 81       	ldd	r22, Y+5	; 0x05
    2776:	7e 81       	ldd	r23, Y+6	; 0x06
    2778:	8f 81       	ldd	r24, Y+7	; 0x07
    277a:	98 85       	ldd	r25, Y+8	; 0x08
    277c:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    2780:	18 16       	cp	r1, r24
    2782:	4c f5       	brge	.+82     	; 0x27d6 <system_wait_for_jumper+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e2       	ldi	r20, 0x20	; 32
    278a:	51 e4       	ldi	r21, 0x41	; 65
    278c:	69 81       	ldd	r22, Y+1	; 0x01
    278e:	7a 81       	ldd	r23, Y+2	; 0x02
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	bc 01       	movw	r22, r24
    279e:	cd 01       	movw	r24, r26
    27a0:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	9a 87       	std	Y+10, r25	; 0x0a
    27aa:	89 87       	std	Y+9, r24	; 0x09
    27ac:	0f c0       	rjmp	.+30     	; 0x27cc <system_wait_for_jumper+0xc8>
    27ae:	8a ef       	ldi	r24, 0xFA	; 250
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	9c 87       	std	Y+12, r25	; 0x0c
    27b4:	8b 87       	std	Y+11, r24	; 0x0b
    27b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    27b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <system_wait_for_jumper+0xb6>
    27be:	9c 87       	std	Y+12, r25	; 0x0c
    27c0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c2:	89 85       	ldd	r24, Y+9	; 0x09
    27c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	9a 87       	std	Y+10, r25	; 0x0a
    27ca:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27cc:	89 85       	ldd	r24, Y+9	; 0x09
    27ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d0:	89 2b       	or	r24, r25
    27d2:	69 f7       	brne	.-38     	; 0x27ae <system_wait_for_jumper+0xaa>
    27d4:	14 c0       	rjmp	.+40     	; 0x27fe <system_wait_for_jumper+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d6:	6d 81       	ldd	r22, Y+5	; 0x05
    27d8:	7e 81       	ldd	r23, Y+6	; 0x06
    27da:	8f 81       	ldd	r24, Y+7	; 0x07
    27dc:	98 85       	ldd	r25, Y+8	; 0x08
    27de:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9a 87       	std	Y+10, r25	; 0x0a
    27e8:	89 87       	std	Y+9, r24	; 0x09
    27ea:	89 85       	ldd	r24, Y+9	; 0x09
    27ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ee:	9e 87       	std	Y+14, r25	; 0x0e
    27f0:	8d 87       	std	Y+13, r24	; 0x0d
    27f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <system_wait_for_jumper+0xf2>
    27fa:	9e 87       	std	Y+14, r25	; 0x0e
    27fc:	8d 87       	std	Y+13, r24	; 0x0d
    27fe:	80 91 6e 01 	lds	r24, 0x016E
    2802:	88 23       	and	r24, r24
    2804:	09 f4       	brne	.+2      	; 0x2808 <system_wait_for_jumper+0x104>
    2806:	89 cf       	rjmp	.-238    	; 0x271a <system_wait_for_jumper+0x16>
		_delay_ms(10);

}
    2808:	2e 96       	adiw	r28, 0x0e	; 14
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	df 91       	pop	r29
    2816:	cf 91       	pop	r28
    2818:	08 95       	ret

0000281a <system_init>:
 *	Function: 		void system_init(void)
 *	Parameters: 	void
 *	Description:	initing all the things
 */
void system_init(void)
{
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	aa 97       	sbiw	r28, 0x2a	; 42
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
	// sets debouncer
	timer_register_callback(gpio_debouncer);
    282e:	8d eb       	ldi	r24, 0xBD	; 189
    2830:	99 e0       	ldi	r25, 0x09	; 9
    2832:	0e 94 46 11 	call	0x228c	; 0x228c <timer_register_callback>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	a8 ec       	ldi	r26, 0xC8	; 200
    283c:	b2 e4       	ldi	r27, 0x42	; 66
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	9a 83       	std	Y+2, r25	; 0x02
    2842:	ab 83       	std	Y+3, r26	; 0x03
    2844:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e4       	ldi	r19, 0x40	; 64
    284a:	4c e1       	ldi	r20, 0x1C	; 28
    284c:	55 e4       	ldi	r21, 0x45	; 69
    284e:	69 81       	ldd	r22, Y+1	; 0x01
    2850:	7a 81       	ldd	r23, Y+2	; 0x02
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	8d 83       	std	Y+5, r24	; 0x05
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	af 83       	std	Y+7, r26	; 0x07
    2864:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	40 e8       	ldi	r20, 0x80	; 128
    286c:	5f e3       	ldi	r21, 0x3F	; 63
    286e:	6d 81       	ldd	r22, Y+5	; 0x05
    2870:	7e 81       	ldd	r23, Y+6	; 0x06
    2872:	8f 81       	ldd	r24, Y+7	; 0x07
    2874:	98 85       	ldd	r25, Y+8	; 0x08
    2876:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    287a:	88 23       	and	r24, r24
    287c:	2c f4       	brge	.+10     	; 0x2888 <system_init+0x6e>
		__ticks = 1;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9a 87       	std	Y+10, r25	; 0x0a
    2884:	89 87       	std	Y+9, r24	; 0x09
    2886:	3f c0       	rjmp	.+126    	; 0x2906 <system_init+0xec>
	else if (__tmp > 65535)
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	3f ef       	ldi	r19, 0xFF	; 255
    288c:	4f e7       	ldi	r20, 0x7F	; 127
    288e:	57 e4       	ldi	r21, 0x47	; 71
    2890:	6d 81       	ldd	r22, Y+5	; 0x05
    2892:	7e 81       	ldd	r23, Y+6	; 0x06
    2894:	8f 81       	ldd	r24, Y+7	; 0x07
    2896:	98 85       	ldd	r25, Y+8	; 0x08
    2898:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    289c:	18 16       	cp	r1, r24
    289e:	4c f5       	brge	.+82     	; 0x28f2 <system_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	40 e2       	ldi	r20, 0x20	; 32
    28a6:	51 e4       	ldi	r21, 0x41	; 65
    28a8:	69 81       	ldd	r22, Y+1	; 0x01
    28aa:	7a 81       	ldd	r23, Y+2	; 0x02
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9a 87       	std	Y+10, r25	; 0x0a
    28c6:	89 87       	std	Y+9, r24	; 0x09
    28c8:	0f c0       	rjmp	.+30     	; 0x28e8 <system_init+0xce>
    28ca:	8a ef       	ldi	r24, 0xFA	; 250
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9c 87       	std	Y+12, r25	; 0x0c
    28d0:	8b 87       	std	Y+11, r24	; 0x0b
    28d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    28d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <system_init+0xbc>
    28da:	9c 87       	std	Y+12, r25	; 0x0c
    28dc:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28de:	89 85       	ldd	r24, Y+9	; 0x09
    28e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	9a 87       	std	Y+10, r25	; 0x0a
    28e6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e8:	89 85       	ldd	r24, Y+9	; 0x09
    28ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ec:	89 2b       	or	r24, r25
    28ee:	69 f7       	brne	.-38     	; 0x28ca <system_init+0xb0>
    28f0:	14 c0       	rjmp	.+40     	; 0x291a <system_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f2:	6d 81       	ldd	r22, Y+5	; 0x05
    28f4:	7e 81       	ldd	r23, Y+6	; 0x06
    28f6:	8f 81       	ldd	r24, Y+7	; 0x07
    28f8:	98 85       	ldd	r25, Y+8	; 0x08
    28fa:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	9a 87       	std	Y+10, r25	; 0x0a
    2904:	89 87       	std	Y+9, r24	; 0x09
    2906:	89 85       	ldd	r24, Y+9	; 0x09
    2908:	9a 85       	ldd	r25, Y+10	; 0x0a
    290a:	9e 87       	std	Y+14, r25	; 0x0e
    290c:	8d 87       	std	Y+13, r24	; 0x0d
    290e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2910:	9e 85       	ldd	r25, Y+14	; 0x0e
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <system_init+0xf8>
    2916:	9e 87       	std	Y+14, r25	; 0x0e
    2918:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);

	gpio_register_pin(0, GPIO_DIRECTION_INPUT, true);									// test detection
    291a:	41 e0       	ldi	r20, 0x01	; 1
    291c:	60 e0       	ldi	r22, 0x00	; 0
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	0e 94 ad 07 	call	0xf5a	; 0xf5a <gpio_register_pin>
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	a8 ec       	ldi	r26, 0xC8	; 200
    292a:	b2 e4       	ldi	r27, 0x42	; 66
    292c:	8f 87       	std	Y+15, r24	; 0x0f
    292e:	98 8b       	std	Y+16, r25	; 0x10
    2930:	a9 8b       	std	Y+17, r26	; 0x11
    2932:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e4       	ldi	r19, 0x40	; 64
    2938:	4c e1       	ldi	r20, 0x1C	; 28
    293a:	55 e4       	ldi	r21, 0x45	; 69
    293c:	6f 85       	ldd	r22, Y+15	; 0x0f
    293e:	78 89       	ldd	r23, Y+16	; 0x10
    2940:	89 89       	ldd	r24, Y+17	; 0x11
    2942:	9a 89       	ldd	r25, Y+18	; 0x12
    2944:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	8b 8b       	std	Y+19, r24	; 0x13
    294e:	9c 8b       	std	Y+20, r25	; 0x14
    2950:	ad 8b       	std	Y+21, r26	; 0x15
    2952:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e8       	ldi	r20, 0x80	; 128
    295a:	5f e3       	ldi	r21, 0x3F	; 63
    295c:	6b 89       	ldd	r22, Y+19	; 0x13
    295e:	7c 89       	ldd	r23, Y+20	; 0x14
    2960:	8d 89       	ldd	r24, Y+21	; 0x15
    2962:	9e 89       	ldd	r25, Y+22	; 0x16
    2964:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    2968:	88 23       	and	r24, r24
    296a:	2c f4       	brge	.+10     	; 0x2976 <system_init+0x15c>
		__ticks = 1;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	98 8f       	std	Y+24, r25	; 0x18
    2972:	8f 8b       	std	Y+23, r24	; 0x17
    2974:	3f c0       	rjmp	.+126    	; 0x29f4 <system_init+0x1da>
	else if (__tmp > 65535)
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	3f ef       	ldi	r19, 0xFF	; 255
    297a:	4f e7       	ldi	r20, 0x7F	; 127
    297c:	57 e4       	ldi	r21, 0x47	; 71
    297e:	6b 89       	ldd	r22, Y+19	; 0x13
    2980:	7c 89       	ldd	r23, Y+20	; 0x14
    2982:	8d 89       	ldd	r24, Y+21	; 0x15
    2984:	9e 89       	ldd	r25, Y+22	; 0x16
    2986:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    298a:	18 16       	cp	r1, r24
    298c:	4c f5       	brge	.+82     	; 0x29e0 <system_init+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	40 e2       	ldi	r20, 0x20	; 32
    2994:	51 e4       	ldi	r21, 0x41	; 65
    2996:	6f 85       	ldd	r22, Y+15	; 0x0f
    2998:	78 89       	ldd	r23, Y+16	; 0x10
    299a:	89 89       	ldd	r24, Y+17	; 0x11
    299c:	9a 89       	ldd	r25, Y+18	; 0x12
    299e:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	bc 01       	movw	r22, r24
    29a8:	cd 01       	movw	r24, r26
    29aa:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	98 8f       	std	Y+24, r25	; 0x18
    29b4:	8f 8b       	std	Y+23, r24	; 0x17
    29b6:	0f c0       	rjmp	.+30     	; 0x29d6 <system_init+0x1bc>
    29b8:	8a ef       	ldi	r24, 0xFA	; 250
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	9a 8f       	std	Y+26, r25	; 0x1a
    29be:	89 8f       	std	Y+25, r24	; 0x19
    29c0:	89 8d       	ldd	r24, Y+25	; 0x19
    29c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <system_init+0x1aa>
    29c8:	9a 8f       	std	Y+26, r25	; 0x1a
    29ca:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29cc:	8f 89       	ldd	r24, Y+23	; 0x17
    29ce:	98 8d       	ldd	r25, Y+24	; 0x18
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	98 8f       	std	Y+24, r25	; 0x18
    29d4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d6:	8f 89       	ldd	r24, Y+23	; 0x17
    29d8:	98 8d       	ldd	r25, Y+24	; 0x18
    29da:	89 2b       	or	r24, r25
    29dc:	69 f7       	brne	.-38     	; 0x29b8 <system_init+0x19e>
    29de:	14 c0       	rjmp	.+40     	; 0x2a08 <system_init+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e0:	6b 89       	ldd	r22, Y+19	; 0x13
    29e2:	7c 89       	ldd	r23, Y+20	; 0x14
    29e4:	8d 89       	ldd	r24, Y+21	; 0x15
    29e6:	9e 89       	ldd	r25, Y+22	; 0x16
    29e8:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	98 8f       	std	Y+24, r25	; 0x18
    29f2:	8f 8b       	std	Y+23, r24	; 0x17
    29f4:	8f 89       	ldd	r24, Y+23	; 0x17
    29f6:	98 8d       	ldd	r25, Y+24	; 0x18
    29f8:	9c 8f       	std	Y+28, r25	; 0x1c
    29fa:	8b 8f       	std	Y+27, r24	; 0x1b
    29fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <system_init+0x1e6>
    2a04:	9c 8f       	std	Y+28, r25	; 0x1c
    2a06:	8b 8f       	std	Y+27, r24	; 0x1b

	// small delay
	_delay_ms(100);

	DDRG = 0xff;
    2a08:	83 e3       	ldi	r24, 0x33	; 51
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	2f ef       	ldi	r18, 0xFF	; 255
    2a0e:	fc 01       	movw	r30, r24
    2a10:	20 83       	st	Z, r18
	PORTG = 0x00;
    2a12:	84 e3       	ldi	r24, 0x34	; 52
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	fc 01       	movw	r30, r24
    2a18:	10 82       	st	Z, r1

	// waiting for jumper
	timer_init(1000);
    2a1a:	88 ee       	ldi	r24, 0xE8	; 232
    2a1c:	93 e0       	ldi	r25, 0x03	; 3
    2a1e:	0e 94 58 11 	call	0x22b0	; 0x22b0 <timer_init>
	CAN_Init(1);
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	0e 94 ff 05 	call	0xbfe	; 0xbfe <CAN_Init>
	UART1_Init(UART1_BAUD, UART_ISR_OFF);
    2a28:	40 e0       	ldi	r20, 0x00	; 0
    2a2a:	60 e8       	ldi	r22, 0x80	; 128
    2a2c:	75 e2       	ldi	r23, 0x25	; 37
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	0e 94 44 17 	call	0x2e88	; 0x2e88 <UART1_Init>
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	aa ef       	ldi	r26, 0xFA	; 250
    2a3c:	b3 e4       	ldi	r27, 0x43	; 67
    2a3e:	8d 8f       	std	Y+29, r24	; 0x1d
    2a40:	9e 8f       	std	Y+30, r25	; 0x1e
    2a42:	af 8f       	std	Y+31, r26	; 0x1f
    2a44:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e4       	ldi	r19, 0x40	; 64
    2a4a:	4c e1       	ldi	r20, 0x1C	; 28
    2a4c:	55 e4       	ldi	r21, 0x45	; 69
    2a4e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2a50:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2a52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a54:	98 a1       	ldd	r25, Y+32	; 0x20
    2a56:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	89 a3       	std	Y+33, r24	; 0x21
    2a60:	9a a3       	std	Y+34, r25	; 0x22
    2a62:	ab a3       	std	Y+35, r26	; 0x23
    2a64:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	40 e8       	ldi	r20, 0x80	; 128
    2a6c:	5f e3       	ldi	r21, 0x3F	; 63
    2a6e:	69 a1       	ldd	r22, Y+33	; 0x21
    2a70:	7a a1       	ldd	r23, Y+34	; 0x22
    2a72:	8b a1       	ldd	r24, Y+35	; 0x23
    2a74:	9c a1       	ldd	r25, Y+36	; 0x24
    2a76:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	2c f4       	brge	.+10     	; 0x2a88 <system_init+0x26e>
		__ticks = 1;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9e a3       	std	Y+38, r25	; 0x26
    2a84:	8d a3       	std	Y+37, r24	; 0x25
    2a86:	3f c0       	rjmp	.+126    	; 0x2b06 <system_init+0x2ec>
	else if (__tmp > 65535)
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	3f ef       	ldi	r19, 0xFF	; 255
    2a8c:	4f e7       	ldi	r20, 0x7F	; 127
    2a8e:	57 e4       	ldi	r21, 0x47	; 71
    2a90:	69 a1       	ldd	r22, Y+33	; 0x21
    2a92:	7a a1       	ldd	r23, Y+34	; 0x22
    2a94:	8b a1       	ldd	r24, Y+35	; 0x23
    2a96:	9c a1       	ldd	r25, Y+36	; 0x24
    2a98:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    2a9c:	18 16       	cp	r1, r24
    2a9e:	4c f5       	brge	.+82     	; 0x2af2 <system_init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	40 e2       	ldi	r20, 0x20	; 32
    2aa6:	51 e4       	ldi	r21, 0x41	; 65
    2aa8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2aaa:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2aac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aae:	98 a1       	ldd	r25, Y+32	; 0x20
    2ab0:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	9e a3       	std	Y+38, r25	; 0x26
    2ac6:	8d a3       	std	Y+37, r24	; 0x25
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <system_init+0x2ce>
    2aca:	8a ef       	ldi	r24, 0xFA	; 250
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	98 a7       	std	Y+40, r25	; 0x28
    2ad0:	8f a3       	std	Y+39, r24	; 0x27
    2ad2:	8f a1       	ldd	r24, Y+39	; 0x27
    2ad4:	98 a5       	ldd	r25, Y+40	; 0x28
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <system_init+0x2bc>
    2ada:	98 a7       	std	Y+40, r25	; 0x28
    2adc:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ade:	8d a1       	ldd	r24, Y+37	; 0x25
    2ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	9e a3       	std	Y+38, r25	; 0x26
    2ae6:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae8:	8d a1       	ldd	r24, Y+37	; 0x25
    2aea:	9e a1       	ldd	r25, Y+38	; 0x26
    2aec:	89 2b       	or	r24, r25
    2aee:	69 f7       	brne	.-38     	; 0x2aca <system_init+0x2b0>
    2af0:	14 c0       	rjmp	.+40     	; 0x2b1a <system_init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af2:	69 a1       	ldd	r22, Y+33	; 0x21
    2af4:	7a a1       	ldd	r23, Y+34	; 0x22
    2af6:	8b a1       	ldd	r24, Y+35	; 0x23
    2af8:	9c a1       	ldd	r25, Y+36	; 0x24
    2afa:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9e a3       	std	Y+38, r25	; 0x26
    2b04:	8d a3       	std	Y+37, r24	; 0x25
    2b06:	8d a1       	ldd	r24, Y+37	; 0x25
    2b08:	9e a1       	ldd	r25, Y+38	; 0x26
    2b0a:	9a a7       	std	Y+42, r25	; 0x2a
    2b0c:	89 a7       	std	Y+41, r24	; 0x29
    2b0e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b10:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <system_init+0x2f8>
    2b16:	9a a7       	std	Y+42, r25	; 0x2a
    2b18:	89 a7       	std	Y+41, r24	; 0x29

	_delay_ms(500);

	system_setup_jumper();
    2b1a:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <system_setup_jumper>
	//debug_init();


	// waiting for jumper
	//system_wait_for_jumper();
	PORTG = 0xff;
    2b1e:	84 e3       	ldi	r24, 0x34	; 52
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	2f ef       	ldi	r18, 0xFF	; 255
    2b24:	fc 01       	movw	r30, r24
    2b26:	20 83       	st	Z, r18


	system_reset_system_time();															// reset system time
    2b28:	0e 94 92 12 	call	0x2524	; 0x2524 <system_reset_system_time>
	system_set_match_started();															// match has started!
    2b2c:	0e 94 a1 12 	call	0x2542	; 0x2542 <system_set_match_started>

}
    2b30:	aa 96       	adiw	r28, 0x2a	; 42
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	08 95       	ret

00002b42 <UART0_Init>:
* Parameters        : unsigned int baud
					  char isrOnOff
* Return Value      : void
*********************************************************************************/
void UART0_Init(unsigned long baud, char isrOnOff)
{
    2b42:	cf 93       	push	r28
    2b44:	df 93       	push	r29
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	27 97       	sbiw	r28, 0x07	; 7
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	6b 83       	std	Y+3, r22	; 0x03
    2b58:	7c 83       	std	Y+4, r23	; 0x04
    2b5a:	8d 83       	std	Y+5, r24	; 0x05
    2b5c:	9e 83       	std	Y+6, r25	; 0x06
    2b5e:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR0A = 0;
    2b60:	80 ec       	ldi	r24, 0xC0	; 192
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	fc 01       	movw	r30, r24
    2b66:	10 82       	st	Z, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    2b68:	81 ec       	ldi	r24, 0xC1	; 193
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	28 e1       	ldi	r18, 0x18	; 24
    2b6e:	fc 01       	movw	r30, r24
    2b70:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    2b72:	82 ec       	ldi	r24, 0xC2	; 194
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	26 e0       	ldi	r18, 0x06	; 6
    2b78:	fc 01       	movw	r30, r24
    2b7a:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    2b7c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b7e:	81 30       	cpi	r24, 0x01	; 1
    2b80:	91 f4       	brne	.+36     	; 0x2ba6 <UART0_Init+0x64>
	{
		UCSR0B |= ((1 << RXCIE0) | (1 << TXCIE0));
    2b82:	81 ec       	ldi	r24, 0xC1	; 193
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	21 ec       	ldi	r18, 0xC1	; 193
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	f9 01       	movw	r30, r18
    2b8c:	20 81       	ld	r18, Z
    2b8e:	20 6c       	ori	r18, 0xC0	; 192
    2b90:	fc 01       	movw	r30, r24
    2b92:	20 83       	st	Z, r18
		SREG |= 0x80;
    2b94:	8f e5       	ldi	r24, 0x5F	; 95
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	2f e5       	ldi	r18, 0x5F	; 95
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	f9 01       	movw	r30, r18
    2b9e:	20 81       	ld	r18, Z
    2ba0:	20 68       	ori	r18, 0x80	; 128
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    2ba6:	6b 81       	ldd	r22, Y+3	; 0x03
    2ba8:	7c 81       	ldd	r23, Y+4	; 0x04
    2baa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bac:	9e 81       	ldd	r25, Y+6	; 0x06
    2bae:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__floatunsisf>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e8       	ldi	r20, 0x80	; 128
    2bbc:	51 e4       	ldi	r21, 0x41	; 65
    2bbe:	bc 01       	movw	r22, r24
    2bc0:	cd 01       	movw	r24, r26
    2bc2:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	9c 01       	movw	r18, r24
    2bcc:	ad 01       	movw	r20, r26
    2bce:	60 e8       	ldi	r22, 0x80	; 128
    2bd0:	76 e9       	ldi	r23, 0x96	; 150
    2bd2:	88 e1       	ldi	r24, 0x18	; 24
    2bd4:	9b e4       	ldi	r25, 0x4B	; 75
    2bd6:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__divsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e8       	ldi	r20, 0x80	; 128
    2be4:	5f e3       	ldi	r21, 0x3F	; 63
    2be6:	bc 01       	movw	r22, r24
    2be8:	cd 01       	movw	r24, r26
    2bea:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <__subsf3>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__addsf3>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	bc 01       	movw	r22, r24
    2c08:	cd 01       	movw	r24, r26
    2c0a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	9a 83       	std	Y+2, r25	; 0x02
    2c14:	89 83       	std	Y+1, r24	; 0x01

	UBRR0H = temp >> 8;
    2c16:	85 ec       	ldi	r24, 0xC5	; 197
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	29 81       	ldd	r18, Y+1	; 0x01
    2c1c:	3a 81       	ldd	r19, Y+2	; 0x02
    2c1e:	23 2f       	mov	r18, r19
    2c20:	33 27       	eor	r19, r19
    2c22:	fc 01       	movw	r30, r24
    2c24:	20 83       	st	Z, r18
	UBRR0L = temp;
    2c26:	84 ec       	ldi	r24, 0xC4	; 196
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	29 81       	ldd	r18, Y+1	; 0x01
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	20 83       	st	Z, r18
}
    2c30:	27 96       	adiw	r28, 0x07	; 7
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	08 95       	ret

00002c42 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    2c42:	1f 92       	push	r1
    2c44:	0f 92       	push	r0
    2c46:	00 90 5f 00 	lds	r0, 0x005F
    2c4a:	0f 92       	push	r0
    2c4c:	11 24       	eor	r1, r1
    2c4e:	00 90 5b 00 	lds	r0, 0x005B
    2c52:	0f 92       	push	r0
    2c54:	2f 93       	push	r18
    2c56:	3f 93       	push	r19
    2c58:	8f 93       	push	r24
    2c5a:	9f 93       	push	r25
    2c5c:	ef 93       	push	r30
    2c5e:	ff 93       	push	r31
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    2c68:	80 91 b0 01 	lds	r24, 0x01B0
    2c6c:	88 23       	and	r24, r24
    2c6e:	d1 f0       	breq	.+52     	; 0x2ca4 <__vector_23+0x62>
	{
		tx0_counter--;
    2c70:	80 91 b0 01 	lds	r24, 0x01B0
    2c74:	81 50       	subi	r24, 0x01	; 1
    2c76:	80 93 b0 01 	sts	0x01B0, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    2c7a:	86 ec       	ldi	r24, 0xC6	; 198
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	20 91 b1 01 	lds	r18, 0x01B1
    2c82:	22 2f       	mov	r18, r18
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	21 59       	subi	r18, 0x91	; 145
    2c88:	3e 4f       	sbci	r19, 0xFE	; 254
    2c8a:	f9 01       	movw	r30, r18
    2c8c:	20 81       	ld	r18, Z
    2c8e:	fc 01       	movw	r30, r24
    2c90:	20 83       	st	Z, r18
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    2c92:	80 91 b1 01 	lds	r24, 0x01B1
    2c96:	8f 5f       	subi	r24, 0xFF	; 255
    2c98:	80 93 b1 01 	sts	0x01B1, r24
    2c9c:	80 34       	cpi	r24, 0x40	; 64
    2c9e:	11 f4       	brne	.+4      	; 0x2ca4 <__vector_23+0x62>
			tx0_rd_index = 0;
    2ca0:	10 92 b1 01 	sts	0x01B1, r1
	}
}
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	ff 91       	pop	r31
    2caa:	ef 91       	pop	r30
    2cac:	9f 91       	pop	r25
    2cae:	8f 91       	pop	r24
    2cb0:	3f 91       	pop	r19
    2cb2:	2f 91       	pop	r18
    2cb4:	0f 90       	pop	r0
    2cb6:	00 92 5b 00 	sts	0x005B, r0
    2cba:	0f 90       	pop	r0
    2cbc:	00 92 5f 00 	sts	0x005F, r0
    2cc0:	0f 90       	pop	r0
    2cc2:	1f 90       	pop	r1
    2cc4:	18 95       	reti

00002cc6 <UART0_Write>:
/****************************************************************************************************************************************
Slanje podataka USART0 modulom
****************************************************************************************************************************************/

void UART0_Write(unsigned char data)
{
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	1f 92       	push	r1
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
    2cd0:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR0B >> TXCIE0) & 0x01)
    2cd2:	81 ec       	ldi	r24, 0xC1	; 193
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	80 81       	ld	r24, Z
    2cda:	82 95       	swap	r24
    2cdc:	86 95       	lsr	r24
    2cde:	86 95       	lsr	r24
    2ce0:	83 70       	andi	r24, 0x03	; 3
    2ce2:	88 2f       	mov	r24, r24
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	81 70       	andi	r24, 0x01	; 1
    2ce8:	99 27       	eor	r25, r25
    2cea:	89 2b       	or	r24, r25
    2cec:	99 f1       	breq	.+102    	; 0x2d54 <UART0_Write+0x8e>
	{
		while(tx0_counter == TX0_BUFFER_SIZE);
    2cee:	00 00       	nop
    2cf0:	80 91 b0 01 	lds	r24, 0x01B0
    2cf4:	80 34       	cpi	r24, 0x40	; 64
    2cf6:	e1 f3       	breq	.-8      	; 0x2cf0 <UART0_Write+0x2a>

		cli();
    2cf8:	f8 94       	cli

		if(tx0_counter || (UCSR0A & 0x20) == 0)
    2cfa:	80 91 b0 01 	lds	r24, 0x01B0
    2cfe:	88 23       	and	r24, r24
    2d00:	51 f4       	brne	.+20     	; 0x2d16 <UART0_Write+0x50>
    2d02:	80 ec       	ldi	r24, 0xC0	; 192
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	fc 01       	movw	r30, r24
    2d08:	80 81       	ld	r24, Z
    2d0a:	88 2f       	mov	r24, r24
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	80 72       	andi	r24, 0x20	; 32
    2d10:	99 27       	eor	r25, r25
    2d12:	89 2b       	or	r24, r25
    2d14:	c1 f4       	brne	.+48     	; 0x2d46 <UART0_Write+0x80>
		{
			tx0_buffer[tx0_wr_index] = data;
    2d16:	80 91 af 01 	lds	r24, 0x01AF
    2d1a:	88 2f       	mov	r24, r24
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	81 59       	subi	r24, 0x91	; 145
    2d20:	9e 4f       	sbci	r25, 0xFE	; 254
    2d22:	29 81       	ldd	r18, Y+1	; 0x01
    2d24:	fc 01       	movw	r30, r24
    2d26:	20 83       	st	Z, r18
			if(++tx0_wr_index == TX0_BUFFER_SIZE)
    2d28:	80 91 af 01 	lds	r24, 0x01AF
    2d2c:	8f 5f       	subi	r24, 0xFF	; 255
    2d2e:	80 93 af 01 	sts	0x01AF, r24
    2d32:	80 34       	cpi	r24, 0x40	; 64
    2d34:	11 f4       	brne	.+4      	; 0x2d3a <UART0_Write+0x74>
				tx0_wr_index = 0;
    2d36:	10 92 af 01 	sts	0x01AF, r1

			tx0_counter++;
    2d3a:	80 91 b0 01 	lds	r24, 0x01B0
    2d3e:	8f 5f       	subi	r24, 0xFF	; 255
    2d40:	80 93 b0 01 	sts	0x01B0, r24
    2d44:	05 c0       	rjmp	.+10     	; 0x2d50 <UART0_Write+0x8a>
		}
		else
			UDR0 = data;
    2d46:	86 ec       	ldi	r24, 0xC6	; 198
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	29 81       	ldd	r18, Y+1	; 0x01
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	20 83       	st	Z, r18

		sei();
    2d50:	78 94       	sei
    2d52:	03 c0       	rjmp	.+6      	; 0x2d5a <UART0_Write+0x94>
	}
	else
		altUart0Write(data);
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	0e 94 52 18 	call	0x30a4	; 0x30a4 <altUart0Write>
}
    2d5a:	0f 90       	pop	r0
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	08 95       	ret

00002d62 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    2d62:	1f 92       	push	r1
    2d64:	0f 92       	push	r0
    2d66:	00 90 5f 00 	lds	r0, 0x005F
    2d6a:	0f 92       	push	r0
    2d6c:	11 24       	eor	r1, r1
    2d6e:	00 90 5b 00 	lds	r0, 0x005B
    2d72:	0f 92       	push	r0
    2d74:	2f 93       	push	r18
    2d76:	3f 93       	push	r19
    2d78:	8f 93       	push	r24
    2d7a:	9f 93       	push	r25
    2d7c:	ef 93       	push	r30
    2d7e:	ff 93       	push	r31
    2d80:	cf 93       	push	r28
    2d82:	df 93       	push	r29
    2d84:	1f 92       	push	r1
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    2d8a:	80 ec       	ldi	r24, 0xC0	; 192
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	fc 01       	movw	r30, r24
    2d90:	80 81       	ld	r24, Z
    2d92:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	88 2f       	mov	r24, r24
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	8c 71       	andi	r24, 0x1C	; 28
    2d9c:	99 27       	eor	r25, r25
    2d9e:	89 2b       	or	r24, r25
    2da0:	d1 f4       	brne	.+52     	; 0x2dd6 <__vector_21+0x74>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    2da2:	80 91 f2 01 	lds	r24, 0x01F2
    2da6:	88 2f       	mov	r24, r24
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	26 ec       	ldi	r18, 0xC6	; 198
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	f9 01       	movw	r30, r18
    2db0:	20 81       	ld	r18, Z
    2db2:	8e 54       	subi	r24, 0x4E	; 78
    2db4:	9e 4f       	sbci	r25, 0xFE	; 254
    2db6:	fc 01       	movw	r30, r24
    2db8:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    2dba:	80 91 f2 01 	lds	r24, 0x01F2
    2dbe:	8f 5f       	subi	r24, 0xFF	; 255
    2dc0:	80 93 f2 01 	sts	0x01F2, r24
    2dc4:	80 34       	cpi	r24, 0x40	; 64
    2dc6:	11 f4       	brne	.+4      	; 0x2dcc <__vector_21+0x6a>
			rx0_wr_index = 0;
    2dc8:	10 92 f2 01 	sts	0x01F2, r1

		rx0_counter++;
    2dcc:	80 91 f3 01 	lds	r24, 0x01F3
    2dd0:	8f 5f       	subi	r24, 0xFF	; 255
    2dd2:	80 93 f3 01 	sts	0x01F3, r24
	}
}
    2dd6:	0f 90       	pop	r0
    2dd8:	df 91       	pop	r29
    2dda:	cf 91       	pop	r28
    2ddc:	ff 91       	pop	r31
    2dde:	ef 91       	pop	r30
    2de0:	9f 91       	pop	r25
    2de2:	8f 91       	pop	r24
    2de4:	3f 91       	pop	r19
    2de6:	2f 91       	pop	r18
    2de8:	0f 90       	pop	r0
    2dea:	00 92 5b 00 	sts	0x005B, r0
    2dee:	0f 90       	pop	r0
    2df0:	00 92 5f 00 	sts	0x005F, r0
    2df4:	0f 90       	pop	r0
    2df6:	1f 90       	pop	r1
    2df8:	18 95       	reti

00002dfa <UART0_Read>:
/****************************************************************************************************************************************
Primanje podataka USART0 modulom
****************************************************************************************************************************************/

unsigned char UART0_Read(void)
{
    2dfa:	cf 93       	push	r28
    2dfc:	df 93       	push	r29
    2dfe:	1f 92       	push	r1
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR0B >> RXCIE0) & 0x01)
    2e04:	81 ec       	ldi	r24, 0xC1	; 193
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	fc 01       	movw	r30, r24
    2e0a:	80 81       	ld	r24, Z
    2e0c:	88 1f       	adc	r24, r24
    2e0e:	88 27       	eor	r24, r24
    2e10:	88 1f       	adc	r24, r24
    2e12:	88 2f       	mov	r24, r24
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	81 70       	andi	r24, 0x01	; 1
    2e18:	99 27       	eor	r25, r25
    2e1a:	89 2b       	or	r24, r25
    2e1c:	e9 f0       	breq	.+58     	; 0x2e58 <UART0_Read+0x5e>
	{
		while(rx0_counter == 0);
    2e1e:	00 00       	nop
    2e20:	80 91 f3 01 	lds	r24, 0x01F3
    2e24:	88 23       	and	r24, r24
    2e26:	e1 f3       	breq	.-8      	; 0x2e20 <UART0_Read+0x26>

		data = rx0_buffer[rx0_rd_index];
    2e28:	80 91 f4 01 	lds	r24, 0x01F4
    2e2c:	88 2f       	mov	r24, r24
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	8e 54       	subi	r24, 0x4E	; 78
    2e32:	9e 4f       	sbci	r25, 0xFE	; 254
    2e34:	fc 01       	movw	r30, r24
    2e36:	80 81       	ld	r24, Z
    2e38:	89 83       	std	Y+1, r24	; 0x01

		if(++rx0_rd_index == RX0_BUFFER_SIZE)
    2e3a:	80 91 f4 01 	lds	r24, 0x01F4
    2e3e:	8f 5f       	subi	r24, 0xFF	; 255
    2e40:	80 93 f4 01 	sts	0x01F4, r24
    2e44:	80 34       	cpi	r24, 0x40	; 64
    2e46:	11 f4       	brne	.+4      	; 0x2e4c <UART0_Read+0x52>
			rx0_rd_index = 0;
    2e48:	10 92 f4 01 	sts	0x01F4, r1

		rx0_counter--;
    2e4c:	80 91 f3 01 	lds	r24, 0x01F3
    2e50:	81 50       	subi	r24, 0x01	; 1
    2e52:	80 93 f3 01 	sts	0x01F3, r24
    2e56:	13 c0       	rjmp	.+38     	; 0x2e7e <UART0_Read+0x84>
	}
	else
	{
		while( !((UCSR0A >> RXC0) & 0x01));
    2e58:	00 00       	nop
    2e5a:	80 ec       	ldi	r24, 0xC0	; 192
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	fc 01       	movw	r30, r24
    2e60:	80 81       	ld	r24, Z
    2e62:	88 1f       	adc	r24, r24
    2e64:	88 27       	eor	r24, r24
    2e66:	88 1f       	adc	r24, r24
    2e68:	88 2f       	mov	r24, r24
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	81 70       	andi	r24, 0x01	; 1
    2e6e:	99 27       	eor	r25, r25
    2e70:	89 2b       	or	r24, r25
    2e72:	99 f3       	breq	.-26     	; 0x2e5a <UART0_Read+0x60>
		data = UDR0;
    2e74:	86 ec       	ldi	r24, 0xC6	; 198
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	fc 01       	movw	r30, r24
    2e7a:	80 81       	ld	r24, Z
    2e7c:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e80:	0f 90       	pop	r0
    2e82:	df 91       	pop	r29
    2e84:	cf 91       	pop	r28
    2e86:	08 95       	ret

00002e88 <UART1_Init>:
-bez paritet
-9600baud
-asynchron
****************************************************************************************************************************************/
void UART1_Init(unsigned long baud, char isrOnOff)
{
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
    2e90:	27 97       	sbiw	r28, 0x07	; 7
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	cd bf       	out	0x3d, r28	; 61
    2e9c:	6b 83       	std	Y+3, r22	; 0x03
    2e9e:	7c 83       	std	Y+4, r23	; 0x04
    2ea0:	8d 83       	std	Y+5, r24	; 0x05
    2ea2:	9e 83       	std	Y+6, r25	; 0x06
    2ea4:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
    2ea6:	88 ec       	ldi	r24, 0xC8	; 200
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	fc 01       	movw	r30, r24
    2eac:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
    2eae:	89 ec       	ldi	r24, 0xC9	; 201
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	28 e1       	ldi	r18, 0x18	; 24
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	20 83       	st	Z, r18


	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); //sa 1stop bit
    2eb8:	8a ec       	ldi	r24, 0xCA	; 202
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	26 e0       	ldi	r18, 0x06	; 6
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	20 83       	st	Z, r18


	if(isrOnOff == UART_ISR_ON)
    2ec2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ec4:	81 30       	cpi	r24, 0x01	; 1
    2ec6:	91 f4       	brne	.+36     	; 0x2eec <UART1_Init+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
    2ec8:	89 ec       	ldi	r24, 0xC9	; 201
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	29 ec       	ldi	r18, 0xC9	; 201
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	f9 01       	movw	r30, r18
    2ed2:	20 81       	ld	r18, Z
    2ed4:	20 6c       	ori	r18, 0xC0	; 192
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	20 83       	st	Z, r18
		SREG |= 0x80;
    2eda:	8f e5       	ldi	r24, 0x5F	; 95
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	2f e5       	ldi	r18, 0x5F	; 95
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	f9 01       	movw	r30, r18
    2ee4:	20 81       	ld	r18, Z
    2ee6:	20 68       	ori	r18, 0x80	; 128
    2ee8:	fc 01       	movw	r30, r24
    2eea:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    2eec:	6b 81       	ldd	r22, Y+3	; 0x03
    2eee:	7c 81       	ldd	r23, Y+4	; 0x04
    2ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef4:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__floatunsisf>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e8       	ldi	r20, 0x80	; 128
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	bc 01       	movw	r22, r24
    2f06:	cd 01       	movw	r24, r26
    2f08:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	9c 01       	movw	r18, r24
    2f12:	ad 01       	movw	r20, r26
    2f14:	60 e8       	ldi	r22, 0x80	; 128
    2f16:	76 e9       	ldi	r23, 0x96	; 150
    2f18:	88 e1       	ldi	r24, 0x18	; 24
    2f1a:	9b e4       	ldi	r25, 0x4B	; 75
    2f1c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__divsf3>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	40 e8       	ldi	r20, 0x80	; 128
    2f2a:	5f e3       	ldi	r21, 0x3F	; 63
    2f2c:	bc 01       	movw	r22, r24
    2f2e:	cd 01       	movw	r24, r26
    2f30:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <__subsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	40 e0       	ldi	r20, 0x00	; 0
    2f3e:	5f e3       	ldi	r21, 0x3F	; 63
    2f40:	bc 01       	movw	r22, r24
    2f42:	cd 01       	movw	r24, r26
    2f44:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__addsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	bc 01       	movw	r22, r24
    2f4e:	cd 01       	movw	r24, r26
    2f50:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	9a 83       	std	Y+2, r25	; 0x02
    2f5a:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
    2f5c:	8d ec       	ldi	r24, 0xCD	; 205
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	29 81       	ldd	r18, Y+1	; 0x01
    2f62:	3a 81       	ldd	r19, Y+2	; 0x02
    2f64:	23 2f       	mov	r18, r19
    2f66:	33 27       	eor	r19, r19
    2f68:	fc 01       	movw	r30, r24
    2f6a:	20 83       	st	Z, r18
	UBRR1L = temp;
    2f6c:	8c ec       	ldi	r24, 0xCC	; 204
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	29 81       	ldd	r18, Y+1	; 0x01
    2f72:	fc 01       	movw	r30, r24
    2f74:	20 83       	st	Z, r18
}
    2f76:	27 96       	adiw	r28, 0x07	; 7
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	df 91       	pop	r29
    2f84:	cf 91       	pop	r28
    2f86:	08 95       	ret

00002f88 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    2f88:	1f 92       	push	r1
    2f8a:	0f 92       	push	r0
    2f8c:	00 90 5f 00 	lds	r0, 0x005F
    2f90:	0f 92       	push	r0
    2f92:	11 24       	eor	r1, r1
    2f94:	00 90 5b 00 	lds	r0, 0x005B
    2f98:	0f 92       	push	r0
    2f9a:	2f 93       	push	r18
    2f9c:	3f 93       	push	r19
    2f9e:	8f 93       	push	r24
    2fa0:	9f 93       	push	r25
    2fa2:	ef 93       	push	r30
    2fa4:	ff 93       	push	r31
    2fa6:	cf 93       	push	r28
    2fa8:	df 93       	push	r29
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    2fae:	80 91 36 02 	lds	r24, 0x0236
    2fb2:	88 23       	and	r24, r24
    2fb4:	d1 f0       	breq	.+52     	; 0x2fea <__vector_34+0x62>
	{
		tx1_counter--;
    2fb6:	80 91 36 02 	lds	r24, 0x0236
    2fba:	81 50       	subi	r24, 0x01	; 1
    2fbc:	80 93 36 02 	sts	0x0236, r24
		UDR1=tx1_buffer[tx1_rd_index];
    2fc0:	8e ec       	ldi	r24, 0xCE	; 206
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	20 91 37 02 	lds	r18, 0x0237
    2fc8:	22 2f       	mov	r18, r18
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	2b 50       	subi	r18, 0x0B	; 11
    2fce:	3e 4f       	sbci	r19, 0xFE	; 254
    2fd0:	f9 01       	movw	r30, r18
    2fd2:	20 81       	ld	r18, Z
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    2fd8:	80 91 37 02 	lds	r24, 0x0237
    2fdc:	8f 5f       	subi	r24, 0xFF	; 255
    2fde:	80 93 37 02 	sts	0x0237, r24
    2fe2:	80 34       	cpi	r24, 0x40	; 64
    2fe4:	11 f4       	brne	.+4      	; 0x2fea <__vector_34+0x62>
			tx1_rd_index = 0;
    2fe6:	10 92 37 02 	sts	0x0237, r1
	}
}
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	ff 91       	pop	r31
    2ff0:	ef 91       	pop	r30
    2ff2:	9f 91       	pop	r25
    2ff4:	8f 91       	pop	r24
    2ff6:	3f 91       	pop	r19
    2ff8:	2f 91       	pop	r18
    2ffa:	0f 90       	pop	r0
    2ffc:	00 92 5b 00 	sts	0x005B, r0
    3000:	0f 90       	pop	r0
    3002:	00 92 5f 00 	sts	0x005F, r0
    3006:	0f 90       	pop	r0
    3008:	1f 90       	pop	r1
    300a:	18 95       	reti

0000300c <__vector_32>:

ISR(USART1_RX_vect)
{
    300c:	1f 92       	push	r1
    300e:	0f 92       	push	r0
    3010:	00 90 5f 00 	lds	r0, 0x005F
    3014:	0f 92       	push	r0
    3016:	11 24       	eor	r1, r1
    3018:	00 90 5b 00 	lds	r0, 0x005B
    301c:	0f 92       	push	r0
    301e:	2f 93       	push	r18
    3020:	3f 93       	push	r19
    3022:	8f 93       	push	r24
    3024:	9f 93       	push	r25
    3026:	ef 93       	push	r30
    3028:	ff 93       	push	r31
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
    302e:	1f 92       	push	r1
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    3034:	88 ec       	ldi	r24, 0xC8	; 200
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	fc 01       	movw	r30, r24
    303a:	80 81       	ld	r24, Z
    303c:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	88 2f       	mov	r24, r24
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	8c 71       	andi	r24, 0x1C	; 28
    3046:	99 27       	eor	r25, r25
    3048:	89 2b       	or	r24, r25
    304a:	d1 f4       	brne	.+52     	; 0x3080 <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    304c:	80 91 78 02 	lds	r24, 0x0278
    3050:	88 2f       	mov	r24, r24
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	2e ec       	ldi	r18, 0xCE	; 206
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	f9 01       	movw	r30, r18
    305a:	20 81       	ld	r18, Z
    305c:	88 5c       	subi	r24, 0xC8	; 200
    305e:	9d 4f       	sbci	r25, 0xFD	; 253
    3060:	fc 01       	movw	r30, r24
    3062:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    3064:	80 91 78 02 	lds	r24, 0x0278
    3068:	8f 5f       	subi	r24, 0xFF	; 255
    306a:	80 93 78 02 	sts	0x0278, r24
    306e:	80 34       	cpi	r24, 0x40	; 64
    3070:	11 f4       	brne	.+4      	; 0x3076 <__vector_32+0x6a>
		rx1_wr_index = 0;
    3072:	10 92 78 02 	sts	0x0278, r1

		rx1_counter++;
    3076:	80 91 79 02 	lds	r24, 0x0279
    307a:	8f 5f       	subi	r24, 0xFF	; 255
    307c:	80 93 79 02 	sts	0x0279, r24
	}
}
    3080:	0f 90       	pop	r0
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	ff 91       	pop	r31
    3088:	ef 91       	pop	r30
    308a:	9f 91       	pop	r25
    308c:	8f 91       	pop	r24
    308e:	3f 91       	pop	r19
    3090:	2f 91       	pop	r18
    3092:	0f 90       	pop	r0
    3094:	00 92 5b 00 	sts	0x005B, r0
    3098:	0f 90       	pop	r0
    309a:	00 92 5f 00 	sts	0x005F, r0
    309e:	0f 90       	pop	r0
    30a0:	1f 90       	pop	r1
    30a2:	18 95       	reti

000030a4 <altUart0Write>:

void altUart0Write(unsigned char data)
{
    30a4:	cf 93       	push	r28
    30a6:	df 93       	push	r29
    30a8:	1f 92       	push	r1
    30aa:	cd b7       	in	r28, 0x3d	; 61
    30ac:	de b7       	in	r29, 0x3e	; 62
    30ae:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
    30b0:	00 00       	nop
    30b2:	80 ec       	ldi	r24, 0xC0	; 192
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	fc 01       	movw	r30, r24
    30b8:	80 81       	ld	r24, Z
    30ba:	88 2f       	mov	r24, r24
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	80 72       	andi	r24, 0x20	; 32
    30c0:	99 27       	eor	r25, r25
    30c2:	89 2b       	or	r24, r25
    30c4:	b1 f3       	breq	.-20     	; 0x30b2 <altUart0Write+0xe>

	UDR0 = data;
    30c6:	86 ec       	ldi	r24, 0xC6	; 198
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	29 81       	ldd	r18, Y+1	; 0x01
    30cc:	fc 01       	movw	r30, r24
    30ce:	20 83       	st	Z, r18
}
    30d0:	0f 90       	pop	r0
    30d2:	df 91       	pop	r29
    30d4:	cf 91       	pop	r28
    30d6:	08 95       	ret

000030d8 <altUart1Write>:

void altUart1Write(unsigned char data)
{
    30d8:	cf 93       	push	r28
    30da:	df 93       	push	r29
    30dc:	1f 92       	push	r1
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
    30e4:	00 00       	nop
    30e6:	88 ec       	ldi	r24, 0xC8	; 200
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	fc 01       	movw	r30, r24
    30ec:	80 81       	ld	r24, Z
    30ee:	88 2f       	mov	r24, r24
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	80 72       	andi	r24, 0x20	; 32
    30f4:	99 27       	eor	r25, r25
    30f6:	89 2b       	or	r24, r25
    30f8:	b1 f3       	breq	.-20     	; 0x30e6 <altUart1Write+0xe>
	UDR1 = data;
    30fa:	8e ec       	ldi	r24, 0xCE	; 206
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	29 81       	ldd	r18, Y+1	; 0x01
    3100:	fc 01       	movw	r30, r24
    3102:	20 83       	st	Z, r18
}
    3104:	0f 90       	pop	r0
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	08 95       	ret

0000310c <UART1_Write>:
Slanje podataka USART1 modulom
**
**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
    3110:	1f 92       	push	r1
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
    3118:	89 ec       	ldi	r24, 0xC9	; 201
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	fc 01       	movw	r30, r24
    311e:	80 81       	ld	r24, Z
    3120:	82 95       	swap	r24
    3122:	86 95       	lsr	r24
    3124:	86 95       	lsr	r24
    3126:	83 70       	andi	r24, 0x03	; 3
    3128:	88 2f       	mov	r24, r24
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	81 70       	andi	r24, 0x01	; 1
    312e:	99 27       	eor	r25, r25
    3130:	89 2b       	or	r24, r25
    3132:	99 f1       	breq	.+102    	; 0x319a <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
    3134:	00 00       	nop
    3136:	80 91 36 02 	lds	r24, 0x0236
    313a:	80 34       	cpi	r24, 0x40	; 64
    313c:	e1 f3       	breq	.-8      	; 0x3136 <UART1_Write+0x2a>

		cli();
    313e:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
    3140:	80 91 36 02 	lds	r24, 0x0236
    3144:	88 23       	and	r24, r24
    3146:	51 f4       	brne	.+20     	; 0x315c <UART1_Write+0x50>
    3148:	88 ec       	ldi	r24, 0xC8	; 200
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	fc 01       	movw	r30, r24
    314e:	80 81       	ld	r24, Z
    3150:	88 2f       	mov	r24, r24
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	80 72       	andi	r24, 0x20	; 32
    3156:	99 27       	eor	r25, r25
    3158:	89 2b       	or	r24, r25
    315a:	c1 f4       	brne	.+48     	; 0x318c <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
    315c:	80 91 35 02 	lds	r24, 0x0235
    3160:	88 2f       	mov	r24, r24
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	8b 50       	subi	r24, 0x0B	; 11
    3166:	9e 4f       	sbci	r25, 0xFE	; 254
    3168:	29 81       	ldd	r18, Y+1	; 0x01
    316a:	fc 01       	movw	r30, r24
    316c:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
    316e:	80 91 35 02 	lds	r24, 0x0235
    3172:	8f 5f       	subi	r24, 0xFF	; 255
    3174:	80 93 35 02 	sts	0x0235, r24
    3178:	80 34       	cpi	r24, 0x40	; 64
    317a:	11 f4       	brne	.+4      	; 0x3180 <UART1_Write+0x74>
				tx1_wr_index = 0;
    317c:	10 92 35 02 	sts	0x0235, r1

			tx1_counter++;
    3180:	80 91 36 02 	lds	r24, 0x0236
    3184:	8f 5f       	subi	r24, 0xFF	; 255
    3186:	80 93 36 02 	sts	0x0236, r24
    318a:	05 c0       	rjmp	.+10     	; 0x3196 <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
    318c:	8e ec       	ldi	r24, 0xCE	; 206
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	29 81       	ldd	r18, Y+1	; 0x01
    3192:	fc 01       	movw	r30, r24
    3194:	20 83       	st	Z, r18

		sei();
    3196:	78 94       	sei
    3198:	03 c0       	rjmp	.+6      	; 0x31a0 <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <altUart1Write>
}
    31a0:	0f 90       	pop	r0
    31a2:	df 91       	pop	r29
    31a4:	cf 91       	pop	r28
    31a6:	08 95       	ret

000031a8 <UART1_Read>:

unsigned char UART1_Read(void)
{
    31a8:	cf 93       	push	r28
    31aa:	df 93       	push	r29
    31ac:	1f 92       	push	r1
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
    31b2:	89 ec       	ldi	r24, 0xC9	; 201
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	fc 01       	movw	r30, r24
    31b8:	80 81       	ld	r24, Z
    31ba:	88 1f       	adc	r24, r24
    31bc:	88 27       	eor	r24, r24
    31be:	88 1f       	adc	r24, r24
    31c0:	88 2f       	mov	r24, r24
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	81 70       	andi	r24, 0x01	; 1
    31c6:	99 27       	eor	r25, r25
    31c8:	89 2b       	or	r24, r25
    31ca:	e9 f0       	breq	.+58     	; 0x3206 <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
    31cc:	00 00       	nop
    31ce:	80 91 79 02 	lds	r24, 0x0279
    31d2:	88 23       	and	r24, r24
    31d4:	e1 f3       	breq	.-8      	; 0x31ce <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
    31d6:	80 91 7a 02 	lds	r24, 0x027A
    31da:	88 2f       	mov	r24, r24
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	88 5c       	subi	r24, 0xC8	; 200
    31e0:	9d 4f       	sbci	r25, 0xFD	; 253
    31e2:	fc 01       	movw	r30, r24
    31e4:	80 81       	ld	r24, Z
    31e6:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
    31e8:	80 91 7a 02 	lds	r24, 0x027A
    31ec:	8f 5f       	subi	r24, 0xFF	; 255
    31ee:	80 93 7a 02 	sts	0x027A, r24
    31f2:	80 34       	cpi	r24, 0x40	; 64
    31f4:	11 f4       	brne	.+4      	; 0x31fa <UART1_Read+0x52>
			rx1_rd_index = 0;
    31f6:	10 92 7a 02 	sts	0x027A, r1

		rx1_counter--;
    31fa:	80 91 79 02 	lds	r24, 0x0279
    31fe:	81 50       	subi	r24, 0x01	; 1
    3200:	80 93 79 02 	sts	0x0279, r24
    3204:	13 c0       	rjmp	.+38     	; 0x322c <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
    3206:	00 00       	nop
    3208:	88 ec       	ldi	r24, 0xC8	; 200
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	fc 01       	movw	r30, r24
    320e:	80 81       	ld	r24, Z
    3210:	88 1f       	adc	r24, r24
    3212:	88 27       	eor	r24, r24
    3214:	88 1f       	adc	r24, r24
    3216:	88 2f       	mov	r24, r24
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	81 70       	andi	r24, 0x01	; 1
    321c:	99 27       	eor	r25, r25
    321e:	89 2b       	or	r24, r25
    3220:	99 f3       	breq	.-26     	; 0x3208 <UART1_Read+0x60>
		data = UDR1;
    3222:	8e ec       	ldi	r24, 0xCE	; 206
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	fc 01       	movw	r30, r24
    3228:	80 81       	ld	r24, Z
    322a:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    322c:	89 81       	ldd	r24, Y+1	; 0x01
}
    322e:	0f 90       	pop	r0
    3230:	df 91       	pop	r29
    3232:	cf 91       	pop	r28
    3234:	08 95       	ret

00003236 <UART1_Buffer>:

void UART1_Buffer(uint8_t* str) {
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	00 d0       	rcall	.+0      	; 0x323c <UART1_Buffer+0x6>
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	9a 83       	std	Y+2, r25	; 0x02
    3242:	89 83       	std	Y+1, r24	; 0x01
	while(*str) {
    3244:	0b c0       	rjmp	.+22     	; 0x325c <UART1_Buffer+0x26>
		altUart1Write(*str++);
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	9a 81       	ldd	r25, Y+2	; 0x02
    324a:	9c 01       	movw	r18, r24
    324c:	2f 5f       	subi	r18, 0xFF	; 255
    324e:	3f 4f       	sbci	r19, 0xFF	; 255
    3250:	3a 83       	std	Y+2, r19	; 0x02
    3252:	29 83       	std	Y+1, r18	; 0x01
    3254:	fc 01       	movw	r30, r24
    3256:	80 81       	ld	r24, Z
    3258:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <altUart1Write>

	return data;
}

void UART1_Buffer(uint8_t* str) {
	while(*str) {
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	9a 81       	ldd	r25, Y+2	; 0x02
    3260:	fc 01       	movw	r30, r24
    3262:	80 81       	ld	r24, Z
    3264:	88 23       	and	r24, r24
    3266:	79 f7       	brne	.-34     	; 0x3246 <UART1_Buffer+0x10>
		altUart1Write(*str++);
	}
}
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	df 91       	pop	r29
    326e:	cf 91       	pop	r28
    3270:	08 95       	ret

00003272 <test_sensor>:
#include "actuator.h"

// if this is defined it will execute the coordinates for the "first desk" if commented it will moveon to the "second desk"
#define first_desk

char test_sensor(unsigned long start_time) {
    3272:	cf 93       	push	r28
    3274:	df 93       	push	r29
    3276:	00 d0       	rcall	.+0      	; 0x3278 <test_sensor+0x6>
    3278:	00 d0       	rcall	.+0      	; 0x327a <test_sensor+0x8>
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	69 83       	std	Y+1, r22	; 0x01
    3280:	7a 83       	std	Y+2, r23	; 0x02
    3282:	8b 83       	std	Y+3, r24	; 0x03
    3284:	9c 83       	std	Y+4, r25	; 0x04
	if(gpio_read_pin(0) == 1) {
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	0e 94 40 09 	call	0x1280	; 0x1280 <gpio_read_pin>
    328c:	81 30       	cpi	r24, 0x01	; 1
    328e:	29 f4       	brne	.+10     	; 0x329a <test_sensor+0x28>
		odometry_stop(HARD_STOP);
    3290:	83 e5       	ldi	r24, 0x53	; 83
    3292:	0e 94 a5 0b 	call	0x174a	; 0x174a <odometry_stop>
		return 1;
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	01 c0       	rjmp	.+2      	; 0x329c <test_sensor+0x2a>
	}

	return 0;
    329a:	80 e0       	ldi	r24, 0x00	; 0
}
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	df 91       	pop	r29
    32a6:	cf 91       	pop	r28
    32a8:	08 95       	ret

000032aa <wait_while_detection_tactic_one>:

/*
 * 	Function: static void wait_while_detection_tactic_one(void)
 * 	Description: This will wait until the callback(sensor) is returning 1, so called detecting the enemy
 */
static void wait_while_detection_tactic_one(void) {
    32aa:	cf 93       	push	r28
    32ac:	df 93       	push	r29
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	6c 97       	sbiw	r28, 0x1c	; 28
    32b4:	0f b6       	in	r0, 0x3f	; 63
    32b6:	f8 94       	cli
    32b8:	de bf       	out	0x3e, r29	; 62
    32ba:	0f be       	out	0x3f, r0	; 63
    32bc:	cd bf       	out	0x3d, r28	; 61
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	a8 e4       	ldi	r26, 0x48	; 72
    32c4:	b3 e4       	ldi	r27, 0x43	; 67
    32c6:	89 83       	std	Y+1, r24	; 0x01
    32c8:	9a 83       	std	Y+2, r25	; 0x02
    32ca:	ab 83       	std	Y+3, r26	; 0x03
    32cc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e4       	ldi	r19, 0x40	; 64
    32d2:	4c e1       	ldi	r20, 0x1C	; 28
    32d4:	55 e4       	ldi	r21, 0x45	; 69
    32d6:	69 81       	ldd	r22, Y+1	; 0x01
    32d8:	7a 81       	ldd	r23, Y+2	; 0x02
    32da:	8b 81       	ldd	r24, Y+3	; 0x03
    32dc:	9c 81       	ldd	r25, Y+4	; 0x04
    32de:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	8d 83       	std	Y+5, r24	; 0x05
    32e8:	9e 83       	std	Y+6, r25	; 0x06
    32ea:	af 83       	std	Y+7, r26	; 0x07
    32ec:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	40 e8       	ldi	r20, 0x80	; 128
    32f4:	5f e3       	ldi	r21, 0x3F	; 63
    32f6:	6d 81       	ldd	r22, Y+5	; 0x05
    32f8:	7e 81       	ldd	r23, Y+6	; 0x06
    32fa:	8f 81       	ldd	r24, Y+7	; 0x07
    32fc:	98 85       	ldd	r25, Y+8	; 0x08
    32fe:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    3302:	88 23       	and	r24, r24
    3304:	2c f4       	brge	.+10     	; 0x3310 <wait_while_detection_tactic_one+0x66>
		__ticks = 1;
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	9a 87       	std	Y+10, r25	; 0x0a
    330c:	89 87       	std	Y+9, r24	; 0x09
    330e:	3f c0       	rjmp	.+126    	; 0x338e <wait_while_detection_tactic_one+0xe4>
	else if (__tmp > 65535)
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	3f ef       	ldi	r19, 0xFF	; 255
    3314:	4f e7       	ldi	r20, 0x7F	; 127
    3316:	57 e4       	ldi	r21, 0x47	; 71
    3318:	6d 81       	ldd	r22, Y+5	; 0x05
    331a:	7e 81       	ldd	r23, Y+6	; 0x06
    331c:	8f 81       	ldd	r24, Y+7	; 0x07
    331e:	98 85       	ldd	r25, Y+8	; 0x08
    3320:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    3324:	18 16       	cp	r1, r24
    3326:	4c f5       	brge	.+82     	; 0x337a <wait_while_detection_tactic_one+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e2       	ldi	r20, 0x20	; 32
    332e:	51 e4       	ldi	r21, 0x41	; 65
    3330:	69 81       	ldd	r22, Y+1	; 0x01
    3332:	7a 81       	ldd	r23, Y+2	; 0x02
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	9c 81       	ldd	r25, Y+4	; 0x04
    3338:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	bc 01       	movw	r22, r24
    3342:	cd 01       	movw	r24, r26
    3344:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	9a 87       	std	Y+10, r25	; 0x0a
    334e:	89 87       	std	Y+9, r24	; 0x09
    3350:	0f c0       	rjmp	.+30     	; 0x3370 <wait_while_detection_tactic_one+0xc6>
    3352:	8a ef       	ldi	r24, 0xFA	; 250
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	9c 87       	std	Y+12, r25	; 0x0c
    3358:	8b 87       	std	Y+11, r24	; 0x0b
    335a:	8b 85       	ldd	r24, Y+11	; 0x0b
    335c:	9c 85       	ldd	r25, Y+12	; 0x0c
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	f1 f7       	brne	.-4      	; 0x335e <wait_while_detection_tactic_one+0xb4>
    3362:	9c 87       	std	Y+12, r25	; 0x0c
    3364:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3366:	89 85       	ldd	r24, Y+9	; 0x09
    3368:	9a 85       	ldd	r25, Y+10	; 0x0a
    336a:	01 97       	sbiw	r24, 0x01	; 1
    336c:	9a 87       	std	Y+10, r25	; 0x0a
    336e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3370:	89 85       	ldd	r24, Y+9	; 0x09
    3372:	9a 85       	ldd	r25, Y+10	; 0x0a
    3374:	89 2b       	or	r24, r25
    3376:	69 f7       	brne	.-38     	; 0x3352 <wait_while_detection_tactic_one+0xa8>
    3378:	14 c0       	rjmp	.+40     	; 0x33a2 <wait_while_detection_tactic_one+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    337a:	6d 81       	ldd	r22, Y+5	; 0x05
    337c:	7e 81       	ldd	r23, Y+6	; 0x06
    337e:	8f 81       	ldd	r24, Y+7	; 0x07
    3380:	98 85       	ldd	r25, Y+8	; 0x08
    3382:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	9a 87       	std	Y+10, r25	; 0x0a
    338c:	89 87       	std	Y+9, r24	; 0x09
    338e:	89 85       	ldd	r24, Y+9	; 0x09
    3390:	9a 85       	ldd	r25, Y+10	; 0x0a
    3392:	9e 87       	std	Y+14, r25	; 0x0e
    3394:	8d 87       	std	Y+13, r24	; 0x0d
    3396:	8d 85       	ldd	r24, Y+13	; 0x0d
    3398:	9e 85       	ldd	r25, Y+14	; 0x0e
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	f1 f7       	brne	.-4      	; 0x339a <wait_while_detection_tactic_one+0xf0>
    339e:	9e 87       	std	Y+14, r25	; 0x0e
    33a0:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(200);
	while(TACTIC_ONE_POSITION[current_position].callback(0) == 1)
    33a2:	72 c0       	rjmp	.+228    	; 0x3488 <wait_while_detection_tactic_one+0x1de>
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	a0 e2       	ldi	r26, 0x20	; 32
    33aa:	b1 e4       	ldi	r27, 0x41	; 65
    33ac:	8f 87       	std	Y+15, r24	; 0x0f
    33ae:	98 8b       	std	Y+16, r25	; 0x10
    33b0:	a9 8b       	std	Y+17, r26	; 0x11
    33b2:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e4       	ldi	r19, 0x40	; 64
    33b8:	4c e1       	ldi	r20, 0x1C	; 28
    33ba:	55 e4       	ldi	r21, 0x45	; 69
    33bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    33be:	78 89       	ldd	r23, Y+16	; 0x10
    33c0:	89 89       	ldd	r24, Y+17	; 0x11
    33c2:	9a 89       	ldd	r25, Y+18	; 0x12
    33c4:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	8b 8b       	std	Y+19, r24	; 0x13
    33ce:	9c 8b       	std	Y+20, r25	; 0x14
    33d0:	ad 8b       	std	Y+21, r26	; 0x15
    33d2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e8       	ldi	r20, 0x80	; 128
    33da:	5f e3       	ldi	r21, 0x3F	; 63
    33dc:	6b 89       	ldd	r22, Y+19	; 0x13
    33de:	7c 89       	ldd	r23, Y+20	; 0x14
    33e0:	8d 89       	ldd	r24, Y+21	; 0x15
    33e2:	9e 89       	ldd	r25, Y+22	; 0x16
    33e4:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    33e8:	88 23       	and	r24, r24
    33ea:	2c f4       	brge	.+10     	; 0x33f6 <wait_while_detection_tactic_one+0x14c>
		__ticks = 1;
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	98 8f       	std	Y+24, r25	; 0x18
    33f2:	8f 8b       	std	Y+23, r24	; 0x17
    33f4:	3f c0       	rjmp	.+126    	; 0x3474 <wait_while_detection_tactic_one+0x1ca>
	else if (__tmp > 65535)
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	3f ef       	ldi	r19, 0xFF	; 255
    33fa:	4f e7       	ldi	r20, 0x7F	; 127
    33fc:	57 e4       	ldi	r21, 0x47	; 71
    33fe:	6b 89       	ldd	r22, Y+19	; 0x13
    3400:	7c 89       	ldd	r23, Y+20	; 0x14
    3402:	8d 89       	ldd	r24, Y+21	; 0x15
    3404:	9e 89       	ldd	r25, Y+22	; 0x16
    3406:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    340a:	18 16       	cp	r1, r24
    340c:	4c f5       	brge	.+82     	; 0x3460 <wait_while_detection_tactic_one+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	40 e2       	ldi	r20, 0x20	; 32
    3414:	51 e4       	ldi	r21, 0x41	; 65
    3416:	6f 85       	ldd	r22, Y+15	; 0x0f
    3418:	78 89       	ldd	r23, Y+16	; 0x10
    341a:	89 89       	ldd	r24, Y+17	; 0x11
    341c:	9a 89       	ldd	r25, Y+18	; 0x12
    341e:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	bc 01       	movw	r22, r24
    3428:	cd 01       	movw	r24, r26
    342a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	98 8f       	std	Y+24, r25	; 0x18
    3434:	8f 8b       	std	Y+23, r24	; 0x17
    3436:	0f c0       	rjmp	.+30     	; 0x3456 <wait_while_detection_tactic_one+0x1ac>
    3438:	8a ef       	ldi	r24, 0xFA	; 250
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	9a 8f       	std	Y+26, r25	; 0x1a
    343e:	89 8f       	std	Y+25, r24	; 0x19
    3440:	89 8d       	ldd	r24, Y+25	; 0x19
    3442:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	f1 f7       	brne	.-4      	; 0x3444 <wait_while_detection_tactic_one+0x19a>
    3448:	9a 8f       	std	Y+26, r25	; 0x1a
    344a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344c:	8f 89       	ldd	r24, Y+23	; 0x17
    344e:	98 8d       	ldd	r25, Y+24	; 0x18
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	98 8f       	std	Y+24, r25	; 0x18
    3454:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3456:	8f 89       	ldd	r24, Y+23	; 0x17
    3458:	98 8d       	ldd	r25, Y+24	; 0x18
    345a:	89 2b       	or	r24, r25
    345c:	69 f7       	brne	.-38     	; 0x3438 <wait_while_detection_tactic_one+0x18e>
    345e:	14 c0       	rjmp	.+40     	; 0x3488 <wait_while_detection_tactic_one+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3460:	6b 89       	ldd	r22, Y+19	; 0x13
    3462:	7c 89       	ldd	r23, Y+20	; 0x14
    3464:	8d 89       	ldd	r24, Y+21	; 0x15
    3466:	9e 89       	ldd	r25, Y+22	; 0x16
    3468:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	98 8f       	std	Y+24, r25	; 0x18
    3472:	8f 8b       	std	Y+23, r24	; 0x17
    3474:	8f 89       	ldd	r24, Y+23	; 0x17
    3476:	98 8d       	ldd	r25, Y+24	; 0x18
    3478:	9c 8f       	std	Y+28, r25	; 0x1c
    347a:	8b 8f       	std	Y+27, r24	; 0x1b
    347c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    347e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	f1 f7       	brne	.-4      	; 0x3480 <wait_while_detection_tactic_one+0x1d6>
    3484:	9c 8f       	std	Y+28, r25	; 0x1c
    3486:	8b 8f       	std	Y+27, r24	; 0x1b
    3488:	80 91 7b 02 	lds	r24, 0x027B
    348c:	28 2f       	mov	r18, r24
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	4b e0       	ldi	r20, 0x0B	; 11
    3492:	42 9f       	mul	r20, r18
    3494:	c0 01       	movw	r24, r0
    3496:	43 9f       	mul	r20, r19
    3498:	90 0d       	add	r25, r0
    349a:	11 24       	eor	r1, r1
    349c:	80 5e       	subi	r24, 0xE0	; 224
    349e:	9e 4f       	sbci	r25, 0xFE	; 254
    34a0:	fc 01       	movw	r30, r24
    34a2:	20 81       	ld	r18, Z
    34a4:	31 81       	ldd	r19, Z+1	; 0x01
    34a6:	60 e0       	ldi	r22, 0x00	; 0
    34a8:	70 e0       	ldi	r23, 0x00	; 0
    34aa:	cb 01       	movw	r24, r22
    34ac:	f9 01       	movw	r30, r18
    34ae:	09 95       	icall
    34b0:	81 30       	cpi	r24, 0x01	; 1
    34b2:	09 f4       	brne	.+2      	; 0x34b6 <wait_while_detection_tactic_one+0x20c>
    34b4:	77 cf       	rjmp	.-274    	; 0x33a4 <wait_while_detection_tactic_one+0xfa>
		_delay_ms(10);
	next_position = current_position;
    34b6:	80 91 7b 02 	lds	r24, 0x027B
    34ba:	80 93 7c 02 	sts	0x027C, r24
	active_state = TACTIC_ONE;
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	80 93 16 01 	sts	0x0116, r24

}
    34c4:	6c 96       	adiw	r28, 0x1c	; 28
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	f8 94       	cli
    34ca:	de bf       	out	0x3e, r29	; 62
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	cd bf       	out	0x3d, r28	; 61
    34d0:	df 91       	pop	r29
    34d2:	cf 91       	pop	r28
    34d4:	08 95       	ret

000034d6 <darkside>:

void darkside(void) {
    34d6:	cf 93       	push	r28
    34d8:	df 93       	push	r29
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
    34de:	a3 97       	sbiw	r28, 0x23	; 35
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	cd bf       	out	0x3d, r28	; 61


	// setting the starting position
	struct odometry_position startingPosition; startingPosition.x = 0; startingPosition.y = 0; startingPosition.angle = 0;
    34ea:	1e 8e       	std	Y+30, r1	; 0x1e
    34ec:	1d 8e       	std	Y+29, r1	; 0x1d
    34ee:	18 a2       	std	Y+32, r1	; 0x20
    34f0:	1f 8e       	std	Y+31, r1	; 0x1f
    34f2:	1a a2       	std	Y+34, r1	; 0x22
    34f4:	19 a2       	std	Y+33, r1	; 0x21

	// sending the starting position to odometry
	odometry_set_position(&startingPosition);
    34f6:	ce 01       	movw	r24, r28
    34f8:	4d 96       	adiw	r24, 0x1d	; 29
    34fa:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <odometry_set_position>

	while(1) {
		switch(active_state) {
    34fe:	80 91 16 01 	lds	r24, 0x0116
    3502:	88 2f       	mov	r24, r24
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	81 30       	cpi	r24, 0x01	; 1
    3508:	91 05       	cpc	r25, r1
    350a:	09 f4       	brne	.+2      	; 0x350e <darkside+0x38>
    350c:	8f c0       	rjmp	.+286    	; 0x362c <darkside+0x156>
    350e:	83 35       	cpi	r24, 0x53	; 83
    3510:	91 05       	cpc	r25, r1
    3512:	91 f0       	breq	.+36     	; 0x3538 <darkside+0x62>
    3514:	89 2b       	or	r24, r25
    3516:	09 f0       	breq	.+2      	; 0x351a <darkside+0x44>
    3518:	59 c1       	rjmp	.+690    	; 0x37cc <darkside+0x2f6>
		case COLLISION:		// COLLISION ! DON'T FORGET BREAK !
			if(current_position == 0) {
    351a:	80 91 7b 02 	lds	r24, 0x027B
    351e:	88 23       	and	r24, r24
    3520:	19 f4       	brne	.+6      	; 0x3528 <darkside+0x52>
				wait_while_detection_tactic_one();
    3522:	0e 94 55 19 	call	0x32aa	; 0x32aa <wait_while_detection_tactic_one>
				break;
    3526:	52 c1       	rjmp	.+676    	; 0x37cc <darkside+0x2f6>
			} else if(current_position == 1) {
    3528:	80 91 7b 02 	lds	r24, 0x027B
    352c:	81 30       	cpi	r24, 0x01	; 1
    352e:	19 f4       	brne	.+6      	; 0x3536 <darkside+0x60>
				wait_while_detection_tactic_one();
    3530:	0e 94 55 19 	call	0x32aa	; 0x32aa <wait_while_detection_tactic_one>
				break;
    3534:	4b c1       	rjmp	.+662    	; 0x37cc <darkside+0x2f6>
			}

			break;
    3536:	4a c1       	rjmp	.+660    	; 0x37cc <darkside+0x2f6>
    3538:	80 e0       	ldi	r24, 0x00	; 0
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	aa e7       	ldi	r26, 0x7A	; 122
    353e:	b4 e4       	ldi	r27, 0x44	; 68
    3540:	89 83       	std	Y+1, r24	; 0x01
    3542:	9a 83       	std	Y+2, r25	; 0x02
    3544:	ab 83       	std	Y+3, r26	; 0x03
    3546:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e4       	ldi	r19, 0x40	; 64
    354c:	4c e1       	ldi	r20, 0x1C	; 28
    354e:	55 e4       	ldi	r21, 0x45	; 69
    3550:	69 81       	ldd	r22, Y+1	; 0x01
    3552:	7a 81       	ldd	r23, Y+2	; 0x02
    3554:	8b 81       	ldd	r24, Y+3	; 0x03
    3556:	9c 81       	ldd	r25, Y+4	; 0x04
    3558:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	8d 83       	std	Y+5, r24	; 0x05
    3562:	9e 83       	std	Y+6, r25	; 0x06
    3564:	af 83       	std	Y+7, r26	; 0x07
    3566:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	40 e8       	ldi	r20, 0x80	; 128
    356e:	5f e3       	ldi	r21, 0x3F	; 63
    3570:	6d 81       	ldd	r22, Y+5	; 0x05
    3572:	7e 81       	ldd	r23, Y+6	; 0x06
    3574:	8f 81       	ldd	r24, Y+7	; 0x07
    3576:	98 85       	ldd	r25, Y+8	; 0x08
    3578:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    357c:	88 23       	and	r24, r24
    357e:	2c f4       	brge	.+10     	; 0x358a <darkside+0xb4>
		__ticks = 1;
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	9a 87       	std	Y+10, r25	; 0x0a
    3586:	89 87       	std	Y+9, r24	; 0x09
    3588:	3f c0       	rjmp	.+126    	; 0x3608 <darkside+0x132>
	else if (__tmp > 65535)
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	3f ef       	ldi	r19, 0xFF	; 255
    358e:	4f e7       	ldi	r20, 0x7F	; 127
    3590:	57 e4       	ldi	r21, 0x47	; 71
    3592:	6d 81       	ldd	r22, Y+5	; 0x05
    3594:	7e 81       	ldd	r23, Y+6	; 0x06
    3596:	8f 81       	ldd	r24, Y+7	; 0x07
    3598:	98 85       	ldd	r25, Y+8	; 0x08
    359a:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    359e:	18 16       	cp	r1, r24
    35a0:	4c f5       	brge	.+82     	; 0x35f4 <darkside+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e2       	ldi	r20, 0x20	; 32
    35a8:	51 e4       	ldi	r21, 0x41	; 65
    35aa:	69 81       	ldd	r22, Y+1	; 0x01
    35ac:	7a 81       	ldd	r23, Y+2	; 0x02
    35ae:	8b 81       	ldd	r24, Y+3	; 0x03
    35b0:	9c 81       	ldd	r25, Y+4	; 0x04
    35b2:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    35b6:	dc 01       	movw	r26, r24
    35b8:	cb 01       	movw	r24, r22
    35ba:	bc 01       	movw	r22, r24
    35bc:	cd 01       	movw	r24, r26
    35be:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	9a 87       	std	Y+10, r25	; 0x0a
    35c8:	89 87       	std	Y+9, r24	; 0x09
    35ca:	0f c0       	rjmp	.+30     	; 0x35ea <darkside+0x114>
    35cc:	8a ef       	ldi	r24, 0xFA	; 250
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	9c 87       	std	Y+12, r25	; 0x0c
    35d2:	8b 87       	std	Y+11, r24	; 0x0b
    35d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    35d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	f1 f7       	brne	.-4      	; 0x35d8 <darkside+0x102>
    35dc:	9c 87       	std	Y+12, r25	; 0x0c
    35de:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e0:	89 85       	ldd	r24, Y+9	; 0x09
    35e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	9a 87       	std	Y+10, r25	; 0x0a
    35e8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ea:	89 85       	ldd	r24, Y+9	; 0x09
    35ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ee:	89 2b       	or	r24, r25
    35f0:	69 f7       	brne	.-38     	; 0x35cc <darkside+0xf6>
    35f2:	14 c0       	rjmp	.+40     	; 0x361c <darkside+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35f4:	6d 81       	ldd	r22, Y+5	; 0x05
    35f6:	7e 81       	ldd	r23, Y+6	; 0x06
    35f8:	8f 81       	ldd	r24, Y+7	; 0x07
    35fa:	98 85       	ldd	r25, Y+8	; 0x08
    35fc:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	9a 87       	std	Y+10, r25	; 0x0a
    3606:	89 87       	std	Y+9, r24	; 0x09
    3608:	89 85       	ldd	r24, Y+9	; 0x09
    360a:	9a 85       	ldd	r25, Y+10	; 0x0a
    360c:	9e 87       	std	Y+14, r25	; 0x0e
    360e:	8d 87       	std	Y+13, r24	; 0x0d
    3610:	8d 85       	ldd	r24, Y+13	; 0x0d
    3612:	9e 85       	ldd	r25, Y+14	; 0x0e
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	f1 f7       	brne	.-4      	; 0x3614 <darkside+0x13e>
    3618:	9e 87       	std	Y+14, r25	; 0x0e
    361a:	8d 87       	std	Y+13, r24	; 0x0d
		case STUCK:			// STUCK
			_delay_ms(1000);
			active_state = TACTIC_ONE;
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	80 93 16 01 	sts	0x0116, r24
			next_position = current_position;
    3622:	80 91 7b 02 	lds	r24, 0x027B
    3626:	80 93 7c 02 	sts	0x027C, r24

			break;
    362a:	d0 c0       	rjmp	.+416    	; 0x37cc <darkside+0x2f6>
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    362c:	80 91 7c 02 	lds	r24, 0x027C
    3630:	80 93 7b 02 	sts	0x027B, r24
    3634:	c6 c0       	rjmp	.+396    	; 0x37c2 <darkside+0x2ec>

				// send the gotoField and receive status
				odometry_status = odometry_move_to_position(&TACTIC_ONE_POSITION[current_position].point, TACTIC_ONE_POSITION[current_position].speed, TACTIC_ONE_POSITION[current_position].direction, TACTIC_ONE_POSITION[current_position].callback);
    3636:	80 91 7b 02 	lds	r24, 0x027B
    363a:	28 2f       	mov	r18, r24
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	4b e0       	ldi	r20, 0x0B	; 11
    3640:	42 9f       	mul	r20, r18
    3642:	c0 01       	movw	r24, r0
    3644:	43 9f       	mul	r20, r19
    3646:	90 0d       	add	r25, r0
    3648:	11 24       	eor	r1, r1
    364a:	80 5e       	subi	r24, 0xE0	; 224
    364c:	9e 4f       	sbci	r25, 0xFE	; 254
    364e:	dc 01       	movw	r26, r24
    3650:	4d 91       	ld	r20, X+
    3652:	5c 91       	ld	r21, X
    3654:	80 91 7b 02 	lds	r24, 0x027B
    3658:	28 2f       	mov	r18, r24
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	6b e0       	ldi	r22, 0x0B	; 11
    365e:	62 9f       	mul	r22, r18
    3660:	c0 01       	movw	r24, r0
    3662:	63 9f       	mul	r22, r19
    3664:	90 0d       	add	r25, r0
    3666:	11 24       	eor	r1, r1
    3668:	81 5e       	subi	r24, 0xE1	; 225
    366a:	9e 4f       	sbci	r25, 0xFE	; 254
    366c:	dc 01       	movw	r26, r24
    366e:	ec 91       	ld	r30, X
    3670:	80 91 7b 02 	lds	r24, 0x027B
    3674:	28 2f       	mov	r18, r24
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	6b e0       	ldi	r22, 0x0B	; 11
    367a:	62 9f       	mul	r22, r18
    367c:	c0 01       	movw	r24, r0
    367e:	63 9f       	mul	r22, r19
    3680:	90 0d       	add	r25, r0
    3682:	11 24       	eor	r1, r1
    3684:	82 5e       	subi	r24, 0xE2	; 226
    3686:	9e 4f       	sbci	r25, 0xFE	; 254
    3688:	dc 01       	movw	r26, r24
    368a:	7c 91       	ld	r23, X
    368c:	80 91 7b 02 	lds	r24, 0x027B
    3690:	28 2f       	mov	r18, r24
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	6b e0       	ldi	r22, 0x0B	; 11
    3696:	62 9f       	mul	r22, r18
    3698:	c0 01       	movw	r24, r0
    369a:	63 9f       	mul	r22, r19
    369c:	90 0d       	add	r25, r0
    369e:	11 24       	eor	r1, r1
    36a0:	89 5e       	subi	r24, 0xE9	; 233
    36a2:	9e 4f       	sbci	r25, 0xFE	; 254
    36a4:	9a 01       	movw	r18, r20
    36a6:	4e 2f       	mov	r20, r30
    36a8:	67 2f       	mov	r22, r23
    36aa:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <odometry_move_to_position>
    36ae:	80 93 7d 02 	sts	0x027D, r24

				// if odometry fails set state to collision
				if(odometry_status == ODOMETRY_FAIL)
    36b2:	80 91 7d 02 	lds	r24, 0x027D
    36b6:	81 30       	cpi	r24, 0x01	; 1
    36b8:	19 f4       	brne	.+6      	; 0x36c0 <darkside+0x1ea>
				{
					active_state = COLLISION;
    36ba:	10 92 16 01 	sts	0x0116, r1
					break;
    36be:	86 c0       	rjmp	.+268    	; 0x37cc <darkside+0x2f6>
				}
				else if(odometry_status == ODOMETRY_STUCK)
				{

				}
				if(current_position == 0) {
    36c0:	80 91 7b 02 	lds	r24, 0x027B
    36c4:	88 23       	and	r24, r24
    36c6:	09 f0       	breq	.+2      	; 0x36ca <darkside+0x1f4>
    36c8:	72 c0       	rjmp	.+228    	; 0x37ae <darkside+0x2d8>
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	aa ef       	ldi	r26, 0xFA	; 250
    36d0:	b4 e4       	ldi	r27, 0x44	; 68
    36d2:	8f 87       	std	Y+15, r24	; 0x0f
    36d4:	98 8b       	std	Y+16, r25	; 0x10
    36d6:	a9 8b       	std	Y+17, r26	; 0x11
    36d8:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e4       	ldi	r19, 0x40	; 64
    36de:	4c e1       	ldi	r20, 0x1C	; 28
    36e0:	55 e4       	ldi	r21, 0x45	; 69
    36e2:	6f 85       	ldd	r22, Y+15	; 0x0f
    36e4:	78 89       	ldd	r23, Y+16	; 0x10
    36e6:	89 89       	ldd	r24, Y+17	; 0x11
    36e8:	9a 89       	ldd	r25, Y+18	; 0x12
    36ea:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	8b 8b       	std	Y+19, r24	; 0x13
    36f4:	9c 8b       	std	Y+20, r25	; 0x14
    36f6:	ad 8b       	std	Y+21, r26	; 0x15
    36f8:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	40 e8       	ldi	r20, 0x80	; 128
    3700:	5f e3       	ldi	r21, 0x3F	; 63
    3702:	6b 89       	ldd	r22, Y+19	; 0x13
    3704:	7c 89       	ldd	r23, Y+20	; 0x14
    3706:	8d 89       	ldd	r24, Y+21	; 0x15
    3708:	9e 89       	ldd	r25, Y+22	; 0x16
    370a:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    370e:	88 23       	and	r24, r24
    3710:	2c f4       	brge	.+10     	; 0x371c <darkside+0x246>
		__ticks = 1;
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	98 8f       	std	Y+24, r25	; 0x18
    3718:	8f 8b       	std	Y+23, r24	; 0x17
    371a:	3f c0       	rjmp	.+126    	; 0x379a <darkside+0x2c4>
	else if (__tmp > 65535)
    371c:	20 e0       	ldi	r18, 0x00	; 0
    371e:	3f ef       	ldi	r19, 0xFF	; 255
    3720:	4f e7       	ldi	r20, 0x7F	; 127
    3722:	57 e4       	ldi	r21, 0x47	; 71
    3724:	6b 89       	ldd	r22, Y+19	; 0x13
    3726:	7c 89       	ldd	r23, Y+20	; 0x14
    3728:	8d 89       	ldd	r24, Y+21	; 0x15
    372a:	9e 89       	ldd	r25, Y+22	; 0x16
    372c:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    3730:	18 16       	cp	r1, r24
    3732:	4c f5       	brge	.+82     	; 0x3786 <darkside+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	40 e2       	ldi	r20, 0x20	; 32
    373a:	51 e4       	ldi	r21, 0x41	; 65
    373c:	6f 85       	ldd	r22, Y+15	; 0x0f
    373e:	78 89       	ldd	r23, Y+16	; 0x10
    3740:	89 89       	ldd	r24, Y+17	; 0x11
    3742:	9a 89       	ldd	r25, Y+18	; 0x12
    3744:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	bc 01       	movw	r22, r24
    374e:	cd 01       	movw	r24, r26
    3750:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	98 8f       	std	Y+24, r25	; 0x18
    375a:	8f 8b       	std	Y+23, r24	; 0x17
    375c:	0f c0       	rjmp	.+30     	; 0x377c <darkside+0x2a6>
    375e:	8a ef       	ldi	r24, 0xFA	; 250
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	9a 8f       	std	Y+26, r25	; 0x1a
    3764:	89 8f       	std	Y+25, r24	; 0x19
    3766:	89 8d       	ldd	r24, Y+25	; 0x19
    3768:	9a 8d       	ldd	r25, Y+26	; 0x1a
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	f1 f7       	brne	.-4      	; 0x376a <darkside+0x294>
    376e:	9a 8f       	std	Y+26, r25	; 0x1a
    3770:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3772:	8f 89       	ldd	r24, Y+23	; 0x17
    3774:	98 8d       	ldd	r25, Y+24	; 0x18
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	98 8f       	std	Y+24, r25	; 0x18
    377a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377c:	8f 89       	ldd	r24, Y+23	; 0x17
    377e:	98 8d       	ldd	r25, Y+24	; 0x18
    3780:	89 2b       	or	r24, r25
    3782:	69 f7       	brne	.-38     	; 0x375e <darkside+0x288>
    3784:	14 c0       	rjmp	.+40     	; 0x37ae <darkside+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3786:	6b 89       	ldd	r22, Y+19	; 0x13
    3788:	7c 89       	ldd	r23, Y+20	; 0x14
    378a:	8d 89       	ldd	r24, Y+21	; 0x15
    378c:	9e 89       	ldd	r25, Y+22	; 0x16
    378e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	98 8f       	std	Y+24, r25	; 0x18
    3798:	8f 8b       	std	Y+23, r24	; 0x17
    379a:	8f 89       	ldd	r24, Y+23	; 0x17
    379c:	98 8d       	ldd	r25, Y+24	; 0x18
    379e:	9c 8f       	std	Y+28, r25	; 0x1c
    37a0:	8b 8f       	std	Y+27, r24	; 0x1b
    37a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <darkside+0x2d0>
    37aa:	9c 8f       	std	Y+28, r25	; 0x1c
    37ac:	8b 8f       	std	Y+27, r24	; 0x1b
					_delay_ms(2000);
				}
				// last position
				if(current_position == (TACTIC_ONE_POSITION_COUNT - 1))
    37ae:	80 91 7b 02 	lds	r24, 0x027B
    37b2:	81 30       	cpi	r24, 0x01	; 1
    37b4:	09 f4       	brne	.+2      	; 0x37b8 <darkside+0x2e2>
				{
					while(1);
    37b6:	ff cf       	rjmp	.-2      	; 0x37b6 <darkside+0x2e0>
			active_state = TACTIC_ONE;
			next_position = current_position;

			break;
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    37b8:	80 91 7b 02 	lds	r24, 0x027B
    37bc:	8f 5f       	subi	r24, 0xFF	; 255
    37be:	80 93 7b 02 	sts	0x027B, r24
    37c2:	80 91 7b 02 	lds	r24, 0x027B
    37c6:	82 30       	cpi	r24, 0x02	; 2
    37c8:	08 f4       	brcc	.+2      	; 0x37cc <darkside+0x2f6>
    37ca:	35 cf       	rjmp	.-406    	; 0x3636 <darkside+0x160>
				{
					while(1);
				}
			}//end of for
		}//end of switch
	}//end of while
    37cc:	98 ce       	rjmp	.-720    	; 0x34fe <darkside+0x28>

000037ce <main>:
#include "debug.h"
#include "can.h"
#include <avr/interrupt.h>

int main()
{
    37ce:	cf 93       	push	r28
    37d0:	df 93       	push	r29
    37d2:	cd b7       	in	r28, 0x3d	; 61
    37d4:	de b7       	in	r29, 0x3e	; 62
    37d6:	aa 97       	sbiw	r28, 0x2a	; 42
    37d8:	0f b6       	in	r0, 0x3f	; 63
    37da:	f8 94       	cli
    37dc:	de bf       	out	0x3e, r29	; 62
    37de:	0f be       	out	0x3f, r0	; 63
    37e0:	cd bf       	out	0x3d, r28	; 61


	system_init();
    37e2:	0e 94 0d 14 	call	0x281a	; 0x281a <system_init>
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	90 e8       	ldi	r25, 0x80	; 128
    37ea:	ab e3       	ldi	r26, 0x3B	; 59
    37ec:	b5 e4       	ldi	r27, 0x45	; 69
    37ee:	89 83       	std	Y+1, r24	; 0x01
    37f0:	9a 83       	std	Y+2, r25	; 0x02
    37f2:	ab 83       	std	Y+3, r26	; 0x03
    37f4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e4       	ldi	r19, 0x40	; 64
    37fa:	4c e1       	ldi	r20, 0x1C	; 28
    37fc:	55 e4       	ldi	r21, 0x45	; 69
    37fe:	69 81       	ldd	r22, Y+1	; 0x01
    3800:	7a 81       	ldd	r23, Y+2	; 0x02
    3802:	8b 81       	ldd	r24, Y+3	; 0x03
    3804:	9c 81       	ldd	r25, Y+4	; 0x04
    3806:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	8d 83       	std	Y+5, r24	; 0x05
    3810:	9e 83       	std	Y+6, r25	; 0x06
    3812:	af 83       	std	Y+7, r26	; 0x07
    3814:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	40 e8       	ldi	r20, 0x80	; 128
    381c:	5f e3       	ldi	r21, 0x3F	; 63
    381e:	6d 81       	ldd	r22, Y+5	; 0x05
    3820:	7e 81       	ldd	r23, Y+6	; 0x06
    3822:	8f 81       	ldd	r24, Y+7	; 0x07
    3824:	98 85       	ldd	r25, Y+8	; 0x08
    3826:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    382a:	88 23       	and	r24, r24
    382c:	2c f4       	brge	.+10     	; 0x3838 <main+0x6a>
		__ticks = 1;
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	9a 87       	std	Y+10, r25	; 0x0a
    3834:	89 87       	std	Y+9, r24	; 0x09
    3836:	3f c0       	rjmp	.+126    	; 0x38b6 <main+0xe8>
	else if (__tmp > 65535)
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	3f ef       	ldi	r19, 0xFF	; 255
    383c:	4f e7       	ldi	r20, 0x7F	; 127
    383e:	57 e4       	ldi	r21, 0x47	; 71
    3840:	6d 81       	ldd	r22, Y+5	; 0x05
    3842:	7e 81       	ldd	r23, Y+6	; 0x06
    3844:	8f 81       	ldd	r24, Y+7	; 0x07
    3846:	98 85       	ldd	r25, Y+8	; 0x08
    3848:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    384c:	18 16       	cp	r1, r24
    384e:	4c f5       	brge	.+82     	; 0x38a2 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	40 e2       	ldi	r20, 0x20	; 32
    3856:	51 e4       	ldi	r21, 0x41	; 65
    3858:	69 81       	ldd	r22, Y+1	; 0x01
    385a:	7a 81       	ldd	r23, Y+2	; 0x02
    385c:	8b 81       	ldd	r24, Y+3	; 0x03
    385e:	9c 81       	ldd	r25, Y+4	; 0x04
    3860:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	bc 01       	movw	r22, r24
    386a:	cd 01       	movw	r24, r26
    386c:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    3870:	dc 01       	movw	r26, r24
    3872:	cb 01       	movw	r24, r22
    3874:	9a 87       	std	Y+10, r25	; 0x0a
    3876:	89 87       	std	Y+9, r24	; 0x09
    3878:	0f c0       	rjmp	.+30     	; 0x3898 <main+0xca>
    387a:	8a ef       	ldi	r24, 0xFA	; 250
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	9c 87       	std	Y+12, r25	; 0x0c
    3880:	8b 87       	std	Y+11, r24	; 0x0b
    3882:	8b 85       	ldd	r24, Y+11	; 0x0b
    3884:	9c 85       	ldd	r25, Y+12	; 0x0c
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <main+0xb8>
    388a:	9c 87       	std	Y+12, r25	; 0x0c
    388c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    388e:	89 85       	ldd	r24, Y+9	; 0x09
    3890:	9a 85       	ldd	r25, Y+10	; 0x0a
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	9a 87       	std	Y+10, r25	; 0x0a
    3896:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3898:	89 85       	ldd	r24, Y+9	; 0x09
    389a:	9a 85       	ldd	r25, Y+10	; 0x0a
    389c:	89 2b       	or	r24, r25
    389e:	69 f7       	brne	.-38     	; 0x387a <main+0xac>
    38a0:	14 c0       	rjmp	.+40     	; 0x38ca <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a2:	6d 81       	ldd	r22, Y+5	; 0x05
    38a4:	7e 81       	ldd	r23, Y+6	; 0x06
    38a6:	8f 81       	ldd	r24, Y+7	; 0x07
    38a8:	98 85       	ldd	r25, Y+8	; 0x08
    38aa:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	9a 87       	std	Y+10, r25	; 0x0a
    38b4:	89 87       	std	Y+9, r24	; 0x09
    38b6:	89 85       	ldd	r24, Y+9	; 0x09
    38b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ba:	9e 87       	std	Y+14, r25	; 0x0e
    38bc:	8d 87       	std	Y+13, r24	; 0x0d
    38be:	8d 85       	ldd	r24, Y+13	; 0x0d
    38c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	f1 f7       	brne	.-4      	; 0x38c2 <main+0xf4>
    38c6:	9e 87       	std	Y+14, r25	; 0x0e
    38c8:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(3000);

	while(1) {
		SER_1(180);
    38ca:	6f e7       	ldi	r22, 0x7F	; 127
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	0e 94 9b 00 	call	0x136	; 0x136 <servo_move>
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	aa e7       	ldi	r26, 0x7A	; 122
    38d8:	b4 e4       	ldi	r27, 0x44	; 68
    38da:	8f 87       	std	Y+15, r24	; 0x0f
    38dc:	98 8b       	std	Y+16, r25	; 0x10
    38de:	a9 8b       	std	Y+17, r26	; 0x11
    38e0:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	30 e4       	ldi	r19, 0x40	; 64
    38e6:	4c e1       	ldi	r20, 0x1C	; 28
    38e8:	55 e4       	ldi	r21, 0x45	; 69
    38ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    38ec:	78 89       	ldd	r23, Y+16	; 0x10
    38ee:	89 89       	ldd	r24, Y+17	; 0x11
    38f0:	9a 89       	ldd	r25, Y+18	; 0x12
    38f2:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    38f6:	dc 01       	movw	r26, r24
    38f8:	cb 01       	movw	r24, r22
    38fa:	8b 8b       	std	Y+19, r24	; 0x13
    38fc:	9c 8b       	std	Y+20, r25	; 0x14
    38fe:	ad 8b       	std	Y+21, r26	; 0x15
    3900:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	40 e8       	ldi	r20, 0x80	; 128
    3908:	5f e3       	ldi	r21, 0x3F	; 63
    390a:	6b 89       	ldd	r22, Y+19	; 0x13
    390c:	7c 89       	ldd	r23, Y+20	; 0x14
    390e:	8d 89       	ldd	r24, Y+21	; 0x15
    3910:	9e 89       	ldd	r25, Y+22	; 0x16
    3912:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    3916:	88 23       	and	r24, r24
    3918:	2c f4       	brge	.+10     	; 0x3924 <main+0x156>
		__ticks = 1;
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	98 8f       	std	Y+24, r25	; 0x18
    3920:	8f 8b       	std	Y+23, r24	; 0x17
    3922:	3f c0       	rjmp	.+126    	; 0x39a2 <main+0x1d4>
	else if (__tmp > 65535)
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	3f ef       	ldi	r19, 0xFF	; 255
    3928:	4f e7       	ldi	r20, 0x7F	; 127
    392a:	57 e4       	ldi	r21, 0x47	; 71
    392c:	6b 89       	ldd	r22, Y+19	; 0x13
    392e:	7c 89       	ldd	r23, Y+20	; 0x14
    3930:	8d 89       	ldd	r24, Y+21	; 0x15
    3932:	9e 89       	ldd	r25, Y+22	; 0x16
    3934:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    3938:	18 16       	cp	r1, r24
    393a:	4c f5       	brge	.+82     	; 0x398e <main+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	40 e2       	ldi	r20, 0x20	; 32
    3942:	51 e4       	ldi	r21, 0x41	; 65
    3944:	6f 85       	ldd	r22, Y+15	; 0x0f
    3946:	78 89       	ldd	r23, Y+16	; 0x10
    3948:	89 89       	ldd	r24, Y+17	; 0x11
    394a:	9a 89       	ldd	r25, Y+18	; 0x12
    394c:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	bc 01       	movw	r22, r24
    3956:	cd 01       	movw	r24, r26
    3958:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	98 8f       	std	Y+24, r25	; 0x18
    3962:	8f 8b       	std	Y+23, r24	; 0x17
    3964:	0f c0       	rjmp	.+30     	; 0x3984 <main+0x1b6>
    3966:	8a ef       	ldi	r24, 0xFA	; 250
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	9a 8f       	std	Y+26, r25	; 0x1a
    396c:	89 8f       	std	Y+25, r24	; 0x19
    396e:	89 8d       	ldd	r24, Y+25	; 0x19
    3970:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	f1 f7       	brne	.-4      	; 0x3972 <main+0x1a4>
    3976:	9a 8f       	std	Y+26, r25	; 0x1a
    3978:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    397a:	8f 89       	ldd	r24, Y+23	; 0x17
    397c:	98 8d       	ldd	r25, Y+24	; 0x18
    397e:	01 97       	sbiw	r24, 0x01	; 1
    3980:	98 8f       	std	Y+24, r25	; 0x18
    3982:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3984:	8f 89       	ldd	r24, Y+23	; 0x17
    3986:	98 8d       	ldd	r25, Y+24	; 0x18
    3988:	89 2b       	or	r24, r25
    398a:	69 f7       	brne	.-38     	; 0x3966 <main+0x198>
    398c:	14 c0       	rjmp	.+40     	; 0x39b6 <main+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398e:	6b 89       	ldd	r22, Y+19	; 0x13
    3990:	7c 89       	ldd	r23, Y+20	; 0x14
    3992:	8d 89       	ldd	r24, Y+21	; 0x15
    3994:	9e 89       	ldd	r25, Y+22	; 0x16
    3996:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	98 8f       	std	Y+24, r25	; 0x18
    39a0:	8f 8b       	std	Y+23, r24	; 0x17
    39a2:	8f 89       	ldd	r24, Y+23	; 0x17
    39a4:	98 8d       	ldd	r25, Y+24	; 0x18
    39a6:	9c 8f       	std	Y+28, r25	; 0x1c
    39a8:	8b 8f       	std	Y+27, r24	; 0x1b
    39aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ae:	01 97       	sbiw	r24, 0x01	; 1
    39b0:	f1 f7       	brne	.-4      	; 0x39ae <main+0x1e0>
    39b2:	9c 8f       	std	Y+28, r25	; 0x1c
    39b4:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1000);
		SER_1(0);
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	81 e0       	ldi	r24, 0x01	; 1
    39ba:	0e 94 9b 00 	call	0x136	; 0x136 <servo_move>
    39be:	80 e0       	ldi	r24, 0x00	; 0
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	aa ef       	ldi	r26, 0xFA	; 250
    39c4:	b4 e4       	ldi	r27, 0x44	; 68
    39c6:	8d 8f       	std	Y+29, r24	; 0x1d
    39c8:	9e 8f       	std	Y+30, r25	; 0x1e
    39ca:	af 8f       	std	Y+31, r26	; 0x1f
    39cc:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e4       	ldi	r19, 0x40	; 64
    39d2:	4c e1       	ldi	r20, 0x1C	; 28
    39d4:	55 e4       	ldi	r21, 0x45	; 69
    39d6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    39d8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    39da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39dc:	98 a1       	ldd	r25, Y+32	; 0x20
    39de:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    39e2:	dc 01       	movw	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	89 a3       	std	Y+33, r24	; 0x21
    39e8:	9a a3       	std	Y+34, r25	; 0x22
    39ea:	ab a3       	std	Y+35, r26	; 0x23
    39ec:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	40 e8       	ldi	r20, 0x80	; 128
    39f4:	5f e3       	ldi	r21, 0x3F	; 63
    39f6:	69 a1       	ldd	r22, Y+33	; 0x21
    39f8:	7a a1       	ldd	r23, Y+34	; 0x22
    39fa:	8b a1       	ldd	r24, Y+35	; 0x23
    39fc:	9c a1       	ldd	r25, Y+36	; 0x24
    39fe:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__cmpsf2>
    3a02:	88 23       	and	r24, r24
    3a04:	2c f4       	brge	.+10     	; 0x3a10 <main+0x242>
		__ticks = 1;
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	9e a3       	std	Y+38, r25	; 0x26
    3a0c:	8d a3       	std	Y+37, r24	; 0x25
    3a0e:	3f c0       	rjmp	.+126    	; 0x3a8e <main+0x2c0>
	else if (__tmp > 65535)
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	3f ef       	ldi	r19, 0xFF	; 255
    3a14:	4f e7       	ldi	r20, 0x7F	; 127
    3a16:	57 e4       	ldi	r21, 0x47	; 71
    3a18:	69 a1       	ldd	r22, Y+33	; 0x21
    3a1a:	7a a1       	ldd	r23, Y+34	; 0x22
    3a1c:	8b a1       	ldd	r24, Y+35	; 0x23
    3a1e:	9c a1       	ldd	r25, Y+36	; 0x24
    3a20:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <__gesf2>
    3a24:	18 16       	cp	r1, r24
    3a26:	4c f5       	brge	.+82     	; 0x3a7a <main+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	40 e2       	ldi	r20, 0x20	; 32
    3a2e:	51 e4       	ldi	r21, 0x41	; 65
    3a30:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3a32:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3a34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a36:	98 a1       	ldd	r25, Y+32	; 0x20
    3a38:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__mulsf3>
    3a3c:	dc 01       	movw	r26, r24
    3a3e:	cb 01       	movw	r24, r22
    3a40:	bc 01       	movw	r22, r24
    3a42:	cd 01       	movw	r24, r26
    3a44:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    3a48:	dc 01       	movw	r26, r24
    3a4a:	cb 01       	movw	r24, r22
    3a4c:	9e a3       	std	Y+38, r25	; 0x26
    3a4e:	8d a3       	std	Y+37, r24	; 0x25
    3a50:	0f c0       	rjmp	.+30     	; 0x3a70 <main+0x2a2>
    3a52:	8a ef       	ldi	r24, 0xFA	; 250
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	98 a7       	std	Y+40, r25	; 0x28
    3a58:	8f a3       	std	Y+39, r24	; 0x27
    3a5a:	8f a1       	ldd	r24, Y+39	; 0x27
    3a5c:	98 a5       	ldd	r25, Y+40	; 0x28
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	f1 f7       	brne	.-4      	; 0x3a5e <main+0x290>
    3a62:	98 a7       	std	Y+40, r25	; 0x28
    3a64:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a66:	8d a1       	ldd	r24, Y+37	; 0x25
    3a68:	9e a1       	ldd	r25, Y+38	; 0x26
    3a6a:	01 97       	sbiw	r24, 0x01	; 1
    3a6c:	9e a3       	std	Y+38, r25	; 0x26
    3a6e:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a70:	8d a1       	ldd	r24, Y+37	; 0x25
    3a72:	9e a1       	ldd	r25, Y+38	; 0x26
    3a74:	89 2b       	or	r24, r25
    3a76:	69 f7       	brne	.-38     	; 0x3a52 <main+0x284>
    3a78:	14 c0       	rjmp	.+40     	; 0x3aa2 <main+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a7a:	69 a1       	ldd	r22, Y+33	; 0x21
    3a7c:	7a a1       	ldd	r23, Y+34	; 0x22
    3a7e:	8b a1       	ldd	r24, Y+35	; 0x23
    3a80:	9c a1       	ldd	r25, Y+36	; 0x24
    3a82:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <__fixunssfsi>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	9e a3       	std	Y+38, r25	; 0x26
    3a8c:	8d a3       	std	Y+37, r24	; 0x25
    3a8e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a90:	9e a1       	ldd	r25, Y+38	; 0x26
    3a92:	9a a7       	std	Y+42, r25	; 0x2a
    3a94:	89 a7       	std	Y+41, r24	; 0x29
    3a96:	89 a5       	ldd	r24, Y+41	; 0x29
    3a98:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a9a:	01 97       	sbiw	r24, 0x01	; 1
    3a9c:	f1 f7       	brne	.-4      	; 0x3a9a <main+0x2cc>
    3a9e:	9a a7       	std	Y+42, r25	; 0x2a
    3aa0:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(2000);
	}
    3aa2:	13 cf       	rjmp	.-474    	; 0x38ca <main+0xfc>

00003aa4 <__subsf3>:
    3aa4:	50 58       	subi	r21, 0x80	; 128

00003aa6 <__addsf3>:
    3aa6:	bb 27       	eor	r27, r27
    3aa8:	aa 27       	eor	r26, r26
    3aaa:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <__addsf3x>
    3aae:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__fp_round>
    3ab2:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__fp_pscA>
    3ab6:	38 f0       	brcs	.+14     	; 0x3ac6 <__addsf3+0x20>
    3ab8:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__fp_pscB>
    3abc:	20 f0       	brcs	.+8      	; 0x3ac6 <__addsf3+0x20>
    3abe:	39 f4       	brne	.+14     	; 0x3ace <__addsf3+0x28>
    3ac0:	9f 3f       	cpi	r25, 0xFF	; 255
    3ac2:	19 f4       	brne	.+6      	; 0x3aca <__addsf3+0x24>
    3ac4:	26 f4       	brtc	.+8      	; 0x3ace <__addsf3+0x28>
    3ac6:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__fp_nan>
    3aca:	0e f4       	brtc	.+2      	; 0x3ace <__addsf3+0x28>
    3acc:	e0 95       	com	r30
    3ace:	e7 fb       	bst	r30, 7
    3ad0:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__fp_inf>

00003ad4 <__addsf3x>:
    3ad4:	e9 2f       	mov	r30, r25
    3ad6:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__fp_split3>
    3ada:	58 f3       	brcs	.-42     	; 0x3ab2 <__addsf3+0xc>
    3adc:	ba 17       	cp	r27, r26
    3ade:	62 07       	cpc	r22, r18
    3ae0:	73 07       	cpc	r23, r19
    3ae2:	84 07       	cpc	r24, r20
    3ae4:	95 07       	cpc	r25, r21
    3ae6:	20 f0       	brcs	.+8      	; 0x3af0 <__addsf3x+0x1c>
    3ae8:	79 f4       	brne	.+30     	; 0x3b08 <__addsf3x+0x34>
    3aea:	a6 f5       	brtc	.+104    	; 0x3b54 <__addsf3x+0x80>
    3aec:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__fp_zero>
    3af0:	0e f4       	brtc	.+2      	; 0x3af4 <__addsf3x+0x20>
    3af2:	e0 95       	com	r30
    3af4:	0b 2e       	mov	r0, r27
    3af6:	ba 2f       	mov	r27, r26
    3af8:	a0 2d       	mov	r26, r0
    3afa:	0b 01       	movw	r0, r22
    3afc:	b9 01       	movw	r22, r18
    3afe:	90 01       	movw	r18, r0
    3b00:	0c 01       	movw	r0, r24
    3b02:	ca 01       	movw	r24, r20
    3b04:	a0 01       	movw	r20, r0
    3b06:	11 24       	eor	r1, r1
    3b08:	ff 27       	eor	r31, r31
    3b0a:	59 1b       	sub	r21, r25
    3b0c:	99 f0       	breq	.+38     	; 0x3b34 <__addsf3x+0x60>
    3b0e:	59 3f       	cpi	r21, 0xF9	; 249
    3b10:	50 f4       	brcc	.+20     	; 0x3b26 <__addsf3x+0x52>
    3b12:	50 3e       	cpi	r21, 0xE0	; 224
    3b14:	68 f1       	brcs	.+90     	; 0x3b70 <__addsf3x+0x9c>
    3b16:	1a 16       	cp	r1, r26
    3b18:	f0 40       	sbci	r31, 0x00	; 0
    3b1a:	a2 2f       	mov	r26, r18
    3b1c:	23 2f       	mov	r18, r19
    3b1e:	34 2f       	mov	r19, r20
    3b20:	44 27       	eor	r20, r20
    3b22:	58 5f       	subi	r21, 0xF8	; 248
    3b24:	f3 cf       	rjmp	.-26     	; 0x3b0c <__addsf3x+0x38>
    3b26:	46 95       	lsr	r20
    3b28:	37 95       	ror	r19
    3b2a:	27 95       	ror	r18
    3b2c:	a7 95       	ror	r26
    3b2e:	f0 40       	sbci	r31, 0x00	; 0
    3b30:	53 95       	inc	r21
    3b32:	c9 f7       	brne	.-14     	; 0x3b26 <__addsf3x+0x52>
    3b34:	7e f4       	brtc	.+30     	; 0x3b54 <__addsf3x+0x80>
    3b36:	1f 16       	cp	r1, r31
    3b38:	ba 0b       	sbc	r27, r26
    3b3a:	62 0b       	sbc	r22, r18
    3b3c:	73 0b       	sbc	r23, r19
    3b3e:	84 0b       	sbc	r24, r20
    3b40:	ba f0       	brmi	.+46     	; 0x3b70 <__addsf3x+0x9c>
    3b42:	91 50       	subi	r25, 0x01	; 1
    3b44:	a1 f0       	breq	.+40     	; 0x3b6e <__addsf3x+0x9a>
    3b46:	ff 0f       	add	r31, r31
    3b48:	bb 1f       	adc	r27, r27
    3b4a:	66 1f       	adc	r22, r22
    3b4c:	77 1f       	adc	r23, r23
    3b4e:	88 1f       	adc	r24, r24
    3b50:	c2 f7       	brpl	.-16     	; 0x3b42 <__addsf3x+0x6e>
    3b52:	0e c0       	rjmp	.+28     	; 0x3b70 <__addsf3x+0x9c>
    3b54:	ba 0f       	add	r27, r26
    3b56:	62 1f       	adc	r22, r18
    3b58:	73 1f       	adc	r23, r19
    3b5a:	84 1f       	adc	r24, r20
    3b5c:	48 f4       	brcc	.+18     	; 0x3b70 <__addsf3x+0x9c>
    3b5e:	87 95       	ror	r24
    3b60:	77 95       	ror	r23
    3b62:	67 95       	ror	r22
    3b64:	b7 95       	ror	r27
    3b66:	f7 95       	ror	r31
    3b68:	9e 3f       	cpi	r25, 0xFE	; 254
    3b6a:	08 f0       	brcs	.+2      	; 0x3b6e <__addsf3x+0x9a>
    3b6c:	b0 cf       	rjmp	.-160    	; 0x3ace <__addsf3+0x28>
    3b6e:	93 95       	inc	r25
    3b70:	88 0f       	add	r24, r24
    3b72:	08 f0       	brcs	.+2      	; 0x3b76 <__addsf3x+0xa2>
    3b74:	99 27       	eor	r25, r25
    3b76:	ee 0f       	add	r30, r30
    3b78:	97 95       	ror	r25
    3b7a:	87 95       	ror	r24
    3b7c:	08 95       	ret

00003b7e <__cmpsf2>:
    3b7e:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__fp_cmp>
    3b82:	08 f4       	brcc	.+2      	; 0x3b86 <__cmpsf2+0x8>
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	08 95       	ret

00003b88 <__divsf3>:
    3b88:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <__divsf3x>
    3b8c:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__fp_round>
    3b90:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__fp_pscB>
    3b94:	58 f0       	brcs	.+22     	; 0x3bac <__divsf3+0x24>
    3b96:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__fp_pscA>
    3b9a:	40 f0       	brcs	.+16     	; 0x3bac <__divsf3+0x24>
    3b9c:	29 f4       	brne	.+10     	; 0x3ba8 <__divsf3+0x20>
    3b9e:	5f 3f       	cpi	r21, 0xFF	; 255
    3ba0:	29 f0       	breq	.+10     	; 0x3bac <__divsf3+0x24>
    3ba2:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__fp_inf>
    3ba6:	51 11       	cpse	r21, r1
    3ba8:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__fp_szero>
    3bac:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__fp_nan>

00003bb0 <__divsf3x>:
    3bb0:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__fp_split3>
    3bb4:	68 f3       	brcs	.-38     	; 0x3b90 <__divsf3+0x8>

00003bb6 <__divsf3_pse>:
    3bb6:	99 23       	and	r25, r25
    3bb8:	b1 f3       	breq	.-20     	; 0x3ba6 <__divsf3+0x1e>
    3bba:	55 23       	and	r21, r21
    3bbc:	91 f3       	breq	.-28     	; 0x3ba2 <__divsf3+0x1a>
    3bbe:	95 1b       	sub	r25, r21
    3bc0:	55 0b       	sbc	r21, r21
    3bc2:	bb 27       	eor	r27, r27
    3bc4:	aa 27       	eor	r26, r26
    3bc6:	62 17       	cp	r22, r18
    3bc8:	73 07       	cpc	r23, r19
    3bca:	84 07       	cpc	r24, r20
    3bcc:	38 f0       	brcs	.+14     	; 0x3bdc <__divsf3_pse+0x26>
    3bce:	9f 5f       	subi	r25, 0xFF	; 255
    3bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    3bd2:	22 0f       	add	r18, r18
    3bd4:	33 1f       	adc	r19, r19
    3bd6:	44 1f       	adc	r20, r20
    3bd8:	aa 1f       	adc	r26, r26
    3bda:	a9 f3       	breq	.-22     	; 0x3bc6 <__divsf3_pse+0x10>
    3bdc:	35 d0       	rcall	.+106    	; 0x3c48 <__divsf3_pse+0x92>
    3bde:	0e 2e       	mov	r0, r30
    3be0:	3a f0       	brmi	.+14     	; 0x3bf0 <__divsf3_pse+0x3a>
    3be2:	e0 e8       	ldi	r30, 0x80	; 128
    3be4:	32 d0       	rcall	.+100    	; 0x3c4a <__divsf3_pse+0x94>
    3be6:	91 50       	subi	r25, 0x01	; 1
    3be8:	50 40       	sbci	r21, 0x00	; 0
    3bea:	e6 95       	lsr	r30
    3bec:	00 1c       	adc	r0, r0
    3bee:	ca f7       	brpl	.-14     	; 0x3be2 <__divsf3_pse+0x2c>
    3bf0:	2b d0       	rcall	.+86     	; 0x3c48 <__divsf3_pse+0x92>
    3bf2:	fe 2f       	mov	r31, r30
    3bf4:	29 d0       	rcall	.+82     	; 0x3c48 <__divsf3_pse+0x92>
    3bf6:	66 0f       	add	r22, r22
    3bf8:	77 1f       	adc	r23, r23
    3bfa:	88 1f       	adc	r24, r24
    3bfc:	bb 1f       	adc	r27, r27
    3bfe:	26 17       	cp	r18, r22
    3c00:	37 07       	cpc	r19, r23
    3c02:	48 07       	cpc	r20, r24
    3c04:	ab 07       	cpc	r26, r27
    3c06:	b0 e8       	ldi	r27, 0x80	; 128
    3c08:	09 f0       	breq	.+2      	; 0x3c0c <__divsf3_pse+0x56>
    3c0a:	bb 0b       	sbc	r27, r27
    3c0c:	80 2d       	mov	r24, r0
    3c0e:	bf 01       	movw	r22, r30
    3c10:	ff 27       	eor	r31, r31
    3c12:	93 58       	subi	r25, 0x83	; 131
    3c14:	5f 4f       	sbci	r21, 0xFF	; 255
    3c16:	3a f0       	brmi	.+14     	; 0x3c26 <__divsf3_pse+0x70>
    3c18:	9e 3f       	cpi	r25, 0xFE	; 254
    3c1a:	51 05       	cpc	r21, r1
    3c1c:	78 f0       	brcs	.+30     	; 0x3c3c <__divsf3_pse+0x86>
    3c1e:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__fp_inf>
    3c22:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__fp_szero>
    3c26:	5f 3f       	cpi	r21, 0xFF	; 255
    3c28:	e4 f3       	brlt	.-8      	; 0x3c22 <__divsf3_pse+0x6c>
    3c2a:	98 3e       	cpi	r25, 0xE8	; 232
    3c2c:	d4 f3       	brlt	.-12     	; 0x3c22 <__divsf3_pse+0x6c>
    3c2e:	86 95       	lsr	r24
    3c30:	77 95       	ror	r23
    3c32:	67 95       	ror	r22
    3c34:	b7 95       	ror	r27
    3c36:	f7 95       	ror	r31
    3c38:	9f 5f       	subi	r25, 0xFF	; 255
    3c3a:	c9 f7       	brne	.-14     	; 0x3c2e <__divsf3_pse+0x78>
    3c3c:	88 0f       	add	r24, r24
    3c3e:	91 1d       	adc	r25, r1
    3c40:	96 95       	lsr	r25
    3c42:	87 95       	ror	r24
    3c44:	97 f9       	bld	r25, 7
    3c46:	08 95       	ret
    3c48:	e1 e0       	ldi	r30, 0x01	; 1
    3c4a:	66 0f       	add	r22, r22
    3c4c:	77 1f       	adc	r23, r23
    3c4e:	88 1f       	adc	r24, r24
    3c50:	bb 1f       	adc	r27, r27
    3c52:	62 17       	cp	r22, r18
    3c54:	73 07       	cpc	r23, r19
    3c56:	84 07       	cpc	r24, r20
    3c58:	ba 07       	cpc	r27, r26
    3c5a:	20 f0       	brcs	.+8      	; 0x3c64 <__divsf3_pse+0xae>
    3c5c:	62 1b       	sub	r22, r18
    3c5e:	73 0b       	sbc	r23, r19
    3c60:	84 0b       	sbc	r24, r20
    3c62:	ba 0b       	sbc	r27, r26
    3c64:	ee 1f       	adc	r30, r30
    3c66:	88 f7       	brcc	.-30     	; 0x3c4a <__divsf3_pse+0x94>
    3c68:	e0 95       	com	r30
    3c6a:	08 95       	ret

00003c6c <__fixunssfsi>:
    3c6c:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <__fp_splitA>
    3c70:	88 f0       	brcs	.+34     	; 0x3c94 <__fixunssfsi+0x28>
    3c72:	9f 57       	subi	r25, 0x7F	; 127
    3c74:	98 f0       	brcs	.+38     	; 0x3c9c <__fixunssfsi+0x30>
    3c76:	b9 2f       	mov	r27, r25
    3c78:	99 27       	eor	r25, r25
    3c7a:	b7 51       	subi	r27, 0x17	; 23
    3c7c:	b0 f0       	brcs	.+44     	; 0x3caa <__fixunssfsi+0x3e>
    3c7e:	e1 f0       	breq	.+56     	; 0x3cb8 <__fixunssfsi+0x4c>
    3c80:	66 0f       	add	r22, r22
    3c82:	77 1f       	adc	r23, r23
    3c84:	88 1f       	adc	r24, r24
    3c86:	99 1f       	adc	r25, r25
    3c88:	1a f0       	brmi	.+6      	; 0x3c90 <__fixunssfsi+0x24>
    3c8a:	ba 95       	dec	r27
    3c8c:	c9 f7       	brne	.-14     	; 0x3c80 <__fixunssfsi+0x14>
    3c8e:	14 c0       	rjmp	.+40     	; 0x3cb8 <__fixunssfsi+0x4c>
    3c90:	b1 30       	cpi	r27, 0x01	; 1
    3c92:	91 f0       	breq	.+36     	; 0x3cb8 <__fixunssfsi+0x4c>
    3c94:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <__fp_zero>
    3c98:	b1 e0       	ldi	r27, 0x01	; 1
    3c9a:	08 95       	ret
    3c9c:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__fp_zero>
    3ca0:	67 2f       	mov	r22, r23
    3ca2:	78 2f       	mov	r23, r24
    3ca4:	88 27       	eor	r24, r24
    3ca6:	b8 5f       	subi	r27, 0xF8	; 248
    3ca8:	39 f0       	breq	.+14     	; 0x3cb8 <__fixunssfsi+0x4c>
    3caa:	b9 3f       	cpi	r27, 0xF9	; 249
    3cac:	cc f3       	brlt	.-14     	; 0x3ca0 <__fixunssfsi+0x34>
    3cae:	86 95       	lsr	r24
    3cb0:	77 95       	ror	r23
    3cb2:	67 95       	ror	r22
    3cb4:	b3 95       	inc	r27
    3cb6:	d9 f7       	brne	.-10     	; 0x3cae <__fixunssfsi+0x42>
    3cb8:	3e f4       	brtc	.+14     	; 0x3cc8 <__fixunssfsi+0x5c>
    3cba:	90 95       	com	r25
    3cbc:	80 95       	com	r24
    3cbe:	70 95       	com	r23
    3cc0:	61 95       	neg	r22
    3cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    3cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc8:	08 95       	ret

00003cca <__floatunsisf>:
    3cca:	e8 94       	clt
    3ccc:	09 c0       	rjmp	.+18     	; 0x3ce0 <__floatsisf+0x12>

00003cce <__floatsisf>:
    3cce:	97 fb       	bst	r25, 7
    3cd0:	3e f4       	brtc	.+14     	; 0x3ce0 <__floatsisf+0x12>
    3cd2:	90 95       	com	r25
    3cd4:	80 95       	com	r24
    3cd6:	70 95       	com	r23
    3cd8:	61 95       	neg	r22
    3cda:	7f 4f       	sbci	r23, 0xFF	; 255
    3cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    3cde:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce0:	99 23       	and	r25, r25
    3ce2:	a9 f0       	breq	.+42     	; 0x3d0e <__floatsisf+0x40>
    3ce4:	f9 2f       	mov	r31, r25
    3ce6:	96 e9       	ldi	r25, 0x96	; 150
    3ce8:	bb 27       	eor	r27, r27
    3cea:	93 95       	inc	r25
    3cec:	f6 95       	lsr	r31
    3cee:	87 95       	ror	r24
    3cf0:	77 95       	ror	r23
    3cf2:	67 95       	ror	r22
    3cf4:	b7 95       	ror	r27
    3cf6:	f1 11       	cpse	r31, r1
    3cf8:	f8 cf       	rjmp	.-16     	; 0x3cea <__floatsisf+0x1c>
    3cfa:	fa f4       	brpl	.+62     	; 0x3d3a <__floatsisf+0x6c>
    3cfc:	bb 0f       	add	r27, r27
    3cfe:	11 f4       	brne	.+4      	; 0x3d04 <__floatsisf+0x36>
    3d00:	60 ff       	sbrs	r22, 0
    3d02:	1b c0       	rjmp	.+54     	; 0x3d3a <__floatsisf+0x6c>
    3d04:	6f 5f       	subi	r22, 0xFF	; 255
    3d06:	7f 4f       	sbci	r23, 0xFF	; 255
    3d08:	8f 4f       	sbci	r24, 0xFF	; 255
    3d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d0c:	16 c0       	rjmp	.+44     	; 0x3d3a <__floatsisf+0x6c>
    3d0e:	88 23       	and	r24, r24
    3d10:	11 f0       	breq	.+4      	; 0x3d16 <__floatsisf+0x48>
    3d12:	96 e9       	ldi	r25, 0x96	; 150
    3d14:	11 c0       	rjmp	.+34     	; 0x3d38 <__floatsisf+0x6a>
    3d16:	77 23       	and	r23, r23
    3d18:	21 f0       	breq	.+8      	; 0x3d22 <__floatsisf+0x54>
    3d1a:	9e e8       	ldi	r25, 0x8E	; 142
    3d1c:	87 2f       	mov	r24, r23
    3d1e:	76 2f       	mov	r23, r22
    3d20:	05 c0       	rjmp	.+10     	; 0x3d2c <__floatsisf+0x5e>
    3d22:	66 23       	and	r22, r22
    3d24:	71 f0       	breq	.+28     	; 0x3d42 <__floatsisf+0x74>
    3d26:	96 e8       	ldi	r25, 0x86	; 134
    3d28:	86 2f       	mov	r24, r22
    3d2a:	70 e0       	ldi	r23, 0x00	; 0
    3d2c:	60 e0       	ldi	r22, 0x00	; 0
    3d2e:	2a f0       	brmi	.+10     	; 0x3d3a <__floatsisf+0x6c>
    3d30:	9a 95       	dec	r25
    3d32:	66 0f       	add	r22, r22
    3d34:	77 1f       	adc	r23, r23
    3d36:	88 1f       	adc	r24, r24
    3d38:	da f7       	brpl	.-10     	; 0x3d30 <__floatsisf+0x62>
    3d3a:	88 0f       	add	r24, r24
    3d3c:	96 95       	lsr	r25
    3d3e:	87 95       	ror	r24
    3d40:	97 f9       	bld	r25, 7
    3d42:	08 95       	ret

00003d44 <__fp_cmp>:
    3d44:	99 0f       	add	r25, r25
    3d46:	00 08       	sbc	r0, r0
    3d48:	55 0f       	add	r21, r21
    3d4a:	aa 0b       	sbc	r26, r26
    3d4c:	e0 e8       	ldi	r30, 0x80	; 128
    3d4e:	fe ef       	ldi	r31, 0xFE	; 254
    3d50:	16 16       	cp	r1, r22
    3d52:	17 06       	cpc	r1, r23
    3d54:	e8 07       	cpc	r30, r24
    3d56:	f9 07       	cpc	r31, r25
    3d58:	c0 f0       	brcs	.+48     	; 0x3d8a <__fp_cmp+0x46>
    3d5a:	12 16       	cp	r1, r18
    3d5c:	13 06       	cpc	r1, r19
    3d5e:	e4 07       	cpc	r30, r20
    3d60:	f5 07       	cpc	r31, r21
    3d62:	98 f0       	brcs	.+38     	; 0x3d8a <__fp_cmp+0x46>
    3d64:	62 1b       	sub	r22, r18
    3d66:	73 0b       	sbc	r23, r19
    3d68:	84 0b       	sbc	r24, r20
    3d6a:	95 0b       	sbc	r25, r21
    3d6c:	39 f4       	brne	.+14     	; 0x3d7c <__fp_cmp+0x38>
    3d6e:	0a 26       	eor	r0, r26
    3d70:	61 f0       	breq	.+24     	; 0x3d8a <__fp_cmp+0x46>
    3d72:	23 2b       	or	r18, r19
    3d74:	24 2b       	or	r18, r20
    3d76:	25 2b       	or	r18, r21
    3d78:	21 f4       	brne	.+8      	; 0x3d82 <__fp_cmp+0x3e>
    3d7a:	08 95       	ret
    3d7c:	0a 26       	eor	r0, r26
    3d7e:	09 f4       	brne	.+2      	; 0x3d82 <__fp_cmp+0x3e>
    3d80:	a1 40       	sbci	r26, 0x01	; 1
    3d82:	a6 95       	lsr	r26
    3d84:	8f ef       	ldi	r24, 0xFF	; 255
    3d86:	81 1d       	adc	r24, r1
    3d88:	81 1d       	adc	r24, r1
    3d8a:	08 95       	ret

00003d8c <__fp_inf>:
    3d8c:	97 f9       	bld	r25, 7
    3d8e:	9f 67       	ori	r25, 0x7F	; 127
    3d90:	80 e8       	ldi	r24, 0x80	; 128
    3d92:	70 e0       	ldi	r23, 0x00	; 0
    3d94:	60 e0       	ldi	r22, 0x00	; 0
    3d96:	08 95       	ret

00003d98 <__fp_nan>:
    3d98:	9f ef       	ldi	r25, 0xFF	; 255
    3d9a:	80 ec       	ldi	r24, 0xC0	; 192
    3d9c:	08 95       	ret

00003d9e <__fp_pscA>:
    3d9e:	00 24       	eor	r0, r0
    3da0:	0a 94       	dec	r0
    3da2:	16 16       	cp	r1, r22
    3da4:	17 06       	cpc	r1, r23
    3da6:	18 06       	cpc	r1, r24
    3da8:	09 06       	cpc	r0, r25
    3daa:	08 95       	ret

00003dac <__fp_pscB>:
    3dac:	00 24       	eor	r0, r0
    3dae:	0a 94       	dec	r0
    3db0:	12 16       	cp	r1, r18
    3db2:	13 06       	cpc	r1, r19
    3db4:	14 06       	cpc	r1, r20
    3db6:	05 06       	cpc	r0, r21
    3db8:	08 95       	ret

00003dba <__fp_round>:
    3dba:	09 2e       	mov	r0, r25
    3dbc:	03 94       	inc	r0
    3dbe:	00 0c       	add	r0, r0
    3dc0:	11 f4       	brne	.+4      	; 0x3dc6 <__fp_round+0xc>
    3dc2:	88 23       	and	r24, r24
    3dc4:	52 f0       	brmi	.+20     	; 0x3dda <__fp_round+0x20>
    3dc6:	bb 0f       	add	r27, r27
    3dc8:	40 f4       	brcc	.+16     	; 0x3dda <__fp_round+0x20>
    3dca:	bf 2b       	or	r27, r31
    3dcc:	11 f4       	brne	.+4      	; 0x3dd2 <__fp_round+0x18>
    3dce:	60 ff       	sbrs	r22, 0
    3dd0:	04 c0       	rjmp	.+8      	; 0x3dda <__fp_round+0x20>
    3dd2:	6f 5f       	subi	r22, 0xFF	; 255
    3dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dda:	08 95       	ret

00003ddc <__fp_split3>:
    3ddc:	57 fd       	sbrc	r21, 7
    3dde:	90 58       	subi	r25, 0x80	; 128
    3de0:	44 0f       	add	r20, r20
    3de2:	55 1f       	adc	r21, r21
    3de4:	59 f0       	breq	.+22     	; 0x3dfc <__fp_splitA+0x10>
    3de6:	5f 3f       	cpi	r21, 0xFF	; 255
    3de8:	71 f0       	breq	.+28     	; 0x3e06 <__fp_splitA+0x1a>
    3dea:	47 95       	ror	r20

00003dec <__fp_splitA>:
    3dec:	88 0f       	add	r24, r24
    3dee:	97 fb       	bst	r25, 7
    3df0:	99 1f       	adc	r25, r25
    3df2:	61 f0       	breq	.+24     	; 0x3e0c <__fp_splitA+0x20>
    3df4:	9f 3f       	cpi	r25, 0xFF	; 255
    3df6:	79 f0       	breq	.+30     	; 0x3e16 <__fp_splitA+0x2a>
    3df8:	87 95       	ror	r24
    3dfa:	08 95       	ret
    3dfc:	12 16       	cp	r1, r18
    3dfe:	13 06       	cpc	r1, r19
    3e00:	14 06       	cpc	r1, r20
    3e02:	55 1f       	adc	r21, r21
    3e04:	f2 cf       	rjmp	.-28     	; 0x3dea <__fp_split3+0xe>
    3e06:	46 95       	lsr	r20
    3e08:	f1 df       	rcall	.-30     	; 0x3dec <__fp_splitA>
    3e0a:	08 c0       	rjmp	.+16     	; 0x3e1c <__fp_splitA+0x30>
    3e0c:	16 16       	cp	r1, r22
    3e0e:	17 06       	cpc	r1, r23
    3e10:	18 06       	cpc	r1, r24
    3e12:	99 1f       	adc	r25, r25
    3e14:	f1 cf       	rjmp	.-30     	; 0x3df8 <__fp_splitA+0xc>
    3e16:	86 95       	lsr	r24
    3e18:	71 05       	cpc	r23, r1
    3e1a:	61 05       	cpc	r22, r1
    3e1c:	08 94       	sec
    3e1e:	08 95       	ret

00003e20 <__fp_zero>:
    3e20:	e8 94       	clt

00003e22 <__fp_szero>:
    3e22:	bb 27       	eor	r27, r27
    3e24:	66 27       	eor	r22, r22
    3e26:	77 27       	eor	r23, r23
    3e28:	cb 01       	movw	r24, r22
    3e2a:	97 f9       	bld	r25, 7
    3e2c:	08 95       	ret

00003e2e <__gesf2>:
    3e2e:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__fp_cmp>
    3e32:	08 f4       	brcc	.+2      	; 0x3e36 <__gesf2+0x8>
    3e34:	8f ef       	ldi	r24, 0xFF	; 255
    3e36:	08 95       	ret

00003e38 <__mulsf3>:
    3e38:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <__mulsf3x>
    3e3c:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__fp_round>
    3e40:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__fp_pscA>
    3e44:	38 f0       	brcs	.+14     	; 0x3e54 <__mulsf3+0x1c>
    3e46:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__fp_pscB>
    3e4a:	20 f0       	brcs	.+8      	; 0x3e54 <__mulsf3+0x1c>
    3e4c:	95 23       	and	r25, r21
    3e4e:	11 f0       	breq	.+4      	; 0x3e54 <__mulsf3+0x1c>
    3e50:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__fp_inf>
    3e54:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__fp_nan>
    3e58:	11 24       	eor	r1, r1
    3e5a:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__fp_szero>

00003e5e <__mulsf3x>:
    3e5e:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__fp_split3>
    3e62:	70 f3       	brcs	.-36     	; 0x3e40 <__mulsf3+0x8>

00003e64 <__mulsf3_pse>:
    3e64:	95 9f       	mul	r25, r21
    3e66:	c1 f3       	breq	.-16     	; 0x3e58 <__mulsf3+0x20>
    3e68:	95 0f       	add	r25, r21
    3e6a:	50 e0       	ldi	r21, 0x00	; 0
    3e6c:	55 1f       	adc	r21, r21
    3e6e:	62 9f       	mul	r22, r18
    3e70:	f0 01       	movw	r30, r0
    3e72:	72 9f       	mul	r23, r18
    3e74:	bb 27       	eor	r27, r27
    3e76:	f0 0d       	add	r31, r0
    3e78:	b1 1d       	adc	r27, r1
    3e7a:	63 9f       	mul	r22, r19
    3e7c:	aa 27       	eor	r26, r26
    3e7e:	f0 0d       	add	r31, r0
    3e80:	b1 1d       	adc	r27, r1
    3e82:	aa 1f       	adc	r26, r26
    3e84:	64 9f       	mul	r22, r20
    3e86:	66 27       	eor	r22, r22
    3e88:	b0 0d       	add	r27, r0
    3e8a:	a1 1d       	adc	r26, r1
    3e8c:	66 1f       	adc	r22, r22
    3e8e:	82 9f       	mul	r24, r18
    3e90:	22 27       	eor	r18, r18
    3e92:	b0 0d       	add	r27, r0
    3e94:	a1 1d       	adc	r26, r1
    3e96:	62 1f       	adc	r22, r18
    3e98:	73 9f       	mul	r23, r19
    3e9a:	b0 0d       	add	r27, r0
    3e9c:	a1 1d       	adc	r26, r1
    3e9e:	62 1f       	adc	r22, r18
    3ea0:	83 9f       	mul	r24, r19
    3ea2:	a0 0d       	add	r26, r0
    3ea4:	61 1d       	adc	r22, r1
    3ea6:	22 1f       	adc	r18, r18
    3ea8:	74 9f       	mul	r23, r20
    3eaa:	33 27       	eor	r19, r19
    3eac:	a0 0d       	add	r26, r0
    3eae:	61 1d       	adc	r22, r1
    3eb0:	23 1f       	adc	r18, r19
    3eb2:	84 9f       	mul	r24, r20
    3eb4:	60 0d       	add	r22, r0
    3eb6:	21 1d       	adc	r18, r1
    3eb8:	82 2f       	mov	r24, r18
    3eba:	76 2f       	mov	r23, r22
    3ebc:	6a 2f       	mov	r22, r26
    3ebe:	11 24       	eor	r1, r1
    3ec0:	9f 57       	subi	r25, 0x7F	; 127
    3ec2:	50 40       	sbci	r21, 0x00	; 0
    3ec4:	9a f0       	brmi	.+38     	; 0x3eec <__mulsf3_pse+0x88>
    3ec6:	f1 f0       	breq	.+60     	; 0x3f04 <__mulsf3_pse+0xa0>
    3ec8:	88 23       	and	r24, r24
    3eca:	4a f0       	brmi	.+18     	; 0x3ede <__mulsf3_pse+0x7a>
    3ecc:	ee 0f       	add	r30, r30
    3ece:	ff 1f       	adc	r31, r31
    3ed0:	bb 1f       	adc	r27, r27
    3ed2:	66 1f       	adc	r22, r22
    3ed4:	77 1f       	adc	r23, r23
    3ed6:	88 1f       	adc	r24, r24
    3ed8:	91 50       	subi	r25, 0x01	; 1
    3eda:	50 40       	sbci	r21, 0x00	; 0
    3edc:	a9 f7       	brne	.-22     	; 0x3ec8 <__mulsf3_pse+0x64>
    3ede:	9e 3f       	cpi	r25, 0xFE	; 254
    3ee0:	51 05       	cpc	r21, r1
    3ee2:	80 f0       	brcs	.+32     	; 0x3f04 <__mulsf3_pse+0xa0>
    3ee4:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <__fp_inf>
    3ee8:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__fp_szero>
    3eec:	5f 3f       	cpi	r21, 0xFF	; 255
    3eee:	e4 f3       	brlt	.-8      	; 0x3ee8 <__mulsf3_pse+0x84>
    3ef0:	98 3e       	cpi	r25, 0xE8	; 232
    3ef2:	d4 f3       	brlt	.-12     	; 0x3ee8 <__mulsf3_pse+0x84>
    3ef4:	86 95       	lsr	r24
    3ef6:	77 95       	ror	r23
    3ef8:	67 95       	ror	r22
    3efa:	b7 95       	ror	r27
    3efc:	f7 95       	ror	r31
    3efe:	e7 95       	ror	r30
    3f00:	9f 5f       	subi	r25, 0xFF	; 255
    3f02:	c1 f7       	brne	.-16     	; 0x3ef4 <__mulsf3_pse+0x90>
    3f04:	fe 2b       	or	r31, r30
    3f06:	88 0f       	add	r24, r24
    3f08:	91 1d       	adc	r25, r1
    3f0a:	96 95       	lsr	r25
    3f0c:	87 95       	ror	r24
    3f0e:	97 f9       	bld	r25, 7
    3f10:	08 95       	ret

00003f12 <calloc>:
    3f12:	0f 93       	push	r16
    3f14:	1f 93       	push	r17
    3f16:	cf 93       	push	r28
    3f18:	df 93       	push	r29
    3f1a:	86 9f       	mul	r24, r22
    3f1c:	80 01       	movw	r16, r0
    3f1e:	87 9f       	mul	r24, r23
    3f20:	10 0d       	add	r17, r0
    3f22:	96 9f       	mul	r25, r22
    3f24:	10 0d       	add	r17, r0
    3f26:	11 24       	eor	r1, r1
    3f28:	c8 01       	movw	r24, r16
    3f2a:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <malloc>
    3f2e:	ec 01       	movw	r28, r24
    3f30:	00 97       	sbiw	r24, 0x00	; 0
    3f32:	29 f0       	breq	.+10     	; 0x3f3e <calloc+0x2c>
    3f34:	a8 01       	movw	r20, r16
    3f36:	60 e0       	ldi	r22, 0x00	; 0
    3f38:	70 e0       	ldi	r23, 0x00	; 0
    3f3a:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <memset>
    3f3e:	ce 01       	movw	r24, r28
    3f40:	df 91       	pop	r29
    3f42:	cf 91       	pop	r28
    3f44:	1f 91       	pop	r17
    3f46:	0f 91       	pop	r16
    3f48:	08 95       	ret

00003f4a <malloc>:
    3f4a:	cf 93       	push	r28
    3f4c:	df 93       	push	r29
    3f4e:	82 30       	cpi	r24, 0x02	; 2
    3f50:	91 05       	cpc	r25, r1
    3f52:	10 f4       	brcc	.+4      	; 0x3f58 <malloc+0xe>
    3f54:	82 e0       	ldi	r24, 0x02	; 2
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	e0 91 80 02 	lds	r30, 0x0280
    3f5c:	f0 91 81 02 	lds	r31, 0x0281
    3f60:	20 e0       	ldi	r18, 0x00	; 0
    3f62:	30 e0       	ldi	r19, 0x00	; 0
    3f64:	c0 e0       	ldi	r28, 0x00	; 0
    3f66:	d0 e0       	ldi	r29, 0x00	; 0
    3f68:	30 97       	sbiw	r30, 0x00	; 0
    3f6a:	11 f1       	breq	.+68     	; 0x3fb0 <malloc+0x66>
    3f6c:	40 81       	ld	r20, Z
    3f6e:	51 81       	ldd	r21, Z+1	; 0x01
    3f70:	48 17       	cp	r20, r24
    3f72:	59 07       	cpc	r21, r25
    3f74:	c0 f0       	brcs	.+48     	; 0x3fa6 <malloc+0x5c>
    3f76:	48 17       	cp	r20, r24
    3f78:	59 07       	cpc	r21, r25
    3f7a:	61 f4       	brne	.+24     	; 0x3f94 <malloc+0x4a>
    3f7c:	82 81       	ldd	r24, Z+2	; 0x02
    3f7e:	93 81       	ldd	r25, Z+3	; 0x03
    3f80:	20 97       	sbiw	r28, 0x00	; 0
    3f82:	19 f0       	breq	.+6      	; 0x3f8a <malloc+0x40>
    3f84:	9b 83       	std	Y+3, r25	; 0x03
    3f86:	8a 83       	std	Y+2, r24	; 0x02
    3f88:	2b c0       	rjmp	.+86     	; 0x3fe0 <malloc+0x96>
    3f8a:	90 93 81 02 	sts	0x0281, r25
    3f8e:	80 93 80 02 	sts	0x0280, r24
    3f92:	26 c0       	rjmp	.+76     	; 0x3fe0 <malloc+0x96>
    3f94:	21 15       	cp	r18, r1
    3f96:	31 05       	cpc	r19, r1
    3f98:	19 f0       	breq	.+6      	; 0x3fa0 <malloc+0x56>
    3f9a:	42 17       	cp	r20, r18
    3f9c:	53 07       	cpc	r21, r19
    3f9e:	18 f4       	brcc	.+6      	; 0x3fa6 <malloc+0x5c>
    3fa0:	9a 01       	movw	r18, r20
    3fa2:	be 01       	movw	r22, r28
    3fa4:	df 01       	movw	r26, r30
    3fa6:	ef 01       	movw	r28, r30
    3fa8:	02 80       	ldd	r0, Z+2	; 0x02
    3faa:	f3 81       	ldd	r31, Z+3	; 0x03
    3fac:	e0 2d       	mov	r30, r0
    3fae:	dc cf       	rjmp	.-72     	; 0x3f68 <malloc+0x1e>
    3fb0:	21 15       	cp	r18, r1
    3fb2:	31 05       	cpc	r19, r1
    3fb4:	09 f1       	breq	.+66     	; 0x3ff8 <malloc+0xae>
    3fb6:	28 1b       	sub	r18, r24
    3fb8:	39 0b       	sbc	r19, r25
    3fba:	24 30       	cpi	r18, 0x04	; 4
    3fbc:	31 05       	cpc	r19, r1
    3fbe:	90 f4       	brcc	.+36     	; 0x3fe4 <malloc+0x9a>
    3fc0:	12 96       	adiw	r26, 0x02	; 2
    3fc2:	8d 91       	ld	r24, X+
    3fc4:	9c 91       	ld	r25, X
    3fc6:	13 97       	sbiw	r26, 0x03	; 3
    3fc8:	61 15       	cp	r22, r1
    3fca:	71 05       	cpc	r23, r1
    3fcc:	21 f0       	breq	.+8      	; 0x3fd6 <malloc+0x8c>
    3fce:	fb 01       	movw	r30, r22
    3fd0:	93 83       	std	Z+3, r25	; 0x03
    3fd2:	82 83       	std	Z+2, r24	; 0x02
    3fd4:	04 c0       	rjmp	.+8      	; 0x3fde <malloc+0x94>
    3fd6:	90 93 81 02 	sts	0x0281, r25
    3fda:	80 93 80 02 	sts	0x0280, r24
    3fde:	fd 01       	movw	r30, r26
    3fe0:	32 96       	adiw	r30, 0x02	; 2
    3fe2:	44 c0       	rjmp	.+136    	; 0x406c <malloc+0x122>
    3fe4:	fd 01       	movw	r30, r26
    3fe6:	e2 0f       	add	r30, r18
    3fe8:	f3 1f       	adc	r31, r19
    3fea:	81 93       	st	Z+, r24
    3fec:	91 93       	st	Z+, r25
    3fee:	22 50       	subi	r18, 0x02	; 2
    3ff0:	31 09       	sbc	r19, r1
    3ff2:	2d 93       	st	X+, r18
    3ff4:	3c 93       	st	X, r19
    3ff6:	3a c0       	rjmp	.+116    	; 0x406c <malloc+0x122>
    3ff8:	20 91 7e 02 	lds	r18, 0x027E
    3ffc:	30 91 7f 02 	lds	r19, 0x027F
    4000:	23 2b       	or	r18, r19
    4002:	41 f4       	brne	.+16     	; 0x4014 <malloc+0xca>
    4004:	20 91 02 01 	lds	r18, 0x0102
    4008:	30 91 03 01 	lds	r19, 0x0103
    400c:	30 93 7f 02 	sts	0x027F, r19
    4010:	20 93 7e 02 	sts	0x027E, r18
    4014:	20 91 00 01 	lds	r18, 0x0100
    4018:	30 91 01 01 	lds	r19, 0x0101
    401c:	21 15       	cp	r18, r1
    401e:	31 05       	cpc	r19, r1
    4020:	41 f4       	brne	.+16     	; 0x4032 <malloc+0xe8>
    4022:	2d b7       	in	r18, 0x3d	; 61
    4024:	3e b7       	in	r19, 0x3e	; 62
    4026:	40 91 04 01 	lds	r20, 0x0104
    402a:	50 91 05 01 	lds	r21, 0x0105
    402e:	24 1b       	sub	r18, r20
    4030:	35 0b       	sbc	r19, r21
    4032:	e0 91 7e 02 	lds	r30, 0x027E
    4036:	f0 91 7f 02 	lds	r31, 0x027F
    403a:	e2 17       	cp	r30, r18
    403c:	f3 07       	cpc	r31, r19
    403e:	a0 f4       	brcc	.+40     	; 0x4068 <malloc+0x11e>
    4040:	2e 1b       	sub	r18, r30
    4042:	3f 0b       	sbc	r19, r31
    4044:	28 17       	cp	r18, r24
    4046:	39 07       	cpc	r19, r25
    4048:	78 f0       	brcs	.+30     	; 0x4068 <malloc+0x11e>
    404a:	ac 01       	movw	r20, r24
    404c:	4e 5f       	subi	r20, 0xFE	; 254
    404e:	5f 4f       	sbci	r21, 0xFF	; 255
    4050:	24 17       	cp	r18, r20
    4052:	35 07       	cpc	r19, r21
    4054:	48 f0       	brcs	.+18     	; 0x4068 <malloc+0x11e>
    4056:	4e 0f       	add	r20, r30
    4058:	5f 1f       	adc	r21, r31
    405a:	50 93 7f 02 	sts	0x027F, r21
    405e:	40 93 7e 02 	sts	0x027E, r20
    4062:	81 93       	st	Z+, r24
    4064:	91 93       	st	Z+, r25
    4066:	02 c0       	rjmp	.+4      	; 0x406c <malloc+0x122>
    4068:	e0 e0       	ldi	r30, 0x00	; 0
    406a:	f0 e0       	ldi	r31, 0x00	; 0
    406c:	cf 01       	movw	r24, r30
    406e:	df 91       	pop	r29
    4070:	cf 91       	pop	r28
    4072:	08 95       	ret

00004074 <free>:
    4074:	0f 93       	push	r16
    4076:	1f 93       	push	r17
    4078:	cf 93       	push	r28
    407a:	df 93       	push	r29
    407c:	00 97       	sbiw	r24, 0x00	; 0
    407e:	09 f4       	brne	.+2      	; 0x4082 <free+0xe>
    4080:	8c c0       	rjmp	.+280    	; 0x419a <free+0x126>
    4082:	fc 01       	movw	r30, r24
    4084:	32 97       	sbiw	r30, 0x02	; 2
    4086:	13 82       	std	Z+3, r1	; 0x03
    4088:	12 82       	std	Z+2, r1	; 0x02
    408a:	00 91 80 02 	lds	r16, 0x0280
    408e:	10 91 81 02 	lds	r17, 0x0281
    4092:	01 15       	cp	r16, r1
    4094:	11 05       	cpc	r17, r1
    4096:	81 f4       	brne	.+32     	; 0x40b8 <free+0x44>
    4098:	20 81       	ld	r18, Z
    409a:	31 81       	ldd	r19, Z+1	; 0x01
    409c:	82 0f       	add	r24, r18
    409e:	93 1f       	adc	r25, r19
    40a0:	20 91 7e 02 	lds	r18, 0x027E
    40a4:	30 91 7f 02 	lds	r19, 0x027F
    40a8:	28 17       	cp	r18, r24
    40aa:	39 07       	cpc	r19, r25
    40ac:	79 f5       	brne	.+94     	; 0x410c <free+0x98>
    40ae:	f0 93 7f 02 	sts	0x027F, r31
    40b2:	e0 93 7e 02 	sts	0x027E, r30
    40b6:	71 c0       	rjmp	.+226    	; 0x419a <free+0x126>
    40b8:	d8 01       	movw	r26, r16
    40ba:	40 e0       	ldi	r20, 0x00	; 0
    40bc:	50 e0       	ldi	r21, 0x00	; 0
    40be:	ae 17       	cp	r26, r30
    40c0:	bf 07       	cpc	r27, r31
    40c2:	50 f4       	brcc	.+20     	; 0x40d8 <free+0x64>
    40c4:	12 96       	adiw	r26, 0x02	; 2
    40c6:	2d 91       	ld	r18, X+
    40c8:	3c 91       	ld	r19, X
    40ca:	13 97       	sbiw	r26, 0x03	; 3
    40cc:	ad 01       	movw	r20, r26
    40ce:	21 15       	cp	r18, r1
    40d0:	31 05       	cpc	r19, r1
    40d2:	09 f1       	breq	.+66     	; 0x4116 <free+0xa2>
    40d4:	d9 01       	movw	r26, r18
    40d6:	f3 cf       	rjmp	.-26     	; 0x40be <free+0x4a>
    40d8:	9d 01       	movw	r18, r26
    40da:	da 01       	movw	r26, r20
    40dc:	33 83       	std	Z+3, r19	; 0x03
    40de:	22 83       	std	Z+2, r18	; 0x02
    40e0:	60 81       	ld	r22, Z
    40e2:	71 81       	ldd	r23, Z+1	; 0x01
    40e4:	86 0f       	add	r24, r22
    40e6:	97 1f       	adc	r25, r23
    40e8:	82 17       	cp	r24, r18
    40ea:	93 07       	cpc	r25, r19
    40ec:	69 f4       	brne	.+26     	; 0x4108 <free+0x94>
    40ee:	ec 01       	movw	r28, r24
    40f0:	28 81       	ld	r18, Y
    40f2:	39 81       	ldd	r19, Y+1	; 0x01
    40f4:	26 0f       	add	r18, r22
    40f6:	37 1f       	adc	r19, r23
    40f8:	2e 5f       	subi	r18, 0xFE	; 254
    40fa:	3f 4f       	sbci	r19, 0xFF	; 255
    40fc:	31 83       	std	Z+1, r19	; 0x01
    40fe:	20 83       	st	Z, r18
    4100:	8a 81       	ldd	r24, Y+2	; 0x02
    4102:	9b 81       	ldd	r25, Y+3	; 0x03
    4104:	93 83       	std	Z+3, r25	; 0x03
    4106:	82 83       	std	Z+2, r24	; 0x02
    4108:	45 2b       	or	r20, r21
    410a:	29 f4       	brne	.+10     	; 0x4116 <free+0xa2>
    410c:	f0 93 81 02 	sts	0x0281, r31
    4110:	e0 93 80 02 	sts	0x0280, r30
    4114:	42 c0       	rjmp	.+132    	; 0x419a <free+0x126>
    4116:	13 96       	adiw	r26, 0x03	; 3
    4118:	fc 93       	st	X, r31
    411a:	ee 93       	st	-X, r30
    411c:	12 97       	sbiw	r26, 0x02	; 2
    411e:	ed 01       	movw	r28, r26
    4120:	49 91       	ld	r20, Y+
    4122:	59 91       	ld	r21, Y+
    4124:	9e 01       	movw	r18, r28
    4126:	24 0f       	add	r18, r20
    4128:	35 1f       	adc	r19, r21
    412a:	e2 17       	cp	r30, r18
    412c:	f3 07       	cpc	r31, r19
    412e:	71 f4       	brne	.+28     	; 0x414c <free+0xd8>
    4130:	80 81       	ld	r24, Z
    4132:	91 81       	ldd	r25, Z+1	; 0x01
    4134:	84 0f       	add	r24, r20
    4136:	95 1f       	adc	r25, r21
    4138:	02 96       	adiw	r24, 0x02	; 2
    413a:	11 96       	adiw	r26, 0x01	; 1
    413c:	9c 93       	st	X, r25
    413e:	8e 93       	st	-X, r24
    4140:	82 81       	ldd	r24, Z+2	; 0x02
    4142:	93 81       	ldd	r25, Z+3	; 0x03
    4144:	13 96       	adiw	r26, 0x03	; 3
    4146:	9c 93       	st	X, r25
    4148:	8e 93       	st	-X, r24
    414a:	12 97       	sbiw	r26, 0x02	; 2
    414c:	e0 e0       	ldi	r30, 0x00	; 0
    414e:	f0 e0       	ldi	r31, 0x00	; 0
    4150:	d8 01       	movw	r26, r16
    4152:	12 96       	adiw	r26, 0x02	; 2
    4154:	8d 91       	ld	r24, X+
    4156:	9c 91       	ld	r25, X
    4158:	13 97       	sbiw	r26, 0x03	; 3
    415a:	00 97       	sbiw	r24, 0x00	; 0
    415c:	19 f0       	breq	.+6      	; 0x4164 <free+0xf0>
    415e:	f8 01       	movw	r30, r16
    4160:	8c 01       	movw	r16, r24
    4162:	f6 cf       	rjmp	.-20     	; 0x4150 <free+0xdc>
    4164:	8d 91       	ld	r24, X+
    4166:	9c 91       	ld	r25, X
    4168:	98 01       	movw	r18, r16
    416a:	2e 5f       	subi	r18, 0xFE	; 254
    416c:	3f 4f       	sbci	r19, 0xFF	; 255
    416e:	82 0f       	add	r24, r18
    4170:	93 1f       	adc	r25, r19
    4172:	20 91 7e 02 	lds	r18, 0x027E
    4176:	30 91 7f 02 	lds	r19, 0x027F
    417a:	28 17       	cp	r18, r24
    417c:	39 07       	cpc	r19, r25
    417e:	69 f4       	brne	.+26     	; 0x419a <free+0x126>
    4180:	30 97       	sbiw	r30, 0x00	; 0
    4182:	29 f4       	brne	.+10     	; 0x418e <free+0x11a>
    4184:	10 92 81 02 	sts	0x0281, r1
    4188:	10 92 80 02 	sts	0x0280, r1
    418c:	02 c0       	rjmp	.+4      	; 0x4192 <free+0x11e>
    418e:	13 82       	std	Z+3, r1	; 0x03
    4190:	12 82       	std	Z+2, r1	; 0x02
    4192:	10 93 7f 02 	sts	0x027F, r17
    4196:	00 93 7e 02 	sts	0x027E, r16
    419a:	df 91       	pop	r29
    419c:	cf 91       	pop	r28
    419e:	1f 91       	pop	r17
    41a0:	0f 91       	pop	r16
    41a2:	08 95       	ret

000041a4 <memset>:
    41a4:	dc 01       	movw	r26, r24
    41a6:	01 c0       	rjmp	.+2      	; 0x41aa <memset+0x6>
    41a8:	6d 93       	st	X+, r22
    41aa:	41 50       	subi	r20, 0x01	; 1
    41ac:	50 40       	sbci	r21, 0x00	; 0
    41ae:	e0 f7       	brcc	.-8      	; 0x41a8 <memset+0x4>
    41b0:	08 95       	ret

000041b2 <_exit>:
    41b2:	f8 94       	cli

000041b4 <__stop_program>:
    41b4:	ff cf       	rjmp	.-2      	; 0x41b4 <__stop_program>
