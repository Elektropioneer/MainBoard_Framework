
EP_Framework_Atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00003d64  00003df8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000156  0080011e  0080011e  00003e16  2**0
                  ALLOC
  3 .stab         00005a24  00000000  00000000  00003e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000214d  00000000  00000000  0000983c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000b989  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000b99c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__vector_23>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__vector_32>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 25 18 	jmp	0x304a	; 0x304a <__vector_34>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 e6       	ldi	r30, 0x64	; 100
      a8:	fd e3       	ldi	r31, 0x3D	; 61
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 31       	cpi	r26, 0x1E	; 30
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	ae e1       	ldi	r26, 0x1E	; 30
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a4 37       	cpi	r26, 0x74	; 116
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 1c 1b 	call	0x3638	; 0x3638 <main>
      ce:	0c 94 b0 1e 	jmp	0x3d60	; 0x3d60 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <act_servo>:
#include "usart.h"
#include "can.h"

//angle -> 0-180

void act_servo(Servo_Act* servo_, uint8_t angle_) {
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
      de:	69 97       	sbiw	r28, 0x19	; 25
      e0:	0f b6       	in	r0, 0x3f	; 63
      e2:	f8 94       	cli
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	0f be       	out	0x3f, r0	; 63
      e8:	cd bf       	out	0x3d, r28	; 61
      ea:	98 8f       	std	Y+24, r25	; 0x18
      ec:	8f 8b       	std	Y+23, r24	; 0x17
      ee:	69 8f       	std	Y+25, r22	; 0x19

	uint8_t buf[8];

	if(servo_->ID == DATTACHED) {
      f0:	8f 89       	ldd	r24, Y+23	; 0x17
      f2:	98 8d       	ldd	r25, Y+24	; 0x18
      f4:	fc 01       	movw	r30, r24
      f6:	80 81       	ld	r24, Z
      f8:	88 23       	and	r24, r24
      fa:	21 f4       	brne	.+8      	; 0x104 <act_servo+0x2e>
		attach_servo(servo_);
      fc:	8f 89       	ldd	r24, Y+23	; 0x17
      fe:	98 8d       	ldd	r25, Y+24	; 0x18
     100:	0e 94 48 01 	call	0x290	; 0x290 <attach_servo>
	}

	buf[0] = 'S'; 			// servo
     104:	83 e5       	ldi	r24, 0x53	; 83
     106:	8f 87       	std	Y+15, r24	; 0x0f
	buf[1] = servo_->ID; 	// the ID
     108:	8f 89       	ldd	r24, Y+23	; 0x17
     10a:	98 8d       	ldd	r25, Y+24	; 0x18
     10c:	fc 01       	movw	r30, r24
     10e:	80 81       	ld	r24, Z
     110:	88 8b       	std	Y+16, r24	; 0x10
	buf[2] = 'C';			// give heads up (control)
     112:	83 e4       	ldi	r24, 0x43	; 67
     114:	89 8b       	std	Y+17, r24	; 0x11
	buf[3] = angle_;		// angle
     116:	89 8d       	ldd	r24, Y+25	; 0x19
     118:	8a 8b       	std	Y+18, r24	; 0x12

	while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     11a:	72 c0       	rjmp	.+228    	; 0x200 <act_servo+0x12a>
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	a8 e4       	ldi	r26, 0x48	; 72
     122:	b2 e4       	ldi	r27, 0x42	; 66
     124:	89 83       	std	Y+1, r24	; 0x01
     126:	9a 83       	std	Y+2, r25	; 0x02
     128:	ab 83       	std	Y+3, r26	; 0x03
     12a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e4       	ldi	r19, 0x40	; 64
     130:	4c e1       	ldi	r20, 0x1C	; 28
     132:	55 e4       	ldi	r21, 0x45	; 69
     134:	69 81       	ldd	r22, Y+1	; 0x01
     136:	7a 81       	ldd	r23, Y+2	; 0x02
     138:	8b 81       	ldd	r24, Y+3	; 0x03
     13a:	9c 81       	ldd	r25, Y+4	; 0x04
     13c:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     140:	dc 01       	movw	r26, r24
     142:	cb 01       	movw	r24, r22
     144:	8d 83       	std	Y+5, r24	; 0x05
     146:	9e 83       	std	Y+6, r25	; 0x06
     148:	af 83       	std	Y+7, r26	; 0x07
     14a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	40 e8       	ldi	r20, 0x80	; 128
     152:	5f e3       	ldi	r21, 0x3F	; 63
     154:	6d 81       	ldd	r22, Y+5	; 0x05
     156:	7e 81       	ldd	r23, Y+6	; 0x06
     158:	8f 81       	ldd	r24, Y+7	; 0x07
     15a:	98 85       	ldd	r25, Y+8	; 0x08
     15c:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
     160:	88 23       	and	r24, r24
     162:	2c f4       	brge	.+10     	; 0x16e <act_servo+0x98>
		__ticks = 1;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	9a 87       	std	Y+10, r25	; 0x0a
     16a:	89 87       	std	Y+9, r24	; 0x09
     16c:	3f c0       	rjmp	.+126    	; 0x1ec <act_servo+0x116>
	else if (__tmp > 65535)
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	3f ef       	ldi	r19, 0xFF	; 255
     172:	4f e7       	ldi	r20, 0x7F	; 127
     174:	57 e4       	ldi	r21, 0x47	; 71
     176:	6d 81       	ldd	r22, Y+5	; 0x05
     178:	7e 81       	ldd	r23, Y+6	; 0x06
     17a:	8f 81       	ldd	r24, Y+7	; 0x07
     17c:	98 85       	ldd	r25, Y+8	; 0x08
     17e:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
     182:	18 16       	cp	r1, r24
     184:	4c f5       	brge	.+82     	; 0x1d8 <act_servo+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	40 e2       	ldi	r20, 0x20	; 32
     18c:	51 e4       	ldi	r21, 0x41	; 65
     18e:	69 81       	ldd	r22, Y+1	; 0x01
     190:	7a 81       	ldd	r23, Y+2	; 0x02
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	9c 81       	ldd	r25, Y+4	; 0x04
     196:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     19a:	dc 01       	movw	r26, r24
     19c:	cb 01       	movw	r24, r22
     19e:	bc 01       	movw	r22, r24
     1a0:	cd 01       	movw	r24, r26
     1a2:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     1a6:	dc 01       	movw	r26, r24
     1a8:	cb 01       	movw	r24, r22
     1aa:	9a 87       	std	Y+10, r25	; 0x0a
     1ac:	89 87       	std	Y+9, r24	; 0x09
     1ae:	0f c0       	rjmp	.+30     	; 0x1ce <act_servo+0xf8>
     1b0:	8a ef       	ldi	r24, 0xFA	; 250
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	9c 87       	std	Y+12, r25	; 0x0c
     1b6:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     1ba:	9c 85       	ldd	r25, Y+12	; 0x0c
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <act_servo+0xe6>
     1c0:	9c 87       	std	Y+12, r25	; 0x0c
     1c2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1c4:	89 85       	ldd	r24, Y+9	; 0x09
     1c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	9a 87       	std	Y+10, r25	; 0x0a
     1cc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ce:	89 85       	ldd	r24, Y+9	; 0x09
     1d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     1d2:	89 2b       	or	r24, r25
     1d4:	69 f7       	brne	.-38     	; 0x1b0 <act_servo+0xda>
     1d6:	14 c0       	rjmp	.+40     	; 0x200 <act_servo+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1d8:	6d 81       	ldd	r22, Y+5	; 0x05
     1da:	7e 81       	ldd	r23, Y+6	; 0x06
     1dc:	8f 81       	ldd	r24, Y+7	; 0x07
     1de:	98 85       	ldd	r25, Y+8	; 0x08
     1e0:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     1e4:	dc 01       	movw	r26, r24
     1e6:	cb 01       	movw	r24, r22
     1e8:	9a 87       	std	Y+10, r25	; 0x0a
     1ea:	89 87       	std	Y+9, r24	; 0x09
     1ec:	89 85       	ldd	r24, Y+9	; 0x09
     1ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     1f0:	9e 87       	std	Y+14, r25	; 0x0e
     1f2:	8d 87       	std	Y+13, r24	; 0x0d
     1f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     1f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <act_servo+0x122>
     1fc:	9e 87       	std	Y+14, r25	; 0x0e
     1fe:	8d 87       	std	Y+13, r24	; 0x0d
     200:	ce 01       	movw	r24, r28
     202:	0f 96       	adiw	r24, 0x0f	; 15
     204:	64 ed       	ldi	r22, 0xD4	; 212
     206:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     20a:	88 23       	and	r24, r24
     20c:	09 f0       	breq	.+2      	; 0x210 <act_servo+0x13a>
     20e:	86 cf       	rjmp	.-244    	; 0x11c <act_servo+0x46>
			_delay_ms(50);

	servo_->angle = angle_;
     210:	8f 89       	ldd	r24, Y+23	; 0x17
     212:	98 8d       	ldd	r25, Y+24	; 0x18
     214:	29 8d       	ldd	r18, Y+25	; 0x19
     216:	fc 01       	movw	r30, r24
     218:	21 83       	std	Z+1, r18	; 0x01

}
     21a:	69 96       	adiw	r28, 0x19	; 25
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	f8 94       	cli
     220:	de bf       	out	0x3e, r29	; 62
     222:	0f be       	out	0x3f, r0	; 63
     224:	cd bf       	out	0x3d, r28	; 61
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <setup_servo>:
	void setup_servo(Servo_Act* servo_, uint8_t ID_, uint8_t angle_, unsigned send) {
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	00 d0       	rcall	.+0      	; 0x232 <setup_servo+0x6>
     232:	00 d0       	rcall	.+0      	; 0x234 <setup_servo+0x8>
     234:	00 d0       	rcall	.+0      	; 0x236 <setup_servo+0xa>
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	9a 83       	std	Y+2, r25	; 0x02
     23c:	89 83       	std	Y+1, r24	; 0x01
     23e:	6b 83       	std	Y+3, r22	; 0x03
     240:	4c 83       	std	Y+4, r20	; 0x04
     242:	3e 83       	std	Y+6, r19	; 0x06
     244:	2d 83       	std	Y+5, r18	; 0x05

		servo_->ID 		= ID_;
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	9a 81       	ldd	r25, Y+2	; 0x02
     24a:	2b 81       	ldd	r18, Y+3	; 0x03
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18
		servo_->angle 	= angle_;
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	9a 81       	ldd	r25, Y+2	; 0x02
     254:	2c 81       	ldd	r18, Y+4	; 0x04
     256:	fc 01       	movw	r30, r24
     258:	21 83       	std	Z+1, r18	; 0x01

		if(send) {
     25a:	8d 81       	ldd	r24, Y+5	; 0x05
     25c:	9e 81       	ldd	r25, Y+6	; 0x06
     25e:	89 2b       	or	r24, r25
     260:	51 f0       	breq	.+20     	; 0x276 <setup_servo+0x4a>
			attach_servo(servo_);
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	0e 94 48 01 	call	0x290	; 0x290 <attach_servo>
			act_servo(servo_, angle_);
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	9a 81       	ldd	r25, Y+2	; 0x02
     26e:	6c 81       	ldd	r22, Y+4	; 0x04
     270:	0e 94 6b 00 	call	0xd6	; 0xd6 <act_servo>
     274:	04 c0       	rjmp	.+8      	; 0x27e <setup_servo+0x52>
		} else {
			detach_servo(servo_);
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	9a 81       	ldd	r25, Y+2	; 0x02
     27a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <detach_servo>
		}

	}
     27e:	26 96       	adiw	r28, 0x06	; 6
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	f8 94       	cli
     284:	de bf       	out	0x3e, r29	; 62
     286:	0f be       	out	0x3f, r0	; 63
     288:	cd bf       	out	0x3d, r28	; 61
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	08 95       	ret

00000290 <attach_servo>:

	void attach_servo(Servo_Act* servo_) {
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	68 97       	sbiw	r28, 0x18	; 24
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	98 8f       	std	Y+24, r25	; 0x18
     2a6:	8f 8b       	std	Y+23, r24	; 0x17

		uint8_t buf[8];

		buf[0] = 'S'; 			// servo
     2a8:	83 e5       	ldi	r24, 0x53	; 83
     2aa:	8f 87       	std	Y+15, r24	; 0x0f
		buf[1] = servo_->ID; 	// the ID
     2ac:	8f 89       	ldd	r24, Y+23	; 0x17
     2ae:	98 8d       	ldd	r25, Y+24	; 0x18
     2b0:	fc 01       	movw	r30, r24
     2b2:	80 81       	ld	r24, Z
     2b4:	88 8b       	std	Y+16, r24	; 0x10
		buf[2] = 'S';			// give heads up (status)
     2b6:	83 e5       	ldi	r24, 0x53	; 83
     2b8:	89 8b       	std	Y+17, r24	; 0x11
		buf[3] = 'A';			// attach
     2ba:	81 e4       	ldi	r24, 0x41	; 65
     2bc:	8a 8b       	std	Y+18, r24	; 0x12

		while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     2be:	72 c0       	rjmp	.+228    	; 0x3a4 <attach_servo+0x114>
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	a8 e4       	ldi	r26, 0x48	; 72
     2c6:	b2 e4       	ldi	r27, 0x42	; 66
     2c8:	89 83       	std	Y+1, r24	; 0x01
     2ca:	9a 83       	std	Y+2, r25	; 0x02
     2cc:	ab 83       	std	Y+3, r26	; 0x03
     2ce:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e4       	ldi	r19, 0x40	; 64
     2d4:	4c e1       	ldi	r20, 0x1C	; 28
     2d6:	55 e4       	ldi	r21, 0x45	; 69
     2d8:	69 81       	ldd	r22, Y+1	; 0x01
     2da:	7a 81       	ldd	r23, Y+2	; 0x02
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	9c 81       	ldd	r25, Y+4	; 0x04
     2e0:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     2e4:	dc 01       	movw	r26, r24
     2e6:	cb 01       	movw	r24, r22
     2e8:	8d 83       	std	Y+5, r24	; 0x05
     2ea:	9e 83       	std	Y+6, r25	; 0x06
     2ec:	af 83       	std	Y+7, r26	; 0x07
     2ee:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 e8       	ldi	r20, 0x80	; 128
     2f6:	5f e3       	ldi	r21, 0x3F	; 63
     2f8:	6d 81       	ldd	r22, Y+5	; 0x05
     2fa:	7e 81       	ldd	r23, Y+6	; 0x06
     2fc:	8f 81       	ldd	r24, Y+7	; 0x07
     2fe:	98 85       	ldd	r25, Y+8	; 0x08
     300:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
     304:	88 23       	and	r24, r24
     306:	2c f4       	brge	.+10     	; 0x312 <attach_servo+0x82>
		__ticks = 1;
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	9a 87       	std	Y+10, r25	; 0x0a
     30e:	89 87       	std	Y+9, r24	; 0x09
     310:	3f c0       	rjmp	.+126    	; 0x390 <attach_servo+0x100>
	else if (__tmp > 65535)
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	3f ef       	ldi	r19, 0xFF	; 255
     316:	4f e7       	ldi	r20, 0x7F	; 127
     318:	57 e4       	ldi	r21, 0x47	; 71
     31a:	6d 81       	ldd	r22, Y+5	; 0x05
     31c:	7e 81       	ldd	r23, Y+6	; 0x06
     31e:	8f 81       	ldd	r24, Y+7	; 0x07
     320:	98 85       	ldd	r25, Y+8	; 0x08
     322:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
     326:	18 16       	cp	r1, r24
     328:	4c f5       	brge	.+82     	; 0x37c <attach_servo+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e2       	ldi	r20, 0x20	; 32
     330:	51 e4       	ldi	r21, 0x41	; 65
     332:	69 81       	ldd	r22, Y+1	; 0x01
     334:	7a 81       	ldd	r23, Y+2	; 0x02
     336:	8b 81       	ldd	r24, Y+3	; 0x03
     338:	9c 81       	ldd	r25, Y+4	; 0x04
     33a:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     33e:	dc 01       	movw	r26, r24
     340:	cb 01       	movw	r24, r22
     342:	bc 01       	movw	r22, r24
     344:	cd 01       	movw	r24, r26
     346:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     34a:	dc 01       	movw	r26, r24
     34c:	cb 01       	movw	r24, r22
     34e:	9a 87       	std	Y+10, r25	; 0x0a
     350:	89 87       	std	Y+9, r24	; 0x09
     352:	0f c0       	rjmp	.+30     	; 0x372 <attach_servo+0xe2>
     354:	8a ef       	ldi	r24, 0xFA	; 250
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	9c 87       	std	Y+12, r25	; 0x0c
     35a:	8b 87       	std	Y+11, r24	; 0x0b
     35c:	8b 85       	ldd	r24, Y+11	; 0x0b
     35e:	9c 85       	ldd	r25, Y+12	; 0x0c
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	f1 f7       	brne	.-4      	; 0x360 <attach_servo+0xd0>
     364:	9c 87       	std	Y+12, r25	; 0x0c
     366:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     368:	89 85       	ldd	r24, Y+9	; 0x09
     36a:	9a 85       	ldd	r25, Y+10	; 0x0a
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	9a 87       	std	Y+10, r25	; 0x0a
     370:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     372:	89 85       	ldd	r24, Y+9	; 0x09
     374:	9a 85       	ldd	r25, Y+10	; 0x0a
     376:	89 2b       	or	r24, r25
     378:	69 f7       	brne	.-38     	; 0x354 <attach_servo+0xc4>
     37a:	14 c0       	rjmp	.+40     	; 0x3a4 <attach_servo+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     37c:	6d 81       	ldd	r22, Y+5	; 0x05
     37e:	7e 81       	ldd	r23, Y+6	; 0x06
     380:	8f 81       	ldd	r24, Y+7	; 0x07
     382:	98 85       	ldd	r25, Y+8	; 0x08
     384:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	9a 87       	std	Y+10, r25	; 0x0a
     38e:	89 87       	std	Y+9, r24	; 0x09
     390:	89 85       	ldd	r24, Y+9	; 0x09
     392:	9a 85       	ldd	r25, Y+10	; 0x0a
     394:	9e 87       	std	Y+14, r25	; 0x0e
     396:	8d 87       	std	Y+13, r24	; 0x0d
     398:	8d 85       	ldd	r24, Y+13	; 0x0d
     39a:	9e 85       	ldd	r25, Y+14	; 0x0e
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <attach_servo+0x10c>
     3a0:	9e 87       	std	Y+14, r25	; 0x0e
     3a2:	8d 87       	std	Y+13, r24	; 0x0d
     3a4:	ce 01       	movw	r24, r28
     3a6:	0f 96       	adiw	r24, 0x0f	; 15
     3a8:	64 ed       	ldi	r22, 0xD4	; 212
     3aa:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     3ae:	88 23       	and	r24, r24
     3b0:	09 f0       	breq	.+2      	; 0x3b4 <attach_servo+0x124>
     3b2:	86 cf       	rjmp	.-244    	; 0x2c0 <attach_servo+0x30>
					_delay_ms(50);

		servo_->status = ATTACHED;
     3b4:	8f 89       	ldd	r24, Y+23	; 0x17
     3b6:	98 8d       	ldd	r25, Y+24	; 0x18
     3b8:	21 e0       	ldi	r18, 0x01	; 1
     3ba:	fc 01       	movw	r30, r24
     3bc:	22 83       	std	Z+2, r18	; 0x02

	}
     3be:	68 96       	adiw	r28, 0x18	; 24
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <detach_servo>:

	void detach_servo(Servo_Act* servo_) {
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	68 97       	sbiw	r28, 0x18	; 24
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	98 8f       	std	Y+24, r25	; 0x18
     3e6:	8f 8b       	std	Y+23, r24	; 0x17

		uint8_t buf[8];

		buf[0] = 'S'; 			// servo
     3e8:	83 e5       	ldi	r24, 0x53	; 83
     3ea:	8f 87       	std	Y+15, r24	; 0x0f
		buf[1] = servo_->ID; 	// the ID
     3ec:	8f 89       	ldd	r24, Y+23	; 0x17
     3ee:	98 8d       	ldd	r25, Y+24	; 0x18
     3f0:	fc 01       	movw	r30, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	88 8b       	std	Y+16, r24	; 0x10
		buf[2] = 'S';			// give heads up (status)
     3f6:	83 e5       	ldi	r24, 0x53	; 83
     3f8:	89 8b       	std	Y+17, r24	; 0x11
		buf[3] = 'D';			// deattach
     3fa:	84 e4       	ldi	r24, 0x44	; 68
     3fc:	8a 8b       	std	Y+18, r24	; 0x12

		while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     3fe:	72 c0       	rjmp	.+228    	; 0x4e4 <detach_servo+0x114>
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	a8 e4       	ldi	r26, 0x48	; 72
     406:	b2 e4       	ldi	r27, 0x42	; 66
     408:	89 83       	std	Y+1, r24	; 0x01
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	ab 83       	std	Y+3, r26	; 0x03
     40e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e4       	ldi	r19, 0x40	; 64
     414:	4c e1       	ldi	r20, 0x1C	; 28
     416:	55 e4       	ldi	r21, 0x45	; 69
     418:	69 81       	ldd	r22, Y+1	; 0x01
     41a:	7a 81       	ldd	r23, Y+2	; 0x02
     41c:	8b 81       	ldd	r24, Y+3	; 0x03
     41e:	9c 81       	ldd	r25, Y+4	; 0x04
     420:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	8d 83       	std	Y+5, r24	; 0x05
     42a:	9e 83       	std	Y+6, r25	; 0x06
     42c:	af 83       	std	Y+7, r26	; 0x07
     42e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	40 e8       	ldi	r20, 0x80	; 128
     436:	5f e3       	ldi	r21, 0x3F	; 63
     438:	6d 81       	ldd	r22, Y+5	; 0x05
     43a:	7e 81       	ldd	r23, Y+6	; 0x06
     43c:	8f 81       	ldd	r24, Y+7	; 0x07
     43e:	98 85       	ldd	r25, Y+8	; 0x08
     440:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
     444:	88 23       	and	r24, r24
     446:	2c f4       	brge	.+10     	; 0x452 <detach_servo+0x82>
		__ticks = 1;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	9a 87       	std	Y+10, r25	; 0x0a
     44e:	89 87       	std	Y+9, r24	; 0x09
     450:	3f c0       	rjmp	.+126    	; 0x4d0 <detach_servo+0x100>
	else if (__tmp > 65535)
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	3f ef       	ldi	r19, 0xFF	; 255
     456:	4f e7       	ldi	r20, 0x7F	; 127
     458:	57 e4       	ldi	r21, 0x47	; 71
     45a:	6d 81       	ldd	r22, Y+5	; 0x05
     45c:	7e 81       	ldd	r23, Y+6	; 0x06
     45e:	8f 81       	ldd	r24, Y+7	; 0x07
     460:	98 85       	ldd	r25, Y+8	; 0x08
     462:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
     466:	18 16       	cp	r1, r24
     468:	4c f5       	brge	.+82     	; 0x4bc <detach_servo+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	40 e2       	ldi	r20, 0x20	; 32
     470:	51 e4       	ldi	r21, 0x41	; 65
     472:	69 81       	ldd	r22, Y+1	; 0x01
     474:	7a 81       	ldd	r23, Y+2	; 0x02
     476:	8b 81       	ldd	r24, Y+3	; 0x03
     478:	9c 81       	ldd	r25, Y+4	; 0x04
     47a:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     47e:	dc 01       	movw	r26, r24
     480:	cb 01       	movw	r24, r22
     482:	bc 01       	movw	r22, r24
     484:	cd 01       	movw	r24, r26
     486:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     48a:	dc 01       	movw	r26, r24
     48c:	cb 01       	movw	r24, r22
     48e:	9a 87       	std	Y+10, r25	; 0x0a
     490:	89 87       	std	Y+9, r24	; 0x09
     492:	0f c0       	rjmp	.+30     	; 0x4b2 <detach_servo+0xe2>
     494:	8a ef       	ldi	r24, 0xFA	; 250
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	9c 87       	std	Y+12, r25	; 0x0c
     49a:	8b 87       	std	Y+11, r24	; 0x0b
     49c:	8b 85       	ldd	r24, Y+11	; 0x0b
     49e:	9c 85       	ldd	r25, Y+12	; 0x0c
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <detach_servo+0xd0>
     4a4:	9c 87       	std	Y+12, r25	; 0x0c
     4a6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a8:	89 85       	ldd	r24, Y+9	; 0x09
     4aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ac:	01 97       	sbiw	r24, 0x01	; 1
     4ae:	9a 87       	std	Y+10, r25	; 0x0a
     4b0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4b2:	89 85       	ldd	r24, Y+9	; 0x09
     4b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b6:	89 2b       	or	r24, r25
     4b8:	69 f7       	brne	.-38     	; 0x494 <detach_servo+0xc4>
     4ba:	14 c0       	rjmp	.+40     	; 0x4e4 <detach_servo+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4bc:	6d 81       	ldd	r22, Y+5	; 0x05
     4be:	7e 81       	ldd	r23, Y+6	; 0x06
     4c0:	8f 81       	ldd	r24, Y+7	; 0x07
     4c2:	98 85       	ldd	r25, Y+8	; 0x08
     4c4:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     4c8:	dc 01       	movw	r26, r24
     4ca:	cb 01       	movw	r24, r22
     4cc:	9a 87       	std	Y+10, r25	; 0x0a
     4ce:	89 87       	std	Y+9, r24	; 0x09
     4d0:	89 85       	ldd	r24, Y+9	; 0x09
     4d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4d4:	9e 87       	std	Y+14, r25	; 0x0e
     4d6:	8d 87       	std	Y+13, r24	; 0x0d
     4d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     4da:	9e 85       	ldd	r25, Y+14	; 0x0e
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <detach_servo+0x10c>
     4e0:	9e 87       	std	Y+14, r25	; 0x0e
     4e2:	8d 87       	std	Y+13, r24	; 0x0d
     4e4:	ce 01       	movw	r24, r28
     4e6:	0f 96       	adiw	r24, 0x0f	; 15
     4e8:	64 ed       	ldi	r22, 0xD4	; 212
     4ea:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     4ee:	88 23       	and	r24, r24
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <detach_servo+0x124>
     4f2:	86 cf       	rjmp	.-244    	; 0x400 <detach_servo+0x30>
					_delay_ms(50);

		servo_->status = DATTACHED;
     4f4:	8f 89       	ldd	r24, Y+23	; 0x17
     4f6:	98 8d       	ldd	r25, Y+24	; 0x18
     4f8:	fc 01       	movw	r30, r24
     4fa:	12 82       	std	Z+2, r1	; 0x02
	}
     4fc:	68 96       	adiw	r28, 0x18	; 24
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <act_relay>:

void act_relay(Relay_Act* relay_info) {
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	68 97       	sbiw	r28, 0x18	; 24
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
     522:	98 8f       	std	Y+24, r25	; 0x18
     524:	8f 8b       	std	Y+23, r24	; 0x17

	//relay_info.status = WAITING;

	uint8_t buf[8];

	buf[0] = 'R';
     526:	82 e5       	ldi	r24, 0x52	; 82
     528:	8f 87       	std	Y+15, r24	; 0x0f
	buf[1] = relay_info->ID;
     52a:	8f 89       	ldd	r24, Y+23	; 0x17
     52c:	98 8d       	ldd	r25, Y+24	; 0x18
     52e:	fc 01       	movw	r30, r24
     530:	80 81       	ld	r24, Z
     532:	88 8b       	std	Y+16, r24	; 0x10
	buf[2] = relay_info->state;
     534:	8f 89       	ldd	r24, Y+23	; 0x17
     536:	98 8d       	ldd	r25, Y+24	; 0x18
     538:	fc 01       	movw	r30, r24
     53a:	81 81       	ldd	r24, Z+1	; 0x01
     53c:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     53e:	72 c0       	rjmp	.+228    	; 0x624 <act_relay+0x116>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	a8 e4       	ldi	r26, 0x48	; 72
     546:	b2 e4       	ldi	r27, 0x42	; 66
     548:	89 83       	std	Y+1, r24	; 0x01
     54a:	9a 83       	std	Y+2, r25	; 0x02
     54c:	ab 83       	std	Y+3, r26	; 0x03
     54e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e4       	ldi	r19, 0x40	; 64
     554:	4c e1       	ldi	r20, 0x1C	; 28
     556:	55 e4       	ldi	r21, 0x45	; 69
     558:	69 81       	ldd	r22, Y+1	; 0x01
     55a:	7a 81       	ldd	r23, Y+2	; 0x02
     55c:	8b 81       	ldd	r24, Y+3	; 0x03
     55e:	9c 81       	ldd	r25, Y+4	; 0x04
     560:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	8d 83       	std	Y+5, r24	; 0x05
     56a:	9e 83       	std	Y+6, r25	; 0x06
     56c:	af 83       	std	Y+7, r26	; 0x07
     56e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e8       	ldi	r20, 0x80	; 128
     576:	5f e3       	ldi	r21, 0x3F	; 63
     578:	6d 81       	ldd	r22, Y+5	; 0x05
     57a:	7e 81       	ldd	r23, Y+6	; 0x06
     57c:	8f 81       	ldd	r24, Y+7	; 0x07
     57e:	98 85       	ldd	r25, Y+8	; 0x08
     580:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
     584:	88 23       	and	r24, r24
     586:	2c f4       	brge	.+10     	; 0x592 <act_relay+0x84>
		__ticks = 1;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	9a 87       	std	Y+10, r25	; 0x0a
     58e:	89 87       	std	Y+9, r24	; 0x09
     590:	3f c0       	rjmp	.+126    	; 0x610 <act_relay+0x102>
	else if (__tmp > 65535)
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	3f ef       	ldi	r19, 0xFF	; 255
     596:	4f e7       	ldi	r20, 0x7F	; 127
     598:	57 e4       	ldi	r21, 0x47	; 71
     59a:	6d 81       	ldd	r22, Y+5	; 0x05
     59c:	7e 81       	ldd	r23, Y+6	; 0x06
     59e:	8f 81       	ldd	r24, Y+7	; 0x07
     5a0:	98 85       	ldd	r25, Y+8	; 0x08
     5a2:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
     5a6:	18 16       	cp	r1, r24
     5a8:	4c f5       	brge	.+82     	; 0x5fc <act_relay+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	40 e2       	ldi	r20, 0x20	; 32
     5b0:	51 e4       	ldi	r21, 0x41	; 65
     5b2:	69 81       	ldd	r22, Y+1	; 0x01
     5b4:	7a 81       	ldd	r23, Y+2	; 0x02
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ba:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	bc 01       	movw	r22, r24
     5c4:	cd 01       	movw	r24, r26
     5c6:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     5ca:	dc 01       	movw	r26, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	9a 87       	std	Y+10, r25	; 0x0a
     5d0:	89 87       	std	Y+9, r24	; 0x09
     5d2:	0f c0       	rjmp	.+30     	; 0x5f2 <act_relay+0xe4>
     5d4:	8a ef       	ldi	r24, 0xFA	; 250
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	9c 87       	std	Y+12, r25	; 0x0c
     5da:	8b 87       	std	Y+11, r24	; 0x0b
     5dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     5de:	9c 85       	ldd	r25, Y+12	; 0x0c
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <act_relay+0xd2>
     5e4:	9c 87       	std	Y+12, r25	; 0x0c
     5e6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e8:	89 85       	ldd	r24, Y+9	; 0x09
     5ea:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	9a 87       	std	Y+10, r25	; 0x0a
     5f0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f2:	89 85       	ldd	r24, Y+9	; 0x09
     5f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5f6:	89 2b       	or	r24, r25
     5f8:	69 f7       	brne	.-38     	; 0x5d4 <act_relay+0xc6>
     5fa:	14 c0       	rjmp	.+40     	; 0x624 <act_relay+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5fc:	6d 81       	ldd	r22, Y+5	; 0x05
     5fe:	7e 81       	ldd	r23, Y+6	; 0x06
     600:	8f 81       	ldd	r24, Y+7	; 0x07
     602:	98 85       	ldd	r25, Y+8	; 0x08
     604:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	9a 87       	std	Y+10, r25	; 0x0a
     60e:	89 87       	std	Y+9, r24	; 0x09
     610:	89 85       	ldd	r24, Y+9	; 0x09
     612:	9a 85       	ldd	r25, Y+10	; 0x0a
     614:	9e 87       	std	Y+14, r25	; 0x0e
     616:	8d 87       	std	Y+13, r24	; 0x0d
     618:	8d 85       	ldd	r24, Y+13	; 0x0d
     61a:	9e 85       	ldd	r25, Y+14	; 0x0e
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <act_relay+0x10e>
     620:	9e 87       	std	Y+14, r25	; 0x0e
     622:	8d 87       	std	Y+13, r24	; 0x0d
     624:	ce 01       	movw	r24, r28
     626:	0f 96       	adiw	r24, 0x0f	; 15
     628:	64 ed       	ldi	r22, 0xD4	; 212
     62a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     62e:	88 23       	and	r24, r24
     630:	09 f0       	breq	.+2      	; 0x634 <act_relay+0x126>
     632:	86 cf       	rjmp	.-244    	; 0x540 <act_relay+0x32>
				_delay_ms(50);

}
     634:	68 96       	adiw	r28, 0x18	; 24
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <act_mosfet>:

void act_mosfet(Mosfet_Act* mosfet_info) {
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	68 97       	sbiw	r28, 0x18	; 24
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	98 8f       	std	Y+24, r25	; 0x18
     65c:	8f 8b       	std	Y+23, r24	; 0x17

	uint8_t buf[8];

	buf[0] = 'M';
     65e:	8d e4       	ldi	r24, 0x4D	; 77
     660:	8f 87       	std	Y+15, r24	; 0x0f
	buf[1] = mosfet_info->ID;
     662:	8f 89       	ldd	r24, Y+23	; 0x17
     664:	98 8d       	ldd	r25, Y+24	; 0x18
     666:	fc 01       	movw	r30, r24
     668:	80 81       	ld	r24, Z
     66a:	88 8b       	std	Y+16, r24	; 0x10
	buf[2] = mosfet_info->state;
     66c:	8f 89       	ldd	r24, Y+23	; 0x17
     66e:	98 8d       	ldd	r25, Y+24	; 0x18
     670:	fc 01       	movw	r30, r24
     672:	81 81       	ldd	r24, Z+1	; 0x01
     674:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     676:	72 c0       	rjmp	.+228    	; 0x75c <act_mosfet+0x116>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	a8 e4       	ldi	r26, 0x48	; 72
     67e:	b2 e4       	ldi	r27, 0x42	; 66
     680:	89 83       	std	Y+1, r24	; 0x01
     682:	9a 83       	std	Y+2, r25	; 0x02
     684:	ab 83       	std	Y+3, r26	; 0x03
     686:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e4       	ldi	r19, 0x40	; 64
     68c:	4c e1       	ldi	r20, 0x1C	; 28
     68e:	55 e4       	ldi	r21, 0x45	; 69
     690:	69 81       	ldd	r22, Y+1	; 0x01
     692:	7a 81       	ldd	r23, Y+2	; 0x02
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	8d 83       	std	Y+5, r24	; 0x05
     6a2:	9e 83       	std	Y+6, r25	; 0x06
     6a4:	af 83       	std	Y+7, r26	; 0x07
     6a6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e8       	ldi	r20, 0x80	; 128
     6ae:	5f e3       	ldi	r21, 0x3F	; 63
     6b0:	6d 81       	ldd	r22, Y+5	; 0x05
     6b2:	7e 81       	ldd	r23, Y+6	; 0x06
     6b4:	8f 81       	ldd	r24, Y+7	; 0x07
     6b6:	98 85       	ldd	r25, Y+8	; 0x08
     6b8:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
     6bc:	88 23       	and	r24, r24
     6be:	2c f4       	brge	.+10     	; 0x6ca <act_mosfet+0x84>
		__ticks = 1;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	9a 87       	std	Y+10, r25	; 0x0a
     6c6:	89 87       	std	Y+9, r24	; 0x09
     6c8:	3f c0       	rjmp	.+126    	; 0x748 <act_mosfet+0x102>
	else if (__tmp > 65535)
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	3f ef       	ldi	r19, 0xFF	; 255
     6ce:	4f e7       	ldi	r20, 0x7F	; 127
     6d0:	57 e4       	ldi	r21, 0x47	; 71
     6d2:	6d 81       	ldd	r22, Y+5	; 0x05
     6d4:	7e 81       	ldd	r23, Y+6	; 0x06
     6d6:	8f 81       	ldd	r24, Y+7	; 0x07
     6d8:	98 85       	ldd	r25, Y+8	; 0x08
     6da:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
     6de:	18 16       	cp	r1, r24
     6e0:	4c f5       	brge	.+82     	; 0x734 <act_mosfet+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e2       	ldi	r20, 0x20	; 32
     6e8:	51 e4       	ldi	r21, 0x41	; 65
     6ea:	69 81       	ldd	r22, Y+1	; 0x01
     6ec:	7a 81       	ldd	r23, Y+2	; 0x02
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	9c 81       	ldd	r25, Y+4	; 0x04
     6f2:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     6f6:	dc 01       	movw	r26, r24
     6f8:	cb 01       	movw	r24, r22
     6fa:	bc 01       	movw	r22, r24
     6fc:	cd 01       	movw	r24, r26
     6fe:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     702:	dc 01       	movw	r26, r24
     704:	cb 01       	movw	r24, r22
     706:	9a 87       	std	Y+10, r25	; 0x0a
     708:	89 87       	std	Y+9, r24	; 0x09
     70a:	0f c0       	rjmp	.+30     	; 0x72a <act_mosfet+0xe4>
     70c:	8a ef       	ldi	r24, 0xFA	; 250
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	9c 87       	std	Y+12, r25	; 0x0c
     712:	8b 87       	std	Y+11, r24	; 0x0b
     714:	8b 85       	ldd	r24, Y+11	; 0x0b
     716:	9c 85       	ldd	r25, Y+12	; 0x0c
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <act_mosfet+0xd2>
     71c:	9c 87       	std	Y+12, r25	; 0x0c
     71e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     720:	89 85       	ldd	r24, Y+9	; 0x09
     722:	9a 85       	ldd	r25, Y+10	; 0x0a
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	9a 87       	std	Y+10, r25	; 0x0a
     728:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     72a:	89 85       	ldd	r24, Y+9	; 0x09
     72c:	9a 85       	ldd	r25, Y+10	; 0x0a
     72e:	89 2b       	or	r24, r25
     730:	69 f7       	brne	.-38     	; 0x70c <act_mosfet+0xc6>
     732:	14 c0       	rjmp	.+40     	; 0x75c <act_mosfet+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     734:	6d 81       	ldd	r22, Y+5	; 0x05
     736:	7e 81       	ldd	r23, Y+6	; 0x06
     738:	8f 81       	ldd	r24, Y+7	; 0x07
     73a:	98 85       	ldd	r25, Y+8	; 0x08
     73c:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     740:	dc 01       	movw	r26, r24
     742:	cb 01       	movw	r24, r22
     744:	9a 87       	std	Y+10, r25	; 0x0a
     746:	89 87       	std	Y+9, r24	; 0x09
     748:	89 85       	ldd	r24, Y+9	; 0x09
     74a:	9a 85       	ldd	r25, Y+10	; 0x0a
     74c:	9e 87       	std	Y+14, r25	; 0x0e
     74e:	8d 87       	std	Y+13, r24	; 0x0d
     750:	8d 85       	ldd	r24, Y+13	; 0x0d
     752:	9e 85       	ldd	r25, Y+14	; 0x0e
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	f1 f7       	brne	.-4      	; 0x754 <act_mosfet+0x10e>
     758:	9e 87       	std	Y+14, r25	; 0x0e
     75a:	8d 87       	std	Y+13, r24	; 0x0d
     75c:	ce 01       	movw	r24, r28
     75e:	0f 96       	adiw	r24, 0x0f	; 15
     760:	64 ed       	ldi	r22, 0xD4	; 212
     762:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     766:	88 23       	and	r24, r24
     768:	09 f0       	breq	.+2      	; 0x76c <act_mosfet+0x126>
     76a:	86 cf       	rjmp	.-244    	; 0x678 <act_mosfet+0x32>
				_delay_ms(50);

}
     76c:	68 96       	adiw	r28, 0x18	; 24
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <AX_UART_Init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "ax.h"

void AX_UART_Init(void)
{
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	2e 97       	sbiw	r28, 0x0e	; 14
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRD &= ~((1 << 2) | (1 << 3));
     792:	8a e2       	ldi	r24, 0x2A	; 42
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	2a e2       	ldi	r18, 0x2A	; 42
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	f9 01       	movw	r30, r18
     79c:	20 81       	ld	r18, Z
     79e:	23 7f       	andi	r18, 0xF3	; 243
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
	//PORTE = 0;
	UCSR1A = 0;
     7a4:	88 ec       	ldi	r24, 0xC8	; 200
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	fc 01       	movw	r30, r24
     7aa:	10 82       	st	Z, r1
	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
     7ac:	89 ec       	ldi	r24, 0xC9	; 201
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	28 e1       	ldi	r18, 0x18	; 24
     7b2:	fc 01       	movw	r30, r24
     7b4:	20 83       	st	Z, r18
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
     7b6:	8a ec       	ldi	r24, 0xCA	; 202
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	26 e0       	ldi	r18, 0x06	; 6
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18

	UBRR1H = 0;
     7c0:	8d ec       	ldi	r24, 0xCD	; 205
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	fc 01       	movw	r30, r24
     7c6:	10 82       	st	Z, r1
	UBRR1L = 5;
     7c8:	8c ec       	ldi	r24, 0xCC	; 204
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	25 e0       	ldi	r18, 0x05	; 5
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 83       	st	Z, r18
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	a8 ec       	ldi	r26, 0xC8	; 200
     7d8:	b2 e4       	ldi	r27, 0x42	; 66
     7da:	89 83       	std	Y+1, r24	; 0x01
     7dc:	9a 83       	std	Y+2, r25	; 0x02
     7de:	ab 83       	std	Y+3, r26	; 0x03
     7e0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e4       	ldi	r19, 0x40	; 64
     7e6:	4c e1       	ldi	r20, 0x1C	; 28
     7e8:	55 e4       	ldi	r21, 0x45	; 69
     7ea:	69 81       	ldd	r22, Y+1	; 0x01
     7ec:	7a 81       	ldd	r23, Y+2	; 0x02
     7ee:	8b 81       	ldd	r24, Y+3	; 0x03
     7f0:	9c 81       	ldd	r25, Y+4	; 0x04
     7f2:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     7f6:	dc 01       	movw	r26, r24
     7f8:	cb 01       	movw	r24, r22
     7fa:	8d 83       	std	Y+5, r24	; 0x05
     7fc:	9e 83       	std	Y+6, r25	; 0x06
     7fe:	af 83       	std	Y+7, r26	; 0x07
     800:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 e8       	ldi	r20, 0x80	; 128
     808:	5f e3       	ldi	r21, 0x3F	; 63
     80a:	6d 81       	ldd	r22, Y+5	; 0x05
     80c:	7e 81       	ldd	r23, Y+6	; 0x06
     80e:	8f 81       	ldd	r24, Y+7	; 0x07
     810:	98 85       	ldd	r25, Y+8	; 0x08
     812:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
     816:	88 23       	and	r24, r24
     818:	2c f4       	brge	.+10     	; 0x824 <AX_UART_Init+0xa6>
		__ticks = 1;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	9a 87       	std	Y+10, r25	; 0x0a
     820:	89 87       	std	Y+9, r24	; 0x09
     822:	3f c0       	rjmp	.+126    	; 0x8a2 <AX_UART_Init+0x124>
	else if (__tmp > 65535)
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	3f ef       	ldi	r19, 0xFF	; 255
     828:	4f e7       	ldi	r20, 0x7F	; 127
     82a:	57 e4       	ldi	r21, 0x47	; 71
     82c:	6d 81       	ldd	r22, Y+5	; 0x05
     82e:	7e 81       	ldd	r23, Y+6	; 0x06
     830:	8f 81       	ldd	r24, Y+7	; 0x07
     832:	98 85       	ldd	r25, Y+8	; 0x08
     834:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
     838:	18 16       	cp	r1, r24
     83a:	4c f5       	brge	.+82     	; 0x88e <AX_UART_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e2       	ldi	r20, 0x20	; 32
     842:	51 e4       	ldi	r21, 0x41	; 65
     844:	69 81       	ldd	r22, Y+1	; 0x01
     846:	7a 81       	ldd	r23, Y+2	; 0x02
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	bc 01       	movw	r22, r24
     856:	cd 01       	movw	r24, r26
     858:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     85c:	dc 01       	movw	r26, r24
     85e:	cb 01       	movw	r24, r22
     860:	9a 87       	std	Y+10, r25	; 0x0a
     862:	89 87       	std	Y+9, r24	; 0x09
     864:	0f c0       	rjmp	.+30     	; 0x884 <AX_UART_Init+0x106>
     866:	8a ef       	ldi	r24, 0xFA	; 250
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	9c 87       	std	Y+12, r25	; 0x0c
     86c:	8b 87       	std	Y+11, r24	; 0x0b
     86e:	8b 85       	ldd	r24, Y+11	; 0x0b
     870:	9c 85       	ldd	r25, Y+12	; 0x0c
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	f1 f7       	brne	.-4      	; 0x872 <AX_UART_Init+0xf4>
     876:	9c 87       	std	Y+12, r25	; 0x0c
     878:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	9a 85       	ldd	r25, Y+10	; 0x0a
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	9a 87       	std	Y+10, r25	; 0x0a
     882:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     884:	89 85       	ldd	r24, Y+9	; 0x09
     886:	9a 85       	ldd	r25, Y+10	; 0x0a
     888:	89 2b       	or	r24, r25
     88a:	69 f7       	brne	.-38     	; 0x866 <AX_UART_Init+0xe8>
     88c:	14 c0       	rjmp	.+40     	; 0x8b6 <AX_UART_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     88e:	6d 81       	ldd	r22, Y+5	; 0x05
     890:	7e 81       	ldd	r23, Y+6	; 0x06
     892:	8f 81       	ldd	r24, Y+7	; 0x07
     894:	98 85       	ldd	r25, Y+8	; 0x08
     896:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     89a:	dc 01       	movw	r26, r24
     89c:	cb 01       	movw	r24, r22
     89e:	9a 87       	std	Y+10, r25	; 0x0a
     8a0:	89 87       	std	Y+9, r24	; 0x09
     8a2:	89 85       	ldd	r24, Y+9	; 0x09
     8a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a6:	9e 87       	std	Y+14, r25	; 0x0e
     8a8:	8d 87       	std	Y+13, r24	; 0x0d
     8aa:	8d 85       	ldd	r24, Y+13	; 0x0d
     8ac:	9e 85       	ldd	r25, Y+14	; 0x0e
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <AX_UART_Init+0x130>
     8b2:	9e 87       	std	Y+14, r25	; 0x0e
     8b4:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);
}
     8b6:	2e 96       	adiw	r28, 0x0e	; 14
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	1f 92       	push	r1
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1<<UDRE1)) );
     8d4:	00 00       	nop
     8d6:	88 ec       	ldi	r24, 0xC8	; 200
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	fc 01       	movw	r30, r24
     8dc:	80 81       	ld	r24, Z
     8de:	88 2f       	mov	r24, r24
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	80 72       	andi	r24, 0x20	; 32
     8e4:	99 27       	eor	r25, r25
     8e6:	89 2b       	or	r24, r25
     8e8:	b1 f3       	breq	.-20     	; 0x8d6 <AX_SendChar+0xe>
	UDR1 = data;
     8ea:	8e ec       	ldi	r24, 0xCE	; 206
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	29 81       	ldd	r18, Y+1	; 0x01
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
}
     8f4:	0f 90       	pop	r0
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <AX_ReadChar>:
unsigned char AX_ReadChar(void)
{
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
   //UART1_Write('I');
   while( !( UCSR1A & (1<< RXC1)) );
     904:	00 00       	nop
     906:	88 ec       	ldi	r24, 0xC8	; 200
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	fc 01       	movw	r30, r24
     90c:	80 81       	ld	r24, Z
     90e:	88 23       	and	r24, r24
     910:	d4 f7       	brge	.-12     	; 0x906 <AX_ReadChar+0xa>
   return UDR1;
     912:	8e ec       	ldi	r24, 0xCE	; 206
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	fc 01       	movw	r30, r24
     918:	80 81       	ld	r24, Z
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <AX_ReadStatus>:
/*************************************************************************************************************************************************************************************
*															 Funkcije za upravljanje AX-12A servoima                                                                                                                                      *
*************************************************************************************************************************************************************************************/

void AX_ReadStatus(void)
{
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
     928:	27 97       	sbiw	r28, 0x07	; 7
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	de bf       	out	0x3e, r29	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	cd bf       	out	0x3d, r28	; 61
	 unsigned char status[7] = {0,0,0,0,0,0};
     934:	27 e0       	ldi	r18, 0x07	; 7
     936:	ce 01       	movw	r24, r28
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	fc 01       	movw	r30, r24
     93c:	32 2f       	mov	r19, r18
     93e:	11 92       	st	Z+, r1
     940:	3a 95       	dec	r19
     942:	e9 f7       	brne	.-6      	; 0x93e <AX_ReadStatus+0x1e>

	status[0] = AX_ReadChar();
     944:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     948:	89 83       	std	Y+1, r24	; 0x01
	status[1] = AX_ReadChar();
     94a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     94e:	8a 83       	std	Y+2, r24	; 0x02
	status[2] = AX_ReadChar();
     950:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     954:	8b 83       	std	Y+3, r24	; 0x03
	status[3] = AX_ReadChar();
     956:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     95a:	8c 83       	std	Y+4, r24	; 0x04
	status[4] = AX_ReadChar();
     95c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     960:	8d 83       	std	Y+5, r24	; 0x05
	status[5] = AX_ReadChar();
     962:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     966:	8e 83       	std	Y+6, r24	; 0x06
}
     968:	27 96       	adiw	r28, 0x07	; 7
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <AX_StopTransmitter>:

void AX_StopTransmitter(void)
{
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
	while( !(UCSR1A & (1<<TXC1)) );
     982:	00 00       	nop
     984:	88 ec       	ldi	r24, 0xC8	; 200
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	fc 01       	movw	r30, r24
     98a:	80 81       	ld	r24, Z
     98c:	88 2f       	mov	r24, r24
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	80 74       	andi	r24, 0x40	; 64
     992:	99 27       	eor	r25, r25
     994:	89 2b       	or	r24, r25
     996:	b1 f3       	breq	.-20     	; 0x984 <AX_StopTransmitter+0xa>
	UCSR1B &= 0xF7;
     998:	89 ec       	ldi	r24, 0xC9	; 201
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	29 ec       	ldi	r18, 0xC9	; 201
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	f9 01       	movw	r30, r18
     9a2:	20 81       	ld	r18, Z
     9a4:	27 7f       	andi	r18, 0xF7	; 247
     9a6:	fc 01       	movw	r30, r24
     9a8:	20 83       	st	Z, r18
	UCSR1A |= 0x40;
     9aa:	88 ec       	ldi	r24, 0xC8	; 200
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	28 ec       	ldi	r18, 0xC8	; 200
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	f9 01       	movw	r30, r18
     9b4:	20 81       	ld	r18, Z
     9b6:	20 64       	ori	r18, 0x40	; 64
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x08;
     9ca:	89 ec       	ldi	r24, 0xC9	; 201
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	29 ec       	ldi	r18, 0xC9	; 201
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	f9 01       	movw	r30, r18
     9d4:	20 81       	ld	r18, Z
     9d6:	28 60       	ori	r18, 0x08	; 8
     9d8:	fc 01       	movw	r30, r24
     9da:	20 83       	st	Z, r18
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <AX_StopReceiver>:

void AX_StopReceiver(void)
{
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
	UCSR1B &= 0xEF;
     9ea:	89 ec       	ldi	r24, 0xC9	; 201
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	29 ec       	ldi	r18, 0xC9	; 201
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	f9 01       	movw	r30, r18
     9f4:	20 81       	ld	r18, Z
     9f6:	2f 7e       	andi	r18, 0xEF	; 239
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18
}
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x10;
     a0a:	89 ec       	ldi	r24, 0xC9	; 201
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	29 ec       	ldi	r18, 0xC9	; 201
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	f9 01       	movw	r30, r18
     a14:	20 81       	ld	r18, Z
     a16:	20 61       	ori	r18, 0x10	; 16
     a18:	fc 01       	movw	r30, r24
     a1a:	20 83       	st	Z, r18
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	08 95       	ret

00000a22 <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
     a2a:	6a 97       	sbiw	r28, 0x1a	; 26
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	cd bf       	out	0x3d, r28	; 61
     a36:	9e 8b       	std	Y+22, r25	; 0x16
     a38:	8d 8b       	std	Y+21, r24	; 0x15
     a3a:	78 8f       	std	Y+24, r23	; 0x18
     a3c:	6f 8b       	std	Y+23, r22	; 0x17
     a3e:	49 8f       	std	Y+25, r20	; 0x19
     a40:	2a 8f       	std	Y+26, r18	; 0x1a
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;

	angle = (unsigned int)(1023 *((double)angle/300.0));
     a42:	8d 89       	ldd	r24, Y+21	; 0x15
     a44:	9e 89       	ldd	r25, Y+22	; 0x16
     a46:	cc 01       	movw	r24, r24
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	bc 01       	movw	r22, r24
     a4e:	cd 01       	movw	r24, r26
     a50:	0e 94 3c 1c 	call	0x3878	; 0x3878 <__floatunsisf>
     a54:	dc 01       	movw	r26, r24
     a56:	cb 01       	movw	r24, r22
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	46 e9       	ldi	r20, 0x96	; 150
     a5e:	53 e4       	ldi	r21, 0x43	; 67
     a60:	bc 01       	movw	r22, r24
     a62:	cd 01       	movw	r24, r26
     a64:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__divsf3>
     a68:	dc 01       	movw	r26, r24
     a6a:	cb 01       	movw	r24, r22
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 ec       	ldi	r19, 0xC0	; 192
     a70:	4f e7       	ldi	r20, 0x7F	; 127
     a72:	54 e4       	ldi	r21, 0x44	; 68
     a74:	bc 01       	movw	r22, r24
     a76:	cd 01       	movw	r24, r26
     a78:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     a7c:	dc 01       	movw	r26, r24
     a7e:	cb 01       	movw	r24, r22
     a80:	bc 01       	movw	r22, r24
     a82:	cd 01       	movw	r24, r26
     a84:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     a88:	dc 01       	movw	r26, r24
     a8a:	cb 01       	movw	r24, r22
     a8c:	9e 8b       	std	Y+22, r25	; 0x16
     a8e:	8d 8b       	std	Y+21, r24	; 0x15

	angle_H = (unsigned char)(angle >> 8);
     a90:	8d 89       	ldd	r24, Y+21	; 0x15
     a92:	9e 89       	ldd	r25, Y+22	; 0x16
     a94:	89 2f       	mov	r24, r25
     a96:	99 27       	eor	r25, r25
     a98:	89 83       	std	Y+1, r24	; 0x01
	angle_L = (unsigned char)(angle & 0x00FF);
     a9a:	8d 89       	ldd	r24, Y+21	; 0x15
     a9c:	8a 83       	std	Y+2, r24	; 0x02

	speed |= (direction << 10);
     a9e:	89 8d       	ldd	r24, Y+25	; 0x19
     aa0:	88 2f       	mov	r24, r24
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	98 2f       	mov	r25, r24
     aa6:	88 27       	eor	r24, r24
     aa8:	99 0f       	add	r25, r25
     aaa:	99 0f       	add	r25, r25
     aac:	9c 01       	movw	r18, r24
     aae:	8f 89       	ldd	r24, Y+23	; 0x17
     ab0:	98 8d       	ldd	r25, Y+24	; 0x18
     ab2:	82 2b       	or	r24, r18
     ab4:	93 2b       	or	r25, r19
     ab6:	98 8f       	std	Y+24, r25	; 0x18
     ab8:	8f 8b       	std	Y+23, r24	; 0x17
	speed_H = (unsigned char)(speed >> 8);
     aba:	8f 89       	ldd	r24, Y+23	; 0x17
     abc:	98 8d       	ldd	r25, Y+24	; 0x18
     abe:	89 2f       	mov	r24, r25
     ac0:	99 27       	eor	r25, r25
     ac2:	8b 83       	std	Y+3, r24	; 0x03
	speed_L = (unsigned char)(speed & 0x00FF);
     ac4:	8f 89       	ldd	r24, Y+23	; 0x17
     ac6:	8c 83       	std	Y+4, r24	; 0x04

	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
     ac8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     aca:	88 2f       	mov	r24, r24
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	9c 01       	movw	r18, r24
     ad0:	28 5d       	subi	r18, 0xD8	; 216
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	88 2f       	mov	r24, r24
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	28 0f       	add	r18, r24
     adc:	39 1f       	adc	r19, r25
     ade:	8c 81       	ldd	r24, Y+4	; 0x04
     ae0:	88 2f       	mov	r24, r24
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	28 0f       	add	r18, r24
     ae6:	39 1f       	adc	r19, r25
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	88 2f       	mov	r24, r24
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	28 0f       	add	r18, r24
     af0:	39 1f       	adc	r19, r25
     af2:	8a 81       	ldd	r24, Y+2	; 0x02
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	82 0f       	add	r24, r18
     afa:	93 1f       	adc	r25, r19
     afc:	80 95       	com	r24
     afe:	90 95       	com	r25
     b00:	9e 83       	std	Y+6, r25	; 0x06
     b02:	8d 83       	std	Y+5, r24	; 0x05

	AX_StopReceiver();
     b04:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <AX_StopReceiver>

	AX_SendChar(START);
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(START);
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(id);
     b14:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b16:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(LENGTH);
     b1a:	87 e0       	ldi	r24, 0x07	; 7
     b1c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(INSTR);
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(ADDRESS);
     b26:	8e e1       	ldi	r24, 0x1E	; 30
     b28:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(angle_L);
     b2c:	8a 81       	ldd	r24, Y+2	; 0x02
     b2e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(angle_H);
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(speed_L);
     b38:	8c 81       	ldd	r24, Y+4	; 0x04
     b3a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(speed_H);
     b3e:	8b 81       	ldd	r24, Y+3	; 0x03
     b40:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(checksum);
     b44:	8d 81       	ldd	r24, Y+5	; 0x05
     b46:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>

	AX_StopTransmitter();
     b4a:	0e 94 bd 04 	call	0x97a	; 0x97a <AX_StopTransmitter>
	AX_ReleaseReceiver();
     b4e:	0e 94 01 05 	call	0xa02	; 0xa02 <AX_ReleaseReceiver>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a8 e4       	ldi	r26, 0x48	; 72
     b58:	b2 e4       	ldi	r27, 0x42	; 66
     b5a:	8f 83       	std	Y+7, r24	; 0x07
     b5c:	98 87       	std	Y+8, r25	; 0x08
     b5e:	a9 87       	std	Y+9, r26	; 0x09
     b60:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e4       	ldi	r19, 0x40	; 64
     b66:	4c e1       	ldi	r20, 0x1C	; 28
     b68:	55 e4       	ldi	r21, 0x45	; 69
     b6a:	6f 81       	ldd	r22, Y+7	; 0x07
     b6c:	78 85       	ldd	r23, Y+8	; 0x08
     b6e:	89 85       	ldd	r24, Y+9	; 0x09
     b70:	9a 85       	ldd	r25, Y+10	; 0x0a
     b72:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     b76:	dc 01       	movw	r26, r24
     b78:	cb 01       	movw	r24, r22
     b7a:	8b 87       	std	Y+11, r24	; 0x0b
     b7c:	9c 87       	std	Y+12, r25	; 0x0c
     b7e:	ad 87       	std	Y+13, r26	; 0x0d
     b80:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	40 e8       	ldi	r20, 0x80	; 128
     b88:	5f e3       	ldi	r21, 0x3F	; 63
     b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b90:	9e 85       	ldd	r25, Y+14	; 0x0e
     b92:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
     b96:	88 23       	and	r24, r24
     b98:	2c f4       	brge	.+10     	; 0xba4 <AX_SetAngle+0x182>
		__ticks = 1;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	98 8b       	std	Y+16, r25	; 0x10
     ba0:	8f 87       	std	Y+15, r24	; 0x0f
     ba2:	3f c0       	rjmp	.+126    	; 0xc22 <AX_SetAngle+0x200>
	else if (__tmp > 65535)
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	3f ef       	ldi	r19, 0xFF	; 255
     ba8:	4f e7       	ldi	r20, 0x7F	; 127
     baa:	57 e4       	ldi	r21, 0x47	; 71
     bac:	6b 85       	ldd	r22, Y+11	; 0x0b
     bae:	7c 85       	ldd	r23, Y+12	; 0x0c
     bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bb4:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
     bb8:	18 16       	cp	r1, r24
     bba:	4c f5       	brge	.+82     	; 0xc0e <AX_SetAngle+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e2       	ldi	r20, 0x20	; 32
     bc2:	51 e4       	ldi	r21, 0x41	; 65
     bc4:	6f 81       	ldd	r22, Y+7	; 0x07
     bc6:	78 85       	ldd	r23, Y+8	; 0x08
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	bc 01       	movw	r22, r24
     bd6:	cd 01       	movw	r24, r26
     bd8:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	98 8b       	std	Y+16, r25	; 0x10
     be2:	8f 87       	std	Y+15, r24	; 0x0f
     be4:	0f c0       	rjmp	.+30     	; 0xc04 <AX_SetAngle+0x1e2>
     be6:	8a ef       	ldi	r24, 0xFA	; 250
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	9a 8b       	std	Y+18, r25	; 0x12
     bec:	89 8b       	std	Y+17, r24	; 0x11
     bee:	89 89       	ldd	r24, Y+17	; 0x11
     bf0:	9a 89       	ldd	r25, Y+18	; 0x12
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <AX_SetAngle+0x1d0>
     bf6:	9a 8b       	std	Y+18, r25	; 0x12
     bf8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
     bfc:	98 89       	ldd	r25, Y+16	; 0x10
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	98 8b       	std	Y+16, r25	; 0x10
     c02:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c04:	8f 85       	ldd	r24, Y+15	; 0x0f
     c06:	98 89       	ldd	r25, Y+16	; 0x10
     c08:	89 2b       	or	r24, r25
     c0a:	69 f7       	brne	.-38     	; 0xbe6 <AX_SetAngle+0x1c4>
     c0c:	14 c0       	rjmp	.+40     	; 0xc36 <AX_SetAngle+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c10:	7c 85       	ldd	r23, Y+12	; 0x0c
     c12:	8d 85       	ldd	r24, Y+13	; 0x0d
     c14:	9e 85       	ldd	r25, Y+14	; 0x0e
     c16:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	98 8b       	std	Y+16, r25	; 0x10
     c20:	8f 87       	std	Y+15, r24	; 0x0f
     c22:	8f 85       	ldd	r24, Y+15	; 0x0f
     c24:	98 89       	ldd	r25, Y+16	; 0x10
     c26:	9c 8b       	std	Y+20, r25	; 0x14
     c28:	8b 8b       	std	Y+19, r24	; 0x13
     c2a:	8b 89       	ldd	r24, Y+19	; 0x13
     c2c:	9c 89       	ldd	r25, Y+20	; 0x14
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <AX_SetAngle+0x20c>
     c32:	9c 8b       	std	Y+20, r25	; 0x14
     c34:	8b 8b       	std	Y+19, r24	; 0x13

	_delay_ms(50);

	AX_ReleaseTransmitter();
     c36:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <AX_ReleaseTransmitter>
}
     c3a:	6a 96       	adiw	r28, 0x1a	; 26
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <AX_EndlessTurn>:


void AX_EndlessTurn(void)
{
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	60 97       	sbiw	r28, 0x10	; 16
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61

	unsigned int checksum;

	checksum = ~(0x01 + 0x07 + 0x03 + 0x06 + (1023 & 0xFF) + (1023 >> 8) & 0xFF);
     c60:	8c ee       	ldi	r24, 0xEC	; 236
     c62:	9f ef       	ldi	r25, 0xFF	; 255
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01

	AX_StopReceiver();
     c68:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <AX_StopReceiver>

	AX_SendChar(0xFF);
     c6c:	8f ef       	ldi	r24, 0xFF	; 255
     c6e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0xFF);
     c72:	8f ef       	ldi	r24, 0xFF	; 255
     c74:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x01);
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x07);
     c7e:	87 e0       	ldi	r24, 0x07	; 7
     c80:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x03);
     c84:	83 e0       	ldi	r24, 0x03	; 3
     c86:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x06);
     c8a:	86 e0       	ldi	r24, 0x06	; 6
     c8c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x00);
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x00);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(1023 & 0xFF);
     c9c:	8f ef       	ldi	r24, 0xFF	; 255
     c9e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(1023 >> 8);
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(checksum);
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>

	AX_StopTransmitter();
     cae:	0e 94 bd 04 	call	0x97a	; 0x97a <AX_StopTransmitter>
	AX_ReleaseReceiver();
     cb2:	0e 94 01 05 	call	0xa02	; 0xa02 <AX_ReleaseReceiver>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a8 e4       	ldi	r26, 0x48	; 72
     cbc:	b2 e4       	ldi	r27, 0x42	; 66
     cbe:	8b 83       	std	Y+3, r24	; 0x03
     cc0:	9c 83       	std	Y+4, r25	; 0x04
     cc2:	ad 83       	std	Y+5, r26	; 0x05
     cc4:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e4       	ldi	r19, 0x40	; 64
     cca:	4c e1       	ldi	r20, 0x1C	; 28
     ccc:	55 e4       	ldi	r21, 0x45	; 69
     cce:	6b 81       	ldd	r22, Y+3	; 0x03
     cd0:	7c 81       	ldd	r23, Y+4	; 0x04
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	8f 83       	std	Y+7, r24	; 0x07
     ce0:	98 87       	std	Y+8, r25	; 0x08
     ce2:	a9 87       	std	Y+9, r26	; 0x09
     ce4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
     cfa:	88 23       	and	r24, r24
     cfc:	2c f4       	brge	.+10     	; 0xd08 <AX_EndlessTurn+0xbc>
		__ticks = 1;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	9c 87       	std	Y+12, r25	; 0x0c
     d04:	8b 87       	std	Y+11, r24	; 0x0b
     d06:	3f c0       	rjmp	.+126    	; 0xd86 <AX_EndlessTurn+0x13a>
	else if (__tmp > 65535)
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
     d1c:	18 16       	cp	r1, r24
     d1e:	4c f5       	brge	.+82     	; 0xd72 <AX_EndlessTurn+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	6b 81       	ldd	r22, Y+3	; 0x03
     d2a:	7c 81       	ldd	r23, Y+4	; 0x04
     d2c:	8d 81       	ldd	r24, Y+5	; 0x05
     d2e:	9e 81       	ldd	r25, Y+6	; 0x06
     d30:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	bc 01       	movw	r22, r24
     d3a:	cd 01       	movw	r24, r26
     d3c:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	9c 87       	std	Y+12, r25	; 0x0c
     d46:	8b 87       	std	Y+11, r24	; 0x0b
     d48:	0f c0       	rjmp	.+30     	; 0xd68 <AX_EndlessTurn+0x11c>
     d4a:	8a ef       	ldi	r24, 0xFA	; 250
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	9e 87       	std	Y+14, r25	; 0x0e
     d50:	8d 87       	std	Y+13, r24	; 0x0d
     d52:	8d 85       	ldd	r24, Y+13	; 0x0d
     d54:	9e 85       	ldd	r25, Y+14	; 0x0e
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	f1 f7       	brne	.-4      	; 0xd56 <AX_EndlessTurn+0x10a>
     d5a:	9e 87       	std	Y+14, r25	; 0x0e
     d5c:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d60:	9c 85       	ldd	r25, Y+12	; 0x0c
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	9c 87       	std	Y+12, r25	; 0x0c
     d66:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d68:	8b 85       	ldd	r24, Y+11	; 0x0b
     d6a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d6c:	89 2b       	or	r24, r25
     d6e:	69 f7       	brne	.-38     	; 0xd4a <AX_EndlessTurn+0xfe>
     d70:	14 c0       	rjmp	.+40     	; 0xd9a <AX_EndlessTurn+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d72:	6f 81       	ldd	r22, Y+7	; 0x07
     d74:	78 85       	ldd	r23, Y+8	; 0x08
     d76:	89 85       	ldd	r24, Y+9	; 0x09
     d78:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7a:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	9c 87       	std	Y+12, r25	; 0x0c
     d84:	8b 87       	std	Y+11, r24	; 0x0b
     d86:	8b 85       	ldd	r24, Y+11	; 0x0b
     d88:	9c 85       	ldd	r25, Y+12	; 0x0c
     d8a:	98 8b       	std	Y+16, r25	; 0x10
     d8c:	8f 87       	std	Y+15, r24	; 0x0f
     d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d90:	98 89       	ldd	r25, Y+16	; 0x10
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <AX_EndlessTurn+0x146>
     d96:	98 8b       	std	Y+16, r25	; 0x10
     d98:	8f 87       	std	Y+15, r24	; 0x0f

	//AX_ReadStatus();
	_delay_ms(50);

	AX_ReleaseTransmitter();
     d9a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <AX_ReleaseTransmitter>
}
     d9e:	60 96       	adiw	r28, 0x10	; 16
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <AX_SetSpeed>:

void AX_SetSpeed(unsigned int direction, unsigned int speed)
{
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	28 97       	sbiw	r28, 0x08	; 8
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	8d 83       	std	Y+5, r24	; 0x05
     dc8:	78 87       	std	Y+8, r23	; 0x08
     dca:	6f 83       	std	Y+7, r22	; 0x07
	/*
		direction ---> TurnDirection -> 1 - ClockWise   0 - CounterClockWise
	*/

	unsigned int data = 0x0000;
     dcc:	1a 82       	std	Y+2, r1	; 0x02
     dce:	19 82       	std	Y+1, r1	; 0x01
	unsigned int checksum = 0;
     dd0:	1c 82       	std	Y+4, r1	; 0x04
     dd2:	1b 82       	std	Y+3, r1	; 0x03

	data = speed;
     dd4:	8f 81       	ldd	r24, Y+7	; 0x07
     dd6:	98 85       	ldd	r25, Y+8	; 0x08
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	89 83       	std	Y+1, r24	; 0x01
	data |= (direction << 10);
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	98 2f       	mov	r25, r24
     de2:	88 27       	eor	r24, r24
     de4:	99 0f       	add	r25, r25
     de6:	99 0f       	add	r25, r25
     de8:	29 81       	ldd	r18, Y+1	; 0x01
     dea:	3a 81       	ldd	r19, Y+2	; 0x02
     dec:	82 2b       	or	r24, r18
     dee:	93 2b       	or	r25, r19
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 83       	std	Y+1, r24	; 0x01


	checksum = ~(0x01 + 0x05 + 0x03 + 0x20 + data);
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	9a 81       	ldd	r25, Y+2	; 0x02
     df8:	89 96       	adiw	r24, 0x29	; 41
     dfa:	80 95       	com	r24
     dfc:	90 95       	com	r25
     dfe:	9c 83       	std	Y+4, r25	; 0x04
     e00:	8b 83       	std	Y+3, r24	; 0x03

	AX_StopReceiver();
     e02:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <AX_StopReceiver>

	AX_SendChar(0xFF);
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0xFF);
     e0c:	8f ef       	ldi	r24, 0xFF	; 255
     e0e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x01);
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x05);
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x03);
     e1e:	83 e0       	ldi	r24, 0x03	; 3
     e20:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x20);
     e24:	80 e2       	ldi	r24, 0x20	; 32
     e26:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(data);
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(data >> 8);
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	89 2f       	mov	r24, r25
     e36:	99 27       	eor	r25, r25
     e38:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(checksum);
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>

	AX_StopTransmitter();
     e42:	0e 94 bd 04 	call	0x97a	; 0x97a <AX_StopTransmitter>
	AX_ReleaseReceiver();
     e46:	0e 94 01 05 	call	0xa02	; 0xa02 <AX_ReleaseReceiver>

	AX_ReadStatus();
     e4a:	0e 94 90 04 	call	0x920	; 0x920 <AX_ReadStatus>

	AX_ReleaseTransmitter();
     e4e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <AX_ReleaseTransmitter>
}
     e52:	28 96       	adiw	r28, 0x08	; 8
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <__vector_18>:
static volatile unsigned char rxCounter[10];
//volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	00 90 5f 00 	lds	r0, 0x005F
     e6c:	0f 92       	push	r0
     e6e:	11 24       	eor	r1, r1
     e70:	00 90 5b 00 	lds	r0, 0x005B
     e74:	0f 92       	push	r0
     e76:	2f 93       	push	r18
     e78:	3f 93       	push	r19
     e7a:	4f 93       	push	r20
     e7c:	5f 93       	push	r21
     e7e:	8f 93       	push	r24
     e80:	9f 93       	push	r25
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <__vector_18+0x28>
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <__vector_18+0x2a>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     e92:	8d ee       	ldi	r24, 0xED	; 237
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	fc 01       	movw	r30, r24
     e98:	80 81       	ld	r24, Z
     e9a:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     e9c:	19 82       	std	Y+1, r1	; 0x01
     e9e:	a4 c0       	rjmp	.+328    	; 0xfe8 <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
     ea0:	8d ee       	ldi	r24, 0xED	; 237
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	29 81       	ldd	r18, Y+1	; 0x01
     ea6:	22 95       	swap	r18
     ea8:	20 7f       	andi	r18, 0xF0	; 240
     eaa:	fc 01       	movw	r30, r24
     eac:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     eae:	8e ee       	ldi	r24, 0xEE	; 238
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	fc 01       	movw	r30, r24
     eb4:	80 81       	ld	r24, Z
     eb6:	82 95       	swap	r24
     eb8:	86 95       	lsr	r24
     eba:	87 70       	andi	r24, 0x07	; 7
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	81 70       	andi	r24, 0x01	; 1
     ec2:	99 27       	eor	r25, r25
     ec4:	89 2b       	or	r24, r25
     ec6:	09 f4       	brne	.+2      	; 0xeca <__vector_18+0x66>
     ec8:	70 c0       	rjmp	.+224    	; 0xfaa <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     eca:	8f ee       	ldi	r24, 0xEF	; 239
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	20 e8       	ldi	r18, 0x80	; 128
     ed0:	fc 01       	movw	r30, r24
     ed2:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     ed4:	8e ee       	ldi	r24, 0xEE	; 238
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	2e ee       	ldi	r18, 0xEE	; 238
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	f9 01       	movw	r30, r18
     ede:	20 81       	ld	r18, Z
     ee0:	2f 7d       	andi	r18, 0xDF	; 223
     ee2:	fc 01       	movw	r30, r24
     ee4:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     ee6:	82 ef       	ldi	r24, 0xF2	; 242
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	fc 01       	movw	r30, r24
     eec:	80 81       	ld	r24, Z
     eee:	82 95       	swap	r24
     ef0:	86 95       	lsr	r24
     ef2:	87 70       	andi	r24, 0x07	; 7
     ef4:	28 2f       	mov	r18, r24
     ef6:	83 ef       	ldi	r24, 0xF3	; 243
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	fc 01       	movw	r30, r24
     efc:	80 81       	ld	r24, Z
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	82 2b       	or	r24, r18
     f10:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
     f12:	1a 82       	std	Y+2, r1	; 0x02
     f14:	26 c0       	rjmp	.+76     	; 0xf62 <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	81 50       	subi	r24, 0x01	; 1
     f1e:	90 48       	sbci	r25, 0x80	; 128
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	82 5e       	subi	r24, 0xE2	; 226
     f26:	9e 4f       	sbci	r25, 0xFE	; 254
     f28:	fc 01       	movw	r30, r24
     f2a:	20 81       	ld	r18, Z
     f2c:	31 81       	ldd	r19, Z+1	; 0x01
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	8e 5c       	subi	r24, 0xCE	; 206
     f38:	9e 4f       	sbci	r25, 0xFE	; 254
     f3a:	fc 01       	movw	r30, r24
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	84 0f       	add	r24, r20
     f4a:	95 1f       	adc	r25, r21
     f4c:	82 0f       	add	r24, r18
     f4e:	93 1f       	adc	r25, r19
     f50:	2a ef       	ldi	r18, 0xFA	; 250
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	f9 01       	movw	r30, r18
     f56:	20 81       	ld	r18, Z
     f58:	fc 01       	movw	r30, r24
     f5a:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	8a 83       	std	Y+2, r24	; 0x02
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	88 30       	cpi	r24, 0x08	; 8
     f66:	b8 f2       	brcs	.-82     	; 0xf16 <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	8e 5c       	subi	r24, 0xCE	; 206
     f72:	9e 4f       	sbci	r25, 0xFE	; 254
     f74:	fc 01       	movw	r30, r24
     f76:	20 81       	ld	r18, Z
     f78:	2f 5f       	subi	r18, 0xFF	; 255
     f7a:	fc 01       	movw	r30, r24
     f7c:	20 83       	st	Z, r18
     f7e:	25 30       	cpi	r18, 0x05	; 5
     f80:	41 f4       	brne	.+16     	; 0xf92 <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	8e 5c       	subi	r24, 0xCE	; 206
     f8c:	9e 4f       	sbci	r25, 0xFE	; 254
     f8e:	fc 01       	movw	r30, r24
     f90:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	8a 5b       	subi	r24, 0xBA	; 186
     f9c:	9e 4f       	sbci	r25, 0xFE	; 254
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 81       	ld	r18, Z
     fa2:	2f 5f       	subi	r18, 0xFF	; 255
     fa4:	fc 01       	movw	r30, r24
     fa6:	20 83       	st	Z, r18

			break;
     fa8:	23 c0       	rjmp	.+70     	; 0xff0 <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     faa:	8e ee       	ldi	r24, 0xEE	; 238
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	fc 01       	movw	r30, r24
     fb0:	80 81       	ld	r24, Z
     fb2:	82 95       	swap	r24
     fb4:	86 95       	lsr	r24
     fb6:	86 95       	lsr	r24
     fb8:	83 70       	andi	r24, 0x03	; 3
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	81 70       	andi	r24, 0x01	; 1
     fc0:	99 27       	eor	r25, r25
     fc2:	89 2b       	or	r24, r25
     fc4:	71 f0       	breq	.+28     	; 0xfe2 <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
     fc6:	8f ee       	ldi	r24, 0xEF	; 239
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	fc 01       	movw	r30, r24
     fcc:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     fce:	8e ee       	ldi	r24, 0xEE	; 238
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	2e ee       	ldi	r18, 0xEE	; 238
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	f9 01       	movw	r30, r18
     fd8:	20 81       	ld	r18, Z
     fda:	2f 7b       	andi	r18, 0xBF	; 191
     fdc:	fc 01       	movw	r30, r24
     fde:	20 83       	st	Z, r18

			break;
     fe0:	07 c0       	rjmp	.+14     	; 0xff0 <__vector_18+0x18c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	8f 5f       	subi	r24, 0xFF	; 255
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	8f 30       	cpi	r24, 0x0F	; 15
     fec:	08 f4       	brcc	.+2      	; 0xff0 <__vector_18+0x18c>
     fee:	58 cf       	rjmp	.-336    	; 0xea0 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     ff0:	8d ee       	ldi	r24, 0xED	; 237
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	2b 81       	ldd	r18, Y+3	; 0x03
     ff6:	fc 01       	movw	r30, r24
     ff8:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // zato sto tako treba.
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	ff 91       	pop	r31
    1008:	ef 91       	pop	r30
    100a:	9f 91       	pop	r25
    100c:	8f 91       	pop	r24
    100e:	5f 91       	pop	r21
    1010:	4f 91       	pop	r20
    1012:	3f 91       	pop	r19
    1014:	2f 91       	pop	r18
    1016:	0f 90       	pop	r0
    1018:	00 92 5b 00 	sts	0x005B, r0
    101c:	0f 90       	pop	r0
    101e:	00 92 5f 00 	sts	0x005F, r0
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <CAN_InitModule>:


static void CAN_InitModule(void)
{
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	00 d0       	rcall	.+0      	; 0x102e <CAN_InitModule+0x6>
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
    1032:	88 ed       	ldi	r24, 0xD8	; 216
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	21 e0       	ldi	r18, 0x01	; 1
    1038:	fc 01       	movw	r30, r24
    103a:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    103c:	19 82       	std	Y+1, r1	; 0x01
    103e:	3e c0       	rjmp	.+124    	; 0x10bc <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
    1040:	8d ee       	ldi	r24, 0xED	; 237
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	29 81       	ldd	r18, Y+1	; 0x01
    1046:	22 95       	swap	r18
    1048:	20 7f       	andi	r18, 0xF0	; 240
    104a:	fc 01       	movw	r30, r24
    104c:	20 83       	st	Z, r18

		CANSTMOB = 0;
    104e:	8e ee       	ldi	r24, 0xEE	; 238
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	fc 01       	movw	r30, r24
    1054:	10 82       	st	Z, r1
		CANCDMOB = 0;
    1056:	8f ee       	ldi	r24, 0xEF	; 239
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	fc 01       	movw	r30, r24
    105c:	10 82       	st	Z, r1

		CANIDT1 = 0;
    105e:	83 ef       	ldi	r24, 0xF3	; 243
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	fc 01       	movw	r30, r24
    1064:	10 82       	st	Z, r1
		CANIDT2 = 0;
    1066:	82 ef       	ldi	r24, 0xF2	; 242
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	fc 01       	movw	r30, r24
    106c:	10 82       	st	Z, r1
		CANIDT3 = 0;
    106e:	81 ef       	ldi	r24, 0xF1	; 241
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	fc 01       	movw	r30, r24
    1074:	10 82       	st	Z, r1
		CANIDT4 = 0;
    1076:	80 ef       	ldi	r24, 0xF0	; 240
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	fc 01       	movw	r30, r24
    107c:	10 82       	st	Z, r1
		CANIDM1 = 0;
    107e:	87 ef       	ldi	r24, 0xF7	; 247
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	fc 01       	movw	r30, r24
    1084:	10 82       	st	Z, r1
		CANIDM2 = 0;
    1086:	86 ef       	ldi	r24, 0xF6	; 246
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	fc 01       	movw	r30, r24
    108c:	10 82       	st	Z, r1
		CANIDM3 = 0;
    108e:	85 ef       	ldi	r24, 0xF5	; 245
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	fc 01       	movw	r30, r24
    1094:	10 82       	st	Z, r1
		CANIDM4 = 0;
    1096:	84 ef       	ldi	r24, 0xF4	; 244
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	fc 01       	movw	r30, r24
    109c:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    109e:	1a 82       	std	Y+2, r1	; 0x02
    10a0:	07 c0       	rjmp	.+14     	; 0x10b0 <CAN_InitModule+0x88>
			CANMSG = 0;
    10a2:	8a ef       	ldi	r24, 0xFA	; 250
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	fc 01       	movw	r30, r24
    10a8:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	8f 5f       	subi	r24, 0xFF	; 255
    10ae:	8a 83       	std	Y+2, r24	; 0x02
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	88 30       	cpi	r24, 0x08	; 8
    10b4:	b0 f3       	brcs	.-20     	; 0x10a2 <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	8f 5f       	subi	r24, 0xFF	; 255
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	8f 30       	cpi	r24, 0x0F	; 15
    10c0:	08 f4       	brcc	.+2      	; 0x10c4 <CAN_InitModule+0x9c>
    10c2:	be cf       	rjmp	.-132    	; 0x1040 <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
    10c4:	88 ed       	ldi	r24, 0xD8	; 216
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	22 e0       	ldi	r18, 0x02	; 2
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
    10ce:	82 ee       	ldi	r24, 0xE2	; 226
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	fc 01       	movw	r30, r24
    10d6:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
    10d8:	83 ee       	ldi	r24, 0xE3	; 227
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	28 e0       	ldi	r18, 0x08	; 8
    10de:	fc 01       	movw	r30, r24
    10e0:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
    10e2:	84 ee       	ldi	r24, 0xE4	; 228
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	2e e5       	ldi	r18, 0x5E	; 94
    10e8:	fc 01       	movw	r30, r24
    10ea:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
    10ec:	85 ee       	ldi	r24, 0xE5	; 229
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	fc 01       	movw	r30, r24
    10f2:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
    10f4:	8b ed       	ldi	r24, 0xDB	; 219
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	20 eb       	ldi	r18, 0xB0	; 176
    10fa:	fc 01       	movw	r30, r24
    10fc:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
    10fe:	8f ed       	ldi	r24, 0xDF	; 223
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	2f e7       	ldi	r18, 0x7F	; 127
    1104:	fc 01       	movw	r30, r24
    1106:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
    1108:	8e ed       	ldi	r24, 0xDE	; 222
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	2f ef       	ldi	r18, 0xFF	; 255
    110e:	fc 01       	movw	r30, r24
    1110:	20 83       	st	Z, r18
	sei();
    1112:	78 94       	sei
}
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	00 d0       	rcall	.+0      	; 0x1124 <CAN_InitRxMob+0x6>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <CAN_InitRxMob+0x8>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	9c 83       	std	Y+4, r25	; 0x04
    112c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    112e:	8d ee       	ldi	r24, 0xED	; 237
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	fc 01       	movw	r30, r24
    1134:	80 81       	ld	r24, Z
    1136:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    1138:	00 00       	nop
    113a:	89 ed       	ldi	r24, 0xD9	; 217
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	fc 01       	movw	r30, r24
    1140:	80 81       	ld	r24, Z
    1142:	82 95       	swap	r24
    1144:	8f 70       	andi	r24, 0x0F	; 15
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	81 70       	andi	r24, 0x01	; 1
    114c:	99 27       	eor	r25, r25
    114e:	89 2b       	or	r24, r25
    1150:	a1 f7       	brne	.-24     	; 0x113a <CAN_InitRxMob+0x1c>
    1152:	89 ed       	ldi	r24, 0xD9	; 217
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	fc 01       	movw	r30, r24
    1158:	80 81       	ld	r24, Z
    115a:	86 95       	lsr	r24
    115c:	86 95       	lsr	r24
    115e:	86 95       	lsr	r24
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	81 70       	andi	r24, 0x01	; 1
    1166:	99 27       	eor	r25, r25
    1168:	89 2b       	or	r24, r25
    116a:	39 f7       	brne	.-50     	; 0x113a <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    116c:	19 82       	std	Y+1, r1	; 0x01
    116e:	49 c0       	rjmp	.+146    	; 0x1202 <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
    1170:	8d ee       	ldi	r24, 0xED	; 237
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	29 81       	ldd	r18, Y+1	; 0x01
    1176:	22 95       	swap	r18
    1178:	20 7f       	andi	r18, 0xF0	; 240
    117a:	fc 01       	movw	r30, r24
    117c:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
    117e:	8f ee       	ldi	r24, 0xEF	; 239
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	fc 01       	movw	r30, r24
    1184:	80 81       	ld	r24, Z
    1186:	82 95       	swap	r24
    1188:	86 95       	lsr	r24
    118a:	86 95       	lsr	r24
    118c:	83 70       	andi	r24, 0x03	; 3
    118e:	88 23       	and	r24, r24
    1190:	21 f0       	breq	.+8      	; 0x119a <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	34 c0       	rjmp	.+104    	; 0x1202 <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
    119a:	8f ee       	ldi	r24, 0xEF	; 239
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	2f e0       	ldi	r18, 0x0F	; 15
    11a0:	fc 01       	movw	r30, r24
    11a2:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
    11a4:	83 ef       	ldi	r24, 0xF3	; 243
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	33 27       	eor	r19, r19
    11ae:	36 95       	lsr	r19
    11b0:	27 95       	ror	r18
    11b2:	36 95       	lsr	r19
    11b4:	27 95       	ror	r18
    11b6:	36 95       	lsr	r19
    11b8:	27 95       	ror	r18
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
    11be:	82 ef       	ldi	r24, 0xF2	; 242
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	2b 81       	ldd	r18, Y+3	; 0x03
    11c4:	22 95       	swap	r18
    11c6:	22 0f       	add	r18, r18
    11c8:	20 7e       	andi	r18, 0xE0	; 224
    11ca:	fc 01       	movw	r30, r24
    11cc:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
    11ce:	86 ef       	ldi	r24, 0xF6	; 246
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	20 ee       	ldi	r18, 0xE0	; 224
    11d4:	fc 01       	movw	r30, r24
    11d6:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
    11d8:	87 ef       	ldi	r24, 0xF7	; 247
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	2f ef       	ldi	r18, 0xFF	; 255
    11de:	fc 01       	movw	r30, r24
    11e0:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
    11e2:	8f ee       	ldi	r24, 0xEF	; 239
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	2f ee       	ldi	r18, 0xEF	; 239
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	f9 01       	movw	r30, r18
    11ec:	20 81       	ld	r18, Z
    11ee:	20 68       	ori	r18, 0x80	; 128
    11f0:	fc 01       	movw	r30, r24
    11f2:	20 83       	st	Z, r18

		CANPAGE = tempPage;
    11f4:	8d ee       	ldi	r24, 0xED	; 237
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	2a 81       	ldd	r18, Y+2	; 0x02
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 83       	st	Z, r18

		return 1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	0a c0       	rjmp	.+20     	; 0x1216 <CAN_InitRxMob+0xf8>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	8f 30       	cpi	r24, 0x0F	; 15
    1206:	08 f4       	brcc	.+2      	; 0x120a <CAN_InitRxMob+0xec>
    1208:	b3 cf       	rjmp	.-154    	; 0x1170 <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
    120a:	8d ee       	ldi	r24, 0xED	; 237
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	2a 81       	ldd	r18, Y+2	; 0x02
    1210:	fc 01       	movw	r30, r24
    1212:	20 83       	st	Z, r18

	return 0;
    1214:	80 e0       	ldi	r24, 0x00	; 0
}
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	00 d0       	rcall	.+0      	; 0x122e <CAN_Init+0xa>
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
    1234:	0e 94 14 08 	call	0x1028	; 0x1028 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    1238:	19 82       	std	Y+1, r1	; 0x01
    123a:	30 c0       	rjmp	.+96     	; 0x129c <CAN_Init+0x78>
	{
		CAN_InitRxMob(i + 1);
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	0e 94 8f 08 	call	0x111e	; 0x111e <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	8c 01       	movw	r16, r24
    1254:	02 5e       	subi	r16, 0xE2	; 226
    1256:	1e 4f       	sbci	r17, 0xFE	; 254
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	85 e0       	ldi	r24, 0x05	; 5
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <calloc>
    1264:	f8 01       	movw	r30, r16
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	29 81       	ldd	r18, Y+1	; 0x01
    1272:	22 2f       	mov	r18, r18
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	49 81       	ldd	r20, Y+1	; 0x01
    1278:	44 2f       	mov	r20, r20
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	4a 5b       	subi	r20, 0xBA	; 186
    1280:	5e 4f       	sbci	r21, 0xFE	; 254
    1282:	fa 01       	movw	r30, r20
    1284:	60 83       	st	Z, r22
    1286:	24 5c       	subi	r18, 0xC4	; 196
    1288:	3e 4f       	sbci	r19, 0xFE	; 254
    128a:	f9 01       	movw	r30, r18
    128c:	60 83       	st	Z, r22
    128e:	8e 5c       	subi	r24, 0xCE	; 206
    1290:	9e 4f       	sbci	r25, 0xFE	; 254
    1292:	fc 01       	movw	r30, r24
    1294:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	99 81       	ldd	r25, Y+1	; 0x01
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	98 17       	cp	r25, r24
    12a2:	60 f2       	brcs	.-104    	; 0x123c <CAN_Init+0x18>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	08 95       	ret

000012b2 <CAN_CheckRX>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	1f 92       	push	r1
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	89 83       	std	Y+1, r24	; 0x01
	return rxCounter[nodeID - 1];
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	8a 5b       	subi	r24, 0xBA	; 186
    12c8:	9e 4f       	sbci	r25, 0xFE	; 254
    12ca:	fc 01       	movw	r30, r24
    12cc:	80 81       	ld	r24, Z
}
    12ce:	0f 90       	pop	r0
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	08 95       	ret

000012d6 <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	00 d0       	rcall	.+0      	; 0x12dc <CAN_Read+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <CAN_Read+0x8>
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	9b 83       	std	Y+3, r25	; 0x03
    12e4:	8a 83       	std	Y+2, r24	; 0x02
    12e6:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
    12e8:	84 e3       	ldi	r24, 0x34	; 52
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	2f ef       	ldi	r18, 0xFF	; 255
    12ee:	fc 01       	movw	r30, r24
    12f0:	20 83       	st	Z, r18
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
    12f2:	00 00       	nop
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	8a 5b       	subi	r24, 0xBA	; 186
    12fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1300:	fc 01       	movw	r30, r24
    1302:	80 81       	ld	r24, Z
    1304:	88 23       	and	r24, r24
    1306:	b1 f3       	breq	.-20     	; 0x12f4 <CAN_Read+0x1e>

	for(i = 0; i < 8; ++i)
    1308:	19 82       	std	Y+1, r1	; 0x01
    130a:	2c c0       	rjmp	.+88     	; 0x1364 <CAN_Read+0x8e>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	2a 81       	ldd	r18, Y+2	; 0x02
    1314:	3b 81       	ldd	r19, Y+3	; 0x03
    1316:	82 0f       	add	r24, r18
    1318:	93 1f       	adc	r25, r19
    131a:	2c 81       	ldd	r18, Y+4	; 0x04
    131c:	22 2f       	mov	r18, r18
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	21 50       	subi	r18, 0x01	; 1
    1322:	30 48       	sbci	r19, 0x80	; 128
    1324:	22 0f       	add	r18, r18
    1326:	33 1f       	adc	r19, r19
    1328:	22 5e       	subi	r18, 0xE2	; 226
    132a:	3e 4f       	sbci	r19, 0xFE	; 254
    132c:	f9 01       	movw	r30, r18
    132e:	40 81       	ld	r20, Z
    1330:	51 81       	ldd	r21, Z+1	; 0x01
    1332:	2c 81       	ldd	r18, Y+4	; 0x04
    1334:	22 2f       	mov	r18, r18
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	21 50       	subi	r18, 0x01	; 1
    133a:	31 09       	sbc	r19, r1
    133c:	24 5c       	subi	r18, 0xC4	; 196
    133e:	3e 4f       	sbci	r19, 0xFE	; 254
    1340:	f9 01       	movw	r30, r18
    1342:	20 81       	ld	r18, Z
    1344:	62 2f       	mov	r22, r18
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	29 81       	ldd	r18, Y+1	; 0x01
    134a:	22 2f       	mov	r18, r18
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	26 0f       	add	r18, r22
    1350:	37 1f       	adc	r19, r23
    1352:	24 0f       	add	r18, r20
    1354:	35 1f       	adc	r19, r21
    1356:	f9 01       	movw	r30, r18
    1358:	20 81       	ld	r18, Z
    135a:	fc 01       	movw	r30, r24
    135c:	20 83       	st	Z, r18
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	8f 5f       	subi	r24, 0xFF	; 255
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	88 30       	cpi	r24, 0x08	; 8
    1368:	88 f2       	brcs	.-94     	; 0x130c <CAN_Read+0x36>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	84 5c       	subi	r24, 0xC4	; 196
    1374:	9e 4f       	sbci	r25, 0xFE	; 254
    1376:	fc 01       	movw	r30, r24
    1378:	20 81       	ld	r18, Z
    137a:	2f 5f       	subi	r18, 0xFF	; 255
    137c:	fc 01       	movw	r30, r24
    137e:	20 83       	st	Z, r18
    1380:	25 30       	cpi	r18, 0x05	; 5
    1382:	41 f4       	brne	.+16     	; 0x1394 <CAN_Read+0xbe>
	*(rxRdIndex + sendingNodeID - 1) = 0;
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	88 2f       	mov	r24, r24
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	84 5c       	subi	r24, 0xC4	; 196
    138e:	9e 4f       	sbci	r25, 0xFE	; 254
    1390:	fc 01       	movw	r30, r24
    1392:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	9c 01       	movw	r18, r24
    139e:	2a 5b       	subi	r18, 0xBA	; 186
    13a0:	3e 4f       	sbci	r19, 0xFE	; 254
    13a2:	f9 01       	movw	r30, r18
    13a4:	20 81       	ld	r18, Z
    13a6:	21 50       	subi	r18, 0x01	; 1
    13a8:	8a 5b       	subi	r24, 0xBA	; 186
    13aa:	9e 4f       	sbci	r25, 0xFE	; 254
    13ac:	fc 01       	movw	r30, r24
    13ae:	20 83       	st	Z, r18

	return 0;
    13b0:	80 e0       	ldi	r24, 0x00	; 0
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <CAN_Write+0x6>
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <CAN_Write+0x8>
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <CAN_Write+0xa>
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	9d 83       	std	Y+5, r25	; 0x05
    13d0:	8c 83       	std	Y+4, r24	; 0x04
    13d2:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    13d4:	00 00       	nop
    13d6:	89 ed       	ldi	r24, 0xD9	; 217
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	fc 01       	movw	r30, r24
    13dc:	80 81       	ld	r24, Z
    13de:	82 95       	swap	r24
    13e0:	8f 70       	andi	r24, 0x0F	; 15
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	81 70       	andi	r24, 0x01	; 1
    13e8:	99 27       	eor	r25, r25
    13ea:	89 2b       	or	r24, r25
    13ec:	a1 f7       	brne	.-24     	; 0x13d6 <CAN_Write+0x16>
    13ee:	89 ed       	ldi	r24, 0xD9	; 217
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	fc 01       	movw	r30, r24
    13f4:	80 81       	ld	r24, Z
    13f6:	86 95       	lsr	r24
    13f8:	86 95       	lsr	r24
    13fa:	86 95       	lsr	r24
    13fc:	88 2f       	mov	r24, r24
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	81 70       	andi	r24, 0x01	; 1
    1402:	99 27       	eor	r25, r25
    1404:	89 2b       	or	r24, r25
    1406:	39 f7       	brne	.-50     	; 0x13d6 <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    1408:	8d ee       	ldi	r24, 0xED	; 237
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	fc 01       	movw	r30, r24
    140e:	80 81       	ld	r24, Z
    1410:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
    1412:	1a 82       	std	Y+2, r1	; 0x02
    1414:	15 c0       	rjmp	.+42     	; 0x1440 <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
    1416:	8d ee       	ldi	r24, 0xED	; 237
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	2a 81       	ldd	r18, Y+2	; 0x02
    141c:	22 95       	swap	r18
    141e:	20 7f       	andi	r18, 0xF0	; 240
    1420:	fc 01       	movw	r30, r24
    1422:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
    1424:	8f ee       	ldi	r24, 0xEF	; 239
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	fc 01       	movw	r30, r24
    142a:	80 81       	ld	r24, Z
    142c:	82 95       	swap	r24
    142e:	86 95       	lsr	r24
    1430:	86 95       	lsr	r24
    1432:	83 70       	andi	r24, 0x03	; 3
    1434:	88 23       	and	r24, r24
    1436:	09 f4       	brne	.+2      	; 0x143a <CAN_Write+0x7a>
			break;
    1438:	06 c0       	rjmp	.+12     	; 0x1446 <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	8f 5f       	subi	r24, 0xFF	; 255
    143e:	8a 83       	std	Y+2, r24	; 0x02
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	8f 30       	cpi	r24, 0x0F	; 15
    1444:	40 f3       	brcs	.-48     	; 0x1416 <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	8f 30       	cpi	r24, 0x0F	; 15
    144a:	11 f4       	brne	.+4      	; 0x1450 <CAN_Write+0x90>
		return -1;
    144c:	8f ef       	ldi	r24, 0xFF	; 255
    144e:	39 c0       	rjmp	.+114    	; 0x14c2 <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
    1450:	82 ef       	ldi	r24, 0xF2	; 242
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	2e 81       	ldd	r18, Y+6	; 0x06
    1456:	22 95       	swap	r18
    1458:	22 0f       	add	r18, r18
    145a:	20 7e       	andi	r18, 0xE0	; 224
    145c:	fc 01       	movw	r30, r24
    145e:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
    1460:	83 ef       	ldi	r24, 0xF3	; 243
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	2e 81       	ldd	r18, Y+6	; 0x06
    1466:	26 95       	lsr	r18
    1468:	26 95       	lsr	r18
    146a:	26 95       	lsr	r18
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
    1470:	8f ee       	ldi	r24, 0xEF	; 239
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	28 e0       	ldi	r18, 0x08	; 8
    1476:	fc 01       	movw	r30, r24
    1478:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    147a:	19 82       	std	Y+1, r1	; 0x01
    147c:	10 c0       	rjmp	.+32     	; 0x149e <CAN_Write+0xde>
		CANMSG = data[i];
    147e:	8a ef       	ldi	r24, 0xFA	; 250
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	29 81       	ldd	r18, Y+1	; 0x01
    1484:	22 2f       	mov	r18, r18
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	4c 81       	ldd	r20, Y+4	; 0x04
    148a:	5d 81       	ldd	r21, Y+5	; 0x05
    148c:	24 0f       	add	r18, r20
    148e:	35 1f       	adc	r19, r21
    1490:	f9 01       	movw	r30, r18
    1492:	20 81       	ld	r18, Z
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	88 30       	cpi	r24, 0x08	; 8
    14a2:	68 f3       	brcs	.-38     	; 0x147e <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
    14a4:	8f ee       	ldi	r24, 0xEF	; 239
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	2f ee       	ldi	r18, 0xEF	; 239
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	f9 01       	movw	r30, r18
    14ae:	20 81       	ld	r18, Z
    14b0:	20 64       	ori	r18, 0x40	; 64
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18

	CANPAGE = tempPage;
    14b6:	8d ee       	ldi	r24, 0xED	; 237
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	2b 81       	ldd	r18, Y+3	; 0x03
    14bc:	fc 01       	movw	r30, r24
    14be:	20 83       	st	Z, r18

	return 0;
    14c0:	80 e0       	ldi	r24, 0x00	; 0
}
    14c2:	26 96       	adiw	r28, 0x06	; 6
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	00 d0       	rcall	.+0      	; 0x14da <__list_add+0x6>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <__list_add+0x8>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <__list_add+0xa>
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	7c 83       	std	Y+4, r23	; 0x04
    14e8:	6b 83       	std	Y+3, r22	; 0x03
    14ea:	5e 83       	std	Y+6, r21	; 0x06
    14ec:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	29 81       	ldd	r18, Y+1	; 0x01
    14f4:	3a 81       	ldd	r19, Y+2	; 0x02
    14f6:	fc 01       	movw	r30, r24
    14f8:	31 83       	std	Z+1, r19	; 0x01
    14fa:	20 83       	st	Z, r18
    new->next = next;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	2d 81       	ldd	r18, Y+5	; 0x05
    1502:	3e 81       	ldd	r19, Y+6	; 0x06
    1504:	fc 01       	movw	r30, r24
    1506:	33 83       	std	Z+3, r19	; 0x03
    1508:	22 83       	std	Z+2, r18	; 0x02
    new->prev = prev;
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	9a 81       	ldd	r25, Y+2	; 0x02
    150e:	2b 81       	ldd	r18, Y+3	; 0x03
    1510:	3c 81       	ldd	r19, Y+4	; 0x04
    1512:	fc 01       	movw	r30, r24
    1514:	31 83       	std	Z+1, r19	; 0x01
    1516:	20 83       	st	Z, r18
    prev->next = new;
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	29 81       	ldd	r18, Y+1	; 0x01
    151e:	3a 81       	ldd	r19, Y+2	; 0x02
    1520:	fc 01       	movw	r30, r24
    1522:	33 83       	std	Z+3, r19	; 0x03
    1524:	22 83       	std	Z+2, r18	; 0x02
}
    1526:	26 96       	adiw	r28, 0x06	; 6
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

00001538 <list_add>:

static inline void list_add(struct list_head* new, struct list_head* head)
{
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	00 d0       	rcall	.+0      	; 0x153e <list_add+0x6>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <list_add+0x8>
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	9a 83       	std	Y+2, r25	; 0x02
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	7c 83       	std	Y+4, r23	; 0x04
    154a:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	fc 01       	movw	r30, r24
    1552:	42 81       	ldd	r20, Z+2	; 0x02
    1554:	53 81       	ldd	r21, Z+3	; 0x03
    1556:	2b 81       	ldd	r18, Y+3	; 0x03
    1558:	3c 81       	ldd	r19, Y+4	; 0x04
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
    155e:	b9 01       	movw	r22, r18
    1560:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__list_add>
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	2b 97       	sbiw	r28, 0x0b	; 11
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	89 87       	std	Y+9, r24	; 0x09
    1588:	6a 87       	std	Y+10, r22	; 0x0a
    158a:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    158c:	80 91 08 01 	lds	r24, 0x0108
    1590:	90 91 09 01 	lds	r25, 0x0109
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	8b 83       	std	Y+3, r24	; 0x03
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	06 97       	sbiw	r24, 0x06	; 6
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	15 c0       	rjmp	.+42     	; 0x15ce <gpio_register_pin+0x5c>
    {
        if(input->pin == pin)
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	9a 81       	ldd	r25, Y+2	; 0x02
    15a8:	fc 01       	movw	r30, r24
    15aa:	90 81       	ld	r25, Z
    15ac:	89 85       	ldd	r24, Y+9	; 0x09
    15ae:	98 17       	cp	r25, r24
    15b0:	11 f4       	brne	.+4      	; 0x15b6 <gpio_register_pin+0x44>
            return 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	e5 c0       	rjmp	.+458    	; 0x1780 <gpio_register_pin+0x20e>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ba:	fc 01       	movw	r30, r24
    15bc:	80 85       	ldd	r24, Z+8	; 0x08
    15be:	91 85       	ldd	r25, Z+9	; 0x09
    15c0:	9e 83       	std	Y+6, r25	; 0x06
    15c2:	8d 83       	std	Y+5, r24	; 0x05
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	06 97       	sbiw	r24, 0x06	; 6
    15ca:	9a 83       	std	Y+2, r25	; 0x02
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	06 96       	adiw	r24, 0x06	; 6
    15d4:	86 50       	subi	r24, 0x06	; 6
    15d6:	91 40       	sbci	r25, 0x01	; 1
    15d8:	29 f7       	brne	.-54     	; 0x15a4 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    15da:	89 85       	ldd	r24, Y+9	; 0x09
    15dc:	86 95       	lsr	r24
    15de:	86 95       	lsr	r24
    15e0:	86 95       	lsr	r24
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t pin_reg = pin % 8;
    15e6:	89 85       	ldd	r24, Y+9	; 0x09
    15e8:	87 70       	andi	r24, 0x07	; 7
    15ea:	88 87       	std	Y+8, r24	; 0x08

	if(direction == GPIO_DIRECTION_OUTPUT)
    15ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <gpio_register_pin+0x82>
    15f2:	55 c0       	rjmp	.+170    	; 0x169e <gpio_register_pin+0x12c>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    15f4:	8f 81       	ldd	r24, Y+7	; 0x07
    15f6:	88 2f       	mov	r24, r24
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9c 01       	movw	r18, r24
    15fc:	21 50       	subi	r18, 0x01	; 1
    15fe:	31 09       	sbc	r19, r1
    1600:	c9 01       	movw	r24, r18
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	82 0f       	add	r24, r18
    1608:	93 1f       	adc	r25, r19
    160a:	81 96       	adiw	r24, 0x21	; 33
    160c:	ac 01       	movw	r20, r24
    160e:	8f 81       	ldd	r24, Y+7	; 0x07
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9c 01       	movw	r18, r24
    1616:	21 50       	subi	r18, 0x01	; 1
    1618:	31 09       	sbc	r19, r1
    161a:	c9 01       	movw	r24, r18
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	82 0f       	add	r24, r18
    1622:	93 1f       	adc	r25, r19
    1624:	81 96       	adiw	r24, 0x21	; 33
    1626:	fc 01       	movw	r30, r24
    1628:	80 81       	ld	r24, Z
    162a:	68 2f       	mov	r22, r24
    162c:	88 85       	ldd	r24, Y+8	; 0x08
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 c0       	rjmp	.+4      	; 0x163c <gpio_register_pin+0xca>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	2a 95       	dec	r18
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <gpio_register_pin+0xc6>
    1640:	86 2b       	or	r24, r22
    1642:	fa 01       	movw	r30, r20
    1644:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1646:	8f 81       	ldd	r24, Y+7	; 0x07
    1648:	88 2f       	mov	r24, r24
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9c 01       	movw	r18, r24
    164e:	21 50       	subi	r18, 0x01	; 1
    1650:	31 09       	sbc	r19, r1
    1652:	c9 01       	movw	r24, r18
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	82 0f       	add	r24, r18
    165a:	93 1f       	adc	r25, r19
    165c:	82 96       	adiw	r24, 0x22	; 34
    165e:	ac 01       	movw	r20, r24
    1660:	8f 81       	ldd	r24, Y+7	; 0x07
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9c 01       	movw	r18, r24
    1668:	21 50       	subi	r18, 0x01	; 1
    166a:	31 09       	sbc	r19, r1
    166c:	c9 01       	movw	r24, r18
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	82 0f       	add	r24, r18
    1674:	93 1f       	adc	r25, r19
    1676:	82 96       	adiw	r24, 0x22	; 34
    1678:	fc 01       	movw	r30, r24
    167a:	80 81       	ld	r24, Z
    167c:	68 2f       	mov	r22, r24
    167e:	88 85       	ldd	r24, Y+8	; 0x08
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 c0       	rjmp	.+4      	; 0x168e <gpio_register_pin+0x11c>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	2a 95       	dec	r18
    1690:	e2 f7       	brpl	.-8      	; 0x168a <gpio_register_pin+0x118>
    1692:	80 95       	com	r24
    1694:	86 23       	and	r24, r22
    1696:	fa 01       	movw	r30, r20
    1698:	80 83       	st	Z, r24
        return 0;
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	71 c0       	rjmp	.+226    	; 0x1780 <gpio_register_pin+0x20e>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    169e:	8f 81       	ldd	r24, Y+7	; 0x07
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9c 01       	movw	r18, r24
    16a6:	21 50       	subi	r18, 0x01	; 1
    16a8:	31 09       	sbc	r19, r1
    16aa:	c9 01       	movw	r24, r18
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	82 0f       	add	r24, r18
    16b2:	93 1f       	adc	r25, r19
    16b4:	81 96       	adiw	r24, 0x21	; 33
    16b6:	ac 01       	movw	r20, r24
    16b8:	8f 81       	ldd	r24, Y+7	; 0x07
    16ba:	88 2f       	mov	r24, r24
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	9c 01       	movw	r18, r24
    16c0:	21 50       	subi	r18, 0x01	; 1
    16c2:	31 09       	sbc	r19, r1
    16c4:	c9 01       	movw	r24, r18
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	82 0f       	add	r24, r18
    16cc:	93 1f       	adc	r25, r19
    16ce:	81 96       	adiw	r24, 0x21	; 33
    16d0:	fc 01       	movw	r30, r24
    16d2:	80 81       	ld	r24, Z
    16d4:	68 2f       	mov	r22, r24
    16d6:	88 85       	ldd	r24, Y+8	; 0x08
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <gpio_register_pin+0x174>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	2a 95       	dec	r18
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <gpio_register_pin+0x170>
    16ea:	80 95       	com	r24
    16ec:	86 23       	and	r24, r22
    16ee:	fa 01       	movw	r30, r20
    16f0:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    16f2:	8f 81       	ldd	r24, Y+7	; 0x07
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9c 01       	movw	r18, r24
    16fa:	21 50       	subi	r18, 0x01	; 1
    16fc:	31 09       	sbc	r19, r1
    16fe:	c9 01       	movw	r24, r18
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	82 0f       	add	r24, r18
    1706:	93 1f       	adc	r25, r19
    1708:	82 96       	adiw	r24, 0x22	; 34
    170a:	ac 01       	movw	r20, r24
    170c:	8f 81       	ldd	r24, Y+7	; 0x07
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	9c 01       	movw	r18, r24
    1714:	21 50       	subi	r18, 0x01	; 1
    1716:	31 09       	sbc	r19, r1
    1718:	c9 01       	movw	r24, r18
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	82 0f       	add	r24, r18
    1720:	93 1f       	adc	r25, r19
    1722:	82 96       	adiw	r24, 0x22	; 34
    1724:	fc 01       	movw	r30, r24
    1726:	80 81       	ld	r24, Z
    1728:	68 2f       	mov	r22, r24
    172a:	88 85       	ldd	r24, Y+8	; 0x08
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 c0       	rjmp	.+4      	; 0x173a <gpio_register_pin+0x1c8>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	2a 95       	dec	r18
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <gpio_register_pin+0x1c4>
    173e:	86 2b       	or	r24, r22
    1740:	fa 01       	movw	r30, r20
    1742:	80 83       	st	Z, r24
	}

	input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1744:	8a e0       	ldi	r24, 0x0A	; 10
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <malloc>
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01

    if(input == NULL)
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	89 2b       	or	r24, r25
    1756:	11 f4       	brne	.+4      	; 0x175c <gpio_register_pin+0x1ea>
        return 1;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	12 c0       	rjmp	.+36     	; 0x1780 <gpio_register_pin+0x20e>

    input->pin       = pin;
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	29 85       	ldd	r18, Y+9	; 0x09
    1762:	fc 01       	movw	r30, r24
    1764:	20 83       	st	Z, r18
    input->pulled_up = pulled_up;
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	9a 81       	ldd	r25, Y+2	; 0x02
    176a:	2b 85       	ldd	r18, Y+11	; 0x0b
    176c:	fc 01       	movw	r30, r24
    176e:	21 83       	std	Z+1, r18	; 0x01
    list_add(&input->list, &gpio_inputs);
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	06 96       	adiw	r24, 0x06	; 6
    1776:	66 e0       	ldi	r22, 0x06	; 6
    1778:	71 e0       	ldi	r23, 0x01	; 1
    177a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <list_add>

    return 0;
    177e:	80 e0       	ldi	r24, 0x00	; 0
}
    1780:	2b 96       	adiw	r28, 0x0b	; 11
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

00001792 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	00 d0       	rcall	.+0      	; 0x1798 <gpio_write_pin+0x6>
    1798:	00 d0       	rcall	.+0      	; 0x179a <gpio_write_pin+0x8>
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	8b 83       	std	Y+3, r24	; 0x03
    17a0:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	86 95       	lsr	r24
    17a6:	86 95       	lsr	r24
    17a8:	86 95       	lsr	r24
    17aa:	8f 5f       	subi	r24, 0xFF	; 255
    17ac:	89 83       	std	Y+1, r24	; 0x01
	pin = pin % 8;
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	87 70       	andi	r24, 0x07	; 7
    17b2:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	9c 01       	movw	r18, r24
    17bc:	21 50       	subi	r18, 0x01	; 1
    17be:	31 09       	sbc	r19, r1
    17c0:	c9 01       	movw	r24, r18
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	82 0f       	add	r24, r18
    17c8:	93 1f       	adc	r25, r19
    17ca:	82 96       	adiw	r24, 0x22	; 34
    17cc:	fc 01       	movw	r30, r24
    17ce:	80 81       	ld	r24, Z
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	a2 81       	ldd	r26, Z+2	; 0x02
    17d4:	b3 81       	ldd	r27, Z+3	; 0x03
    17d6:	8a 83       	std	Y+2, r24	; 0x02
	if(value != 0)
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	88 23       	and	r24, r24
    17dc:	31 f1       	breq	.+76     	; 0x182a <gpio_write_pin+0x98>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	9c 01       	movw	r18, r24
    17e6:	21 50       	subi	r18, 0x01	; 1
    17e8:	31 09       	sbc	r19, r1
    17ea:	c9 01       	movw	r24, r18
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	82 0f       	add	r24, r18
    17f2:	93 1f       	adc	r25, r19
    17f4:	82 96       	adiw	r24, 0x22	; 34
    17f6:	ac 01       	movw	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	68 2f       	mov	r22, r24
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 c0       	rjmp	.+4      	; 0x180e <gpio_write_pin+0x7c>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	6a 95       	dec	r22
    1810:	e2 f7       	brpl	.-8      	; 0x180a <gpio_write_pin+0x78>
    1812:	82 2b       	or	r24, r18
    1814:	93 2b       	or	r25, r19
    1816:	09 2e       	mov	r0, r25
    1818:	00 0c       	add	r0, r0
    181a:	aa 0b       	sbc	r26, r26
    181c:	bb 0b       	sbc	r27, r27
    181e:	fa 01       	movw	r30, r20
    1820:	80 83       	st	Z, r24
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	a2 83       	std	Z+2, r26	; 0x02
    1826:	b3 83       	std	Z+3, r27	; 0x03
    1828:	27 c0       	rjmp	.+78     	; 0x1878 <gpio_write_pin+0xe6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	9c 01       	movw	r18, r24
    1832:	21 50       	subi	r18, 0x01	; 1
    1834:	31 09       	sbc	r19, r1
    1836:	c9 01       	movw	r24, r18
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	82 0f       	add	r24, r18
    183e:	93 1f       	adc	r25, r19
    1840:	82 96       	adiw	r24, 0x22	; 34
    1842:	ac 01       	movw	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	68 2f       	mov	r22, r24
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 c0       	rjmp	.+4      	; 0x185a <gpio_write_pin+0xc8>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	6a 95       	dec	r22
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <gpio_write_pin+0xc4>
    185e:	80 95       	com	r24
    1860:	90 95       	com	r25
    1862:	82 23       	and	r24, r18
    1864:	93 23       	and	r25, r19
    1866:	09 2e       	mov	r0, r25
    1868:	00 0c       	add	r0, r0
    186a:	aa 0b       	sbc	r26, r26
    186c:	bb 0b       	sbc	r27, r27
    186e:	fa 01       	movw	r30, r20
    1870:	80 83       	st	Z, r24
    1872:	91 83       	std	Z+1, r25	; 0x01
    1874:	a2 83       	std	Z+2, r26	; 0x02
    1876:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    1878:	80 e0       	ldi	r24, 0x00	; 0
}
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	08 95       	ret

00001888 <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	00 d0       	rcall	.+0      	; 0x188e <__gpio_read_pin+0x6>
    188e:	1f 92       	push	r1
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	86 95       	lsr	r24
    189a:	86 95       	lsr	r24
    189c:	86 95       	lsr	r24
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	87 70       	andi	r24, 0x07	; 7
    18a6:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9c 01       	movw	r18, r24
    18b0:	21 50       	subi	r18, 0x01	; 1
    18b2:	31 09       	sbc	r19, r1
    18b4:	c9 01       	movw	r24, r18
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	82 0f       	add	r24, r18
    18bc:	93 1f       	adc	r25, r19
    18be:	80 96       	adiw	r24, 0x20	; 32
    18c0:	fc 01       	movw	r30, r24
    18c2:	80 81       	ld	r24, Z
    18c4:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	88 2f       	mov	r24, r24
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	2b 81       	ldd	r18, Y+3	; 0x03
    18ce:	22 2f       	mov	r18, r18
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <__gpio_read_pin+0x50>
    18d4:	95 95       	asr	r25
    18d6:	87 95       	ror	r24
    18d8:	2a 95       	dec	r18
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <__gpio_read_pin+0x4c>
    18dc:	81 70       	andi	r24, 0x01	; 1
}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	08 95       	ret

000018ea <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	29 97       	sbiw	r28, 0x09	; 9
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1900:	80 91 08 01 	lds	r24, 0x0108
    1904:	90 91 09 01 	lds	r25, 0x0109
    1908:	9d 83       	std	Y+5, r25	; 0x05
    190a:	8c 83       	std	Y+4, r24	; 0x04
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	9d 81       	ldd	r25, Y+5	; 0x05
    1910:	06 97       	sbiw	r24, 0x06	; 6
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	55 c0       	rjmp	.+170    	; 0x19c2 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	fc 01       	movw	r30, r24
    191e:	90 81       	ld	r25, Z
    1920:	89 85       	ldd	r24, Y+9	; 0x09
    1922:	98 17       	cp	r25, r24
    1924:	09 f0       	breq	.+2      	; 0x1928 <gpio_read_pin+0x3e>
    1926:	41 c0       	rjmp	.+130    	; 0x19aa <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
    1928:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    192a:	1f c0       	rjmp	.+62     	; 0x196a <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	29 81       	ldd	r18, Y+1	; 0x01
    1934:	3a 81       	ldd	r19, Y+2	; 0x02
    1936:	82 0f       	add	r24, r18
    1938:	93 1f       	adc	r25, r19
    193a:	02 96       	adiw	r24, 0x02	; 2
    193c:	fc 01       	movw	r30, r24
    193e:	40 81       	ld	r20, Z
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	29 81       	ldd	r18, Y+1	; 0x01
    194a:	3a 81       	ldd	r19, Y+2	; 0x02
    194c:	82 0f       	add	r24, r18
    194e:	93 1f       	adc	r25, r19
    1950:	02 96       	adiw	r24, 0x02	; 2
    1952:	fc 01       	movw	r30, r24
    1954:	80 81       	ld	r24, Z
    1956:	48 17       	cp	r20, r24
    1958:	29 f0       	breq	.+10     	; 0x1964 <gpio_read_pin+0x7a>
                    return input->previous_state;
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	fc 01       	movw	r30, r24
    1960:	85 81       	ldd	r24, Z+5	; 0x05
    1962:	37 c0       	rjmp	.+110    	; 0x19d2 <gpio_read_pin+0xe8>
                i++;
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	8f 5f       	subi	r24, 0xFF	; 255
    1968:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	f0 f2       	brcs	.-68     	; 0x192c <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	fc 01       	movw	r30, r24
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	89 27       	eor	r24, r25
    197c:	88 23       	and	r24, r24
    197e:	29 f0       	breq	.+10     	; 0x198a <gpio_read_pin+0xa0>
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	fc 01       	movw	r30, r24
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	08 c0       	rjmp	.+16     	; 0x199a <gpio_read_pin+0xb0>
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	9a 81       	ldd	r25, Y+2	; 0x02
    198e:	fc 01       	movw	r30, r24
    1990:	92 81       	ldd	r25, Z+2	; 0x02
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	99 23       	and	r25, r25
    1996:	09 f0       	breq	.+2      	; 0x199a <gpio_read_pin+0xb0>
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	9a 81       	ldd	r25, Y+2	; 0x02
    19a0:	28 85       	ldd	r18, Y+8	; 0x08
    19a2:	fc 01       	movw	r30, r24
    19a4:	25 83       	std	Z+5, r18	; 0x05

            return state;
    19a6:	88 85       	ldd	r24, Y+8	; 0x08
    19a8:	14 c0       	rjmp	.+40     	; 0x19d2 <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	9a 81       	ldd	r25, Y+2	; 0x02
    19ae:	fc 01       	movw	r30, r24
    19b0:	80 85       	ldd	r24, Z+8	; 0x08
    19b2:	91 85       	ldd	r25, Z+9	; 0x09
    19b4:	9f 83       	std	Y+7, r25	; 0x07
    19b6:	8e 83       	std	Y+6, r24	; 0x06
    19b8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ba:	9f 81       	ldd	r25, Y+7	; 0x07
    19bc:	06 97       	sbiw	r24, 0x06	; 6
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	06 96       	adiw	r24, 0x06	; 6
    19c8:	86 50       	subi	r24, 0x06	; 6
    19ca:	91 40       	sbci	r25, 0x01	; 1
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <gpio_read_pin+0xe6>
    19ce:	a4 cf       	rjmp	.-184    	; 0x1918 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
}
    19d2:	29 96       	adiw	r28, 0x09	; 9
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	08 95       	ret

000019e4 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <gpio_debouncer+0xa>
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <gpio_debouncer+0xc>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <gpio_debouncer+0xe>
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    19f6:	80 91 08 01 	lds	r24, 0x0108
    19fa:	90 91 09 01 	lds	r25, 0x0109
    19fe:	9c 83       	std	Y+4, r25	; 0x04
    1a00:	8b 83       	std	Y+3, r24	; 0x03
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	06 97       	sbiw	r24, 0x06	; 6
    1a08:	9a 83       	std	Y+2, r25	; 0x02
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	1e c0       	rjmp	.+60     	; 0x1a4a <gpio_debouncer+0x66>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    1a0e:	00 91 52 01 	lds	r16, 0x0152
    1a12:	10 91 53 01 	lds	r17, 0x0153
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	80 81       	ld	r24, Z
    1a1e:	0e 94 44 0c 	call	0x1888	; 0x1888 <__gpio_read_pin>
    1a22:	28 2f       	mov	r18, r24
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	80 0f       	add	r24, r16
    1a2a:	91 1f       	adc	r25, r17
    1a2c:	02 96       	adiw	r24, 0x02	; 2
    1a2e:	fc 01       	movw	r30, r24
    1a30:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	9a 81       	ldd	r25, Y+2	; 0x02
    1a36:	fc 01       	movw	r30, r24
    1a38:	80 85       	ldd	r24, Z+8	; 0x08
    1a3a:	91 85       	ldd	r25, Z+9	; 0x09
    1a3c:	9e 83       	std	Y+6, r25	; 0x06
    1a3e:	8d 83       	std	Y+5, r24	; 0x05
    1a40:	8d 81       	ldd	r24, Y+5	; 0x05
    1a42:	9e 81       	ldd	r25, Y+6	; 0x06
    1a44:	06 97       	sbiw	r24, 0x06	; 6
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	06 96       	adiw	r24, 0x06	; 6
    1a50:	86 50       	subi	r24, 0x06	; 6
    1a52:	91 40       	sbci	r25, 0x01	; 1
    1a54:	e1 f6       	brne	.-72     	; 0x1a0e <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1a56:	80 91 52 01 	lds	r24, 0x0152
    1a5a:	90 91 53 01 	lds	r25, 0x0153
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	90 93 53 01 	sts	0x0153, r25
    1a64:	80 93 52 01 	sts	0x0152, r24
    1a68:	03 97       	sbiw	r24, 0x03	; 3
    1a6a:	21 f4       	brne	.+8      	; 0x1a74 <gpio_debouncer+0x90>
        count = 0;
    1a6c:	10 92 53 01 	sts	0x0153, r1
    1a70:	10 92 52 01 	sts	0x0152, r1

}
    1a74:	26 96       	adiw	r28, 0x06	; 6
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	08 95       	ret

00001a8a <odometry_set_speed>:
 * 	void odometry_set_speed(uint8_t speed)
 *
 * 	Send odometry board the max speed
 */
void odometry_set_speed(uint8_t speed)
{
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	67 97       	sbiw	r28, 0x17	; 23
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1aa0:	80 91 54 01 	lds	r24, 0x0154
    1aa4:	9f 89       	ldd	r25, Y+23	; 0x17
    1aa6:	98 17       	cp	r25, r24
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <odometry_set_speed+0x22>
    1aaa:	82 c0       	rjmp	.+260    	; 0x1bb0 <odometry_set_speed+0x126>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1aac:	86 e5       	ldi	r24, 0x56	; 86
    1aae:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1ab0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab2:	88 8b       	std	Y+16, r24	; 0x10
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1ab4:	72 c0       	rjmp	.+228    	; 0x1b9a <odometry_set_speed+0x110>
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a8 e4       	ldi	r26, 0x48	; 72
    1abc:	b2 e4       	ldi	r27, 0x42	; 66
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	ab 83       	std	Y+3, r26	; 0x03
    1ac4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e4       	ldi	r19, 0x40	; 64
    1aca:	4c e1       	ldi	r20, 0x1C	; 28
    1acc:	55 e4       	ldi	r21, 0x45	; 69
    1ace:	69 81       	ldd	r22, Y+1	; 0x01
    1ad0:	7a 81       	ldd	r23, Y+2	; 0x02
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	af 83       	std	Y+7, r26	; 0x07
    1ae4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e8       	ldi	r20, 0x80	; 128
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	6d 81       	ldd	r22, Y+5	; 0x05
    1af0:	7e 81       	ldd	r23, Y+6	; 0x06
    1af2:	8f 81       	ldd	r24, Y+7	; 0x07
    1af4:	98 85       	ldd	r25, Y+8	; 0x08
    1af6:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
    1afa:	88 23       	and	r24, r24
    1afc:	2c f4       	brge	.+10     	; 0x1b08 <odometry_set_speed+0x7e>
		__ticks = 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9a 87       	std	Y+10, r25	; 0x0a
    1b04:	89 87       	std	Y+9, r24	; 0x09
    1b06:	3f c0       	rjmp	.+126    	; 0x1b86 <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	6d 81       	ldd	r22, Y+5	; 0x05
    1b12:	7e 81       	ldd	r23, Y+6	; 0x06
    1b14:	8f 81       	ldd	r24, Y+7	; 0x07
    1b16:	98 85       	ldd	r25, Y+8	; 0x08
    1b18:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
    1b1c:	18 16       	cp	r1, r24
    1b1e:	4c f5       	brge	.+82     	; 0x1b72 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	69 81       	ldd	r22, Y+1	; 0x01
    1b2a:	7a 81       	ldd	r23, Y+2	; 0x02
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	bc 01       	movw	r22, r24
    1b3a:	cd 01       	movw	r24, r26
    1b3c:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9a 87       	std	Y+10, r25	; 0x0a
    1b46:	89 87       	std	Y+9, r24	; 0x09
    1b48:	0f c0       	rjmp	.+30     	; 0x1b68 <odometry_set_speed+0xde>
    1b4a:	8a ef       	ldi	r24, 0xFA	; 250
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9c 87       	std	Y+12, r25	; 0x0c
    1b50:	8b 87       	std	Y+11, r24	; 0x0b
    1b52:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b54:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <odometry_set_speed+0xcc>
    1b5a:	9c 87       	std	Y+12, r25	; 0x0c
    1b5c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5e:	89 85       	ldd	r24, Y+9	; 0x09
    1b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	9a 87       	std	Y+10, r25	; 0x0a
    1b66:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b68:	89 85       	ldd	r24, Y+9	; 0x09
    1b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6c:	89 2b       	or	r24, r25
    1b6e:	69 f7       	brne	.-38     	; 0x1b4a <odometry_set_speed+0xc0>
    1b70:	14 c0       	rjmp	.+40     	; 0x1b9a <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b72:	6d 81       	ldd	r22, Y+5	; 0x05
    1b74:	7e 81       	ldd	r23, Y+6	; 0x06
    1b76:	8f 81       	ldd	r24, Y+7	; 0x07
    1b78:	98 85       	ldd	r25, Y+8	; 0x08
    1b7a:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	9a 87       	std	Y+10, r25	; 0x0a
    1b84:	89 87       	std	Y+9, r24	; 0x09
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	9e 87       	std	Y+14, r25	; 0x0e
    1b8c:	8d 87       	std	Y+13, r24	; 0x0d
    1b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <odometry_set_speed+0x108>
    1b96:	9e 87       	std	Y+14, r25	; 0x0e
    1b98:	8d 87       	std	Y+13, r24	; 0x0d
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	0f 96       	adiw	r24, 0x0f	; 15
    1b9e:	63 ec       	ldi	r22, 0xC3	; 195
    1ba0:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    1ba4:	88 23       	and	r24, r24
    1ba6:	09 f0       	breq	.+2      	; 0x1baa <odometry_set_speed+0x120>
    1ba8:	86 cf       	rjmp	.-244    	; 0x1ab6 <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    1baa:	8f 89       	ldd	r24, Y+23	; 0x17
    1bac:	80 93 54 01 	sts	0x0154, r24
}
    1bb0:	67 96       	adiw	r28, 0x17	; 23
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <odometry_query_position>:
 * 	void odometry_query_position(void)
 *
 * 	Get the current position. Update it to position
 */
void odometry_query_position(void)
{
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	66 97       	sbiw	r28, 0x16	; 22
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1bd6:	80 e5       	ldi	r24, 0x50	; 80
    1bd8:	8f 87       	std	Y+15, r24	; 0x0f
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1bda:	72 c0       	rjmp	.+228    	; 0x1cc0 <odometry_query_position+0xfe>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a8 e4       	ldi	r26, 0x48	; 72
    1be2:	b2 e4       	ldi	r27, 0x42	; 66
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	ab 83       	std	Y+3, r26	; 0x03
    1bea:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e4       	ldi	r19, 0x40	; 64
    1bf0:	4c e1       	ldi	r20, 0x1C	; 28
    1bf2:	55 e4       	ldi	r21, 0x45	; 69
    1bf4:	69 81       	ldd	r22, Y+1	; 0x01
    1bf6:	7a 81       	ldd	r23, Y+2	; 0x02
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	8d 83       	std	Y+5, r24	; 0x05
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	af 83       	std	Y+7, r26	; 0x07
    1c0a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e8       	ldi	r20, 0x80	; 128
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	6d 81       	ldd	r22, Y+5	; 0x05
    1c16:	7e 81       	ldd	r23, Y+6	; 0x06
    1c18:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1a:	98 85       	ldd	r25, Y+8	; 0x08
    1c1c:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
    1c20:	88 23       	and	r24, r24
    1c22:	2c f4       	brge	.+10     	; 0x1c2e <odometry_query_position+0x6c>
		__ticks = 1;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9a 87       	std	Y+10, r25	; 0x0a
    1c2a:	89 87       	std	Y+9, r24	; 0x09
    1c2c:	3f c0       	rjmp	.+126    	; 0x1cac <odometry_query_position+0xea>
	else if (__tmp > 65535)
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	3f ef       	ldi	r19, 0xFF	; 255
    1c32:	4f e7       	ldi	r20, 0x7F	; 127
    1c34:	57 e4       	ldi	r21, 0x47	; 71
    1c36:	6d 81       	ldd	r22, Y+5	; 0x05
    1c38:	7e 81       	ldd	r23, Y+6	; 0x06
    1c3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c3c:	98 85       	ldd	r25, Y+8	; 0x08
    1c3e:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	4c f5       	brge	.+82     	; 0x1c98 <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e2       	ldi	r20, 0x20	; 32
    1c4c:	51 e4       	ldi	r21, 0x41	; 65
    1c4e:	69 81       	ldd	r22, Y+1	; 0x01
    1c50:	7a 81       	ldd	r23, Y+2	; 0x02
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	9c 81       	ldd	r25, Y+4	; 0x04
    1c56:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	bc 01       	movw	r22, r24
    1c60:	cd 01       	movw	r24, r26
    1c62:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9a 87       	std	Y+10, r25	; 0x0a
    1c6c:	89 87       	std	Y+9, r24	; 0x09
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <odometry_query_position+0xcc>
    1c70:	8a ef       	ldi	r24, 0xFA	; 250
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9c 87       	std	Y+12, r25	; 0x0c
    1c76:	8b 87       	std	Y+11, r24	; 0x0b
    1c78:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <odometry_query_position+0xba>
    1c80:	9c 87       	std	Y+12, r25	; 0x0c
    1c82:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c84:	89 85       	ldd	r24, Y+9	; 0x09
    1c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	9a 87       	std	Y+10, r25	; 0x0a
    1c8c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8e:	89 85       	ldd	r24, Y+9	; 0x09
    1c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c92:	89 2b       	or	r24, r25
    1c94:	69 f7       	brne	.-38     	; 0x1c70 <odometry_query_position+0xae>
    1c96:	14 c0       	rjmp	.+40     	; 0x1cc0 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c98:	6d 81       	ldd	r22, Y+5	; 0x05
    1c9a:	7e 81       	ldd	r23, Y+6	; 0x06
    1c9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c9e:	98 85       	ldd	r25, Y+8	; 0x08
    1ca0:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9a 87       	std	Y+10, r25	; 0x0a
    1caa:	89 87       	std	Y+9, r24	; 0x09
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	9e 87       	std	Y+14, r25	; 0x0e
    1cb2:	8d 87       	std	Y+13, r24	; 0x0d
    1cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <odometry_query_position+0xf6>
    1cbc:	9e 87       	std	Y+14, r25	; 0x0e
    1cbe:	8d 87       	std	Y+13, r24	; 0x0d
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	0f 96       	adiw	r24, 0x0f	; 15
    1cc4:	63 ec       	ldi	r22, 0xC3	; 195
    1cc6:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    1cca:	88 23       	and	r24, r24
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <odometry_query_position+0x10e>
    1cce:	86 cf       	rjmp	.-244    	; 0x1bdc <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	0f 96       	adiw	r24, 0x0f	; 15
    1cd4:	61 e0       	ldi	r22, 0x01	; 1
    1cd6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CAN_Read>

	position.state = buffer[0];
    1cda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cdc:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1ce0:	88 89       	ldd	r24, Y+16	; 0x10
    1ce2:	88 2f       	mov	r24, r24
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	38 2f       	mov	r19, r24
    1ce8:	22 27       	eor	r18, r18
    1cea:	89 89       	ldd	r24, Y+17	; 0x11
    1cec:	88 2f       	mov	r24, r24
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	82 2b       	or	r24, r18
    1cf2:	93 2b       	or	r25, r19
    1cf4:	90 93 0b 01 	sts	0x010B, r25
    1cf8:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1cfc:	8a 89       	ldd	r24, Y+18	; 0x12
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	38 2f       	mov	r19, r24
    1d04:	22 27       	eor	r18, r18
    1d06:	8b 89       	ldd	r24, Y+19	; 0x13
    1d08:	88 2f       	mov	r24, r24
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	82 2b       	or	r24, r18
    1d0e:	93 2b       	or	r25, r19
    1d10:	90 93 0d 01 	sts	0x010D, r25
    1d14:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    1d18:	8c 89       	ldd	r24, Y+20	; 0x14
    1d1a:	88 2f       	mov	r24, r24
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	38 2f       	mov	r19, r24
    1d20:	22 27       	eor	r18, r18
    1d22:	8d 89       	ldd	r24, Y+21	; 0x15
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	82 2b       	or	r24, r18
    1d2a:	93 2b       	or	r25, r19
    1d2c:	90 93 0f 01 	sts	0x010F, r25
    1d30:	80 93 0e 01 	sts	0x010E, r24
}
    1d34:	66 96       	adiw	r28, 0x16	; 22
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	08 95       	ret

00001d46 <odometry_wait_until_done>:
 * 	static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
 *
 * 	Callback function, execute function while odometry is moving
 */
static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <odometry_wait_until_done+0x6>
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <odometry_wait_until_done+0x8>
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <odometry_wait_until_done+0xa>
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    1d58:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <system_get_system_time>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	ab 83       	std	Y+3, r26	; 0x03
    1d66:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    1d68:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <odometry_query_position>
		if(callback != NULL)
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	89 2b       	or	r24, r25
    1d72:	71 f0       	breq	.+28     	; 0x1d90 <odometry_wait_until_done+0x4a>
		{
			if(callback(time) == 1)
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	ab 81       	ldd	r26, Y+3	; 0x03
    1d7a:	bc 81       	ldd	r27, Y+4	; 0x04
    1d7c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d7e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	f9 01       	movw	r30, r18
    1d86:	09 95       	icall
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	11 f4       	brne	.+4      	; 0x1d90 <odometry_wait_until_done+0x4a>
				return ODOMETRY_FAIL;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	09 c0       	rjmp	.+18     	; 0x1da2 <odometry_wait_until_done+0x5c>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1d90:	80 91 10 01 	lds	r24, 0x0110
    1d94:	8d 34       	cpi	r24, 0x4D	; 77
    1d96:	41 f3       	breq	.-48     	; 0x1d68 <odometry_wait_until_done+0x22>
    1d98:	80 91 10 01 	lds	r24, 0x0110
    1d9c:	82 35       	cpi	r24, 0x52	; 82
    1d9e:	21 f3       	breq	.-56     	; 0x1d68 <odometry_wait_until_done+0x22>

	return ODOMETRY_SUCCESS;
    1da0:	80 e0       	ldi	r24, 0x00	; 0
}
    1da2:	26 96       	adiw	r28, 0x06	; 6
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	08 95       	ret

00001db4 <odometry_stop>:
 * 	void odometry_stop(int8_t type)
 *
 * 	Send stop to odometry
 */
void odometry_stop(int8_t type)
{
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	67 97       	sbiw	r28, 0x17	; 23
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    1dca:	8f 89       	ldd	r24, Y+23	; 0x17
    1dcc:	8f 87       	std	Y+15, r24	; 0x0f

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1dce:	72 c0       	rjmp	.+228    	; 0x1eb4 <odometry_stop+0x100>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a8 e4       	ldi	r26, 0x48	; 72
    1dd6:	b2 e4       	ldi	r27, 0x42	; 66
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	ab 83       	std	Y+3, r26	; 0x03
    1dde:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e4       	ldi	r19, 0x40	; 64
    1de4:	4c e1       	ldi	r20, 0x1C	; 28
    1de6:	55 e4       	ldi	r21, 0x45	; 69
    1de8:	69 81       	ldd	r22, Y+1	; 0x01
    1dea:	7a 81       	ldd	r23, Y+2	; 0x02
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	af 83       	std	Y+7, r26	; 0x07
    1dfe:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e8       	ldi	r20, 0x80	; 128
    1e06:	5f e3       	ldi	r21, 0x3F	; 63
    1e08:	6d 81       	ldd	r22, Y+5	; 0x05
    1e0a:	7e 81       	ldd	r23, Y+6	; 0x06
    1e0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e0e:	98 85       	ldd	r25, Y+8	; 0x08
    1e10:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
    1e14:	88 23       	and	r24, r24
    1e16:	2c f4       	brge	.+10     	; 0x1e22 <odometry_stop+0x6e>
		__ticks = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9a 87       	std	Y+10, r25	; 0x0a
    1e1e:	89 87       	std	Y+9, r24	; 0x09
    1e20:	3f c0       	rjmp	.+126    	; 0x1ea0 <odometry_stop+0xec>
	else if (__tmp > 65535)
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	3f ef       	ldi	r19, 0xFF	; 255
    1e26:	4f e7       	ldi	r20, 0x7F	; 127
    1e28:	57 e4       	ldi	r21, 0x47	; 71
    1e2a:	6d 81       	ldd	r22, Y+5	; 0x05
    1e2c:	7e 81       	ldd	r23, Y+6	; 0x06
    1e2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e30:	98 85       	ldd	r25, Y+8	; 0x08
    1e32:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
    1e36:	18 16       	cp	r1, r24
    1e38:	4c f5       	brge	.+82     	; 0x1e8c <odometry_stop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e2       	ldi	r20, 0x20	; 32
    1e40:	51 e4       	ldi	r21, 0x41	; 65
    1e42:	69 81       	ldd	r22, Y+1	; 0x01
    1e44:	7a 81       	ldd	r23, Y+2	; 0x02
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4a:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	cd 01       	movw	r24, r26
    1e56:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9a 87       	std	Y+10, r25	; 0x0a
    1e60:	89 87       	std	Y+9, r24	; 0x09
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <odometry_stop+0xce>
    1e64:	8a ef       	ldi	r24, 0xFA	; 250
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9c 87       	std	Y+12, r25	; 0x0c
    1e6a:	8b 87       	std	Y+11, r24	; 0x0b
    1e6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e6e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <odometry_stop+0xbc>
    1e74:	9c 87       	std	Y+12, r25	; 0x0c
    1e76:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e78:	89 85       	ldd	r24, Y+9	; 0x09
    1e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	9a 87       	std	Y+10, r25	; 0x0a
    1e80:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e82:	89 85       	ldd	r24, Y+9	; 0x09
    1e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e86:	89 2b       	or	r24, r25
    1e88:	69 f7       	brne	.-38     	; 0x1e64 <odometry_stop+0xb0>
    1e8a:	14 c0       	rjmp	.+40     	; 0x1eb4 <odometry_stop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e8e:	7e 81       	ldd	r23, Y+6	; 0x06
    1e90:	8f 81       	ldd	r24, Y+7	; 0x07
    1e92:	98 85       	ldd	r25, Y+8	; 0x08
    1e94:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9a 87       	std	Y+10, r25	; 0x0a
    1e9e:	89 87       	std	Y+9, r24	; 0x09
    1ea0:	89 85       	ldd	r24, Y+9	; 0x09
    1ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea4:	9e 87       	std	Y+14, r25	; 0x0e
    1ea6:	8d 87       	std	Y+13, r24	; 0x0d
    1ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <odometry_stop+0xf8>
    1eb0:	9e 87       	std	Y+14, r25	; 0x0e
    1eb2:	8d 87       	std	Y+13, r24	; 0x0d
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	0f 96       	adiw	r24, 0x0f	; 15
    1eb8:	63 ec       	ldi	r22, 0xC3	; 195
    1eba:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    1ebe:	88 23       	and	r24, r24
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <odometry_stop+0x110>
    1ec2:	86 cf       	rjmp	.-244    	; 0x1dd0 <odometry_stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    1ec4:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    1ec8:	80 91 10 01 	lds	r24, 0x0110
    1ecc:	8d 34       	cpi	r24, 0x4D	; 77
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <odometry_stop+0x11e>
    1ed0:	7c cf       	rjmp	.-264    	; 0x1dca <odometry_stop+0x16>
    1ed2:	80 91 10 01 	lds	r24, 0x0110
    1ed6:	82 35       	cpi	r24, 0x52	; 82
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <odometry_stop+0x128>
    1eda:	77 cf       	rjmp	.-274    	; 0x1dca <odometry_stop+0x16>
}
    1edc:	67 96       	adiw	r28, 0x17	; 23
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	08 95       	ret

00001eee <odometry_move_straight>:
 * 	uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move straight command to odometry
 */
uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	6b 97       	sbiw	r28, 0x1b	; 27
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	f8 94       	cli
    1efc:	de bf       	out	0x3e, r29	; 62
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	cd bf       	out	0x3d, r28	; 61
    1f02:	98 8f       	std	Y+24, r25	; 0x18
    1f04:	8f 8b       	std	Y+23, r24	; 0x17
    1f06:	69 8f       	std	Y+25, r22	; 0x19
    1f08:	5b 8f       	std	Y+27, r21	; 0x1b
    1f0a:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1f0c:	89 8d       	ldd	r24, Y+25	; 0x19
    1f0e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <odometry_set_speed>
	buffer[0] = 'D';
    1f12:	84 e4       	ldi	r24, 0x44	; 68
    1f14:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    1f16:	8f 89       	ldd	r24, Y+23	; 0x17
    1f18:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1a:	89 2f       	mov	r24, r25
    1f1c:	99 0f       	add	r25, r25
    1f1e:	99 0b       	sbc	r25, r25
    1f20:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    1f22:	8f 89       	ldd	r24, Y+23	; 0x17
    1f24:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1f26:	72 c0       	rjmp	.+228    	; 0x200c <odometry_move_straight+0x11e>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a8 e4       	ldi	r26, 0x48	; 72
    1f2e:	b2 e4       	ldi	r27, 0x42	; 66
    1f30:	89 83       	std	Y+1, r24	; 0x01
    1f32:	9a 83       	std	Y+2, r25	; 0x02
    1f34:	ab 83       	std	Y+3, r26	; 0x03
    1f36:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e4       	ldi	r19, 0x40	; 64
    1f3c:	4c e1       	ldi	r20, 0x1C	; 28
    1f3e:	55 e4       	ldi	r21, 0x45	; 69
    1f40:	69 81       	ldd	r22, Y+1	; 0x01
    1f42:	7a 81       	ldd	r23, Y+2	; 0x02
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	8d 83       	std	Y+5, r24	; 0x05
    1f52:	9e 83       	std	Y+6, r25	; 0x06
    1f54:	af 83       	std	Y+7, r26	; 0x07
    1f56:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e8       	ldi	r20, 0x80	; 128
    1f5e:	5f e3       	ldi	r21, 0x3F	; 63
    1f60:	6d 81       	ldd	r22, Y+5	; 0x05
    1f62:	7e 81       	ldd	r23, Y+6	; 0x06
    1f64:	8f 81       	ldd	r24, Y+7	; 0x07
    1f66:	98 85       	ldd	r25, Y+8	; 0x08
    1f68:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
    1f6c:	88 23       	and	r24, r24
    1f6e:	2c f4       	brge	.+10     	; 0x1f7a <odometry_move_straight+0x8c>
		__ticks = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	9a 87       	std	Y+10, r25	; 0x0a
    1f76:	89 87       	std	Y+9, r24	; 0x09
    1f78:	3f c0       	rjmp	.+126    	; 0x1ff8 <odometry_move_straight+0x10a>
	else if (__tmp > 65535)
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	3f ef       	ldi	r19, 0xFF	; 255
    1f7e:	4f e7       	ldi	r20, 0x7F	; 127
    1f80:	57 e4       	ldi	r21, 0x47	; 71
    1f82:	6d 81       	ldd	r22, Y+5	; 0x05
    1f84:	7e 81       	ldd	r23, Y+6	; 0x06
    1f86:	8f 81       	ldd	r24, Y+7	; 0x07
    1f88:	98 85       	ldd	r25, Y+8	; 0x08
    1f8a:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	4c f5       	brge	.+82     	; 0x1fe4 <odometry_move_straight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e2       	ldi	r20, 0x20	; 32
    1f98:	51 e4       	ldi	r21, 0x41	; 65
    1f9a:	69 81       	ldd	r22, Y+1	; 0x01
    1f9c:	7a 81       	ldd	r23, Y+2	; 0x02
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9a 87       	std	Y+10, r25	; 0x0a
    1fb8:	89 87       	std	Y+9, r24	; 0x09
    1fba:	0f c0       	rjmp	.+30     	; 0x1fda <odometry_move_straight+0xec>
    1fbc:	8a ef       	ldi	r24, 0xFA	; 250
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9c 87       	std	Y+12, r25	; 0x0c
    1fc2:	8b 87       	std	Y+11, r24	; 0x0b
    1fc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fc6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <odometry_move_straight+0xda>
    1fcc:	9c 87       	std	Y+12, r25	; 0x0c
    1fce:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd0:	89 85       	ldd	r24, Y+9	; 0x09
    1fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	9a 87       	std	Y+10, r25	; 0x0a
    1fd8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	89 2b       	or	r24, r25
    1fe0:	69 f7       	brne	.-38     	; 0x1fbc <odometry_move_straight+0xce>
    1fe2:	14 c0       	rjmp	.+40     	; 0x200c <odometry_move_straight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe4:	6d 81       	ldd	r22, Y+5	; 0x05
    1fe6:	7e 81       	ldd	r23, Y+6	; 0x06
    1fe8:	8f 81       	ldd	r24, Y+7	; 0x07
    1fea:	98 85       	ldd	r25, Y+8	; 0x08
    1fec:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9a 87       	std	Y+10, r25	; 0x0a
    1ff6:	89 87       	std	Y+9, r24	; 0x09
    1ff8:	89 85       	ldd	r24, Y+9	; 0x09
    1ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffc:	9e 87       	std	Y+14, r25	; 0x0e
    1ffe:	8d 87       	std	Y+13, r24	; 0x0d
    2000:	8d 85       	ldd	r24, Y+13	; 0x0d
    2002:	9e 85       	ldd	r25, Y+14	; 0x0e
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <odometry_move_straight+0x116>
    2008:	9e 87       	std	Y+14, r25	; 0x0e
    200a:	8d 87       	std	Y+13, r24	; 0x0d
    200c:	ce 01       	movw	r24, r28
    200e:	0f 96       	adiw	r24, 0x0f	; 15
    2010:	63 ec       	ldi	r22, 0xC3	; 195
    2012:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    2016:	88 23       	and	r24, r24
    2018:	09 f0       	breq	.+2      	; 0x201c <odometry_move_straight+0x12e>
    201a:	86 cf       	rjmp	.-244    	; 0x1f28 <odometry_move_straight+0x3a>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    201c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    201e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2020:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <odometry_wait_until_done>
}
    2024:	6b 96       	adiw	r28, 0x1b	; 27
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	08 95       	ret

00002036 <odometry_move_to_position>:
 * 	uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move to position function to odometry
 */
uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	6c 97       	sbiw	r28, 0x1c	; 28
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	98 8f       	std	Y+24, r25	; 0x18
    204c:	8f 8b       	std	Y+23, r24	; 0x17
    204e:	69 8f       	std	Y+25, r22	; 0x19
    2050:	4a 8f       	std	Y+26, r20	; 0x1a
    2052:	3c 8f       	std	Y+28, r19	; 0x1c
    2054:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    2056:	89 8d       	ldd	r24, Y+25	; 0x19
    2058:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <odometry_set_speed>

	buffer[0] = 'G';
    205c:	87 e4       	ldi	r24, 0x47	; 71
    205e:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    2060:	8f 89       	ldd	r24, Y+23	; 0x17
    2062:	98 8d       	ldd	r25, Y+24	; 0x18
    2064:	fc 01       	movw	r30, r24
    2066:	80 81       	ld	r24, Z
    2068:	91 81       	ldd	r25, Z+1	; 0x01
    206a:	89 2f       	mov	r24, r25
    206c:	99 0f       	add	r25, r25
    206e:	99 0b       	sbc	r25, r25
    2070:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    2072:	8f 89       	ldd	r24, Y+23	; 0x17
    2074:	98 8d       	ldd	r25, Y+24	; 0x18
    2076:	fc 01       	movw	r30, r24
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    207e:	8f 89       	ldd	r24, Y+23	; 0x17
    2080:	98 8d       	ldd	r25, Y+24	; 0x18
    2082:	fc 01       	movw	r30, r24
    2084:	82 81       	ldd	r24, Z+2	; 0x02
    2086:	93 81       	ldd	r25, Z+3	; 0x03
    2088:	89 2f       	mov	r24, r25
    208a:	99 0f       	add	r25, r25
    208c:	99 0b       	sbc	r25, r25
    208e:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    2090:	8f 89       	ldd	r24, Y+23	; 0x17
    2092:	98 8d       	ldd	r25, Y+24	; 0x18
    2094:	fc 01       	movw	r30, r24
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    209c:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    209e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20a0:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    20a2:	72 c0       	rjmp	.+228    	; 0x2188 <odometry_move_to_position+0x152>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a8 e4       	ldi	r26, 0x48	; 72
    20aa:	b2 e4       	ldi	r27, 0x42	; 66
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	9a 83       	std	Y+2, r25	; 0x02
    20b0:	ab 83       	std	Y+3, r26	; 0x03
    20b2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e4       	ldi	r19, 0x40	; 64
    20b8:	4c e1       	ldi	r20, 0x1C	; 28
    20ba:	55 e4       	ldi	r21, 0x45	; 69
    20bc:	69 81       	ldd	r22, Y+1	; 0x01
    20be:	7a 81       	ldd	r23, Y+2	; 0x02
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8d 83       	std	Y+5, r24	; 0x05
    20ce:	9e 83       	std	Y+6, r25	; 0x06
    20d0:	af 83       	std	Y+7, r26	; 0x07
    20d2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e8       	ldi	r20, 0x80	; 128
    20da:	5f e3       	ldi	r21, 0x3F	; 63
    20dc:	6d 81       	ldd	r22, Y+5	; 0x05
    20de:	7e 81       	ldd	r23, Y+6	; 0x06
    20e0:	8f 81       	ldd	r24, Y+7	; 0x07
    20e2:	98 85       	ldd	r25, Y+8	; 0x08
    20e4:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
    20e8:	88 23       	and	r24, r24
    20ea:	2c f4       	brge	.+10     	; 0x20f6 <odometry_move_to_position+0xc0>
		__ticks = 1;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9a 87       	std	Y+10, r25	; 0x0a
    20f2:	89 87       	std	Y+9, r24	; 0x09
    20f4:	3f c0       	rjmp	.+126    	; 0x2174 <odometry_move_to_position+0x13e>
	else if (__tmp > 65535)
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	3f ef       	ldi	r19, 0xFF	; 255
    20fa:	4f e7       	ldi	r20, 0x7F	; 127
    20fc:	57 e4       	ldi	r21, 0x47	; 71
    20fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2100:	7e 81       	ldd	r23, Y+6	; 0x06
    2102:	8f 81       	ldd	r24, Y+7	; 0x07
    2104:	98 85       	ldd	r25, Y+8	; 0x08
    2106:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
    210a:	18 16       	cp	r1, r24
    210c:	4c f5       	brge	.+82     	; 0x2160 <odometry_move_to_position+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e2       	ldi	r20, 0x20	; 32
    2114:	51 e4       	ldi	r21, 0x41	; 65
    2116:	69 81       	ldd	r22, Y+1	; 0x01
    2118:	7a 81       	ldd	r23, Y+2	; 0x02
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	9c 81       	ldd	r25, Y+4	; 0x04
    211e:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9a 87       	std	Y+10, r25	; 0x0a
    2134:	89 87       	std	Y+9, r24	; 0x09
    2136:	0f c0       	rjmp	.+30     	; 0x2156 <odometry_move_to_position+0x120>
    2138:	8a ef       	ldi	r24, 0xFA	; 250
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	9c 87       	std	Y+12, r25	; 0x0c
    213e:	8b 87       	std	Y+11, r24	; 0x0b
    2140:	8b 85       	ldd	r24, Y+11	; 0x0b
    2142:	9c 85       	ldd	r25, Y+12	; 0x0c
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <odometry_move_to_position+0x10e>
    2148:	9c 87       	std	Y+12, r25	; 0x0c
    214a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214c:	89 85       	ldd	r24, Y+9	; 0x09
    214e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	9a 87       	std	Y+10, r25	; 0x0a
    2154:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2156:	89 85       	ldd	r24, Y+9	; 0x09
    2158:	9a 85       	ldd	r25, Y+10	; 0x0a
    215a:	89 2b       	or	r24, r25
    215c:	69 f7       	brne	.-38     	; 0x2138 <odometry_move_to_position+0x102>
    215e:	14 c0       	rjmp	.+40     	; 0x2188 <odometry_move_to_position+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2160:	6d 81       	ldd	r22, Y+5	; 0x05
    2162:	7e 81       	ldd	r23, Y+6	; 0x06
    2164:	8f 81       	ldd	r24, Y+7	; 0x07
    2166:	98 85       	ldd	r25, Y+8	; 0x08
    2168:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9a 87       	std	Y+10, r25	; 0x0a
    2172:	89 87       	std	Y+9, r24	; 0x09
    2174:	89 85       	ldd	r24, Y+9	; 0x09
    2176:	9a 85       	ldd	r25, Y+10	; 0x0a
    2178:	9e 87       	std	Y+14, r25	; 0x0e
    217a:	8d 87       	std	Y+13, r24	; 0x0d
    217c:	8d 85       	ldd	r24, Y+13	; 0x0d
    217e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <odometry_move_to_position+0x14a>
    2184:	9e 87       	std	Y+14, r25	; 0x0e
    2186:	8d 87       	std	Y+13, r24	; 0x0d
    2188:	ce 01       	movw	r24, r28
    218a:	0f 96       	adiw	r24, 0x0f	; 15
    218c:	63 ec       	ldi	r22, 0xC3	; 195
    218e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    2192:	88 23       	and	r24, r24
    2194:	09 f0       	breq	.+2      	; 0x2198 <odometry_move_to_position+0x162>
    2196:	86 cf       	rjmp	.-244    	; 0x20a4 <odometry_move_to_position+0x6e>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219c:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <odometry_wait_until_done>
}
    21a0:	6c 96       	adiw	r28, 0x1c	; 28
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	08 95       	ret

000021b2 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    21b2:	cf 93       	push	r28
    21b4:	df 93       	push	r29
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	68 97       	sbiw	r28, 0x18	; 24
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	98 8f       	std	Y+24, r25	; 0x18
    21c8:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    21ca:	89 e4       	ldi	r24, 0x49	; 73
    21cc:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    21ce:	8f 89       	ldd	r24, Y+23	; 0x17
    21d0:	98 8d       	ldd	r25, Y+24	; 0x18
    21d2:	fc 01       	movw	r30, r24
    21d4:	80 81       	ld	r24, Z
    21d6:	91 81       	ldd	r25, Z+1	; 0x01
    21d8:	89 2f       	mov	r24, r25
    21da:	99 0f       	add	r25, r25
    21dc:	99 0b       	sbc	r25, r25
    21de:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    21e0:	8f 89       	ldd	r24, Y+23	; 0x17
    21e2:	98 8d       	ldd	r25, Y+24	; 0x18
    21e4:	fc 01       	movw	r30, r24
    21e6:	80 81       	ld	r24, Z
    21e8:	91 81       	ldd	r25, Z+1	; 0x01
    21ea:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    21ec:	8f 89       	ldd	r24, Y+23	; 0x17
    21ee:	98 8d       	ldd	r25, Y+24	; 0x18
    21f0:	fc 01       	movw	r30, r24
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	89 2f       	mov	r24, r25
    21f8:	99 0f       	add	r25, r25
    21fa:	99 0b       	sbc	r25, r25
    21fc:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    21fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2200:	98 8d       	ldd	r25, Y+24	; 0x18
    2202:	fc 01       	movw	r30, r24
    2204:	82 81       	ldd	r24, Z+2	; 0x02
    2206:	93 81       	ldd	r25, Z+3	; 0x03
    2208:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    220a:	8f 89       	ldd	r24, Y+23	; 0x17
    220c:	98 8d       	ldd	r25, Y+24	; 0x18
    220e:	fc 01       	movw	r30, r24
    2210:	84 81       	ldd	r24, Z+4	; 0x04
    2212:	95 81       	ldd	r25, Z+5	; 0x05
    2214:	89 2f       	mov	r24, r25
    2216:	99 0f       	add	r25, r25
    2218:	99 0b       	sbc	r25, r25
    221a:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    221c:	8f 89       	ldd	r24, Y+23	; 0x17
    221e:	98 8d       	ldd	r25, Y+24	; 0x18
    2220:	fc 01       	movw	r30, r24
    2222:	84 81       	ldd	r24, Z+4	; 0x04
    2224:	95 81       	ldd	r25, Z+5	; 0x05
    2226:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    2228:	8f 89       	ldd	r24, Y+23	; 0x17
    222a:	98 8d       	ldd	r25, Y+24	; 0x18
    222c:	fc 01       	movw	r30, r24
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	90 93 0b 01 	sts	0x010B, r25
    2236:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    223a:	8f 89       	ldd	r24, Y+23	; 0x17
    223c:	98 8d       	ldd	r25, Y+24	; 0x18
    223e:	fc 01       	movw	r30, r24
    2240:	82 81       	ldd	r24, Z+2	; 0x02
    2242:	93 81       	ldd	r25, Z+3	; 0x03
    2244:	90 93 0d 01 	sts	0x010D, r25
    2248:	80 93 0c 01 	sts	0x010C, r24
	position.angle = new_position->angle;
    224c:	8f 89       	ldd	r24, Y+23	; 0x17
    224e:	98 8d       	ldd	r25, Y+24	; 0x18
    2250:	fc 01       	movw	r30, r24
    2252:	84 81       	ldd	r24, Z+4	; 0x04
    2254:	95 81       	ldd	r25, Z+5	; 0x05
    2256:	90 93 0f 01 	sts	0x010F, r25
    225a:	80 93 0e 01 	sts	0x010E, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    225e:	72 c0       	rjmp	.+228    	; 0x2344 <odometry_set_position+0x192>
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	a8 e4       	ldi	r26, 0x48	; 72
    2266:	b2 e4       	ldi	r27, 0x42	; 66
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	9a 83       	std	Y+2, r25	; 0x02
    226c:	ab 83       	std	Y+3, r26	; 0x03
    226e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e4       	ldi	r19, 0x40	; 64
    2274:	4c e1       	ldi	r20, 0x1C	; 28
    2276:	55 e4       	ldi	r21, 0x45	; 69
    2278:	69 81       	ldd	r22, Y+1	; 0x01
    227a:	7a 81       	ldd	r23, Y+2	; 0x02
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	8d 83       	std	Y+5, r24	; 0x05
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	af 83       	std	Y+7, r26	; 0x07
    228e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e8       	ldi	r20, 0x80	; 128
    2296:	5f e3       	ldi	r21, 0x3F	; 63
    2298:	6d 81       	ldd	r22, Y+5	; 0x05
    229a:	7e 81       	ldd	r23, Y+6	; 0x06
    229c:	8f 81       	ldd	r24, Y+7	; 0x07
    229e:	98 85       	ldd	r25, Y+8	; 0x08
    22a0:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
    22a4:	88 23       	and	r24, r24
    22a6:	2c f4       	brge	.+10     	; 0x22b2 <odometry_set_position+0x100>
		__ticks = 1;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9a 87       	std	Y+10, r25	; 0x0a
    22ae:	89 87       	std	Y+9, r24	; 0x09
    22b0:	3f c0       	rjmp	.+126    	; 0x2330 <odometry_set_position+0x17e>
	else if (__tmp > 65535)
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	3f ef       	ldi	r19, 0xFF	; 255
    22b6:	4f e7       	ldi	r20, 0x7F	; 127
    22b8:	57 e4       	ldi	r21, 0x47	; 71
    22ba:	6d 81       	ldd	r22, Y+5	; 0x05
    22bc:	7e 81       	ldd	r23, Y+6	; 0x06
    22be:	8f 81       	ldd	r24, Y+7	; 0x07
    22c0:	98 85       	ldd	r25, Y+8	; 0x08
    22c2:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
    22c6:	18 16       	cp	r1, r24
    22c8:	4c f5       	brge	.+82     	; 0x231c <odometry_set_position+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e2       	ldi	r20, 0x20	; 32
    22d0:	51 e4       	ldi	r21, 0x41	; 65
    22d2:	69 81       	ldd	r22, Y+1	; 0x01
    22d4:	7a 81       	ldd	r23, Y+2	; 0x02
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	9c 81       	ldd	r25, Y+4	; 0x04
    22da:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9a 87       	std	Y+10, r25	; 0x0a
    22f0:	89 87       	std	Y+9, r24	; 0x09
    22f2:	0f c0       	rjmp	.+30     	; 0x2312 <odometry_set_position+0x160>
    22f4:	8a ef       	ldi	r24, 0xFA	; 250
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9c 87       	std	Y+12, r25	; 0x0c
    22fa:	8b 87       	std	Y+11, r24	; 0x0b
    22fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    22fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <odometry_set_position+0x14e>
    2304:	9c 87       	std	Y+12, r25	; 0x0c
    2306:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2308:	89 85       	ldd	r24, Y+9	; 0x09
    230a:	9a 85       	ldd	r25, Y+10	; 0x0a
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	9a 87       	std	Y+10, r25	; 0x0a
    2310:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2312:	89 85       	ldd	r24, Y+9	; 0x09
    2314:	9a 85       	ldd	r25, Y+10	; 0x0a
    2316:	89 2b       	or	r24, r25
    2318:	69 f7       	brne	.-38     	; 0x22f4 <odometry_set_position+0x142>
    231a:	14 c0       	rjmp	.+40     	; 0x2344 <odometry_set_position+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231c:	6d 81       	ldd	r22, Y+5	; 0x05
    231e:	7e 81       	ldd	r23, Y+6	; 0x06
    2320:	8f 81       	ldd	r24, Y+7	; 0x07
    2322:	98 85       	ldd	r25, Y+8	; 0x08
    2324:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	9a 87       	std	Y+10, r25	; 0x0a
    232e:	89 87       	std	Y+9, r24	; 0x09
    2330:	89 85       	ldd	r24, Y+9	; 0x09
    2332:	9a 85       	ldd	r25, Y+10	; 0x0a
    2334:	9e 87       	std	Y+14, r25	; 0x0e
    2336:	8d 87       	std	Y+13, r24	; 0x0d
    2338:	8d 85       	ldd	r24, Y+13	; 0x0d
    233a:	9e 85       	ldd	r25, Y+14	; 0x0e
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <odometry_set_position+0x18a>
    2340:	9e 87       	std	Y+14, r25	; 0x0e
    2342:	8d 87       	std	Y+13, r24	; 0x0d
    2344:	ce 01       	movw	r24, r28
    2346:	0f 96       	adiw	r24, 0x0f	; 15
    2348:	63 ec       	ldi	r22, 0xC3	; 195
    234a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    234e:	88 23       	and	r24, r24
    2350:	09 f0       	breq	.+2      	; 0x2354 <odometry_set_position+0x1a2>
    2352:	86 cf       	rjmp	.-244    	; 0x2260 <odometry_set_position+0xae>
		_delay_ms(50);
}
    2354:	68 96       	adiw	r28, 0x18	; 24
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	df 91       	pop	r29
    2362:	cf 91       	pop	r28
    2364:	08 95       	ret

00002366 <odometry_rotate_for>:
 * 	uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send rotate for command to odometry board
 */
uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	6b 97       	sbiw	r28, 0x1b	; 27
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	98 8f       	std	Y+24, r25	; 0x18
    237c:	8f 8b       	std	Y+23, r24	; 0x17
    237e:	69 8f       	std	Y+25, r22	; 0x19
    2380:	5b 8f       	std	Y+27, r21	; 0x1b
    2382:	4a 8f       	std	Y+26, r20	; 0x1a

	uint8_t buffer[8];
	odometry_set_speed(speed);
    2384:	89 8d       	ldd	r24, Y+25	; 0x19
    2386:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <odometry_set_speed>

	buffer[0] = 'T';
    238a:	84 e5       	ldi	r24, 0x54	; 84
    238c:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    238e:	8f 89       	ldd	r24, Y+23	; 0x17
    2390:	98 8d       	ldd	r25, Y+24	; 0x18
    2392:	89 2f       	mov	r24, r25
    2394:	99 27       	eor	r25, r25
    2396:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    2398:	8f 89       	ldd	r24, Y+23	; 0x17
    239a:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    239c:	72 c0       	rjmp	.+228    	; 0x2482 <odometry_rotate_for+0x11c>
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	a8 e4       	ldi	r26, 0x48	; 72
    23a4:	b2 e4       	ldi	r27, 0x42	; 66
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	ab 83       	std	Y+3, r26	; 0x03
    23ac:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e4       	ldi	r19, 0x40	; 64
    23b2:	4c e1       	ldi	r20, 0x1C	; 28
    23b4:	55 e4       	ldi	r21, 0x45	; 69
    23b6:	69 81       	ldd	r22, Y+1	; 0x01
    23b8:	7a 81       	ldd	r23, Y+2	; 0x02
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	8d 83       	std	Y+5, r24	; 0x05
    23c8:	9e 83       	std	Y+6, r25	; 0x06
    23ca:	af 83       	std	Y+7, r26	; 0x07
    23cc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e8       	ldi	r20, 0x80	; 128
    23d4:	5f e3       	ldi	r21, 0x3F	; 63
    23d6:	6d 81       	ldd	r22, Y+5	; 0x05
    23d8:	7e 81       	ldd	r23, Y+6	; 0x06
    23da:	8f 81       	ldd	r24, Y+7	; 0x07
    23dc:	98 85       	ldd	r25, Y+8	; 0x08
    23de:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
    23e2:	88 23       	and	r24, r24
    23e4:	2c f4       	brge	.+10     	; 0x23f0 <odometry_rotate_for+0x8a>
		__ticks = 1;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	9a 87       	std	Y+10, r25	; 0x0a
    23ec:	89 87       	std	Y+9, r24	; 0x09
    23ee:	3f c0       	rjmp	.+126    	; 0x246e <odometry_rotate_for+0x108>
	else if (__tmp > 65535)
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	3f ef       	ldi	r19, 0xFF	; 255
    23f4:	4f e7       	ldi	r20, 0x7F	; 127
    23f6:	57 e4       	ldi	r21, 0x47	; 71
    23f8:	6d 81       	ldd	r22, Y+5	; 0x05
    23fa:	7e 81       	ldd	r23, Y+6	; 0x06
    23fc:	8f 81       	ldd	r24, Y+7	; 0x07
    23fe:	98 85       	ldd	r25, Y+8	; 0x08
    2400:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
    2404:	18 16       	cp	r1, r24
    2406:	4c f5       	brge	.+82     	; 0x245a <odometry_rotate_for+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e2       	ldi	r20, 0x20	; 32
    240e:	51 e4       	ldi	r21, 0x41	; 65
    2410:	69 81       	ldd	r22, Y+1	; 0x01
    2412:	7a 81       	ldd	r23, Y+2	; 0x02
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	9a 87       	std	Y+10, r25	; 0x0a
    242e:	89 87       	std	Y+9, r24	; 0x09
    2430:	0f c0       	rjmp	.+30     	; 0x2450 <odometry_rotate_for+0xea>
    2432:	8a ef       	ldi	r24, 0xFA	; 250
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	9c 87       	std	Y+12, r25	; 0x0c
    2438:	8b 87       	std	Y+11, r24	; 0x0b
    243a:	8b 85       	ldd	r24, Y+11	; 0x0b
    243c:	9c 85       	ldd	r25, Y+12	; 0x0c
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <odometry_rotate_for+0xd8>
    2442:	9c 87       	std	Y+12, r25	; 0x0c
    2444:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2446:	89 85       	ldd	r24, Y+9	; 0x09
    2448:	9a 85       	ldd	r25, Y+10	; 0x0a
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	9a 87       	std	Y+10, r25	; 0x0a
    244e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2450:	89 85       	ldd	r24, Y+9	; 0x09
    2452:	9a 85       	ldd	r25, Y+10	; 0x0a
    2454:	89 2b       	or	r24, r25
    2456:	69 f7       	brne	.-38     	; 0x2432 <odometry_rotate_for+0xcc>
    2458:	14 c0       	rjmp	.+40     	; 0x2482 <odometry_rotate_for+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245a:	6d 81       	ldd	r22, Y+5	; 0x05
    245c:	7e 81       	ldd	r23, Y+6	; 0x06
    245e:	8f 81       	ldd	r24, Y+7	; 0x07
    2460:	98 85       	ldd	r25, Y+8	; 0x08
    2462:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9a 87       	std	Y+10, r25	; 0x0a
    246c:	89 87       	std	Y+9, r24	; 0x09
    246e:	89 85       	ldd	r24, Y+9	; 0x09
    2470:	9a 85       	ldd	r25, Y+10	; 0x0a
    2472:	9e 87       	std	Y+14, r25	; 0x0e
    2474:	8d 87       	std	Y+13, r24	; 0x0d
    2476:	8d 85       	ldd	r24, Y+13	; 0x0d
    2478:	9e 85       	ldd	r25, Y+14	; 0x0e
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <odometry_rotate_for+0x114>
    247e:	9e 87       	std	Y+14, r25	; 0x0e
    2480:	8d 87       	std	Y+13, r24	; 0x0d
    2482:	ce 01       	movw	r24, r28
    2484:	0f 96       	adiw	r24, 0x0f	; 15
    2486:	63 ec       	ldi	r22, 0xC3	; 195
    2488:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    248c:	88 23       	and	r24, r24
    248e:	09 f0       	breq	.+2      	; 0x2492 <odometry_rotate_for+0x12c>
    2490:	86 cf       	rjmp	.-244    	; 0x239e <odometry_rotate_for+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2492:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2494:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2496:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <odometry_wait_until_done>

}
    249a:	6b 96       	adiw	r28, 0x1b	; 27
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	f8 94       	cli
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	cd bf       	out	0x3d, r28	; 61
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	08 95       	ret

000024ac <odometry_set_angle>:
 * 	uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Set angle for odometry
 */
uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	6b 97       	sbiw	r28, 0x1b	; 27
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	f8 94       	cli
    24ba:	de bf       	out	0x3e, r29	; 62
    24bc:	0f be       	out	0x3f, r0	; 63
    24be:	cd bf       	out	0x3d, r28	; 61
    24c0:	98 8f       	std	Y+24, r25	; 0x18
    24c2:	8f 8b       	std	Y+23, r24	; 0x17
    24c4:	69 8f       	std	Y+25, r22	; 0x19
    24c6:	5b 8f       	std	Y+27, r21	; 0x1b
    24c8:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    24ca:	89 8d       	ldd	r24, Y+25	; 0x19
    24cc:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <odometry_set_speed>

	buffer[0] = 'A';
    24d0:	81 e4       	ldi	r24, 0x41	; 65
    24d2:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    24d4:	8f 89       	ldd	r24, Y+23	; 0x17
    24d6:	98 8d       	ldd	r25, Y+24	; 0x18
    24d8:	89 2f       	mov	r24, r25
    24da:	99 27       	eor	r25, r25
    24dc:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    24de:	8f 89       	ldd	r24, Y+23	; 0x17
    24e0:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    24e2:	72 c0       	rjmp	.+228    	; 0x25c8 <odometry_set_angle+0x11c>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a8 e4       	ldi	r26, 0x48	; 72
    24ea:	b2 e4       	ldi	r27, 0x42	; 66
    24ec:	89 83       	std	Y+1, r24	; 0x01
    24ee:	9a 83       	std	Y+2, r25	; 0x02
    24f0:	ab 83       	std	Y+3, r26	; 0x03
    24f2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e4       	ldi	r19, 0x40	; 64
    24f8:	4c e1       	ldi	r20, 0x1C	; 28
    24fa:	55 e4       	ldi	r21, 0x45	; 69
    24fc:	69 81       	ldd	r22, Y+1	; 0x01
    24fe:	7a 81       	ldd	r23, Y+2	; 0x02
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	9c 81       	ldd	r25, Y+4	; 0x04
    2504:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	9e 83       	std	Y+6, r25	; 0x06
    2510:	af 83       	std	Y+7, r26	; 0x07
    2512:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e8       	ldi	r20, 0x80	; 128
    251a:	5f e3       	ldi	r21, 0x3F	; 63
    251c:	6d 81       	ldd	r22, Y+5	; 0x05
    251e:	7e 81       	ldd	r23, Y+6	; 0x06
    2520:	8f 81       	ldd	r24, Y+7	; 0x07
    2522:	98 85       	ldd	r25, Y+8	; 0x08
    2524:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
    2528:	88 23       	and	r24, r24
    252a:	2c f4       	brge	.+10     	; 0x2536 <odometry_set_angle+0x8a>
		__ticks = 1;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9a 87       	std	Y+10, r25	; 0x0a
    2532:	89 87       	std	Y+9, r24	; 0x09
    2534:	3f c0       	rjmp	.+126    	; 0x25b4 <odometry_set_angle+0x108>
	else if (__tmp > 65535)
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	3f ef       	ldi	r19, 0xFF	; 255
    253a:	4f e7       	ldi	r20, 0x7F	; 127
    253c:	57 e4       	ldi	r21, 0x47	; 71
    253e:	6d 81       	ldd	r22, Y+5	; 0x05
    2540:	7e 81       	ldd	r23, Y+6	; 0x06
    2542:	8f 81       	ldd	r24, Y+7	; 0x07
    2544:	98 85       	ldd	r25, Y+8	; 0x08
    2546:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
    254a:	18 16       	cp	r1, r24
    254c:	4c f5       	brge	.+82     	; 0x25a0 <odometry_set_angle+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e2       	ldi	r20, 0x20	; 32
    2554:	51 e4       	ldi	r21, 0x41	; 65
    2556:	69 81       	ldd	r22, Y+1	; 0x01
    2558:	7a 81       	ldd	r23, Y+2	; 0x02
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9a 87       	std	Y+10, r25	; 0x0a
    2574:	89 87       	std	Y+9, r24	; 0x09
    2576:	0f c0       	rjmp	.+30     	; 0x2596 <odometry_set_angle+0xea>
    2578:	8a ef       	ldi	r24, 0xFA	; 250
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9c 87       	std	Y+12, r25	; 0x0c
    257e:	8b 87       	std	Y+11, r24	; 0x0b
    2580:	8b 85       	ldd	r24, Y+11	; 0x0b
    2582:	9c 85       	ldd	r25, Y+12	; 0x0c
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <odometry_set_angle+0xd8>
    2588:	9c 87       	std	Y+12, r25	; 0x0c
    258a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258c:	89 85       	ldd	r24, Y+9	; 0x09
    258e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	9a 87       	std	Y+10, r25	; 0x0a
    2594:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2596:	89 85       	ldd	r24, Y+9	; 0x09
    2598:	9a 85       	ldd	r25, Y+10	; 0x0a
    259a:	89 2b       	or	r24, r25
    259c:	69 f7       	brne	.-38     	; 0x2578 <odometry_set_angle+0xcc>
    259e:	14 c0       	rjmp	.+40     	; 0x25c8 <odometry_set_angle+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a0:	6d 81       	ldd	r22, Y+5	; 0x05
    25a2:	7e 81       	ldd	r23, Y+6	; 0x06
    25a4:	8f 81       	ldd	r24, Y+7	; 0x07
    25a6:	98 85       	ldd	r25, Y+8	; 0x08
    25a8:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	9a 87       	std	Y+10, r25	; 0x0a
    25b2:	89 87       	std	Y+9, r24	; 0x09
    25b4:	89 85       	ldd	r24, Y+9	; 0x09
    25b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b8:	9e 87       	std	Y+14, r25	; 0x0e
    25ba:	8d 87       	std	Y+13, r24	; 0x0d
    25bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25be:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <odometry_set_angle+0x114>
    25c4:	9e 87       	std	Y+14, r25	; 0x0e
    25c6:	8d 87       	std	Y+13, r24	; 0x0d
    25c8:	ce 01       	movw	r24, r28
    25ca:	0f 96       	adiw	r24, 0x0f	; 15
    25cc:	63 ec       	ldi	r22, 0xC3	; 195
    25ce:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    25d2:	88 23       	and	r24, r24
    25d4:	09 f0       	breq	.+2      	; 0x25d8 <odometry_set_angle+0x12c>
    25d6:	86 cf       	rjmp	.-244    	; 0x24e4 <odometry_set_angle+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    25d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    25dc:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <odometry_wait_until_done>
}
    25e0:	6b 96       	adiw	r28, 0x1b	; 27
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	f8 94       	cli
    25e6:	de bf       	out	0x3e, r29	; 62
    25e8:	0f be       	out	0x3f, r0	; 63
    25ea:	cd bf       	out	0x3d, r28	; 61
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	08 95       	ret

000025f2 <odometry_kurva>:

uint8_t odometry_kurva(uint16_t x_pos, uint16_t y_pos, int8_t angle, uint8_t direction, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    25f2:	ef 92       	push	r14
    25f4:	ff 92       	push	r15
    25f6:	0f 93       	push	r16
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	6f 97       	sbiw	r28, 0x1f	; 31
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	98 8f       	std	Y+24, r25	; 0x18
    260e:	8f 8b       	std	Y+23, r24	; 0x17
    2610:	7a 8f       	std	Y+26, r23	; 0x1a
    2612:	69 8f       	std	Y+25, r22	; 0x19
    2614:	4b 8f       	std	Y+27, r20	; 0x1b
    2616:	2c 8f       	std	Y+28, r18	; 0x1c
    2618:	0d 8f       	std	Y+29, r16	; 0x1d
    261a:	ff 8e       	std	Y+31, r15	; 0x1f
    261c:	ee 8e       	std	Y+30, r14	; 0x1e
	uint8_t buffer[8];

	odometry_set_speed(speed);
    261e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2620:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <odometry_set_speed>

	buffer[0] = 'Q';
    2624:	81 e5       	ldi	r24, 0x51	; 81
    2626:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = x_pos >> 8;
    2628:	8f 89       	ldd	r24, Y+23	; 0x17
    262a:	98 8d       	ldd	r25, Y+24	; 0x18
    262c:	89 2f       	mov	r24, r25
    262e:	99 27       	eor	r25, r25
    2630:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = x_pos & 0xFF;
    2632:	8f 89       	ldd	r24, Y+23	; 0x17
    2634:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = y_pos >> 8;
    2636:	89 8d       	ldd	r24, Y+25	; 0x19
    2638:	9a 8d       	ldd	r25, Y+26	; 0x1a
    263a:	89 2f       	mov	r24, r25
    263c:	99 27       	eor	r25, r25
    263e:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = y_pos & 0xFF;
    2640:	89 8d       	ldd	r24, Y+25	; 0x19
    2642:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = angle >> 8;
    2644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2646:	08 2e       	mov	r0, r24
    2648:	00 0c       	add	r0, r0
    264a:	99 0b       	sbc	r25, r25
    264c:	89 2f       	mov	r24, r25
    264e:	99 0f       	add	r25, r25
    2650:	99 0b       	sbc	r25, r25
    2652:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = angle & 0xFF;
    2654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2656:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[7] = direction;
    2658:	8c 8d       	ldd	r24, Y+28	; 0x1c
    265a:	8e 8b       	std	Y+22, r24	; 0x16

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    265c:	72 c0       	rjmp	.+228    	; 0x2742 <odometry_kurva+0x150>
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a8 e4       	ldi	r26, 0x48	; 72
    2664:	b2 e4       	ldi	r27, 0x42	; 66
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	ab 83       	std	Y+3, r26	; 0x03
    266c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e4       	ldi	r19, 0x40	; 64
    2672:	4c e1       	ldi	r20, 0x1C	; 28
    2674:	55 e4       	ldi	r21, 0x45	; 69
    2676:	69 81       	ldd	r22, Y+1	; 0x01
    2678:	7a 81       	ldd	r23, Y+2	; 0x02
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	8d 83       	std	Y+5, r24	; 0x05
    2688:	9e 83       	std	Y+6, r25	; 0x06
    268a:	af 83       	std	Y+7, r26	; 0x07
    268c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e8       	ldi	r20, 0x80	; 128
    2694:	5f e3       	ldi	r21, 0x3F	; 63
    2696:	6d 81       	ldd	r22, Y+5	; 0x05
    2698:	7e 81       	ldd	r23, Y+6	; 0x06
    269a:	8f 81       	ldd	r24, Y+7	; 0x07
    269c:	98 85       	ldd	r25, Y+8	; 0x08
    269e:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
    26a2:	88 23       	and	r24, r24
    26a4:	2c f4       	brge	.+10     	; 0x26b0 <odometry_kurva+0xbe>
		__ticks = 1;
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	9a 87       	std	Y+10, r25	; 0x0a
    26ac:	89 87       	std	Y+9, r24	; 0x09
    26ae:	3f c0       	rjmp	.+126    	; 0x272e <odometry_kurva+0x13c>
	else if (__tmp > 65535)
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	3f ef       	ldi	r19, 0xFF	; 255
    26b4:	4f e7       	ldi	r20, 0x7F	; 127
    26b6:	57 e4       	ldi	r21, 0x47	; 71
    26b8:	6d 81       	ldd	r22, Y+5	; 0x05
    26ba:	7e 81       	ldd	r23, Y+6	; 0x06
    26bc:	8f 81       	ldd	r24, Y+7	; 0x07
    26be:	98 85       	ldd	r25, Y+8	; 0x08
    26c0:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
    26c4:	18 16       	cp	r1, r24
    26c6:	4c f5       	brge	.+82     	; 0x271a <odometry_kurva+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e2       	ldi	r20, 0x20	; 32
    26ce:	51 e4       	ldi	r21, 0x41	; 65
    26d0:	69 81       	ldd	r22, Y+1	; 0x01
    26d2:	7a 81       	ldd	r23, Y+2	; 0x02
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	9c 81       	ldd	r25, Y+4	; 0x04
    26d8:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	bc 01       	movw	r22, r24
    26e2:	cd 01       	movw	r24, r26
    26e4:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	9a 87       	std	Y+10, r25	; 0x0a
    26ee:	89 87       	std	Y+9, r24	; 0x09
    26f0:	0f c0       	rjmp	.+30     	; 0x2710 <odometry_kurva+0x11e>
    26f2:	8a ef       	ldi	r24, 0xFA	; 250
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	9c 87       	std	Y+12, r25	; 0x0c
    26f8:	8b 87       	std	Y+11, r24	; 0x0b
    26fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    26fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <odometry_kurva+0x10c>
    2702:	9c 87       	std	Y+12, r25	; 0x0c
    2704:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	9a 87       	std	Y+10, r25	; 0x0a
    270e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2710:	89 85       	ldd	r24, Y+9	; 0x09
    2712:	9a 85       	ldd	r25, Y+10	; 0x0a
    2714:	89 2b       	or	r24, r25
    2716:	69 f7       	brne	.-38     	; 0x26f2 <odometry_kurva+0x100>
    2718:	14 c0       	rjmp	.+40     	; 0x2742 <odometry_kurva+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271a:	6d 81       	ldd	r22, Y+5	; 0x05
    271c:	7e 81       	ldd	r23, Y+6	; 0x06
    271e:	8f 81       	ldd	r24, Y+7	; 0x07
    2720:	98 85       	ldd	r25, Y+8	; 0x08
    2722:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	9a 87       	std	Y+10, r25	; 0x0a
    272c:	89 87       	std	Y+9, r24	; 0x09
    272e:	89 85       	ldd	r24, Y+9	; 0x09
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	9e 87       	std	Y+14, r25	; 0x0e
    2734:	8d 87       	std	Y+13, r24	; 0x0d
    2736:	8d 85       	ldd	r24, Y+13	; 0x0d
    2738:	9e 85       	ldd	r25, Y+14	; 0x0e
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	f1 f7       	brne	.-4      	; 0x273a <odometry_kurva+0x148>
    273e:	9e 87       	std	Y+14, r25	; 0x0e
    2740:	8d 87       	std	Y+13, r24	; 0x0d
    2742:	ce 01       	movw	r24, r28
    2744:	0f 96       	adiw	r24, 0x0f	; 15
    2746:	63 ec       	ldi	r22, 0xC3	; 195
    2748:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    274c:	88 23       	and	r24, r24
    274e:	09 f0       	breq	.+2      	; 0x2752 <odometry_kurva+0x160>
    2750:	86 cf       	rjmp	.-244    	; 0x265e <odometry_kurva+0x6c>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2752:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2754:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2756:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <odometry_wait_until_done>
}
    275a:	6f 96       	adiw	r28, 0x1f	; 31
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	df 91       	pop	r29
    2768:	cf 91       	pop	r28
    276a:	0f 91       	pop	r16
    276c:	ff 90       	pop	r15
    276e:	ef 90       	pop	r14
    2770:	08 95       	ret

00002772 <odometry_match_end>:

void odometry_match_end(void)
{
    2772:	cf 93       	push	r28
    2774:	df 93       	push	r29
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	66 97       	sbiw	r28, 0x16	; 22
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];

	buffer[0] = 'K';
    2786:	8b e4       	ldi	r24, 0x4B	; 75
    2788:	8f 87       	std	Y+15, r24	; 0x0f

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    278a:	72 c0       	rjmp	.+228    	; 0x2870 <odometry_match_end+0xfe>
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	a8 e4       	ldi	r26, 0x48	; 72
    2792:	b2 e4       	ldi	r27, 0x42	; 66
    2794:	89 83       	std	Y+1, r24	; 0x01
    2796:	9a 83       	std	Y+2, r25	; 0x02
    2798:	ab 83       	std	Y+3, r26	; 0x03
    279a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e4       	ldi	r19, 0x40	; 64
    27a0:	4c e1       	ldi	r20, 0x1C	; 28
    27a2:	55 e4       	ldi	r21, 0x45	; 69
    27a4:	69 81       	ldd	r22, Y+1	; 0x01
    27a6:	7a 81       	ldd	r23, Y+2	; 0x02
    27a8:	8b 81       	ldd	r24, Y+3	; 0x03
    27aa:	9c 81       	ldd	r25, Y+4	; 0x04
    27ac:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	8d 83       	std	Y+5, r24	; 0x05
    27b6:	9e 83       	std	Y+6, r25	; 0x06
    27b8:	af 83       	std	Y+7, r26	; 0x07
    27ba:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e8       	ldi	r20, 0x80	; 128
    27c2:	5f e3       	ldi	r21, 0x3F	; 63
    27c4:	6d 81       	ldd	r22, Y+5	; 0x05
    27c6:	7e 81       	ldd	r23, Y+6	; 0x06
    27c8:	8f 81       	ldd	r24, Y+7	; 0x07
    27ca:	98 85       	ldd	r25, Y+8	; 0x08
    27cc:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
    27d0:	88 23       	and	r24, r24
    27d2:	2c f4       	brge	.+10     	; 0x27de <odometry_match_end+0x6c>
		__ticks = 1;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	9a 87       	std	Y+10, r25	; 0x0a
    27da:	89 87       	std	Y+9, r24	; 0x09
    27dc:	3f c0       	rjmp	.+126    	; 0x285c <odometry_match_end+0xea>
	else if (__tmp > 65535)
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	3f ef       	ldi	r19, 0xFF	; 255
    27e2:	4f e7       	ldi	r20, 0x7F	; 127
    27e4:	57 e4       	ldi	r21, 0x47	; 71
    27e6:	6d 81       	ldd	r22, Y+5	; 0x05
    27e8:	7e 81       	ldd	r23, Y+6	; 0x06
    27ea:	8f 81       	ldd	r24, Y+7	; 0x07
    27ec:	98 85       	ldd	r25, Y+8	; 0x08
    27ee:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
    27f2:	18 16       	cp	r1, r24
    27f4:	4c f5       	brge	.+82     	; 0x2848 <odometry_match_end+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e2       	ldi	r20, 0x20	; 32
    27fc:	51 e4       	ldi	r21, 0x41	; 65
    27fe:	69 81       	ldd	r22, Y+1	; 0x01
    2800:	7a 81       	ldd	r23, Y+2	; 0x02
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	bc 01       	movw	r22, r24
    2810:	cd 01       	movw	r24, r26
    2812:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	9a 87       	std	Y+10, r25	; 0x0a
    281c:	89 87       	std	Y+9, r24	; 0x09
    281e:	0f c0       	rjmp	.+30     	; 0x283e <odometry_match_end+0xcc>
    2820:	8a ef       	ldi	r24, 0xFA	; 250
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	9c 87       	std	Y+12, r25	; 0x0c
    2826:	8b 87       	std	Y+11, r24	; 0x0b
    2828:	8b 85       	ldd	r24, Y+11	; 0x0b
    282a:	9c 85       	ldd	r25, Y+12	; 0x0c
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <odometry_match_end+0xba>
    2830:	9c 87       	std	Y+12, r25	; 0x0c
    2832:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2834:	89 85       	ldd	r24, Y+9	; 0x09
    2836:	9a 85       	ldd	r25, Y+10	; 0x0a
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	9a 87       	std	Y+10, r25	; 0x0a
    283c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283e:	89 85       	ldd	r24, Y+9	; 0x09
    2840:	9a 85       	ldd	r25, Y+10	; 0x0a
    2842:	89 2b       	or	r24, r25
    2844:	69 f7       	brne	.-38     	; 0x2820 <odometry_match_end+0xae>
    2846:	14 c0       	rjmp	.+40     	; 0x2870 <odometry_match_end+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2848:	6d 81       	ldd	r22, Y+5	; 0x05
    284a:	7e 81       	ldd	r23, Y+6	; 0x06
    284c:	8f 81       	ldd	r24, Y+7	; 0x07
    284e:	98 85       	ldd	r25, Y+8	; 0x08
    2850:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	9a 87       	std	Y+10, r25	; 0x0a
    285a:	89 87       	std	Y+9, r24	; 0x09
    285c:	89 85       	ldd	r24, Y+9	; 0x09
    285e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2860:	9e 87       	std	Y+14, r25	; 0x0e
    2862:	8d 87       	std	Y+13, r24	; 0x0d
    2864:	8d 85       	ldd	r24, Y+13	; 0x0d
    2866:	9e 85       	ldd	r25, Y+14	; 0x0e
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	f1 f7       	brne	.-4      	; 0x2868 <odometry_match_end+0xf6>
    286c:	9e 87       	std	Y+14, r25	; 0x0e
    286e:	8d 87       	std	Y+13, r24	; 0x0d
    2870:	ce 01       	movw	r24, r28
    2872:	0f 96       	adiw	r24, 0x0f	; 15
    2874:	63 ec       	ldi	r22, 0xC3	; 195
    2876:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    287a:	88 23       	and	r24, r24
    287c:	09 f0       	breq	.+2      	; 0x2880 <odometry_match_end+0x10e>
    287e:	86 cf       	rjmp	.-244    	; 0x278c <odometry_match_end+0x1a>
			_delay_ms(50);

}
    2880:	66 96       	adiw	r28, 0x16	; 22
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	08 95       	ret

00002892 <getState>:

/*
 * 	Update position
 */
uint8_t getState(void)
{
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    289a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <odometry_query_position>
	return position.state;
    289e:	80 91 10 01 	lds	r24, 0x0110
}
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	08 95       	ret

000028a8 <odometry_get_x>:

int16_t odometry_get_x(void)
{
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    28b0:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <odometry_query_position>
	return position.x;
    28b4:	80 91 0a 01 	lds	r24, 0x010A
    28b8:	90 91 0b 01 	lds	r25, 0x010B
}
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	08 95       	ret

000028c2 <odometry_get_y>:

int16_t odometry_get_y(void)
{
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    28ca:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <odometry_query_position>
	return position.y;
    28ce:	80 91 0c 01 	lds	r24, 0x010C
    28d2:	90 91 0d 01 	lds	r25, 0x010D
}
    28d6:	df 91       	pop	r29
    28d8:	cf 91       	pop	r28
    28da:	08 95       	ret

000028dc <odometry_get_angle>:

int16_t odometry_get_angle(void)
{
    28dc:	cf 93       	push	r28
    28de:	df 93       	push	r29
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    28e4:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <odometry_query_position>
	return position.angle;
    28e8:	80 91 0e 01 	lds	r24, 0x010E
    28ec:	90 91 0f 01 	lds	r25, 0x010F
}
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	08 95       	ret

000028f6 <timer_register_callback>:
 *	Function: 		void timer_register_callback(void (*callback)(void))
 *	Parameters: 	void (*callback)(void))
 *	Description: 	timer callbacks
 */
void timer_register_callback(void (*callback)(void))
{
    28f6:	cf 93       	push	r28
    28f8:	df 93       	push	r29
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <timer_register_callback+0x6>
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	9a 83       	std	Y+2, r25	; 0x02
    2902:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	9a 81       	ldd	r25, Y+2	; 0x02
    2908:	90 93 5b 01 	sts	0x015B, r25
    290c:	80 93 5a 01 	sts	0x015A, r24
}
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	df 91       	pop	r29
    2916:	cf 91       	pop	r28
    2918:	08 95       	ret

0000291a <timer_init>:
 *	Function: 		void timer_init(unsigned int freq)
 *	Parameters: 	unsigned int freq - frequency of timer
 *	Description: 	setup timer
 */
void timer_init(unsigned int freq)
{
    291a:	0f 93       	push	r16
    291c:	1f 93       	push	r17
    291e:	cf 93       	push	r28
    2920:	df 93       	push	r29
    2922:	00 d0       	rcall	.+0      	; 0x2924 <timer_init+0xa>
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	9a 83       	std	Y+2, r25	; 0x02
    292a:	89 83       	std	Y+1, r24	; 0x01

    TCCR1A = 0;
    292c:	80 e8       	ldi	r24, 0x80	; 128
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	fc 01       	movw	r30, r24
    2932:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    2934:	81 e8       	ldi	r24, 0x81	; 129
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	29 e0       	ldi	r18, 0x09	; 9
    293a:	fc 01       	movw	r30, r24
    293c:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    293e:	08 e8       	ldi	r16, 0x88	; 136
    2940:	10 e0       	ldi	r17, 0x00	; 0
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	9a 81       	ldd	r25, Y+2	; 0x02
    2946:	cc 01       	movw	r24, r24
    2948:	a0 e0       	ldi	r26, 0x00	; 0
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	bc 01       	movw	r22, r24
    294e:	cd 01       	movw	r24, r26
    2950:	0e 94 3c 1c 	call	0x3878	; 0x3878 <__floatunsisf>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	9c 01       	movw	r18, r24
    295a:	ad 01       	movw	r20, r26
    295c:	60 e8       	ldi	r22, 0x80	; 128
    295e:	76 e9       	ldi	r23, 0x96	; 150
    2960:	88 e1       	ldi	r24, 0x18	; 24
    2962:	9b e4       	ldi	r25, 0x4B	; 75
    2964:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__divsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e0       	ldi	r20, 0x00	; 0
    2972:	5f e3       	ldi	r21, 0x3F	; 63
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__addsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	f8 01       	movw	r30, r16
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2992:	8f e6       	ldi	r24, 0x6F	; 111
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	22 e0       	ldi	r18, 0x02	; 2
    2998:	fc 01       	movw	r30, r24
    299a:	20 83       	st	Z, r18

	SREG |= 0x80;
    299c:	8f e5       	ldi	r24, 0x5F	; 95
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	2f e5       	ldi	r18, 0x5F	; 95
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	f9 01       	movw	r30, r18
    29a6:	20 81       	ld	r18, Z
    29a8:	20 68       	ori	r18, 0x80	; 128
    29aa:	fc 01       	movw	r30, r24
    29ac:	20 83       	st	Z, r18
}
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	df 91       	pop	r29
    29b4:	cf 91       	pop	r28
    29b6:	1f 91       	pop	r17
    29b8:	0f 91       	pop	r16
    29ba:	08 95       	ret

000029bc <__vector_12>:
/*
 *	Function: 		ISR(TIMER1_COMPA_vect)
 *	Description: 	ISR interrupt for timer
 */
ISR(TIMER1_COMPA_vect)
{
    29bc:	1f 92       	push	r1
    29be:	0f 92       	push	r0
    29c0:	00 90 5f 00 	lds	r0, 0x005F
    29c4:	0f 92       	push	r0
    29c6:	11 24       	eor	r1, r1
    29c8:	00 90 5b 00 	lds	r0, 0x005B
    29cc:	0f 92       	push	r0
    29ce:	2f 93       	push	r18
    29d0:	3f 93       	push	r19
    29d2:	4f 93       	push	r20
    29d4:	5f 93       	push	r21
    29d6:	6f 93       	push	r22
    29d8:	7f 93       	push	r23
    29da:	8f 93       	push	r24
    29dc:	9f 93       	push	r25
    29de:	af 93       	push	r26
    29e0:	bf 93       	push	r27
    29e2:	ef 93       	push	r30
    29e4:	ff 93       	push	r31
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    29ee:	80 91 5a 01 	lds	r24, 0x015A
    29f2:	90 91 5b 01 	lds	r25, 0x015B
    29f6:	89 2b       	or	r24, r25
    29f8:	31 f0       	breq	.+12     	; 0x2a06 <__vector_12+0x4a>
        timer_callback();
    29fa:	80 91 5a 01 	lds	r24, 0x015A
    29fe:	90 91 5b 01 	lds	r25, 0x015B
    2a02:	fc 01       	movw	r30, r24
    2a04:	09 95       	icall
	if(sys_time >= 90000)					// if match end
    2a06:	80 91 55 01 	lds	r24, 0x0155
    2a0a:	90 91 56 01 	lds	r25, 0x0156
    2a0e:	a0 91 57 01 	lds	r26, 0x0157
    2a12:	b0 91 58 01 	lds	r27, 0x0158
    2a16:	80 39       	cpi	r24, 0x90	; 144
    2a18:	9f 45       	sbci	r25, 0x5F	; 95
    2a1a:	a1 40       	sbci	r26, 0x01	; 1
    2a1c:	b1 05       	cpc	r27, r1
    2a1e:	28 f0       	brcs	.+10     	; 0x2a2a <__vector_12+0x6e>
	{
		if(system_get_match_started())		// if the match has started before
    2a20:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <system_get_match_started>
    2a24:	88 23       	and	r24, r24
    2a26:	09 f0       	breq	.+2      	; 0x2a2a <__vector_12+0x6e>
		{
			//odometry_match_end();
			while(1);
    2a28:	ff cf       	rjmp	.-2      	; 0x2a28 <__vector_12+0x6c>
		}
	}
	sys_time++;
    2a2a:	80 91 55 01 	lds	r24, 0x0155
    2a2e:	90 91 56 01 	lds	r25, 0x0156
    2a32:	a0 91 57 01 	lds	r26, 0x0157
    2a36:	b0 91 58 01 	lds	r27, 0x0158
    2a3a:	01 96       	adiw	r24, 0x01	; 1
    2a3c:	a1 1d       	adc	r26, r1
    2a3e:	b1 1d       	adc	r27, r1
    2a40:	80 93 55 01 	sts	0x0155, r24
    2a44:	90 93 56 01 	sts	0x0156, r25
    2a48:	a0 93 57 01 	sts	0x0157, r26
    2a4c:	b0 93 58 01 	sts	0x0158, r27
}
    2a50:	df 91       	pop	r29
    2a52:	cf 91       	pop	r28
    2a54:	ff 91       	pop	r31
    2a56:	ef 91       	pop	r30
    2a58:	bf 91       	pop	r27
    2a5a:	af 91       	pop	r26
    2a5c:	9f 91       	pop	r25
    2a5e:	8f 91       	pop	r24
    2a60:	7f 91       	pop	r23
    2a62:	6f 91       	pop	r22
    2a64:	5f 91       	pop	r21
    2a66:	4f 91       	pop	r20
    2a68:	3f 91       	pop	r19
    2a6a:	2f 91       	pop	r18
    2a6c:	0f 90       	pop	r0
    2a6e:	00 92 5b 00 	sts	0x005B, r0
    2a72:	0f 90       	pop	r0
    2a74:	00 92 5f 00 	sts	0x005F, r0
    2a78:	0f 90       	pop	r0
    2a7a:	1f 90       	pop	r1
    2a7c:	18 95       	reti

00002a7e <system_reset_system_time>:

void system_reset_system_time(void) 	{ 	sys_time = 0; 			}
    2a7e:	cf 93       	push	r28
    2a80:	df 93       	push	r29
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	10 92 55 01 	sts	0x0155, r1
    2a8a:	10 92 56 01 	sts	0x0156, r1
    2a8e:	10 92 57 01 	sts	0x0157, r1
    2a92:	10 92 58 01 	sts	0x0158, r1
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
    2a9a:	08 95       	ret

00002a9c <system_set_match_started>:
void system_set_match_started(void) 	{ 	match_started = 1; 		}
    2a9c:	cf 93       	push	r28
    2a9e:	df 93       	push	r29
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	80 93 59 01 	sts	0x0159, r24
    2aaa:	df 91       	pop	r29
    2aac:	cf 91       	pop	r28
    2aae:	08 95       	ret

00002ab0 <system_get_system_time>:
uint32_t system_get_system_time(void) 	{ 	return sys_time; 		}
    2ab0:	cf 93       	push	r28
    2ab2:	df 93       	push	r29
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	80 91 55 01 	lds	r24, 0x0155
    2abc:	90 91 56 01 	lds	r25, 0x0156
    2ac0:	a0 91 57 01 	lds	r26, 0x0157
    2ac4:	b0 91 58 01 	lds	r27, 0x0158
    2ac8:	bc 01       	movw	r22, r24
    2aca:	cd 01       	movw	r24, r26
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	08 95       	ret

00002ad2 <system_get_match_started>:
uint8_t system_get_match_started(void) 	{ 	return match_started; 	}
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	80 91 59 01 	lds	r24, 0x0159
    2ade:	df 91       	pop	r29
    2ae0:	cf 91       	pop	r28
    2ae2:	08 95       	ret

00002ae4 <system_init>:
 *	Function: 		void system_init(void)
 *	Parameters: 	void
 *	Description:	initing all the things
 */
void system_init(void)
{
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	2e 97       	sbiw	r28, 0x0e	; 14
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
	// sets debouncer
	timer_register_callback(gpio_debouncer);
    2af8:	82 ef       	ldi	r24, 0xF2	; 242
    2afa:	9c e0       	ldi	r25, 0x0C	; 12
    2afc:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <timer_register_callback>
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	a8 ec       	ldi	r26, 0xC8	; 200
    2b06:	b2 e4       	ldi	r27, 0x42	; 66
    2b08:	89 83       	std	Y+1, r24	; 0x01
    2b0a:	9a 83       	std	Y+2, r25	; 0x02
    2b0c:	ab 83       	std	Y+3, r26	; 0x03
    2b0e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e4       	ldi	r19, 0x40	; 64
    2b14:	4c e1       	ldi	r20, 0x1C	; 28
    2b16:	55 e4       	ldi	r21, 0x45	; 69
    2b18:	69 81       	ldd	r22, Y+1	; 0x01
    2b1a:	7a 81       	ldd	r23, Y+2	; 0x02
    2b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b20:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	8d 83       	std	Y+5, r24	; 0x05
    2b2a:	9e 83       	std	Y+6, r25	; 0x06
    2b2c:	af 83       	std	Y+7, r26	; 0x07
    2b2e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e8       	ldi	r20, 0x80	; 128
    2b36:	5f e3       	ldi	r21, 0x3F	; 63
    2b38:	6d 81       	ldd	r22, Y+5	; 0x05
    2b3a:	7e 81       	ldd	r23, Y+6	; 0x06
    2b3c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b3e:	98 85       	ldd	r25, Y+8	; 0x08
    2b40:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
    2b44:	88 23       	and	r24, r24
    2b46:	2c f4       	brge	.+10     	; 0x2b52 <system_init+0x6e>
		__ticks = 1;
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	9a 87       	std	Y+10, r25	; 0x0a
    2b4e:	89 87       	std	Y+9, r24	; 0x09
    2b50:	3f c0       	rjmp	.+126    	; 0x2bd0 <system_init+0xec>
	else if (__tmp > 65535)
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	3f ef       	ldi	r19, 0xFF	; 255
    2b56:	4f e7       	ldi	r20, 0x7F	; 127
    2b58:	57 e4       	ldi	r21, 0x47	; 71
    2b5a:	6d 81       	ldd	r22, Y+5	; 0x05
    2b5c:	7e 81       	ldd	r23, Y+6	; 0x06
    2b5e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b60:	98 85       	ldd	r25, Y+8	; 0x08
    2b62:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
    2b66:	18 16       	cp	r1, r24
    2b68:	4c f5       	brge	.+82     	; 0x2bbc <system_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e2       	ldi	r20, 0x20	; 32
    2b70:	51 e4       	ldi	r21, 0x41	; 65
    2b72:	69 81       	ldd	r22, Y+1	; 0x01
    2b74:	7a 81       	ldd	r23, Y+2	; 0x02
    2b76:	8b 81       	ldd	r24, Y+3	; 0x03
    2b78:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7a:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	9a 87       	std	Y+10, r25	; 0x0a
    2b90:	89 87       	std	Y+9, r24	; 0x09
    2b92:	0f c0       	rjmp	.+30     	; 0x2bb2 <system_init+0xce>
    2b94:	8a ef       	ldi	r24, 0xFA	; 250
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	9c 87       	std	Y+12, r25	; 0x0c
    2b9a:	8b 87       	std	Y+11, r24	; 0x0b
    2b9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <system_init+0xbc>
    2ba4:	9c 87       	std	Y+12, r25	; 0x0c
    2ba6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba8:	89 85       	ldd	r24, Y+9	; 0x09
    2baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	9a 87       	std	Y+10, r25	; 0x0a
    2bb0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb2:	89 85       	ldd	r24, Y+9	; 0x09
    2bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb6:	89 2b       	or	r24, r25
    2bb8:	69 f7       	brne	.-38     	; 0x2b94 <system_init+0xb0>
    2bba:	14 c0       	rjmp	.+40     	; 0x2be4 <system_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbc:	6d 81       	ldd	r22, Y+5	; 0x05
    2bbe:	7e 81       	ldd	r23, Y+6	; 0x06
    2bc0:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc2:	98 85       	ldd	r25, Y+8	; 0x08
    2bc4:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	9a 87       	std	Y+10, r25	; 0x0a
    2bce:	89 87       	std	Y+9, r24	; 0x09
    2bd0:	89 85       	ldd	r24, Y+9	; 0x09
    2bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd4:	9e 87       	std	Y+14, r25	; 0x0e
    2bd6:	8d 87       	std	Y+13, r24	; 0x0d
    2bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <system_init+0xf8>
    2be0:	9e 87       	std	Y+14, r25	; 0x0e
    2be2:	8d 87       	std	Y+13, r24	; 0x0d

	// small delay
	_delay_ms(100);

	CAN_Init(1);
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	0e 94 12 09 	call	0x1224	; 0x1224 <CAN_Init>


	system_reset_system_time();															// reset system time
    2bea:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <system_reset_system_time>
	system_set_match_started();															// match has started!
    2bee:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <system_set_match_started>

}
    2bf2:	2e 96       	adiw	r28, 0x0e	; 14
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	df 91       	pop	r29
    2c00:	cf 91       	pop	r28
    2c02:	08 95       	ret

00002c04 <UART0_Init>:
* Parameters        : unsigned int baud
					  char isrOnOff
* Return Value      : void
*********************************************************************************/
void UART0_Init(unsigned long baud, char isrOnOff)
{
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    2c0c:	27 97       	sbiw	r28, 0x07	; 7
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	f8 94       	cli
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	cd bf       	out	0x3d, r28	; 61
    2c18:	6b 83       	std	Y+3, r22	; 0x03
    2c1a:	7c 83       	std	Y+4, r23	; 0x04
    2c1c:	8d 83       	std	Y+5, r24	; 0x05
    2c1e:	9e 83       	std	Y+6, r25	; 0x06
    2c20:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR0A = 0;
    2c22:	80 ec       	ldi	r24, 0xC0	; 192
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	fc 01       	movw	r30, r24
    2c28:	10 82       	st	Z, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    2c2a:	81 ec       	ldi	r24, 0xC1	; 193
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	28 e1       	ldi	r18, 0x18	; 24
    2c30:	fc 01       	movw	r30, r24
    2c32:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    2c34:	82 ec       	ldi	r24, 0xC2	; 194
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	26 e0       	ldi	r18, 0x06	; 6
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    2c3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2c40:	81 30       	cpi	r24, 0x01	; 1
    2c42:	91 f4       	brne	.+36     	; 0x2c68 <UART0_Init+0x64>
	{
		UCSR0B |= ((1 << RXCIE0) | (1 << TXCIE0));
    2c44:	81 ec       	ldi	r24, 0xC1	; 193
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	21 ec       	ldi	r18, 0xC1	; 193
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	f9 01       	movw	r30, r18
    2c4e:	20 81       	ld	r18, Z
    2c50:	20 6c       	ori	r18, 0xC0	; 192
    2c52:	fc 01       	movw	r30, r24
    2c54:	20 83       	st	Z, r18
		SREG |= 0x80;
    2c56:	8f e5       	ldi	r24, 0x5F	; 95
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	2f e5       	ldi	r18, 0x5F	; 95
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	f9 01       	movw	r30, r18
    2c60:	20 81       	ld	r18, Z
    2c62:	20 68       	ori	r18, 0x80	; 128
    2c64:	fc 01       	movw	r30, r24
    2c66:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    2c68:	6b 81       	ldd	r22, Y+3	; 0x03
    2c6a:	7c 81       	ldd	r23, Y+4	; 0x04
    2c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c70:	0e 94 3c 1c 	call	0x3878	; 0x3878 <__floatunsisf>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e8       	ldi	r20, 0x80	; 128
    2c7e:	51 e4       	ldi	r21, 0x41	; 65
    2c80:	bc 01       	movw	r22, r24
    2c82:	cd 01       	movw	r24, r26
    2c84:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	9c 01       	movw	r18, r24
    2c8e:	ad 01       	movw	r20, r26
    2c90:	60 e8       	ldi	r22, 0x80	; 128
    2c92:	76 e9       	ldi	r23, 0x96	; 150
    2c94:	88 e1       	ldi	r24, 0x18	; 24
    2c96:	9b e4       	ldi	r25, 0x4B	; 75
    2c98:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__divsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e8       	ldi	r20, 0x80	; 128
    2ca6:	5f e3       	ldi	r21, 0x3F	; 63
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 29 1b 	call	0x3652	; 0x3652 <__subsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e0       	ldi	r20, 0x00	; 0
    2cba:	5f e3       	ldi	r21, 0x3F	; 63
    2cbc:	bc 01       	movw	r22, r24
    2cbe:	cd 01       	movw	r24, r26
    2cc0:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__addsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	bc 01       	movw	r22, r24
    2cca:	cd 01       	movw	r24, r26
    2ccc:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	9a 83       	std	Y+2, r25	; 0x02
    2cd6:	89 83       	std	Y+1, r24	; 0x01

	UBRR0H = temp >> 8;
    2cd8:	85 ec       	ldi	r24, 0xC5	; 197
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	29 81       	ldd	r18, Y+1	; 0x01
    2cde:	3a 81       	ldd	r19, Y+2	; 0x02
    2ce0:	23 2f       	mov	r18, r19
    2ce2:	33 27       	eor	r19, r19
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	20 83       	st	Z, r18
	UBRR0L = temp;
    2ce8:	84 ec       	ldi	r24, 0xC4	; 196
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	29 81       	ldd	r18, Y+1	; 0x01
    2cee:	fc 01       	movw	r30, r24
    2cf0:	20 83       	st	Z, r18
}
    2cf2:	27 96       	adiw	r28, 0x07	; 7
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	08 95       	ret

00002d04 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    2d04:	1f 92       	push	r1
    2d06:	0f 92       	push	r0
    2d08:	00 90 5f 00 	lds	r0, 0x005F
    2d0c:	0f 92       	push	r0
    2d0e:	11 24       	eor	r1, r1
    2d10:	00 90 5b 00 	lds	r0, 0x005B
    2d14:	0f 92       	push	r0
    2d16:	2f 93       	push	r18
    2d18:	3f 93       	push	r19
    2d1a:	8f 93       	push	r24
    2d1c:	9f 93       	push	r25
    2d1e:	ef 93       	push	r30
    2d20:	ff 93       	push	r31
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    2d2a:	80 91 9f 01 	lds	r24, 0x019F
    2d2e:	88 23       	and	r24, r24
    2d30:	d1 f0       	breq	.+52     	; 0x2d66 <__vector_23+0x62>
	{
		tx0_counter--;
    2d32:	80 91 9f 01 	lds	r24, 0x019F
    2d36:	81 50       	subi	r24, 0x01	; 1
    2d38:	80 93 9f 01 	sts	0x019F, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    2d3c:	86 ec       	ldi	r24, 0xC6	; 198
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	20 91 a0 01 	lds	r18, 0x01A0
    2d44:	22 2f       	mov	r18, r18
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	22 5a       	subi	r18, 0xA2	; 162
    2d4a:	3e 4f       	sbci	r19, 0xFE	; 254
    2d4c:	f9 01       	movw	r30, r18
    2d4e:	20 81       	ld	r18, Z
    2d50:	fc 01       	movw	r30, r24
    2d52:	20 83       	st	Z, r18
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    2d54:	80 91 a0 01 	lds	r24, 0x01A0
    2d58:	8f 5f       	subi	r24, 0xFF	; 255
    2d5a:	80 93 a0 01 	sts	0x01A0, r24
    2d5e:	80 34       	cpi	r24, 0x40	; 64
    2d60:	11 f4       	brne	.+4      	; 0x2d66 <__vector_23+0x62>
			tx0_rd_index = 0;
    2d62:	10 92 a0 01 	sts	0x01A0, r1
	}
}
    2d66:	df 91       	pop	r29
    2d68:	cf 91       	pop	r28
    2d6a:	ff 91       	pop	r31
    2d6c:	ef 91       	pop	r30
    2d6e:	9f 91       	pop	r25
    2d70:	8f 91       	pop	r24
    2d72:	3f 91       	pop	r19
    2d74:	2f 91       	pop	r18
    2d76:	0f 90       	pop	r0
    2d78:	00 92 5b 00 	sts	0x005B, r0
    2d7c:	0f 90       	pop	r0
    2d7e:	00 92 5f 00 	sts	0x005F, r0
    2d82:	0f 90       	pop	r0
    2d84:	1f 90       	pop	r1
    2d86:	18 95       	reti

00002d88 <UART0_Write>:
/****************************************************************************************************************************************
Slanje podataka USART0 modulom
****************************************************************************************************************************************/

void UART0_Write(unsigned char data)
{
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	1f 92       	push	r1
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    2d92:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR0B >> TXCIE0) & 0x01)
    2d94:	81 ec       	ldi	r24, 0xC1	; 193
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	fc 01       	movw	r30, r24
    2d9a:	80 81       	ld	r24, Z
    2d9c:	82 95       	swap	r24
    2d9e:	86 95       	lsr	r24
    2da0:	86 95       	lsr	r24
    2da2:	83 70       	andi	r24, 0x03	; 3
    2da4:	88 2f       	mov	r24, r24
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	81 70       	andi	r24, 0x01	; 1
    2daa:	99 27       	eor	r25, r25
    2dac:	89 2b       	or	r24, r25
    2dae:	99 f1       	breq	.+102    	; 0x2e16 <UART0_Write+0x8e>
	{
		while(tx0_counter == TX0_BUFFER_SIZE);
    2db0:	00 00       	nop
    2db2:	80 91 9f 01 	lds	r24, 0x019F
    2db6:	80 34       	cpi	r24, 0x40	; 64
    2db8:	e1 f3       	breq	.-8      	; 0x2db2 <UART0_Write+0x2a>

		cli();
    2dba:	f8 94       	cli

		if(tx0_counter || (UCSR0A & 0x20) == 0)
    2dbc:	80 91 9f 01 	lds	r24, 0x019F
    2dc0:	88 23       	and	r24, r24
    2dc2:	51 f4       	brne	.+20     	; 0x2dd8 <UART0_Write+0x50>
    2dc4:	80 ec       	ldi	r24, 0xC0	; 192
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	fc 01       	movw	r30, r24
    2dca:	80 81       	ld	r24, Z
    2dcc:	88 2f       	mov	r24, r24
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	80 72       	andi	r24, 0x20	; 32
    2dd2:	99 27       	eor	r25, r25
    2dd4:	89 2b       	or	r24, r25
    2dd6:	c1 f4       	brne	.+48     	; 0x2e08 <UART0_Write+0x80>
		{
			tx0_buffer[tx0_wr_index] = data;
    2dd8:	80 91 9e 01 	lds	r24, 0x019E
    2ddc:	88 2f       	mov	r24, r24
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	82 5a       	subi	r24, 0xA2	; 162
    2de2:	9e 4f       	sbci	r25, 0xFE	; 254
    2de4:	29 81       	ldd	r18, Y+1	; 0x01
    2de6:	fc 01       	movw	r30, r24
    2de8:	20 83       	st	Z, r18
			if(++tx0_wr_index == TX0_BUFFER_SIZE)
    2dea:	80 91 9e 01 	lds	r24, 0x019E
    2dee:	8f 5f       	subi	r24, 0xFF	; 255
    2df0:	80 93 9e 01 	sts	0x019E, r24
    2df4:	80 34       	cpi	r24, 0x40	; 64
    2df6:	11 f4       	brne	.+4      	; 0x2dfc <UART0_Write+0x74>
				tx0_wr_index = 0;
    2df8:	10 92 9e 01 	sts	0x019E, r1

			tx0_counter++;
    2dfc:	80 91 9f 01 	lds	r24, 0x019F
    2e00:	8f 5f       	subi	r24, 0xFF	; 255
    2e02:	80 93 9f 01 	sts	0x019F, r24
    2e06:	05 c0       	rjmp	.+10     	; 0x2e12 <UART0_Write+0x8a>
		}
		else
			UDR0 = data;
    2e08:	86 ec       	ldi	r24, 0xC6	; 198
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	29 81       	ldd	r18, Y+1	; 0x01
    2e0e:	fc 01       	movw	r30, r24
    2e10:	20 83       	st	Z, r18

		sei();
    2e12:	78 94       	sei
    2e14:	03 c0       	rjmp	.+6      	; 0x2e1c <UART0_Write+0x94>
	}
	else
		altUart0Write(data);
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	0e 94 b3 18 	call	0x3166	; 0x3166 <altUart0Write>
}
    2e1c:	0f 90       	pop	r0
    2e1e:	df 91       	pop	r29
    2e20:	cf 91       	pop	r28
    2e22:	08 95       	ret

00002e24 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    2e24:	1f 92       	push	r1
    2e26:	0f 92       	push	r0
    2e28:	00 90 5f 00 	lds	r0, 0x005F
    2e2c:	0f 92       	push	r0
    2e2e:	11 24       	eor	r1, r1
    2e30:	00 90 5b 00 	lds	r0, 0x005B
    2e34:	0f 92       	push	r0
    2e36:	2f 93       	push	r18
    2e38:	3f 93       	push	r19
    2e3a:	8f 93       	push	r24
    2e3c:	9f 93       	push	r25
    2e3e:	ef 93       	push	r30
    2e40:	ff 93       	push	r31
    2e42:	cf 93       	push	r28
    2e44:	df 93       	push	r29
    2e46:	1f 92       	push	r1
    2e48:	cd b7       	in	r28, 0x3d	; 61
    2e4a:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    2e4c:	80 ec       	ldi	r24, 0xC0	; 192
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	fc 01       	movw	r30, r24
    2e52:	80 81       	ld	r24, Z
    2e54:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	88 2f       	mov	r24, r24
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	8c 71       	andi	r24, 0x1C	; 28
    2e5e:	99 27       	eor	r25, r25
    2e60:	89 2b       	or	r24, r25
    2e62:	d1 f4       	brne	.+52     	; 0x2e98 <__vector_21+0x74>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    2e64:	80 91 e1 01 	lds	r24, 0x01E1
    2e68:	88 2f       	mov	r24, r24
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	26 ec       	ldi	r18, 0xC6	; 198
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	f9 01       	movw	r30, r18
    2e72:	20 81       	ld	r18, Z
    2e74:	8f 55       	subi	r24, 0x5F	; 95
    2e76:	9e 4f       	sbci	r25, 0xFE	; 254
    2e78:	fc 01       	movw	r30, r24
    2e7a:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    2e7c:	80 91 e1 01 	lds	r24, 0x01E1
    2e80:	8f 5f       	subi	r24, 0xFF	; 255
    2e82:	80 93 e1 01 	sts	0x01E1, r24
    2e86:	80 34       	cpi	r24, 0x40	; 64
    2e88:	11 f4       	brne	.+4      	; 0x2e8e <__vector_21+0x6a>
			rx0_wr_index = 0;
    2e8a:	10 92 e1 01 	sts	0x01E1, r1

		rx0_counter++;
    2e8e:	80 91 e2 01 	lds	r24, 0x01E2
    2e92:	8f 5f       	subi	r24, 0xFF	; 255
    2e94:	80 93 e2 01 	sts	0x01E2, r24
	}
}
    2e98:	0f 90       	pop	r0
    2e9a:	df 91       	pop	r29
    2e9c:	cf 91       	pop	r28
    2e9e:	ff 91       	pop	r31
    2ea0:	ef 91       	pop	r30
    2ea2:	9f 91       	pop	r25
    2ea4:	8f 91       	pop	r24
    2ea6:	3f 91       	pop	r19
    2ea8:	2f 91       	pop	r18
    2eaa:	0f 90       	pop	r0
    2eac:	00 92 5b 00 	sts	0x005B, r0
    2eb0:	0f 90       	pop	r0
    2eb2:	00 92 5f 00 	sts	0x005F, r0
    2eb6:	0f 90       	pop	r0
    2eb8:	1f 90       	pop	r1
    2eba:	18 95       	reti

00002ebc <UART0_Read>:
/****************************************************************************************************************************************
Primanje podataka USART0 modulom
****************************************************************************************************************************************/

unsigned char UART0_Read(void)
{
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	1f 92       	push	r1
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR0B >> RXCIE0) & 0x01)
    2ec6:	81 ec       	ldi	r24, 0xC1	; 193
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	fc 01       	movw	r30, r24
    2ecc:	80 81       	ld	r24, Z
    2ece:	88 1f       	adc	r24, r24
    2ed0:	88 27       	eor	r24, r24
    2ed2:	88 1f       	adc	r24, r24
    2ed4:	88 2f       	mov	r24, r24
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	81 70       	andi	r24, 0x01	; 1
    2eda:	99 27       	eor	r25, r25
    2edc:	89 2b       	or	r24, r25
    2ede:	e9 f0       	breq	.+58     	; 0x2f1a <UART0_Read+0x5e>
	{
		while(rx0_counter == 0);
    2ee0:	00 00       	nop
    2ee2:	80 91 e2 01 	lds	r24, 0x01E2
    2ee6:	88 23       	and	r24, r24
    2ee8:	e1 f3       	breq	.-8      	; 0x2ee2 <UART0_Read+0x26>

		data = rx0_buffer[rx0_rd_index];
    2eea:	80 91 e3 01 	lds	r24, 0x01E3
    2eee:	88 2f       	mov	r24, r24
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	8f 55       	subi	r24, 0x5F	; 95
    2ef4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	80 81       	ld	r24, Z
    2efa:	89 83       	std	Y+1, r24	; 0x01

		if(++rx0_rd_index == RX0_BUFFER_SIZE)
    2efc:	80 91 e3 01 	lds	r24, 0x01E3
    2f00:	8f 5f       	subi	r24, 0xFF	; 255
    2f02:	80 93 e3 01 	sts	0x01E3, r24
    2f06:	80 34       	cpi	r24, 0x40	; 64
    2f08:	11 f4       	brne	.+4      	; 0x2f0e <UART0_Read+0x52>
			rx0_rd_index = 0;
    2f0a:	10 92 e3 01 	sts	0x01E3, r1

		rx0_counter--;
    2f0e:	80 91 e2 01 	lds	r24, 0x01E2
    2f12:	81 50       	subi	r24, 0x01	; 1
    2f14:	80 93 e2 01 	sts	0x01E2, r24
    2f18:	13 c0       	rjmp	.+38     	; 0x2f40 <UART0_Read+0x84>
	}
	else
	{
		while( !((UCSR0A >> RXC0) & 0x01));
    2f1a:	00 00       	nop
    2f1c:	80 ec       	ldi	r24, 0xC0	; 192
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	fc 01       	movw	r30, r24
    2f22:	80 81       	ld	r24, Z
    2f24:	88 1f       	adc	r24, r24
    2f26:	88 27       	eor	r24, r24
    2f28:	88 1f       	adc	r24, r24
    2f2a:	88 2f       	mov	r24, r24
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	81 70       	andi	r24, 0x01	; 1
    2f30:	99 27       	eor	r25, r25
    2f32:	89 2b       	or	r24, r25
    2f34:	99 f3       	breq	.-26     	; 0x2f1c <UART0_Read+0x60>
		data = UDR0;
    2f36:	86 ec       	ldi	r24, 0xC6	; 198
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	80 81       	ld	r24, Z
    2f3e:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f42:	0f 90       	pop	r0
    2f44:	df 91       	pop	r29
    2f46:	cf 91       	pop	r28
    2f48:	08 95       	ret

00002f4a <UART1_Init>:
-bez paritet
-9600baud
-asynchron
****************************************************************************************************************************************/
void UART1_Init(unsigned long baud, char isrOnOff)
{
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	cd b7       	in	r28, 0x3d	; 61
    2f50:	de b7       	in	r29, 0x3e	; 62
    2f52:	27 97       	sbiw	r28, 0x07	; 7
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	de bf       	out	0x3e, r29	; 62
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	cd bf       	out	0x3d, r28	; 61
    2f5e:	6b 83       	std	Y+3, r22	; 0x03
    2f60:	7c 83       	std	Y+4, r23	; 0x04
    2f62:	8d 83       	std	Y+5, r24	; 0x05
    2f64:	9e 83       	std	Y+6, r25	; 0x06
    2f66:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
    2f68:	88 ec       	ldi	r24, 0xC8	; 200
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
    2f70:	89 ec       	ldi	r24, 0xC9	; 201
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	28 e1       	ldi	r18, 0x18	; 24
    2f76:	fc 01       	movw	r30, r24
    2f78:	20 83       	st	Z, r18

	// comment or uncomment define in usart.h
	#ifdef ARDUINO_COMMUNICATION
		UCSR1C = (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1); // sa 2 stop bit
    2f7a:	8a ec       	ldi	r24, 0xCA	; 202
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	2e e0       	ldi	r18, 0x0E	; 14
    2f80:	fc 01       	movw	r30, r24
    2f82:	20 83       	st	Z, r18
	#else
		//UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); sa 1stop bit
	#endif


	if(isrOnOff == UART_ISR_ON)
    2f84:	8f 81       	ldd	r24, Y+7	; 0x07
    2f86:	81 30       	cpi	r24, 0x01	; 1
    2f88:	91 f4       	brne	.+36     	; 0x2fae <UART1_Init+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
    2f8a:	89 ec       	ldi	r24, 0xC9	; 201
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	29 ec       	ldi	r18, 0xC9	; 201
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	f9 01       	movw	r30, r18
    2f94:	20 81       	ld	r18, Z
    2f96:	20 6c       	ori	r18, 0xC0	; 192
    2f98:	fc 01       	movw	r30, r24
    2f9a:	20 83       	st	Z, r18
		SREG |= 0x80;
    2f9c:	8f e5       	ldi	r24, 0x5F	; 95
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	2f e5       	ldi	r18, 0x5F	; 95
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	f9 01       	movw	r30, r18
    2fa6:	20 81       	ld	r18, Z
    2fa8:	20 68       	ori	r18, 0x80	; 128
    2faa:	fc 01       	movw	r30, r24
    2fac:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    2fae:	6b 81       	ldd	r22, Y+3	; 0x03
    2fb0:	7c 81       	ldd	r23, Y+4	; 0x04
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	0e 94 3c 1c 	call	0x3878	; 0x3878 <__floatunsisf>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e8       	ldi	r20, 0x80	; 128
    2fc4:	51 e4       	ldi	r21, 0x41	; 65
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	9c 01       	movw	r18, r24
    2fd4:	ad 01       	movw	r20, r26
    2fd6:	60 e8       	ldi	r22, 0x80	; 128
    2fd8:	76 e9       	ldi	r23, 0x96	; 150
    2fda:	88 e1       	ldi	r24, 0x18	; 24
    2fdc:	9b e4       	ldi	r25, 0x4B	; 75
    2fde:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__divsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	40 e8       	ldi	r20, 0x80	; 128
    2fec:	5f e3       	ldi	r21, 0x3F	; 63
    2fee:	bc 01       	movw	r22, r24
    2ff0:	cd 01       	movw	r24, r26
    2ff2:	0e 94 29 1b 	call	0x3652	; 0x3652 <__subsf3>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e0       	ldi	r20, 0x00	; 0
    3000:	5f e3       	ldi	r21, 0x3F	; 63
    3002:	bc 01       	movw	r22, r24
    3004:	cd 01       	movw	r24, r26
    3006:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__addsf3>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	bc 01       	movw	r22, r24
    3010:	cd 01       	movw	r24, r26
    3012:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	9a 83       	std	Y+2, r25	; 0x02
    301c:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
    301e:	8d ec       	ldi	r24, 0xCD	; 205
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	29 81       	ldd	r18, Y+1	; 0x01
    3024:	3a 81       	ldd	r19, Y+2	; 0x02
    3026:	23 2f       	mov	r18, r19
    3028:	33 27       	eor	r19, r19
    302a:	fc 01       	movw	r30, r24
    302c:	20 83       	st	Z, r18
	UBRR1L = temp;
    302e:	8c ec       	ldi	r24, 0xCC	; 204
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	29 81       	ldd	r18, Y+1	; 0x01
    3034:	fc 01       	movw	r30, r24
    3036:	20 83       	st	Z, r18
}
    3038:	27 96       	adiw	r28, 0x07	; 7
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	df 91       	pop	r29
    3046:	cf 91       	pop	r28
    3048:	08 95       	ret

0000304a <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    304a:	1f 92       	push	r1
    304c:	0f 92       	push	r0
    304e:	00 90 5f 00 	lds	r0, 0x005F
    3052:	0f 92       	push	r0
    3054:	11 24       	eor	r1, r1
    3056:	00 90 5b 00 	lds	r0, 0x005B
    305a:	0f 92       	push	r0
    305c:	2f 93       	push	r18
    305e:	3f 93       	push	r19
    3060:	8f 93       	push	r24
    3062:	9f 93       	push	r25
    3064:	ef 93       	push	r30
    3066:	ff 93       	push	r31
    3068:	cf 93       	push	r28
    306a:	df 93       	push	r29
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    3070:	80 91 25 02 	lds	r24, 0x0225
    3074:	88 23       	and	r24, r24
    3076:	d1 f0       	breq	.+52     	; 0x30ac <__vector_34+0x62>
	{
		tx1_counter--;
    3078:	80 91 25 02 	lds	r24, 0x0225
    307c:	81 50       	subi	r24, 0x01	; 1
    307e:	80 93 25 02 	sts	0x0225, r24
		UDR1=tx1_buffer[tx1_rd_index];
    3082:	8e ec       	ldi	r24, 0xCE	; 206
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	20 91 26 02 	lds	r18, 0x0226
    308a:	22 2f       	mov	r18, r18
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	2c 51       	subi	r18, 0x1C	; 28
    3090:	3e 4f       	sbci	r19, 0xFE	; 254
    3092:	f9 01       	movw	r30, r18
    3094:	20 81       	ld	r18, Z
    3096:	fc 01       	movw	r30, r24
    3098:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    309a:	80 91 26 02 	lds	r24, 0x0226
    309e:	8f 5f       	subi	r24, 0xFF	; 255
    30a0:	80 93 26 02 	sts	0x0226, r24
    30a4:	80 34       	cpi	r24, 0x40	; 64
    30a6:	11 f4       	brne	.+4      	; 0x30ac <__vector_34+0x62>
			tx1_rd_index = 0;
    30a8:	10 92 26 02 	sts	0x0226, r1
	}
}
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	ff 91       	pop	r31
    30b2:	ef 91       	pop	r30
    30b4:	9f 91       	pop	r25
    30b6:	8f 91       	pop	r24
    30b8:	3f 91       	pop	r19
    30ba:	2f 91       	pop	r18
    30bc:	0f 90       	pop	r0
    30be:	00 92 5b 00 	sts	0x005B, r0
    30c2:	0f 90       	pop	r0
    30c4:	00 92 5f 00 	sts	0x005F, r0
    30c8:	0f 90       	pop	r0
    30ca:	1f 90       	pop	r1
    30cc:	18 95       	reti

000030ce <__vector_32>:

ISR(USART1_RX_vect)
{
    30ce:	1f 92       	push	r1
    30d0:	0f 92       	push	r0
    30d2:	00 90 5f 00 	lds	r0, 0x005F
    30d6:	0f 92       	push	r0
    30d8:	11 24       	eor	r1, r1
    30da:	00 90 5b 00 	lds	r0, 0x005B
    30de:	0f 92       	push	r0
    30e0:	2f 93       	push	r18
    30e2:	3f 93       	push	r19
    30e4:	8f 93       	push	r24
    30e6:	9f 93       	push	r25
    30e8:	ef 93       	push	r30
    30ea:	ff 93       	push	r31
    30ec:	cf 93       	push	r28
    30ee:	df 93       	push	r29
    30f0:	1f 92       	push	r1
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    30f6:	88 ec       	ldi	r24, 0xC8	; 200
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	fc 01       	movw	r30, r24
    30fc:	80 81       	ld	r24, Z
    30fe:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	88 2f       	mov	r24, r24
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	8c 71       	andi	r24, 0x1C	; 28
    3108:	99 27       	eor	r25, r25
    310a:	89 2b       	or	r24, r25
    310c:	d1 f4       	brne	.+52     	; 0x3142 <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    310e:	80 91 67 02 	lds	r24, 0x0267
    3112:	88 2f       	mov	r24, r24
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	2e ec       	ldi	r18, 0xCE	; 206
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	f9 01       	movw	r30, r18
    311c:	20 81       	ld	r18, Z
    311e:	89 5d       	subi	r24, 0xD9	; 217
    3120:	9d 4f       	sbci	r25, 0xFD	; 253
    3122:	fc 01       	movw	r30, r24
    3124:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    3126:	80 91 67 02 	lds	r24, 0x0267
    312a:	8f 5f       	subi	r24, 0xFF	; 255
    312c:	80 93 67 02 	sts	0x0267, r24
    3130:	80 34       	cpi	r24, 0x40	; 64
    3132:	11 f4       	brne	.+4      	; 0x3138 <__vector_32+0x6a>
		rx1_wr_index = 0;
    3134:	10 92 67 02 	sts	0x0267, r1

		rx1_counter++;
    3138:	80 91 68 02 	lds	r24, 0x0268
    313c:	8f 5f       	subi	r24, 0xFF	; 255
    313e:	80 93 68 02 	sts	0x0268, r24
	}
}
    3142:	0f 90       	pop	r0
    3144:	df 91       	pop	r29
    3146:	cf 91       	pop	r28
    3148:	ff 91       	pop	r31
    314a:	ef 91       	pop	r30
    314c:	9f 91       	pop	r25
    314e:	8f 91       	pop	r24
    3150:	3f 91       	pop	r19
    3152:	2f 91       	pop	r18
    3154:	0f 90       	pop	r0
    3156:	00 92 5b 00 	sts	0x005B, r0
    315a:	0f 90       	pop	r0
    315c:	00 92 5f 00 	sts	0x005F, r0
    3160:	0f 90       	pop	r0
    3162:	1f 90       	pop	r1
    3164:	18 95       	reti

00003166 <altUart0Write>:

void altUart0Write(unsigned char data)
{
    3166:	cf 93       	push	r28
    3168:	df 93       	push	r29
    316a:	1f 92       	push	r1
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
    3170:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
    3172:	00 00       	nop
    3174:	80 ec       	ldi	r24, 0xC0	; 192
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	fc 01       	movw	r30, r24
    317a:	80 81       	ld	r24, Z
    317c:	88 2f       	mov	r24, r24
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	80 72       	andi	r24, 0x20	; 32
    3182:	99 27       	eor	r25, r25
    3184:	89 2b       	or	r24, r25
    3186:	b1 f3       	breq	.-20     	; 0x3174 <altUart0Write+0xe>

	UDR0 = data;
    3188:	86 ec       	ldi	r24, 0xC6	; 198
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	29 81       	ldd	r18, Y+1	; 0x01
    318e:	fc 01       	movw	r30, r24
    3190:	20 83       	st	Z, r18
}
    3192:	0f 90       	pop	r0
    3194:	df 91       	pop	r29
    3196:	cf 91       	pop	r28
    3198:	08 95       	ret

0000319a <altUart1Write>:

void altUart1Write(unsigned char data)
{
    319a:	cf 93       	push	r28
    319c:	df 93       	push	r29
    319e:	1f 92       	push	r1
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
    31a6:	00 00       	nop
    31a8:	88 ec       	ldi	r24, 0xC8	; 200
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	fc 01       	movw	r30, r24
    31ae:	80 81       	ld	r24, Z
    31b0:	88 2f       	mov	r24, r24
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	80 72       	andi	r24, 0x20	; 32
    31b6:	99 27       	eor	r25, r25
    31b8:	89 2b       	or	r24, r25
    31ba:	b1 f3       	breq	.-20     	; 0x31a8 <altUart1Write+0xe>
	UDR1 = data;
    31bc:	8e ec       	ldi	r24, 0xCE	; 206
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	29 81       	ldd	r18, Y+1	; 0x01
    31c2:	fc 01       	movw	r30, r24
    31c4:	20 83       	st	Z, r18
}
    31c6:	0f 90       	pop	r0
    31c8:	df 91       	pop	r29
    31ca:	cf 91       	pop	r28
    31cc:	08 95       	ret

000031ce <UART1_Write>:
Slanje podataka USART1 modulom
**
**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
    31ce:	cf 93       	push	r28
    31d0:	df 93       	push	r29
    31d2:	1f 92       	push	r1
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
    31da:	89 ec       	ldi	r24, 0xC9	; 201
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	fc 01       	movw	r30, r24
    31e0:	80 81       	ld	r24, Z
    31e2:	82 95       	swap	r24
    31e4:	86 95       	lsr	r24
    31e6:	86 95       	lsr	r24
    31e8:	83 70       	andi	r24, 0x03	; 3
    31ea:	88 2f       	mov	r24, r24
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	81 70       	andi	r24, 0x01	; 1
    31f0:	99 27       	eor	r25, r25
    31f2:	89 2b       	or	r24, r25
    31f4:	99 f1       	breq	.+102    	; 0x325c <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
    31f6:	00 00       	nop
    31f8:	80 91 25 02 	lds	r24, 0x0225
    31fc:	80 34       	cpi	r24, 0x40	; 64
    31fe:	e1 f3       	breq	.-8      	; 0x31f8 <UART1_Write+0x2a>

		cli();
    3200:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
    3202:	80 91 25 02 	lds	r24, 0x0225
    3206:	88 23       	and	r24, r24
    3208:	51 f4       	brne	.+20     	; 0x321e <UART1_Write+0x50>
    320a:	88 ec       	ldi	r24, 0xC8	; 200
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	fc 01       	movw	r30, r24
    3210:	80 81       	ld	r24, Z
    3212:	88 2f       	mov	r24, r24
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	80 72       	andi	r24, 0x20	; 32
    3218:	99 27       	eor	r25, r25
    321a:	89 2b       	or	r24, r25
    321c:	c1 f4       	brne	.+48     	; 0x324e <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
    321e:	80 91 24 02 	lds	r24, 0x0224
    3222:	88 2f       	mov	r24, r24
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	8c 51       	subi	r24, 0x1C	; 28
    3228:	9e 4f       	sbci	r25, 0xFE	; 254
    322a:	29 81       	ldd	r18, Y+1	; 0x01
    322c:	fc 01       	movw	r30, r24
    322e:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
    3230:	80 91 24 02 	lds	r24, 0x0224
    3234:	8f 5f       	subi	r24, 0xFF	; 255
    3236:	80 93 24 02 	sts	0x0224, r24
    323a:	80 34       	cpi	r24, 0x40	; 64
    323c:	11 f4       	brne	.+4      	; 0x3242 <UART1_Write+0x74>
				tx1_wr_index = 0;
    323e:	10 92 24 02 	sts	0x0224, r1

			tx1_counter++;
    3242:	80 91 25 02 	lds	r24, 0x0225
    3246:	8f 5f       	subi	r24, 0xFF	; 255
    3248:	80 93 25 02 	sts	0x0225, r24
    324c:	05 c0       	rjmp	.+10     	; 0x3258 <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
    324e:	8e ec       	ldi	r24, 0xCE	; 206
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	29 81       	ldd	r18, Y+1	; 0x01
    3254:	fc 01       	movw	r30, r24
    3256:	20 83       	st	Z, r18

		sei();
    3258:	78 94       	sei
    325a:	03 c0       	rjmp	.+6      	; 0x3262 <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	0e 94 cd 18 	call	0x319a	; 0x319a <altUart1Write>
}
    3262:	0f 90       	pop	r0
    3264:	df 91       	pop	r29
    3266:	cf 91       	pop	r28
    3268:	08 95       	ret

0000326a <UART1_Read>:

unsigned char UART1_Read(void)
{
    326a:	cf 93       	push	r28
    326c:	df 93       	push	r29
    326e:	1f 92       	push	r1
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
    3274:	89 ec       	ldi	r24, 0xC9	; 201
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	fc 01       	movw	r30, r24
    327a:	80 81       	ld	r24, Z
    327c:	88 1f       	adc	r24, r24
    327e:	88 27       	eor	r24, r24
    3280:	88 1f       	adc	r24, r24
    3282:	88 2f       	mov	r24, r24
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	81 70       	andi	r24, 0x01	; 1
    3288:	99 27       	eor	r25, r25
    328a:	89 2b       	or	r24, r25
    328c:	e9 f0       	breq	.+58     	; 0x32c8 <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
    328e:	00 00       	nop
    3290:	80 91 68 02 	lds	r24, 0x0268
    3294:	88 23       	and	r24, r24
    3296:	e1 f3       	breq	.-8      	; 0x3290 <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
    3298:	80 91 69 02 	lds	r24, 0x0269
    329c:	88 2f       	mov	r24, r24
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	89 5d       	subi	r24, 0xD9	; 217
    32a2:	9d 4f       	sbci	r25, 0xFD	; 253
    32a4:	fc 01       	movw	r30, r24
    32a6:	80 81       	ld	r24, Z
    32a8:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
    32aa:	80 91 69 02 	lds	r24, 0x0269
    32ae:	8f 5f       	subi	r24, 0xFF	; 255
    32b0:	80 93 69 02 	sts	0x0269, r24
    32b4:	80 34       	cpi	r24, 0x40	; 64
    32b6:	11 f4       	brne	.+4      	; 0x32bc <UART1_Read+0x52>
			rx1_rd_index = 0;
    32b8:	10 92 69 02 	sts	0x0269, r1

		rx1_counter--;
    32bc:	80 91 68 02 	lds	r24, 0x0268
    32c0:	81 50       	subi	r24, 0x01	; 1
    32c2:	80 93 68 02 	sts	0x0268, r24
    32c6:	13 c0       	rjmp	.+38     	; 0x32ee <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
    32c8:	00 00       	nop
    32ca:	88 ec       	ldi	r24, 0xC8	; 200
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	fc 01       	movw	r30, r24
    32d0:	80 81       	ld	r24, Z
    32d2:	88 1f       	adc	r24, r24
    32d4:	88 27       	eor	r24, r24
    32d6:	88 1f       	adc	r24, r24
    32d8:	88 2f       	mov	r24, r24
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	81 70       	andi	r24, 0x01	; 1
    32de:	99 27       	eor	r25, r25
    32e0:	89 2b       	or	r24, r25
    32e2:	99 f3       	breq	.-26     	; 0x32ca <UART1_Read+0x60>
		data = UDR1;
    32e4:	8e ec       	ldi	r24, 0xCE	; 206
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	fc 01       	movw	r30, r24
    32ea:	80 81       	ld	r24, Z
    32ec:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    32f0:	0f 90       	pop	r0
    32f2:	df 91       	pop	r29
    32f4:	cf 91       	pop	r28
    32f6:	08 95       	ret

000032f8 <UART1_Buffer>:

void UART1_Buffer(uint8_t* str) {
    32f8:	cf 93       	push	r28
    32fa:	df 93       	push	r29
    32fc:	00 d0       	rcall	.+0      	; 0x32fe <UART1_Buffer+0x6>
    32fe:	cd b7       	in	r28, 0x3d	; 61
    3300:	de b7       	in	r29, 0x3e	; 62
    3302:	9a 83       	std	Y+2, r25	; 0x02
    3304:	89 83       	std	Y+1, r24	; 0x01
	while(*str) {
    3306:	0b c0       	rjmp	.+22     	; 0x331e <UART1_Buffer+0x26>
		altUart1Write(*str++);
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	9a 81       	ldd	r25, Y+2	; 0x02
    330c:	9c 01       	movw	r18, r24
    330e:	2f 5f       	subi	r18, 0xFF	; 255
    3310:	3f 4f       	sbci	r19, 0xFF	; 255
    3312:	3a 83       	std	Y+2, r19	; 0x02
    3314:	29 83       	std	Y+1, r18	; 0x01
    3316:	fc 01       	movw	r30, r24
    3318:	80 81       	ld	r24, Z
    331a:	0e 94 cd 18 	call	0x319a	; 0x319a <altUart1Write>

	return data;
}

void UART1_Buffer(uint8_t* str) {
	while(*str) {
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	9a 81       	ldd	r25, Y+2	; 0x02
    3322:	fc 01       	movw	r30, r24
    3324:	80 81       	ld	r24, Z
    3326:	88 23       	and	r24, r24
    3328:	79 f7       	brne	.-34     	; 0x3308 <UART1_Buffer+0x10>
		altUart1Write(*str++);
	}
}
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	df 91       	pop	r29
    3330:	cf 91       	pop	r28
    3332:	08 95       	ret

00003334 <wait_while_detection_tactic_one>:

/*
 * 	Function: static void wait_while_detection_tactic_one(void)
 * 	Description: This will wait until the callback(sensor) is returning 1, so called detecting the enemy
 */
static void wait_while_detection_tactic_one(void) {
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
    333c:	2e 97       	sbiw	r28, 0x0e	; 14
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	cd bf       	out	0x3d, r28	; 61

	while(TACTIC_ONE_POSITION[current_position].callback(0) == 1)
    3348:	72 c0       	rjmp	.+228    	; 0x342e <wait_while_detection_tactic_one+0xfa>
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	a8 ec       	ldi	r26, 0xC8	; 200
    3350:	b2 e4       	ldi	r27, 0x42	; 66
    3352:	89 83       	std	Y+1, r24	; 0x01
    3354:	9a 83       	std	Y+2, r25	; 0x02
    3356:	ab 83       	std	Y+3, r26	; 0x03
    3358:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e4       	ldi	r19, 0x40	; 64
    335e:	4c e1       	ldi	r20, 0x1C	; 28
    3360:	55 e4       	ldi	r21, 0x45	; 69
    3362:	69 81       	ldd	r22, Y+1	; 0x01
    3364:	7a 81       	ldd	r23, Y+2	; 0x02
    3366:	8b 81       	ldd	r24, Y+3	; 0x03
    3368:	9c 81       	ldd	r25, Y+4	; 0x04
    336a:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	8d 83       	std	Y+5, r24	; 0x05
    3374:	9e 83       	std	Y+6, r25	; 0x06
    3376:	af 83       	std	Y+7, r26	; 0x07
    3378:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	40 e8       	ldi	r20, 0x80	; 128
    3380:	5f e3       	ldi	r21, 0x3F	; 63
    3382:	6d 81       	ldd	r22, Y+5	; 0x05
    3384:	7e 81       	ldd	r23, Y+6	; 0x06
    3386:	8f 81       	ldd	r24, Y+7	; 0x07
    3388:	98 85       	ldd	r25, Y+8	; 0x08
    338a:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
    338e:	88 23       	and	r24, r24
    3390:	2c f4       	brge	.+10     	; 0x339c <wait_while_detection_tactic_one+0x68>
		__ticks = 1;
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	9a 87       	std	Y+10, r25	; 0x0a
    3398:	89 87       	std	Y+9, r24	; 0x09
    339a:	3f c0       	rjmp	.+126    	; 0x341a <wait_while_detection_tactic_one+0xe6>
	else if (__tmp > 65535)
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	3f ef       	ldi	r19, 0xFF	; 255
    33a0:	4f e7       	ldi	r20, 0x7F	; 127
    33a2:	57 e4       	ldi	r21, 0x47	; 71
    33a4:	6d 81       	ldd	r22, Y+5	; 0x05
    33a6:	7e 81       	ldd	r23, Y+6	; 0x06
    33a8:	8f 81       	ldd	r24, Y+7	; 0x07
    33aa:	98 85       	ldd	r25, Y+8	; 0x08
    33ac:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
    33b0:	18 16       	cp	r1, r24
    33b2:	4c f5       	brge	.+82     	; 0x3406 <wait_while_detection_tactic_one+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	40 e2       	ldi	r20, 0x20	; 32
    33ba:	51 e4       	ldi	r21, 0x41	; 65
    33bc:	69 81       	ldd	r22, Y+1	; 0x01
    33be:	7a 81       	ldd	r23, Y+2	; 0x02
    33c0:	8b 81       	ldd	r24, Y+3	; 0x03
    33c2:	9c 81       	ldd	r25, Y+4	; 0x04
    33c4:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	bc 01       	movw	r22, r24
    33ce:	cd 01       	movw	r24, r26
    33d0:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	9a 87       	std	Y+10, r25	; 0x0a
    33da:	89 87       	std	Y+9, r24	; 0x09
    33dc:	0f c0       	rjmp	.+30     	; 0x33fc <wait_while_detection_tactic_one+0xc8>
    33de:	8a ef       	ldi	r24, 0xFA	; 250
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	9c 87       	std	Y+12, r25	; 0x0c
    33e4:	8b 87       	std	Y+11, r24	; 0x0b
    33e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    33e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    33ea:	01 97       	sbiw	r24, 0x01	; 1
    33ec:	f1 f7       	brne	.-4      	; 0x33ea <wait_while_detection_tactic_one+0xb6>
    33ee:	9c 87       	std	Y+12, r25	; 0x0c
    33f0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f2:	89 85       	ldd	r24, Y+9	; 0x09
    33f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f6:	01 97       	sbiw	r24, 0x01	; 1
    33f8:	9a 87       	std	Y+10, r25	; 0x0a
    33fa:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fc:	89 85       	ldd	r24, Y+9	; 0x09
    33fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3400:	89 2b       	or	r24, r25
    3402:	69 f7       	brne	.-38     	; 0x33de <wait_while_detection_tactic_one+0xaa>
    3404:	14 c0       	rjmp	.+40     	; 0x342e <wait_while_detection_tactic_one+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3406:	6d 81       	ldd	r22, Y+5	; 0x05
    3408:	7e 81       	ldd	r23, Y+6	; 0x06
    340a:	8f 81       	ldd	r24, Y+7	; 0x07
    340c:	98 85       	ldd	r25, Y+8	; 0x08
    340e:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	9a 87       	std	Y+10, r25	; 0x0a
    3418:	89 87       	std	Y+9, r24	; 0x09
    341a:	89 85       	ldd	r24, Y+9	; 0x09
    341c:	9a 85       	ldd	r25, Y+10	; 0x0a
    341e:	9e 87       	std	Y+14, r25	; 0x0e
    3420:	8d 87       	std	Y+13, r24	; 0x0d
    3422:	8d 85       	ldd	r24, Y+13	; 0x0d
    3424:	9e 85       	ldd	r25, Y+14	; 0x0e
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <wait_while_detection_tactic_one+0xf2>
    342a:	9e 87       	std	Y+14, r25	; 0x0e
    342c:	8d 87       	std	Y+13, r24	; 0x0d
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	70 e0       	ldi	r23, 0x00	; 0
    3436:	cb 01       	movw	r24, r22
    3438:	f9 01       	movw	r30, r18
    343a:	09 95       	icall
    343c:	81 30       	cpi	r24, 0x01	; 1
    343e:	09 f4       	brne	.+2      	; 0x3442 <wait_while_detection_tactic_one+0x10e>
    3440:	84 cf       	rjmp	.-248    	; 0x334a <wait_while_detection_tactic_one+0x16>
		_delay_ms(100);
	next_position = current_position;
    3442:	80 91 6a 02 	lds	r24, 0x026A
    3446:	80 93 6b 02 	sts	0x026B, r24
	active_state = TACTIC_ONE;
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	80 93 11 01 	sts	0x0111, r24

}
    3450:	2e 96       	adiw	r28, 0x0e	; 14
    3452:	0f b6       	in	r0, 0x3f	; 63
    3454:	f8 94       	cli
    3456:	de bf       	out	0x3e, r29	; 62
    3458:	0f be       	out	0x3f, r0	; 63
    345a:	cd bf       	out	0x3d, r28	; 61
    345c:	df 91       	pop	r29
    345e:	cf 91       	pop	r28
    3460:	08 95       	ret

00003462 <darkside>:

void darkside(void) {
    3462:	cf 93       	push	r28
    3464:	df 93       	push	r29
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
    346a:	65 97       	sbiw	r28, 0x15	; 21
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61

	// setting the starting position
	struct odometry_position startingPosition; startingPosition.x = 30; startingPosition.y = 0; startingPosition.angle = 0;
    3476:	8e e1       	ldi	r24, 0x1E	; 30
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	98 8b       	std	Y+16, r25	; 0x10
    347c:	8f 87       	std	Y+15, r24	; 0x0f
    347e:	1a 8a       	std	Y+18, r1	; 0x12
    3480:	19 8a       	std	Y+17, r1	; 0x11
    3482:	1c 8a       	std	Y+20, r1	; 0x14
    3484:	1b 8a       	std	Y+19, r1	; 0x13

	// sending the starting position to odometry
	odometry_set_position(&startingPosition);
    3486:	ce 01       	movw	r24, r28
    3488:	0f 96       	adiw	r24, 0x0f	; 15
    348a:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <odometry_set_position>
		}
	}
	while(1);*/

	while(1) {
		switch(active_state) {
    348e:	80 91 11 01 	lds	r24, 0x0111
    3492:	88 2f       	mov	r24, r24
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	81 30       	cpi	r24, 0x01	; 1
    3498:	91 05       	cpc	r25, r1
    349a:	09 f4       	brne	.+2      	; 0x349e <darkside+0x3c>
    349c:	7e c0       	rjmp	.+252    	; 0x359a <darkside+0x138>
    349e:	83 35       	cpi	r24, 0x53	; 83
    34a0:	91 05       	cpc	r25, r1
    34a2:	09 f0       	breq	.+2      	; 0x34a6 <darkside+0x44>
    34a4:	c7 c0       	rjmp	.+398    	; 0x3634 <darkside+0x1d2>
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	aa e7       	ldi	r26, 0x7A	; 122
    34ac:	b4 e4       	ldi	r27, 0x44	; 68
    34ae:	89 83       	std	Y+1, r24	; 0x01
    34b0:	9a 83       	std	Y+2, r25	; 0x02
    34b2:	ab 83       	std	Y+3, r26	; 0x03
    34b4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	30 e4       	ldi	r19, 0x40	; 64
    34ba:	4c e1       	ldi	r20, 0x1C	; 28
    34bc:	55 e4       	ldi	r21, 0x45	; 69
    34be:	69 81       	ldd	r22, Y+1	; 0x01
    34c0:	7a 81       	ldd	r23, Y+2	; 0x02
    34c2:	8b 81       	ldd	r24, Y+3	; 0x03
    34c4:	9c 81       	ldd	r25, Y+4	; 0x04
    34c6:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	8d 83       	std	Y+5, r24	; 0x05
    34d0:	9e 83       	std	Y+6, r25	; 0x06
    34d2:	af 83       	std	Y+7, r26	; 0x07
    34d4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	40 e8       	ldi	r20, 0x80	; 128
    34dc:	5f e3       	ldi	r21, 0x3F	; 63
    34de:	6d 81       	ldd	r22, Y+5	; 0x05
    34e0:	7e 81       	ldd	r23, Y+6	; 0x06
    34e2:	8f 81       	ldd	r24, Y+7	; 0x07
    34e4:	98 85       	ldd	r25, Y+8	; 0x08
    34e6:	0e 94 96 1b 	call	0x372c	; 0x372c <__cmpsf2>
    34ea:	88 23       	and	r24, r24
    34ec:	2c f4       	brge	.+10     	; 0x34f8 <darkside+0x96>
		__ticks = 1;
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	9a 87       	std	Y+10, r25	; 0x0a
    34f4:	89 87       	std	Y+9, r24	; 0x09
    34f6:	3f c0       	rjmp	.+126    	; 0x3576 <darkside+0x114>
	else if (__tmp > 65535)
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	3f ef       	ldi	r19, 0xFF	; 255
    34fc:	4f e7       	ldi	r20, 0x7F	; 127
    34fe:	57 e4       	ldi	r21, 0x47	; 71
    3500:	6d 81       	ldd	r22, Y+5	; 0x05
    3502:	7e 81       	ldd	r23, Y+6	; 0x06
    3504:	8f 81       	ldd	r24, Y+7	; 0x07
    3506:	98 85       	ldd	r25, Y+8	; 0x08
    3508:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__gesf2>
    350c:	18 16       	cp	r1, r24
    350e:	4c f5       	brge	.+82     	; 0x3562 <darkside+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	40 e2       	ldi	r20, 0x20	; 32
    3516:	51 e4       	ldi	r21, 0x41	; 65
    3518:	69 81       	ldd	r22, Y+1	; 0x01
    351a:	7a 81       	ldd	r23, Y+2	; 0x02
    351c:	8b 81       	ldd	r24, Y+3	; 0x03
    351e:	9c 81       	ldd	r25, Y+4	; 0x04
    3520:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__mulsf3>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	bc 01       	movw	r22, r24
    352a:	cd 01       	movw	r24, r26
    352c:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	9a 87       	std	Y+10, r25	; 0x0a
    3536:	89 87       	std	Y+9, r24	; 0x09
    3538:	0f c0       	rjmp	.+30     	; 0x3558 <darkside+0xf6>
    353a:	8a ef       	ldi	r24, 0xFA	; 250
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	9c 87       	std	Y+12, r25	; 0x0c
    3540:	8b 87       	std	Y+11, r24	; 0x0b
    3542:	8b 85       	ldd	r24, Y+11	; 0x0b
    3544:	9c 85       	ldd	r25, Y+12	; 0x0c
    3546:	01 97       	sbiw	r24, 0x01	; 1
    3548:	f1 f7       	brne	.-4      	; 0x3546 <darkside+0xe4>
    354a:	9c 87       	std	Y+12, r25	; 0x0c
    354c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354e:	89 85       	ldd	r24, Y+9	; 0x09
    3550:	9a 85       	ldd	r25, Y+10	; 0x0a
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	9a 87       	std	Y+10, r25	; 0x0a
    3556:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3558:	89 85       	ldd	r24, Y+9	; 0x09
    355a:	9a 85       	ldd	r25, Y+10	; 0x0a
    355c:	89 2b       	or	r24, r25
    355e:	69 f7       	brne	.-38     	; 0x353a <darkside+0xd8>
    3560:	14 c0       	rjmp	.+40     	; 0x358a <darkside+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3562:	6d 81       	ldd	r22, Y+5	; 0x05
    3564:	7e 81       	ldd	r23, Y+6	; 0x06
    3566:	8f 81       	ldd	r24, Y+7	; 0x07
    3568:	98 85       	ldd	r25, Y+8	; 0x08
    356a:	0e 94 0d 1c 	call	0x381a	; 0x381a <__fixunssfsi>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	9a 87       	std	Y+10, r25	; 0x0a
    3574:	89 87       	std	Y+9, r24	; 0x09
    3576:	89 85       	ldd	r24, Y+9	; 0x09
    3578:	9a 85       	ldd	r25, Y+10	; 0x0a
    357a:	9e 87       	std	Y+14, r25	; 0x0e
    357c:	8d 87       	std	Y+13, r24	; 0x0d
    357e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3580:	9e 85       	ldd	r25, Y+14	; 0x0e
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <darkside+0x120>
    3586:	9e 87       	std	Y+14, r25	; 0x0e
    3588:	8d 87       	std	Y+13, r24	; 0x0d
		case COLLISION:		// COLLISION
			break;
		case STUCK:			// STUCK
			_delay_ms(1000);
			active_state = TACTIC_ONE;
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	80 93 11 01 	sts	0x0111, r24
			next_position = current_position;
    3590:	80 91 6a 02 	lds	r24, 0x026A
    3594:	80 93 6b 02 	sts	0x026B, r24

			break;
    3598:	4e c0       	rjmp	.+156    	; 0x3636 <darkside+0x1d4>
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    359a:	80 91 6b 02 	lds	r24, 0x026B
    359e:	80 93 6a 02 	sts	0x026A, r24
    35a2:	42 c0       	rjmp	.+132    	; 0x3628 <darkside+0x1c6>
				// send the gotoField and receive status
				odometry_status = odometry_move_to_position(&TACTIC_ONE_POSITION[current_position].point, TACTIC_ONE_POSITION[current_position].speed, TACTIC_ONE_POSITION[current_position].direction, TACTIC_ONE_POSITION[current_position].callback);
    35a4:	40 e0       	ldi	r20, 0x00	; 0
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	80 91 6a 02 	lds	r24, 0x026A
    35ac:	28 2f       	mov	r18, r24
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	6b e0       	ldi	r22, 0x0B	; 11
    35b2:	62 9f       	mul	r22, r18
    35b4:	c0 01       	movw	r24, r0
    35b6:	63 9f       	mul	r22, r19
    35b8:	90 0d       	add	r25, r0
    35ba:	11 24       	eor	r1, r1
    35bc:	86 5e       	subi	r24, 0xE6	; 230
    35be:	9e 4f       	sbci	r25, 0xFE	; 254
    35c0:	dc 01       	movw	r26, r24
    35c2:	ec 91       	ld	r30, X
    35c4:	80 91 6a 02 	lds	r24, 0x026A
    35c8:	28 2f       	mov	r18, r24
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	6b e0       	ldi	r22, 0x0B	; 11
    35ce:	62 9f       	mul	r22, r18
    35d0:	c0 01       	movw	r24, r0
    35d2:	63 9f       	mul	r22, r19
    35d4:	90 0d       	add	r25, r0
    35d6:	11 24       	eor	r1, r1
    35d8:	87 5e       	subi	r24, 0xE7	; 231
    35da:	9e 4f       	sbci	r25, 0xFE	; 254
    35dc:	dc 01       	movw	r26, r24
    35de:	7c 91       	ld	r23, X
    35e0:	80 91 6a 02 	lds	r24, 0x026A
    35e4:	28 2f       	mov	r18, r24
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	6b e0       	ldi	r22, 0x0B	; 11
    35ea:	62 9f       	mul	r22, r18
    35ec:	c0 01       	movw	r24, r0
    35ee:	63 9f       	mul	r22, r19
    35f0:	90 0d       	add	r25, r0
    35f2:	11 24       	eor	r1, r1
    35f4:	8e 5e       	subi	r24, 0xEE	; 238
    35f6:	9e 4f       	sbci	r25, 0xFE	; 254
    35f8:	9a 01       	movw	r18, r20
    35fa:	4e 2f       	mov	r20, r30
    35fc:	67 2f       	mov	r22, r23
    35fe:	0e 94 1b 10 	call	0x2036	; 0x2036 <odometry_move_to_position>
    3602:	80 93 6f 02 	sts	0x026F, r24

				// if odometry fails set state to collision
				if(odometry_status == ODOMETRY_FAIL)
    3606:	80 91 6f 02 	lds	r24, 0x026F
    360a:	81 30       	cpi	r24, 0x01	; 1
    360c:	19 f4       	brne	.+6      	; 0x3614 <darkside+0x1b2>
				{
					active_state = COLLISION;
    360e:	10 92 11 01 	sts	0x0111, r1
					break;
    3612:	11 c0       	rjmp	.+34     	; 0x3636 <darkside+0x1d4>
				{

				}

				// last position
				if(current_position == (TACTIC_ONE_POSITION_COUNT - 1))
    3614:	80 91 6a 02 	lds	r24, 0x026A
    3618:	88 23       	and	r24, r24
    361a:	09 f4       	brne	.+2      	; 0x361e <darkside+0x1bc>
				{
					while(1);
    361c:	ff cf       	rjmp	.-2      	; 0x361c <darkside+0x1ba>
			active_state = TACTIC_ONE;
			next_position = current_position;

			break;
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    361e:	80 91 6a 02 	lds	r24, 0x026A
    3622:	8f 5f       	subi	r24, 0xFF	; 255
    3624:	80 93 6a 02 	sts	0x026A, r24
    3628:	80 91 6a 02 	lds	r24, 0x026A
    362c:	88 23       	and	r24, r24
    362e:	09 f4       	brne	.+2      	; 0x3632 <darkside+0x1d0>
    3630:	b9 cf       	rjmp	.-142    	; 0x35a4 <darkside+0x142>
    3632:	01 c0       	rjmp	.+2      	; 0x3636 <darkside+0x1d4>
	while(1);*/

	while(1) {
		switch(active_state) {
		case COLLISION:		// COLLISION
			break;
    3634:	00 00       	nop
				{
					while(1);
				}
			}//end of for
		}//end of switch
	}//end of while
    3636:	2b cf       	rjmp	.-426    	; 0x348e <darkside+0x2c>

00003638 <main>:
#include "ax.h"
#include "system.h"
#include "sides.h"

int main()
{
    3638:	cf 93       	push	r28
    363a:	df 93       	push	r29
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62

	system_init();
    3640:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <system_init>

	darkside();
    3644:	0e 94 31 1a 	call	0x3462	; 0x3462 <darkside>

	return 0;
    3648:	80 e0       	ldi	r24, 0x00	; 0
    364a:	90 e0       	ldi	r25, 0x00	; 0

}//end of main()
    364c:	df 91       	pop	r29
    364e:	cf 91       	pop	r28
    3650:	08 95       	ret

00003652 <__subsf3>:
    3652:	50 58       	subi	r21, 0x80	; 128

00003654 <__addsf3>:
    3654:	bb 27       	eor	r27, r27
    3656:	aa 27       	eor	r26, r26
    3658:	0e 94 41 1b 	call	0x3682	; 0x3682 <__addsf3x>
    365c:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <__fp_round>
    3660:	0e 94 a6 1c 	call	0x394c	; 0x394c <__fp_pscA>
    3664:	38 f0       	brcs	.+14     	; 0x3674 <__addsf3+0x20>
    3666:	0e 94 ad 1c 	call	0x395a	; 0x395a <__fp_pscB>
    366a:	20 f0       	brcs	.+8      	; 0x3674 <__addsf3+0x20>
    366c:	39 f4       	brne	.+14     	; 0x367c <__addsf3+0x28>
    366e:	9f 3f       	cpi	r25, 0xFF	; 255
    3670:	19 f4       	brne	.+6      	; 0x3678 <__addsf3+0x24>
    3672:	26 f4       	brtc	.+8      	; 0x367c <__addsf3+0x28>
    3674:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <__fp_nan>
    3678:	0e f4       	brtc	.+2      	; 0x367c <__addsf3+0x28>
    367a:	e0 95       	com	r30
    367c:	e7 fb       	bst	r30, 7
    367e:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__fp_inf>

00003682 <__addsf3x>:
    3682:	e9 2f       	mov	r30, r25
    3684:	0e 94 c5 1c 	call	0x398a	; 0x398a <__fp_split3>
    3688:	58 f3       	brcs	.-42     	; 0x3660 <__addsf3+0xc>
    368a:	ba 17       	cp	r27, r26
    368c:	62 07       	cpc	r22, r18
    368e:	73 07       	cpc	r23, r19
    3690:	84 07       	cpc	r24, r20
    3692:	95 07       	cpc	r25, r21
    3694:	20 f0       	brcs	.+8      	; 0x369e <__addsf3x+0x1c>
    3696:	79 f4       	brne	.+30     	; 0x36b6 <__addsf3x+0x34>
    3698:	a6 f5       	brtc	.+104    	; 0x3702 <__addsf3x+0x80>
    369a:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__fp_zero>
    369e:	0e f4       	brtc	.+2      	; 0x36a2 <__addsf3x+0x20>
    36a0:	e0 95       	com	r30
    36a2:	0b 2e       	mov	r0, r27
    36a4:	ba 2f       	mov	r27, r26
    36a6:	a0 2d       	mov	r26, r0
    36a8:	0b 01       	movw	r0, r22
    36aa:	b9 01       	movw	r22, r18
    36ac:	90 01       	movw	r18, r0
    36ae:	0c 01       	movw	r0, r24
    36b0:	ca 01       	movw	r24, r20
    36b2:	a0 01       	movw	r20, r0
    36b4:	11 24       	eor	r1, r1
    36b6:	ff 27       	eor	r31, r31
    36b8:	59 1b       	sub	r21, r25
    36ba:	99 f0       	breq	.+38     	; 0x36e2 <__addsf3x+0x60>
    36bc:	59 3f       	cpi	r21, 0xF9	; 249
    36be:	50 f4       	brcc	.+20     	; 0x36d4 <__addsf3x+0x52>
    36c0:	50 3e       	cpi	r21, 0xE0	; 224
    36c2:	68 f1       	brcs	.+90     	; 0x371e <__addsf3x+0x9c>
    36c4:	1a 16       	cp	r1, r26
    36c6:	f0 40       	sbci	r31, 0x00	; 0
    36c8:	a2 2f       	mov	r26, r18
    36ca:	23 2f       	mov	r18, r19
    36cc:	34 2f       	mov	r19, r20
    36ce:	44 27       	eor	r20, r20
    36d0:	58 5f       	subi	r21, 0xF8	; 248
    36d2:	f3 cf       	rjmp	.-26     	; 0x36ba <__addsf3x+0x38>
    36d4:	46 95       	lsr	r20
    36d6:	37 95       	ror	r19
    36d8:	27 95       	ror	r18
    36da:	a7 95       	ror	r26
    36dc:	f0 40       	sbci	r31, 0x00	; 0
    36de:	53 95       	inc	r21
    36e0:	c9 f7       	brne	.-14     	; 0x36d4 <__addsf3x+0x52>
    36e2:	7e f4       	brtc	.+30     	; 0x3702 <__addsf3x+0x80>
    36e4:	1f 16       	cp	r1, r31
    36e6:	ba 0b       	sbc	r27, r26
    36e8:	62 0b       	sbc	r22, r18
    36ea:	73 0b       	sbc	r23, r19
    36ec:	84 0b       	sbc	r24, r20
    36ee:	ba f0       	brmi	.+46     	; 0x371e <__addsf3x+0x9c>
    36f0:	91 50       	subi	r25, 0x01	; 1
    36f2:	a1 f0       	breq	.+40     	; 0x371c <__addsf3x+0x9a>
    36f4:	ff 0f       	add	r31, r31
    36f6:	bb 1f       	adc	r27, r27
    36f8:	66 1f       	adc	r22, r22
    36fa:	77 1f       	adc	r23, r23
    36fc:	88 1f       	adc	r24, r24
    36fe:	c2 f7       	brpl	.-16     	; 0x36f0 <__addsf3x+0x6e>
    3700:	0e c0       	rjmp	.+28     	; 0x371e <__addsf3x+0x9c>
    3702:	ba 0f       	add	r27, r26
    3704:	62 1f       	adc	r22, r18
    3706:	73 1f       	adc	r23, r19
    3708:	84 1f       	adc	r24, r20
    370a:	48 f4       	brcc	.+18     	; 0x371e <__addsf3x+0x9c>
    370c:	87 95       	ror	r24
    370e:	77 95       	ror	r23
    3710:	67 95       	ror	r22
    3712:	b7 95       	ror	r27
    3714:	f7 95       	ror	r31
    3716:	9e 3f       	cpi	r25, 0xFE	; 254
    3718:	08 f0       	brcs	.+2      	; 0x371c <__addsf3x+0x9a>
    371a:	b0 cf       	rjmp	.-160    	; 0x367c <__addsf3+0x28>
    371c:	93 95       	inc	r25
    371e:	88 0f       	add	r24, r24
    3720:	08 f0       	brcs	.+2      	; 0x3724 <__addsf3x+0xa2>
    3722:	99 27       	eor	r25, r25
    3724:	ee 0f       	add	r30, r30
    3726:	97 95       	ror	r25
    3728:	87 95       	ror	r24
    372a:	08 95       	ret

0000372c <__cmpsf2>:
    372c:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <__fp_cmp>
    3730:	08 f4       	brcc	.+2      	; 0x3734 <__cmpsf2+0x8>
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	08 95       	ret

00003736 <__divsf3>:
    3736:	0e 94 af 1b 	call	0x375e	; 0x375e <__divsf3x>
    373a:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <__fp_round>
    373e:	0e 94 ad 1c 	call	0x395a	; 0x395a <__fp_pscB>
    3742:	58 f0       	brcs	.+22     	; 0x375a <__divsf3+0x24>
    3744:	0e 94 a6 1c 	call	0x394c	; 0x394c <__fp_pscA>
    3748:	40 f0       	brcs	.+16     	; 0x375a <__divsf3+0x24>
    374a:	29 f4       	brne	.+10     	; 0x3756 <__divsf3+0x20>
    374c:	5f 3f       	cpi	r21, 0xFF	; 255
    374e:	29 f0       	breq	.+10     	; 0x375a <__divsf3+0x24>
    3750:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__fp_inf>
    3754:	51 11       	cpse	r21, r1
    3756:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <__fp_szero>
    375a:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <__fp_nan>

0000375e <__divsf3x>:
    375e:	0e 94 c5 1c 	call	0x398a	; 0x398a <__fp_split3>
    3762:	68 f3       	brcs	.-38     	; 0x373e <__divsf3+0x8>

00003764 <__divsf3_pse>:
    3764:	99 23       	and	r25, r25
    3766:	b1 f3       	breq	.-20     	; 0x3754 <__divsf3+0x1e>
    3768:	55 23       	and	r21, r21
    376a:	91 f3       	breq	.-28     	; 0x3750 <__divsf3+0x1a>
    376c:	95 1b       	sub	r25, r21
    376e:	55 0b       	sbc	r21, r21
    3770:	bb 27       	eor	r27, r27
    3772:	aa 27       	eor	r26, r26
    3774:	62 17       	cp	r22, r18
    3776:	73 07       	cpc	r23, r19
    3778:	84 07       	cpc	r24, r20
    377a:	38 f0       	brcs	.+14     	; 0x378a <__divsf3_pse+0x26>
    377c:	9f 5f       	subi	r25, 0xFF	; 255
    377e:	5f 4f       	sbci	r21, 0xFF	; 255
    3780:	22 0f       	add	r18, r18
    3782:	33 1f       	adc	r19, r19
    3784:	44 1f       	adc	r20, r20
    3786:	aa 1f       	adc	r26, r26
    3788:	a9 f3       	breq	.-22     	; 0x3774 <__divsf3_pse+0x10>
    378a:	35 d0       	rcall	.+106    	; 0x37f6 <__divsf3_pse+0x92>
    378c:	0e 2e       	mov	r0, r30
    378e:	3a f0       	brmi	.+14     	; 0x379e <__divsf3_pse+0x3a>
    3790:	e0 e8       	ldi	r30, 0x80	; 128
    3792:	32 d0       	rcall	.+100    	; 0x37f8 <__divsf3_pse+0x94>
    3794:	91 50       	subi	r25, 0x01	; 1
    3796:	50 40       	sbci	r21, 0x00	; 0
    3798:	e6 95       	lsr	r30
    379a:	00 1c       	adc	r0, r0
    379c:	ca f7       	brpl	.-14     	; 0x3790 <__divsf3_pse+0x2c>
    379e:	2b d0       	rcall	.+86     	; 0x37f6 <__divsf3_pse+0x92>
    37a0:	fe 2f       	mov	r31, r30
    37a2:	29 d0       	rcall	.+82     	; 0x37f6 <__divsf3_pse+0x92>
    37a4:	66 0f       	add	r22, r22
    37a6:	77 1f       	adc	r23, r23
    37a8:	88 1f       	adc	r24, r24
    37aa:	bb 1f       	adc	r27, r27
    37ac:	26 17       	cp	r18, r22
    37ae:	37 07       	cpc	r19, r23
    37b0:	48 07       	cpc	r20, r24
    37b2:	ab 07       	cpc	r26, r27
    37b4:	b0 e8       	ldi	r27, 0x80	; 128
    37b6:	09 f0       	breq	.+2      	; 0x37ba <__divsf3_pse+0x56>
    37b8:	bb 0b       	sbc	r27, r27
    37ba:	80 2d       	mov	r24, r0
    37bc:	bf 01       	movw	r22, r30
    37be:	ff 27       	eor	r31, r31
    37c0:	93 58       	subi	r25, 0x83	; 131
    37c2:	5f 4f       	sbci	r21, 0xFF	; 255
    37c4:	3a f0       	brmi	.+14     	; 0x37d4 <__divsf3_pse+0x70>
    37c6:	9e 3f       	cpi	r25, 0xFE	; 254
    37c8:	51 05       	cpc	r21, r1
    37ca:	78 f0       	brcs	.+30     	; 0x37ea <__divsf3_pse+0x86>
    37cc:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__fp_inf>
    37d0:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <__fp_szero>
    37d4:	5f 3f       	cpi	r21, 0xFF	; 255
    37d6:	e4 f3       	brlt	.-8      	; 0x37d0 <__divsf3_pse+0x6c>
    37d8:	98 3e       	cpi	r25, 0xE8	; 232
    37da:	d4 f3       	brlt	.-12     	; 0x37d0 <__divsf3_pse+0x6c>
    37dc:	86 95       	lsr	r24
    37de:	77 95       	ror	r23
    37e0:	67 95       	ror	r22
    37e2:	b7 95       	ror	r27
    37e4:	f7 95       	ror	r31
    37e6:	9f 5f       	subi	r25, 0xFF	; 255
    37e8:	c9 f7       	brne	.-14     	; 0x37dc <__divsf3_pse+0x78>
    37ea:	88 0f       	add	r24, r24
    37ec:	91 1d       	adc	r25, r1
    37ee:	96 95       	lsr	r25
    37f0:	87 95       	ror	r24
    37f2:	97 f9       	bld	r25, 7
    37f4:	08 95       	ret
    37f6:	e1 e0       	ldi	r30, 0x01	; 1
    37f8:	66 0f       	add	r22, r22
    37fa:	77 1f       	adc	r23, r23
    37fc:	88 1f       	adc	r24, r24
    37fe:	bb 1f       	adc	r27, r27
    3800:	62 17       	cp	r22, r18
    3802:	73 07       	cpc	r23, r19
    3804:	84 07       	cpc	r24, r20
    3806:	ba 07       	cpc	r27, r26
    3808:	20 f0       	brcs	.+8      	; 0x3812 <__divsf3_pse+0xae>
    380a:	62 1b       	sub	r22, r18
    380c:	73 0b       	sbc	r23, r19
    380e:	84 0b       	sbc	r24, r20
    3810:	ba 0b       	sbc	r27, r26
    3812:	ee 1f       	adc	r30, r30
    3814:	88 f7       	brcc	.-30     	; 0x37f8 <__divsf3_pse+0x94>
    3816:	e0 95       	com	r30
    3818:	08 95       	ret

0000381a <__fixunssfsi>:
    381a:	0e 94 cd 1c 	call	0x399a	; 0x399a <__fp_splitA>
    381e:	88 f0       	brcs	.+34     	; 0x3842 <__fixunssfsi+0x28>
    3820:	9f 57       	subi	r25, 0x7F	; 127
    3822:	98 f0       	brcs	.+38     	; 0x384a <__fixunssfsi+0x30>
    3824:	b9 2f       	mov	r27, r25
    3826:	99 27       	eor	r25, r25
    3828:	b7 51       	subi	r27, 0x17	; 23
    382a:	b0 f0       	brcs	.+44     	; 0x3858 <__fixunssfsi+0x3e>
    382c:	e1 f0       	breq	.+56     	; 0x3866 <__fixunssfsi+0x4c>
    382e:	66 0f       	add	r22, r22
    3830:	77 1f       	adc	r23, r23
    3832:	88 1f       	adc	r24, r24
    3834:	99 1f       	adc	r25, r25
    3836:	1a f0       	brmi	.+6      	; 0x383e <__fixunssfsi+0x24>
    3838:	ba 95       	dec	r27
    383a:	c9 f7       	brne	.-14     	; 0x382e <__fixunssfsi+0x14>
    383c:	14 c0       	rjmp	.+40     	; 0x3866 <__fixunssfsi+0x4c>
    383e:	b1 30       	cpi	r27, 0x01	; 1
    3840:	91 f0       	breq	.+36     	; 0x3866 <__fixunssfsi+0x4c>
    3842:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__fp_zero>
    3846:	b1 e0       	ldi	r27, 0x01	; 1
    3848:	08 95       	ret
    384a:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__fp_zero>
    384e:	67 2f       	mov	r22, r23
    3850:	78 2f       	mov	r23, r24
    3852:	88 27       	eor	r24, r24
    3854:	b8 5f       	subi	r27, 0xF8	; 248
    3856:	39 f0       	breq	.+14     	; 0x3866 <__fixunssfsi+0x4c>
    3858:	b9 3f       	cpi	r27, 0xF9	; 249
    385a:	cc f3       	brlt	.-14     	; 0x384e <__fixunssfsi+0x34>
    385c:	86 95       	lsr	r24
    385e:	77 95       	ror	r23
    3860:	67 95       	ror	r22
    3862:	b3 95       	inc	r27
    3864:	d9 f7       	brne	.-10     	; 0x385c <__fixunssfsi+0x42>
    3866:	3e f4       	brtc	.+14     	; 0x3876 <__fixunssfsi+0x5c>
    3868:	90 95       	com	r25
    386a:	80 95       	com	r24
    386c:	70 95       	com	r23
    386e:	61 95       	neg	r22
    3870:	7f 4f       	sbci	r23, 0xFF	; 255
    3872:	8f 4f       	sbci	r24, 0xFF	; 255
    3874:	9f 4f       	sbci	r25, 0xFF	; 255
    3876:	08 95       	ret

00003878 <__floatunsisf>:
    3878:	e8 94       	clt
    387a:	09 c0       	rjmp	.+18     	; 0x388e <__floatsisf+0x12>

0000387c <__floatsisf>:
    387c:	97 fb       	bst	r25, 7
    387e:	3e f4       	brtc	.+14     	; 0x388e <__floatsisf+0x12>
    3880:	90 95       	com	r25
    3882:	80 95       	com	r24
    3884:	70 95       	com	r23
    3886:	61 95       	neg	r22
    3888:	7f 4f       	sbci	r23, 0xFF	; 255
    388a:	8f 4f       	sbci	r24, 0xFF	; 255
    388c:	9f 4f       	sbci	r25, 0xFF	; 255
    388e:	99 23       	and	r25, r25
    3890:	a9 f0       	breq	.+42     	; 0x38bc <__floatsisf+0x40>
    3892:	f9 2f       	mov	r31, r25
    3894:	96 e9       	ldi	r25, 0x96	; 150
    3896:	bb 27       	eor	r27, r27
    3898:	93 95       	inc	r25
    389a:	f6 95       	lsr	r31
    389c:	87 95       	ror	r24
    389e:	77 95       	ror	r23
    38a0:	67 95       	ror	r22
    38a2:	b7 95       	ror	r27
    38a4:	f1 11       	cpse	r31, r1
    38a6:	f8 cf       	rjmp	.-16     	; 0x3898 <__floatsisf+0x1c>
    38a8:	fa f4       	brpl	.+62     	; 0x38e8 <__floatsisf+0x6c>
    38aa:	bb 0f       	add	r27, r27
    38ac:	11 f4       	brne	.+4      	; 0x38b2 <__floatsisf+0x36>
    38ae:	60 ff       	sbrs	r22, 0
    38b0:	1b c0       	rjmp	.+54     	; 0x38e8 <__floatsisf+0x6c>
    38b2:	6f 5f       	subi	r22, 0xFF	; 255
    38b4:	7f 4f       	sbci	r23, 0xFF	; 255
    38b6:	8f 4f       	sbci	r24, 0xFF	; 255
    38b8:	9f 4f       	sbci	r25, 0xFF	; 255
    38ba:	16 c0       	rjmp	.+44     	; 0x38e8 <__floatsisf+0x6c>
    38bc:	88 23       	and	r24, r24
    38be:	11 f0       	breq	.+4      	; 0x38c4 <__floatsisf+0x48>
    38c0:	96 e9       	ldi	r25, 0x96	; 150
    38c2:	11 c0       	rjmp	.+34     	; 0x38e6 <__floatsisf+0x6a>
    38c4:	77 23       	and	r23, r23
    38c6:	21 f0       	breq	.+8      	; 0x38d0 <__floatsisf+0x54>
    38c8:	9e e8       	ldi	r25, 0x8E	; 142
    38ca:	87 2f       	mov	r24, r23
    38cc:	76 2f       	mov	r23, r22
    38ce:	05 c0       	rjmp	.+10     	; 0x38da <__floatsisf+0x5e>
    38d0:	66 23       	and	r22, r22
    38d2:	71 f0       	breq	.+28     	; 0x38f0 <__floatsisf+0x74>
    38d4:	96 e8       	ldi	r25, 0x86	; 134
    38d6:	86 2f       	mov	r24, r22
    38d8:	70 e0       	ldi	r23, 0x00	; 0
    38da:	60 e0       	ldi	r22, 0x00	; 0
    38dc:	2a f0       	brmi	.+10     	; 0x38e8 <__floatsisf+0x6c>
    38de:	9a 95       	dec	r25
    38e0:	66 0f       	add	r22, r22
    38e2:	77 1f       	adc	r23, r23
    38e4:	88 1f       	adc	r24, r24
    38e6:	da f7       	brpl	.-10     	; 0x38de <__floatsisf+0x62>
    38e8:	88 0f       	add	r24, r24
    38ea:	96 95       	lsr	r25
    38ec:	87 95       	ror	r24
    38ee:	97 f9       	bld	r25, 7
    38f0:	08 95       	ret

000038f2 <__fp_cmp>:
    38f2:	99 0f       	add	r25, r25
    38f4:	00 08       	sbc	r0, r0
    38f6:	55 0f       	add	r21, r21
    38f8:	aa 0b       	sbc	r26, r26
    38fa:	e0 e8       	ldi	r30, 0x80	; 128
    38fc:	fe ef       	ldi	r31, 0xFE	; 254
    38fe:	16 16       	cp	r1, r22
    3900:	17 06       	cpc	r1, r23
    3902:	e8 07       	cpc	r30, r24
    3904:	f9 07       	cpc	r31, r25
    3906:	c0 f0       	brcs	.+48     	; 0x3938 <__fp_cmp+0x46>
    3908:	12 16       	cp	r1, r18
    390a:	13 06       	cpc	r1, r19
    390c:	e4 07       	cpc	r30, r20
    390e:	f5 07       	cpc	r31, r21
    3910:	98 f0       	brcs	.+38     	; 0x3938 <__fp_cmp+0x46>
    3912:	62 1b       	sub	r22, r18
    3914:	73 0b       	sbc	r23, r19
    3916:	84 0b       	sbc	r24, r20
    3918:	95 0b       	sbc	r25, r21
    391a:	39 f4       	brne	.+14     	; 0x392a <__fp_cmp+0x38>
    391c:	0a 26       	eor	r0, r26
    391e:	61 f0       	breq	.+24     	; 0x3938 <__fp_cmp+0x46>
    3920:	23 2b       	or	r18, r19
    3922:	24 2b       	or	r18, r20
    3924:	25 2b       	or	r18, r21
    3926:	21 f4       	brne	.+8      	; 0x3930 <__fp_cmp+0x3e>
    3928:	08 95       	ret
    392a:	0a 26       	eor	r0, r26
    392c:	09 f4       	brne	.+2      	; 0x3930 <__fp_cmp+0x3e>
    392e:	a1 40       	sbci	r26, 0x01	; 1
    3930:	a6 95       	lsr	r26
    3932:	8f ef       	ldi	r24, 0xFF	; 255
    3934:	81 1d       	adc	r24, r1
    3936:	81 1d       	adc	r24, r1
    3938:	08 95       	ret

0000393a <__fp_inf>:
    393a:	97 f9       	bld	r25, 7
    393c:	9f 67       	ori	r25, 0x7F	; 127
    393e:	80 e8       	ldi	r24, 0x80	; 128
    3940:	70 e0       	ldi	r23, 0x00	; 0
    3942:	60 e0       	ldi	r22, 0x00	; 0
    3944:	08 95       	ret

00003946 <__fp_nan>:
    3946:	9f ef       	ldi	r25, 0xFF	; 255
    3948:	80 ec       	ldi	r24, 0xC0	; 192
    394a:	08 95       	ret

0000394c <__fp_pscA>:
    394c:	00 24       	eor	r0, r0
    394e:	0a 94       	dec	r0
    3950:	16 16       	cp	r1, r22
    3952:	17 06       	cpc	r1, r23
    3954:	18 06       	cpc	r1, r24
    3956:	09 06       	cpc	r0, r25
    3958:	08 95       	ret

0000395a <__fp_pscB>:
    395a:	00 24       	eor	r0, r0
    395c:	0a 94       	dec	r0
    395e:	12 16       	cp	r1, r18
    3960:	13 06       	cpc	r1, r19
    3962:	14 06       	cpc	r1, r20
    3964:	05 06       	cpc	r0, r21
    3966:	08 95       	ret

00003968 <__fp_round>:
    3968:	09 2e       	mov	r0, r25
    396a:	03 94       	inc	r0
    396c:	00 0c       	add	r0, r0
    396e:	11 f4       	brne	.+4      	; 0x3974 <__fp_round+0xc>
    3970:	88 23       	and	r24, r24
    3972:	52 f0       	brmi	.+20     	; 0x3988 <__fp_round+0x20>
    3974:	bb 0f       	add	r27, r27
    3976:	40 f4       	brcc	.+16     	; 0x3988 <__fp_round+0x20>
    3978:	bf 2b       	or	r27, r31
    397a:	11 f4       	brne	.+4      	; 0x3980 <__fp_round+0x18>
    397c:	60 ff       	sbrs	r22, 0
    397e:	04 c0       	rjmp	.+8      	; 0x3988 <__fp_round+0x20>
    3980:	6f 5f       	subi	r22, 0xFF	; 255
    3982:	7f 4f       	sbci	r23, 0xFF	; 255
    3984:	8f 4f       	sbci	r24, 0xFF	; 255
    3986:	9f 4f       	sbci	r25, 0xFF	; 255
    3988:	08 95       	ret

0000398a <__fp_split3>:
    398a:	57 fd       	sbrc	r21, 7
    398c:	90 58       	subi	r25, 0x80	; 128
    398e:	44 0f       	add	r20, r20
    3990:	55 1f       	adc	r21, r21
    3992:	59 f0       	breq	.+22     	; 0x39aa <__fp_splitA+0x10>
    3994:	5f 3f       	cpi	r21, 0xFF	; 255
    3996:	71 f0       	breq	.+28     	; 0x39b4 <__fp_splitA+0x1a>
    3998:	47 95       	ror	r20

0000399a <__fp_splitA>:
    399a:	88 0f       	add	r24, r24
    399c:	97 fb       	bst	r25, 7
    399e:	99 1f       	adc	r25, r25
    39a0:	61 f0       	breq	.+24     	; 0x39ba <__fp_splitA+0x20>
    39a2:	9f 3f       	cpi	r25, 0xFF	; 255
    39a4:	79 f0       	breq	.+30     	; 0x39c4 <__fp_splitA+0x2a>
    39a6:	87 95       	ror	r24
    39a8:	08 95       	ret
    39aa:	12 16       	cp	r1, r18
    39ac:	13 06       	cpc	r1, r19
    39ae:	14 06       	cpc	r1, r20
    39b0:	55 1f       	adc	r21, r21
    39b2:	f2 cf       	rjmp	.-28     	; 0x3998 <__fp_split3+0xe>
    39b4:	46 95       	lsr	r20
    39b6:	f1 df       	rcall	.-30     	; 0x399a <__fp_splitA>
    39b8:	08 c0       	rjmp	.+16     	; 0x39ca <__fp_splitA+0x30>
    39ba:	16 16       	cp	r1, r22
    39bc:	17 06       	cpc	r1, r23
    39be:	18 06       	cpc	r1, r24
    39c0:	99 1f       	adc	r25, r25
    39c2:	f1 cf       	rjmp	.-30     	; 0x39a6 <__fp_splitA+0xc>
    39c4:	86 95       	lsr	r24
    39c6:	71 05       	cpc	r23, r1
    39c8:	61 05       	cpc	r22, r1
    39ca:	08 94       	sec
    39cc:	08 95       	ret

000039ce <__fp_zero>:
    39ce:	e8 94       	clt

000039d0 <__fp_szero>:
    39d0:	bb 27       	eor	r27, r27
    39d2:	66 27       	eor	r22, r22
    39d4:	77 27       	eor	r23, r23
    39d6:	cb 01       	movw	r24, r22
    39d8:	97 f9       	bld	r25, 7
    39da:	08 95       	ret

000039dc <__gesf2>:
    39dc:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <__fp_cmp>
    39e0:	08 f4       	brcc	.+2      	; 0x39e4 <__gesf2+0x8>
    39e2:	8f ef       	ldi	r24, 0xFF	; 255
    39e4:	08 95       	ret

000039e6 <__mulsf3>:
    39e6:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__mulsf3x>
    39ea:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <__fp_round>
    39ee:	0e 94 a6 1c 	call	0x394c	; 0x394c <__fp_pscA>
    39f2:	38 f0       	brcs	.+14     	; 0x3a02 <__mulsf3+0x1c>
    39f4:	0e 94 ad 1c 	call	0x395a	; 0x395a <__fp_pscB>
    39f8:	20 f0       	brcs	.+8      	; 0x3a02 <__mulsf3+0x1c>
    39fa:	95 23       	and	r25, r21
    39fc:	11 f0       	breq	.+4      	; 0x3a02 <__mulsf3+0x1c>
    39fe:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__fp_inf>
    3a02:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <__fp_nan>
    3a06:	11 24       	eor	r1, r1
    3a08:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <__fp_szero>

00003a0c <__mulsf3x>:
    3a0c:	0e 94 c5 1c 	call	0x398a	; 0x398a <__fp_split3>
    3a10:	70 f3       	brcs	.-36     	; 0x39ee <__mulsf3+0x8>

00003a12 <__mulsf3_pse>:
    3a12:	95 9f       	mul	r25, r21
    3a14:	c1 f3       	breq	.-16     	; 0x3a06 <__mulsf3+0x20>
    3a16:	95 0f       	add	r25, r21
    3a18:	50 e0       	ldi	r21, 0x00	; 0
    3a1a:	55 1f       	adc	r21, r21
    3a1c:	62 9f       	mul	r22, r18
    3a1e:	f0 01       	movw	r30, r0
    3a20:	72 9f       	mul	r23, r18
    3a22:	bb 27       	eor	r27, r27
    3a24:	f0 0d       	add	r31, r0
    3a26:	b1 1d       	adc	r27, r1
    3a28:	63 9f       	mul	r22, r19
    3a2a:	aa 27       	eor	r26, r26
    3a2c:	f0 0d       	add	r31, r0
    3a2e:	b1 1d       	adc	r27, r1
    3a30:	aa 1f       	adc	r26, r26
    3a32:	64 9f       	mul	r22, r20
    3a34:	66 27       	eor	r22, r22
    3a36:	b0 0d       	add	r27, r0
    3a38:	a1 1d       	adc	r26, r1
    3a3a:	66 1f       	adc	r22, r22
    3a3c:	82 9f       	mul	r24, r18
    3a3e:	22 27       	eor	r18, r18
    3a40:	b0 0d       	add	r27, r0
    3a42:	a1 1d       	adc	r26, r1
    3a44:	62 1f       	adc	r22, r18
    3a46:	73 9f       	mul	r23, r19
    3a48:	b0 0d       	add	r27, r0
    3a4a:	a1 1d       	adc	r26, r1
    3a4c:	62 1f       	adc	r22, r18
    3a4e:	83 9f       	mul	r24, r19
    3a50:	a0 0d       	add	r26, r0
    3a52:	61 1d       	adc	r22, r1
    3a54:	22 1f       	adc	r18, r18
    3a56:	74 9f       	mul	r23, r20
    3a58:	33 27       	eor	r19, r19
    3a5a:	a0 0d       	add	r26, r0
    3a5c:	61 1d       	adc	r22, r1
    3a5e:	23 1f       	adc	r18, r19
    3a60:	84 9f       	mul	r24, r20
    3a62:	60 0d       	add	r22, r0
    3a64:	21 1d       	adc	r18, r1
    3a66:	82 2f       	mov	r24, r18
    3a68:	76 2f       	mov	r23, r22
    3a6a:	6a 2f       	mov	r22, r26
    3a6c:	11 24       	eor	r1, r1
    3a6e:	9f 57       	subi	r25, 0x7F	; 127
    3a70:	50 40       	sbci	r21, 0x00	; 0
    3a72:	9a f0       	brmi	.+38     	; 0x3a9a <__mulsf3_pse+0x88>
    3a74:	f1 f0       	breq	.+60     	; 0x3ab2 <__mulsf3_pse+0xa0>
    3a76:	88 23       	and	r24, r24
    3a78:	4a f0       	brmi	.+18     	; 0x3a8c <__mulsf3_pse+0x7a>
    3a7a:	ee 0f       	add	r30, r30
    3a7c:	ff 1f       	adc	r31, r31
    3a7e:	bb 1f       	adc	r27, r27
    3a80:	66 1f       	adc	r22, r22
    3a82:	77 1f       	adc	r23, r23
    3a84:	88 1f       	adc	r24, r24
    3a86:	91 50       	subi	r25, 0x01	; 1
    3a88:	50 40       	sbci	r21, 0x00	; 0
    3a8a:	a9 f7       	brne	.-22     	; 0x3a76 <__mulsf3_pse+0x64>
    3a8c:	9e 3f       	cpi	r25, 0xFE	; 254
    3a8e:	51 05       	cpc	r21, r1
    3a90:	80 f0       	brcs	.+32     	; 0x3ab2 <__mulsf3_pse+0xa0>
    3a92:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__fp_inf>
    3a96:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <__fp_szero>
    3a9a:	5f 3f       	cpi	r21, 0xFF	; 255
    3a9c:	e4 f3       	brlt	.-8      	; 0x3a96 <__mulsf3_pse+0x84>
    3a9e:	98 3e       	cpi	r25, 0xE8	; 232
    3aa0:	d4 f3       	brlt	.-12     	; 0x3a96 <__mulsf3_pse+0x84>
    3aa2:	86 95       	lsr	r24
    3aa4:	77 95       	ror	r23
    3aa6:	67 95       	ror	r22
    3aa8:	b7 95       	ror	r27
    3aaa:	f7 95       	ror	r31
    3aac:	e7 95       	ror	r30
    3aae:	9f 5f       	subi	r25, 0xFF	; 255
    3ab0:	c1 f7       	brne	.-16     	; 0x3aa2 <__mulsf3_pse+0x90>
    3ab2:	fe 2b       	or	r31, r30
    3ab4:	88 0f       	add	r24, r24
    3ab6:	91 1d       	adc	r25, r1
    3ab8:	96 95       	lsr	r25
    3aba:	87 95       	ror	r24
    3abc:	97 f9       	bld	r25, 7
    3abe:	08 95       	ret

00003ac0 <calloc>:
    3ac0:	0f 93       	push	r16
    3ac2:	1f 93       	push	r17
    3ac4:	cf 93       	push	r28
    3ac6:	df 93       	push	r29
    3ac8:	86 9f       	mul	r24, r22
    3aca:	80 01       	movw	r16, r0
    3acc:	87 9f       	mul	r24, r23
    3ace:	10 0d       	add	r17, r0
    3ad0:	96 9f       	mul	r25, r22
    3ad2:	10 0d       	add	r17, r0
    3ad4:	11 24       	eor	r1, r1
    3ad6:	c8 01       	movw	r24, r16
    3ad8:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <malloc>
    3adc:	ec 01       	movw	r28, r24
    3ade:	00 97       	sbiw	r24, 0x00	; 0
    3ae0:	29 f0       	breq	.+10     	; 0x3aec <calloc+0x2c>
    3ae2:	a8 01       	movw	r20, r16
    3ae4:	60 e0       	ldi	r22, 0x00	; 0
    3ae6:	70 e0       	ldi	r23, 0x00	; 0
    3ae8:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <memset>
    3aec:	ce 01       	movw	r24, r28
    3aee:	df 91       	pop	r29
    3af0:	cf 91       	pop	r28
    3af2:	1f 91       	pop	r17
    3af4:	0f 91       	pop	r16
    3af6:	08 95       	ret

00003af8 <malloc>:
    3af8:	cf 93       	push	r28
    3afa:	df 93       	push	r29
    3afc:	82 30       	cpi	r24, 0x02	; 2
    3afe:	91 05       	cpc	r25, r1
    3b00:	10 f4       	brcc	.+4      	; 0x3b06 <malloc+0xe>
    3b02:	82 e0       	ldi	r24, 0x02	; 2
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	e0 91 72 02 	lds	r30, 0x0272
    3b0a:	f0 91 73 02 	lds	r31, 0x0273
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	c0 e0       	ldi	r28, 0x00	; 0
    3b14:	d0 e0       	ldi	r29, 0x00	; 0
    3b16:	30 97       	sbiw	r30, 0x00	; 0
    3b18:	11 f1       	breq	.+68     	; 0x3b5e <malloc+0x66>
    3b1a:	40 81       	ld	r20, Z
    3b1c:	51 81       	ldd	r21, Z+1	; 0x01
    3b1e:	48 17       	cp	r20, r24
    3b20:	59 07       	cpc	r21, r25
    3b22:	c0 f0       	brcs	.+48     	; 0x3b54 <malloc+0x5c>
    3b24:	48 17       	cp	r20, r24
    3b26:	59 07       	cpc	r21, r25
    3b28:	61 f4       	brne	.+24     	; 0x3b42 <malloc+0x4a>
    3b2a:	82 81       	ldd	r24, Z+2	; 0x02
    3b2c:	93 81       	ldd	r25, Z+3	; 0x03
    3b2e:	20 97       	sbiw	r28, 0x00	; 0
    3b30:	19 f0       	breq	.+6      	; 0x3b38 <malloc+0x40>
    3b32:	9b 83       	std	Y+3, r25	; 0x03
    3b34:	8a 83       	std	Y+2, r24	; 0x02
    3b36:	2b c0       	rjmp	.+86     	; 0x3b8e <malloc+0x96>
    3b38:	90 93 73 02 	sts	0x0273, r25
    3b3c:	80 93 72 02 	sts	0x0272, r24
    3b40:	26 c0       	rjmp	.+76     	; 0x3b8e <malloc+0x96>
    3b42:	21 15       	cp	r18, r1
    3b44:	31 05       	cpc	r19, r1
    3b46:	19 f0       	breq	.+6      	; 0x3b4e <malloc+0x56>
    3b48:	42 17       	cp	r20, r18
    3b4a:	53 07       	cpc	r21, r19
    3b4c:	18 f4       	brcc	.+6      	; 0x3b54 <malloc+0x5c>
    3b4e:	9a 01       	movw	r18, r20
    3b50:	be 01       	movw	r22, r28
    3b52:	df 01       	movw	r26, r30
    3b54:	ef 01       	movw	r28, r30
    3b56:	02 80       	ldd	r0, Z+2	; 0x02
    3b58:	f3 81       	ldd	r31, Z+3	; 0x03
    3b5a:	e0 2d       	mov	r30, r0
    3b5c:	dc cf       	rjmp	.-72     	; 0x3b16 <malloc+0x1e>
    3b5e:	21 15       	cp	r18, r1
    3b60:	31 05       	cpc	r19, r1
    3b62:	09 f1       	breq	.+66     	; 0x3ba6 <malloc+0xae>
    3b64:	28 1b       	sub	r18, r24
    3b66:	39 0b       	sbc	r19, r25
    3b68:	24 30       	cpi	r18, 0x04	; 4
    3b6a:	31 05       	cpc	r19, r1
    3b6c:	90 f4       	brcc	.+36     	; 0x3b92 <malloc+0x9a>
    3b6e:	12 96       	adiw	r26, 0x02	; 2
    3b70:	8d 91       	ld	r24, X+
    3b72:	9c 91       	ld	r25, X
    3b74:	13 97       	sbiw	r26, 0x03	; 3
    3b76:	61 15       	cp	r22, r1
    3b78:	71 05       	cpc	r23, r1
    3b7a:	21 f0       	breq	.+8      	; 0x3b84 <malloc+0x8c>
    3b7c:	fb 01       	movw	r30, r22
    3b7e:	93 83       	std	Z+3, r25	; 0x03
    3b80:	82 83       	std	Z+2, r24	; 0x02
    3b82:	04 c0       	rjmp	.+8      	; 0x3b8c <malloc+0x94>
    3b84:	90 93 73 02 	sts	0x0273, r25
    3b88:	80 93 72 02 	sts	0x0272, r24
    3b8c:	fd 01       	movw	r30, r26
    3b8e:	32 96       	adiw	r30, 0x02	; 2
    3b90:	44 c0       	rjmp	.+136    	; 0x3c1a <malloc+0x122>
    3b92:	fd 01       	movw	r30, r26
    3b94:	e2 0f       	add	r30, r18
    3b96:	f3 1f       	adc	r31, r19
    3b98:	81 93       	st	Z+, r24
    3b9a:	91 93       	st	Z+, r25
    3b9c:	22 50       	subi	r18, 0x02	; 2
    3b9e:	31 09       	sbc	r19, r1
    3ba0:	2d 93       	st	X+, r18
    3ba2:	3c 93       	st	X, r19
    3ba4:	3a c0       	rjmp	.+116    	; 0x3c1a <malloc+0x122>
    3ba6:	20 91 70 02 	lds	r18, 0x0270
    3baa:	30 91 71 02 	lds	r19, 0x0271
    3bae:	23 2b       	or	r18, r19
    3bb0:	41 f4       	brne	.+16     	; 0x3bc2 <malloc+0xca>
    3bb2:	20 91 02 01 	lds	r18, 0x0102
    3bb6:	30 91 03 01 	lds	r19, 0x0103
    3bba:	30 93 71 02 	sts	0x0271, r19
    3bbe:	20 93 70 02 	sts	0x0270, r18
    3bc2:	20 91 00 01 	lds	r18, 0x0100
    3bc6:	30 91 01 01 	lds	r19, 0x0101
    3bca:	21 15       	cp	r18, r1
    3bcc:	31 05       	cpc	r19, r1
    3bce:	41 f4       	brne	.+16     	; 0x3be0 <malloc+0xe8>
    3bd0:	2d b7       	in	r18, 0x3d	; 61
    3bd2:	3e b7       	in	r19, 0x3e	; 62
    3bd4:	40 91 04 01 	lds	r20, 0x0104
    3bd8:	50 91 05 01 	lds	r21, 0x0105
    3bdc:	24 1b       	sub	r18, r20
    3bde:	35 0b       	sbc	r19, r21
    3be0:	e0 91 70 02 	lds	r30, 0x0270
    3be4:	f0 91 71 02 	lds	r31, 0x0271
    3be8:	e2 17       	cp	r30, r18
    3bea:	f3 07       	cpc	r31, r19
    3bec:	a0 f4       	brcc	.+40     	; 0x3c16 <malloc+0x11e>
    3bee:	2e 1b       	sub	r18, r30
    3bf0:	3f 0b       	sbc	r19, r31
    3bf2:	28 17       	cp	r18, r24
    3bf4:	39 07       	cpc	r19, r25
    3bf6:	78 f0       	brcs	.+30     	; 0x3c16 <malloc+0x11e>
    3bf8:	ac 01       	movw	r20, r24
    3bfa:	4e 5f       	subi	r20, 0xFE	; 254
    3bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    3bfe:	24 17       	cp	r18, r20
    3c00:	35 07       	cpc	r19, r21
    3c02:	48 f0       	brcs	.+18     	; 0x3c16 <malloc+0x11e>
    3c04:	4e 0f       	add	r20, r30
    3c06:	5f 1f       	adc	r21, r31
    3c08:	50 93 71 02 	sts	0x0271, r21
    3c0c:	40 93 70 02 	sts	0x0270, r20
    3c10:	81 93       	st	Z+, r24
    3c12:	91 93       	st	Z+, r25
    3c14:	02 c0       	rjmp	.+4      	; 0x3c1a <malloc+0x122>
    3c16:	e0 e0       	ldi	r30, 0x00	; 0
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	cf 01       	movw	r24, r30
    3c1c:	df 91       	pop	r29
    3c1e:	cf 91       	pop	r28
    3c20:	08 95       	ret

00003c22 <free>:
    3c22:	0f 93       	push	r16
    3c24:	1f 93       	push	r17
    3c26:	cf 93       	push	r28
    3c28:	df 93       	push	r29
    3c2a:	00 97       	sbiw	r24, 0x00	; 0
    3c2c:	09 f4       	brne	.+2      	; 0x3c30 <free+0xe>
    3c2e:	8c c0       	rjmp	.+280    	; 0x3d48 <free+0x126>
    3c30:	fc 01       	movw	r30, r24
    3c32:	32 97       	sbiw	r30, 0x02	; 2
    3c34:	13 82       	std	Z+3, r1	; 0x03
    3c36:	12 82       	std	Z+2, r1	; 0x02
    3c38:	00 91 72 02 	lds	r16, 0x0272
    3c3c:	10 91 73 02 	lds	r17, 0x0273
    3c40:	01 15       	cp	r16, r1
    3c42:	11 05       	cpc	r17, r1
    3c44:	81 f4       	brne	.+32     	; 0x3c66 <free+0x44>
    3c46:	20 81       	ld	r18, Z
    3c48:	31 81       	ldd	r19, Z+1	; 0x01
    3c4a:	82 0f       	add	r24, r18
    3c4c:	93 1f       	adc	r25, r19
    3c4e:	20 91 70 02 	lds	r18, 0x0270
    3c52:	30 91 71 02 	lds	r19, 0x0271
    3c56:	28 17       	cp	r18, r24
    3c58:	39 07       	cpc	r19, r25
    3c5a:	79 f5       	brne	.+94     	; 0x3cba <free+0x98>
    3c5c:	f0 93 71 02 	sts	0x0271, r31
    3c60:	e0 93 70 02 	sts	0x0270, r30
    3c64:	71 c0       	rjmp	.+226    	; 0x3d48 <free+0x126>
    3c66:	d8 01       	movw	r26, r16
    3c68:	40 e0       	ldi	r20, 0x00	; 0
    3c6a:	50 e0       	ldi	r21, 0x00	; 0
    3c6c:	ae 17       	cp	r26, r30
    3c6e:	bf 07       	cpc	r27, r31
    3c70:	50 f4       	brcc	.+20     	; 0x3c86 <free+0x64>
    3c72:	12 96       	adiw	r26, 0x02	; 2
    3c74:	2d 91       	ld	r18, X+
    3c76:	3c 91       	ld	r19, X
    3c78:	13 97       	sbiw	r26, 0x03	; 3
    3c7a:	ad 01       	movw	r20, r26
    3c7c:	21 15       	cp	r18, r1
    3c7e:	31 05       	cpc	r19, r1
    3c80:	09 f1       	breq	.+66     	; 0x3cc4 <free+0xa2>
    3c82:	d9 01       	movw	r26, r18
    3c84:	f3 cf       	rjmp	.-26     	; 0x3c6c <free+0x4a>
    3c86:	9d 01       	movw	r18, r26
    3c88:	da 01       	movw	r26, r20
    3c8a:	33 83       	std	Z+3, r19	; 0x03
    3c8c:	22 83       	std	Z+2, r18	; 0x02
    3c8e:	60 81       	ld	r22, Z
    3c90:	71 81       	ldd	r23, Z+1	; 0x01
    3c92:	86 0f       	add	r24, r22
    3c94:	97 1f       	adc	r25, r23
    3c96:	82 17       	cp	r24, r18
    3c98:	93 07       	cpc	r25, r19
    3c9a:	69 f4       	brne	.+26     	; 0x3cb6 <free+0x94>
    3c9c:	ec 01       	movw	r28, r24
    3c9e:	28 81       	ld	r18, Y
    3ca0:	39 81       	ldd	r19, Y+1	; 0x01
    3ca2:	26 0f       	add	r18, r22
    3ca4:	37 1f       	adc	r19, r23
    3ca6:	2e 5f       	subi	r18, 0xFE	; 254
    3ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    3caa:	31 83       	std	Z+1, r19	; 0x01
    3cac:	20 83       	st	Z, r18
    3cae:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb2:	93 83       	std	Z+3, r25	; 0x03
    3cb4:	82 83       	std	Z+2, r24	; 0x02
    3cb6:	45 2b       	or	r20, r21
    3cb8:	29 f4       	brne	.+10     	; 0x3cc4 <free+0xa2>
    3cba:	f0 93 73 02 	sts	0x0273, r31
    3cbe:	e0 93 72 02 	sts	0x0272, r30
    3cc2:	42 c0       	rjmp	.+132    	; 0x3d48 <free+0x126>
    3cc4:	13 96       	adiw	r26, 0x03	; 3
    3cc6:	fc 93       	st	X, r31
    3cc8:	ee 93       	st	-X, r30
    3cca:	12 97       	sbiw	r26, 0x02	; 2
    3ccc:	ed 01       	movw	r28, r26
    3cce:	49 91       	ld	r20, Y+
    3cd0:	59 91       	ld	r21, Y+
    3cd2:	9e 01       	movw	r18, r28
    3cd4:	24 0f       	add	r18, r20
    3cd6:	35 1f       	adc	r19, r21
    3cd8:	e2 17       	cp	r30, r18
    3cda:	f3 07       	cpc	r31, r19
    3cdc:	71 f4       	brne	.+28     	; 0x3cfa <free+0xd8>
    3cde:	80 81       	ld	r24, Z
    3ce0:	91 81       	ldd	r25, Z+1	; 0x01
    3ce2:	84 0f       	add	r24, r20
    3ce4:	95 1f       	adc	r25, r21
    3ce6:	02 96       	adiw	r24, 0x02	; 2
    3ce8:	11 96       	adiw	r26, 0x01	; 1
    3cea:	9c 93       	st	X, r25
    3cec:	8e 93       	st	-X, r24
    3cee:	82 81       	ldd	r24, Z+2	; 0x02
    3cf0:	93 81       	ldd	r25, Z+3	; 0x03
    3cf2:	13 96       	adiw	r26, 0x03	; 3
    3cf4:	9c 93       	st	X, r25
    3cf6:	8e 93       	st	-X, r24
    3cf8:	12 97       	sbiw	r26, 0x02	; 2
    3cfa:	e0 e0       	ldi	r30, 0x00	; 0
    3cfc:	f0 e0       	ldi	r31, 0x00	; 0
    3cfe:	d8 01       	movw	r26, r16
    3d00:	12 96       	adiw	r26, 0x02	; 2
    3d02:	8d 91       	ld	r24, X+
    3d04:	9c 91       	ld	r25, X
    3d06:	13 97       	sbiw	r26, 0x03	; 3
    3d08:	00 97       	sbiw	r24, 0x00	; 0
    3d0a:	19 f0       	breq	.+6      	; 0x3d12 <free+0xf0>
    3d0c:	f8 01       	movw	r30, r16
    3d0e:	8c 01       	movw	r16, r24
    3d10:	f6 cf       	rjmp	.-20     	; 0x3cfe <free+0xdc>
    3d12:	8d 91       	ld	r24, X+
    3d14:	9c 91       	ld	r25, X
    3d16:	98 01       	movw	r18, r16
    3d18:	2e 5f       	subi	r18, 0xFE	; 254
    3d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d1c:	82 0f       	add	r24, r18
    3d1e:	93 1f       	adc	r25, r19
    3d20:	20 91 70 02 	lds	r18, 0x0270
    3d24:	30 91 71 02 	lds	r19, 0x0271
    3d28:	28 17       	cp	r18, r24
    3d2a:	39 07       	cpc	r19, r25
    3d2c:	69 f4       	brne	.+26     	; 0x3d48 <free+0x126>
    3d2e:	30 97       	sbiw	r30, 0x00	; 0
    3d30:	29 f4       	brne	.+10     	; 0x3d3c <free+0x11a>
    3d32:	10 92 73 02 	sts	0x0273, r1
    3d36:	10 92 72 02 	sts	0x0272, r1
    3d3a:	02 c0       	rjmp	.+4      	; 0x3d40 <free+0x11e>
    3d3c:	13 82       	std	Z+3, r1	; 0x03
    3d3e:	12 82       	std	Z+2, r1	; 0x02
    3d40:	10 93 71 02 	sts	0x0271, r17
    3d44:	00 93 70 02 	sts	0x0270, r16
    3d48:	df 91       	pop	r29
    3d4a:	cf 91       	pop	r28
    3d4c:	1f 91       	pop	r17
    3d4e:	0f 91       	pop	r16
    3d50:	08 95       	ret

00003d52 <memset>:
    3d52:	dc 01       	movw	r26, r24
    3d54:	01 c0       	rjmp	.+2      	; 0x3d58 <memset+0x6>
    3d56:	6d 93       	st	X+, r22
    3d58:	41 50       	subi	r20, 0x01	; 1
    3d5a:	50 40       	sbci	r21, 0x00	; 0
    3d5c:	e0 f7       	brcc	.-8      	; 0x3d56 <memset+0x4>
    3d5e:	08 95       	ret

00003d60 <_exit>:
    3d60:	f8 94       	cli

00003d62 <__stop_program>:
    3d62:	ff cf       	rjmp	.-2      	; 0x3d62 <__stop_program>
