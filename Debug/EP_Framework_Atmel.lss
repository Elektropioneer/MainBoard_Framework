
EP_Framework_Atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000041b4  00004248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000154  0080012e  0080012e  00004276  2**0
                  ALLOC
  3 .stab         0000618c  00000000  00000000  00004278  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000200c  00000000  00000000  0000a404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000c410  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000c424  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__vector_8>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 10 16 	jmp	0x2c20	; 0x2c20 <__vector_23>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__vector_32>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__vector_34>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 eb       	ldi	r30, 0xB4	; 180
      a8:	f1 e4       	ldi	r31, 0x41	; 65
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 32       	cpi	r26, 0x2E	; 46
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	ae e2       	ldi	r26, 0x2E	; 46
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a2 38       	cpi	r26, 0x82	; 130
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <main>
      ce:	0c 94 d8 20 	jmp	0x41b0	; 0x41b0 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <send_arduino>:
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	00 d0       	rcall	.+0      	; 0xdc <send_arduino+0x6>
      dc:	1f 92       	push	r1
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	89 83       	std	Y+1, r24	; 0x01
      e4:	6a 83       	std	Y+2, r22	; 0x02
      e6:	4b 83       	std	Y+3, r20	; 0x03
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	0e 94 75 18 	call	0x30ea	; 0x30ea <UART1_Write>
      ee:	8a 81       	ldd	r24, Y+2	; 0x02
      f0:	0e 94 75 18 	call	0x30ea	; 0x30ea <UART1_Write>
      f4:	8b 81       	ldd	r24, Y+3	; 0x03
      f6:	0e 94 75 18 	call	0x30ea	; 0x30ea <UART1_Write>
      fa:	88 e5       	ldi	r24, 0x58	; 88
      fc:	0e 94 75 18 	call	0x30ea	; 0x30ea <UART1_Write>
     100:	0f 90       	pop	r0
     102:	0f 90       	pop	r0
     104:	0f 90       	pop	r0
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <get_arduino>:
 * 	Function: 	 unsigned char get_arduino(unsigned char type, unsigned char id)
 * 	Description: Gets status of the device
 * 	Parameters:	 unsigned char type - the type of device ('R', 'M', 'S')
 * 				 unsigned char id   - the id of the device 1-x
 */
unsigned char get_arduino(unsigned char type, unsigned char id) {
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	00 d0       	rcall	.+0      	; 0x112 <get_arduino+0x6>
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	89 83       	std	Y+1, r24	; 0x01
     118:	6a 83       	std	Y+2, r22	; 0x02
	send_arduino('G',type,(unsigned char)id);	// send the "get data protocol"
     11a:	4a 81       	ldd	r20, Y+2	; 0x02
     11c:	69 81       	ldd	r22, Y+1	; 0x01
     11e:	87 e4       	ldi	r24, 0x47	; 71
     120:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_arduino>
	UART1_Read();								// read (because it is sending 2x)
     124:	0e 94 c3 18 	call	0x3186	; 0x3186 <UART1_Read>

	return UART1_Read();						// return the read
     128:	0e 94 c3 18 	call	0x3186	; 0x3186 <UART1_Read>

}
     12c:	0f 90       	pop	r0
     12e:	0f 90       	pop	r0
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	08 95       	ret

00000136 <AX_UART_Init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "ax.h"

void AX_UART_Init(void)
{
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
     13e:	2e 97       	sbiw	r28, 0x0e	; 14
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRD &= ~((1 << 2) | (1 << 3));
     14a:	8a e2       	ldi	r24, 0x2A	; 42
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	2a e2       	ldi	r18, 0x2A	; 42
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	f9 01       	movw	r30, r18
     154:	20 81       	ld	r18, Z
     156:	23 7f       	andi	r18, 0xF3	; 243
     158:	fc 01       	movw	r30, r24
     15a:	20 83       	st	Z, r18
	//PORTE = 0;
	UCSR1A = 0;
     15c:	88 ec       	ldi	r24, 0xC8	; 200
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	fc 01       	movw	r30, r24
     162:	10 82       	st	Z, r1
	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
     164:	89 ec       	ldi	r24, 0xC9	; 201
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	28 e1       	ldi	r18, 0x18	; 24
     16a:	fc 01       	movw	r30, r24
     16c:	20 83       	st	Z, r18
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
     16e:	8a ec       	ldi	r24, 0xCA	; 202
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	26 e0       	ldi	r18, 0x06	; 6
     174:	fc 01       	movw	r30, r24
     176:	20 83       	st	Z, r18

	UBRR1H = 0;
     178:	8d ec       	ldi	r24, 0xCD	; 205
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	fc 01       	movw	r30, r24
     17e:	10 82       	st	Z, r1
	UBRR1L = 5;
     180:	8c ec       	ldi	r24, 0xCC	; 204
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	25 e0       	ldi	r18, 0x05	; 5
     186:	fc 01       	movw	r30, r24
     188:	20 83       	st	Z, r18
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	a8 ec       	ldi	r26, 0xC8	; 200
     190:	b2 e4       	ldi	r27, 0x42	; 66
     192:	89 83       	std	Y+1, r24	; 0x01
     194:	9a 83       	std	Y+2, r25	; 0x02
     196:	ab 83       	std	Y+3, r26	; 0x03
     198:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     19a:	20 e0       	ldi	r18, 0x00	; 0
     19c:	30 e4       	ldi	r19, 0x40	; 64
     19e:	4c e1       	ldi	r20, 0x1C	; 28
     1a0:	55 e4       	ldi	r21, 0x45	; 69
     1a2:	69 81       	ldd	r22, Y+1	; 0x01
     1a4:	7a 81       	ldd	r23, Y+2	; 0x02
     1a6:	8b 81       	ldd	r24, Y+3	; 0x03
     1a8:	9c 81       	ldd	r25, Y+4	; 0x04
     1aa:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
     1ae:	dc 01       	movw	r26, r24
     1b0:	cb 01       	movw	r24, r22
     1b2:	8d 83       	std	Y+5, r24	; 0x05
     1b4:	9e 83       	std	Y+6, r25	; 0x06
     1b6:	af 83       	std	Y+7, r26	; 0x07
     1b8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	40 e8       	ldi	r20, 0x80	; 128
     1c0:	5f e3       	ldi	r21, 0x3F	; 63
     1c2:	6d 81       	ldd	r22, Y+5	; 0x05
     1c4:	7e 81       	ldd	r23, Y+6	; 0x06
     1c6:	8f 81       	ldd	r24, Y+7	; 0x07
     1c8:	98 85       	ldd	r25, Y+8	; 0x08
     1ca:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
     1ce:	88 23       	and	r24, r24
     1d0:	2c f4       	brge	.+10     	; 0x1dc <AX_UART_Init+0xa6>
		__ticks = 1;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	9a 87       	std	Y+10, r25	; 0x0a
     1d8:	89 87       	std	Y+9, r24	; 0x09
     1da:	3f c0       	rjmp	.+126    	; 0x25a <AX_UART_Init+0x124>
	else if (__tmp > 65535)
     1dc:	20 e0       	ldi	r18, 0x00	; 0
     1de:	3f ef       	ldi	r19, 0xFF	; 255
     1e0:	4f e7       	ldi	r20, 0x7F	; 127
     1e2:	57 e4       	ldi	r21, 0x47	; 71
     1e4:	6d 81       	ldd	r22, Y+5	; 0x05
     1e6:	7e 81       	ldd	r23, Y+6	; 0x06
     1e8:	8f 81       	ldd	r24, Y+7	; 0x07
     1ea:	98 85       	ldd	r25, Y+8	; 0x08
     1ec:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
     1f0:	18 16       	cp	r1, r24
     1f2:	4c f5       	brge	.+82     	; 0x246 <AX_UART_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	40 e2       	ldi	r20, 0x20	; 32
     1fa:	51 e4       	ldi	r21, 0x41	; 65
     1fc:	69 81       	ldd	r22, Y+1	; 0x01
     1fe:	7a 81       	ldd	r23, Y+2	; 0x02
     200:	8b 81       	ldd	r24, Y+3	; 0x03
     202:	9c 81       	ldd	r25, Y+4	; 0x04
     204:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
     208:	dc 01       	movw	r26, r24
     20a:	cb 01       	movw	r24, r22
     20c:	bc 01       	movw	r22, r24
     20e:	cd 01       	movw	r24, r26
     210:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
     218:	9a 87       	std	Y+10, r25	; 0x0a
     21a:	89 87       	std	Y+9, r24	; 0x09
     21c:	0f c0       	rjmp	.+30     	; 0x23c <AX_UART_Init+0x106>
     21e:	8a ef       	ldi	r24, 0xFA	; 250
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	9c 87       	std	Y+12, r25	; 0x0c
     224:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     226:	8b 85       	ldd	r24, Y+11	; 0x0b
     228:	9c 85       	ldd	r25, Y+12	; 0x0c
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <AX_UART_Init+0xf4>
     22e:	9c 87       	std	Y+12, r25	; 0x0c
     230:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     232:	89 85       	ldd	r24, Y+9	; 0x09
     234:	9a 85       	ldd	r25, Y+10	; 0x0a
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	9a 87       	std	Y+10, r25	; 0x0a
     23a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     23c:	89 85       	ldd	r24, Y+9	; 0x09
     23e:	9a 85       	ldd	r25, Y+10	; 0x0a
     240:	89 2b       	or	r24, r25
     242:	69 f7       	brne	.-38     	; 0x21e <AX_UART_Init+0xe8>
     244:	14 c0       	rjmp	.+40     	; 0x26e <AX_UART_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     246:	6d 81       	ldd	r22, Y+5	; 0x05
     248:	7e 81       	ldd	r23, Y+6	; 0x06
     24a:	8f 81       	ldd	r24, Y+7	; 0x07
     24c:	98 85       	ldd	r25, Y+8	; 0x08
     24e:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
     252:	dc 01       	movw	r26, r24
     254:	cb 01       	movw	r24, r22
     256:	9a 87       	std	Y+10, r25	; 0x0a
     258:	89 87       	std	Y+9, r24	; 0x09
     25a:	89 85       	ldd	r24, Y+9	; 0x09
     25c:	9a 85       	ldd	r25, Y+10	; 0x0a
     25e:	9e 87       	std	Y+14, r25	; 0x0e
     260:	8d 87       	std	Y+13, r24	; 0x0d
     262:	8d 85       	ldd	r24, Y+13	; 0x0d
     264:	9e 85       	ldd	r25, Y+14	; 0x0e
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <AX_UART_Init+0x130>
     26a:	9e 87       	std	Y+14, r25	; 0x0e
     26c:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);
}
     26e:	2e 96       	adiw	r28, 0x0e	; 14
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	f8 94       	cli
     274:	de bf       	out	0x3e, r29	; 62
     276:	0f be       	out	0x3f, r0	; 63
     278:	cd bf       	out	0x3d, r28	; 61
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	1f 92       	push	r1
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1<<UDRE1)) );
     28c:	00 00       	nop
     28e:	88 ec       	ldi	r24, 0xC8	; 200
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	fc 01       	movw	r30, r24
     294:	80 81       	ld	r24, Z
     296:	88 2f       	mov	r24, r24
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	80 72       	andi	r24, 0x20	; 32
     29c:	99 27       	eor	r25, r25
     29e:	89 2b       	or	r24, r25
     2a0:	b1 f3       	breq	.-20     	; 0x28e <AX_SendChar+0xe>
	UDR1 = data;
     2a2:	8e ec       	ldi	r24, 0xCE	; 206
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	29 81       	ldd	r18, Y+1	; 0x01
     2a8:	fc 01       	movw	r30, r24
     2aa:	20 83       	st	Z, r18
}
     2ac:	0f 90       	pop	r0
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <AX_ReadChar>:
unsigned char AX_ReadChar(void)
{
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
   //UART1_Write('I');
   while( !( UCSR1A & (1<< RXC1)) );
     2bc:	00 00       	nop
     2be:	88 ec       	ldi	r24, 0xC8	; 200
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	fc 01       	movw	r30, r24
     2c4:	80 81       	ld	r24, Z
     2c6:	88 23       	and	r24, r24
     2c8:	d4 f7       	brge	.-12     	; 0x2be <AX_ReadChar+0xa>
   return UDR1;
     2ca:	8e ec       	ldi	r24, 0xCE	; 206
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	fc 01       	movw	r30, r24
     2d0:	80 81       	ld	r24, Z
}
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <AX_ReadStatus>:
/*************************************************************************************************************************************************************************************
*															 Funkcije za upravljanje AX-12A servoima                                                                                                                                      *
*************************************************************************************************************************************************************************************/

void AX_ReadStatus(void)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	27 97       	sbiw	r28, 0x07	; 7
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	cd bf       	out	0x3d, r28	; 61
	 unsigned char status[7] = {0,0,0,0,0,0};
     2ec:	27 e0       	ldi	r18, 0x07	; 7
     2ee:	ce 01       	movw	r24, r28
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	fc 01       	movw	r30, r24
     2f4:	32 2f       	mov	r19, r18
     2f6:	11 92       	st	Z+, r1
     2f8:	3a 95       	dec	r19
     2fa:	e9 f7       	brne	.-6      	; 0x2f6 <AX_ReadStatus+0x1e>

	status[0] = AX_ReadChar();
     2fc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <AX_ReadChar>
     300:	89 83       	std	Y+1, r24	; 0x01
	status[1] = AX_ReadChar();
     302:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <AX_ReadChar>
     306:	8a 83       	std	Y+2, r24	; 0x02
	status[2] = AX_ReadChar();
     308:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <AX_ReadChar>
     30c:	8b 83       	std	Y+3, r24	; 0x03
	status[3] = AX_ReadChar();
     30e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <AX_ReadChar>
     312:	8c 83       	std	Y+4, r24	; 0x04
	status[4] = AX_ReadChar();
     314:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <AX_ReadChar>
     318:	8d 83       	std	Y+5, r24	; 0x05
	status[5] = AX_ReadChar();
     31a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <AX_ReadChar>
     31e:	8e 83       	std	Y+6, r24	; 0x06
}
     320:	27 96       	adiw	r28, 0x07	; 7
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	de bf       	out	0x3e, r29	; 62
     328:	0f be       	out	0x3f, r0	; 63
     32a:	cd bf       	out	0x3d, r28	; 61
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	08 95       	ret

00000332 <AX_StopTransmitter>:

void AX_StopTransmitter(void)
{
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
	while( !(UCSR1A & (1<<TXC1)) );
     33a:	00 00       	nop
     33c:	88 ec       	ldi	r24, 0xC8	; 200
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	fc 01       	movw	r30, r24
     342:	80 81       	ld	r24, Z
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	80 74       	andi	r24, 0x40	; 64
     34a:	99 27       	eor	r25, r25
     34c:	89 2b       	or	r24, r25
     34e:	b1 f3       	breq	.-20     	; 0x33c <AX_StopTransmitter+0xa>
	UCSR1B &= 0xF7;
     350:	89 ec       	ldi	r24, 0xC9	; 201
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	29 ec       	ldi	r18, 0xC9	; 201
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	f9 01       	movw	r30, r18
     35a:	20 81       	ld	r18, Z
     35c:	27 7f       	andi	r18, 0xF7	; 247
     35e:	fc 01       	movw	r30, r24
     360:	20 83       	st	Z, r18
	UCSR1A |= 0x40;
     362:	88 ec       	ldi	r24, 0xC8	; 200
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	28 ec       	ldi	r18, 0xC8	; 200
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	f9 01       	movw	r30, r18
     36c:	20 81       	ld	r18, Z
     36e:	20 64       	ori	r18, 0x40	; 64
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
}
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x08;
     382:	89 ec       	ldi	r24, 0xC9	; 201
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	29 ec       	ldi	r18, 0xC9	; 201
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	f9 01       	movw	r30, r18
     38c:	20 81       	ld	r18, Z
     38e:	28 60       	ori	r18, 0x08	; 8
     390:	fc 01       	movw	r30, r24
     392:	20 83       	st	Z, r18
}
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <AX_StopReceiver>:

void AX_StopReceiver(void)
{
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
	UCSR1B &= 0xEF;
     3a2:	89 ec       	ldi	r24, 0xC9	; 201
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	29 ec       	ldi	r18, 0xC9	; 201
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	f9 01       	movw	r30, r18
     3ac:	20 81       	ld	r18, Z
     3ae:	2f 7e       	andi	r18, 0xEF	; 239
     3b0:	fc 01       	movw	r30, r24
     3b2:	20 83       	st	Z, r18
}
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	08 95       	ret

000003ba <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x10;
     3c2:	89 ec       	ldi	r24, 0xC9	; 201
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	29 ec       	ldi	r18, 0xC9	; 201
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	f9 01       	movw	r30, r18
     3cc:	20 81       	ld	r18, Z
     3ce:	20 61       	ori	r18, 0x10	; 16
     3d0:	fc 01       	movw	r30, r24
     3d2:	20 83       	st	Z, r18
}
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	6a 97       	sbiw	r28, 0x1a	; 26
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	9e 8b       	std	Y+22, r25	; 0x16
     3f0:	8d 8b       	std	Y+21, r24	; 0x15
     3f2:	78 8f       	std	Y+24, r23	; 0x18
     3f4:	6f 8b       	std	Y+23, r22	; 0x17
     3f6:	49 8f       	std	Y+25, r20	; 0x19
     3f8:	2a 8f       	std	Y+26, r18	; 0x1a
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;

	angle = (unsigned int)(1023 *((double)angle/300.0));
     3fa:	8d 89       	ldd	r24, Y+21	; 0x15
     3fc:	9e 89       	ldd	r25, Y+22	; 0x16
     3fe:	cc 01       	movw	r24, r24
     400:	a0 e0       	ldi	r26, 0x00	; 0
     402:	b0 e0       	ldi	r27, 0x00	; 0
     404:	bc 01       	movw	r22, r24
     406:	cd 01       	movw	r24, r26
     408:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__floatunsisf>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	46 e9       	ldi	r20, 0x96	; 150
     416:	53 e4       	ldi	r21, 0x43	; 67
     418:	bc 01       	movw	r22, r24
     41a:	cd 01       	movw	r24, r26
     41c:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__divsf3>
     420:	dc 01       	movw	r26, r24
     422:	cb 01       	movw	r24, r22
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 ec       	ldi	r19, 0xC0	; 192
     428:	4f e7       	ldi	r20, 0x7F	; 127
     42a:	54 e4       	ldi	r21, 0x44	; 68
     42c:	bc 01       	movw	r22, r24
     42e:	cd 01       	movw	r24, r26
     430:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
     434:	dc 01       	movw	r26, r24
     436:	cb 01       	movw	r24, r22
     438:	bc 01       	movw	r22, r24
     43a:	cd 01       	movw	r24, r26
     43c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
     440:	dc 01       	movw	r26, r24
     442:	cb 01       	movw	r24, r22
     444:	9e 8b       	std	Y+22, r25	; 0x16
     446:	8d 8b       	std	Y+21, r24	; 0x15

	angle_H = (unsigned char)(angle >> 8);
     448:	8d 89       	ldd	r24, Y+21	; 0x15
     44a:	9e 89       	ldd	r25, Y+22	; 0x16
     44c:	89 2f       	mov	r24, r25
     44e:	99 27       	eor	r25, r25
     450:	89 83       	std	Y+1, r24	; 0x01
	angle_L = (unsigned char)(angle & 0x00FF);
     452:	8d 89       	ldd	r24, Y+21	; 0x15
     454:	8a 83       	std	Y+2, r24	; 0x02

	speed |= (direction << 10);
     456:	89 8d       	ldd	r24, Y+25	; 0x19
     458:	88 2f       	mov	r24, r24
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	98 2f       	mov	r25, r24
     45e:	88 27       	eor	r24, r24
     460:	99 0f       	add	r25, r25
     462:	99 0f       	add	r25, r25
     464:	9c 01       	movw	r18, r24
     466:	8f 89       	ldd	r24, Y+23	; 0x17
     468:	98 8d       	ldd	r25, Y+24	; 0x18
     46a:	82 2b       	or	r24, r18
     46c:	93 2b       	or	r25, r19
     46e:	98 8f       	std	Y+24, r25	; 0x18
     470:	8f 8b       	std	Y+23, r24	; 0x17
	speed_H = (unsigned char)(speed >> 8);
     472:	8f 89       	ldd	r24, Y+23	; 0x17
     474:	98 8d       	ldd	r25, Y+24	; 0x18
     476:	89 2f       	mov	r24, r25
     478:	99 27       	eor	r25, r25
     47a:	8b 83       	std	Y+3, r24	; 0x03
	speed_L = (unsigned char)(speed & 0x00FF);
     47c:	8f 89       	ldd	r24, Y+23	; 0x17
     47e:	8c 83       	std	Y+4, r24	; 0x04

	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
     480:	8a 8d       	ldd	r24, Y+26	; 0x1a
     482:	88 2f       	mov	r24, r24
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	9c 01       	movw	r18, r24
     488:	28 5d       	subi	r18, 0xD8	; 216
     48a:	3f 4f       	sbci	r19, 0xFF	; 255
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	88 2f       	mov	r24, r24
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	28 0f       	add	r18, r24
     494:	39 1f       	adc	r19, r25
     496:	8c 81       	ldd	r24, Y+4	; 0x04
     498:	88 2f       	mov	r24, r24
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	28 0f       	add	r18, r24
     49e:	39 1f       	adc	r19, r25
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	88 2f       	mov	r24, r24
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	28 0f       	add	r18, r24
     4a8:	39 1f       	adc	r19, r25
     4aa:	8a 81       	ldd	r24, Y+2	; 0x02
     4ac:	88 2f       	mov	r24, r24
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	82 0f       	add	r24, r18
     4b2:	93 1f       	adc	r25, r19
     4b4:	80 95       	com	r24
     4b6:	90 95       	com	r25
     4b8:	9e 83       	std	Y+6, r25	; 0x06
     4ba:	8d 83       	std	Y+5, r24	; 0x05

	AX_StopReceiver();
     4bc:	0e 94 cd 01 	call	0x39a	; 0x39a <AX_StopReceiver>

	AX_SendChar(START);
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(START);
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(id);
     4cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     4ce:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(LENGTH);
     4d2:	87 e0       	ldi	r24, 0x07	; 7
     4d4:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(INSTR);
     4d8:	83 e0       	ldi	r24, 0x03	; 3
     4da:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(ADDRESS);
     4de:	8e e1       	ldi	r24, 0x1E	; 30
     4e0:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(angle_L);
     4e4:	8a 81       	ldd	r24, Y+2	; 0x02
     4e6:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(angle_H);
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(speed_L);
     4f0:	8c 81       	ldd	r24, Y+4	; 0x04
     4f2:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(speed_H);
     4f6:	8b 81       	ldd	r24, Y+3	; 0x03
     4f8:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(checksum);
     4fc:	8d 81       	ldd	r24, Y+5	; 0x05
     4fe:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>

	AX_StopTransmitter();
     502:	0e 94 99 01 	call	0x332	; 0x332 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     506:	0e 94 dd 01 	call	0x3ba	; 0x3ba <AX_ReleaseReceiver>
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	a8 e4       	ldi	r26, 0x48	; 72
     510:	b2 e4       	ldi	r27, 0x42	; 66
     512:	8f 83       	std	Y+7, r24	; 0x07
     514:	98 87       	std	Y+8, r25	; 0x08
     516:	a9 87       	std	Y+9, r26	; 0x09
     518:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e4       	ldi	r19, 0x40	; 64
     51e:	4c e1       	ldi	r20, 0x1C	; 28
     520:	55 e4       	ldi	r21, 0x45	; 69
     522:	6f 81       	ldd	r22, Y+7	; 0x07
     524:	78 85       	ldd	r23, Y+8	; 0x08
     526:	89 85       	ldd	r24, Y+9	; 0x09
     528:	9a 85       	ldd	r25, Y+10	; 0x0a
     52a:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	8b 87       	std	Y+11, r24	; 0x0b
     534:	9c 87       	std	Y+12, r25	; 0x0c
     536:	ad 87       	std	Y+13, r26	; 0x0d
     538:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 e8       	ldi	r20, 0x80	; 128
     540:	5f e3       	ldi	r21, 0x3F	; 63
     542:	6b 85       	ldd	r22, Y+11	; 0x0b
     544:	7c 85       	ldd	r23, Y+12	; 0x0c
     546:	8d 85       	ldd	r24, Y+13	; 0x0d
     548:	9e 85       	ldd	r25, Y+14	; 0x0e
     54a:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
     54e:	88 23       	and	r24, r24
     550:	2c f4       	brge	.+10     	; 0x55c <AX_SetAngle+0x182>
		__ticks = 1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	98 8b       	std	Y+16, r25	; 0x10
     558:	8f 87       	std	Y+15, r24	; 0x0f
     55a:	3f c0       	rjmp	.+126    	; 0x5da <AX_SetAngle+0x200>
	else if (__tmp > 65535)
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	3f ef       	ldi	r19, 0xFF	; 255
     560:	4f e7       	ldi	r20, 0x7F	; 127
     562:	57 e4       	ldi	r21, 0x47	; 71
     564:	6b 85       	ldd	r22, Y+11	; 0x0b
     566:	7c 85       	ldd	r23, Y+12	; 0x0c
     568:	8d 85       	ldd	r24, Y+13	; 0x0d
     56a:	9e 85       	ldd	r25, Y+14	; 0x0e
     56c:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
     570:	18 16       	cp	r1, r24
     572:	4c f5       	brge	.+82     	; 0x5c6 <AX_SetAngle+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	40 e2       	ldi	r20, 0x20	; 32
     57a:	51 e4       	ldi	r21, 0x41	; 65
     57c:	6f 81       	ldd	r22, Y+7	; 0x07
     57e:	78 85       	ldd	r23, Y+8	; 0x08
     580:	89 85       	ldd	r24, Y+9	; 0x09
     582:	9a 85       	ldd	r25, Y+10	; 0x0a
     584:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	bc 01       	movw	r22, r24
     58e:	cd 01       	movw	r24, r26
     590:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	98 8b       	std	Y+16, r25	; 0x10
     59a:	8f 87       	std	Y+15, r24	; 0x0f
     59c:	0f c0       	rjmp	.+30     	; 0x5bc <AX_SetAngle+0x1e2>
     59e:	8a ef       	ldi	r24, 0xFA	; 250
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	9a 8b       	std	Y+18, r25	; 0x12
     5a4:	89 8b       	std	Y+17, r24	; 0x11
     5a6:	89 89       	ldd	r24, Y+17	; 0x11
     5a8:	9a 89       	ldd	r25, Y+18	; 0x12
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <AX_SetAngle+0x1d0>
     5ae:	9a 8b       	std	Y+18, r25	; 0x12
     5b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5b2:	8f 85       	ldd	r24, Y+15	; 0x0f
     5b4:	98 89       	ldd	r25, Y+16	; 0x10
     5b6:	01 97       	sbiw	r24, 0x01	; 1
     5b8:	98 8b       	std	Y+16, r25	; 0x10
     5ba:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5bc:	8f 85       	ldd	r24, Y+15	; 0x0f
     5be:	98 89       	ldd	r25, Y+16	; 0x10
     5c0:	89 2b       	or	r24, r25
     5c2:	69 f7       	brne	.-38     	; 0x59e <AX_SetAngle+0x1c4>
     5c4:	14 c0       	rjmp	.+40     	; 0x5ee <AX_SetAngle+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5c6:	6b 85       	ldd	r22, Y+11	; 0x0b
     5c8:	7c 85       	ldd	r23, Y+12	; 0x0c
     5ca:	8d 85       	ldd	r24, Y+13	; 0x0d
     5cc:	9e 85       	ldd	r25, Y+14	; 0x0e
     5ce:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
     5d2:	dc 01       	movw	r26, r24
     5d4:	cb 01       	movw	r24, r22
     5d6:	98 8b       	std	Y+16, r25	; 0x10
     5d8:	8f 87       	std	Y+15, r24	; 0x0f
     5da:	8f 85       	ldd	r24, Y+15	; 0x0f
     5dc:	98 89       	ldd	r25, Y+16	; 0x10
     5de:	9c 8b       	std	Y+20, r25	; 0x14
     5e0:	8b 8b       	std	Y+19, r24	; 0x13
     5e2:	8b 89       	ldd	r24, Y+19	; 0x13
     5e4:	9c 89       	ldd	r25, Y+20	; 0x14
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <AX_SetAngle+0x20c>
     5ea:	9c 8b       	std	Y+20, r25	; 0x14
     5ec:	8b 8b       	std	Y+19, r24	; 0x13

	_delay_ms(50);

	AX_ReleaseTransmitter();
     5ee:	0e 94 bd 01 	call	0x37a	; 0x37a <AX_ReleaseTransmitter>
}
     5f2:	6a 96       	adiw	r28, 0x1a	; 26
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <AX_EndlessTurn>:


void AX_EndlessTurn(void)
{
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	60 97       	sbiw	r28, 0x10	; 16
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61

	unsigned int checksum;

	checksum = ~(0x01 + 0x07 + 0x03 + 0x06 + (1023 & 0xFF) + (1023 >> 8) & 0xFF);
     618:	8c ee       	ldi	r24, 0xEC	; 236
     61a:	9f ef       	ldi	r25, 0xFF	; 255
     61c:	9a 83       	std	Y+2, r25	; 0x02
     61e:	89 83       	std	Y+1, r24	; 0x01

	AX_StopReceiver();
     620:	0e 94 cd 01 	call	0x39a	; 0x39a <AX_StopReceiver>

	AX_SendChar(0xFF);
     624:	8f ef       	ldi	r24, 0xFF	; 255
     626:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(0xFF);
     62a:	8f ef       	ldi	r24, 0xFF	; 255
     62c:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(0x01);
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(0x07);
     636:	87 e0       	ldi	r24, 0x07	; 7
     638:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(0x03);
     63c:	83 e0       	ldi	r24, 0x03	; 3
     63e:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(0x06);
     642:	86 e0       	ldi	r24, 0x06	; 6
     644:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(0x00);
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(0x00);
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(1023 & 0xFF);
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(1023 >> 8);
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(checksum);
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>

	AX_StopTransmitter();
     666:	0e 94 99 01 	call	0x332	; 0x332 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     66a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <AX_ReleaseReceiver>
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	a8 e4       	ldi	r26, 0x48	; 72
     674:	b2 e4       	ldi	r27, 0x42	; 66
     676:	8b 83       	std	Y+3, r24	; 0x03
     678:	9c 83       	std	Y+4, r25	; 0x04
     67a:	ad 83       	std	Y+5, r26	; 0x05
     67c:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e4       	ldi	r19, 0x40	; 64
     682:	4c e1       	ldi	r20, 0x1C	; 28
     684:	55 e4       	ldi	r21, 0x45	; 69
     686:	6b 81       	ldd	r22, Y+3	; 0x03
     688:	7c 81       	ldd	r23, Y+4	; 0x04
     68a:	8d 81       	ldd	r24, Y+5	; 0x05
     68c:	9e 81       	ldd	r25, Y+6	; 0x06
     68e:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	8f 83       	std	Y+7, r24	; 0x07
     698:	98 87       	std	Y+8, r25	; 0x08
     69a:	a9 87       	std	Y+9, r26	; 0x09
     69c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	40 e8       	ldi	r20, 0x80	; 128
     6a4:	5f e3       	ldi	r21, 0x3F	; 63
     6a6:	6f 81       	ldd	r22, Y+7	; 0x07
     6a8:	78 85       	ldd	r23, Y+8	; 0x08
     6aa:	89 85       	ldd	r24, Y+9	; 0x09
     6ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ae:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
     6b2:	88 23       	and	r24, r24
     6b4:	2c f4       	brge	.+10     	; 0x6c0 <AX_EndlessTurn+0xbc>
		__ticks = 1;
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	9c 87       	std	Y+12, r25	; 0x0c
     6bc:	8b 87       	std	Y+11, r24	; 0x0b
     6be:	3f c0       	rjmp	.+126    	; 0x73e <AX_EndlessTurn+0x13a>
	else if (__tmp > 65535)
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	3f ef       	ldi	r19, 0xFF	; 255
     6c4:	4f e7       	ldi	r20, 0x7F	; 127
     6c6:	57 e4       	ldi	r21, 0x47	; 71
     6c8:	6f 81       	ldd	r22, Y+7	; 0x07
     6ca:	78 85       	ldd	r23, Y+8	; 0x08
     6cc:	89 85       	ldd	r24, Y+9	; 0x09
     6ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d0:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
     6d4:	18 16       	cp	r1, r24
     6d6:	4c f5       	brge	.+82     	; 0x72a <AX_EndlessTurn+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	40 e2       	ldi	r20, 0x20	; 32
     6de:	51 e4       	ldi	r21, 0x41	; 65
     6e0:	6b 81       	ldd	r22, Y+3	; 0x03
     6e2:	7c 81       	ldd	r23, Y+4	; 0x04
     6e4:	8d 81       	ldd	r24, Y+5	; 0x05
     6e6:	9e 81       	ldd	r25, Y+6	; 0x06
     6e8:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
     6ec:	dc 01       	movw	r26, r24
     6ee:	cb 01       	movw	r24, r22
     6f0:	bc 01       	movw	r22, r24
     6f2:	cd 01       	movw	r24, r26
     6f4:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
     6f8:	dc 01       	movw	r26, r24
     6fa:	cb 01       	movw	r24, r22
     6fc:	9c 87       	std	Y+12, r25	; 0x0c
     6fe:	8b 87       	std	Y+11, r24	; 0x0b
     700:	0f c0       	rjmp	.+30     	; 0x720 <AX_EndlessTurn+0x11c>
     702:	8a ef       	ldi	r24, 0xFA	; 250
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	9e 87       	std	Y+14, r25	; 0x0e
     708:	8d 87       	std	Y+13, r24	; 0x0d
     70a:	8d 85       	ldd	r24, Y+13	; 0x0d
     70c:	9e 85       	ldd	r25, Y+14	; 0x0e
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <AX_EndlessTurn+0x10a>
     712:	9e 87       	std	Y+14, r25	; 0x0e
     714:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     716:	8b 85       	ldd	r24, Y+11	; 0x0b
     718:	9c 85       	ldd	r25, Y+12	; 0x0c
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	9c 87       	std	Y+12, r25	; 0x0c
     71e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     720:	8b 85       	ldd	r24, Y+11	; 0x0b
     722:	9c 85       	ldd	r25, Y+12	; 0x0c
     724:	89 2b       	or	r24, r25
     726:	69 f7       	brne	.-38     	; 0x702 <AX_EndlessTurn+0xfe>
     728:	14 c0       	rjmp	.+40     	; 0x752 <AX_EndlessTurn+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     72a:	6f 81       	ldd	r22, Y+7	; 0x07
     72c:	78 85       	ldd	r23, Y+8	; 0x08
     72e:	89 85       	ldd	r24, Y+9	; 0x09
     730:	9a 85       	ldd	r25, Y+10	; 0x0a
     732:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
     736:	dc 01       	movw	r26, r24
     738:	cb 01       	movw	r24, r22
     73a:	9c 87       	std	Y+12, r25	; 0x0c
     73c:	8b 87       	std	Y+11, r24	; 0x0b
     73e:	8b 85       	ldd	r24, Y+11	; 0x0b
     740:	9c 85       	ldd	r25, Y+12	; 0x0c
     742:	98 8b       	std	Y+16, r25	; 0x10
     744:	8f 87       	std	Y+15, r24	; 0x0f
     746:	8f 85       	ldd	r24, Y+15	; 0x0f
     748:	98 89       	ldd	r25, Y+16	; 0x10
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <AX_EndlessTurn+0x146>
     74e:	98 8b       	std	Y+16, r25	; 0x10
     750:	8f 87       	std	Y+15, r24	; 0x0f

	//AX_ReadStatus();
	_delay_ms(50);

	AX_ReleaseTransmitter();
     752:	0e 94 bd 01 	call	0x37a	; 0x37a <AX_ReleaseTransmitter>
}
     756:	60 96       	adiw	r28, 0x10	; 16
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <AX_SetSpeed>:

void AX_SetSpeed(unsigned int direction, unsigned int speed)
{
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	28 97       	sbiw	r28, 0x08	; 8
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	9e 83       	std	Y+6, r25	; 0x06
     77e:	8d 83       	std	Y+5, r24	; 0x05
     780:	78 87       	std	Y+8, r23	; 0x08
     782:	6f 83       	std	Y+7, r22	; 0x07
	/*
		direction ---> TurnDirection -> 1 - ClockWise   0 - CounterClockWise
	*/

	unsigned int data = 0x0000;
     784:	1a 82       	std	Y+2, r1	; 0x02
     786:	19 82       	std	Y+1, r1	; 0x01
	unsigned int checksum = 0;
     788:	1c 82       	std	Y+4, r1	; 0x04
     78a:	1b 82       	std	Y+3, r1	; 0x03

	data = speed;
     78c:	8f 81       	ldd	r24, Y+7	; 0x07
     78e:	98 85       	ldd	r25, Y+8	; 0x08
     790:	9a 83       	std	Y+2, r25	; 0x02
     792:	89 83       	std	Y+1, r24	; 0x01
	data |= (direction << 10);
     794:	8d 81       	ldd	r24, Y+5	; 0x05
     796:	9e 81       	ldd	r25, Y+6	; 0x06
     798:	98 2f       	mov	r25, r24
     79a:	88 27       	eor	r24, r24
     79c:	99 0f       	add	r25, r25
     79e:	99 0f       	add	r25, r25
     7a0:	29 81       	ldd	r18, Y+1	; 0x01
     7a2:	3a 81       	ldd	r19, Y+2	; 0x02
     7a4:	82 2b       	or	r24, r18
     7a6:	93 2b       	or	r25, r19
     7a8:	9a 83       	std	Y+2, r25	; 0x02
     7aa:	89 83       	std	Y+1, r24	; 0x01


	checksum = ~(0x01 + 0x05 + 0x03 + 0x20 + data);
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	9a 81       	ldd	r25, Y+2	; 0x02
     7b0:	89 96       	adiw	r24, 0x29	; 41
     7b2:	80 95       	com	r24
     7b4:	90 95       	com	r25
     7b6:	9c 83       	std	Y+4, r25	; 0x04
     7b8:	8b 83       	std	Y+3, r24	; 0x03

	AX_StopReceiver();
     7ba:	0e 94 cd 01 	call	0x39a	; 0x39a <AX_StopReceiver>

	AX_SendChar(0xFF);
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(0xFF);
     7c4:	8f ef       	ldi	r24, 0xFF	; 255
     7c6:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(0x01);
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(0x05);
     7d0:	85 e0       	ldi	r24, 0x05	; 5
     7d2:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(0x03);
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(0x20);
     7dc:	80 e2       	ldi	r24, 0x20	; 32
     7de:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(data);
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(data >> 8);
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	9a 81       	ldd	r25, Y+2	; 0x02
     7ec:	89 2f       	mov	r24, r25
     7ee:	99 27       	eor	r25, r25
     7f0:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>
	AX_SendChar(checksum);
     7f4:	8b 81       	ldd	r24, Y+3	; 0x03
     7f6:	0e 94 40 01 	call	0x280	; 0x280 <AX_SendChar>

	AX_StopTransmitter();
     7fa:	0e 94 99 01 	call	0x332	; 0x332 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     7fe:	0e 94 dd 01 	call	0x3ba	; 0x3ba <AX_ReleaseReceiver>

	AX_ReadStatus();
     802:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <AX_ReadStatus>

	AX_ReleaseTransmitter();
     806:	0e 94 bd 01 	call	0x37a	; 0x37a <AX_ReleaseTransmitter>
}
     80a:	28 96       	adiw	r28, 0x08	; 8
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <__vector_18>:
static volatile unsigned char rxCounter[10];
//volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     81c:	1f 92       	push	r1
     81e:	0f 92       	push	r0
     820:	00 90 5f 00 	lds	r0, 0x005F
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	00 90 5b 00 	lds	r0, 0x005B
     82c:	0f 92       	push	r0
     82e:	2f 93       	push	r18
     830:	3f 93       	push	r19
     832:	4f 93       	push	r20
     834:	5f 93       	push	r21
     836:	8f 93       	push	r24
     838:	9f 93       	push	r25
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	00 d0       	rcall	.+0      	; 0x844 <__vector_18+0x28>
     844:	00 d0       	rcall	.+0      	; 0x846 <__vector_18+0x2a>
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     84a:	8d ee       	ldi	r24, 0xED	; 237
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	fc 01       	movw	r30, r24
     850:	80 81       	ld	r24, Z
     852:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     854:	19 82       	std	Y+1, r1	; 0x01
     856:	a4 c0       	rjmp	.+328    	; 0x9a0 <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
     858:	8d ee       	ldi	r24, 0xED	; 237
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	29 81       	ldd	r18, Y+1	; 0x01
     85e:	22 95       	swap	r18
     860:	20 7f       	andi	r18, 0xF0	; 240
     862:	fc 01       	movw	r30, r24
     864:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     866:	8e ee       	ldi	r24, 0xEE	; 238
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	fc 01       	movw	r30, r24
     86c:	80 81       	ld	r24, Z
     86e:	82 95       	swap	r24
     870:	86 95       	lsr	r24
     872:	87 70       	andi	r24, 0x07	; 7
     874:	88 2f       	mov	r24, r24
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	81 70       	andi	r24, 0x01	; 1
     87a:	99 27       	eor	r25, r25
     87c:	89 2b       	or	r24, r25
     87e:	09 f4       	brne	.+2      	; 0x882 <__vector_18+0x66>
     880:	70 c0       	rjmp	.+224    	; 0x962 <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     882:	8f ee       	ldi	r24, 0xEF	; 239
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	20 e8       	ldi	r18, 0x80	; 128
     888:	fc 01       	movw	r30, r24
     88a:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     88c:	8e ee       	ldi	r24, 0xEE	; 238
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	2e ee       	ldi	r18, 0xEE	; 238
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	f9 01       	movw	r30, r18
     896:	20 81       	ld	r18, Z
     898:	2f 7d       	andi	r18, 0xDF	; 223
     89a:	fc 01       	movw	r30, r24
     89c:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     89e:	82 ef       	ldi	r24, 0xF2	; 242
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	fc 01       	movw	r30, r24
     8a4:	80 81       	ld	r24, Z
     8a6:	82 95       	swap	r24
     8a8:	86 95       	lsr	r24
     8aa:	87 70       	andi	r24, 0x07	; 7
     8ac:	28 2f       	mov	r18, r24
     8ae:	83 ef       	ldi	r24, 0xF3	; 243
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	fc 01       	movw	r30, r24
     8b4:	80 81       	ld	r24, Z
     8b6:	88 2f       	mov	r24, r24
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	82 2b       	or	r24, r18
     8c8:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	26 c0       	rjmp	.+76     	; 0x91a <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     8ce:	8c 81       	ldd	r24, Y+4	; 0x04
     8d0:	88 2f       	mov	r24, r24
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	81 50       	subi	r24, 0x01	; 1
     8d6:	90 48       	sbci	r25, 0x80	; 128
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	82 5d       	subi	r24, 0xD2	; 210
     8de:	9e 4f       	sbci	r25, 0xFE	; 254
     8e0:	fc 01       	movw	r30, r24
     8e2:	20 81       	ld	r18, Z
     8e4:	31 81       	ldd	r19, Z+1	; 0x01
     8e6:	8c 81       	ldd	r24, Y+4	; 0x04
     8e8:	88 2f       	mov	r24, r24
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	8e 5b       	subi	r24, 0xBE	; 190
     8f0:	9e 4f       	sbci	r25, 0xFE	; 254
     8f2:	fc 01       	movw	r30, r24
     8f4:	80 81       	ld	r24, Z
     8f6:	48 2f       	mov	r20, r24
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	8a 81       	ldd	r24, Y+2	; 0x02
     8fc:	88 2f       	mov	r24, r24
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	84 0f       	add	r24, r20
     902:	95 1f       	adc	r25, r21
     904:	82 0f       	add	r24, r18
     906:	93 1f       	adc	r25, r19
     908:	2a ef       	ldi	r18, 0xFA	; 250
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	f9 01       	movw	r30, r18
     90e:	20 81       	ld	r18, Z
     910:	fc 01       	movw	r30, r24
     912:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     914:	8a 81       	ldd	r24, Y+2	; 0x02
     916:	8f 5f       	subi	r24, 0xFF	; 255
     918:	8a 83       	std	Y+2, r24	; 0x02
     91a:	8a 81       	ldd	r24, Y+2	; 0x02
     91c:	88 30       	cpi	r24, 0x08	; 8
     91e:	b8 f2       	brcs	.-82     	; 0x8ce <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     920:	8c 81       	ldd	r24, Y+4	; 0x04
     922:	88 2f       	mov	r24, r24
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	8e 5b       	subi	r24, 0xBE	; 190
     92a:	9e 4f       	sbci	r25, 0xFE	; 254
     92c:	fc 01       	movw	r30, r24
     92e:	20 81       	ld	r18, Z
     930:	2f 5f       	subi	r18, 0xFF	; 255
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18
     936:	25 30       	cpi	r18, 0x05	; 5
     938:	41 f4       	brne	.+16     	; 0x94a <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
     93a:	8c 81       	ldd	r24, Y+4	; 0x04
     93c:	88 2f       	mov	r24, r24
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	8e 5b       	subi	r24, 0xBE	; 190
     944:	9e 4f       	sbci	r25, 0xFE	; 254
     946:	fc 01       	movw	r30, r24
     948:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     94a:	8c 81       	ldd	r24, Y+4	; 0x04
     94c:	88 2f       	mov	r24, r24
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	8a 5a       	subi	r24, 0xAA	; 170
     954:	9e 4f       	sbci	r25, 0xFE	; 254
     956:	fc 01       	movw	r30, r24
     958:	20 81       	ld	r18, Z
     95a:	2f 5f       	subi	r18, 0xFF	; 255
     95c:	fc 01       	movw	r30, r24
     95e:	20 83       	st	Z, r18

			break;
     960:	23 c0       	rjmp	.+70     	; 0x9a8 <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     962:	8e ee       	ldi	r24, 0xEE	; 238
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	fc 01       	movw	r30, r24
     968:	80 81       	ld	r24, Z
     96a:	82 95       	swap	r24
     96c:	86 95       	lsr	r24
     96e:	86 95       	lsr	r24
     970:	83 70       	andi	r24, 0x03	; 3
     972:	88 2f       	mov	r24, r24
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	81 70       	andi	r24, 0x01	; 1
     978:	99 27       	eor	r25, r25
     97a:	89 2b       	or	r24, r25
     97c:	71 f0       	breq	.+28     	; 0x99a <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
     97e:	8f ee       	ldi	r24, 0xEF	; 239
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	fc 01       	movw	r30, r24
     984:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     986:	8e ee       	ldi	r24, 0xEE	; 238
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	2e ee       	ldi	r18, 0xEE	; 238
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	f9 01       	movw	r30, r18
     990:	20 81       	ld	r18, Z
     992:	2f 7b       	andi	r18, 0xBF	; 191
     994:	fc 01       	movw	r30, r24
     996:	20 83       	st	Z, r18

			break;
     998:	07 c0       	rjmp	.+14     	; 0x9a8 <__vector_18+0x18c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	8f 5f       	subi	r24, 0xFF	; 255
     99e:	89 83       	std	Y+1, r24	; 0x01
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	8f 30       	cpi	r24, 0x0F	; 15
     9a4:	08 f4       	brcc	.+2      	; 0x9a8 <__vector_18+0x18c>
     9a6:	58 cf       	rjmp	.-336    	; 0x858 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     9a8:	8d ee       	ldi	r24, 0xED	; 237
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	2b 81       	ldd	r18, Y+3	; 0x03
     9ae:	fc 01       	movw	r30, r24
     9b0:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // zato sto tako treba.
}
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	ff 91       	pop	r31
     9c0:	ef 91       	pop	r30
     9c2:	9f 91       	pop	r25
     9c4:	8f 91       	pop	r24
     9c6:	5f 91       	pop	r21
     9c8:	4f 91       	pop	r20
     9ca:	3f 91       	pop	r19
     9cc:	2f 91       	pop	r18
     9ce:	0f 90       	pop	r0
     9d0:	00 92 5b 00 	sts	0x005B, r0
     9d4:	0f 90       	pop	r0
     9d6:	00 92 5f 00 	sts	0x005F, r0
     9da:	0f 90       	pop	r0
     9dc:	1f 90       	pop	r1
     9de:	18 95       	reti

000009e0 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <CAN_InitModule+0x6>
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     9ea:	88 ed       	ldi	r24, 0xD8	; 216
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	21 e0       	ldi	r18, 0x01	; 1
     9f0:	fc 01       	movw	r30, r24
     9f2:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     9f4:	19 82       	std	Y+1, r1	; 0x01
     9f6:	3e c0       	rjmp	.+124    	; 0xa74 <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
     9f8:	8d ee       	ldi	r24, 0xED	; 237
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	29 81       	ldd	r18, Y+1	; 0x01
     9fe:	22 95       	swap	r18
     a00:	20 7f       	andi	r18, 0xF0	; 240
     a02:	fc 01       	movw	r30, r24
     a04:	20 83       	st	Z, r18

		CANSTMOB = 0;
     a06:	8e ee       	ldi	r24, 0xEE	; 238
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	fc 01       	movw	r30, r24
     a0c:	10 82       	st	Z, r1
		CANCDMOB = 0;
     a0e:	8f ee       	ldi	r24, 0xEF	; 239
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	fc 01       	movw	r30, r24
     a14:	10 82       	st	Z, r1

		CANIDT1 = 0;
     a16:	83 ef       	ldi	r24, 0xF3	; 243
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	fc 01       	movw	r30, r24
     a1c:	10 82       	st	Z, r1
		CANIDT2 = 0;
     a1e:	82 ef       	ldi	r24, 0xF2	; 242
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	fc 01       	movw	r30, r24
     a24:	10 82       	st	Z, r1
		CANIDT3 = 0;
     a26:	81 ef       	ldi	r24, 0xF1	; 241
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	fc 01       	movw	r30, r24
     a2c:	10 82       	st	Z, r1
		CANIDT4 = 0;
     a2e:	80 ef       	ldi	r24, 0xF0	; 240
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	fc 01       	movw	r30, r24
     a34:	10 82       	st	Z, r1
		CANIDM1 = 0;
     a36:	87 ef       	ldi	r24, 0xF7	; 247
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	fc 01       	movw	r30, r24
     a3c:	10 82       	st	Z, r1
		CANIDM2 = 0;
     a3e:	86 ef       	ldi	r24, 0xF6	; 246
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	fc 01       	movw	r30, r24
     a44:	10 82       	st	Z, r1
		CANIDM3 = 0;
     a46:	85 ef       	ldi	r24, 0xF5	; 245
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	fc 01       	movw	r30, r24
     a4c:	10 82       	st	Z, r1
		CANIDM4 = 0;
     a4e:	84 ef       	ldi	r24, 0xF4	; 244
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	fc 01       	movw	r30, r24
     a54:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     a56:	1a 82       	std	Y+2, r1	; 0x02
     a58:	07 c0       	rjmp	.+14     	; 0xa68 <CAN_InitModule+0x88>
			CANMSG = 0;
     a5a:	8a ef       	ldi	r24, 0xFA	; 250
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	fc 01       	movw	r30, r24
     a60:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     a62:	8a 81       	ldd	r24, Y+2	; 0x02
     a64:	8f 5f       	subi	r24, 0xFF	; 255
     a66:	8a 83       	std	Y+2, r24	; 0x02
     a68:	8a 81       	ldd	r24, Y+2	; 0x02
     a6a:	88 30       	cpi	r24, 0x08	; 8
     a6c:	b0 f3       	brcs	.-20     	; 0xa5a <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     a6e:	89 81       	ldd	r24, Y+1	; 0x01
     a70:	8f 5f       	subi	r24, 0xFF	; 255
     a72:	89 83       	std	Y+1, r24	; 0x01
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	8f 30       	cpi	r24, 0x0F	; 15
     a78:	08 f4       	brcc	.+2      	; 0xa7c <CAN_InitModule+0x9c>
     a7a:	be cf       	rjmp	.-132    	; 0x9f8 <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     a7c:	88 ed       	ldi	r24, 0xD8	; 216
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	22 e0       	ldi	r18, 0x02	; 2
     a82:	fc 01       	movw	r30, r24
     a84:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     a86:	82 ee       	ldi	r24, 0xE2	; 226
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	21 e0       	ldi	r18, 0x01	; 1
     a8c:	fc 01       	movw	r30, r24
     a8e:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     a90:	83 ee       	ldi	r24, 0xE3	; 227
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	28 e0       	ldi	r18, 0x08	; 8
     a96:	fc 01       	movw	r30, r24
     a98:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     a9a:	84 ee       	ldi	r24, 0xE4	; 228
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	2e e5       	ldi	r18, 0x5E	; 94
     aa0:	fc 01       	movw	r30, r24
     aa2:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     aa4:	85 ee       	ldi	r24, 0xE5	; 229
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	fc 01       	movw	r30, r24
     aaa:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     aac:	8b ed       	ldi	r24, 0xDB	; 219
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	20 eb       	ldi	r18, 0xB0	; 176
     ab2:	fc 01       	movw	r30, r24
     ab4:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     ab6:	8f ed       	ldi	r24, 0xDF	; 223
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	2f e7       	ldi	r18, 0x7F	; 127
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
     ac0:	8e ed       	ldi	r24, 0xDE	; 222
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	2f ef       	ldi	r18, 0xFF	; 255
     ac6:	fc 01       	movw	r30, r24
     ac8:	20 83       	st	Z, r18
	sei();
     aca:	78 94       	sei
}
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	00 d0       	rcall	.+0      	; 0xadc <CAN_InitRxMob+0x6>
     adc:	00 d0       	rcall	.+0      	; 0xade <CAN_InitRxMob+0x8>
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	9c 83       	std	Y+4, r25	; 0x04
     ae4:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     ae6:	8d ee       	ldi	r24, 0xED	; 237
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	fc 01       	movw	r30, r24
     aec:	80 81       	ld	r24, Z
     aee:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     af0:	00 00       	nop
     af2:	89 ed       	ldi	r24, 0xD9	; 217
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	fc 01       	movw	r30, r24
     af8:	80 81       	ld	r24, Z
     afa:	82 95       	swap	r24
     afc:	8f 70       	andi	r24, 0x0F	; 15
     afe:	88 2f       	mov	r24, r24
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	81 70       	andi	r24, 0x01	; 1
     b04:	99 27       	eor	r25, r25
     b06:	89 2b       	or	r24, r25
     b08:	a1 f7       	brne	.-24     	; 0xaf2 <CAN_InitRxMob+0x1c>
     b0a:	89 ed       	ldi	r24, 0xD9	; 217
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	fc 01       	movw	r30, r24
     b10:	80 81       	ld	r24, Z
     b12:	86 95       	lsr	r24
     b14:	86 95       	lsr	r24
     b16:	86 95       	lsr	r24
     b18:	88 2f       	mov	r24, r24
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	81 70       	andi	r24, 0x01	; 1
     b1e:	99 27       	eor	r25, r25
     b20:	89 2b       	or	r24, r25
     b22:	39 f7       	brne	.-50     	; 0xaf2 <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     b24:	19 82       	std	Y+1, r1	; 0x01
     b26:	49 c0       	rjmp	.+146    	; 0xbba <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
     b28:	8d ee       	ldi	r24, 0xED	; 237
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	29 81       	ldd	r18, Y+1	; 0x01
     b2e:	22 95       	swap	r18
     b30:	20 7f       	andi	r18, 0xF0	; 240
     b32:	fc 01       	movw	r30, r24
     b34:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     b36:	8f ee       	ldi	r24, 0xEF	; 239
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	fc 01       	movw	r30, r24
     b3c:	80 81       	ld	r24, Z
     b3e:	82 95       	swap	r24
     b40:	86 95       	lsr	r24
     b42:	86 95       	lsr	r24
     b44:	83 70       	andi	r24, 0x03	; 3
     b46:	88 23       	and	r24, r24
     b48:	21 f0       	breq	.+8      	; 0xb52 <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	8f 5f       	subi	r24, 0xFF	; 255
     b4e:	89 83       	std	Y+1, r24	; 0x01
     b50:	34 c0       	rjmp	.+104    	; 0xbba <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     b52:	8f ee       	ldi	r24, 0xEF	; 239
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	2f e0       	ldi	r18, 0x0F	; 15
     b58:	fc 01       	movw	r30, r24
     b5a:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     b5c:	83 ef       	ldi	r24, 0xF3	; 243
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	2b 81       	ldd	r18, Y+3	; 0x03
     b62:	3c 81       	ldd	r19, Y+4	; 0x04
     b64:	33 27       	eor	r19, r19
     b66:	36 95       	lsr	r19
     b68:	27 95       	ror	r18
     b6a:	36 95       	lsr	r19
     b6c:	27 95       	ror	r18
     b6e:	36 95       	lsr	r19
     b70:	27 95       	ror	r18
     b72:	fc 01       	movw	r30, r24
     b74:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
     b76:	82 ef       	ldi	r24, 0xF2	; 242
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	2b 81       	ldd	r18, Y+3	; 0x03
     b7c:	22 95       	swap	r18
     b7e:	22 0f       	add	r18, r18
     b80:	20 7e       	andi	r18, 0xE0	; 224
     b82:	fc 01       	movw	r30, r24
     b84:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     b86:	86 ef       	ldi	r24, 0xF6	; 246
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	20 ee       	ldi	r18, 0xE0	; 224
     b8c:	fc 01       	movw	r30, r24
     b8e:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
     b90:	87 ef       	ldi	r24, 0xF7	; 247
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	2f ef       	ldi	r18, 0xFF	; 255
     b96:	fc 01       	movw	r30, r24
     b98:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     b9a:	8f ee       	ldi	r24, 0xEF	; 239
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	2f ee       	ldi	r18, 0xEF	; 239
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	f9 01       	movw	r30, r18
     ba4:	20 81       	ld	r18, Z
     ba6:	20 68       	ori	r18, 0x80	; 128
     ba8:	fc 01       	movw	r30, r24
     baa:	20 83       	st	Z, r18

		CANPAGE = tempPage;
     bac:	8d ee       	ldi	r24, 0xED	; 237
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	2a 81       	ldd	r18, Y+2	; 0x02
     bb2:	fc 01       	movw	r30, r24
     bb4:	20 83       	st	Z, r18

		return 1;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	0a c0       	rjmp	.+20     	; 0xbce <CAN_InitRxMob+0xf8>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	8f 30       	cpi	r24, 0x0F	; 15
     bbe:	08 f4       	brcc	.+2      	; 0xbc2 <CAN_InitRxMob+0xec>
     bc0:	b3 cf       	rjmp	.-154    	; 0xb28 <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     bc2:	8d ee       	ldi	r24, 0xED	; 237
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	2a 81       	ldd	r18, Y+2	; 0x02
     bc8:	fc 01       	movw	r30, r24
     bca:	20 83       	st	Z, r18

	return 0;
     bcc:	80 e0       	ldi	r24, 0x00	; 0
}
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	08 95       	ret

00000bdc <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <CAN_Init+0xa>
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     bec:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     bf0:	19 82       	std	Y+1, r1	; 0x01
     bf2:	30 c0       	rjmp	.+96     	; 0xc54 <CAN_Init+0x78>
	{
		CAN_InitRxMob(i + 1);
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	88 2f       	mov	r24, r24
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	0e 94 6b 05 	call	0xad6	; 0xad6 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	8c 01       	movw	r16, r24
     c0c:	02 5d       	subi	r16, 0xD2	; 210
     c0e:	1e 4f       	sbci	r17, 0xFE	; 254
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	85 e0       	ldi	r24, 0x05	; 5
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <calloc>
     c1c:	f8 01       	movw	r30, r16
     c1e:	91 83       	std	Z+1, r25	; 0x01
     c20:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	88 2f       	mov	r24, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	29 81       	ldd	r18, Y+1	; 0x01
     c2a:	22 2f       	mov	r18, r18
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	49 81       	ldd	r20, Y+1	; 0x01
     c30:	44 2f       	mov	r20, r20
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	4a 5a       	subi	r20, 0xAA	; 170
     c38:	5e 4f       	sbci	r21, 0xFE	; 254
     c3a:	fa 01       	movw	r30, r20
     c3c:	60 83       	st	Z, r22
     c3e:	24 5b       	subi	r18, 0xB4	; 180
     c40:	3e 4f       	sbci	r19, 0xFE	; 254
     c42:	f9 01       	movw	r30, r18
     c44:	60 83       	st	Z, r22
     c46:	8e 5b       	subi	r24, 0xBE	; 190
     c48:	9e 4f       	sbci	r25, 0xFE	; 254
     c4a:	fc 01       	movw	r30, r24
     c4c:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	8f 5f       	subi	r24, 0xFF	; 255
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	99 81       	ldd	r25, Y+1	; 0x01
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	98 17       	cp	r25, r24
     c5a:	60 f2       	brcs	.-104    	; 0xbf4 <CAN_Init+0x18>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	08 95       	ret

00000c6a <CAN_CheckRX>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	1f 92       	push	r1
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	89 83       	std	Y+1, r24	; 0x01
	return rxCounter[nodeID - 1];
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	88 2f       	mov	r24, r24
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	8a 5a       	subi	r24, 0xAA	; 170
     c80:	9e 4f       	sbci	r25, 0xFE	; 254
     c82:	fc 01       	movw	r30, r24
     c84:	80 81       	ld	r24, Z
}
     c86:	0f 90       	pop	r0
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	00 d0       	rcall	.+0      	; 0xc94 <CAN_Read+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <CAN_Read+0x8>
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	9b 83       	std	Y+3, r25	; 0x03
     c9c:	8a 83       	std	Y+2, r24	; 0x02
     c9e:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
     ca0:	84 e3       	ldi	r24, 0x34	; 52
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	2f ef       	ldi	r18, 0xFF	; 255
     ca6:	fc 01       	movw	r30, r24
     ca8:	20 83       	st	Z, r18
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     caa:	00 00       	nop
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	88 2f       	mov	r24, r24
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	8a 5a       	subi	r24, 0xAA	; 170
     cb6:	9e 4f       	sbci	r25, 0xFE	; 254
     cb8:	fc 01       	movw	r30, r24
     cba:	80 81       	ld	r24, Z
     cbc:	88 23       	and	r24, r24
     cbe:	b1 f3       	breq	.-20     	; 0xcac <CAN_Read+0x1e>

	for(i = 0; i < 8; ++i)
     cc0:	19 82       	std	Y+1, r1	; 0x01
     cc2:	2c c0       	rjmp	.+88     	; 0xd1c <CAN_Read+0x8e>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	88 2f       	mov	r24, r24
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	2a 81       	ldd	r18, Y+2	; 0x02
     ccc:	3b 81       	ldd	r19, Y+3	; 0x03
     cce:	82 0f       	add	r24, r18
     cd0:	93 1f       	adc	r25, r19
     cd2:	2c 81       	ldd	r18, Y+4	; 0x04
     cd4:	22 2f       	mov	r18, r18
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	21 50       	subi	r18, 0x01	; 1
     cda:	30 48       	sbci	r19, 0x80	; 128
     cdc:	22 0f       	add	r18, r18
     cde:	33 1f       	adc	r19, r19
     ce0:	22 5d       	subi	r18, 0xD2	; 210
     ce2:	3e 4f       	sbci	r19, 0xFE	; 254
     ce4:	f9 01       	movw	r30, r18
     ce6:	40 81       	ld	r20, Z
     ce8:	51 81       	ldd	r21, Z+1	; 0x01
     cea:	2c 81       	ldd	r18, Y+4	; 0x04
     cec:	22 2f       	mov	r18, r18
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	21 50       	subi	r18, 0x01	; 1
     cf2:	31 09       	sbc	r19, r1
     cf4:	24 5b       	subi	r18, 0xB4	; 180
     cf6:	3e 4f       	sbci	r19, 0xFE	; 254
     cf8:	f9 01       	movw	r30, r18
     cfa:	20 81       	ld	r18, Z
     cfc:	62 2f       	mov	r22, r18
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	29 81       	ldd	r18, Y+1	; 0x01
     d02:	22 2f       	mov	r18, r18
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	26 0f       	add	r18, r22
     d08:	37 1f       	adc	r19, r23
     d0a:	24 0f       	add	r18, r20
     d0c:	35 1f       	adc	r19, r21
     d0e:	f9 01       	movw	r30, r18
     d10:	20 81       	ld	r18, Z
     d12:	fc 01       	movw	r30, r24
     d14:	20 83       	st	Z, r18
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	89 83       	std	Y+1, r24	; 0x01
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	88 30       	cpi	r24, 0x08	; 8
     d20:	88 f2       	brcs	.-94     	; 0xcc4 <CAN_Read+0x36>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	84 5b       	subi	r24, 0xB4	; 180
     d2c:	9e 4f       	sbci	r25, 0xFE	; 254
     d2e:	fc 01       	movw	r30, r24
     d30:	20 81       	ld	r18, Z
     d32:	2f 5f       	subi	r18, 0xFF	; 255
     d34:	fc 01       	movw	r30, r24
     d36:	20 83       	st	Z, r18
     d38:	25 30       	cpi	r18, 0x05	; 5
     d3a:	41 f4       	brne	.+16     	; 0xd4c <CAN_Read+0xbe>
	*(rxRdIndex + sendingNodeID - 1) = 0;
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	88 2f       	mov	r24, r24
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	84 5b       	subi	r24, 0xB4	; 180
     d46:	9e 4f       	sbci	r25, 0xFE	; 254
     d48:	fc 01       	movw	r30, r24
     d4a:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     d4c:	8c 81       	ldd	r24, Y+4	; 0x04
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	9c 01       	movw	r18, r24
     d56:	2a 5a       	subi	r18, 0xAA	; 170
     d58:	3e 4f       	sbci	r19, 0xFE	; 254
     d5a:	f9 01       	movw	r30, r18
     d5c:	20 81       	ld	r18, Z
     d5e:	21 50       	subi	r18, 0x01	; 1
     d60:	8a 5a       	subi	r24, 0xAA	; 170
     d62:	9e 4f       	sbci	r25, 0xFE	; 254
     d64:	fc 01       	movw	r30, r24
     d66:	20 83       	st	Z, r18

	return 0;
     d68:	80 e0       	ldi	r24, 0x00	; 0
}
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <CAN_Write+0x6>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <CAN_Write+0x8>
     d80:	00 d0       	rcall	.+0      	; 0xd82 <CAN_Write+0xa>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	9d 83       	std	Y+5, r25	; 0x05
     d88:	8c 83       	std	Y+4, r24	; 0x04
     d8a:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     d8c:	00 00       	nop
     d8e:	89 ed       	ldi	r24, 0xD9	; 217
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	fc 01       	movw	r30, r24
     d94:	80 81       	ld	r24, Z
     d96:	82 95       	swap	r24
     d98:	8f 70       	andi	r24, 0x0F	; 15
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	81 70       	andi	r24, 0x01	; 1
     da0:	99 27       	eor	r25, r25
     da2:	89 2b       	or	r24, r25
     da4:	a1 f7       	brne	.-24     	; 0xd8e <CAN_Write+0x16>
     da6:	89 ed       	ldi	r24, 0xD9	; 217
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	fc 01       	movw	r30, r24
     dac:	80 81       	ld	r24, Z
     dae:	86 95       	lsr	r24
     db0:	86 95       	lsr	r24
     db2:	86 95       	lsr	r24
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	81 70       	andi	r24, 0x01	; 1
     dba:	99 27       	eor	r25, r25
     dbc:	89 2b       	or	r24, r25
     dbe:	39 f7       	brne	.-50     	; 0xd8e <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     dc0:	8d ee       	ldi	r24, 0xED	; 237
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	fc 01       	movw	r30, r24
     dc6:	80 81       	ld	r24, Z
     dc8:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
     dca:	1a 82       	std	Y+2, r1	; 0x02
     dcc:	15 c0       	rjmp	.+42     	; 0xdf8 <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
     dce:	8d ee       	ldi	r24, 0xED	; 237
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	2a 81       	ldd	r18, Y+2	; 0x02
     dd4:	22 95       	swap	r18
     dd6:	20 7f       	andi	r18, 0xF0	; 240
     dd8:	fc 01       	movw	r30, r24
     dda:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
     ddc:	8f ee       	ldi	r24, 0xEF	; 239
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	fc 01       	movw	r30, r24
     de2:	80 81       	ld	r24, Z
     de4:	82 95       	swap	r24
     de6:	86 95       	lsr	r24
     de8:	86 95       	lsr	r24
     dea:	83 70       	andi	r24, 0x03	; 3
     dec:	88 23       	and	r24, r24
     dee:	09 f4       	brne	.+2      	; 0xdf2 <CAN_Write+0x7a>
			break;
     df0:	06 c0       	rjmp	.+12     	; 0xdfe <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	8a 83       	std	Y+2, r24	; 0x02
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	8f 30       	cpi	r24, 0x0F	; 15
     dfc:	40 f3       	brcs	.-48     	; 0xdce <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	8f 30       	cpi	r24, 0x0F	; 15
     e02:	11 f4       	brne	.+4      	; 0xe08 <CAN_Write+0x90>
		return -1;
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	39 c0       	rjmp	.+114    	; 0xe7a <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     e08:	82 ef       	ldi	r24, 0xF2	; 242
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	2e 81       	ldd	r18, Y+6	; 0x06
     e0e:	22 95       	swap	r18
     e10:	22 0f       	add	r18, r18
     e12:	20 7e       	andi	r18, 0xE0	; 224
     e14:	fc 01       	movw	r30, r24
     e16:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
     e18:	83 ef       	ldi	r24, 0xF3	; 243
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	2e 81       	ldd	r18, Y+6	; 0x06
     e1e:	26 95       	lsr	r18
     e20:	26 95       	lsr	r18
     e22:	26 95       	lsr	r18
     e24:	fc 01       	movw	r30, r24
     e26:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
     e28:	8f ee       	ldi	r24, 0xEF	; 239
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	28 e0       	ldi	r18, 0x08	; 8
     e2e:	fc 01       	movw	r30, r24
     e30:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     e32:	19 82       	std	Y+1, r1	; 0x01
     e34:	10 c0       	rjmp	.+32     	; 0xe56 <CAN_Write+0xde>
		CANMSG = data[i];
     e36:	8a ef       	ldi	r24, 0xFA	; 250
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	29 81       	ldd	r18, Y+1	; 0x01
     e3c:	22 2f       	mov	r18, r18
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	4c 81       	ldd	r20, Y+4	; 0x04
     e42:	5d 81       	ldd	r21, Y+5	; 0x05
     e44:	24 0f       	add	r18, r20
     e46:	35 1f       	adc	r19, r21
     e48:	f9 01       	movw	r30, r18
     e4a:	20 81       	ld	r18, Z
     e4c:	fc 01       	movw	r30, r24
     e4e:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	8f 5f       	subi	r24, 0xFF	; 255
     e54:	89 83       	std	Y+1, r24	; 0x01
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 30       	cpi	r24, 0x08	; 8
     e5a:	68 f3       	brcs	.-38     	; 0xe36 <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     e5c:	8f ee       	ldi	r24, 0xEF	; 239
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	2f ee       	ldi	r18, 0xEF	; 239
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	f9 01       	movw	r30, r18
     e66:	20 81       	ld	r18, Z
     e68:	20 64       	ori	r18, 0x40	; 64
     e6a:	fc 01       	movw	r30, r24
     e6c:	20 83       	st	Z, r18

	CANPAGE = tempPage;
     e6e:	8d ee       	ldi	r24, 0xED	; 237
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	2b 81       	ldd	r18, Y+3	; 0x03
     e74:	fc 01       	movw	r30, r24
     e76:	20 83       	st	Z, r18

	return 0;
     e78:	80 e0       	ldi	r24, 0x00	; 0
}
     e7a:	26 96       	adiw	r28, 0x06	; 6
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	08 95       	ret

00000e8c <debug_init>:
#include "debug.h"

//pin and the starting state of debug pins
uint8_t debug_pins[5] = {48,49,50,51,52};

void debug_init() {
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62


}
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	08 95       	ret

00000e9a <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <__list_add+0x6>
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <__list_add+0x8>
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <__list_add+0xa>
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	9a 83       	std	Y+2, r25	; 0x02
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	7c 83       	std	Y+4, r23	; 0x04
     eae:	6b 83       	std	Y+3, r22	; 0x03
     eb0:	5e 83       	std	Y+6, r21	; 0x06
     eb2:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	9e 81       	ldd	r25, Y+6	; 0x06
     eb8:	29 81       	ldd	r18, Y+1	; 0x01
     eba:	3a 81       	ldd	r19, Y+2	; 0x02
     ebc:	fc 01       	movw	r30, r24
     ebe:	31 83       	std	Z+1, r19	; 0x01
     ec0:	20 83       	st	Z, r18
    new->next = next;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	9a 81       	ldd	r25, Y+2	; 0x02
     ec6:	2d 81       	ldd	r18, Y+5	; 0x05
     ec8:	3e 81       	ldd	r19, Y+6	; 0x06
     eca:	fc 01       	movw	r30, r24
     ecc:	33 83       	std	Z+3, r19	; 0x03
     ece:	22 83       	std	Z+2, r18	; 0x02
    new->prev = prev;
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	9a 81       	ldd	r25, Y+2	; 0x02
     ed4:	2b 81       	ldd	r18, Y+3	; 0x03
     ed6:	3c 81       	ldd	r19, Y+4	; 0x04
     ed8:	fc 01       	movw	r30, r24
     eda:	31 83       	std	Z+1, r19	; 0x01
     edc:	20 83       	st	Z, r18
    prev->next = new;
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	29 81       	ldd	r18, Y+1	; 0x01
     ee4:	3a 81       	ldd	r19, Y+2	; 0x02
     ee6:	fc 01       	movw	r30, r24
     ee8:	33 83       	std	Z+3, r19	; 0x03
     eea:	22 83       	std	Z+2, r18	; 0x02
}
     eec:	26 96       	adiw	r28, 0x06	; 6
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	08 95       	ret

00000efe <list_add>:

static inline void list_add(struct list_head* new, struct list_head* head)
{
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	00 d0       	rcall	.+0      	; 0xf04 <list_add+0x6>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <list_add+0x8>
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
     f0e:	7c 83       	std	Y+4, r23	; 0x04
     f10:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	fc 01       	movw	r30, r24
     f18:	42 81       	ldd	r20, Z+2	; 0x02
     f1a:	53 81       	ldd	r21, Z+3	; 0x03
     f1c:	2b 81       	ldd	r18, Y+3	; 0x03
     f1e:	3c 81       	ldd	r19, Y+4	; 0x04
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	b9 01       	movw	r22, r18
     f26:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__list_add>
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	2b 97       	sbiw	r28, 0x0b	; 11
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	89 87       	std	Y+9, r24	; 0x09
     f4e:	6a 87       	std	Y+10, r22	; 0x0a
     f50:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     f52:	80 91 0d 01 	lds	r24, 0x010D
     f56:	90 91 0e 01 	lds	r25, 0x010E
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	8b 83       	std	Y+3, r24	; 0x03
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	9c 81       	ldd	r25, Y+4	; 0x04
     f62:	05 97       	sbiw	r24, 0x05	; 5
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	15 c0       	rjmp	.+42     	; 0xf94 <gpio_register_pin+0x5c>
    {
        if(input->pin == pin)
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	fc 01       	movw	r30, r24
     f70:	90 81       	ld	r25, Z
     f72:	89 85       	ldd	r24, Y+9	; 0x09
     f74:	98 17       	cp	r25, r24
     f76:	11 f4       	brne	.+4      	; 0xf7c <gpio_register_pin+0x44>
            return 1;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	bc c0       	rjmp	.+376    	; 0x10f4 <gpio_register_pin+0x1bc>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	fc 01       	movw	r30, r24
     f82:	87 81       	ldd	r24, Z+7	; 0x07
     f84:	90 85       	ldd	r25, Z+8	; 0x08
     f86:	9e 83       	std	Y+6, r25	; 0x06
     f88:	8d 83       	std	Y+5, r24	; 0x05
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	9e 81       	ldd	r25, Y+6	; 0x06
     f8e:	05 97       	sbiw	r24, 0x05	; 5
     f90:	9a 83       	std	Y+2, r25	; 0x02
     f92:	89 83       	std	Y+1, r24	; 0x01
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	05 96       	adiw	r24, 0x05	; 5
     f9a:	8b 50       	subi	r24, 0x0B	; 11
     f9c:	91 40       	sbci	r25, 0x01	; 1
     f9e:	29 f7       	brne	.-54     	; 0xf6a <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     fa0:	89 85       	ldd	r24, Y+9	; 0x09
     fa2:	86 95       	lsr	r24
     fa4:	86 95       	lsr	r24
     fa6:	86 95       	lsr	r24
     fa8:	8f 5f       	subi	r24, 0xFF	; 255
     faa:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t pin_reg = pin % 8;
     fac:	89 85       	ldd	r24, Y+9	; 0x09
     fae:	87 70       	andi	r24, 0x07	; 7
     fb0:	88 87       	std	Y+8, r24	; 0x08
	if(direction == GPIO_DIRECTION_OUTPUT)
     fb2:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	09 f0       	breq	.+2      	; 0xfba <gpio_register_pin+0x82>
     fb8:	55 c0       	rjmp	.+170    	; 0x1064 <gpio_register_pin+0x12c>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     fba:	8f 81       	ldd	r24, Y+7	; 0x07
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	9c 01       	movw	r18, r24
     fc2:	21 50       	subi	r18, 0x01	; 1
     fc4:	31 09       	sbc	r19, r1
     fc6:	c9 01       	movw	r24, r18
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	82 0f       	add	r24, r18
     fce:	93 1f       	adc	r25, r19
     fd0:	81 96       	adiw	r24, 0x21	; 33
     fd2:	ac 01       	movw	r20, r24
     fd4:	8f 81       	ldd	r24, Y+7	; 0x07
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	9c 01       	movw	r18, r24
     fdc:	21 50       	subi	r18, 0x01	; 1
     fde:	31 09       	sbc	r19, r1
     fe0:	c9 01       	movw	r24, r18
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	82 0f       	add	r24, r18
     fe8:	93 1f       	adc	r25, r19
     fea:	81 96       	adiw	r24, 0x21	; 33
     fec:	fc 01       	movw	r30, r24
     fee:	80 81       	ld	r24, Z
     ff0:	68 2f       	mov	r22, r24
     ff2:	88 85       	ldd	r24, Y+8	; 0x08
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <gpio_register_pin+0xca>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	2a 95       	dec	r18
    1004:	e2 f7       	brpl	.-8      	; 0xffe <gpio_register_pin+0xc6>
    1006:	86 2b       	or	r24, r22
    1008:	fa 01       	movw	r30, r20
    100a:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    100c:	8f 81       	ldd	r24, Y+7	; 0x07
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9c 01       	movw	r18, r24
    1014:	21 50       	subi	r18, 0x01	; 1
    1016:	31 09       	sbc	r19, r1
    1018:	c9 01       	movw	r24, r18
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	82 0f       	add	r24, r18
    1020:	93 1f       	adc	r25, r19
    1022:	82 96       	adiw	r24, 0x22	; 34
    1024:	ac 01       	movw	r20, r24
    1026:	8f 81       	ldd	r24, Y+7	; 0x07
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	9c 01       	movw	r18, r24
    102e:	21 50       	subi	r18, 0x01	; 1
    1030:	31 09       	sbc	r19, r1
    1032:	c9 01       	movw	r24, r18
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	82 0f       	add	r24, r18
    103a:	93 1f       	adc	r25, r19
    103c:	82 96       	adiw	r24, 0x22	; 34
    103e:	fc 01       	movw	r30, r24
    1040:	80 81       	ld	r24, Z
    1042:	68 2f       	mov	r22, r24
    1044:	88 85       	ldd	r24, Y+8	; 0x08
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <gpio_register_pin+0x11c>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	2a 95       	dec	r18
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <gpio_register_pin+0x118>
    1058:	80 95       	com	r24
    105a:	86 23       	and	r24, r22
    105c:	fa 01       	movw	r30, r20
    105e:	80 83       	st	Z, r24
        return 0;
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	48 c0       	rjmp	.+144    	; 0x10f4 <gpio_register_pin+0x1bc>
	}
	else
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1064:	8f 81       	ldd	r24, Y+7	; 0x07
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9c 01       	movw	r18, r24
    106c:	21 50       	subi	r18, 0x01	; 1
    106e:	31 09       	sbc	r19, r1
    1070:	c9 01       	movw	r24, r18
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	82 0f       	add	r24, r18
    1078:	93 1f       	adc	r25, r19
    107a:	81 96       	adiw	r24, 0x21	; 33
    107c:	ac 01       	movw	r20, r24
    107e:	8f 81       	ldd	r24, Y+7	; 0x07
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9c 01       	movw	r18, r24
    1086:	21 50       	subi	r18, 0x01	; 1
    1088:	31 09       	sbc	r19, r1
    108a:	c9 01       	movw	r24, r18
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	82 0f       	add	r24, r18
    1092:	93 1f       	adc	r25, r19
    1094:	81 96       	adiw	r24, 0x21	; 33
    1096:	fc 01       	movw	r30, r24
    1098:	80 81       	ld	r24, Z
    109a:	68 2f       	mov	r22, r24
    109c:	88 85       	ldd	r24, Y+8	; 0x08
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <gpio_register_pin+0x174>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	2a 95       	dec	r18
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <gpio_register_pin+0x170>
    10b0:	80 95       	com	r24
    10b2:	86 23       	and	r24, r22
    10b4:	fa 01       	movw	r30, r20
    10b6:	80 83       	st	Z, r24

    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    10b8:	89 e0       	ldi	r24, 0x09	; 9
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <malloc>
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	89 83       	std	Y+1, r24	; 0x01
    if(input == NULL)
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	89 2b       	or	r24, r25
    10ca:	11 f4       	brne	.+4      	; 0x10d0 <gpio_register_pin+0x198>
        return 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	12 c0       	rjmp	.+36     	; 0x10f4 <gpio_register_pin+0x1bc>

    input->pin       = pin;
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	29 85       	ldd	r18, Y+9	; 0x09
    10d6:	fc 01       	movw	r30, r24
    10d8:	20 83       	st	Z, r18
    input->pulled_up = pulled_up;
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	9a 81       	ldd	r25, Y+2	; 0x02
    10de:	2b 85       	ldd	r18, Y+11	; 0x0b
    10e0:	fc 01       	movw	r30, r24
    10e2:	21 83       	std	Z+1, r18	; 0x01
    list_add(&input->list, &gpio_inputs);
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	9a 81       	ldd	r25, Y+2	; 0x02
    10e8:	05 96       	adiw	r24, 0x05	; 5
    10ea:	6b e0       	ldi	r22, 0x0B	; 11
    10ec:	71 e0       	ldi	r23, 0x01	; 1
    10ee:	0e 94 7f 07 	call	0xefe	; 0xefe <list_add>

    return 0;
    10f2:	80 e0       	ldi	r24, 0x00	; 0
}
    10f4:	2b 96       	adiw	r28, 0x0b	; 11
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	00 d0       	rcall	.+0      	; 0x110c <gpio_write_pin+0x6>
    110c:	00 d0       	rcall	.+0      	; 0x110e <gpio_write_pin+0x8>
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	8b 83       	std	Y+3, r24	; 0x03
    1114:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	86 95       	lsr	r24
    111a:	86 95       	lsr	r24
    111c:	86 95       	lsr	r24
    111e:	8f 5f       	subi	r24, 0xFF	; 255
    1120:	89 83       	std	Y+1, r24	; 0x01
	pin = pin % 8;
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	87 70       	andi	r24, 0x07	; 7
    1126:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9c 01       	movw	r18, r24
    1130:	21 50       	subi	r18, 0x01	; 1
    1132:	31 09       	sbc	r19, r1
    1134:	c9 01       	movw	r24, r18
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	82 0f       	add	r24, r18
    113c:	93 1f       	adc	r25, r19
    113e:	82 96       	adiw	r24, 0x22	; 34
    1140:	fc 01       	movw	r30, r24
    1142:	80 81       	ld	r24, Z
    1144:	91 81       	ldd	r25, Z+1	; 0x01
    1146:	a2 81       	ldd	r26, Z+2	; 0x02
    1148:	b3 81       	ldd	r27, Z+3	; 0x03
    114a:	8a 83       	std	Y+2, r24	; 0x02
	if(value != 0)
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	88 23       	and	r24, r24
    1150:	31 f1       	breq	.+76     	; 0x119e <gpio_write_pin+0x98>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	9c 01       	movw	r18, r24
    115a:	21 50       	subi	r18, 0x01	; 1
    115c:	31 09       	sbc	r19, r1
    115e:	c9 01       	movw	r24, r18
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	82 0f       	add	r24, r18
    1166:	93 1f       	adc	r25, r19
    1168:	82 96       	adiw	r24, 0x22	; 34
    116a:	ac 01       	movw	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	68 2f       	mov	r22, r24
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <gpio_write_pin+0x7c>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	6a 95       	dec	r22
    1184:	e2 f7       	brpl	.-8      	; 0x117e <gpio_write_pin+0x78>
    1186:	82 2b       	or	r24, r18
    1188:	93 2b       	or	r25, r19
    118a:	09 2e       	mov	r0, r25
    118c:	00 0c       	add	r0, r0
    118e:	aa 0b       	sbc	r26, r26
    1190:	bb 0b       	sbc	r27, r27
    1192:	fa 01       	movw	r30, r20
    1194:	80 83       	st	Z, r24
    1196:	91 83       	std	Z+1, r25	; 0x01
    1198:	a2 83       	std	Z+2, r26	; 0x02
    119a:	b3 83       	std	Z+3, r27	; 0x03
    119c:	27 c0       	rjmp	.+78     	; 0x11ec <gpio_write_pin+0xe6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9c 01       	movw	r18, r24
    11a6:	21 50       	subi	r18, 0x01	; 1
    11a8:	31 09       	sbc	r19, r1
    11aa:	c9 01       	movw	r24, r18
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	82 0f       	add	r24, r18
    11b2:	93 1f       	adc	r25, r19
    11b4:	82 96       	adiw	r24, 0x22	; 34
    11b6:	ac 01       	movw	r20, r24
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	68 2f       	mov	r22, r24
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <gpio_write_pin+0xc8>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	6a 95       	dec	r22
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <gpio_write_pin+0xc4>
    11d2:	80 95       	com	r24
    11d4:	90 95       	com	r25
    11d6:	82 23       	and	r24, r18
    11d8:	93 23       	and	r25, r19
    11da:	09 2e       	mov	r0, r25
    11dc:	00 0c       	add	r0, r0
    11de:	aa 0b       	sbc	r26, r26
    11e0:	bb 0b       	sbc	r27, r27
    11e2:	fa 01       	movw	r30, r20
    11e4:	80 83       	st	Z, r24
    11e6:	91 83       	std	Z+1, r25	; 0x01
    11e8:	a2 83       	std	Z+2, r26	; 0x02
    11ea:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    11ec:	80 e0       	ldi	r24, 0x00	; 0
}
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	00 d0       	rcall	.+0      	; 0x1202 <__gpio_read_pin+0x6>
    1202:	1f 92       	push	r1
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	86 95       	lsr	r24
    120e:	86 95       	lsr	r24
    1210:	86 95       	lsr	r24
    1212:	8f 5f       	subi	r24, 0xFF	; 255
    1214:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	87 70       	andi	r24, 0x07	; 7
    121a:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	9c 01       	movw	r18, r24
    1224:	21 50       	subi	r18, 0x01	; 1
    1226:	31 09       	sbc	r19, r1
    1228:	c9 01       	movw	r24, r18
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	82 0f       	add	r24, r18
    1230:	93 1f       	adc	r25, r19
    1232:	80 96       	adiw	r24, 0x20	; 32
    1234:	fc 01       	movw	r30, r24
    1236:	80 81       	ld	r24, Z
    1238:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	22 2f       	mov	r18, r18
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	02 c0       	rjmp	.+4      	; 0x124c <__gpio_read_pin+0x50>
    1248:	95 95       	asr	r25
    124a:	87 95       	ror	r24
    124c:	2a 95       	dec	r18
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <__gpio_read_pin+0x4c>
    1250:	81 70       	andi	r24, 0x01	; 1
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	29 97       	sbiw	r28, 0x09	; 9
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1274:	80 91 0d 01 	lds	r24, 0x010D
    1278:	90 91 0e 01 	lds	r25, 0x010E
    127c:	9d 83       	std	Y+5, r25	; 0x05
    127e:	8c 83       	std	Y+4, r24	; 0x04
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	9d 81       	ldd	r25, Y+5	; 0x05
    1284:	05 97       	sbiw	r24, 0x05	; 5
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	55 c0       	rjmp	.+170    	; 0x1336 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	9a 81       	ldd	r25, Y+2	; 0x02
    1290:	fc 01       	movw	r30, r24
    1292:	90 81       	ld	r25, Z
    1294:	89 85       	ldd	r24, Y+9	; 0x09
    1296:	98 17       	cp	r25, r24
    1298:	09 f0       	breq	.+2      	; 0x129c <gpio_read_pin+0x3e>
    129a:	41 c0       	rjmp	.+130    	; 0x131e <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
    129c:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    129e:	1f c0       	rjmp	.+62     	; 0x12de <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	29 81       	ldd	r18, Y+1	; 0x01
    12a8:	3a 81       	ldd	r19, Y+2	; 0x02
    12aa:	82 0f       	add	r24, r18
    12ac:	93 1f       	adc	r25, r19
    12ae:	02 96       	adiw	r24, 0x02	; 2
    12b0:	fc 01       	movw	r30, r24
    12b2:	40 81       	ld	r20, Z
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	29 81       	ldd	r18, Y+1	; 0x01
    12be:	3a 81       	ldd	r19, Y+2	; 0x02
    12c0:	82 0f       	add	r24, r18
    12c2:	93 1f       	adc	r25, r19
    12c4:	02 96       	adiw	r24, 0x02	; 2
    12c6:	fc 01       	movw	r30, r24
    12c8:	80 81       	ld	r24, Z
    12ca:	48 17       	cp	r20, r24
    12cc:	29 f0       	breq	.+10     	; 0x12d8 <gpio_read_pin+0x7a>
                    return input->previous_state;
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	fc 01       	movw	r30, r24
    12d4:	84 81       	ldd	r24, Z+4	; 0x04
    12d6:	37 c0       	rjmp	.+110    	; 0x1346 <gpio_read_pin+0xe8>
                i++;
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	8f 5f       	subi	r24, 0xFF	; 255
    12dc:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	88 23       	and	r24, r24
    12e2:	f1 f2       	breq	.-68     	; 0x12a0 <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	fc 01       	movw	r30, r24
    12ea:	91 81       	ldd	r25, Z+1	; 0x01
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	89 27       	eor	r24, r25
    12f0:	88 23       	and	r24, r24
    12f2:	29 f0       	breq	.+10     	; 0x12fe <gpio_read_pin+0xa0>
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	fc 01       	movw	r30, r24
    12fa:	82 81       	ldd	r24, Z+2	; 0x02
    12fc:	08 c0       	rjmp	.+16     	; 0x130e <gpio_read_pin+0xb0>
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	fc 01       	movw	r30, r24
    1304:	92 81       	ldd	r25, Z+2	; 0x02
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	99 23       	and	r25, r25
    130a:	09 f0       	breq	.+2      	; 0x130e <gpio_read_pin+0xb0>
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	9a 81       	ldd	r25, Y+2	; 0x02
    1314:	28 85       	ldd	r18, Y+8	; 0x08
    1316:	fc 01       	movw	r30, r24
    1318:	24 83       	std	Z+4, r18	; 0x04

            return state;
    131a:	88 85       	ldd	r24, Y+8	; 0x08
    131c:	14 c0       	rjmp	.+40     	; 0x1346 <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	fc 01       	movw	r30, r24
    1324:	87 81       	ldd	r24, Z+7	; 0x07
    1326:	90 85       	ldd	r25, Z+8	; 0x08
    1328:	9f 83       	std	Y+7, r25	; 0x07
    132a:	8e 83       	std	Y+6, r24	; 0x06
    132c:	8e 81       	ldd	r24, Y+6	; 0x06
    132e:	9f 81       	ldd	r25, Y+7	; 0x07
    1330:	05 97       	sbiw	r24, 0x05	; 5
    1332:	9a 83       	std	Y+2, r25	; 0x02
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	9a 81       	ldd	r25, Y+2	; 0x02
    133a:	05 96       	adiw	r24, 0x05	; 5
    133c:	8b 50       	subi	r24, 0x0B	; 11
    133e:	91 40       	sbci	r25, 0x01	; 1
    1340:	09 f0       	breq	.+2      	; 0x1344 <gpio_read_pin+0xe6>
    1342:	a4 cf       	rjmp	.-184    	; 0x128c <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1344:	81 e0       	ldi	r24, 0x01	; 1
}
    1346:	29 96       	adiw	r28, 0x09	; 9
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	08 95       	ret

00001358 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	00 d0       	rcall	.+0      	; 0x1362 <gpio_debouncer+0xa>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <gpio_debouncer+0xc>
    1364:	00 d0       	rcall	.+0      	; 0x1366 <gpio_debouncer+0xe>
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    136a:	80 91 0d 01 	lds	r24, 0x010D
    136e:	90 91 0e 01 	lds	r25, 0x010E
    1372:	9c 83       	std	Y+4, r25	; 0x04
    1374:	8b 83       	std	Y+3, r24	; 0x03
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	05 97       	sbiw	r24, 0x05	; 5
    137c:	9a 83       	std	Y+2, r25	; 0x02
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	1e c0       	rjmp	.+60     	; 0x13be <gpio_debouncer+0x66>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    1382:	00 91 62 01 	lds	r16, 0x0162
    1386:	10 91 63 01 	lds	r17, 0x0163
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	9a 81       	ldd	r25, Y+2	; 0x02
    138e:	fc 01       	movw	r30, r24
    1390:	80 81       	ld	r24, Z
    1392:	0e 94 fe 08 	call	0x11fc	; 0x11fc <__gpio_read_pin>
    1396:	28 2f       	mov	r18, r24
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	80 0f       	add	r24, r16
    139e:	91 1f       	adc	r25, r17
    13a0:	02 96       	adiw	r24, 0x02	; 2
    13a2:	fc 01       	movw	r30, r24
    13a4:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	9a 81       	ldd	r25, Y+2	; 0x02
    13aa:	fc 01       	movw	r30, r24
    13ac:	87 81       	ldd	r24, Z+7	; 0x07
    13ae:	90 85       	ldd	r25, Z+8	; 0x08
    13b0:	9e 83       	std	Y+6, r25	; 0x06
    13b2:	8d 83       	std	Y+5, r24	; 0x05
    13b4:	8d 81       	ldd	r24, Y+5	; 0x05
    13b6:	9e 81       	ldd	r25, Y+6	; 0x06
    13b8:	05 97       	sbiw	r24, 0x05	; 5
    13ba:	9a 83       	std	Y+2, r25	; 0x02
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	05 96       	adiw	r24, 0x05	; 5
    13c4:	8b 50       	subi	r24, 0x0B	; 11
    13c6:	91 40       	sbci	r25, 0x01	; 1
    13c8:	e1 f6       	brne	.-72     	; 0x1382 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    13ca:	80 91 62 01 	lds	r24, 0x0162
    13ce:	90 91 63 01 	lds	r25, 0x0163
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	90 93 63 01 	sts	0x0163, r25
    13d8:	80 93 62 01 	sts	0x0162, r24
    13dc:	02 97       	sbiw	r24, 0x02	; 2
    13de:	21 f4       	brne	.+8      	; 0x13e8 <gpio_debouncer+0x90>
        count = 0;
    13e0:	10 92 63 01 	sts	0x0163, r1
    13e4:	10 92 62 01 	sts	0x0162, r1

}
    13e8:	26 96       	adiw	r28, 0x06	; 6
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	08 95       	ret

000013fe <odometry_set_speed>:
 * 	void odometry_set_speed(uint8_t speed)
 *
 * 	Send odometry board the max speed
 */
void odometry_set_speed(uint8_t speed)
{
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	67 97       	sbiw	r28, 0x17	; 23
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1414:	80 91 64 01 	lds	r24, 0x0164
    1418:	9f 89       	ldd	r25, Y+23	; 0x17
    141a:	98 17       	cp	r25, r24
    141c:	09 f4       	brne	.+2      	; 0x1420 <odometry_set_speed+0x22>
    141e:	82 c0       	rjmp	.+260    	; 0x1524 <odometry_set_speed+0x126>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1420:	86 e5       	ldi	r24, 0x56	; 86
    1422:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1424:	8f 89       	ldd	r24, Y+23	; 0x17
    1426:	88 8b       	std	Y+16, r24	; 0x10
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1428:	72 c0       	rjmp	.+228    	; 0x150e <odometry_set_speed+0x110>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a8 e4       	ldi	r26, 0x48	; 72
    1430:	b2 e4       	ldi	r27, 0x42	; 66
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	9a 83       	std	Y+2, r25	; 0x02
    1436:	ab 83       	std	Y+3, r26	; 0x03
    1438:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e4       	ldi	r19, 0x40	; 64
    143e:	4c e1       	ldi	r20, 0x1C	; 28
    1440:	55 e4       	ldi	r21, 0x45	; 69
    1442:	69 81       	ldd	r22, Y+1	; 0x01
    1444:	7a 81       	ldd	r23, Y+2	; 0x02
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	9e 83       	std	Y+6, r25	; 0x06
    1456:	af 83       	std	Y+7, r26	; 0x07
    1458:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e8       	ldi	r20, 0x80	; 128
    1460:	5f e3       	ldi	r21, 0x3F	; 63
    1462:	6d 81       	ldd	r22, Y+5	; 0x05
    1464:	7e 81       	ldd	r23, Y+6	; 0x06
    1466:	8f 81       	ldd	r24, Y+7	; 0x07
    1468:	98 85       	ldd	r25, Y+8	; 0x08
    146a:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    146e:	88 23       	and	r24, r24
    1470:	2c f4       	brge	.+10     	; 0x147c <odometry_set_speed+0x7e>
		__ticks = 1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9a 87       	std	Y+10, r25	; 0x0a
    1478:	89 87       	std	Y+9, r24	; 0x09
    147a:	3f c0       	rjmp	.+126    	; 0x14fa <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	3f ef       	ldi	r19, 0xFF	; 255
    1480:	4f e7       	ldi	r20, 0x7F	; 127
    1482:	57 e4       	ldi	r21, 0x47	; 71
    1484:	6d 81       	ldd	r22, Y+5	; 0x05
    1486:	7e 81       	ldd	r23, Y+6	; 0x06
    1488:	8f 81       	ldd	r24, Y+7	; 0x07
    148a:	98 85       	ldd	r25, Y+8	; 0x08
    148c:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    1490:	18 16       	cp	r1, r24
    1492:	4c f5       	brge	.+82     	; 0x14e6 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	51 e4       	ldi	r21, 0x41	; 65
    149c:	69 81       	ldd	r22, Y+1	; 0x01
    149e:	7a 81       	ldd	r23, Y+2	; 0x02
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	bc 01       	movw	r22, r24
    14ae:	cd 01       	movw	r24, r26
    14b0:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	9a 87       	std	Y+10, r25	; 0x0a
    14ba:	89 87       	std	Y+9, r24	; 0x09
    14bc:	0f c0       	rjmp	.+30     	; 0x14dc <odometry_set_speed+0xde>
    14be:	8a ef       	ldi	r24, 0xFA	; 250
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	9c 87       	std	Y+12, r25	; 0x0c
    14c4:	8b 87       	std	Y+11, r24	; 0x0b
    14c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    14c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <odometry_set_speed+0xcc>
    14ce:	9c 87       	std	Y+12, r25	; 0x0c
    14d0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d2:	89 85       	ldd	r24, Y+9	; 0x09
    14d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	9a 87       	std	Y+10, r25	; 0x0a
    14da:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14dc:	89 85       	ldd	r24, Y+9	; 0x09
    14de:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e0:	89 2b       	or	r24, r25
    14e2:	69 f7       	brne	.-38     	; 0x14be <odometry_set_speed+0xc0>
    14e4:	14 c0       	rjmp	.+40     	; 0x150e <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e6:	6d 81       	ldd	r22, Y+5	; 0x05
    14e8:	7e 81       	ldd	r23, Y+6	; 0x06
    14ea:	8f 81       	ldd	r24, Y+7	; 0x07
    14ec:	98 85       	ldd	r25, Y+8	; 0x08
    14ee:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	9a 87       	std	Y+10, r25	; 0x0a
    14f8:	89 87       	std	Y+9, r24	; 0x09
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	9e 87       	std	Y+14, r25	; 0x0e
    1500:	8d 87       	std	Y+13, r24	; 0x0d
    1502:	8d 85       	ldd	r24, Y+13	; 0x0d
    1504:	9e 85       	ldd	r25, Y+14	; 0x0e
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <odometry_set_speed+0x108>
    150a:	9e 87       	std	Y+14, r25	; 0x0e
    150c:	8d 87       	std	Y+13, r24	; 0x0d
    150e:	ce 01       	movw	r24, r28
    1510:	0f 96       	adiw	r24, 0x0f	; 15
    1512:	63 ec       	ldi	r22, 0xC3	; 195
    1514:	0e 94 bc 06 	call	0xd78	; 0xd78 <CAN_Write>
    1518:	88 23       	and	r24, r24
    151a:	09 f0       	breq	.+2      	; 0x151e <odometry_set_speed+0x120>
    151c:	86 cf       	rjmp	.-244    	; 0x142a <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    151e:	8f 89       	ldd	r24, Y+23	; 0x17
    1520:	80 93 64 01 	sts	0x0164, r24
}
    1524:	67 96       	adiw	r28, 0x17	; 23
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	08 95       	ret

00001536 <odometry_query_position>:
 * 	void odometry_query_position(void)
 *
 * 	Get the current position. Update it to position
 */
void odometry_query_position(void)
{
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	66 97       	sbiw	r28, 0x16	; 22
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    154a:	80 e5       	ldi	r24, 0x50	; 80
    154c:	8f 87       	std	Y+15, r24	; 0x0f
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    154e:	72 c0       	rjmp	.+228    	; 0x1634 <odometry_query_position+0xfe>
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a8 e4       	ldi	r26, 0x48	; 72
    1556:	b2 e4       	ldi	r27, 0x42	; 66
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	9a 83       	std	Y+2, r25	; 0x02
    155c:	ab 83       	std	Y+3, r26	; 0x03
    155e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e4       	ldi	r19, 0x40	; 64
    1564:	4c e1       	ldi	r20, 0x1C	; 28
    1566:	55 e4       	ldi	r21, 0x45	; 69
    1568:	69 81       	ldd	r22, Y+1	; 0x01
    156a:	7a 81       	ldd	r23, Y+2	; 0x02
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	9e 83       	std	Y+6, r25	; 0x06
    157c:	af 83       	std	Y+7, r26	; 0x07
    157e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e8       	ldi	r20, 0x80	; 128
    1586:	5f e3       	ldi	r21, 0x3F	; 63
    1588:	6d 81       	ldd	r22, Y+5	; 0x05
    158a:	7e 81       	ldd	r23, Y+6	; 0x06
    158c:	8f 81       	ldd	r24, Y+7	; 0x07
    158e:	98 85       	ldd	r25, Y+8	; 0x08
    1590:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    1594:	88 23       	and	r24, r24
    1596:	2c f4       	brge	.+10     	; 0x15a2 <odometry_query_position+0x6c>
		__ticks = 1;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9a 87       	std	Y+10, r25	; 0x0a
    159e:	89 87       	std	Y+9, r24	; 0x09
    15a0:	3f c0       	rjmp	.+126    	; 0x1620 <odometry_query_position+0xea>
	else if (__tmp > 65535)
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	3f ef       	ldi	r19, 0xFF	; 255
    15a6:	4f e7       	ldi	r20, 0x7F	; 127
    15a8:	57 e4       	ldi	r21, 0x47	; 71
    15aa:	6d 81       	ldd	r22, Y+5	; 0x05
    15ac:	7e 81       	ldd	r23, Y+6	; 0x06
    15ae:	8f 81       	ldd	r24, Y+7	; 0x07
    15b0:	98 85       	ldd	r25, Y+8	; 0x08
    15b2:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    15b6:	18 16       	cp	r1, r24
    15b8:	4c f5       	brge	.+82     	; 0x160c <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e2       	ldi	r20, 0x20	; 32
    15c0:	51 e4       	ldi	r21, 0x41	; 65
    15c2:	69 81       	ldd	r22, Y+1	; 0x01
    15c4:	7a 81       	ldd	r23, Y+2	; 0x02
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	9a 87       	std	Y+10, r25	; 0x0a
    15e0:	89 87       	std	Y+9, r24	; 0x09
    15e2:	0f c0       	rjmp	.+30     	; 0x1602 <odometry_query_position+0xcc>
    15e4:	8a ef       	ldi	r24, 0xFA	; 250
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	9c 87       	std	Y+12, r25	; 0x0c
    15ea:	8b 87       	std	Y+11, r24	; 0x0b
    15ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    15ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <odometry_query_position+0xba>
    15f4:	9c 87       	std	Y+12, r25	; 0x0c
    15f6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f8:	89 85       	ldd	r24, Y+9	; 0x09
    15fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	9a 87       	std	Y+10, r25	; 0x0a
    1600:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1602:	89 85       	ldd	r24, Y+9	; 0x09
    1604:	9a 85       	ldd	r25, Y+10	; 0x0a
    1606:	89 2b       	or	r24, r25
    1608:	69 f7       	brne	.-38     	; 0x15e4 <odometry_query_position+0xae>
    160a:	14 c0       	rjmp	.+40     	; 0x1634 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160c:	6d 81       	ldd	r22, Y+5	; 0x05
    160e:	7e 81       	ldd	r23, Y+6	; 0x06
    1610:	8f 81       	ldd	r24, Y+7	; 0x07
    1612:	98 85       	ldd	r25, Y+8	; 0x08
    1614:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	9a 87       	std	Y+10, r25	; 0x0a
    161e:	89 87       	std	Y+9, r24	; 0x09
    1620:	89 85       	ldd	r24, Y+9	; 0x09
    1622:	9a 85       	ldd	r25, Y+10	; 0x0a
    1624:	9e 87       	std	Y+14, r25	; 0x0e
    1626:	8d 87       	std	Y+13, r24	; 0x0d
    1628:	8d 85       	ldd	r24, Y+13	; 0x0d
    162a:	9e 85       	ldd	r25, Y+14	; 0x0e
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <odometry_query_position+0xf6>
    1630:	9e 87       	std	Y+14, r25	; 0x0e
    1632:	8d 87       	std	Y+13, r24	; 0x0d
    1634:	ce 01       	movw	r24, r28
    1636:	0f 96       	adiw	r24, 0x0f	; 15
    1638:	63 ec       	ldi	r22, 0xC3	; 195
    163a:	0e 94 bc 06 	call	0xd78	; 0xd78 <CAN_Write>
    163e:	88 23       	and	r24, r24
    1640:	09 f0       	breq	.+2      	; 0x1644 <odometry_query_position+0x10e>
    1642:	86 cf       	rjmp	.-244    	; 0x1550 <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1644:	ce 01       	movw	r24, r28
    1646:	0f 96       	adiw	r24, 0x0f	; 15
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	0e 94 47 06 	call	0xc8e	; 0xc8e <CAN_Read>

	position.state = buffer[0];
    164e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1650:	80 93 15 01 	sts	0x0115, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1654:	88 89       	ldd	r24, Y+16	; 0x10
    1656:	88 2f       	mov	r24, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	38 2f       	mov	r19, r24
    165c:	22 27       	eor	r18, r18
    165e:	89 89       	ldd	r24, Y+17	; 0x11
    1660:	88 2f       	mov	r24, r24
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	82 2b       	or	r24, r18
    1666:	93 2b       	or	r25, r19
    1668:	90 93 10 01 	sts	0x0110, r25
    166c:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1670:	8a 89       	ldd	r24, Y+18	; 0x12
    1672:	88 2f       	mov	r24, r24
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	38 2f       	mov	r19, r24
    1678:	22 27       	eor	r18, r18
    167a:	8b 89       	ldd	r24, Y+19	; 0x13
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	82 2b       	or	r24, r18
    1682:	93 2b       	or	r25, r19
    1684:	90 93 12 01 	sts	0x0112, r25
    1688:	80 93 11 01 	sts	0x0111, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    168c:	8c 89       	ldd	r24, Y+20	; 0x14
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	38 2f       	mov	r19, r24
    1694:	22 27       	eor	r18, r18
    1696:	8d 89       	ldd	r24, Y+21	; 0x15
    1698:	88 2f       	mov	r24, r24
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	82 2b       	or	r24, r18
    169e:	93 2b       	or	r25, r19
    16a0:	90 93 14 01 	sts	0x0114, r25
    16a4:	80 93 13 01 	sts	0x0113, r24
}
    16a8:	66 96       	adiw	r28, 0x16	; 22
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <odometry_wait_until_done>:
 * 	static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
 *
 * 	Callback function, execute function while odometry is moving
 */
static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <odometry_wait_until_done+0x6>
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <odometry_wait_until_done+0x8>
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <odometry_wait_until_done+0xa>
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	9e 83       	std	Y+6, r25	; 0x06
    16ca:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    16cc:	0e 94 9a 12 	call	0x2534	; 0x2534 <system_get_system_time>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	9a 83       	std	Y+2, r25	; 0x02
    16d8:	ab 83       	std	Y+3, r26	; 0x03
    16da:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    16dc:	0e 94 9b 0a 	call	0x1536	; 0x1536 <odometry_query_position>
		if(callback != NULL)
    16e0:	8d 81       	ldd	r24, Y+5	; 0x05
    16e2:	9e 81       	ldd	r25, Y+6	; 0x06
    16e4:	89 2b       	or	r24, r25
    16e6:	71 f0       	breq	.+28     	; 0x1704 <odometry_wait_until_done+0x4a>
		{
			if(callback(time) == 1)
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	ab 81       	ldd	r26, Y+3	; 0x03
    16ee:	bc 81       	ldd	r27, Y+4	; 0x04
    16f0:	2d 81       	ldd	r18, Y+5	; 0x05
    16f2:	3e 81       	ldd	r19, Y+6	; 0x06
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	f9 01       	movw	r30, r18
    16fa:	09 95       	icall
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	11 f4       	brne	.+4      	; 0x1704 <odometry_wait_until_done+0x4a>
				return ODOMETRY_FAIL;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <odometry_wait_until_done+0x5c>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1704:	80 91 15 01 	lds	r24, 0x0115
    1708:	8d 34       	cpi	r24, 0x4D	; 77
    170a:	41 f3       	breq	.-48     	; 0x16dc <odometry_wait_until_done+0x22>
    170c:	80 91 15 01 	lds	r24, 0x0115
    1710:	82 35       	cpi	r24, 0x52	; 82
    1712:	21 f3       	breq	.-56     	; 0x16dc <odometry_wait_until_done+0x22>

	return ODOMETRY_SUCCESS;
    1714:	80 e0       	ldi	r24, 0x00	; 0
}
    1716:	26 96       	adiw	r28, 0x06	; 6
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <odometry_stop>:
 * 	void odometry_stop(int8_t type)
 *
 * 	Send stop to odometry
 */
void odometry_stop(int8_t type)
{
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	67 97       	sbiw	r28, 0x17	; 23
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    173e:	8f 89       	ldd	r24, Y+23	; 0x17
    1740:	8f 87       	std	Y+15, r24	; 0x0f

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1742:	72 c0       	rjmp	.+228    	; 0x1828 <odometry_stop+0x100>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a8 e4       	ldi	r26, 0x48	; 72
    174a:	b2 e4       	ldi	r27, 0x42	; 66
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	9a 83       	std	Y+2, r25	; 0x02
    1750:	ab 83       	std	Y+3, r26	; 0x03
    1752:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e4       	ldi	r19, 0x40	; 64
    1758:	4c e1       	ldi	r20, 0x1C	; 28
    175a:	55 e4       	ldi	r21, 0x45	; 69
    175c:	69 81       	ldd	r22, Y+1	; 0x01
    175e:	7a 81       	ldd	r23, Y+2	; 0x02
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	8d 83       	std	Y+5, r24	; 0x05
    176e:	9e 83       	std	Y+6, r25	; 0x06
    1770:	af 83       	std	Y+7, r26	; 0x07
    1772:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	5f e3       	ldi	r21, 0x3F	; 63
    177c:	6d 81       	ldd	r22, Y+5	; 0x05
    177e:	7e 81       	ldd	r23, Y+6	; 0x06
    1780:	8f 81       	ldd	r24, Y+7	; 0x07
    1782:	98 85       	ldd	r25, Y+8	; 0x08
    1784:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    1788:	88 23       	and	r24, r24
    178a:	2c f4       	brge	.+10     	; 0x1796 <odometry_stop+0x6e>
		__ticks = 1;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	9a 87       	std	Y+10, r25	; 0x0a
    1792:	89 87       	std	Y+9, r24	; 0x09
    1794:	3f c0       	rjmp	.+126    	; 0x1814 <odometry_stop+0xec>
	else if (__tmp > 65535)
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	3f ef       	ldi	r19, 0xFF	; 255
    179a:	4f e7       	ldi	r20, 0x7F	; 127
    179c:	57 e4       	ldi	r21, 0x47	; 71
    179e:	6d 81       	ldd	r22, Y+5	; 0x05
    17a0:	7e 81       	ldd	r23, Y+6	; 0x06
    17a2:	8f 81       	ldd	r24, Y+7	; 0x07
    17a4:	98 85       	ldd	r25, Y+8	; 0x08
    17a6:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    17aa:	18 16       	cp	r1, r24
    17ac:	4c f5       	brge	.+82     	; 0x1800 <odometry_stop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e2       	ldi	r20, 0x20	; 32
    17b4:	51 e4       	ldi	r21, 0x41	; 65
    17b6:	69 81       	ldd	r22, Y+1	; 0x01
    17b8:	7a 81       	ldd	r23, Y+2	; 0x02
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	9c 81       	ldd	r25, Y+4	; 0x04
    17be:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	bc 01       	movw	r22, r24
    17c8:	cd 01       	movw	r24, r26
    17ca:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	9a 87       	std	Y+10, r25	; 0x0a
    17d4:	89 87       	std	Y+9, r24	; 0x09
    17d6:	0f c0       	rjmp	.+30     	; 0x17f6 <odometry_stop+0xce>
    17d8:	8a ef       	ldi	r24, 0xFA	; 250
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9c 87       	std	Y+12, r25	; 0x0c
    17de:	8b 87       	std	Y+11, r24	; 0x0b
    17e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    17e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <odometry_stop+0xbc>
    17e8:	9c 87       	std	Y+12, r25	; 0x0c
    17ea:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ec:	89 85       	ldd	r24, Y+9	; 0x09
    17ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	9a 87       	std	Y+10, r25	; 0x0a
    17f4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f6:	89 85       	ldd	r24, Y+9	; 0x09
    17f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fa:	89 2b       	or	r24, r25
    17fc:	69 f7       	brne	.-38     	; 0x17d8 <odometry_stop+0xb0>
    17fe:	14 c0       	rjmp	.+40     	; 0x1828 <odometry_stop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1800:	6d 81       	ldd	r22, Y+5	; 0x05
    1802:	7e 81       	ldd	r23, Y+6	; 0x06
    1804:	8f 81       	ldd	r24, Y+7	; 0x07
    1806:	98 85       	ldd	r25, Y+8	; 0x08
    1808:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	9a 87       	std	Y+10, r25	; 0x0a
    1812:	89 87       	std	Y+9, r24	; 0x09
    1814:	89 85       	ldd	r24, Y+9	; 0x09
    1816:	9a 85       	ldd	r25, Y+10	; 0x0a
    1818:	9e 87       	std	Y+14, r25	; 0x0e
    181a:	8d 87       	std	Y+13, r24	; 0x0d
    181c:	8d 85       	ldd	r24, Y+13	; 0x0d
    181e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <odometry_stop+0xf8>
    1824:	9e 87       	std	Y+14, r25	; 0x0e
    1826:	8d 87       	std	Y+13, r24	; 0x0d
    1828:	ce 01       	movw	r24, r28
    182a:	0f 96       	adiw	r24, 0x0f	; 15
    182c:	63 ec       	ldi	r22, 0xC3	; 195
    182e:	0e 94 bc 06 	call	0xd78	; 0xd78 <CAN_Write>
    1832:	88 23       	and	r24, r24
    1834:	09 f0       	breq	.+2      	; 0x1838 <odometry_stop+0x110>
    1836:	86 cf       	rjmp	.-244    	; 0x1744 <odometry_stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    1838:	0e 94 9b 0a 	call	0x1536	; 0x1536 <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    183c:	80 91 15 01 	lds	r24, 0x0115
    1840:	8d 34       	cpi	r24, 0x4D	; 77
    1842:	09 f4       	brne	.+2      	; 0x1846 <odometry_stop+0x11e>
    1844:	7c cf       	rjmp	.-264    	; 0x173e <odometry_stop+0x16>
    1846:	80 91 15 01 	lds	r24, 0x0115
    184a:	82 35       	cpi	r24, 0x52	; 82
    184c:	09 f4       	brne	.+2      	; 0x1850 <odometry_stop+0x128>
    184e:	77 cf       	rjmp	.-274    	; 0x173e <odometry_stop+0x16>
}
    1850:	67 96       	adiw	r28, 0x17	; 23
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <odometry_move_straight>:
 * 	uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move straight command to odometry
 */
uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	6b 97       	sbiw	r28, 0x1b	; 27
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	98 8f       	std	Y+24, r25	; 0x18
    1878:	8f 8b       	std	Y+23, r24	; 0x17
    187a:	69 8f       	std	Y+25, r22	; 0x19
    187c:	5b 8f       	std	Y+27, r21	; 0x1b
    187e:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1880:	89 8d       	ldd	r24, Y+25	; 0x19
    1882:	0e 94 ff 09 	call	0x13fe	; 0x13fe <odometry_set_speed>
	buffer[0] = 'D';
    1886:	84 e4       	ldi	r24, 0x44	; 68
    1888:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    188a:	8f 89       	ldd	r24, Y+23	; 0x17
    188c:	98 8d       	ldd	r25, Y+24	; 0x18
    188e:	89 2f       	mov	r24, r25
    1890:	99 0f       	add	r25, r25
    1892:	99 0b       	sbc	r25, r25
    1894:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    1896:	8f 89       	ldd	r24, Y+23	; 0x17
    1898:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    189a:	72 c0       	rjmp	.+228    	; 0x1980 <odometry_move_straight+0x11e>
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a8 e4       	ldi	r26, 0x48	; 72
    18a2:	b2 e4       	ldi	r27, 0x42	; 66
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	9a 83       	std	Y+2, r25	; 0x02
    18a8:	ab 83       	std	Y+3, r26	; 0x03
    18aa:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e4       	ldi	r19, 0x40	; 64
    18b0:	4c e1       	ldi	r20, 0x1C	; 28
    18b2:	55 e4       	ldi	r21, 0x45	; 69
    18b4:	69 81       	ldd	r22, Y+1	; 0x01
    18b6:	7a 81       	ldd	r23, Y+2	; 0x02
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	8d 83       	std	Y+5, r24	; 0x05
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	af 83       	std	Y+7, r26	; 0x07
    18ca:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	6d 81       	ldd	r22, Y+5	; 0x05
    18d6:	7e 81       	ldd	r23, Y+6	; 0x06
    18d8:	8f 81       	ldd	r24, Y+7	; 0x07
    18da:	98 85       	ldd	r25, Y+8	; 0x08
    18dc:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    18e0:	88 23       	and	r24, r24
    18e2:	2c f4       	brge	.+10     	; 0x18ee <odometry_move_straight+0x8c>
		__ticks = 1;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9a 87       	std	Y+10, r25	; 0x0a
    18ea:	89 87       	std	Y+9, r24	; 0x09
    18ec:	3f c0       	rjmp	.+126    	; 0x196c <odometry_move_straight+0x10a>
	else if (__tmp > 65535)
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	3f ef       	ldi	r19, 0xFF	; 255
    18f2:	4f e7       	ldi	r20, 0x7F	; 127
    18f4:	57 e4       	ldi	r21, 0x47	; 71
    18f6:	6d 81       	ldd	r22, Y+5	; 0x05
    18f8:	7e 81       	ldd	r23, Y+6	; 0x06
    18fa:	8f 81       	ldd	r24, Y+7	; 0x07
    18fc:	98 85       	ldd	r25, Y+8	; 0x08
    18fe:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    1902:	18 16       	cp	r1, r24
    1904:	4c f5       	brge	.+82     	; 0x1958 <odometry_move_straight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	69 81       	ldd	r22, Y+1	; 0x01
    1910:	7a 81       	ldd	r23, Y+2	; 0x02
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	9a 87       	std	Y+10, r25	; 0x0a
    192c:	89 87       	std	Y+9, r24	; 0x09
    192e:	0f c0       	rjmp	.+30     	; 0x194e <odometry_move_straight+0xec>
    1930:	8a ef       	ldi	r24, 0xFA	; 250
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9c 87       	std	Y+12, r25	; 0x0c
    1936:	8b 87       	std	Y+11, r24	; 0x0b
    1938:	8b 85       	ldd	r24, Y+11	; 0x0b
    193a:	9c 85       	ldd	r25, Y+12	; 0x0c
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <odometry_move_straight+0xda>
    1940:	9c 87       	std	Y+12, r25	; 0x0c
    1942:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1944:	89 85       	ldd	r24, Y+9	; 0x09
    1946:	9a 85       	ldd	r25, Y+10	; 0x0a
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	9a 87       	std	Y+10, r25	; 0x0a
    194c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194e:	89 85       	ldd	r24, Y+9	; 0x09
    1950:	9a 85       	ldd	r25, Y+10	; 0x0a
    1952:	89 2b       	or	r24, r25
    1954:	69 f7       	brne	.-38     	; 0x1930 <odometry_move_straight+0xce>
    1956:	14 c0       	rjmp	.+40     	; 0x1980 <odometry_move_straight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1958:	6d 81       	ldd	r22, Y+5	; 0x05
    195a:	7e 81       	ldd	r23, Y+6	; 0x06
    195c:	8f 81       	ldd	r24, Y+7	; 0x07
    195e:	98 85       	ldd	r25, Y+8	; 0x08
    1960:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	9a 87       	std	Y+10, r25	; 0x0a
    196a:	89 87       	std	Y+9, r24	; 0x09
    196c:	89 85       	ldd	r24, Y+9	; 0x09
    196e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1970:	9e 87       	std	Y+14, r25	; 0x0e
    1972:	8d 87       	std	Y+13, r24	; 0x0d
    1974:	8d 85       	ldd	r24, Y+13	; 0x0d
    1976:	9e 85       	ldd	r25, Y+14	; 0x0e
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <odometry_move_straight+0x116>
    197c:	9e 87       	std	Y+14, r25	; 0x0e
    197e:	8d 87       	std	Y+13, r24	; 0x0d
    1980:	ce 01       	movw	r24, r28
    1982:	0f 96       	adiw	r24, 0x0f	; 15
    1984:	63 ec       	ldi	r22, 0xC3	; 195
    1986:	0e 94 bc 06 	call	0xd78	; 0xd78 <CAN_Write>
    198a:	88 23       	and	r24, r24
    198c:	09 f0       	breq	.+2      	; 0x1990 <odometry_move_straight+0x12e>
    198e:	86 cf       	rjmp	.-244    	; 0x189c <odometry_move_straight+0x3a>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1990:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1992:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1994:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <odometry_wait_until_done>
}
    1998:	6b 96       	adiw	r28, 0x1b	; 27
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	08 95       	ret

000019aa <odometry_move_to_position>:
 * 	uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move to position function to odometry
 */
uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, char (*callback)(uint32_t start_time))
{
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	6c 97       	sbiw	r28, 0x1c	; 28
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	98 8f       	std	Y+24, r25	; 0x18
    19c0:	8f 8b       	std	Y+23, r24	; 0x17
    19c2:	69 8f       	std	Y+25, r22	; 0x19
    19c4:	4a 8f       	std	Y+26, r20	; 0x1a
    19c6:	3c 8f       	std	Y+28, r19	; 0x1c
    19c8:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    19ca:	89 8d       	ldd	r24, Y+25	; 0x19
    19cc:	0e 94 ff 09 	call	0x13fe	; 0x13fe <odometry_set_speed>

	buffer[0] = 'G';
    19d0:	87 e4       	ldi	r24, 0x47	; 71
    19d2:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    19d4:	8f 89       	ldd	r24, Y+23	; 0x17
    19d6:	98 8d       	ldd	r25, Y+24	; 0x18
    19d8:	fc 01       	movw	r30, r24
    19da:	80 81       	ld	r24, Z
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	89 2f       	mov	r24, r25
    19e0:	99 0f       	add	r25, r25
    19e2:	99 0b       	sbc	r25, r25
    19e4:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    19e6:	8f 89       	ldd	r24, Y+23	; 0x17
    19e8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ea:	fc 01       	movw	r30, r24
    19ec:	80 81       	ld	r24, Z
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    19f2:	8f 89       	ldd	r24, Y+23	; 0x17
    19f4:	98 8d       	ldd	r25, Y+24	; 0x18
    19f6:	fc 01       	movw	r30, r24
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	89 2f       	mov	r24, r25
    19fe:	99 0f       	add	r25, r25
    1a00:	99 0b       	sbc	r25, r25
    1a02:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1a04:	8f 89       	ldd	r24, Y+23	; 0x17
    1a06:	98 8d       	ldd	r25, Y+24	; 0x18
    1a08:	fc 01       	movw	r30, r24
    1a0a:	82 81       	ldd	r24, Z+2	; 0x02
    1a0c:	93 81       	ldd	r25, Z+3	; 0x03
    1a0e:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    1a10:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    1a12:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a14:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1a16:	72 c0       	rjmp	.+228    	; 0x1afc <odometry_move_to_position+0x152>
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	a8 e4       	ldi	r26, 0x48	; 72
    1a1e:	b2 e4       	ldi	r27, 0x42	; 66
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	9a 83       	std	Y+2, r25	; 0x02
    1a24:	ab 83       	std	Y+3, r26	; 0x03
    1a26:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e4       	ldi	r19, 0x40	; 64
    1a2c:	4c e1       	ldi	r20, 0x1C	; 28
    1a2e:	55 e4       	ldi	r21, 0x45	; 69
    1a30:	69 81       	ldd	r22, Y+1	; 0x01
    1a32:	7a 81       	ldd	r23, Y+2	; 0x02
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	8d 83       	std	Y+5, r24	; 0x05
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	af 83       	std	Y+7, r26	; 0x07
    1a46:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	5f e3       	ldi	r21, 0x3F	; 63
    1a50:	6d 81       	ldd	r22, Y+5	; 0x05
    1a52:	7e 81       	ldd	r23, Y+6	; 0x06
    1a54:	8f 81       	ldd	r24, Y+7	; 0x07
    1a56:	98 85       	ldd	r25, Y+8	; 0x08
    1a58:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    1a5c:	88 23       	and	r24, r24
    1a5e:	2c f4       	brge	.+10     	; 0x1a6a <odometry_move_to_position+0xc0>
		__ticks = 1;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	9a 87       	std	Y+10, r25	; 0x0a
    1a66:	89 87       	std	Y+9, r24	; 0x09
    1a68:	3f c0       	rjmp	.+126    	; 0x1ae8 <odometry_move_to_position+0x13e>
	else if (__tmp > 65535)
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	57 e4       	ldi	r21, 0x47	; 71
    1a72:	6d 81       	ldd	r22, Y+5	; 0x05
    1a74:	7e 81       	ldd	r23, Y+6	; 0x06
    1a76:	8f 81       	ldd	r24, Y+7	; 0x07
    1a78:	98 85       	ldd	r25, Y+8	; 0x08
    1a7a:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    1a7e:	18 16       	cp	r1, r24
    1a80:	4c f5       	brge	.+82     	; 0x1ad4 <odometry_move_to_position+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e2       	ldi	r20, 0x20	; 32
    1a88:	51 e4       	ldi	r21, 0x41	; 65
    1a8a:	69 81       	ldd	r22, Y+1	; 0x01
    1a8c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	9c 81       	ldd	r25, Y+4	; 0x04
    1a92:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	bc 01       	movw	r22, r24
    1a9c:	cd 01       	movw	r24, r26
    1a9e:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9a 87       	std	Y+10, r25	; 0x0a
    1aa8:	89 87       	std	Y+9, r24	; 0x09
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <odometry_move_to_position+0x120>
    1aac:	8a ef       	ldi	r24, 0xFA	; 250
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9c 87       	std	Y+12, r25	; 0x0c
    1ab2:	8b 87       	std	Y+11, r24	; 0x0b
    1ab4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ab6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <odometry_move_to_position+0x10e>
    1abc:	9c 87       	std	Y+12, r25	; 0x0c
    1abe:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac0:	89 85       	ldd	r24, Y+9	; 0x09
    1ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	9a 87       	std	Y+10, r25	; 0x0a
    1ac8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aca:	89 85       	ldd	r24, Y+9	; 0x09
    1acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ace:	89 2b       	or	r24, r25
    1ad0:	69 f7       	brne	.-38     	; 0x1aac <odometry_move_to_position+0x102>
    1ad2:	14 c0       	rjmp	.+40     	; 0x1afc <odometry_move_to_position+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ad6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ad8:	8f 81       	ldd	r24, Y+7	; 0x07
    1ada:	98 85       	ldd	r25, Y+8	; 0x08
    1adc:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9a 87       	std	Y+10, r25	; 0x0a
    1ae6:	89 87       	std	Y+9, r24	; 0x09
    1ae8:	89 85       	ldd	r24, Y+9	; 0x09
    1aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aec:	9e 87       	std	Y+14, r25	; 0x0e
    1aee:	8d 87       	std	Y+13, r24	; 0x0d
    1af0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <odometry_move_to_position+0x14a>
    1af8:	9e 87       	std	Y+14, r25	; 0x0e
    1afa:	8d 87       	std	Y+13, r24	; 0x0d
    1afc:	ce 01       	movw	r24, r28
    1afe:	0f 96       	adiw	r24, 0x0f	; 15
    1b00:	63 ec       	ldi	r22, 0xC3	; 195
    1b02:	0e 94 bc 06 	call	0xd78	; 0xd78 <CAN_Write>
    1b06:	88 23       	and	r24, r24
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <odometry_move_to_position+0x162>
    1b0a:	86 cf       	rjmp	.-244    	; 0x1a18 <odometry_move_to_position+0x6e>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1b0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b10:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <odometry_wait_until_done>
}
    1b14:	6c 96       	adiw	r28, 0x1c	; 28
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	08 95       	ret

00001b26 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	68 97       	sbiw	r28, 0x18	; 24
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	98 8f       	std	Y+24, r25	; 0x18
    1b3c:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    1b3e:	89 e4       	ldi	r24, 0x49	; 73
    1b40:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    1b42:	8f 89       	ldd	r24, Y+23	; 0x17
    1b44:	98 8d       	ldd	r25, Y+24	; 0x18
    1b46:	fc 01       	movw	r30, r24
    1b48:	80 81       	ld	r24, Z
    1b4a:	91 81       	ldd	r25, Z+1	; 0x01
    1b4c:	89 2f       	mov	r24, r25
    1b4e:	99 0f       	add	r25, r25
    1b50:	99 0b       	sbc	r25, r25
    1b52:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    1b54:	8f 89       	ldd	r24, Y+23	; 0x17
    1b56:	98 8d       	ldd	r25, Y+24	; 0x18
    1b58:	fc 01       	movw	r30, r24
    1b5a:	80 81       	ld	r24, Z
    1b5c:	91 81       	ldd	r25, Z+1	; 0x01
    1b5e:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    1b60:	8f 89       	ldd	r24, Y+23	; 0x17
    1b62:	98 8d       	ldd	r25, Y+24	; 0x18
    1b64:	fc 01       	movw	r30, r24
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	89 2f       	mov	r24, r25
    1b6c:	99 0f       	add	r25, r25
    1b6e:	99 0b       	sbc	r25, r25
    1b70:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    1b72:	8f 89       	ldd	r24, Y+23	; 0x17
    1b74:	98 8d       	ldd	r25, Y+24	; 0x18
    1b76:	fc 01       	movw	r30, r24
    1b78:	82 81       	ldd	r24, Z+2	; 0x02
    1b7a:	93 81       	ldd	r25, Z+3	; 0x03
    1b7c:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    1b7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b80:	98 8d       	ldd	r25, Y+24	; 0x18
    1b82:	fc 01       	movw	r30, r24
    1b84:	84 81       	ldd	r24, Z+4	; 0x04
    1b86:	95 81       	ldd	r25, Z+5	; 0x05
    1b88:	89 2f       	mov	r24, r25
    1b8a:	99 0f       	add	r25, r25
    1b8c:	99 0b       	sbc	r25, r25
    1b8e:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    1b90:	8f 89       	ldd	r24, Y+23	; 0x17
    1b92:	98 8d       	ldd	r25, Y+24	; 0x18
    1b94:	fc 01       	movw	r30, r24
    1b96:	84 81       	ldd	r24, Z+4	; 0x04
    1b98:	95 81       	ldd	r25, Z+5	; 0x05
    1b9a:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    1b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	80 81       	ld	r24, Z
    1ba4:	91 81       	ldd	r25, Z+1	; 0x01
    1ba6:	90 93 10 01 	sts	0x0110, r25
    1baa:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = new_position->y;
    1bae:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	90 93 12 01 	sts	0x0112, r25
    1bbc:	80 93 11 01 	sts	0x0111, r24
	position.angle = new_position->angle;
    1bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	84 81       	ldd	r24, Z+4	; 0x04
    1bc8:	95 81       	ldd	r25, Z+5	; 0x05
    1bca:	90 93 14 01 	sts	0x0114, r25
    1bce:	80 93 13 01 	sts	0x0113, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1bd2:	72 c0       	rjmp	.+228    	; 0x1cb8 <odometry_set_position+0x192>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a8 e4       	ldi	r26, 0x48	; 72
    1bda:	b2 e4       	ldi	r27, 0x42	; 66
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	9a 83       	std	Y+2, r25	; 0x02
    1be0:	ab 83       	std	Y+3, r26	; 0x03
    1be2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e4       	ldi	r19, 0x40	; 64
    1be8:	4c e1       	ldi	r20, 0x1C	; 28
    1bea:	55 e4       	ldi	r21, 0x45	; 69
    1bec:	69 81       	ldd	r22, Y+1	; 0x01
    1bee:	7a 81       	ldd	r23, Y+2	; 0x02
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	af 83       	std	Y+7, r26	; 0x07
    1c02:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e8       	ldi	r20, 0x80	; 128
    1c0a:	5f e3       	ldi	r21, 0x3F	; 63
    1c0c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c0e:	7e 81       	ldd	r23, Y+6	; 0x06
    1c10:	8f 81       	ldd	r24, Y+7	; 0x07
    1c12:	98 85       	ldd	r25, Y+8	; 0x08
    1c14:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <odometry_set_position+0x100>
		__ticks = 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9a 87       	std	Y+10, r25	; 0x0a
    1c22:	89 87       	std	Y+9, r24	; 0x09
    1c24:	3f c0       	rjmp	.+126    	; 0x1ca4 <odometry_set_position+0x17e>
	else if (__tmp > 65535)
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	3f ef       	ldi	r19, 0xFF	; 255
    1c2a:	4f e7       	ldi	r20, 0x7F	; 127
    1c2c:	57 e4       	ldi	r21, 0x47	; 71
    1c2e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c30:	7e 81       	ldd	r23, Y+6	; 0x06
    1c32:	8f 81       	ldd	r24, Y+7	; 0x07
    1c34:	98 85       	ldd	r25, Y+8	; 0x08
    1c36:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    1c3a:	18 16       	cp	r1, r24
    1c3c:	4c f5       	brge	.+82     	; 0x1c90 <odometry_set_position+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e2       	ldi	r20, 0x20	; 32
    1c44:	51 e4       	ldi	r21, 0x41	; 65
    1c46:	69 81       	ldd	r22, Y+1	; 0x01
    1c48:	7a 81       	ldd	r23, Y+2	; 0x02
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4e:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9a 87       	std	Y+10, r25	; 0x0a
    1c64:	89 87       	std	Y+9, r24	; 0x09
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <odometry_set_position+0x160>
    1c68:	8a ef       	ldi	r24, 0xFA	; 250
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9c 87       	std	Y+12, r25	; 0x0c
    1c6e:	8b 87       	std	Y+11, r24	; 0x0b
    1c70:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c72:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <odometry_set_position+0x14e>
    1c78:	9c 87       	std	Y+12, r25	; 0x0c
    1c7a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7c:	89 85       	ldd	r24, Y+9	; 0x09
    1c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	9a 87       	std	Y+10, r25	; 0x0a
    1c84:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c86:	89 85       	ldd	r24, Y+9	; 0x09
    1c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8a:	89 2b       	or	r24, r25
    1c8c:	69 f7       	brne	.-38     	; 0x1c68 <odometry_set_position+0x142>
    1c8e:	14 c0       	rjmp	.+40     	; 0x1cb8 <odometry_set_position+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c90:	6d 81       	ldd	r22, Y+5	; 0x05
    1c92:	7e 81       	ldd	r23, Y+6	; 0x06
    1c94:	8f 81       	ldd	r24, Y+7	; 0x07
    1c96:	98 85       	ldd	r25, Y+8	; 0x08
    1c98:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9a 87       	std	Y+10, r25	; 0x0a
    1ca2:	89 87       	std	Y+9, r24	; 0x09
    1ca4:	89 85       	ldd	r24, Y+9	; 0x09
    1ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca8:	9e 87       	std	Y+14, r25	; 0x0e
    1caa:	8d 87       	std	Y+13, r24	; 0x0d
    1cac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <odometry_set_position+0x18a>
    1cb4:	9e 87       	std	Y+14, r25	; 0x0e
    1cb6:	8d 87       	std	Y+13, r24	; 0x0d
    1cb8:	ce 01       	movw	r24, r28
    1cba:	0f 96       	adiw	r24, 0x0f	; 15
    1cbc:	63 ec       	ldi	r22, 0xC3	; 195
    1cbe:	0e 94 bc 06 	call	0xd78	; 0xd78 <CAN_Write>
    1cc2:	88 23       	and	r24, r24
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <odometry_set_position+0x1a2>
    1cc6:	86 cf       	rjmp	.-244    	; 0x1bd4 <odometry_set_position+0xae>
		_delay_ms(50);
}
    1cc8:	68 96       	adiw	r28, 0x18	; 24
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	08 95       	ret

00001cda <odometry_rotate_for>:
 * 	uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send rotate for command to odometry board
 */
uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	6b 97       	sbiw	r28, 0x1b	; 27
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	98 8f       	std	Y+24, r25	; 0x18
    1cf0:	8f 8b       	std	Y+23, r24	; 0x17
    1cf2:	69 8f       	std	Y+25, r22	; 0x19
    1cf4:	5b 8f       	std	Y+27, r21	; 0x1b
    1cf6:	4a 8f       	std	Y+26, r20	; 0x1a

	uint8_t buffer[8];
	odometry_set_speed(speed);
    1cf8:	89 8d       	ldd	r24, Y+25	; 0x19
    1cfa:	0e 94 ff 09 	call	0x13fe	; 0x13fe <odometry_set_speed>

	buffer[0] = 'T';
    1cfe:	84 e5       	ldi	r24, 0x54	; 84
    1d00:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1d02:	8f 89       	ldd	r24, Y+23	; 0x17
    1d04:	98 8d       	ldd	r25, Y+24	; 0x18
    1d06:	89 2f       	mov	r24, r25
    1d08:	99 27       	eor	r25, r25
    1d0a:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0e:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1d10:	72 c0       	rjmp	.+228    	; 0x1df6 <odometry_rotate_for+0x11c>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a8 e4       	ldi	r26, 0x48	; 72
    1d18:	b2 e4       	ldi	r27, 0x42	; 66
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	ab 83       	std	Y+3, r26	; 0x03
    1d20:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e4       	ldi	r19, 0x40	; 64
    1d26:	4c e1       	ldi	r20, 0x1C	; 28
    1d28:	55 e4       	ldi	r21, 0x45	; 69
    1d2a:	69 81       	ldd	r22, Y+1	; 0x01
    1d2c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	9e 83       	std	Y+6, r25	; 0x06
    1d3e:	af 83       	std	Y+7, r26	; 0x07
    1d40:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e8       	ldi	r20, 0x80	; 128
    1d48:	5f e3       	ldi	r21, 0x3F	; 63
    1d4a:	6d 81       	ldd	r22, Y+5	; 0x05
    1d4c:	7e 81       	ldd	r23, Y+6	; 0x06
    1d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d50:	98 85       	ldd	r25, Y+8	; 0x08
    1d52:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    1d56:	88 23       	and	r24, r24
    1d58:	2c f4       	brge	.+10     	; 0x1d64 <odometry_rotate_for+0x8a>
		__ticks = 1;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9a 87       	std	Y+10, r25	; 0x0a
    1d60:	89 87       	std	Y+9, r24	; 0x09
    1d62:	3f c0       	rjmp	.+126    	; 0x1de2 <odometry_rotate_for+0x108>
	else if (__tmp > 65535)
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	3f ef       	ldi	r19, 0xFF	; 255
    1d68:	4f e7       	ldi	r20, 0x7F	; 127
    1d6a:	57 e4       	ldi	r21, 0x47	; 71
    1d6c:	6d 81       	ldd	r22, Y+5	; 0x05
    1d6e:	7e 81       	ldd	r23, Y+6	; 0x06
    1d70:	8f 81       	ldd	r24, Y+7	; 0x07
    1d72:	98 85       	ldd	r25, Y+8	; 0x08
    1d74:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    1d78:	18 16       	cp	r1, r24
    1d7a:	4c f5       	brge	.+82     	; 0x1dce <odometry_rotate_for+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e2       	ldi	r20, 0x20	; 32
    1d82:	51 e4       	ldi	r21, 0x41	; 65
    1d84:	69 81       	ldd	r22, Y+1	; 0x01
    1d86:	7a 81       	ldd	r23, Y+2	; 0x02
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	bc 01       	movw	r22, r24
    1d96:	cd 01       	movw	r24, r26
    1d98:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	9a 87       	std	Y+10, r25	; 0x0a
    1da2:	89 87       	std	Y+9, r24	; 0x09
    1da4:	0f c0       	rjmp	.+30     	; 0x1dc4 <odometry_rotate_for+0xea>
    1da6:	8a ef       	ldi	r24, 0xFA	; 250
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	9c 87       	std	Y+12, r25	; 0x0c
    1dac:	8b 87       	std	Y+11, r24	; 0x0b
    1dae:	8b 85       	ldd	r24, Y+11	; 0x0b
    1db0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <odometry_rotate_for+0xd8>
    1db6:	9c 87       	std	Y+12, r25	; 0x0c
    1db8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dba:	89 85       	ldd	r24, Y+9	; 0x09
    1dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	9a 87       	std	Y+10, r25	; 0x0a
    1dc2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	89 2b       	or	r24, r25
    1dca:	69 f7       	brne	.-38     	; 0x1da6 <odometry_rotate_for+0xcc>
    1dcc:	14 c0       	rjmp	.+40     	; 0x1df6 <odometry_rotate_for+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dce:	6d 81       	ldd	r22, Y+5	; 0x05
    1dd0:	7e 81       	ldd	r23, Y+6	; 0x06
    1dd2:	8f 81       	ldd	r24, Y+7	; 0x07
    1dd4:	98 85       	ldd	r25, Y+8	; 0x08
    1dd6:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	9a 87       	std	Y+10, r25	; 0x0a
    1de0:	89 87       	std	Y+9, r24	; 0x09
    1de2:	89 85       	ldd	r24, Y+9	; 0x09
    1de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de6:	9e 87       	std	Y+14, r25	; 0x0e
    1de8:	8d 87       	std	Y+13, r24	; 0x0d
    1dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <odometry_rotate_for+0x114>
    1df2:	9e 87       	std	Y+14, r25	; 0x0e
    1df4:	8d 87       	std	Y+13, r24	; 0x0d
    1df6:	ce 01       	movw	r24, r28
    1df8:	0f 96       	adiw	r24, 0x0f	; 15
    1dfa:	63 ec       	ldi	r22, 0xC3	; 195
    1dfc:	0e 94 bc 06 	call	0xd78	; 0xd78 <CAN_Write>
    1e00:	88 23       	and	r24, r24
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <odometry_rotate_for+0x12c>
    1e04:	86 cf       	rjmp	.-244    	; 0x1d12 <odometry_rotate_for+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1e06:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e08:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e0a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <odometry_wait_until_done>

}
    1e0e:	6b 96       	adiw	r28, 0x1b	; 27
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	08 95       	ret

00001e20 <odometry_set_angle>:
 * 	uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Set angle for odometry
 */
uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	6b 97       	sbiw	r28, 0x1b	; 27
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	98 8f       	std	Y+24, r25	; 0x18
    1e36:	8f 8b       	std	Y+23, r24	; 0x17
    1e38:	69 8f       	std	Y+25, r22	; 0x19
    1e3a:	5b 8f       	std	Y+27, r21	; 0x1b
    1e3c:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1e3e:	89 8d       	ldd	r24, Y+25	; 0x19
    1e40:	0e 94 ff 09 	call	0x13fe	; 0x13fe <odometry_set_speed>

	buffer[0] = 'A';
    1e44:	81 e4       	ldi	r24, 0x41	; 65
    1e46:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1e48:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e4c:	89 2f       	mov	r24, r25
    1e4e:	99 27       	eor	r25, r25
    1e50:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1e52:	8f 89       	ldd	r24, Y+23	; 0x17
    1e54:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1e56:	72 c0       	rjmp	.+228    	; 0x1f3c <odometry_set_angle+0x11c>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	a8 e4       	ldi	r26, 0x48	; 72
    1e5e:	b2 e4       	ldi	r27, 0x42	; 66
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	ab 83       	std	Y+3, r26	; 0x03
    1e66:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e4       	ldi	r19, 0x40	; 64
    1e6c:	4c e1       	ldi	r20, 0x1C	; 28
    1e6e:	55 e4       	ldi	r21, 0x45	; 69
    1e70:	69 81       	ldd	r22, Y+1	; 0x01
    1e72:	7a 81       	ldd	r23, Y+2	; 0x02
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	8d 83       	std	Y+5, r24	; 0x05
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	af 83       	std	Y+7, r26	; 0x07
    1e86:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	6d 81       	ldd	r22, Y+5	; 0x05
    1e92:	7e 81       	ldd	r23, Y+6	; 0x06
    1e94:	8f 81       	ldd	r24, Y+7	; 0x07
    1e96:	98 85       	ldd	r25, Y+8	; 0x08
    1e98:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    1e9c:	88 23       	and	r24, r24
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <odometry_set_angle+0x8a>
		__ticks = 1;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9a 87       	std	Y+10, r25	; 0x0a
    1ea6:	89 87       	std	Y+9, r24	; 0x09
    1ea8:	3f c0       	rjmp	.+126    	; 0x1f28 <odometry_set_angle+0x108>
	else if (__tmp > 65535)
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	57 e4       	ldi	r21, 0x47	; 71
    1eb2:	6d 81       	ldd	r22, Y+5	; 0x05
    1eb4:	7e 81       	ldd	r23, Y+6	; 0x06
    1eb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb8:	98 85       	ldd	r25, Y+8	; 0x08
    1eba:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    1ebe:	18 16       	cp	r1, r24
    1ec0:	4c f5       	brge	.+82     	; 0x1f14 <odometry_set_angle+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
    1ec8:	51 e4       	ldi	r21, 0x41	; 65
    1eca:	69 81       	ldd	r22, Y+1	; 0x01
    1ecc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed2:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	9a 87       	std	Y+10, r25	; 0x0a
    1ee8:	89 87       	std	Y+9, r24	; 0x09
    1eea:	0f c0       	rjmp	.+30     	; 0x1f0a <odometry_set_angle+0xea>
    1eec:	8a ef       	ldi	r24, 0xFA	; 250
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9c 87       	std	Y+12, r25	; 0x0c
    1ef2:	8b 87       	std	Y+11, r24	; 0x0b
    1ef4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ef6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <odometry_set_angle+0xd8>
    1efc:	9c 87       	std	Y+12, r25	; 0x0c
    1efe:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f00:	89 85       	ldd	r24, Y+9	; 0x09
    1f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	9a 87       	std	Y+10, r25	; 0x0a
    1f08:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0a:	89 85       	ldd	r24, Y+9	; 0x09
    1f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0e:	89 2b       	or	r24, r25
    1f10:	69 f7       	brne	.-38     	; 0x1eec <odometry_set_angle+0xcc>
    1f12:	14 c0       	rjmp	.+40     	; 0x1f3c <odometry_set_angle+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f14:	6d 81       	ldd	r22, Y+5	; 0x05
    1f16:	7e 81       	ldd	r23, Y+6	; 0x06
    1f18:	8f 81       	ldd	r24, Y+7	; 0x07
    1f1a:	98 85       	ldd	r25, Y+8	; 0x08
    1f1c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9a 87       	std	Y+10, r25	; 0x0a
    1f26:	89 87       	std	Y+9, r24	; 0x09
    1f28:	89 85       	ldd	r24, Y+9	; 0x09
    1f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2c:	9e 87       	std	Y+14, r25	; 0x0e
    1f2e:	8d 87       	std	Y+13, r24	; 0x0d
    1f30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <odometry_set_angle+0x114>
    1f38:	9e 87       	std	Y+14, r25	; 0x0e
    1f3a:	8d 87       	std	Y+13, r24	; 0x0d
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	0f 96       	adiw	r24, 0x0f	; 15
    1f40:	63 ec       	ldi	r22, 0xC3	; 195
    1f42:	0e 94 bc 06 	call	0xd78	; 0xd78 <CAN_Write>
    1f46:	88 23       	and	r24, r24
    1f48:	09 f0       	breq	.+2      	; 0x1f4c <odometry_set_angle+0x12c>
    1f4a:	86 cf       	rjmp	.-244    	; 0x1e58 <odometry_set_angle+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1f4c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f4e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f50:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <odometry_wait_until_done>
}
    1f54:	6b 96       	adiw	r28, 0x1b	; 27
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	08 95       	ret

00001f66 <odometry_kurva>:

uint8_t odometry_kurva(uint16_t x_pos, uint16_t y_pos, int8_t angle, uint8_t direction, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1f66:	ef 92       	push	r14
    1f68:	ff 92       	push	r15
    1f6a:	0f 93       	push	r16
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	6f 97       	sbiw	r28, 0x1f	; 31
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	98 8f       	std	Y+24, r25	; 0x18
    1f82:	8f 8b       	std	Y+23, r24	; 0x17
    1f84:	7a 8f       	std	Y+26, r23	; 0x1a
    1f86:	69 8f       	std	Y+25, r22	; 0x19
    1f88:	4b 8f       	std	Y+27, r20	; 0x1b
    1f8a:	2c 8f       	std	Y+28, r18	; 0x1c
    1f8c:	0d 8f       	std	Y+29, r16	; 0x1d
    1f8e:	ff 8e       	std	Y+31, r15	; 0x1f
    1f90:	ee 8e       	std	Y+30, r14	; 0x1e
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1f92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f94:	0e 94 ff 09 	call	0x13fe	; 0x13fe <odometry_set_speed>

	buffer[0] = 'Q';
    1f98:	81 e5       	ldi	r24, 0x51	; 81
    1f9a:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = x_pos >> 8;
    1f9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa0:	89 2f       	mov	r24, r25
    1fa2:	99 27       	eor	r25, r25
    1fa4:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = x_pos & 0xFF;
    1fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa8:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = y_pos >> 8;
    1faa:	89 8d       	ldd	r24, Y+25	; 0x19
    1fac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fae:	89 2f       	mov	r24, r25
    1fb0:	99 27       	eor	r25, r25
    1fb2:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = y_pos & 0xFF;
    1fb4:	89 8d       	ldd	r24, Y+25	; 0x19
    1fb6:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = angle >> 8;
    1fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fba:	08 2e       	mov	r0, r24
    1fbc:	00 0c       	add	r0, r0
    1fbe:	99 0b       	sbc	r25, r25
    1fc0:	89 2f       	mov	r24, r25
    1fc2:	99 0f       	add	r25, r25
    1fc4:	99 0b       	sbc	r25, r25
    1fc6:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = angle & 0xFF;
    1fc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fca:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[7] = direction;
    1fcc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fce:	8e 8b       	std	Y+22, r24	; 0x16

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1fd0:	72 c0       	rjmp	.+228    	; 0x20b6 <odometry_kurva+0x150>
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	a8 e4       	ldi	r26, 0x48	; 72
    1fd8:	b2 e4       	ldi	r27, 0x42	; 66
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	ab 83       	std	Y+3, r26	; 0x03
    1fe0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e4       	ldi	r19, 0x40	; 64
    1fe6:	4c e1       	ldi	r20, 0x1C	; 28
    1fe8:	55 e4       	ldi	r21, 0x45	; 69
    1fea:	69 81       	ldd	r22, Y+1	; 0x01
    1fec:	7a 81       	ldd	r23, Y+2	; 0x02
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	8d 83       	std	Y+5, r24	; 0x05
    1ffc:	9e 83       	std	Y+6, r25	; 0x06
    1ffe:	af 83       	std	Y+7, r26	; 0x07
    2000:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	5f e3       	ldi	r21, 0x3F	; 63
    200a:	6d 81       	ldd	r22, Y+5	; 0x05
    200c:	7e 81       	ldd	r23, Y+6	; 0x06
    200e:	8f 81       	ldd	r24, Y+7	; 0x07
    2010:	98 85       	ldd	r25, Y+8	; 0x08
    2012:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    2016:	88 23       	and	r24, r24
    2018:	2c f4       	brge	.+10     	; 0x2024 <odometry_kurva+0xbe>
		__ticks = 1;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	9a 87       	std	Y+10, r25	; 0x0a
    2020:	89 87       	std	Y+9, r24	; 0x09
    2022:	3f c0       	rjmp	.+126    	; 0x20a2 <odometry_kurva+0x13c>
	else if (__tmp > 65535)
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	3f ef       	ldi	r19, 0xFF	; 255
    2028:	4f e7       	ldi	r20, 0x7F	; 127
    202a:	57 e4       	ldi	r21, 0x47	; 71
    202c:	6d 81       	ldd	r22, Y+5	; 0x05
    202e:	7e 81       	ldd	r23, Y+6	; 0x06
    2030:	8f 81       	ldd	r24, Y+7	; 0x07
    2032:	98 85       	ldd	r25, Y+8	; 0x08
    2034:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    2038:	18 16       	cp	r1, r24
    203a:	4c f5       	brge	.+82     	; 0x208e <odometry_kurva+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e2       	ldi	r20, 0x20	; 32
    2042:	51 e4       	ldi	r21, 0x41	; 65
    2044:	69 81       	ldd	r22, Y+1	; 0x01
    2046:	7a 81       	ldd	r23, Y+2	; 0x02
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	bc 01       	movw	r22, r24
    2056:	cd 01       	movw	r24, r26
    2058:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	9a 87       	std	Y+10, r25	; 0x0a
    2062:	89 87       	std	Y+9, r24	; 0x09
    2064:	0f c0       	rjmp	.+30     	; 0x2084 <odometry_kurva+0x11e>
    2066:	8a ef       	ldi	r24, 0xFA	; 250
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	9c 87       	std	Y+12, r25	; 0x0c
    206c:	8b 87       	std	Y+11, r24	; 0x0b
    206e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2070:	9c 85       	ldd	r25, Y+12	; 0x0c
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <odometry_kurva+0x10c>
    2076:	9c 87       	std	Y+12, r25	; 0x0c
    2078:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	9a 85       	ldd	r25, Y+10	; 0x0a
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	9a 87       	std	Y+10, r25	; 0x0a
    2082:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2084:	89 85       	ldd	r24, Y+9	; 0x09
    2086:	9a 85       	ldd	r25, Y+10	; 0x0a
    2088:	89 2b       	or	r24, r25
    208a:	69 f7       	brne	.-38     	; 0x2066 <odometry_kurva+0x100>
    208c:	14 c0       	rjmp	.+40     	; 0x20b6 <odometry_kurva+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208e:	6d 81       	ldd	r22, Y+5	; 0x05
    2090:	7e 81       	ldd	r23, Y+6	; 0x06
    2092:	8f 81       	ldd	r24, Y+7	; 0x07
    2094:	98 85       	ldd	r25, Y+8	; 0x08
    2096:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	9a 87       	std	Y+10, r25	; 0x0a
    20a0:	89 87       	std	Y+9, r24	; 0x09
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a6:	9e 87       	std	Y+14, r25	; 0x0e
    20a8:	8d 87       	std	Y+13, r24	; 0x0d
    20aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <odometry_kurva+0x148>
    20b2:	9e 87       	std	Y+14, r25	; 0x0e
    20b4:	8d 87       	std	Y+13, r24	; 0x0d
    20b6:	ce 01       	movw	r24, r28
    20b8:	0f 96       	adiw	r24, 0x0f	; 15
    20ba:	63 ec       	ldi	r22, 0xC3	; 195
    20bc:	0e 94 bc 06 	call	0xd78	; 0xd78 <CAN_Write>
    20c0:	88 23       	and	r24, r24
    20c2:	09 f0       	breq	.+2      	; 0x20c6 <odometry_kurva+0x160>
    20c4:	86 cf       	rjmp	.-244    	; 0x1fd2 <odometry_kurva+0x6c>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    20c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20ca:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <odometry_wait_until_done>
}
    20ce:	6f 96       	adiw	r28, 0x1f	; 31
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	08 95       	ret

000020e6 <odometry_match_end>:

void odometry_match_end(void)
{
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	66 97       	sbiw	r28, 0x16	; 22
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];

	buffer[0] = 'K';
    20fa:	8b e4       	ldi	r24, 0x4B	; 75
    20fc:	8f 87       	std	Y+15, r24	; 0x0f

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    20fe:	72 c0       	rjmp	.+228    	; 0x21e4 <odometry_match_end+0xfe>
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	a8 e4       	ldi	r26, 0x48	; 72
    2106:	b2 e4       	ldi	r27, 0x42	; 66
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	9a 83       	std	Y+2, r25	; 0x02
    210c:	ab 83       	std	Y+3, r26	; 0x03
    210e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e4       	ldi	r19, 0x40	; 64
    2114:	4c e1       	ldi	r20, 0x1C	; 28
    2116:	55 e4       	ldi	r21, 0x45	; 69
    2118:	69 81       	ldd	r22, Y+1	; 0x01
    211a:	7a 81       	ldd	r23, Y+2	; 0x02
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	8d 83       	std	Y+5, r24	; 0x05
    212a:	9e 83       	std	Y+6, r25	; 0x06
    212c:	af 83       	std	Y+7, r26	; 0x07
    212e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	6d 81       	ldd	r22, Y+5	; 0x05
    213a:	7e 81       	ldd	r23, Y+6	; 0x06
    213c:	8f 81       	ldd	r24, Y+7	; 0x07
    213e:	98 85       	ldd	r25, Y+8	; 0x08
    2140:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    2144:	88 23       	and	r24, r24
    2146:	2c f4       	brge	.+10     	; 0x2152 <odometry_match_end+0x6c>
		__ticks = 1;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	9a 87       	std	Y+10, r25	; 0x0a
    214e:	89 87       	std	Y+9, r24	; 0x09
    2150:	3f c0       	rjmp	.+126    	; 0x21d0 <odometry_match_end+0xea>
	else if (__tmp > 65535)
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	57 e4       	ldi	r21, 0x47	; 71
    215a:	6d 81       	ldd	r22, Y+5	; 0x05
    215c:	7e 81       	ldd	r23, Y+6	; 0x06
    215e:	8f 81       	ldd	r24, Y+7	; 0x07
    2160:	98 85       	ldd	r25, Y+8	; 0x08
    2162:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    2166:	18 16       	cp	r1, r24
    2168:	4c f5       	brge	.+82     	; 0x21bc <odometry_match_end+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	69 81       	ldd	r22, Y+1	; 0x01
    2174:	7a 81       	ldd	r23, Y+2	; 0x02
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	9c 81       	ldd	r25, Y+4	; 0x04
    217a:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	bc 01       	movw	r22, r24
    2184:	cd 01       	movw	r24, r26
    2186:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	9a 87       	std	Y+10, r25	; 0x0a
    2190:	89 87       	std	Y+9, r24	; 0x09
    2192:	0f c0       	rjmp	.+30     	; 0x21b2 <odometry_match_end+0xcc>
    2194:	8a ef       	ldi	r24, 0xFA	; 250
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	9c 87       	std	Y+12, r25	; 0x0c
    219a:	8b 87       	std	Y+11, r24	; 0x0b
    219c:	8b 85       	ldd	r24, Y+11	; 0x0b
    219e:	9c 85       	ldd	r25, Y+12	; 0x0c
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <odometry_match_end+0xba>
    21a4:	9c 87       	std	Y+12, r25	; 0x0c
    21a6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a8:	89 85       	ldd	r24, Y+9	; 0x09
    21aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	9a 87       	std	Y+10, r25	; 0x0a
    21b0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b2:	89 85       	ldd	r24, Y+9	; 0x09
    21b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b6:	89 2b       	or	r24, r25
    21b8:	69 f7       	brne	.-38     	; 0x2194 <odometry_match_end+0xae>
    21ba:	14 c0       	rjmp	.+40     	; 0x21e4 <odometry_match_end+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21bc:	6d 81       	ldd	r22, Y+5	; 0x05
    21be:	7e 81       	ldd	r23, Y+6	; 0x06
    21c0:	8f 81       	ldd	r24, Y+7	; 0x07
    21c2:	98 85       	ldd	r25, Y+8	; 0x08
    21c4:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	9a 87       	std	Y+10, r25	; 0x0a
    21ce:	89 87       	std	Y+9, r24	; 0x09
    21d0:	89 85       	ldd	r24, Y+9	; 0x09
    21d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d4:	9e 87       	std	Y+14, r25	; 0x0e
    21d6:	8d 87       	std	Y+13, r24	; 0x0d
    21d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21da:	9e 85       	ldd	r25, Y+14	; 0x0e
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <odometry_match_end+0xf6>
    21e0:	9e 87       	std	Y+14, r25	; 0x0e
    21e2:	8d 87       	std	Y+13, r24	; 0x0d
    21e4:	ce 01       	movw	r24, r28
    21e6:	0f 96       	adiw	r24, 0x0f	; 15
    21e8:	63 ec       	ldi	r22, 0xC3	; 195
    21ea:	0e 94 bc 06 	call	0xd78	; 0xd78 <CAN_Write>
    21ee:	88 23       	and	r24, r24
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <odometry_match_end+0x10e>
    21f2:	86 cf       	rjmp	.-244    	; 0x2100 <odometry_match_end+0x1a>
			_delay_ms(50);

}
    21f4:	66 96       	adiw	r28, 0x16	; 22
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	de bf       	out	0x3e, r29	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	cd bf       	out	0x3d, r28	; 61
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	08 95       	ret

00002206 <getState>:

/*
 * 	Update position
 */
uint8_t getState(void)
{
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    220e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <odometry_query_position>
	return position.state;
    2212:	80 91 15 01 	lds	r24, 0x0115
}
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	08 95       	ret

0000221c <odometry_get_x>:

int16_t odometry_get_x(void)
{
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2224:	0e 94 9b 0a 	call	0x1536	; 0x1536 <odometry_query_position>
	return position.x;
    2228:	80 91 0f 01 	lds	r24, 0x010F
    222c:	90 91 10 01 	lds	r25, 0x0110
}
    2230:	df 91       	pop	r29
    2232:	cf 91       	pop	r28
    2234:	08 95       	ret

00002236 <odometry_get_y>:

int16_t odometry_get_y(void)
{
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    223e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <odometry_query_position>
	return position.y;
    2242:	80 91 11 01 	lds	r24, 0x0111
    2246:	90 91 12 01 	lds	r25, 0x0112
}
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	08 95       	ret

00002250 <odometry_get_angle>:

int16_t odometry_get_angle(void)
{
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2258:	0e 94 9b 0a 	call	0x1536	; 0x1536 <odometry_query_position>
	return position.angle;
    225c:	80 91 13 01 	lds	r24, 0x0113
    2260:	90 91 14 01 	lds	r25, 0x0114
}
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	08 95       	ret

0000226a <timer_register_callback>:
 *	Function: 		void timer_register_callback(void (*callback)(void))
 *	Parameters: 	void (*callback)(void))
 *	Description: 	timer callbacks
 */
void timer_register_callback(void (*callback)(void))
{
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	00 d0       	rcall	.+0      	; 0x2270 <timer_register_callback+0x6>
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	90 93 6b 01 	sts	0x016B, r25
    2280:	80 93 6a 01 	sts	0x016A, r24
}
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	08 95       	ret

0000228e <timer_init>:
 *	Function: 		void timer_init(unsigned int freq)
 *	Parameters: 	unsigned int freq - frequency of timer
 *	Description: 	setup timer
 */
void timer_init(unsigned int freq)
{
    228e:	0f 93       	push	r16
    2290:	1f 93       	push	r17
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	00 d0       	rcall	.+0      	; 0x2298 <timer_init+0xa>
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	9a 83       	std	Y+2, r25	; 0x02
    229e:	89 83       	std	Y+1, r24	; 0x01

    TCCR1A = 0;
    22a0:	80 e8       	ldi	r24, 0x80	; 128
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	fc 01       	movw	r30, r24
    22a6:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    22a8:	81 e8       	ldi	r24, 0x81	; 129
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	29 e0       	ldi	r18, 0x09	; 9
    22ae:	fc 01       	movw	r30, r24
    22b0:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    22b2:	08 e8       	ldi	r16, 0x88	; 136
    22b4:	10 e0       	ldi	r17, 0x00	; 0
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	cc 01       	movw	r24, r24
    22bc:	a0 e0       	ldi	r26, 0x00	; 0
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__floatunsisf>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9c 01       	movw	r18, r24
    22ce:	ad 01       	movw	r20, r26
    22d0:	60 e8       	ldi	r22, 0x80	; 128
    22d2:	76 e9       	ldi	r23, 0x96	; 150
    22d4:	88 e1       	ldi	r24, 0x18	; 24
    22d6:	9b e4       	ldi	r25, 0x4B	; 75
    22d8:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__divsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	5f e3       	ldi	r21, 0x3F	; 63
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <__addsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	f8 01       	movw	r30, r16
    2302:	91 83       	std	Z+1, r25	; 0x01
    2304:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2306:	8f e6       	ldi	r24, 0x6F	; 111
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	22 e0       	ldi	r18, 0x02	; 2
    230c:	fc 01       	movw	r30, r24
    230e:	20 83       	st	Z, r18

	SREG |= 0x80;
    2310:	8f e5       	ldi	r24, 0x5F	; 95
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	2f e5       	ldi	r18, 0x5F	; 95
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	f9 01       	movw	r30, r18
    231a:	20 81       	ld	r18, Z
    231c:	20 68       	ori	r18, 0x80	; 128
    231e:	fc 01       	movw	r30, r24
    2320:	20 83       	st	Z, r18
}
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	df 91       	pop	r29
    2328:	cf 91       	pop	r28
    232a:	1f 91       	pop	r17
    232c:	0f 91       	pop	r16
    232e:	08 95       	ret

00002330 <__vector_12>:
/*
 *	Function: 		ISR(TIMER1_COMPA_vect)
 *	Description: 	ISR interrupt for timer
 */
ISR(TIMER1_COMPA_vect)
{
    2330:	1f 92       	push	r1
    2332:	0f 92       	push	r0
    2334:	00 90 5f 00 	lds	r0, 0x005F
    2338:	0f 92       	push	r0
    233a:	11 24       	eor	r1, r1
    233c:	00 90 5b 00 	lds	r0, 0x005B
    2340:	0f 92       	push	r0
    2342:	2f 93       	push	r18
    2344:	3f 93       	push	r19
    2346:	4f 93       	push	r20
    2348:	5f 93       	push	r21
    234a:	6f 93       	push	r22
    234c:	7f 93       	push	r23
    234e:	8f 93       	push	r24
    2350:	9f 93       	push	r25
    2352:	af 93       	push	r26
    2354:	bf 93       	push	r27
    2356:	ef 93       	push	r30
    2358:	ff 93       	push	r31
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	2e 97       	sbiw	r28, 0x0e	; 14
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	cd bf       	out	0x3d, r28	; 61
    if(timer_callback != NULL)
    2368:	80 91 6a 01 	lds	r24, 0x016A
    236c:	90 91 6b 01 	lds	r25, 0x016B
    2370:	89 2b       	or	r24, r25
    2372:	31 f0       	breq	.+12     	; 0x2380 <__vector_12+0x50>
        timer_callback();
    2374:	80 91 6a 01 	lds	r24, 0x016A
    2378:	90 91 6b 01 	lds	r25, 0x016B
    237c:	fc 01       	movw	r30, r24
    237e:	09 95       	icall
	if(sys_time >= 90000)					// if match end
    2380:	80 91 65 01 	lds	r24, 0x0165
    2384:	90 91 66 01 	lds	r25, 0x0166
    2388:	a0 91 67 01 	lds	r26, 0x0167
    238c:	b0 91 68 01 	lds	r27, 0x0168
    2390:	80 39       	cpi	r24, 0x90	; 144
    2392:	9f 45       	sbci	r25, 0x5F	; 95
    2394:	a1 40       	sbci	r26, 0x01	; 1
    2396:	b1 05       	cpc	r27, r1
    2398:	08 f4       	brcc	.+2      	; 0x239c <__vector_12+0x6c>
    239a:	83 c0       	rjmp	.+262    	; 0x24a2 <__vector_12+0x172>
	{
		if(system_get_match_started())		// if the match has started before
    239c:	0e 94 ab 12 	call	0x2556	; 0x2556 <system_get_match_started>
    23a0:	88 23       	and	r24, r24
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <__vector_12+0x76>
    23a4:	7e c0       	rjmp	.+252    	; 0x24a2 <__vector_12+0x172>
		{
			odometry_match_end();
    23a6:	0e 94 73 10 	call	0x20e6	; 0x20e6 <odometry_match_end>
			while(1) {
				PORTG = ~PORTG;
    23aa:	84 e3       	ldi	r24, 0x34	; 52
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	24 e3       	ldi	r18, 0x34	; 52
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	f9 01       	movw	r30, r18
    23b4:	20 81       	ld	r18, Z
    23b6:	20 95       	com	r18
    23b8:	fc 01       	movw	r30, r24
    23ba:	20 83       	st	Z, r18
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	aa e7       	ldi	r26, 0x7A	; 122
    23c2:	b4 e4       	ldi	r27, 0x44	; 68
    23c4:	89 83       	std	Y+1, r24	; 0x01
    23c6:	9a 83       	std	Y+2, r25	; 0x02
    23c8:	ab 83       	std	Y+3, r26	; 0x03
    23ca:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e4       	ldi	r19, 0x40	; 64
    23d0:	4c e1       	ldi	r20, 0x1C	; 28
    23d2:	55 e4       	ldi	r21, 0x45	; 69
    23d4:	69 81       	ldd	r22, Y+1	; 0x01
    23d6:	7a 81       	ldd	r23, Y+2	; 0x02
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	8d 83       	std	Y+5, r24	; 0x05
    23e6:	9e 83       	std	Y+6, r25	; 0x06
    23e8:	af 83       	std	Y+7, r26	; 0x07
    23ea:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e8       	ldi	r20, 0x80	; 128
    23f2:	5f e3       	ldi	r21, 0x3F	; 63
    23f4:	6d 81       	ldd	r22, Y+5	; 0x05
    23f6:	7e 81       	ldd	r23, Y+6	; 0x06
    23f8:	8f 81       	ldd	r24, Y+7	; 0x07
    23fa:	98 85       	ldd	r25, Y+8	; 0x08
    23fc:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    2400:	88 23       	and	r24, r24
    2402:	2c f4       	brge	.+10     	; 0x240e <__vector_12+0xde>
		__ticks = 1;
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9a 87       	std	Y+10, r25	; 0x0a
    240a:	89 87       	std	Y+9, r24	; 0x09
    240c:	3f c0       	rjmp	.+126    	; 0x248c <__vector_12+0x15c>
	else if (__tmp > 65535)
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	3f ef       	ldi	r19, 0xFF	; 255
    2412:	4f e7       	ldi	r20, 0x7F	; 127
    2414:	57 e4       	ldi	r21, 0x47	; 71
    2416:	6d 81       	ldd	r22, Y+5	; 0x05
    2418:	7e 81       	ldd	r23, Y+6	; 0x06
    241a:	8f 81       	ldd	r24, Y+7	; 0x07
    241c:	98 85       	ldd	r25, Y+8	; 0x08
    241e:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    2422:	18 16       	cp	r1, r24
    2424:	4c f5       	brge	.+82     	; 0x2478 <__vector_12+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e2       	ldi	r20, 0x20	; 32
    242c:	51 e4       	ldi	r21, 0x41	; 65
    242e:	69 81       	ldd	r22, Y+1	; 0x01
    2430:	7a 81       	ldd	r23, Y+2	; 0x02
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	9c 81       	ldd	r25, Y+4	; 0x04
    2436:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9a 87       	std	Y+10, r25	; 0x0a
    244c:	89 87       	std	Y+9, r24	; 0x09
    244e:	0f c0       	rjmp	.+30     	; 0x246e <__vector_12+0x13e>
    2450:	8a ef       	ldi	r24, 0xFA	; 250
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9c 87       	std	Y+12, r25	; 0x0c
    2456:	8b 87       	std	Y+11, r24	; 0x0b
    2458:	8b 85       	ldd	r24, Y+11	; 0x0b
    245a:	9c 85       	ldd	r25, Y+12	; 0x0c
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <__vector_12+0x12c>
    2460:	9c 87       	std	Y+12, r25	; 0x0c
    2462:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2464:	89 85       	ldd	r24, Y+9	; 0x09
    2466:	9a 85       	ldd	r25, Y+10	; 0x0a
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	9a 87       	std	Y+10, r25	; 0x0a
    246c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246e:	89 85       	ldd	r24, Y+9	; 0x09
    2470:	9a 85       	ldd	r25, Y+10	; 0x0a
    2472:	89 2b       	or	r24, r25
    2474:	69 f7       	brne	.-38     	; 0x2450 <__vector_12+0x120>
    2476:	14 c0       	rjmp	.+40     	; 0x24a0 <__vector_12+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2478:	6d 81       	ldd	r22, Y+5	; 0x05
    247a:	7e 81       	ldd	r23, Y+6	; 0x06
    247c:	8f 81       	ldd	r24, Y+7	; 0x07
    247e:	98 85       	ldd	r25, Y+8	; 0x08
    2480:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	9a 87       	std	Y+10, r25	; 0x0a
    248a:	89 87       	std	Y+9, r24	; 0x09
    248c:	89 85       	ldd	r24, Y+9	; 0x09
    248e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2490:	9e 87       	std	Y+14, r25	; 0x0e
    2492:	8d 87       	std	Y+13, r24	; 0x0d
    2494:	8d 85       	ldd	r24, Y+13	; 0x0d
    2496:	9e 85       	ldd	r25, Y+14	; 0x0e
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <__vector_12+0x168>
    249c:	9e 87       	std	Y+14, r25	; 0x0e
    249e:	8d 87       	std	Y+13, r24	; 0x0d
				_delay_ms(1000);
			}
    24a0:	84 cf       	rjmp	.-248    	; 0x23aa <__vector_12+0x7a>
	/*if((sys_time % 1000) == 0) {

		PORTG = ~PORTG;
	}*/

	sys_time++;
    24a2:	80 91 65 01 	lds	r24, 0x0165
    24a6:	90 91 66 01 	lds	r25, 0x0166
    24aa:	a0 91 67 01 	lds	r26, 0x0167
    24ae:	b0 91 68 01 	lds	r27, 0x0168
    24b2:	01 96       	adiw	r24, 0x01	; 1
    24b4:	a1 1d       	adc	r26, r1
    24b6:	b1 1d       	adc	r27, r1
    24b8:	80 93 65 01 	sts	0x0165, r24
    24bc:	90 93 66 01 	sts	0x0166, r25
    24c0:	a0 93 67 01 	sts	0x0167, r26
    24c4:	b0 93 68 01 	sts	0x0168, r27


}
    24c8:	2e 96       	adiw	r28, 0x0e	; 14
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	ff 91       	pop	r31
    24da:	ef 91       	pop	r30
    24dc:	bf 91       	pop	r27
    24de:	af 91       	pop	r26
    24e0:	9f 91       	pop	r25
    24e2:	8f 91       	pop	r24
    24e4:	7f 91       	pop	r23
    24e6:	6f 91       	pop	r22
    24e8:	5f 91       	pop	r21
    24ea:	4f 91       	pop	r20
    24ec:	3f 91       	pop	r19
    24ee:	2f 91       	pop	r18
    24f0:	0f 90       	pop	r0
    24f2:	00 92 5b 00 	sts	0x005B, r0
    24f6:	0f 90       	pop	r0
    24f8:	00 92 5f 00 	sts	0x005F, r0
    24fc:	0f 90       	pop	r0
    24fe:	1f 90       	pop	r1
    2500:	18 95       	reti

00002502 <system_reset_system_time>:

void system_reset_system_time(void) 	{ 	sys_time = 0; 			}
    2502:	cf 93       	push	r28
    2504:	df 93       	push	r29
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	10 92 65 01 	sts	0x0165, r1
    250e:	10 92 66 01 	sts	0x0166, r1
    2512:	10 92 67 01 	sts	0x0167, r1
    2516:	10 92 68 01 	sts	0x0168, r1
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	08 95       	ret

00002520 <system_set_match_started>:
void system_set_match_started(void) 	{ 	match_started = 1; 		}
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	80 93 69 01 	sts	0x0169, r24
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	08 95       	ret

00002534 <system_get_system_time>:
uint32_t system_get_system_time(void) 	{ 	return sys_time; 		}
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	80 91 65 01 	lds	r24, 0x0165
    2540:	90 91 66 01 	lds	r25, 0x0166
    2544:	a0 91 67 01 	lds	r26, 0x0167
    2548:	b0 91 68 01 	lds	r27, 0x0168
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	08 95       	ret

00002556 <system_get_match_started>:
uint8_t system_get_match_started(void) 	{ 	return match_started; 	}
    2556:	cf 93       	push	r28
    2558:	df 93       	push	r29
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	80 91 69 01 	lds	r24, 0x0169
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	08 95       	ret

00002568 <__vector_8>:


ISR(INT7_vect) {
    2568:	1f 92       	push	r1
    256a:	0f 92       	push	r0
    256c:	00 90 5f 00 	lds	r0, 0x005F
    2570:	0f 92       	push	r0
    2572:	11 24       	eor	r1, r1
    2574:	8f 93       	push	r24
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
	jumper_pulled = true;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	80 93 6e 01 	sts	0x016E, r24
}
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	8f 91       	pop	r24
    258a:	0f 90       	pop	r0
    258c:	00 92 5f 00 	sts	0x005F, r0
    2590:	0f 90       	pop	r0
    2592:	1f 90       	pop	r1
    2594:	18 95       	reti

00002596 <system_setup_jumper>:

static void system_setup_jumper() {
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	2e 97       	sbiw	r28, 0x0e	; 14
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	de bf       	out	0x3e, r29	; 62
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	cd bf       	out	0x3d, r28	; 61

	DDRE &= ~(1 << PIN7);			// setup pin as input
    25aa:	8d e2       	ldi	r24, 0x2D	; 45
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	2d e2       	ldi	r18, 0x2D	; 45
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	f9 01       	movw	r30, r18
    25b4:	20 81       	ld	r18, Z
    25b6:	2f 77       	andi	r18, 0x7F	; 127
    25b8:	fc 01       	movw	r30, r24
    25ba:	20 83       	st	Z, r18

	PORTE |= (1 << PIN7);			// pullup
    25bc:	8e e2       	ldi	r24, 0x2E	; 46
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	2e e2       	ldi	r18, 0x2E	; 46
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	f9 01       	movw	r30, r18
    25c6:	20 81       	ld	r18, Z
    25c8:	20 68       	ori	r18, 0x80	; 128
    25ca:	fc 01       	movw	r30, r24
    25cc:	20 83       	st	Z, r18

	EICRB = (1 << ISC70);			// set on status change to triggure interrupt
    25ce:	8a e6       	ldi	r24, 0x6A	; 106
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	20 e4       	ldi	r18, 0x40	; 64
    25d4:	fc 01       	movw	r30, r24
    25d6:	20 83       	st	Z, r18

	EIMSK |= (1 << INT7);			// enable interrupt
    25d8:	8d e3       	ldi	r24, 0x3D	; 61
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	2d e3       	ldi	r18, 0x3D	; 61
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	f9 01       	movw	r30, r18
    25e2:	20 81       	ld	r18, Z
    25e4:	20 68       	ori	r18, 0x80	; 128
    25e6:	fc 01       	movw	r30, r24
    25e8:	20 83       	st	Z, r18
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	a8 ec       	ldi	r26, 0xC8	; 200
    25f0:	b2 e4       	ldi	r27, 0x42	; 66
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	9a 83       	std	Y+2, r25	; 0x02
    25f6:	ab 83       	std	Y+3, r26	; 0x03
    25f8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e4       	ldi	r19, 0x40	; 64
    25fe:	4c e1       	ldi	r20, 0x1C	; 28
    2600:	55 e4       	ldi	r21, 0x45	; 69
    2602:	69 81       	ldd	r22, Y+1	; 0x01
    2604:	7a 81       	ldd	r23, Y+2	; 0x02
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	9c 81       	ldd	r25, Y+4	; 0x04
    260a:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	8d 83       	std	Y+5, r24	; 0x05
    2614:	9e 83       	std	Y+6, r25	; 0x06
    2616:	af 83       	std	Y+7, r26	; 0x07
    2618:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e8       	ldi	r20, 0x80	; 128
    2620:	5f e3       	ldi	r21, 0x3F	; 63
    2622:	6d 81       	ldd	r22, Y+5	; 0x05
    2624:	7e 81       	ldd	r23, Y+6	; 0x06
    2626:	8f 81       	ldd	r24, Y+7	; 0x07
    2628:	98 85       	ldd	r25, Y+8	; 0x08
    262a:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    262e:	88 23       	and	r24, r24
    2630:	2c f4       	brge	.+10     	; 0x263c <system_setup_jumper+0xa6>
		__ticks = 1;
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	9a 87       	std	Y+10, r25	; 0x0a
    2638:	89 87       	std	Y+9, r24	; 0x09
    263a:	3f c0       	rjmp	.+126    	; 0x26ba <system_setup_jumper+0x124>
	else if (__tmp > 65535)
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	3f ef       	ldi	r19, 0xFF	; 255
    2640:	4f e7       	ldi	r20, 0x7F	; 127
    2642:	57 e4       	ldi	r21, 0x47	; 71
    2644:	6d 81       	ldd	r22, Y+5	; 0x05
    2646:	7e 81       	ldd	r23, Y+6	; 0x06
    2648:	8f 81       	ldd	r24, Y+7	; 0x07
    264a:	98 85       	ldd	r25, Y+8	; 0x08
    264c:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    2650:	18 16       	cp	r1, r24
    2652:	4c f5       	brge	.+82     	; 0x26a6 <system_setup_jumper+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e2       	ldi	r20, 0x20	; 32
    265a:	51 e4       	ldi	r21, 0x41	; 65
    265c:	69 81       	ldd	r22, Y+1	; 0x01
    265e:	7a 81       	ldd	r23, Y+2	; 0x02
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	bc 01       	movw	r22, r24
    266e:	cd 01       	movw	r24, r26
    2670:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	9a 87       	std	Y+10, r25	; 0x0a
    267a:	89 87       	std	Y+9, r24	; 0x09
    267c:	0f c0       	rjmp	.+30     	; 0x269c <system_setup_jumper+0x106>
    267e:	8a ef       	ldi	r24, 0xFA	; 250
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	9c 87       	std	Y+12, r25	; 0x0c
    2684:	8b 87       	std	Y+11, r24	; 0x0b
    2686:	8b 85       	ldd	r24, Y+11	; 0x0b
    2688:	9c 85       	ldd	r25, Y+12	; 0x0c
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	f1 f7       	brne	.-4      	; 0x268a <system_setup_jumper+0xf4>
    268e:	9c 87       	std	Y+12, r25	; 0x0c
    2690:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	9a 85       	ldd	r25, Y+10	; 0x0a
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	9a 87       	std	Y+10, r25	; 0x0a
    269a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269c:	89 85       	ldd	r24, Y+9	; 0x09
    269e:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a0:	89 2b       	or	r24, r25
    26a2:	69 f7       	brne	.-38     	; 0x267e <system_setup_jumper+0xe8>
    26a4:	14 c0       	rjmp	.+40     	; 0x26ce <system_setup_jumper+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a6:	6d 81       	ldd	r22, Y+5	; 0x05
    26a8:	7e 81       	ldd	r23, Y+6	; 0x06
    26aa:	8f 81       	ldd	r24, Y+7	; 0x07
    26ac:	98 85       	ldd	r25, Y+8	; 0x08
    26ae:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	9a 87       	std	Y+10, r25	; 0x0a
    26b8:	89 87       	std	Y+9, r24	; 0x09
    26ba:	89 85       	ldd	r24, Y+9	; 0x09
    26bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26be:	9e 87       	std	Y+14, r25	; 0x0e
    26c0:	8d 87       	std	Y+13, r24	; 0x0d
    26c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <system_setup_jumper+0x130>
    26ca:	9e 87       	std	Y+14, r25	; 0x0e
    26cc:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);

	sei();							// enable global interrupts
    26ce:	78 94       	sei
}
    26d0:	2e 96       	adiw	r28, 0x0e	; 14
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	08 95       	ret

000026e2 <system_wait_for_jumper>:

static void system_wait_for_jumper() {
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	2e 97       	sbiw	r28, 0x0e	; 14
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61

	while(jumper_pulled == false)		// wait for jumper_pulled t be set true
    26f6:	72 c0       	rjmp	.+228    	; 0x27dc <system_wait_for_jumper+0xfa>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	a0 e2       	ldi	r26, 0x20	; 32
    26fe:	b1 e4       	ldi	r27, 0x41	; 65
    2700:	89 83       	std	Y+1, r24	; 0x01
    2702:	9a 83       	std	Y+2, r25	; 0x02
    2704:	ab 83       	std	Y+3, r26	; 0x03
    2706:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e4       	ldi	r19, 0x40	; 64
    270c:	4c e1       	ldi	r20, 0x1C	; 28
    270e:	55 e4       	ldi	r21, 0x45	; 69
    2710:	69 81       	ldd	r22, Y+1	; 0x01
    2712:	7a 81       	ldd	r23, Y+2	; 0x02
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	9c 81       	ldd	r25, Y+4	; 0x04
    2718:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	8d 83       	std	Y+5, r24	; 0x05
    2722:	9e 83       	std	Y+6, r25	; 0x06
    2724:	af 83       	std	Y+7, r26	; 0x07
    2726:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e8       	ldi	r20, 0x80	; 128
    272e:	5f e3       	ldi	r21, 0x3F	; 63
    2730:	6d 81       	ldd	r22, Y+5	; 0x05
    2732:	7e 81       	ldd	r23, Y+6	; 0x06
    2734:	8f 81       	ldd	r24, Y+7	; 0x07
    2736:	98 85       	ldd	r25, Y+8	; 0x08
    2738:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    273c:	88 23       	and	r24, r24
    273e:	2c f4       	brge	.+10     	; 0x274a <system_wait_for_jumper+0x68>
		__ticks = 1;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9a 87       	std	Y+10, r25	; 0x0a
    2746:	89 87       	std	Y+9, r24	; 0x09
    2748:	3f c0       	rjmp	.+126    	; 0x27c8 <system_wait_for_jumper+0xe6>
	else if (__tmp > 65535)
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	3f ef       	ldi	r19, 0xFF	; 255
    274e:	4f e7       	ldi	r20, 0x7F	; 127
    2750:	57 e4       	ldi	r21, 0x47	; 71
    2752:	6d 81       	ldd	r22, Y+5	; 0x05
    2754:	7e 81       	ldd	r23, Y+6	; 0x06
    2756:	8f 81       	ldd	r24, Y+7	; 0x07
    2758:	98 85       	ldd	r25, Y+8	; 0x08
    275a:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    275e:	18 16       	cp	r1, r24
    2760:	4c f5       	brge	.+82     	; 0x27b4 <system_wait_for_jumper+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	69 81       	ldd	r22, Y+1	; 0x01
    276c:	7a 81       	ldd	r23, Y+2	; 0x02
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	9c 81       	ldd	r25, Y+4	; 0x04
    2772:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	bc 01       	movw	r22, r24
    277c:	cd 01       	movw	r24, r26
    277e:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	9a 87       	std	Y+10, r25	; 0x0a
    2788:	89 87       	std	Y+9, r24	; 0x09
    278a:	0f c0       	rjmp	.+30     	; 0x27aa <system_wait_for_jumper+0xc8>
    278c:	8a ef       	ldi	r24, 0xFA	; 250
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9c 87       	std	Y+12, r25	; 0x0c
    2792:	8b 87       	std	Y+11, r24	; 0x0b
    2794:	8b 85       	ldd	r24, Y+11	; 0x0b
    2796:	9c 85       	ldd	r25, Y+12	; 0x0c
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <system_wait_for_jumper+0xb6>
    279c:	9c 87       	std	Y+12, r25	; 0x0c
    279e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a0:	89 85       	ldd	r24, Y+9	; 0x09
    27a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	9a 87       	std	Y+10, r25	; 0x0a
    27a8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27aa:	89 85       	ldd	r24, Y+9	; 0x09
    27ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ae:	89 2b       	or	r24, r25
    27b0:	69 f7       	brne	.-38     	; 0x278c <system_wait_for_jumper+0xaa>
    27b2:	14 c0       	rjmp	.+40     	; 0x27dc <system_wait_for_jumper+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b4:	6d 81       	ldd	r22, Y+5	; 0x05
    27b6:	7e 81       	ldd	r23, Y+6	; 0x06
    27b8:	8f 81       	ldd	r24, Y+7	; 0x07
    27ba:	98 85       	ldd	r25, Y+8	; 0x08
    27bc:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9a 87       	std	Y+10, r25	; 0x0a
    27c6:	89 87       	std	Y+9, r24	; 0x09
    27c8:	89 85       	ldd	r24, Y+9	; 0x09
    27ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    27cc:	9e 87       	std	Y+14, r25	; 0x0e
    27ce:	8d 87       	std	Y+13, r24	; 0x0d
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <system_wait_for_jumper+0xf2>
    27d8:	9e 87       	std	Y+14, r25	; 0x0e
    27da:	8d 87       	std	Y+13, r24	; 0x0d
    27dc:	80 91 6e 01 	lds	r24, 0x016E
    27e0:	88 23       	and	r24, r24
    27e2:	09 f4       	brne	.+2      	; 0x27e6 <system_wait_for_jumper+0x104>
    27e4:	89 cf       	rjmp	.-238    	; 0x26f8 <system_wait_for_jumper+0x16>
		_delay_ms(10);

}
    27e6:	2e 96       	adiw	r28, 0x0e	; 14
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	08 95       	ret

000027f8 <system_init>:
 *	Function: 		void system_init(void)
 *	Parameters: 	void
 *	Description:	initing all the things
 */
void system_init(void)
{
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	aa 97       	sbiw	r28, 0x2a	; 42
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
	// sets debouncer
	timer_register_callback(gpio_debouncer);
    280c:	8c ea       	ldi	r24, 0xAC	; 172
    280e:	99 e0       	ldi	r25, 0x09	; 9
    2810:	0e 94 35 11 	call	0x226a	; 0x226a <timer_register_callback>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	a8 ec       	ldi	r26, 0xC8	; 200
    281a:	b2 e4       	ldi	r27, 0x42	; 66
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	9a 83       	std	Y+2, r25	; 0x02
    2820:	ab 83       	std	Y+3, r26	; 0x03
    2822:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e4       	ldi	r19, 0x40	; 64
    2828:	4c e1       	ldi	r20, 0x1C	; 28
    282a:	55 e4       	ldi	r21, 0x45	; 69
    282c:	69 81       	ldd	r22, Y+1	; 0x01
    282e:	7a 81       	ldd	r23, Y+2	; 0x02
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	9c 81       	ldd	r25, Y+4	; 0x04
    2834:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	8d 83       	std	Y+5, r24	; 0x05
    283e:	9e 83       	std	Y+6, r25	; 0x06
    2840:	af 83       	std	Y+7, r26	; 0x07
    2842:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e8       	ldi	r20, 0x80	; 128
    284a:	5f e3       	ldi	r21, 0x3F	; 63
    284c:	6d 81       	ldd	r22, Y+5	; 0x05
    284e:	7e 81       	ldd	r23, Y+6	; 0x06
    2850:	8f 81       	ldd	r24, Y+7	; 0x07
    2852:	98 85       	ldd	r25, Y+8	; 0x08
    2854:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    2858:	88 23       	and	r24, r24
    285a:	2c f4       	brge	.+10     	; 0x2866 <system_init+0x6e>
		__ticks = 1;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9a 87       	std	Y+10, r25	; 0x0a
    2862:	89 87       	std	Y+9, r24	; 0x09
    2864:	3f c0       	rjmp	.+126    	; 0x28e4 <system_init+0xec>
	else if (__tmp > 65535)
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	3f ef       	ldi	r19, 0xFF	; 255
    286a:	4f e7       	ldi	r20, 0x7F	; 127
    286c:	57 e4       	ldi	r21, 0x47	; 71
    286e:	6d 81       	ldd	r22, Y+5	; 0x05
    2870:	7e 81       	ldd	r23, Y+6	; 0x06
    2872:	8f 81       	ldd	r24, Y+7	; 0x07
    2874:	98 85       	ldd	r25, Y+8	; 0x08
    2876:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    287a:	18 16       	cp	r1, r24
    287c:	4c f5       	brge	.+82     	; 0x28d0 <system_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e2       	ldi	r20, 0x20	; 32
    2884:	51 e4       	ldi	r21, 0x41	; 65
    2886:	69 81       	ldd	r22, Y+1	; 0x01
    2888:	7a 81       	ldd	r23, Y+2	; 0x02
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	9c 81       	ldd	r25, Y+4	; 0x04
    288e:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	9a 87       	std	Y+10, r25	; 0x0a
    28a4:	89 87       	std	Y+9, r24	; 0x09
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <system_init+0xce>
    28a8:	8a ef       	ldi	r24, 0xFA	; 250
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9c 87       	std	Y+12, r25	; 0x0c
    28ae:	8b 87       	std	Y+11, r24	; 0x0b
    28b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    28b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <system_init+0xbc>
    28b8:	9c 87       	std	Y+12, r25	; 0x0c
    28ba:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28bc:	89 85       	ldd	r24, Y+9	; 0x09
    28be:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	9a 87       	std	Y+10, r25	; 0x0a
    28c4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c6:	89 85       	ldd	r24, Y+9	; 0x09
    28c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ca:	89 2b       	or	r24, r25
    28cc:	69 f7       	brne	.-38     	; 0x28a8 <system_init+0xb0>
    28ce:	14 c0       	rjmp	.+40     	; 0x28f8 <system_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d0:	6d 81       	ldd	r22, Y+5	; 0x05
    28d2:	7e 81       	ldd	r23, Y+6	; 0x06
    28d4:	8f 81       	ldd	r24, Y+7	; 0x07
    28d6:	98 85       	ldd	r25, Y+8	; 0x08
    28d8:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9a 87       	std	Y+10, r25	; 0x0a
    28e2:	89 87       	std	Y+9, r24	; 0x09
    28e4:	89 85       	ldd	r24, Y+9	; 0x09
    28e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e8:	9e 87       	std	Y+14, r25	; 0x0e
    28ea:	8d 87       	std	Y+13, r24	; 0x0d
    28ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <system_init+0xf8>
    28f4:	9e 87       	std	Y+14, r25	; 0x0e
    28f6:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);

	gpio_register_pin(0, GPIO_DIRECTION_INPUT, true);
    28f8:	41 e0       	ldi	r20, 0x01	; 1
    28fa:	60 e0       	ldi	r22, 0x00	; 0
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	0e 94 9c 07 	call	0xf38	; 0xf38 <gpio_register_pin>
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	a8 ec       	ldi	r26, 0xC8	; 200
    2908:	b2 e4       	ldi	r27, 0x42	; 66
    290a:	8f 87       	std	Y+15, r24	; 0x0f
    290c:	98 8b       	std	Y+16, r25	; 0x10
    290e:	a9 8b       	std	Y+17, r26	; 0x11
    2910:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e4       	ldi	r19, 0x40	; 64
    2916:	4c e1       	ldi	r20, 0x1C	; 28
    2918:	55 e4       	ldi	r21, 0x45	; 69
    291a:	6f 85       	ldd	r22, Y+15	; 0x0f
    291c:	78 89       	ldd	r23, Y+16	; 0x10
    291e:	89 89       	ldd	r24, Y+17	; 0x11
    2920:	9a 89       	ldd	r25, Y+18	; 0x12
    2922:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	8b 8b       	std	Y+19, r24	; 0x13
    292c:	9c 8b       	std	Y+20, r25	; 0x14
    292e:	ad 8b       	std	Y+21, r26	; 0x15
    2930:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e8       	ldi	r20, 0x80	; 128
    2938:	5f e3       	ldi	r21, 0x3F	; 63
    293a:	6b 89       	ldd	r22, Y+19	; 0x13
    293c:	7c 89       	ldd	r23, Y+20	; 0x14
    293e:	8d 89       	ldd	r24, Y+21	; 0x15
    2940:	9e 89       	ldd	r25, Y+22	; 0x16
    2942:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    2946:	88 23       	and	r24, r24
    2948:	2c f4       	brge	.+10     	; 0x2954 <system_init+0x15c>
		__ticks = 1;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	98 8f       	std	Y+24, r25	; 0x18
    2950:	8f 8b       	std	Y+23, r24	; 0x17
    2952:	3f c0       	rjmp	.+126    	; 0x29d2 <system_init+0x1da>
	else if (__tmp > 65535)
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	3f ef       	ldi	r19, 0xFF	; 255
    2958:	4f e7       	ldi	r20, 0x7F	; 127
    295a:	57 e4       	ldi	r21, 0x47	; 71
    295c:	6b 89       	ldd	r22, Y+19	; 0x13
    295e:	7c 89       	ldd	r23, Y+20	; 0x14
    2960:	8d 89       	ldd	r24, Y+21	; 0x15
    2962:	9e 89       	ldd	r25, Y+22	; 0x16
    2964:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    2968:	18 16       	cp	r1, r24
    296a:	4c f5       	brge	.+82     	; 0x29be <system_init+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e2       	ldi	r20, 0x20	; 32
    2972:	51 e4       	ldi	r21, 0x41	; 65
    2974:	6f 85       	ldd	r22, Y+15	; 0x0f
    2976:	78 89       	ldd	r23, Y+16	; 0x10
    2978:	89 89       	ldd	r24, Y+17	; 0x11
    297a:	9a 89       	ldd	r25, Y+18	; 0x12
    297c:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	98 8f       	std	Y+24, r25	; 0x18
    2992:	8f 8b       	std	Y+23, r24	; 0x17
    2994:	0f c0       	rjmp	.+30     	; 0x29b4 <system_init+0x1bc>
    2996:	8a ef       	ldi	r24, 0xFA	; 250
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9a 8f       	std	Y+26, r25	; 0x1a
    299c:	89 8f       	std	Y+25, r24	; 0x19
    299e:	89 8d       	ldd	r24, Y+25	; 0x19
    29a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <system_init+0x1aa>
    29a6:	9a 8f       	std	Y+26, r25	; 0x1a
    29a8:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29aa:	8f 89       	ldd	r24, Y+23	; 0x17
    29ac:	98 8d       	ldd	r25, Y+24	; 0x18
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	98 8f       	std	Y+24, r25	; 0x18
    29b2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b4:	8f 89       	ldd	r24, Y+23	; 0x17
    29b6:	98 8d       	ldd	r25, Y+24	; 0x18
    29b8:	89 2b       	or	r24, r25
    29ba:	69 f7       	brne	.-38     	; 0x2996 <system_init+0x19e>
    29bc:	14 c0       	rjmp	.+40     	; 0x29e6 <system_init+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29be:	6b 89       	ldd	r22, Y+19	; 0x13
    29c0:	7c 89       	ldd	r23, Y+20	; 0x14
    29c2:	8d 89       	ldd	r24, Y+21	; 0x15
    29c4:	9e 89       	ldd	r25, Y+22	; 0x16
    29c6:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	98 8f       	std	Y+24, r25	; 0x18
    29d0:	8f 8b       	std	Y+23, r24	; 0x17
    29d2:	8f 89       	ldd	r24, Y+23	; 0x17
    29d4:	98 8d       	ldd	r25, Y+24	; 0x18
    29d6:	9c 8f       	std	Y+28, r25	; 0x1c
    29d8:	8b 8f       	std	Y+27, r24	; 0x1b
    29da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <system_init+0x1e6>
    29e2:	9c 8f       	std	Y+28, r25	; 0x1c
    29e4:	8b 8f       	std	Y+27, r24	; 0x1b

	// small delay
	_delay_ms(100);

	DDRG = 0xff;
    29e6:	83 e3       	ldi	r24, 0x33	; 51
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	2f ef       	ldi	r18, 0xFF	; 255
    29ec:	fc 01       	movw	r30, r24
    29ee:	20 83       	st	Z, r18
	PORTG = 0x00;
    29f0:	84 e3       	ldi	r24, 0x34	; 52
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	fc 01       	movw	r30, r24
    29f6:	10 82       	st	Z, r1

	// waiting for jumper
	timer_init(1000);
    29f8:	88 ee       	ldi	r24, 0xE8	; 232
    29fa:	93 e0       	ldi	r25, 0x03	; 3
    29fc:	0e 94 47 11 	call	0x228e	; 0x228e <timer_init>
	CAN_Init(1);
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	0e 94 ee 05 	call	0xbdc	; 0xbdc <CAN_Init>
	UART1_Init(UART1_BAUD, UART_ISR_OFF);
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	60 e8       	ldi	r22, 0x80	; 128
    2a0a:	75 e2       	ldi	r23, 0x25	; 37
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	0e 94 33 17 	call	0x2e66	; 0x2e66 <UART1_Init>
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	aa ef       	ldi	r26, 0xFA	; 250
    2a1a:	b3 e4       	ldi	r27, 0x43	; 67
    2a1c:	8d 8f       	std	Y+29, r24	; 0x1d
    2a1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a20:	af 8f       	std	Y+31, r26	; 0x1f
    2a22:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e4       	ldi	r19, 0x40	; 64
    2a28:	4c e1       	ldi	r20, 0x1C	; 28
    2a2a:	55 e4       	ldi	r21, 0x45	; 69
    2a2c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2a2e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2a30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a32:	98 a1       	ldd	r25, Y+32	; 0x20
    2a34:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	89 a3       	std	Y+33, r24	; 0x21
    2a3e:	9a a3       	std	Y+34, r25	; 0x22
    2a40:	ab a3       	std	Y+35, r26	; 0x23
    2a42:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	5f e3       	ldi	r21, 0x3F	; 63
    2a4c:	69 a1       	ldd	r22, Y+33	; 0x21
    2a4e:	7a a1       	ldd	r23, Y+34	; 0x22
    2a50:	8b a1       	ldd	r24, Y+35	; 0x23
    2a52:	9c a1       	ldd	r25, Y+36	; 0x24
    2a54:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    2a58:	88 23       	and	r24, r24
    2a5a:	2c f4       	brge	.+10     	; 0x2a66 <system_init+0x26e>
		__ticks = 1;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	9e a3       	std	Y+38, r25	; 0x26
    2a62:	8d a3       	std	Y+37, r24	; 0x25
    2a64:	3f c0       	rjmp	.+126    	; 0x2ae4 <system_init+0x2ec>
	else if (__tmp > 65535)
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	3f ef       	ldi	r19, 0xFF	; 255
    2a6a:	4f e7       	ldi	r20, 0x7F	; 127
    2a6c:	57 e4       	ldi	r21, 0x47	; 71
    2a6e:	69 a1       	ldd	r22, Y+33	; 0x21
    2a70:	7a a1       	ldd	r23, Y+34	; 0x22
    2a72:	8b a1       	ldd	r24, Y+35	; 0x23
    2a74:	9c a1       	ldd	r25, Y+36	; 0x24
    2a76:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    2a7a:	18 16       	cp	r1, r24
    2a7c:	4c f5       	brge	.+82     	; 0x2ad0 <system_init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e2       	ldi	r20, 0x20	; 32
    2a84:	51 e4       	ldi	r21, 0x41	; 65
    2a86:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2a88:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2a8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a8c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a8e:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	bc 01       	movw	r22, r24
    2a98:	cd 01       	movw	r24, r26
    2a9a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	9e a3       	std	Y+38, r25	; 0x26
    2aa4:	8d a3       	std	Y+37, r24	; 0x25
    2aa6:	0f c0       	rjmp	.+30     	; 0x2ac6 <system_init+0x2ce>
    2aa8:	8a ef       	ldi	r24, 0xFA	; 250
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	98 a7       	std	Y+40, r25	; 0x28
    2aae:	8f a3       	std	Y+39, r24	; 0x27
    2ab0:	8f a1       	ldd	r24, Y+39	; 0x27
    2ab2:	98 a5       	ldd	r25, Y+40	; 0x28
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <system_init+0x2bc>
    2ab8:	98 a7       	std	Y+40, r25	; 0x28
    2aba:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2abc:	8d a1       	ldd	r24, Y+37	; 0x25
    2abe:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	9e a3       	std	Y+38, r25	; 0x26
    2ac4:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac8:	9e a1       	ldd	r25, Y+38	; 0x26
    2aca:	89 2b       	or	r24, r25
    2acc:	69 f7       	brne	.-38     	; 0x2aa8 <system_init+0x2b0>
    2ace:	14 c0       	rjmp	.+40     	; 0x2af8 <system_init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad0:	69 a1       	ldd	r22, Y+33	; 0x21
    2ad2:	7a a1       	ldd	r23, Y+34	; 0x22
    2ad4:	8b a1       	ldd	r24, Y+35	; 0x23
    2ad6:	9c a1       	ldd	r25, Y+36	; 0x24
    2ad8:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	9e a3       	std	Y+38, r25	; 0x26
    2ae2:	8d a3       	std	Y+37, r24	; 0x25
    2ae4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ae6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ae8:	9a a7       	std	Y+42, r25	; 0x2a
    2aea:	89 a7       	std	Y+41, r24	; 0x29
    2aec:	89 a5       	ldd	r24, Y+41	; 0x29
    2aee:	9a a5       	ldd	r25, Y+42	; 0x2a
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <system_init+0x2f8>
    2af4:	9a a7       	std	Y+42, r25	; 0x2a
    2af6:	89 a7       	std	Y+41, r24	; 0x29

	_delay_ms(500);

	system_setup_jumper();
    2af8:	0e 94 cb 12 	call	0x2596	; 0x2596 <system_setup_jumper>
	//debug_init();


	// waiting for jumper
	//system_wait_for_jumper();
	PORTG = 0xff;
    2afc:	84 e3       	ldi	r24, 0x34	; 52
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	2f ef       	ldi	r18, 0xFF	; 255
    2b02:	fc 01       	movw	r30, r24
    2b04:	20 83       	st	Z, r18


	system_reset_system_time();															// reset system time
    2b06:	0e 94 81 12 	call	0x2502	; 0x2502 <system_reset_system_time>
	system_set_match_started();															// match has started!
    2b0a:	0e 94 90 12 	call	0x2520	; 0x2520 <system_set_match_started>

}
    2b0e:	aa 96       	adiw	r28, 0x2a	; 42
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	de bf       	out	0x3e, r29	; 62
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	cd bf       	out	0x3d, r28	; 61
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	08 95       	ret

00002b20 <UART0_Init>:
* Parameters        : unsigned int baud
					  char isrOnOff
* Return Value      : void
*********************************************************************************/
void UART0_Init(unsigned long baud, char isrOnOff)
{
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    2b28:	27 97       	sbiw	r28, 0x07	; 7
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	6b 83       	std	Y+3, r22	; 0x03
    2b36:	7c 83       	std	Y+4, r23	; 0x04
    2b38:	8d 83       	std	Y+5, r24	; 0x05
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR0A = 0;
    2b3e:	80 ec       	ldi	r24, 0xC0	; 192
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	fc 01       	movw	r30, r24
    2b44:	10 82       	st	Z, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    2b46:	81 ec       	ldi	r24, 0xC1	; 193
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	28 e1       	ldi	r18, 0x18	; 24
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    2b50:	82 ec       	ldi	r24, 0xC2	; 194
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	26 e0       	ldi	r18, 0x06	; 6
    2b56:	fc 01       	movw	r30, r24
    2b58:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    2b5a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b5c:	81 30       	cpi	r24, 0x01	; 1
    2b5e:	91 f4       	brne	.+36     	; 0x2b84 <UART0_Init+0x64>
	{
		UCSR0B |= ((1 << RXCIE0) | (1 << TXCIE0));
    2b60:	81 ec       	ldi	r24, 0xC1	; 193
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	21 ec       	ldi	r18, 0xC1	; 193
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	f9 01       	movw	r30, r18
    2b6a:	20 81       	ld	r18, Z
    2b6c:	20 6c       	ori	r18, 0xC0	; 192
    2b6e:	fc 01       	movw	r30, r24
    2b70:	20 83       	st	Z, r18
		SREG |= 0x80;
    2b72:	8f e5       	ldi	r24, 0x5F	; 95
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	2f e5       	ldi	r18, 0x5F	; 95
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	f9 01       	movw	r30, r18
    2b7c:	20 81       	ld	r18, Z
    2b7e:	20 68       	ori	r18, 0x80	; 128
    2b80:	fc 01       	movw	r30, r24
    2b82:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    2b84:	6b 81       	ldd	r22, Y+3	; 0x03
    2b86:	7c 81       	ldd	r23, Y+4	; 0x04
    2b88:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8c:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__floatunsisf>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e8       	ldi	r20, 0x80	; 128
    2b9a:	51 e4       	ldi	r21, 0x41	; 65
    2b9c:	bc 01       	movw	r22, r24
    2b9e:	cd 01       	movw	r24, r26
    2ba0:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    2ba4:	dc 01       	movw	r26, r24
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	9c 01       	movw	r18, r24
    2baa:	ad 01       	movw	r20, r26
    2bac:	60 e8       	ldi	r22, 0x80	; 128
    2bae:	76 e9       	ldi	r23, 0x96	; 150
    2bb0:	88 e1       	ldi	r24, 0x18	; 24
    2bb2:	9b e4       	ldi	r25, 0x4B	; 75
    2bb4:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__divsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	40 e8       	ldi	r20, 0x80	; 128
    2bc2:	5f e3       	ldi	r21, 0x3F	; 63
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__subsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	5f e3       	ldi	r21, 0x3F	; 63
    2bd8:	bc 01       	movw	r22, r24
    2bda:	cd 01       	movw	r24, r26
    2bdc:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <__addsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	bc 01       	movw	r22, r24
    2be6:	cd 01       	movw	r24, r26
    2be8:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	9a 83       	std	Y+2, r25	; 0x02
    2bf2:	89 83       	std	Y+1, r24	; 0x01

	UBRR0H = temp >> 8;
    2bf4:	85 ec       	ldi	r24, 0xC5	; 197
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	29 81       	ldd	r18, Y+1	; 0x01
    2bfa:	3a 81       	ldd	r19, Y+2	; 0x02
    2bfc:	23 2f       	mov	r18, r19
    2bfe:	33 27       	eor	r19, r19
    2c00:	fc 01       	movw	r30, r24
    2c02:	20 83       	st	Z, r18
	UBRR0L = temp;
    2c04:	84 ec       	ldi	r24, 0xC4	; 196
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	29 81       	ldd	r18, Y+1	; 0x01
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	20 83       	st	Z, r18
}
    2c0e:	27 96       	adiw	r28, 0x07	; 7
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	de bf       	out	0x3e, r29	; 62
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	cd bf       	out	0x3d, r28	; 61
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	08 95       	ret

00002c20 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    2c20:	1f 92       	push	r1
    2c22:	0f 92       	push	r0
    2c24:	00 90 5f 00 	lds	r0, 0x005F
    2c28:	0f 92       	push	r0
    2c2a:	11 24       	eor	r1, r1
    2c2c:	00 90 5b 00 	lds	r0, 0x005B
    2c30:	0f 92       	push	r0
    2c32:	2f 93       	push	r18
    2c34:	3f 93       	push	r19
    2c36:	8f 93       	push	r24
    2c38:	9f 93       	push	r25
    2c3a:	ef 93       	push	r30
    2c3c:	ff 93       	push	r31
    2c3e:	cf 93       	push	r28
    2c40:	df 93       	push	r29
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    2c46:	80 91 b0 01 	lds	r24, 0x01B0
    2c4a:	88 23       	and	r24, r24
    2c4c:	d1 f0       	breq	.+52     	; 0x2c82 <__vector_23+0x62>
	{
		tx0_counter--;
    2c4e:	80 91 b0 01 	lds	r24, 0x01B0
    2c52:	81 50       	subi	r24, 0x01	; 1
    2c54:	80 93 b0 01 	sts	0x01B0, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    2c58:	86 ec       	ldi	r24, 0xC6	; 198
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	20 91 b1 01 	lds	r18, 0x01B1
    2c60:	22 2f       	mov	r18, r18
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	21 59       	subi	r18, 0x91	; 145
    2c66:	3e 4f       	sbci	r19, 0xFE	; 254
    2c68:	f9 01       	movw	r30, r18
    2c6a:	20 81       	ld	r18, Z
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	20 83       	st	Z, r18
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    2c70:	80 91 b1 01 	lds	r24, 0x01B1
    2c74:	8f 5f       	subi	r24, 0xFF	; 255
    2c76:	80 93 b1 01 	sts	0x01B1, r24
    2c7a:	80 34       	cpi	r24, 0x40	; 64
    2c7c:	11 f4       	brne	.+4      	; 0x2c82 <__vector_23+0x62>
			tx0_rd_index = 0;
    2c7e:	10 92 b1 01 	sts	0x01B1, r1
	}
}
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	ff 91       	pop	r31
    2c88:	ef 91       	pop	r30
    2c8a:	9f 91       	pop	r25
    2c8c:	8f 91       	pop	r24
    2c8e:	3f 91       	pop	r19
    2c90:	2f 91       	pop	r18
    2c92:	0f 90       	pop	r0
    2c94:	00 92 5b 00 	sts	0x005B, r0
    2c98:	0f 90       	pop	r0
    2c9a:	00 92 5f 00 	sts	0x005F, r0
    2c9e:	0f 90       	pop	r0
    2ca0:	1f 90       	pop	r1
    2ca2:	18 95       	reti

00002ca4 <UART0_Write>:
/****************************************************************************************************************************************
Slanje podataka USART0 modulom
****************************************************************************************************************************************/

void UART0_Write(unsigned char data)
{
    2ca4:	cf 93       	push	r28
    2ca6:	df 93       	push	r29
    2ca8:	1f 92       	push	r1
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR0B >> TXCIE0) & 0x01)
    2cb0:	81 ec       	ldi	r24, 0xC1	; 193
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	80 81       	ld	r24, Z
    2cb8:	82 95       	swap	r24
    2cba:	86 95       	lsr	r24
    2cbc:	86 95       	lsr	r24
    2cbe:	83 70       	andi	r24, 0x03	; 3
    2cc0:	88 2f       	mov	r24, r24
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	81 70       	andi	r24, 0x01	; 1
    2cc6:	99 27       	eor	r25, r25
    2cc8:	89 2b       	or	r24, r25
    2cca:	99 f1       	breq	.+102    	; 0x2d32 <UART0_Write+0x8e>
	{
		while(tx0_counter == TX0_BUFFER_SIZE);
    2ccc:	00 00       	nop
    2cce:	80 91 b0 01 	lds	r24, 0x01B0
    2cd2:	80 34       	cpi	r24, 0x40	; 64
    2cd4:	e1 f3       	breq	.-8      	; 0x2cce <UART0_Write+0x2a>

		cli();
    2cd6:	f8 94       	cli

		if(tx0_counter || (UCSR0A & 0x20) == 0)
    2cd8:	80 91 b0 01 	lds	r24, 0x01B0
    2cdc:	88 23       	and	r24, r24
    2cde:	51 f4       	brne	.+20     	; 0x2cf4 <UART0_Write+0x50>
    2ce0:	80 ec       	ldi	r24, 0xC0	; 192
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	80 81       	ld	r24, Z
    2ce8:	88 2f       	mov	r24, r24
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	80 72       	andi	r24, 0x20	; 32
    2cee:	99 27       	eor	r25, r25
    2cf0:	89 2b       	or	r24, r25
    2cf2:	c1 f4       	brne	.+48     	; 0x2d24 <UART0_Write+0x80>
		{
			tx0_buffer[tx0_wr_index] = data;
    2cf4:	80 91 af 01 	lds	r24, 0x01AF
    2cf8:	88 2f       	mov	r24, r24
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	81 59       	subi	r24, 0x91	; 145
    2cfe:	9e 4f       	sbci	r25, 0xFE	; 254
    2d00:	29 81       	ldd	r18, Y+1	; 0x01
    2d02:	fc 01       	movw	r30, r24
    2d04:	20 83       	st	Z, r18
			if(++tx0_wr_index == TX0_BUFFER_SIZE)
    2d06:	80 91 af 01 	lds	r24, 0x01AF
    2d0a:	8f 5f       	subi	r24, 0xFF	; 255
    2d0c:	80 93 af 01 	sts	0x01AF, r24
    2d10:	80 34       	cpi	r24, 0x40	; 64
    2d12:	11 f4       	brne	.+4      	; 0x2d18 <UART0_Write+0x74>
				tx0_wr_index = 0;
    2d14:	10 92 af 01 	sts	0x01AF, r1

			tx0_counter++;
    2d18:	80 91 b0 01 	lds	r24, 0x01B0
    2d1c:	8f 5f       	subi	r24, 0xFF	; 255
    2d1e:	80 93 b0 01 	sts	0x01B0, r24
    2d22:	05 c0       	rjmp	.+10     	; 0x2d2e <UART0_Write+0x8a>
		}
		else
			UDR0 = data;
    2d24:	86 ec       	ldi	r24, 0xC6	; 198
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	29 81       	ldd	r18, Y+1	; 0x01
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	20 83       	st	Z, r18

		sei();
    2d2e:	78 94       	sei
    2d30:	03 c0       	rjmp	.+6      	; 0x2d38 <UART0_Write+0x94>
	}
	else
		altUart0Write(data);
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	0e 94 41 18 	call	0x3082	; 0x3082 <altUart0Write>
}
    2d38:	0f 90       	pop	r0
    2d3a:	df 91       	pop	r29
    2d3c:	cf 91       	pop	r28
    2d3e:	08 95       	ret

00002d40 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    2d40:	1f 92       	push	r1
    2d42:	0f 92       	push	r0
    2d44:	00 90 5f 00 	lds	r0, 0x005F
    2d48:	0f 92       	push	r0
    2d4a:	11 24       	eor	r1, r1
    2d4c:	00 90 5b 00 	lds	r0, 0x005B
    2d50:	0f 92       	push	r0
    2d52:	2f 93       	push	r18
    2d54:	3f 93       	push	r19
    2d56:	8f 93       	push	r24
    2d58:	9f 93       	push	r25
    2d5a:	ef 93       	push	r30
    2d5c:	ff 93       	push	r31
    2d5e:	cf 93       	push	r28
    2d60:	df 93       	push	r29
    2d62:	1f 92       	push	r1
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    2d68:	80 ec       	ldi	r24, 0xC0	; 192
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	80 81       	ld	r24, Z
    2d70:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	88 2f       	mov	r24, r24
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	8c 71       	andi	r24, 0x1C	; 28
    2d7a:	99 27       	eor	r25, r25
    2d7c:	89 2b       	or	r24, r25
    2d7e:	d1 f4       	brne	.+52     	; 0x2db4 <__vector_21+0x74>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    2d80:	80 91 f2 01 	lds	r24, 0x01F2
    2d84:	88 2f       	mov	r24, r24
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	26 ec       	ldi	r18, 0xC6	; 198
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	f9 01       	movw	r30, r18
    2d8e:	20 81       	ld	r18, Z
    2d90:	8e 54       	subi	r24, 0x4E	; 78
    2d92:	9e 4f       	sbci	r25, 0xFE	; 254
    2d94:	fc 01       	movw	r30, r24
    2d96:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    2d98:	80 91 f2 01 	lds	r24, 0x01F2
    2d9c:	8f 5f       	subi	r24, 0xFF	; 255
    2d9e:	80 93 f2 01 	sts	0x01F2, r24
    2da2:	80 34       	cpi	r24, 0x40	; 64
    2da4:	11 f4       	brne	.+4      	; 0x2daa <__vector_21+0x6a>
			rx0_wr_index = 0;
    2da6:	10 92 f2 01 	sts	0x01F2, r1

		rx0_counter++;
    2daa:	80 91 f3 01 	lds	r24, 0x01F3
    2dae:	8f 5f       	subi	r24, 0xFF	; 255
    2db0:	80 93 f3 01 	sts	0x01F3, r24
	}
}
    2db4:	0f 90       	pop	r0
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	ff 91       	pop	r31
    2dbc:	ef 91       	pop	r30
    2dbe:	9f 91       	pop	r25
    2dc0:	8f 91       	pop	r24
    2dc2:	3f 91       	pop	r19
    2dc4:	2f 91       	pop	r18
    2dc6:	0f 90       	pop	r0
    2dc8:	00 92 5b 00 	sts	0x005B, r0
    2dcc:	0f 90       	pop	r0
    2dce:	00 92 5f 00 	sts	0x005F, r0
    2dd2:	0f 90       	pop	r0
    2dd4:	1f 90       	pop	r1
    2dd6:	18 95       	reti

00002dd8 <UART0_Read>:
/****************************************************************************************************************************************
Primanje podataka USART0 modulom
****************************************************************************************************************************************/

unsigned char UART0_Read(void)
{
    2dd8:	cf 93       	push	r28
    2dda:	df 93       	push	r29
    2ddc:	1f 92       	push	r1
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR0B >> RXCIE0) & 0x01)
    2de2:	81 ec       	ldi	r24, 0xC1	; 193
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	fc 01       	movw	r30, r24
    2de8:	80 81       	ld	r24, Z
    2dea:	88 1f       	adc	r24, r24
    2dec:	88 27       	eor	r24, r24
    2dee:	88 1f       	adc	r24, r24
    2df0:	88 2f       	mov	r24, r24
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	81 70       	andi	r24, 0x01	; 1
    2df6:	99 27       	eor	r25, r25
    2df8:	89 2b       	or	r24, r25
    2dfa:	e9 f0       	breq	.+58     	; 0x2e36 <UART0_Read+0x5e>
	{
		while(rx0_counter == 0);
    2dfc:	00 00       	nop
    2dfe:	80 91 f3 01 	lds	r24, 0x01F3
    2e02:	88 23       	and	r24, r24
    2e04:	e1 f3       	breq	.-8      	; 0x2dfe <UART0_Read+0x26>

		data = rx0_buffer[rx0_rd_index];
    2e06:	80 91 f4 01 	lds	r24, 0x01F4
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	8e 54       	subi	r24, 0x4E	; 78
    2e10:	9e 4f       	sbci	r25, 0xFE	; 254
    2e12:	fc 01       	movw	r30, r24
    2e14:	80 81       	ld	r24, Z
    2e16:	89 83       	std	Y+1, r24	; 0x01

		if(++rx0_rd_index == RX0_BUFFER_SIZE)
    2e18:	80 91 f4 01 	lds	r24, 0x01F4
    2e1c:	8f 5f       	subi	r24, 0xFF	; 255
    2e1e:	80 93 f4 01 	sts	0x01F4, r24
    2e22:	80 34       	cpi	r24, 0x40	; 64
    2e24:	11 f4       	brne	.+4      	; 0x2e2a <UART0_Read+0x52>
			rx0_rd_index = 0;
    2e26:	10 92 f4 01 	sts	0x01F4, r1

		rx0_counter--;
    2e2a:	80 91 f3 01 	lds	r24, 0x01F3
    2e2e:	81 50       	subi	r24, 0x01	; 1
    2e30:	80 93 f3 01 	sts	0x01F3, r24
    2e34:	13 c0       	rjmp	.+38     	; 0x2e5c <UART0_Read+0x84>
	}
	else
	{
		while( !((UCSR0A >> RXC0) & 0x01));
    2e36:	00 00       	nop
    2e38:	80 ec       	ldi	r24, 0xC0	; 192
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	80 81       	ld	r24, Z
    2e40:	88 1f       	adc	r24, r24
    2e42:	88 27       	eor	r24, r24
    2e44:	88 1f       	adc	r24, r24
    2e46:	88 2f       	mov	r24, r24
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	81 70       	andi	r24, 0x01	; 1
    2e4c:	99 27       	eor	r25, r25
    2e4e:	89 2b       	or	r24, r25
    2e50:	99 f3       	breq	.-26     	; 0x2e38 <UART0_Read+0x60>
		data = UDR0;
    2e52:	86 ec       	ldi	r24, 0xC6	; 198
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	fc 01       	movw	r30, r24
    2e58:	80 81       	ld	r24, Z
    2e5a:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e5e:	0f 90       	pop	r0
    2e60:	df 91       	pop	r29
    2e62:	cf 91       	pop	r28
    2e64:	08 95       	ret

00002e66 <UART1_Init>:
-bez paritet
-9600baud
-asynchron
****************************************************************************************************************************************/
void UART1_Init(unsigned long baud, char isrOnOff)
{
    2e66:	cf 93       	push	r28
    2e68:	df 93       	push	r29
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
    2e6e:	27 97       	sbiw	r28, 0x07	; 7
    2e70:	0f b6       	in	r0, 0x3f	; 63
    2e72:	f8 94       	cli
    2e74:	de bf       	out	0x3e, r29	; 62
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	cd bf       	out	0x3d, r28	; 61
    2e7a:	6b 83       	std	Y+3, r22	; 0x03
    2e7c:	7c 83       	std	Y+4, r23	; 0x04
    2e7e:	8d 83       	std	Y+5, r24	; 0x05
    2e80:	9e 83       	std	Y+6, r25	; 0x06
    2e82:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
    2e84:	88 ec       	ldi	r24, 0xC8	; 200
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	fc 01       	movw	r30, r24
    2e8a:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
    2e8c:	89 ec       	ldi	r24, 0xC9	; 201
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	28 e1       	ldi	r18, 0x18	; 24
    2e92:	fc 01       	movw	r30, r24
    2e94:	20 83       	st	Z, r18


	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); //sa 1stop bit
    2e96:	8a ec       	ldi	r24, 0xCA	; 202
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	26 e0       	ldi	r18, 0x06	; 6
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	20 83       	st	Z, r18


	if(isrOnOff == UART_ISR_ON)
    2ea0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ea2:	81 30       	cpi	r24, 0x01	; 1
    2ea4:	91 f4       	brne	.+36     	; 0x2eca <UART1_Init+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
    2ea6:	89 ec       	ldi	r24, 0xC9	; 201
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	29 ec       	ldi	r18, 0xC9	; 201
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	f9 01       	movw	r30, r18
    2eb0:	20 81       	ld	r18, Z
    2eb2:	20 6c       	ori	r18, 0xC0	; 192
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	20 83       	st	Z, r18
		SREG |= 0x80;
    2eb8:	8f e5       	ldi	r24, 0x5F	; 95
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	2f e5       	ldi	r18, 0x5F	; 95
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	f9 01       	movw	r30, r18
    2ec2:	20 81       	ld	r18, Z
    2ec4:	20 68       	ori	r18, 0x80	; 128
    2ec6:	fc 01       	movw	r30, r24
    2ec8:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    2eca:	6b 81       	ldd	r22, Y+3	; 0x03
    2ecc:	7c 81       	ldd	r23, Y+4	; 0x04
    2ece:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed2:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <__floatunsisf>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	40 e8       	ldi	r20, 0x80	; 128
    2ee0:	51 e4       	ldi	r21, 0x41	; 65
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	cd 01       	movw	r24, r26
    2ee6:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	9c 01       	movw	r18, r24
    2ef0:	ad 01       	movw	r20, r26
    2ef2:	60 e8       	ldi	r22, 0x80	; 128
    2ef4:	76 e9       	ldi	r23, 0x96	; 150
    2ef6:	88 e1       	ldi	r24, 0x18	; 24
    2ef8:	9b e4       	ldi	r25, 0x4B	; 75
    2efa:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__divsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	40 e8       	ldi	r20, 0x80	; 128
    2f08:	5f e3       	ldi	r21, 0x3F	; 63
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__subsf3>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	40 e0       	ldi	r20, 0x00	; 0
    2f1c:	5f e3       	ldi	r21, 0x3F	; 63
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <__addsf3>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	bc 01       	movw	r22, r24
    2f2c:	cd 01       	movw	r24, r26
    2f2e:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	9a 83       	std	Y+2, r25	; 0x02
    2f38:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
    2f3a:	8d ec       	ldi	r24, 0xCD	; 205
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	29 81       	ldd	r18, Y+1	; 0x01
    2f40:	3a 81       	ldd	r19, Y+2	; 0x02
    2f42:	23 2f       	mov	r18, r19
    2f44:	33 27       	eor	r19, r19
    2f46:	fc 01       	movw	r30, r24
    2f48:	20 83       	st	Z, r18
	UBRR1L = temp;
    2f4a:	8c ec       	ldi	r24, 0xCC	; 204
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	29 81       	ldd	r18, Y+1	; 0x01
    2f50:	fc 01       	movw	r30, r24
    2f52:	20 83       	st	Z, r18
}
    2f54:	27 96       	adiw	r28, 0x07	; 7
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	df 91       	pop	r29
    2f62:	cf 91       	pop	r28
    2f64:	08 95       	ret

00002f66 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    2f66:	1f 92       	push	r1
    2f68:	0f 92       	push	r0
    2f6a:	00 90 5f 00 	lds	r0, 0x005F
    2f6e:	0f 92       	push	r0
    2f70:	11 24       	eor	r1, r1
    2f72:	00 90 5b 00 	lds	r0, 0x005B
    2f76:	0f 92       	push	r0
    2f78:	2f 93       	push	r18
    2f7a:	3f 93       	push	r19
    2f7c:	8f 93       	push	r24
    2f7e:	9f 93       	push	r25
    2f80:	ef 93       	push	r30
    2f82:	ff 93       	push	r31
    2f84:	cf 93       	push	r28
    2f86:	df 93       	push	r29
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    2f8c:	80 91 36 02 	lds	r24, 0x0236
    2f90:	88 23       	and	r24, r24
    2f92:	d1 f0       	breq	.+52     	; 0x2fc8 <__vector_34+0x62>
	{
		tx1_counter--;
    2f94:	80 91 36 02 	lds	r24, 0x0236
    2f98:	81 50       	subi	r24, 0x01	; 1
    2f9a:	80 93 36 02 	sts	0x0236, r24
		UDR1=tx1_buffer[tx1_rd_index];
    2f9e:	8e ec       	ldi	r24, 0xCE	; 206
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	20 91 37 02 	lds	r18, 0x0237
    2fa6:	22 2f       	mov	r18, r18
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	2b 50       	subi	r18, 0x0B	; 11
    2fac:	3e 4f       	sbci	r19, 0xFE	; 254
    2fae:	f9 01       	movw	r30, r18
    2fb0:	20 81       	ld	r18, Z
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    2fb6:	80 91 37 02 	lds	r24, 0x0237
    2fba:	8f 5f       	subi	r24, 0xFF	; 255
    2fbc:	80 93 37 02 	sts	0x0237, r24
    2fc0:	80 34       	cpi	r24, 0x40	; 64
    2fc2:	11 f4       	brne	.+4      	; 0x2fc8 <__vector_34+0x62>
			tx1_rd_index = 0;
    2fc4:	10 92 37 02 	sts	0x0237, r1
	}
}
    2fc8:	df 91       	pop	r29
    2fca:	cf 91       	pop	r28
    2fcc:	ff 91       	pop	r31
    2fce:	ef 91       	pop	r30
    2fd0:	9f 91       	pop	r25
    2fd2:	8f 91       	pop	r24
    2fd4:	3f 91       	pop	r19
    2fd6:	2f 91       	pop	r18
    2fd8:	0f 90       	pop	r0
    2fda:	00 92 5b 00 	sts	0x005B, r0
    2fde:	0f 90       	pop	r0
    2fe0:	00 92 5f 00 	sts	0x005F, r0
    2fe4:	0f 90       	pop	r0
    2fe6:	1f 90       	pop	r1
    2fe8:	18 95       	reti

00002fea <__vector_32>:

ISR(USART1_RX_vect)
{
    2fea:	1f 92       	push	r1
    2fec:	0f 92       	push	r0
    2fee:	00 90 5f 00 	lds	r0, 0x005F
    2ff2:	0f 92       	push	r0
    2ff4:	11 24       	eor	r1, r1
    2ff6:	00 90 5b 00 	lds	r0, 0x005B
    2ffa:	0f 92       	push	r0
    2ffc:	2f 93       	push	r18
    2ffe:	3f 93       	push	r19
    3000:	8f 93       	push	r24
    3002:	9f 93       	push	r25
    3004:	ef 93       	push	r30
    3006:	ff 93       	push	r31
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	1f 92       	push	r1
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    3012:	88 ec       	ldi	r24, 0xC8	; 200
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	fc 01       	movw	r30, r24
    3018:	80 81       	ld	r24, Z
    301a:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	88 2f       	mov	r24, r24
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	8c 71       	andi	r24, 0x1C	; 28
    3024:	99 27       	eor	r25, r25
    3026:	89 2b       	or	r24, r25
    3028:	d1 f4       	brne	.+52     	; 0x305e <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    302a:	80 91 78 02 	lds	r24, 0x0278
    302e:	88 2f       	mov	r24, r24
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	2e ec       	ldi	r18, 0xCE	; 206
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	f9 01       	movw	r30, r18
    3038:	20 81       	ld	r18, Z
    303a:	88 5c       	subi	r24, 0xC8	; 200
    303c:	9d 4f       	sbci	r25, 0xFD	; 253
    303e:	fc 01       	movw	r30, r24
    3040:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    3042:	80 91 78 02 	lds	r24, 0x0278
    3046:	8f 5f       	subi	r24, 0xFF	; 255
    3048:	80 93 78 02 	sts	0x0278, r24
    304c:	80 34       	cpi	r24, 0x40	; 64
    304e:	11 f4       	brne	.+4      	; 0x3054 <__vector_32+0x6a>
		rx1_wr_index = 0;
    3050:	10 92 78 02 	sts	0x0278, r1

		rx1_counter++;
    3054:	80 91 79 02 	lds	r24, 0x0279
    3058:	8f 5f       	subi	r24, 0xFF	; 255
    305a:	80 93 79 02 	sts	0x0279, r24
	}
}
    305e:	0f 90       	pop	r0
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	ff 91       	pop	r31
    3066:	ef 91       	pop	r30
    3068:	9f 91       	pop	r25
    306a:	8f 91       	pop	r24
    306c:	3f 91       	pop	r19
    306e:	2f 91       	pop	r18
    3070:	0f 90       	pop	r0
    3072:	00 92 5b 00 	sts	0x005B, r0
    3076:	0f 90       	pop	r0
    3078:	00 92 5f 00 	sts	0x005F, r0
    307c:	0f 90       	pop	r0
    307e:	1f 90       	pop	r1
    3080:	18 95       	reti

00003082 <altUart0Write>:

void altUart0Write(unsigned char data)
{
    3082:	cf 93       	push	r28
    3084:	df 93       	push	r29
    3086:	1f 92       	push	r1
    3088:	cd b7       	in	r28, 0x3d	; 61
    308a:	de b7       	in	r29, 0x3e	; 62
    308c:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
    308e:	00 00       	nop
    3090:	80 ec       	ldi	r24, 0xC0	; 192
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	fc 01       	movw	r30, r24
    3096:	80 81       	ld	r24, Z
    3098:	88 2f       	mov	r24, r24
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	80 72       	andi	r24, 0x20	; 32
    309e:	99 27       	eor	r25, r25
    30a0:	89 2b       	or	r24, r25
    30a2:	b1 f3       	breq	.-20     	; 0x3090 <altUart0Write+0xe>

	UDR0 = data;
    30a4:	86 ec       	ldi	r24, 0xC6	; 198
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	29 81       	ldd	r18, Y+1	; 0x01
    30aa:	fc 01       	movw	r30, r24
    30ac:	20 83       	st	Z, r18
}
    30ae:	0f 90       	pop	r0
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28
    30b4:	08 95       	ret

000030b6 <altUart1Write>:

void altUart1Write(unsigned char data)
{
    30b6:	cf 93       	push	r28
    30b8:	df 93       	push	r29
    30ba:	1f 92       	push	r1
    30bc:	cd b7       	in	r28, 0x3d	; 61
    30be:	de b7       	in	r29, 0x3e	; 62
    30c0:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
    30c2:	00 00       	nop
    30c4:	88 ec       	ldi	r24, 0xC8	; 200
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	fc 01       	movw	r30, r24
    30ca:	80 81       	ld	r24, Z
    30cc:	88 2f       	mov	r24, r24
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	80 72       	andi	r24, 0x20	; 32
    30d2:	99 27       	eor	r25, r25
    30d4:	89 2b       	or	r24, r25
    30d6:	b1 f3       	breq	.-20     	; 0x30c4 <altUart1Write+0xe>
	UDR1 = data;
    30d8:	8e ec       	ldi	r24, 0xCE	; 206
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	29 81       	ldd	r18, Y+1	; 0x01
    30de:	fc 01       	movw	r30, r24
    30e0:	20 83       	st	Z, r18
}
    30e2:	0f 90       	pop	r0
    30e4:	df 91       	pop	r29
    30e6:	cf 91       	pop	r28
    30e8:	08 95       	ret

000030ea <UART1_Write>:
Slanje podataka USART1 modulom
**
**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
    30ea:	cf 93       	push	r28
    30ec:	df 93       	push	r29
    30ee:	1f 92       	push	r1
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
    30f4:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
    30f6:	89 ec       	ldi	r24, 0xC9	; 201
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	fc 01       	movw	r30, r24
    30fc:	80 81       	ld	r24, Z
    30fe:	82 95       	swap	r24
    3100:	86 95       	lsr	r24
    3102:	86 95       	lsr	r24
    3104:	83 70       	andi	r24, 0x03	; 3
    3106:	88 2f       	mov	r24, r24
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	81 70       	andi	r24, 0x01	; 1
    310c:	99 27       	eor	r25, r25
    310e:	89 2b       	or	r24, r25
    3110:	99 f1       	breq	.+102    	; 0x3178 <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
    3112:	00 00       	nop
    3114:	80 91 36 02 	lds	r24, 0x0236
    3118:	80 34       	cpi	r24, 0x40	; 64
    311a:	e1 f3       	breq	.-8      	; 0x3114 <UART1_Write+0x2a>

		cli();
    311c:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
    311e:	80 91 36 02 	lds	r24, 0x0236
    3122:	88 23       	and	r24, r24
    3124:	51 f4       	brne	.+20     	; 0x313a <UART1_Write+0x50>
    3126:	88 ec       	ldi	r24, 0xC8	; 200
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	fc 01       	movw	r30, r24
    312c:	80 81       	ld	r24, Z
    312e:	88 2f       	mov	r24, r24
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	80 72       	andi	r24, 0x20	; 32
    3134:	99 27       	eor	r25, r25
    3136:	89 2b       	or	r24, r25
    3138:	c1 f4       	brne	.+48     	; 0x316a <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
    313a:	80 91 35 02 	lds	r24, 0x0235
    313e:	88 2f       	mov	r24, r24
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	8b 50       	subi	r24, 0x0B	; 11
    3144:	9e 4f       	sbci	r25, 0xFE	; 254
    3146:	29 81       	ldd	r18, Y+1	; 0x01
    3148:	fc 01       	movw	r30, r24
    314a:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
    314c:	80 91 35 02 	lds	r24, 0x0235
    3150:	8f 5f       	subi	r24, 0xFF	; 255
    3152:	80 93 35 02 	sts	0x0235, r24
    3156:	80 34       	cpi	r24, 0x40	; 64
    3158:	11 f4       	brne	.+4      	; 0x315e <UART1_Write+0x74>
				tx1_wr_index = 0;
    315a:	10 92 35 02 	sts	0x0235, r1

			tx1_counter++;
    315e:	80 91 36 02 	lds	r24, 0x0236
    3162:	8f 5f       	subi	r24, 0xFF	; 255
    3164:	80 93 36 02 	sts	0x0236, r24
    3168:	05 c0       	rjmp	.+10     	; 0x3174 <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
    316a:	8e ec       	ldi	r24, 0xCE	; 206
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	29 81       	ldd	r18, Y+1	; 0x01
    3170:	fc 01       	movw	r30, r24
    3172:	20 83       	st	Z, r18

		sei();
    3174:	78 94       	sei
    3176:	03 c0       	rjmp	.+6      	; 0x317e <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <altUart1Write>
}
    317e:	0f 90       	pop	r0
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	08 95       	ret

00003186 <UART1_Read>:

unsigned char UART1_Read(void)
{
    3186:	cf 93       	push	r28
    3188:	df 93       	push	r29
    318a:	1f 92       	push	r1
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
    3190:	89 ec       	ldi	r24, 0xC9	; 201
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	fc 01       	movw	r30, r24
    3196:	80 81       	ld	r24, Z
    3198:	88 1f       	adc	r24, r24
    319a:	88 27       	eor	r24, r24
    319c:	88 1f       	adc	r24, r24
    319e:	88 2f       	mov	r24, r24
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	81 70       	andi	r24, 0x01	; 1
    31a4:	99 27       	eor	r25, r25
    31a6:	89 2b       	or	r24, r25
    31a8:	e9 f0       	breq	.+58     	; 0x31e4 <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
    31aa:	00 00       	nop
    31ac:	80 91 79 02 	lds	r24, 0x0279
    31b0:	88 23       	and	r24, r24
    31b2:	e1 f3       	breq	.-8      	; 0x31ac <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
    31b4:	80 91 7a 02 	lds	r24, 0x027A
    31b8:	88 2f       	mov	r24, r24
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	88 5c       	subi	r24, 0xC8	; 200
    31be:	9d 4f       	sbci	r25, 0xFD	; 253
    31c0:	fc 01       	movw	r30, r24
    31c2:	80 81       	ld	r24, Z
    31c4:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
    31c6:	80 91 7a 02 	lds	r24, 0x027A
    31ca:	8f 5f       	subi	r24, 0xFF	; 255
    31cc:	80 93 7a 02 	sts	0x027A, r24
    31d0:	80 34       	cpi	r24, 0x40	; 64
    31d2:	11 f4       	brne	.+4      	; 0x31d8 <UART1_Read+0x52>
			rx1_rd_index = 0;
    31d4:	10 92 7a 02 	sts	0x027A, r1

		rx1_counter--;
    31d8:	80 91 79 02 	lds	r24, 0x0279
    31dc:	81 50       	subi	r24, 0x01	; 1
    31de:	80 93 79 02 	sts	0x0279, r24
    31e2:	13 c0       	rjmp	.+38     	; 0x320a <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
    31e4:	00 00       	nop
    31e6:	88 ec       	ldi	r24, 0xC8	; 200
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	fc 01       	movw	r30, r24
    31ec:	80 81       	ld	r24, Z
    31ee:	88 1f       	adc	r24, r24
    31f0:	88 27       	eor	r24, r24
    31f2:	88 1f       	adc	r24, r24
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	81 70       	andi	r24, 0x01	; 1
    31fa:	99 27       	eor	r25, r25
    31fc:	89 2b       	or	r24, r25
    31fe:	99 f3       	breq	.-26     	; 0x31e6 <UART1_Read+0x60>
		data = UDR1;
    3200:	8e ec       	ldi	r24, 0xCE	; 206
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	fc 01       	movw	r30, r24
    3206:	80 81       	ld	r24, Z
    3208:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    320a:	89 81       	ldd	r24, Y+1	; 0x01
}
    320c:	0f 90       	pop	r0
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	08 95       	ret

00003214 <UART1_Buffer>:

void UART1_Buffer(uint8_t* str) {
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	00 d0       	rcall	.+0      	; 0x321a <UART1_Buffer+0x6>
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
    321e:	9a 83       	std	Y+2, r25	; 0x02
    3220:	89 83       	std	Y+1, r24	; 0x01
	while(*str) {
    3222:	0b c0       	rjmp	.+22     	; 0x323a <UART1_Buffer+0x26>
		altUart1Write(*str++);
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	9a 81       	ldd	r25, Y+2	; 0x02
    3228:	9c 01       	movw	r18, r24
    322a:	2f 5f       	subi	r18, 0xFF	; 255
    322c:	3f 4f       	sbci	r19, 0xFF	; 255
    322e:	3a 83       	std	Y+2, r19	; 0x02
    3230:	29 83       	std	Y+1, r18	; 0x01
    3232:	fc 01       	movw	r30, r24
    3234:	80 81       	ld	r24, Z
    3236:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <altUart1Write>

	return data;
}

void UART1_Buffer(uint8_t* str) {
	while(*str) {
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	9a 81       	ldd	r25, Y+2	; 0x02
    323e:	fc 01       	movw	r30, r24
    3240:	80 81       	ld	r24, Z
    3242:	88 23       	and	r24, r24
    3244:	79 f7       	brne	.-34     	; 0x3224 <UART1_Buffer+0x10>
		altUart1Write(*str++);
	}
}
    3246:	0f 90       	pop	r0
    3248:	0f 90       	pop	r0
    324a:	df 91       	pop	r29
    324c:	cf 91       	pop	r28
    324e:	08 95       	ret

00003250 <test_sensor>:
#include "actuator.h"

// if this is defined it will execute the coordinates for the "first desk" if commented it will moveon to the "second desk"
#define first_desk

char test_sensor(unsigned long start_time) {
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	00 d0       	rcall	.+0      	; 0x3256 <test_sensor+0x6>
    3256:	00 d0       	rcall	.+0      	; 0x3258 <test_sensor+0x8>
    3258:	cd b7       	in	r28, 0x3d	; 61
    325a:	de b7       	in	r29, 0x3e	; 62
    325c:	69 83       	std	Y+1, r22	; 0x01
    325e:	7a 83       	std	Y+2, r23	; 0x02
    3260:	8b 83       	std	Y+3, r24	; 0x03
    3262:	9c 83       	std	Y+4, r25	; 0x04
	if(gpio_read_pin(0) == 1) {
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	0e 94 2f 09 	call	0x125e	; 0x125e <gpio_read_pin>
    326a:	81 30       	cpi	r24, 0x01	; 1
    326c:	29 f4       	brne	.+10     	; 0x3278 <test_sensor+0x28>
		odometry_stop(HARD_STOP);
    326e:	83 e5       	ldi	r24, 0x53	; 83
    3270:	0e 94 94 0b 	call	0x1728	; 0x1728 <odometry_stop>
		return 1;
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	01 c0       	rjmp	.+2      	; 0x327a <test_sensor+0x2a>
	}

	return 0;
    3278:	80 e0       	ldi	r24, 0x00	; 0
}
    327a:	0f 90       	pop	r0
    327c:	0f 90       	pop	r0
    327e:	0f 90       	pop	r0
    3280:	0f 90       	pop	r0
    3282:	df 91       	pop	r29
    3284:	cf 91       	pop	r28
    3286:	08 95       	ret

00003288 <wait_while_detection_tactic_one>:

/*
 * 	Function: static void wait_while_detection_tactic_one(void)
 * 	Description: This will wait until the callback(sensor) is returning 1, so called detecting the enemy
 */
static void wait_while_detection_tactic_one(void) {
    3288:	cf 93       	push	r28
    328a:	df 93       	push	r29
    328c:	cd b7       	in	r28, 0x3d	; 61
    328e:	de b7       	in	r29, 0x3e	; 62
    3290:	6c 97       	sbiw	r28, 0x1c	; 28
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	f8 94       	cli
    3296:	de bf       	out	0x3e, r29	; 62
    3298:	0f be       	out	0x3f, r0	; 63
    329a:	cd bf       	out	0x3d, r28	; 61
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	a8 e4       	ldi	r26, 0x48	; 72
    32a2:	b3 e4       	ldi	r27, 0x43	; 67
    32a4:	89 83       	std	Y+1, r24	; 0x01
    32a6:	9a 83       	std	Y+2, r25	; 0x02
    32a8:	ab 83       	std	Y+3, r26	; 0x03
    32aa:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e4       	ldi	r19, 0x40	; 64
    32b0:	4c e1       	ldi	r20, 0x1C	; 28
    32b2:	55 e4       	ldi	r21, 0x45	; 69
    32b4:	69 81       	ldd	r22, Y+1	; 0x01
    32b6:	7a 81       	ldd	r23, Y+2	; 0x02
    32b8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ba:	9c 81       	ldd	r25, Y+4	; 0x04
    32bc:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	8d 83       	std	Y+5, r24	; 0x05
    32c6:	9e 83       	std	Y+6, r25	; 0x06
    32c8:	af 83       	std	Y+7, r26	; 0x07
    32ca:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	40 e8       	ldi	r20, 0x80	; 128
    32d2:	5f e3       	ldi	r21, 0x3F	; 63
    32d4:	6d 81       	ldd	r22, Y+5	; 0x05
    32d6:	7e 81       	ldd	r23, Y+6	; 0x06
    32d8:	8f 81       	ldd	r24, Y+7	; 0x07
    32da:	98 85       	ldd	r25, Y+8	; 0x08
    32dc:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    32e0:	88 23       	and	r24, r24
    32e2:	2c f4       	brge	.+10     	; 0x32ee <wait_while_detection_tactic_one+0x66>
		__ticks = 1;
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	9a 87       	std	Y+10, r25	; 0x0a
    32ea:	89 87       	std	Y+9, r24	; 0x09
    32ec:	3f c0       	rjmp	.+126    	; 0x336c <wait_while_detection_tactic_one+0xe4>
	else if (__tmp > 65535)
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	3f ef       	ldi	r19, 0xFF	; 255
    32f2:	4f e7       	ldi	r20, 0x7F	; 127
    32f4:	57 e4       	ldi	r21, 0x47	; 71
    32f6:	6d 81       	ldd	r22, Y+5	; 0x05
    32f8:	7e 81       	ldd	r23, Y+6	; 0x06
    32fa:	8f 81       	ldd	r24, Y+7	; 0x07
    32fc:	98 85       	ldd	r25, Y+8	; 0x08
    32fe:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    3302:	18 16       	cp	r1, r24
    3304:	4c f5       	brge	.+82     	; 0x3358 <wait_while_detection_tactic_one+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 e2       	ldi	r20, 0x20	; 32
    330c:	51 e4       	ldi	r21, 0x41	; 65
    330e:	69 81       	ldd	r22, Y+1	; 0x01
    3310:	7a 81       	ldd	r23, Y+2	; 0x02
    3312:	8b 81       	ldd	r24, Y+3	; 0x03
    3314:	9c 81       	ldd	r25, Y+4	; 0x04
    3316:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	bc 01       	movw	r22, r24
    3320:	cd 01       	movw	r24, r26
    3322:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	9a 87       	std	Y+10, r25	; 0x0a
    332c:	89 87       	std	Y+9, r24	; 0x09
    332e:	0f c0       	rjmp	.+30     	; 0x334e <wait_while_detection_tactic_one+0xc6>
    3330:	8a ef       	ldi	r24, 0xFA	; 250
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	9c 87       	std	Y+12, r25	; 0x0c
    3336:	8b 87       	std	Y+11, r24	; 0x0b
    3338:	8b 85       	ldd	r24, Y+11	; 0x0b
    333a:	9c 85       	ldd	r25, Y+12	; 0x0c
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	f1 f7       	brne	.-4      	; 0x333c <wait_while_detection_tactic_one+0xb4>
    3340:	9c 87       	std	Y+12, r25	; 0x0c
    3342:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3344:	89 85       	ldd	r24, Y+9	; 0x09
    3346:	9a 85       	ldd	r25, Y+10	; 0x0a
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	9a 87       	std	Y+10, r25	; 0x0a
    334c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334e:	89 85       	ldd	r24, Y+9	; 0x09
    3350:	9a 85       	ldd	r25, Y+10	; 0x0a
    3352:	89 2b       	or	r24, r25
    3354:	69 f7       	brne	.-38     	; 0x3330 <wait_while_detection_tactic_one+0xa8>
    3356:	14 c0       	rjmp	.+40     	; 0x3380 <wait_while_detection_tactic_one+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3358:	6d 81       	ldd	r22, Y+5	; 0x05
    335a:	7e 81       	ldd	r23, Y+6	; 0x06
    335c:	8f 81       	ldd	r24, Y+7	; 0x07
    335e:	98 85       	ldd	r25, Y+8	; 0x08
    3360:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	9a 87       	std	Y+10, r25	; 0x0a
    336a:	89 87       	std	Y+9, r24	; 0x09
    336c:	89 85       	ldd	r24, Y+9	; 0x09
    336e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3370:	9e 87       	std	Y+14, r25	; 0x0e
    3372:	8d 87       	std	Y+13, r24	; 0x0d
    3374:	8d 85       	ldd	r24, Y+13	; 0x0d
    3376:	9e 85       	ldd	r25, Y+14	; 0x0e
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	f1 f7       	brne	.-4      	; 0x3378 <wait_while_detection_tactic_one+0xf0>
    337c:	9e 87       	std	Y+14, r25	; 0x0e
    337e:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(200);
	while(TACTIC_ONE_POSITION[current_position].callback(0) == 1)
    3380:	72 c0       	rjmp	.+228    	; 0x3466 <wait_while_detection_tactic_one+0x1de>
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	a0 e2       	ldi	r26, 0x20	; 32
    3388:	b1 e4       	ldi	r27, 0x41	; 65
    338a:	8f 87       	std	Y+15, r24	; 0x0f
    338c:	98 8b       	std	Y+16, r25	; 0x10
    338e:	a9 8b       	std	Y+17, r26	; 0x11
    3390:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e4       	ldi	r19, 0x40	; 64
    3396:	4c e1       	ldi	r20, 0x1C	; 28
    3398:	55 e4       	ldi	r21, 0x45	; 69
    339a:	6f 85       	ldd	r22, Y+15	; 0x0f
    339c:	78 89       	ldd	r23, Y+16	; 0x10
    339e:	89 89       	ldd	r24, Y+17	; 0x11
    33a0:	9a 89       	ldd	r25, Y+18	; 0x12
    33a2:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    33a6:	dc 01       	movw	r26, r24
    33a8:	cb 01       	movw	r24, r22
    33aa:	8b 8b       	std	Y+19, r24	; 0x13
    33ac:	9c 8b       	std	Y+20, r25	; 0x14
    33ae:	ad 8b       	std	Y+21, r26	; 0x15
    33b0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	40 e8       	ldi	r20, 0x80	; 128
    33b8:	5f e3       	ldi	r21, 0x3F	; 63
    33ba:	6b 89       	ldd	r22, Y+19	; 0x13
    33bc:	7c 89       	ldd	r23, Y+20	; 0x14
    33be:	8d 89       	ldd	r24, Y+21	; 0x15
    33c0:	9e 89       	ldd	r25, Y+22	; 0x16
    33c2:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    33c6:	88 23       	and	r24, r24
    33c8:	2c f4       	brge	.+10     	; 0x33d4 <wait_while_detection_tactic_one+0x14c>
		__ticks = 1;
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	98 8f       	std	Y+24, r25	; 0x18
    33d0:	8f 8b       	std	Y+23, r24	; 0x17
    33d2:	3f c0       	rjmp	.+126    	; 0x3452 <wait_while_detection_tactic_one+0x1ca>
	else if (__tmp > 65535)
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	3f ef       	ldi	r19, 0xFF	; 255
    33d8:	4f e7       	ldi	r20, 0x7F	; 127
    33da:	57 e4       	ldi	r21, 0x47	; 71
    33dc:	6b 89       	ldd	r22, Y+19	; 0x13
    33de:	7c 89       	ldd	r23, Y+20	; 0x14
    33e0:	8d 89       	ldd	r24, Y+21	; 0x15
    33e2:	9e 89       	ldd	r25, Y+22	; 0x16
    33e4:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    33e8:	18 16       	cp	r1, r24
    33ea:	4c f5       	brge	.+82     	; 0x343e <wait_while_detection_tactic_one+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	40 e2       	ldi	r20, 0x20	; 32
    33f2:	51 e4       	ldi	r21, 0x41	; 65
    33f4:	6f 85       	ldd	r22, Y+15	; 0x0f
    33f6:	78 89       	ldd	r23, Y+16	; 0x10
    33f8:	89 89       	ldd	r24, Y+17	; 0x11
    33fa:	9a 89       	ldd	r25, Y+18	; 0x12
    33fc:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	bc 01       	movw	r22, r24
    3406:	cd 01       	movw	r24, r26
    3408:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	98 8f       	std	Y+24, r25	; 0x18
    3412:	8f 8b       	std	Y+23, r24	; 0x17
    3414:	0f c0       	rjmp	.+30     	; 0x3434 <wait_while_detection_tactic_one+0x1ac>
    3416:	8a ef       	ldi	r24, 0xFA	; 250
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	9a 8f       	std	Y+26, r25	; 0x1a
    341c:	89 8f       	std	Y+25, r24	; 0x19
    341e:	89 8d       	ldd	r24, Y+25	; 0x19
    3420:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3422:	01 97       	sbiw	r24, 0x01	; 1
    3424:	f1 f7       	brne	.-4      	; 0x3422 <wait_while_detection_tactic_one+0x19a>
    3426:	9a 8f       	std	Y+26, r25	; 0x1a
    3428:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342a:	8f 89       	ldd	r24, Y+23	; 0x17
    342c:	98 8d       	ldd	r25, Y+24	; 0x18
    342e:	01 97       	sbiw	r24, 0x01	; 1
    3430:	98 8f       	std	Y+24, r25	; 0x18
    3432:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3434:	8f 89       	ldd	r24, Y+23	; 0x17
    3436:	98 8d       	ldd	r25, Y+24	; 0x18
    3438:	89 2b       	or	r24, r25
    343a:	69 f7       	brne	.-38     	; 0x3416 <wait_while_detection_tactic_one+0x18e>
    343c:	14 c0       	rjmp	.+40     	; 0x3466 <wait_while_detection_tactic_one+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    343e:	6b 89       	ldd	r22, Y+19	; 0x13
    3440:	7c 89       	ldd	r23, Y+20	; 0x14
    3442:	8d 89       	ldd	r24, Y+21	; 0x15
    3444:	9e 89       	ldd	r25, Y+22	; 0x16
    3446:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	98 8f       	std	Y+24, r25	; 0x18
    3450:	8f 8b       	std	Y+23, r24	; 0x17
    3452:	8f 89       	ldd	r24, Y+23	; 0x17
    3454:	98 8d       	ldd	r25, Y+24	; 0x18
    3456:	9c 8f       	std	Y+28, r25	; 0x1c
    3458:	8b 8f       	std	Y+27, r24	; 0x1b
    345a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    345c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	f1 f7       	brne	.-4      	; 0x345e <wait_while_detection_tactic_one+0x1d6>
    3462:	9c 8f       	std	Y+28, r25	; 0x1c
    3464:	8b 8f       	std	Y+27, r24	; 0x1b
    3466:	80 91 7b 02 	lds	r24, 0x027B
    346a:	28 2f       	mov	r18, r24
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	4b e0       	ldi	r20, 0x0B	; 11
    3470:	42 9f       	mul	r20, r18
    3472:	c0 01       	movw	r24, r0
    3474:	43 9f       	mul	r20, r19
    3476:	90 0d       	add	r25, r0
    3478:	11 24       	eor	r1, r1
    347a:	80 5e       	subi	r24, 0xE0	; 224
    347c:	9e 4f       	sbci	r25, 0xFE	; 254
    347e:	fc 01       	movw	r30, r24
    3480:	20 81       	ld	r18, Z
    3482:	31 81       	ldd	r19, Z+1	; 0x01
    3484:	60 e0       	ldi	r22, 0x00	; 0
    3486:	70 e0       	ldi	r23, 0x00	; 0
    3488:	cb 01       	movw	r24, r22
    348a:	f9 01       	movw	r30, r18
    348c:	09 95       	icall
    348e:	81 30       	cpi	r24, 0x01	; 1
    3490:	09 f4       	brne	.+2      	; 0x3494 <wait_while_detection_tactic_one+0x20c>
    3492:	77 cf       	rjmp	.-274    	; 0x3382 <wait_while_detection_tactic_one+0xfa>
		_delay_ms(10);
	next_position = current_position;
    3494:	80 91 7b 02 	lds	r24, 0x027B
    3498:	80 93 7c 02 	sts	0x027C, r24
	active_state = TACTIC_ONE;
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	80 93 16 01 	sts	0x0116, r24

}
    34a2:	6c 96       	adiw	r28, 0x1c	; 28
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	df 91       	pop	r29
    34b0:	cf 91       	pop	r28
    34b2:	08 95       	ret

000034b4 <darkside>:

void darkside(void) {
    34b4:	cf 93       	push	r28
    34b6:	df 93       	push	r29
    34b8:	cd b7       	in	r28, 0x3d	; 61
    34ba:	de b7       	in	r29, 0x3e	; 62
    34bc:	a3 97       	sbiw	r28, 0x23	; 35
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	f8 94       	cli
    34c2:	de bf       	out	0x3e, r29	; 62
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	cd bf       	out	0x3d, r28	; 61


	// setting the starting position
	struct odometry_position startingPosition; startingPosition.x = 0; startingPosition.y = 0; startingPosition.angle = 0;
    34c8:	1e 8e       	std	Y+30, r1	; 0x1e
    34ca:	1d 8e       	std	Y+29, r1	; 0x1d
    34cc:	18 a2       	std	Y+32, r1	; 0x20
    34ce:	1f 8e       	std	Y+31, r1	; 0x1f
    34d0:	1a a2       	std	Y+34, r1	; 0x22
    34d2:	19 a2       	std	Y+33, r1	; 0x21

	// sending the starting position to odometry
	odometry_set_position(&startingPosition);
    34d4:	ce 01       	movw	r24, r28
    34d6:	4d 96       	adiw	r24, 0x1d	; 29
    34d8:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <odometry_set_position>

	while(1) {
		switch(active_state) {
    34dc:	80 91 16 01 	lds	r24, 0x0116
    34e0:	88 2f       	mov	r24, r24
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	81 30       	cpi	r24, 0x01	; 1
    34e6:	91 05       	cpc	r25, r1
    34e8:	09 f4       	brne	.+2      	; 0x34ec <darkside+0x38>
    34ea:	8f c0       	rjmp	.+286    	; 0x360a <darkside+0x156>
    34ec:	83 35       	cpi	r24, 0x53	; 83
    34ee:	91 05       	cpc	r25, r1
    34f0:	91 f0       	breq	.+36     	; 0x3516 <darkside+0x62>
    34f2:	89 2b       	or	r24, r25
    34f4:	09 f0       	breq	.+2      	; 0x34f8 <darkside+0x44>
    34f6:	59 c1       	rjmp	.+690    	; 0x37aa <darkside+0x2f6>
		case COLLISION:		// COLLISION ! DON'T FORGET BREAK !
			if(current_position == 0) {
    34f8:	80 91 7b 02 	lds	r24, 0x027B
    34fc:	88 23       	and	r24, r24
    34fe:	19 f4       	brne	.+6      	; 0x3506 <darkside+0x52>
				wait_while_detection_tactic_one();
    3500:	0e 94 44 19 	call	0x3288	; 0x3288 <wait_while_detection_tactic_one>
				break;
    3504:	52 c1       	rjmp	.+676    	; 0x37aa <darkside+0x2f6>
			} else if(current_position == 1) {
    3506:	80 91 7b 02 	lds	r24, 0x027B
    350a:	81 30       	cpi	r24, 0x01	; 1
    350c:	19 f4       	brne	.+6      	; 0x3514 <darkside+0x60>
				wait_while_detection_tactic_one();
    350e:	0e 94 44 19 	call	0x3288	; 0x3288 <wait_while_detection_tactic_one>
				break;
    3512:	4b c1       	rjmp	.+662    	; 0x37aa <darkside+0x2f6>
			}

			break;
    3514:	4a c1       	rjmp	.+660    	; 0x37aa <darkside+0x2f6>
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	aa e7       	ldi	r26, 0x7A	; 122
    351c:	b4 e4       	ldi	r27, 0x44	; 68
    351e:	89 83       	std	Y+1, r24	; 0x01
    3520:	9a 83       	std	Y+2, r25	; 0x02
    3522:	ab 83       	std	Y+3, r26	; 0x03
    3524:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e4       	ldi	r19, 0x40	; 64
    352a:	4c e1       	ldi	r20, 0x1C	; 28
    352c:	55 e4       	ldi	r21, 0x45	; 69
    352e:	69 81       	ldd	r22, Y+1	; 0x01
    3530:	7a 81       	ldd	r23, Y+2	; 0x02
    3532:	8b 81       	ldd	r24, Y+3	; 0x03
    3534:	9c 81       	ldd	r25, Y+4	; 0x04
    3536:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	8d 83       	std	Y+5, r24	; 0x05
    3540:	9e 83       	std	Y+6, r25	; 0x06
    3542:	af 83       	std	Y+7, r26	; 0x07
    3544:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	40 e8       	ldi	r20, 0x80	; 128
    354c:	5f e3       	ldi	r21, 0x3F	; 63
    354e:	6d 81       	ldd	r22, Y+5	; 0x05
    3550:	7e 81       	ldd	r23, Y+6	; 0x06
    3552:	8f 81       	ldd	r24, Y+7	; 0x07
    3554:	98 85       	ldd	r25, Y+8	; 0x08
    3556:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    355a:	88 23       	and	r24, r24
    355c:	2c f4       	brge	.+10     	; 0x3568 <darkside+0xb4>
		__ticks = 1;
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	9a 87       	std	Y+10, r25	; 0x0a
    3564:	89 87       	std	Y+9, r24	; 0x09
    3566:	3f c0       	rjmp	.+126    	; 0x35e6 <darkside+0x132>
	else if (__tmp > 65535)
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	3f ef       	ldi	r19, 0xFF	; 255
    356c:	4f e7       	ldi	r20, 0x7F	; 127
    356e:	57 e4       	ldi	r21, 0x47	; 71
    3570:	6d 81       	ldd	r22, Y+5	; 0x05
    3572:	7e 81       	ldd	r23, Y+6	; 0x06
    3574:	8f 81       	ldd	r24, Y+7	; 0x07
    3576:	98 85       	ldd	r25, Y+8	; 0x08
    3578:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    357c:	18 16       	cp	r1, r24
    357e:	4c f5       	brge	.+82     	; 0x35d2 <darkside+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	40 e2       	ldi	r20, 0x20	; 32
    3586:	51 e4       	ldi	r21, 0x41	; 65
    3588:	69 81       	ldd	r22, Y+1	; 0x01
    358a:	7a 81       	ldd	r23, Y+2	; 0x02
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	9c 81       	ldd	r25, Y+4	; 0x04
    3590:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	bc 01       	movw	r22, r24
    359a:	cd 01       	movw	r24, r26
    359c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	9a 87       	std	Y+10, r25	; 0x0a
    35a6:	89 87       	std	Y+9, r24	; 0x09
    35a8:	0f c0       	rjmp	.+30     	; 0x35c8 <darkside+0x114>
    35aa:	8a ef       	ldi	r24, 0xFA	; 250
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	9c 87       	std	Y+12, r25	; 0x0c
    35b0:	8b 87       	std	Y+11, r24	; 0x0b
    35b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    35b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	f1 f7       	brne	.-4      	; 0x35b6 <darkside+0x102>
    35ba:	9c 87       	std	Y+12, r25	; 0x0c
    35bc:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35be:	89 85       	ldd	r24, Y+9	; 0x09
    35c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c2:	01 97       	sbiw	r24, 0x01	; 1
    35c4:	9a 87       	std	Y+10, r25	; 0x0a
    35c6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c8:	89 85       	ldd	r24, Y+9	; 0x09
    35ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    35cc:	89 2b       	or	r24, r25
    35ce:	69 f7       	brne	.-38     	; 0x35aa <darkside+0xf6>
    35d0:	14 c0       	rjmp	.+40     	; 0x35fa <darkside+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d2:	6d 81       	ldd	r22, Y+5	; 0x05
    35d4:	7e 81       	ldd	r23, Y+6	; 0x06
    35d6:	8f 81       	ldd	r24, Y+7	; 0x07
    35d8:	98 85       	ldd	r25, Y+8	; 0x08
    35da:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	9a 87       	std	Y+10, r25	; 0x0a
    35e4:	89 87       	std	Y+9, r24	; 0x09
    35e6:	89 85       	ldd	r24, Y+9	; 0x09
    35e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ea:	9e 87       	std	Y+14, r25	; 0x0e
    35ec:	8d 87       	std	Y+13, r24	; 0x0d
    35ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	f1 f7       	brne	.-4      	; 0x35f2 <darkside+0x13e>
    35f6:	9e 87       	std	Y+14, r25	; 0x0e
    35f8:	8d 87       	std	Y+13, r24	; 0x0d
		case STUCK:			// STUCK
			_delay_ms(1000);
			active_state = TACTIC_ONE;
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	80 93 16 01 	sts	0x0116, r24
			next_position = current_position;
    3600:	80 91 7b 02 	lds	r24, 0x027B
    3604:	80 93 7c 02 	sts	0x027C, r24

			break;
    3608:	d0 c0       	rjmp	.+416    	; 0x37aa <darkside+0x2f6>
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    360a:	80 91 7c 02 	lds	r24, 0x027C
    360e:	80 93 7b 02 	sts	0x027B, r24
    3612:	c6 c0       	rjmp	.+396    	; 0x37a0 <darkside+0x2ec>

				// send the gotoField and receive status
				odometry_status = odometry_move_to_position(&TACTIC_ONE_POSITION[current_position].point, TACTIC_ONE_POSITION[current_position].speed, TACTIC_ONE_POSITION[current_position].direction, TACTIC_ONE_POSITION[current_position].callback);
    3614:	80 91 7b 02 	lds	r24, 0x027B
    3618:	28 2f       	mov	r18, r24
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	4b e0       	ldi	r20, 0x0B	; 11
    361e:	42 9f       	mul	r20, r18
    3620:	c0 01       	movw	r24, r0
    3622:	43 9f       	mul	r20, r19
    3624:	90 0d       	add	r25, r0
    3626:	11 24       	eor	r1, r1
    3628:	80 5e       	subi	r24, 0xE0	; 224
    362a:	9e 4f       	sbci	r25, 0xFE	; 254
    362c:	dc 01       	movw	r26, r24
    362e:	4d 91       	ld	r20, X+
    3630:	5c 91       	ld	r21, X
    3632:	80 91 7b 02 	lds	r24, 0x027B
    3636:	28 2f       	mov	r18, r24
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	6b e0       	ldi	r22, 0x0B	; 11
    363c:	62 9f       	mul	r22, r18
    363e:	c0 01       	movw	r24, r0
    3640:	63 9f       	mul	r22, r19
    3642:	90 0d       	add	r25, r0
    3644:	11 24       	eor	r1, r1
    3646:	81 5e       	subi	r24, 0xE1	; 225
    3648:	9e 4f       	sbci	r25, 0xFE	; 254
    364a:	dc 01       	movw	r26, r24
    364c:	ec 91       	ld	r30, X
    364e:	80 91 7b 02 	lds	r24, 0x027B
    3652:	28 2f       	mov	r18, r24
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	6b e0       	ldi	r22, 0x0B	; 11
    3658:	62 9f       	mul	r22, r18
    365a:	c0 01       	movw	r24, r0
    365c:	63 9f       	mul	r22, r19
    365e:	90 0d       	add	r25, r0
    3660:	11 24       	eor	r1, r1
    3662:	82 5e       	subi	r24, 0xE2	; 226
    3664:	9e 4f       	sbci	r25, 0xFE	; 254
    3666:	dc 01       	movw	r26, r24
    3668:	7c 91       	ld	r23, X
    366a:	80 91 7b 02 	lds	r24, 0x027B
    366e:	28 2f       	mov	r18, r24
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	6b e0       	ldi	r22, 0x0B	; 11
    3674:	62 9f       	mul	r22, r18
    3676:	c0 01       	movw	r24, r0
    3678:	63 9f       	mul	r22, r19
    367a:	90 0d       	add	r25, r0
    367c:	11 24       	eor	r1, r1
    367e:	89 5e       	subi	r24, 0xE9	; 233
    3680:	9e 4f       	sbci	r25, 0xFE	; 254
    3682:	9a 01       	movw	r18, r20
    3684:	4e 2f       	mov	r20, r30
    3686:	67 2f       	mov	r22, r23
    3688:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <odometry_move_to_position>
    368c:	80 93 7d 02 	sts	0x027D, r24

				// if odometry fails set state to collision
				if(odometry_status == ODOMETRY_FAIL)
    3690:	80 91 7d 02 	lds	r24, 0x027D
    3694:	81 30       	cpi	r24, 0x01	; 1
    3696:	19 f4       	brne	.+6      	; 0x369e <darkside+0x1ea>
				{
					active_state = COLLISION;
    3698:	10 92 16 01 	sts	0x0116, r1
					break;
    369c:	86 c0       	rjmp	.+268    	; 0x37aa <darkside+0x2f6>
				}
				else if(odometry_status == ODOMETRY_STUCK)
				{

				}
				if(current_position == 0) {
    369e:	80 91 7b 02 	lds	r24, 0x027B
    36a2:	88 23       	and	r24, r24
    36a4:	09 f0       	breq	.+2      	; 0x36a8 <darkside+0x1f4>
    36a6:	72 c0       	rjmp	.+228    	; 0x378c <darkside+0x2d8>
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	aa ef       	ldi	r26, 0xFA	; 250
    36ae:	b4 e4       	ldi	r27, 0x44	; 68
    36b0:	8f 87       	std	Y+15, r24	; 0x0f
    36b2:	98 8b       	std	Y+16, r25	; 0x10
    36b4:	a9 8b       	std	Y+17, r26	; 0x11
    36b6:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e4       	ldi	r19, 0x40	; 64
    36bc:	4c e1       	ldi	r20, 0x1C	; 28
    36be:	55 e4       	ldi	r21, 0x45	; 69
    36c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    36c2:	78 89       	ldd	r23, Y+16	; 0x10
    36c4:	89 89       	ldd	r24, Y+17	; 0x11
    36c6:	9a 89       	ldd	r25, Y+18	; 0x12
    36c8:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	8b 8b       	std	Y+19, r24	; 0x13
    36d2:	9c 8b       	std	Y+20, r25	; 0x14
    36d4:	ad 8b       	std	Y+21, r26	; 0x15
    36d6:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	40 e8       	ldi	r20, 0x80	; 128
    36de:	5f e3       	ldi	r21, 0x3F	; 63
    36e0:	6b 89       	ldd	r22, Y+19	; 0x13
    36e2:	7c 89       	ldd	r23, Y+20	; 0x14
    36e4:	8d 89       	ldd	r24, Y+21	; 0x15
    36e6:	9e 89       	ldd	r25, Y+22	; 0x16
    36e8:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    36ec:	88 23       	and	r24, r24
    36ee:	2c f4       	brge	.+10     	; 0x36fa <darkside+0x246>
		__ticks = 1;
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	98 8f       	std	Y+24, r25	; 0x18
    36f6:	8f 8b       	std	Y+23, r24	; 0x17
    36f8:	3f c0       	rjmp	.+126    	; 0x3778 <darkside+0x2c4>
	else if (__tmp > 65535)
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	3f ef       	ldi	r19, 0xFF	; 255
    36fe:	4f e7       	ldi	r20, 0x7F	; 127
    3700:	57 e4       	ldi	r21, 0x47	; 71
    3702:	6b 89       	ldd	r22, Y+19	; 0x13
    3704:	7c 89       	ldd	r23, Y+20	; 0x14
    3706:	8d 89       	ldd	r24, Y+21	; 0x15
    3708:	9e 89       	ldd	r25, Y+22	; 0x16
    370a:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    370e:	18 16       	cp	r1, r24
    3710:	4c f5       	brge	.+82     	; 0x3764 <darkside+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	40 e2       	ldi	r20, 0x20	; 32
    3718:	51 e4       	ldi	r21, 0x41	; 65
    371a:	6f 85       	ldd	r22, Y+15	; 0x0f
    371c:	78 89       	ldd	r23, Y+16	; 0x10
    371e:	89 89       	ldd	r24, Y+17	; 0x11
    3720:	9a 89       	ldd	r25, Y+18	; 0x12
    3722:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	bc 01       	movw	r22, r24
    372c:	cd 01       	movw	r24, r26
    372e:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	98 8f       	std	Y+24, r25	; 0x18
    3738:	8f 8b       	std	Y+23, r24	; 0x17
    373a:	0f c0       	rjmp	.+30     	; 0x375a <darkside+0x2a6>
    373c:	8a ef       	ldi	r24, 0xFA	; 250
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	9a 8f       	std	Y+26, r25	; 0x1a
    3742:	89 8f       	std	Y+25, r24	; 0x19
    3744:	89 8d       	ldd	r24, Y+25	; 0x19
    3746:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3748:	01 97       	sbiw	r24, 0x01	; 1
    374a:	f1 f7       	brne	.-4      	; 0x3748 <darkside+0x294>
    374c:	9a 8f       	std	Y+26, r25	; 0x1a
    374e:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3750:	8f 89       	ldd	r24, Y+23	; 0x17
    3752:	98 8d       	ldd	r25, Y+24	; 0x18
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	98 8f       	std	Y+24, r25	; 0x18
    3758:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    375a:	8f 89       	ldd	r24, Y+23	; 0x17
    375c:	98 8d       	ldd	r25, Y+24	; 0x18
    375e:	89 2b       	or	r24, r25
    3760:	69 f7       	brne	.-38     	; 0x373c <darkside+0x288>
    3762:	14 c0       	rjmp	.+40     	; 0x378c <darkside+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3764:	6b 89       	ldd	r22, Y+19	; 0x13
    3766:	7c 89       	ldd	r23, Y+20	; 0x14
    3768:	8d 89       	ldd	r24, Y+21	; 0x15
    376a:	9e 89       	ldd	r25, Y+22	; 0x16
    376c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	98 8f       	std	Y+24, r25	; 0x18
    3776:	8f 8b       	std	Y+23, r24	; 0x17
    3778:	8f 89       	ldd	r24, Y+23	; 0x17
    377a:	98 8d       	ldd	r25, Y+24	; 0x18
    377c:	9c 8f       	std	Y+28, r25	; 0x1c
    377e:	8b 8f       	std	Y+27, r24	; 0x1b
    3780:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3782:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	f1 f7       	brne	.-4      	; 0x3784 <darkside+0x2d0>
    3788:	9c 8f       	std	Y+28, r25	; 0x1c
    378a:	8b 8f       	std	Y+27, r24	; 0x1b
					_delay_ms(2000);
				}
				// last position
				if(current_position == (TACTIC_ONE_POSITION_COUNT - 1))
    378c:	80 91 7b 02 	lds	r24, 0x027B
    3790:	81 30       	cpi	r24, 0x01	; 1
    3792:	09 f4       	brne	.+2      	; 0x3796 <darkside+0x2e2>
				{
					while(1);
    3794:	ff cf       	rjmp	.-2      	; 0x3794 <darkside+0x2e0>
			active_state = TACTIC_ONE;
			next_position = current_position;

			break;
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    3796:	80 91 7b 02 	lds	r24, 0x027B
    379a:	8f 5f       	subi	r24, 0xFF	; 255
    379c:	80 93 7b 02 	sts	0x027B, r24
    37a0:	80 91 7b 02 	lds	r24, 0x027B
    37a4:	82 30       	cpi	r24, 0x02	; 2
    37a6:	08 f4       	brcc	.+2      	; 0x37aa <darkside+0x2f6>
    37a8:	35 cf       	rjmp	.-406    	; 0x3614 <darkside+0x160>
				{
					while(1);
				}
			}//end of for
		}//end of switch
	}//end of while
    37aa:	98 ce       	rjmp	.-720    	; 0x34dc <darkside+0x28>

000037ac <main>:
#include "debug.h"
#include "can.h"
#include <avr/interrupt.h>

int main()
{
    37ac:	cf 93       	push	r28
    37ae:	df 93       	push	r29
    37b0:	cd b7       	in	r28, 0x3d	; 61
    37b2:	de b7       	in	r29, 0x3e	; 62
    37b4:	aa 97       	sbiw	r28, 0x2a	; 42
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	f8 94       	cli
    37ba:	de bf       	out	0x3e, r29	; 62
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	cd bf       	out	0x3d, r28	; 61


	system_init();
    37c0:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <system_init>
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	90 e8       	ldi	r25, 0x80	; 128
    37c8:	ab e3       	ldi	r26, 0x3B	; 59
    37ca:	b5 e4       	ldi	r27, 0x45	; 69
    37cc:	89 83       	std	Y+1, r24	; 0x01
    37ce:	9a 83       	std	Y+2, r25	; 0x02
    37d0:	ab 83       	std	Y+3, r26	; 0x03
    37d2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e4       	ldi	r19, 0x40	; 64
    37d8:	4c e1       	ldi	r20, 0x1C	; 28
    37da:	55 e4       	ldi	r21, 0x45	; 69
    37dc:	69 81       	ldd	r22, Y+1	; 0x01
    37de:	7a 81       	ldd	r23, Y+2	; 0x02
    37e0:	8b 81       	ldd	r24, Y+3	; 0x03
    37e2:	9c 81       	ldd	r25, Y+4	; 0x04
    37e4:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	8d 83       	std	Y+5, r24	; 0x05
    37ee:	9e 83       	std	Y+6, r25	; 0x06
    37f0:	af 83       	std	Y+7, r26	; 0x07
    37f2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	40 e8       	ldi	r20, 0x80	; 128
    37fa:	5f e3       	ldi	r21, 0x3F	; 63
    37fc:	6d 81       	ldd	r22, Y+5	; 0x05
    37fe:	7e 81       	ldd	r23, Y+6	; 0x06
    3800:	8f 81       	ldd	r24, Y+7	; 0x07
    3802:	98 85       	ldd	r25, Y+8	; 0x08
    3804:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    3808:	88 23       	and	r24, r24
    380a:	2c f4       	brge	.+10     	; 0x3816 <main+0x6a>
		__ticks = 1;
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	9a 87       	std	Y+10, r25	; 0x0a
    3812:	89 87       	std	Y+9, r24	; 0x09
    3814:	3f c0       	rjmp	.+126    	; 0x3894 <main+0xe8>
	else if (__tmp > 65535)
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	3f ef       	ldi	r19, 0xFF	; 255
    381a:	4f e7       	ldi	r20, 0x7F	; 127
    381c:	57 e4       	ldi	r21, 0x47	; 71
    381e:	6d 81       	ldd	r22, Y+5	; 0x05
    3820:	7e 81       	ldd	r23, Y+6	; 0x06
    3822:	8f 81       	ldd	r24, Y+7	; 0x07
    3824:	98 85       	ldd	r25, Y+8	; 0x08
    3826:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    382a:	18 16       	cp	r1, r24
    382c:	4c f5       	brge	.+82     	; 0x3880 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	40 e2       	ldi	r20, 0x20	; 32
    3834:	51 e4       	ldi	r21, 0x41	; 65
    3836:	69 81       	ldd	r22, Y+1	; 0x01
    3838:	7a 81       	ldd	r23, Y+2	; 0x02
    383a:	8b 81       	ldd	r24, Y+3	; 0x03
    383c:	9c 81       	ldd	r25, Y+4	; 0x04
    383e:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	bc 01       	movw	r22, r24
    3848:	cd 01       	movw	r24, r26
    384a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    384e:	dc 01       	movw	r26, r24
    3850:	cb 01       	movw	r24, r22
    3852:	9a 87       	std	Y+10, r25	; 0x0a
    3854:	89 87       	std	Y+9, r24	; 0x09
    3856:	0f c0       	rjmp	.+30     	; 0x3876 <main+0xca>
    3858:	8a ef       	ldi	r24, 0xFA	; 250
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	9c 87       	std	Y+12, r25	; 0x0c
    385e:	8b 87       	std	Y+11, r24	; 0x0b
    3860:	8b 85       	ldd	r24, Y+11	; 0x0b
    3862:	9c 85       	ldd	r25, Y+12	; 0x0c
    3864:	01 97       	sbiw	r24, 0x01	; 1
    3866:	f1 f7       	brne	.-4      	; 0x3864 <main+0xb8>
    3868:	9c 87       	std	Y+12, r25	; 0x0c
    386a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386c:	89 85       	ldd	r24, Y+9	; 0x09
    386e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3870:	01 97       	sbiw	r24, 0x01	; 1
    3872:	9a 87       	std	Y+10, r25	; 0x0a
    3874:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3876:	89 85       	ldd	r24, Y+9	; 0x09
    3878:	9a 85       	ldd	r25, Y+10	; 0x0a
    387a:	89 2b       	or	r24, r25
    387c:	69 f7       	brne	.-38     	; 0x3858 <main+0xac>
    387e:	14 c0       	rjmp	.+40     	; 0x38a8 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3880:	6d 81       	ldd	r22, Y+5	; 0x05
    3882:	7e 81       	ldd	r23, Y+6	; 0x06
    3884:	8f 81       	ldd	r24, Y+7	; 0x07
    3886:	98 85       	ldd	r25, Y+8	; 0x08
    3888:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	9a 87       	std	Y+10, r25	; 0x0a
    3892:	89 87       	std	Y+9, r24	; 0x09
    3894:	89 85       	ldd	r24, Y+9	; 0x09
    3896:	9a 85       	ldd	r25, Y+10	; 0x0a
    3898:	9e 87       	std	Y+14, r25	; 0x0e
    389a:	8d 87       	std	Y+13, r24	; 0x0d
    389c:	8d 85       	ldd	r24, Y+13	; 0x0d
    389e:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a0:	01 97       	sbiw	r24, 0x01	; 1
    38a2:	f1 f7       	brne	.-4      	; 0x38a0 <main+0xf4>
    38a4:	9e 87       	std	Y+14, r25	; 0x0e
    38a6:	8d 87       	std	Y+13, r24	; 0x0d


	_delay_ms(3000);

	while(1) {
		while(get_arduino('M',1) != 0);
    38a8:	00 00       	nop
    38aa:	61 e0       	ldi	r22, 0x01	; 1
    38ac:	8d e4       	ldi	r24, 0x4D	; 77
    38ae:	0e 94 86 00 	call	0x10c	; 0x10c <get_arduino>
    38b2:	88 23       	and	r24, r24
    38b4:	d1 f7       	brne	.-12     	; 0x38aa <main+0xfe>
		send_arduino('M',1,1);
    38b6:	41 e0       	ldi	r20, 0x01	; 1
    38b8:	61 e0       	ldi	r22, 0x01	; 1
    38ba:	8d e4       	ldi	r24, 0x4D	; 77
    38bc:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_arduino>
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	aa e7       	ldi	r26, 0x7A	; 122
    38c6:	b4 e4       	ldi	r27, 0x44	; 68
    38c8:	8f 87       	std	Y+15, r24	; 0x0f
    38ca:	98 8b       	std	Y+16, r25	; 0x10
    38cc:	a9 8b       	std	Y+17, r26	; 0x11
    38ce:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e4       	ldi	r19, 0x40	; 64
    38d4:	4c e1       	ldi	r20, 0x1C	; 28
    38d6:	55 e4       	ldi	r21, 0x45	; 69
    38d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    38da:	78 89       	ldd	r23, Y+16	; 0x10
    38dc:	89 89       	ldd	r24, Y+17	; 0x11
    38de:	9a 89       	ldd	r25, Y+18	; 0x12
    38e0:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	8b 8b       	std	Y+19, r24	; 0x13
    38ea:	9c 8b       	std	Y+20, r25	; 0x14
    38ec:	ad 8b       	std	Y+21, r26	; 0x15
    38ee:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	40 e8       	ldi	r20, 0x80	; 128
    38f6:	5f e3       	ldi	r21, 0x3F	; 63
    38f8:	6b 89       	ldd	r22, Y+19	; 0x13
    38fa:	7c 89       	ldd	r23, Y+20	; 0x14
    38fc:	8d 89       	ldd	r24, Y+21	; 0x15
    38fe:	9e 89       	ldd	r25, Y+22	; 0x16
    3900:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    3904:	88 23       	and	r24, r24
    3906:	2c f4       	brge	.+10     	; 0x3912 <main+0x166>
		__ticks = 1;
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	98 8f       	std	Y+24, r25	; 0x18
    390e:	8f 8b       	std	Y+23, r24	; 0x17
    3910:	3f c0       	rjmp	.+126    	; 0x3990 <main+0x1e4>
	else if (__tmp > 65535)
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	3f ef       	ldi	r19, 0xFF	; 255
    3916:	4f e7       	ldi	r20, 0x7F	; 127
    3918:	57 e4       	ldi	r21, 0x47	; 71
    391a:	6b 89       	ldd	r22, Y+19	; 0x13
    391c:	7c 89       	ldd	r23, Y+20	; 0x14
    391e:	8d 89       	ldd	r24, Y+21	; 0x15
    3920:	9e 89       	ldd	r25, Y+22	; 0x16
    3922:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    3926:	18 16       	cp	r1, r24
    3928:	4c f5       	brge	.+82     	; 0x397c <main+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	40 e2       	ldi	r20, 0x20	; 32
    3930:	51 e4       	ldi	r21, 0x41	; 65
    3932:	6f 85       	ldd	r22, Y+15	; 0x0f
    3934:	78 89       	ldd	r23, Y+16	; 0x10
    3936:	89 89       	ldd	r24, Y+17	; 0x11
    3938:	9a 89       	ldd	r25, Y+18	; 0x12
    393a:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	bc 01       	movw	r22, r24
    3944:	cd 01       	movw	r24, r26
    3946:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	98 8f       	std	Y+24, r25	; 0x18
    3950:	8f 8b       	std	Y+23, r24	; 0x17
    3952:	0f c0       	rjmp	.+30     	; 0x3972 <main+0x1c6>
    3954:	8a ef       	ldi	r24, 0xFA	; 250
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	9a 8f       	std	Y+26, r25	; 0x1a
    395a:	89 8f       	std	Y+25, r24	; 0x19
    395c:	89 8d       	ldd	r24, Y+25	; 0x19
    395e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	f1 f7       	brne	.-4      	; 0x3960 <main+0x1b4>
    3964:	9a 8f       	std	Y+26, r25	; 0x1a
    3966:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3968:	8f 89       	ldd	r24, Y+23	; 0x17
    396a:	98 8d       	ldd	r25, Y+24	; 0x18
    396c:	01 97       	sbiw	r24, 0x01	; 1
    396e:	98 8f       	std	Y+24, r25	; 0x18
    3970:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3972:	8f 89       	ldd	r24, Y+23	; 0x17
    3974:	98 8d       	ldd	r25, Y+24	; 0x18
    3976:	89 2b       	or	r24, r25
    3978:	69 f7       	brne	.-38     	; 0x3954 <main+0x1a8>
    397a:	14 c0       	rjmp	.+40     	; 0x39a4 <main+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    397c:	6b 89       	ldd	r22, Y+19	; 0x13
    397e:	7c 89       	ldd	r23, Y+20	; 0x14
    3980:	8d 89       	ldd	r24, Y+21	; 0x15
    3982:	9e 89       	ldd	r25, Y+22	; 0x16
    3984:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	98 8f       	std	Y+24, r25	; 0x18
    398e:	8f 8b       	std	Y+23, r24	; 0x17
    3990:	8f 89       	ldd	r24, Y+23	; 0x17
    3992:	98 8d       	ldd	r25, Y+24	; 0x18
    3994:	9c 8f       	std	Y+28, r25	; 0x1c
    3996:	8b 8f       	std	Y+27, r24	; 0x1b
    3998:	8b 8d       	ldd	r24, Y+27	; 0x1b
    399a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    399c:	01 97       	sbiw	r24, 0x01	; 1
    399e:	f1 f7       	brne	.-4      	; 0x399c <main+0x1f0>
    39a0:	9c 8f       	std	Y+28, r25	; 0x1c
    39a2:	8b 8f       	std	Y+27, r24	; 0x1b

		_delay_ms(1000);
		while(get_arduino('M',1) != 1);
    39a4:	00 00       	nop
    39a6:	61 e0       	ldi	r22, 0x01	; 1
    39a8:	8d e4       	ldi	r24, 0x4D	; 77
    39aa:	0e 94 86 00 	call	0x10c	; 0x10c <get_arduino>
    39ae:	81 30       	cpi	r24, 0x01	; 1
    39b0:	d1 f7       	brne	.-12     	; 0x39a6 <main+0x1fa>
		send_arduino('M',1,0);
    39b2:	40 e0       	ldi	r20, 0x00	; 0
    39b4:	61 e0       	ldi	r22, 0x01	; 1
    39b6:	8d e4       	ldi	r24, 0x4D	; 77
    39b8:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_arduino>
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	aa ef       	ldi	r26, 0xFA	; 250
    39c2:	b4 e4       	ldi	r27, 0x44	; 68
    39c4:	8d 8f       	std	Y+29, r24	; 0x1d
    39c6:	9e 8f       	std	Y+30, r25	; 0x1e
    39c8:	af 8f       	std	Y+31, r26	; 0x1f
    39ca:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    39cc:	20 e0       	ldi	r18, 0x00	; 0
    39ce:	30 e4       	ldi	r19, 0x40	; 64
    39d0:	4c e1       	ldi	r20, 0x1C	; 28
    39d2:	55 e4       	ldi	r21, 0x45	; 69
    39d4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    39d6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    39d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39da:	98 a1       	ldd	r25, Y+32	; 0x20
    39dc:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	89 a3       	std	Y+33, r24	; 0x21
    39e6:	9a a3       	std	Y+34, r25	; 0x22
    39e8:	ab a3       	std	Y+35, r26	; 0x23
    39ea:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	40 e8       	ldi	r20, 0x80	; 128
    39f2:	5f e3       	ldi	r21, 0x3F	; 63
    39f4:	69 a1       	ldd	r22, Y+33	; 0x21
    39f6:	7a a1       	ldd	r23, Y+34	; 0x22
    39f8:	8b a1       	ldd	r24, Y+35	; 0x23
    39fa:	9c a1       	ldd	r25, Y+36	; 0x24
    39fc:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__cmpsf2>
    3a00:	88 23       	and	r24, r24
    3a02:	2c f4       	brge	.+10     	; 0x3a0e <main+0x262>
		__ticks = 1;
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	9e a3       	std	Y+38, r25	; 0x26
    3a0a:	8d a3       	std	Y+37, r24	; 0x25
    3a0c:	3f c0       	rjmp	.+126    	; 0x3a8c <main+0x2e0>
	else if (__tmp > 65535)
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	3f ef       	ldi	r19, 0xFF	; 255
    3a12:	4f e7       	ldi	r20, 0x7F	; 127
    3a14:	57 e4       	ldi	r21, 0x47	; 71
    3a16:	69 a1       	ldd	r22, Y+33	; 0x21
    3a18:	7a a1       	ldd	r23, Y+34	; 0x22
    3a1a:	8b a1       	ldd	r24, Y+35	; 0x23
    3a1c:	9c a1       	ldd	r25, Y+36	; 0x24
    3a1e:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <__gesf2>
    3a22:	18 16       	cp	r1, r24
    3a24:	4c f5       	brge	.+82     	; 0x3a78 <main+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	40 e2       	ldi	r20, 0x20	; 32
    3a2c:	51 e4       	ldi	r21, 0x41	; 65
    3a2e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3a30:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3a32:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a34:	98 a1       	ldd	r25, Y+32	; 0x20
    3a36:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__mulsf3>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	bc 01       	movw	r22, r24
    3a40:	cd 01       	movw	r24, r26
    3a42:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	9e a3       	std	Y+38, r25	; 0x26
    3a4c:	8d a3       	std	Y+37, r24	; 0x25
    3a4e:	0f c0       	rjmp	.+30     	; 0x3a6e <main+0x2c2>
    3a50:	8a ef       	ldi	r24, 0xFA	; 250
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	98 a7       	std	Y+40, r25	; 0x28
    3a56:	8f a3       	std	Y+39, r24	; 0x27
    3a58:	8f a1       	ldd	r24, Y+39	; 0x27
    3a5a:	98 a5       	ldd	r25, Y+40	; 0x28
    3a5c:	01 97       	sbiw	r24, 0x01	; 1
    3a5e:	f1 f7       	brne	.-4      	; 0x3a5c <main+0x2b0>
    3a60:	98 a7       	std	Y+40, r25	; 0x28
    3a62:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a64:	8d a1       	ldd	r24, Y+37	; 0x25
    3a66:	9e a1       	ldd	r25, Y+38	; 0x26
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	9e a3       	std	Y+38, r25	; 0x26
    3a6c:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    3a70:	9e a1       	ldd	r25, Y+38	; 0x26
    3a72:	89 2b       	or	r24, r25
    3a74:	69 f7       	brne	.-38     	; 0x3a50 <main+0x2a4>
    3a76:	14 c0       	rjmp	.+40     	; 0x3aa0 <main+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a78:	69 a1       	ldd	r22, Y+33	; 0x21
    3a7a:	7a a1       	ldd	r23, Y+34	; 0x22
    3a7c:	8b a1       	ldd	r24, Y+35	; 0x23
    3a7e:	9c a1       	ldd	r25, Y+36	; 0x24
    3a80:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <__fixunssfsi>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	9e a3       	std	Y+38, r25	; 0x26
    3a8a:	8d a3       	std	Y+37, r24	; 0x25
    3a8c:	8d a1       	ldd	r24, Y+37	; 0x25
    3a8e:	9e a1       	ldd	r25, Y+38	; 0x26
    3a90:	9a a7       	std	Y+42, r25	; 0x2a
    3a92:	89 a7       	std	Y+41, r24	; 0x29
    3a94:	89 a5       	ldd	r24, Y+41	; 0x29
    3a96:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	f1 f7       	brne	.-4      	; 0x3a98 <main+0x2ec>
    3a9c:	9a a7       	std	Y+42, r25	; 0x2a
    3a9e:	89 a7       	std	Y+41, r24	; 0x29

		_delay_ms(2000);
	}
    3aa0:	03 cf       	rjmp	.-506    	; 0x38a8 <main+0xfc>

00003aa2 <__subsf3>:
    3aa2:	50 58       	subi	r21, 0x80	; 128

00003aa4 <__addsf3>:
    3aa4:	bb 27       	eor	r27, r27
    3aa6:	aa 27       	eor	r26, r26
    3aa8:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <__addsf3x>
    3aac:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__fp_round>
    3ab0:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <__fp_pscA>
    3ab4:	38 f0       	brcs	.+14     	; 0x3ac4 <__addsf3+0x20>
    3ab6:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <__fp_pscB>
    3aba:	20 f0       	brcs	.+8      	; 0x3ac4 <__addsf3+0x20>
    3abc:	39 f4       	brne	.+14     	; 0x3acc <__addsf3+0x28>
    3abe:	9f 3f       	cpi	r25, 0xFF	; 255
    3ac0:	19 f4       	brne	.+6      	; 0x3ac8 <__addsf3+0x24>
    3ac2:	26 f4       	brtc	.+8      	; 0x3acc <__addsf3+0x28>
    3ac4:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__fp_nan>
    3ac8:	0e f4       	brtc	.+2      	; 0x3acc <__addsf3+0x28>
    3aca:	e0 95       	com	r30
    3acc:	e7 fb       	bst	r30, 7
    3ace:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <__fp_inf>

00003ad2 <__addsf3x>:
    3ad2:	e9 2f       	mov	r30, r25
    3ad4:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__fp_split3>
    3ad8:	58 f3       	brcs	.-42     	; 0x3ab0 <__addsf3+0xc>
    3ada:	ba 17       	cp	r27, r26
    3adc:	62 07       	cpc	r22, r18
    3ade:	73 07       	cpc	r23, r19
    3ae0:	84 07       	cpc	r24, r20
    3ae2:	95 07       	cpc	r25, r21
    3ae4:	20 f0       	brcs	.+8      	; 0x3aee <__addsf3x+0x1c>
    3ae6:	79 f4       	brne	.+30     	; 0x3b06 <__addsf3x+0x34>
    3ae8:	a6 f5       	brtc	.+104    	; 0x3b52 <__addsf3x+0x80>
    3aea:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__fp_zero>
    3aee:	0e f4       	brtc	.+2      	; 0x3af2 <__addsf3x+0x20>
    3af0:	e0 95       	com	r30
    3af2:	0b 2e       	mov	r0, r27
    3af4:	ba 2f       	mov	r27, r26
    3af6:	a0 2d       	mov	r26, r0
    3af8:	0b 01       	movw	r0, r22
    3afa:	b9 01       	movw	r22, r18
    3afc:	90 01       	movw	r18, r0
    3afe:	0c 01       	movw	r0, r24
    3b00:	ca 01       	movw	r24, r20
    3b02:	a0 01       	movw	r20, r0
    3b04:	11 24       	eor	r1, r1
    3b06:	ff 27       	eor	r31, r31
    3b08:	59 1b       	sub	r21, r25
    3b0a:	99 f0       	breq	.+38     	; 0x3b32 <__addsf3x+0x60>
    3b0c:	59 3f       	cpi	r21, 0xF9	; 249
    3b0e:	50 f4       	brcc	.+20     	; 0x3b24 <__addsf3x+0x52>
    3b10:	50 3e       	cpi	r21, 0xE0	; 224
    3b12:	68 f1       	brcs	.+90     	; 0x3b6e <__addsf3x+0x9c>
    3b14:	1a 16       	cp	r1, r26
    3b16:	f0 40       	sbci	r31, 0x00	; 0
    3b18:	a2 2f       	mov	r26, r18
    3b1a:	23 2f       	mov	r18, r19
    3b1c:	34 2f       	mov	r19, r20
    3b1e:	44 27       	eor	r20, r20
    3b20:	58 5f       	subi	r21, 0xF8	; 248
    3b22:	f3 cf       	rjmp	.-26     	; 0x3b0a <__addsf3x+0x38>
    3b24:	46 95       	lsr	r20
    3b26:	37 95       	ror	r19
    3b28:	27 95       	ror	r18
    3b2a:	a7 95       	ror	r26
    3b2c:	f0 40       	sbci	r31, 0x00	; 0
    3b2e:	53 95       	inc	r21
    3b30:	c9 f7       	brne	.-14     	; 0x3b24 <__addsf3x+0x52>
    3b32:	7e f4       	brtc	.+30     	; 0x3b52 <__addsf3x+0x80>
    3b34:	1f 16       	cp	r1, r31
    3b36:	ba 0b       	sbc	r27, r26
    3b38:	62 0b       	sbc	r22, r18
    3b3a:	73 0b       	sbc	r23, r19
    3b3c:	84 0b       	sbc	r24, r20
    3b3e:	ba f0       	brmi	.+46     	; 0x3b6e <__addsf3x+0x9c>
    3b40:	91 50       	subi	r25, 0x01	; 1
    3b42:	a1 f0       	breq	.+40     	; 0x3b6c <__addsf3x+0x9a>
    3b44:	ff 0f       	add	r31, r31
    3b46:	bb 1f       	adc	r27, r27
    3b48:	66 1f       	adc	r22, r22
    3b4a:	77 1f       	adc	r23, r23
    3b4c:	88 1f       	adc	r24, r24
    3b4e:	c2 f7       	brpl	.-16     	; 0x3b40 <__addsf3x+0x6e>
    3b50:	0e c0       	rjmp	.+28     	; 0x3b6e <__addsf3x+0x9c>
    3b52:	ba 0f       	add	r27, r26
    3b54:	62 1f       	adc	r22, r18
    3b56:	73 1f       	adc	r23, r19
    3b58:	84 1f       	adc	r24, r20
    3b5a:	48 f4       	brcc	.+18     	; 0x3b6e <__addsf3x+0x9c>
    3b5c:	87 95       	ror	r24
    3b5e:	77 95       	ror	r23
    3b60:	67 95       	ror	r22
    3b62:	b7 95       	ror	r27
    3b64:	f7 95       	ror	r31
    3b66:	9e 3f       	cpi	r25, 0xFE	; 254
    3b68:	08 f0       	brcs	.+2      	; 0x3b6c <__addsf3x+0x9a>
    3b6a:	b0 cf       	rjmp	.-160    	; 0x3acc <__addsf3+0x28>
    3b6c:	93 95       	inc	r25
    3b6e:	88 0f       	add	r24, r24
    3b70:	08 f0       	brcs	.+2      	; 0x3b74 <__addsf3x+0xa2>
    3b72:	99 27       	eor	r25, r25
    3b74:	ee 0f       	add	r30, r30
    3b76:	97 95       	ror	r25
    3b78:	87 95       	ror	r24
    3b7a:	08 95       	ret

00003b7c <__cmpsf2>:
    3b7c:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__fp_cmp>
    3b80:	08 f4       	brcc	.+2      	; 0x3b84 <__cmpsf2+0x8>
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	08 95       	ret

00003b86 <__divsf3>:
    3b86:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__divsf3x>
    3b8a:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__fp_round>
    3b8e:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <__fp_pscB>
    3b92:	58 f0       	brcs	.+22     	; 0x3baa <__divsf3+0x24>
    3b94:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <__fp_pscA>
    3b98:	40 f0       	brcs	.+16     	; 0x3baa <__divsf3+0x24>
    3b9a:	29 f4       	brne	.+10     	; 0x3ba6 <__divsf3+0x20>
    3b9c:	5f 3f       	cpi	r21, 0xFF	; 255
    3b9e:	29 f0       	breq	.+10     	; 0x3baa <__divsf3+0x24>
    3ba0:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <__fp_inf>
    3ba4:	51 11       	cpse	r21, r1
    3ba6:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__fp_szero>
    3baa:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__fp_nan>

00003bae <__divsf3x>:
    3bae:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__fp_split3>
    3bb2:	68 f3       	brcs	.-38     	; 0x3b8e <__divsf3+0x8>

00003bb4 <__divsf3_pse>:
    3bb4:	99 23       	and	r25, r25
    3bb6:	b1 f3       	breq	.-20     	; 0x3ba4 <__divsf3+0x1e>
    3bb8:	55 23       	and	r21, r21
    3bba:	91 f3       	breq	.-28     	; 0x3ba0 <__divsf3+0x1a>
    3bbc:	95 1b       	sub	r25, r21
    3bbe:	55 0b       	sbc	r21, r21
    3bc0:	bb 27       	eor	r27, r27
    3bc2:	aa 27       	eor	r26, r26
    3bc4:	62 17       	cp	r22, r18
    3bc6:	73 07       	cpc	r23, r19
    3bc8:	84 07       	cpc	r24, r20
    3bca:	38 f0       	brcs	.+14     	; 0x3bda <__divsf3_pse+0x26>
    3bcc:	9f 5f       	subi	r25, 0xFF	; 255
    3bce:	5f 4f       	sbci	r21, 0xFF	; 255
    3bd0:	22 0f       	add	r18, r18
    3bd2:	33 1f       	adc	r19, r19
    3bd4:	44 1f       	adc	r20, r20
    3bd6:	aa 1f       	adc	r26, r26
    3bd8:	a9 f3       	breq	.-22     	; 0x3bc4 <__divsf3_pse+0x10>
    3bda:	35 d0       	rcall	.+106    	; 0x3c46 <__divsf3_pse+0x92>
    3bdc:	0e 2e       	mov	r0, r30
    3bde:	3a f0       	brmi	.+14     	; 0x3bee <__divsf3_pse+0x3a>
    3be0:	e0 e8       	ldi	r30, 0x80	; 128
    3be2:	32 d0       	rcall	.+100    	; 0x3c48 <__divsf3_pse+0x94>
    3be4:	91 50       	subi	r25, 0x01	; 1
    3be6:	50 40       	sbci	r21, 0x00	; 0
    3be8:	e6 95       	lsr	r30
    3bea:	00 1c       	adc	r0, r0
    3bec:	ca f7       	brpl	.-14     	; 0x3be0 <__divsf3_pse+0x2c>
    3bee:	2b d0       	rcall	.+86     	; 0x3c46 <__divsf3_pse+0x92>
    3bf0:	fe 2f       	mov	r31, r30
    3bf2:	29 d0       	rcall	.+82     	; 0x3c46 <__divsf3_pse+0x92>
    3bf4:	66 0f       	add	r22, r22
    3bf6:	77 1f       	adc	r23, r23
    3bf8:	88 1f       	adc	r24, r24
    3bfa:	bb 1f       	adc	r27, r27
    3bfc:	26 17       	cp	r18, r22
    3bfe:	37 07       	cpc	r19, r23
    3c00:	48 07       	cpc	r20, r24
    3c02:	ab 07       	cpc	r26, r27
    3c04:	b0 e8       	ldi	r27, 0x80	; 128
    3c06:	09 f0       	breq	.+2      	; 0x3c0a <__divsf3_pse+0x56>
    3c08:	bb 0b       	sbc	r27, r27
    3c0a:	80 2d       	mov	r24, r0
    3c0c:	bf 01       	movw	r22, r30
    3c0e:	ff 27       	eor	r31, r31
    3c10:	93 58       	subi	r25, 0x83	; 131
    3c12:	5f 4f       	sbci	r21, 0xFF	; 255
    3c14:	3a f0       	brmi	.+14     	; 0x3c24 <__divsf3_pse+0x70>
    3c16:	9e 3f       	cpi	r25, 0xFE	; 254
    3c18:	51 05       	cpc	r21, r1
    3c1a:	78 f0       	brcs	.+30     	; 0x3c3a <__divsf3_pse+0x86>
    3c1c:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <__fp_inf>
    3c20:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__fp_szero>
    3c24:	5f 3f       	cpi	r21, 0xFF	; 255
    3c26:	e4 f3       	brlt	.-8      	; 0x3c20 <__divsf3_pse+0x6c>
    3c28:	98 3e       	cpi	r25, 0xE8	; 232
    3c2a:	d4 f3       	brlt	.-12     	; 0x3c20 <__divsf3_pse+0x6c>
    3c2c:	86 95       	lsr	r24
    3c2e:	77 95       	ror	r23
    3c30:	67 95       	ror	r22
    3c32:	b7 95       	ror	r27
    3c34:	f7 95       	ror	r31
    3c36:	9f 5f       	subi	r25, 0xFF	; 255
    3c38:	c9 f7       	brne	.-14     	; 0x3c2c <__divsf3_pse+0x78>
    3c3a:	88 0f       	add	r24, r24
    3c3c:	91 1d       	adc	r25, r1
    3c3e:	96 95       	lsr	r25
    3c40:	87 95       	ror	r24
    3c42:	97 f9       	bld	r25, 7
    3c44:	08 95       	ret
    3c46:	e1 e0       	ldi	r30, 0x01	; 1
    3c48:	66 0f       	add	r22, r22
    3c4a:	77 1f       	adc	r23, r23
    3c4c:	88 1f       	adc	r24, r24
    3c4e:	bb 1f       	adc	r27, r27
    3c50:	62 17       	cp	r22, r18
    3c52:	73 07       	cpc	r23, r19
    3c54:	84 07       	cpc	r24, r20
    3c56:	ba 07       	cpc	r27, r26
    3c58:	20 f0       	brcs	.+8      	; 0x3c62 <__divsf3_pse+0xae>
    3c5a:	62 1b       	sub	r22, r18
    3c5c:	73 0b       	sbc	r23, r19
    3c5e:	84 0b       	sbc	r24, r20
    3c60:	ba 0b       	sbc	r27, r26
    3c62:	ee 1f       	adc	r30, r30
    3c64:	88 f7       	brcc	.-30     	; 0x3c48 <__divsf3_pse+0x94>
    3c66:	e0 95       	com	r30
    3c68:	08 95       	ret

00003c6a <__fixunssfsi>:
    3c6a:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <__fp_splitA>
    3c6e:	88 f0       	brcs	.+34     	; 0x3c92 <__fixunssfsi+0x28>
    3c70:	9f 57       	subi	r25, 0x7F	; 127
    3c72:	98 f0       	brcs	.+38     	; 0x3c9a <__fixunssfsi+0x30>
    3c74:	b9 2f       	mov	r27, r25
    3c76:	99 27       	eor	r25, r25
    3c78:	b7 51       	subi	r27, 0x17	; 23
    3c7a:	b0 f0       	brcs	.+44     	; 0x3ca8 <__fixunssfsi+0x3e>
    3c7c:	e1 f0       	breq	.+56     	; 0x3cb6 <__fixunssfsi+0x4c>
    3c7e:	66 0f       	add	r22, r22
    3c80:	77 1f       	adc	r23, r23
    3c82:	88 1f       	adc	r24, r24
    3c84:	99 1f       	adc	r25, r25
    3c86:	1a f0       	brmi	.+6      	; 0x3c8e <__fixunssfsi+0x24>
    3c88:	ba 95       	dec	r27
    3c8a:	c9 f7       	brne	.-14     	; 0x3c7e <__fixunssfsi+0x14>
    3c8c:	14 c0       	rjmp	.+40     	; 0x3cb6 <__fixunssfsi+0x4c>
    3c8e:	b1 30       	cpi	r27, 0x01	; 1
    3c90:	91 f0       	breq	.+36     	; 0x3cb6 <__fixunssfsi+0x4c>
    3c92:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <__fp_zero>
    3c96:	b1 e0       	ldi	r27, 0x01	; 1
    3c98:	08 95       	ret
    3c9a:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__fp_zero>
    3c9e:	67 2f       	mov	r22, r23
    3ca0:	78 2f       	mov	r23, r24
    3ca2:	88 27       	eor	r24, r24
    3ca4:	b8 5f       	subi	r27, 0xF8	; 248
    3ca6:	39 f0       	breq	.+14     	; 0x3cb6 <__fixunssfsi+0x4c>
    3ca8:	b9 3f       	cpi	r27, 0xF9	; 249
    3caa:	cc f3       	brlt	.-14     	; 0x3c9e <__fixunssfsi+0x34>
    3cac:	86 95       	lsr	r24
    3cae:	77 95       	ror	r23
    3cb0:	67 95       	ror	r22
    3cb2:	b3 95       	inc	r27
    3cb4:	d9 f7       	brne	.-10     	; 0x3cac <__fixunssfsi+0x42>
    3cb6:	3e f4       	brtc	.+14     	; 0x3cc6 <__fixunssfsi+0x5c>
    3cb8:	90 95       	com	r25
    3cba:	80 95       	com	r24
    3cbc:	70 95       	com	r23
    3cbe:	61 95       	neg	r22
    3cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc2:	8f 4f       	sbci	r24, 0xFF	; 255
    3cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc6:	08 95       	ret

00003cc8 <__floatunsisf>:
    3cc8:	e8 94       	clt
    3cca:	09 c0       	rjmp	.+18     	; 0x3cde <__floatsisf+0x12>

00003ccc <__floatsisf>:
    3ccc:	97 fb       	bst	r25, 7
    3cce:	3e f4       	brtc	.+14     	; 0x3cde <__floatsisf+0x12>
    3cd0:	90 95       	com	r25
    3cd2:	80 95       	com	r24
    3cd4:	70 95       	com	r23
    3cd6:	61 95       	neg	r22
    3cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cda:	8f 4f       	sbci	r24, 0xFF	; 255
    3cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    3cde:	99 23       	and	r25, r25
    3ce0:	a9 f0       	breq	.+42     	; 0x3d0c <__floatsisf+0x40>
    3ce2:	f9 2f       	mov	r31, r25
    3ce4:	96 e9       	ldi	r25, 0x96	; 150
    3ce6:	bb 27       	eor	r27, r27
    3ce8:	93 95       	inc	r25
    3cea:	f6 95       	lsr	r31
    3cec:	87 95       	ror	r24
    3cee:	77 95       	ror	r23
    3cf0:	67 95       	ror	r22
    3cf2:	b7 95       	ror	r27
    3cf4:	f1 11       	cpse	r31, r1
    3cf6:	f8 cf       	rjmp	.-16     	; 0x3ce8 <__floatsisf+0x1c>
    3cf8:	fa f4       	brpl	.+62     	; 0x3d38 <__floatsisf+0x6c>
    3cfa:	bb 0f       	add	r27, r27
    3cfc:	11 f4       	brne	.+4      	; 0x3d02 <__floatsisf+0x36>
    3cfe:	60 ff       	sbrs	r22, 0
    3d00:	1b c0       	rjmp	.+54     	; 0x3d38 <__floatsisf+0x6c>
    3d02:	6f 5f       	subi	r22, 0xFF	; 255
    3d04:	7f 4f       	sbci	r23, 0xFF	; 255
    3d06:	8f 4f       	sbci	r24, 0xFF	; 255
    3d08:	9f 4f       	sbci	r25, 0xFF	; 255
    3d0a:	16 c0       	rjmp	.+44     	; 0x3d38 <__floatsisf+0x6c>
    3d0c:	88 23       	and	r24, r24
    3d0e:	11 f0       	breq	.+4      	; 0x3d14 <__floatsisf+0x48>
    3d10:	96 e9       	ldi	r25, 0x96	; 150
    3d12:	11 c0       	rjmp	.+34     	; 0x3d36 <__floatsisf+0x6a>
    3d14:	77 23       	and	r23, r23
    3d16:	21 f0       	breq	.+8      	; 0x3d20 <__floatsisf+0x54>
    3d18:	9e e8       	ldi	r25, 0x8E	; 142
    3d1a:	87 2f       	mov	r24, r23
    3d1c:	76 2f       	mov	r23, r22
    3d1e:	05 c0       	rjmp	.+10     	; 0x3d2a <__floatsisf+0x5e>
    3d20:	66 23       	and	r22, r22
    3d22:	71 f0       	breq	.+28     	; 0x3d40 <__floatsisf+0x74>
    3d24:	96 e8       	ldi	r25, 0x86	; 134
    3d26:	86 2f       	mov	r24, r22
    3d28:	70 e0       	ldi	r23, 0x00	; 0
    3d2a:	60 e0       	ldi	r22, 0x00	; 0
    3d2c:	2a f0       	brmi	.+10     	; 0x3d38 <__floatsisf+0x6c>
    3d2e:	9a 95       	dec	r25
    3d30:	66 0f       	add	r22, r22
    3d32:	77 1f       	adc	r23, r23
    3d34:	88 1f       	adc	r24, r24
    3d36:	da f7       	brpl	.-10     	; 0x3d2e <__floatsisf+0x62>
    3d38:	88 0f       	add	r24, r24
    3d3a:	96 95       	lsr	r25
    3d3c:	87 95       	ror	r24
    3d3e:	97 f9       	bld	r25, 7
    3d40:	08 95       	ret

00003d42 <__fp_cmp>:
    3d42:	99 0f       	add	r25, r25
    3d44:	00 08       	sbc	r0, r0
    3d46:	55 0f       	add	r21, r21
    3d48:	aa 0b       	sbc	r26, r26
    3d4a:	e0 e8       	ldi	r30, 0x80	; 128
    3d4c:	fe ef       	ldi	r31, 0xFE	; 254
    3d4e:	16 16       	cp	r1, r22
    3d50:	17 06       	cpc	r1, r23
    3d52:	e8 07       	cpc	r30, r24
    3d54:	f9 07       	cpc	r31, r25
    3d56:	c0 f0       	brcs	.+48     	; 0x3d88 <__fp_cmp+0x46>
    3d58:	12 16       	cp	r1, r18
    3d5a:	13 06       	cpc	r1, r19
    3d5c:	e4 07       	cpc	r30, r20
    3d5e:	f5 07       	cpc	r31, r21
    3d60:	98 f0       	brcs	.+38     	; 0x3d88 <__fp_cmp+0x46>
    3d62:	62 1b       	sub	r22, r18
    3d64:	73 0b       	sbc	r23, r19
    3d66:	84 0b       	sbc	r24, r20
    3d68:	95 0b       	sbc	r25, r21
    3d6a:	39 f4       	brne	.+14     	; 0x3d7a <__fp_cmp+0x38>
    3d6c:	0a 26       	eor	r0, r26
    3d6e:	61 f0       	breq	.+24     	; 0x3d88 <__fp_cmp+0x46>
    3d70:	23 2b       	or	r18, r19
    3d72:	24 2b       	or	r18, r20
    3d74:	25 2b       	or	r18, r21
    3d76:	21 f4       	brne	.+8      	; 0x3d80 <__fp_cmp+0x3e>
    3d78:	08 95       	ret
    3d7a:	0a 26       	eor	r0, r26
    3d7c:	09 f4       	brne	.+2      	; 0x3d80 <__fp_cmp+0x3e>
    3d7e:	a1 40       	sbci	r26, 0x01	; 1
    3d80:	a6 95       	lsr	r26
    3d82:	8f ef       	ldi	r24, 0xFF	; 255
    3d84:	81 1d       	adc	r24, r1
    3d86:	81 1d       	adc	r24, r1
    3d88:	08 95       	ret

00003d8a <__fp_inf>:
    3d8a:	97 f9       	bld	r25, 7
    3d8c:	9f 67       	ori	r25, 0x7F	; 127
    3d8e:	80 e8       	ldi	r24, 0x80	; 128
    3d90:	70 e0       	ldi	r23, 0x00	; 0
    3d92:	60 e0       	ldi	r22, 0x00	; 0
    3d94:	08 95       	ret

00003d96 <__fp_nan>:
    3d96:	9f ef       	ldi	r25, 0xFF	; 255
    3d98:	80 ec       	ldi	r24, 0xC0	; 192
    3d9a:	08 95       	ret

00003d9c <__fp_pscA>:
    3d9c:	00 24       	eor	r0, r0
    3d9e:	0a 94       	dec	r0
    3da0:	16 16       	cp	r1, r22
    3da2:	17 06       	cpc	r1, r23
    3da4:	18 06       	cpc	r1, r24
    3da6:	09 06       	cpc	r0, r25
    3da8:	08 95       	ret

00003daa <__fp_pscB>:
    3daa:	00 24       	eor	r0, r0
    3dac:	0a 94       	dec	r0
    3dae:	12 16       	cp	r1, r18
    3db0:	13 06       	cpc	r1, r19
    3db2:	14 06       	cpc	r1, r20
    3db4:	05 06       	cpc	r0, r21
    3db6:	08 95       	ret

00003db8 <__fp_round>:
    3db8:	09 2e       	mov	r0, r25
    3dba:	03 94       	inc	r0
    3dbc:	00 0c       	add	r0, r0
    3dbe:	11 f4       	brne	.+4      	; 0x3dc4 <__fp_round+0xc>
    3dc0:	88 23       	and	r24, r24
    3dc2:	52 f0       	brmi	.+20     	; 0x3dd8 <__fp_round+0x20>
    3dc4:	bb 0f       	add	r27, r27
    3dc6:	40 f4       	brcc	.+16     	; 0x3dd8 <__fp_round+0x20>
    3dc8:	bf 2b       	or	r27, r31
    3dca:	11 f4       	brne	.+4      	; 0x3dd0 <__fp_round+0x18>
    3dcc:	60 ff       	sbrs	r22, 0
    3dce:	04 c0       	rjmp	.+8      	; 0x3dd8 <__fp_round+0x20>
    3dd0:	6f 5f       	subi	r22, 0xFF	; 255
    3dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd4:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd8:	08 95       	ret

00003dda <__fp_split3>:
    3dda:	57 fd       	sbrc	r21, 7
    3ddc:	90 58       	subi	r25, 0x80	; 128
    3dde:	44 0f       	add	r20, r20
    3de0:	55 1f       	adc	r21, r21
    3de2:	59 f0       	breq	.+22     	; 0x3dfa <__fp_splitA+0x10>
    3de4:	5f 3f       	cpi	r21, 0xFF	; 255
    3de6:	71 f0       	breq	.+28     	; 0x3e04 <__fp_splitA+0x1a>
    3de8:	47 95       	ror	r20

00003dea <__fp_splitA>:
    3dea:	88 0f       	add	r24, r24
    3dec:	97 fb       	bst	r25, 7
    3dee:	99 1f       	adc	r25, r25
    3df0:	61 f0       	breq	.+24     	; 0x3e0a <__fp_splitA+0x20>
    3df2:	9f 3f       	cpi	r25, 0xFF	; 255
    3df4:	79 f0       	breq	.+30     	; 0x3e14 <__fp_splitA+0x2a>
    3df6:	87 95       	ror	r24
    3df8:	08 95       	ret
    3dfa:	12 16       	cp	r1, r18
    3dfc:	13 06       	cpc	r1, r19
    3dfe:	14 06       	cpc	r1, r20
    3e00:	55 1f       	adc	r21, r21
    3e02:	f2 cf       	rjmp	.-28     	; 0x3de8 <__fp_split3+0xe>
    3e04:	46 95       	lsr	r20
    3e06:	f1 df       	rcall	.-30     	; 0x3dea <__fp_splitA>
    3e08:	08 c0       	rjmp	.+16     	; 0x3e1a <__fp_splitA+0x30>
    3e0a:	16 16       	cp	r1, r22
    3e0c:	17 06       	cpc	r1, r23
    3e0e:	18 06       	cpc	r1, r24
    3e10:	99 1f       	adc	r25, r25
    3e12:	f1 cf       	rjmp	.-30     	; 0x3df6 <__fp_splitA+0xc>
    3e14:	86 95       	lsr	r24
    3e16:	71 05       	cpc	r23, r1
    3e18:	61 05       	cpc	r22, r1
    3e1a:	08 94       	sec
    3e1c:	08 95       	ret

00003e1e <__fp_zero>:
    3e1e:	e8 94       	clt

00003e20 <__fp_szero>:
    3e20:	bb 27       	eor	r27, r27
    3e22:	66 27       	eor	r22, r22
    3e24:	77 27       	eor	r23, r23
    3e26:	cb 01       	movw	r24, r22
    3e28:	97 f9       	bld	r25, 7
    3e2a:	08 95       	ret

00003e2c <__gesf2>:
    3e2c:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__fp_cmp>
    3e30:	08 f4       	brcc	.+2      	; 0x3e34 <__gesf2+0x8>
    3e32:	8f ef       	ldi	r24, 0xFF	; 255
    3e34:	08 95       	ret

00003e36 <__mulsf3>:
    3e36:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__mulsf3x>
    3e3a:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__fp_round>
    3e3e:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <__fp_pscA>
    3e42:	38 f0       	brcs	.+14     	; 0x3e52 <__mulsf3+0x1c>
    3e44:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <__fp_pscB>
    3e48:	20 f0       	brcs	.+8      	; 0x3e52 <__mulsf3+0x1c>
    3e4a:	95 23       	and	r25, r21
    3e4c:	11 f0       	breq	.+4      	; 0x3e52 <__mulsf3+0x1c>
    3e4e:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <__fp_inf>
    3e52:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <__fp_nan>
    3e56:	11 24       	eor	r1, r1
    3e58:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__fp_szero>

00003e5c <__mulsf3x>:
    3e5c:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__fp_split3>
    3e60:	70 f3       	brcs	.-36     	; 0x3e3e <__mulsf3+0x8>

00003e62 <__mulsf3_pse>:
    3e62:	95 9f       	mul	r25, r21
    3e64:	c1 f3       	breq	.-16     	; 0x3e56 <__mulsf3+0x20>
    3e66:	95 0f       	add	r25, r21
    3e68:	50 e0       	ldi	r21, 0x00	; 0
    3e6a:	55 1f       	adc	r21, r21
    3e6c:	62 9f       	mul	r22, r18
    3e6e:	f0 01       	movw	r30, r0
    3e70:	72 9f       	mul	r23, r18
    3e72:	bb 27       	eor	r27, r27
    3e74:	f0 0d       	add	r31, r0
    3e76:	b1 1d       	adc	r27, r1
    3e78:	63 9f       	mul	r22, r19
    3e7a:	aa 27       	eor	r26, r26
    3e7c:	f0 0d       	add	r31, r0
    3e7e:	b1 1d       	adc	r27, r1
    3e80:	aa 1f       	adc	r26, r26
    3e82:	64 9f       	mul	r22, r20
    3e84:	66 27       	eor	r22, r22
    3e86:	b0 0d       	add	r27, r0
    3e88:	a1 1d       	adc	r26, r1
    3e8a:	66 1f       	adc	r22, r22
    3e8c:	82 9f       	mul	r24, r18
    3e8e:	22 27       	eor	r18, r18
    3e90:	b0 0d       	add	r27, r0
    3e92:	a1 1d       	adc	r26, r1
    3e94:	62 1f       	adc	r22, r18
    3e96:	73 9f       	mul	r23, r19
    3e98:	b0 0d       	add	r27, r0
    3e9a:	a1 1d       	adc	r26, r1
    3e9c:	62 1f       	adc	r22, r18
    3e9e:	83 9f       	mul	r24, r19
    3ea0:	a0 0d       	add	r26, r0
    3ea2:	61 1d       	adc	r22, r1
    3ea4:	22 1f       	adc	r18, r18
    3ea6:	74 9f       	mul	r23, r20
    3ea8:	33 27       	eor	r19, r19
    3eaa:	a0 0d       	add	r26, r0
    3eac:	61 1d       	adc	r22, r1
    3eae:	23 1f       	adc	r18, r19
    3eb0:	84 9f       	mul	r24, r20
    3eb2:	60 0d       	add	r22, r0
    3eb4:	21 1d       	adc	r18, r1
    3eb6:	82 2f       	mov	r24, r18
    3eb8:	76 2f       	mov	r23, r22
    3eba:	6a 2f       	mov	r22, r26
    3ebc:	11 24       	eor	r1, r1
    3ebe:	9f 57       	subi	r25, 0x7F	; 127
    3ec0:	50 40       	sbci	r21, 0x00	; 0
    3ec2:	9a f0       	brmi	.+38     	; 0x3eea <__mulsf3_pse+0x88>
    3ec4:	f1 f0       	breq	.+60     	; 0x3f02 <__mulsf3_pse+0xa0>
    3ec6:	88 23       	and	r24, r24
    3ec8:	4a f0       	brmi	.+18     	; 0x3edc <__mulsf3_pse+0x7a>
    3eca:	ee 0f       	add	r30, r30
    3ecc:	ff 1f       	adc	r31, r31
    3ece:	bb 1f       	adc	r27, r27
    3ed0:	66 1f       	adc	r22, r22
    3ed2:	77 1f       	adc	r23, r23
    3ed4:	88 1f       	adc	r24, r24
    3ed6:	91 50       	subi	r25, 0x01	; 1
    3ed8:	50 40       	sbci	r21, 0x00	; 0
    3eda:	a9 f7       	brne	.-22     	; 0x3ec6 <__mulsf3_pse+0x64>
    3edc:	9e 3f       	cpi	r25, 0xFE	; 254
    3ede:	51 05       	cpc	r21, r1
    3ee0:	80 f0       	brcs	.+32     	; 0x3f02 <__mulsf3_pse+0xa0>
    3ee2:	0c 94 c5 1e 	jmp	0x3d8a	; 0x3d8a <__fp_inf>
    3ee6:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__fp_szero>
    3eea:	5f 3f       	cpi	r21, 0xFF	; 255
    3eec:	e4 f3       	brlt	.-8      	; 0x3ee6 <__mulsf3_pse+0x84>
    3eee:	98 3e       	cpi	r25, 0xE8	; 232
    3ef0:	d4 f3       	brlt	.-12     	; 0x3ee6 <__mulsf3_pse+0x84>
    3ef2:	86 95       	lsr	r24
    3ef4:	77 95       	ror	r23
    3ef6:	67 95       	ror	r22
    3ef8:	b7 95       	ror	r27
    3efa:	f7 95       	ror	r31
    3efc:	e7 95       	ror	r30
    3efe:	9f 5f       	subi	r25, 0xFF	; 255
    3f00:	c1 f7       	brne	.-16     	; 0x3ef2 <__mulsf3_pse+0x90>
    3f02:	fe 2b       	or	r31, r30
    3f04:	88 0f       	add	r24, r24
    3f06:	91 1d       	adc	r25, r1
    3f08:	96 95       	lsr	r25
    3f0a:	87 95       	ror	r24
    3f0c:	97 f9       	bld	r25, 7
    3f0e:	08 95       	ret

00003f10 <calloc>:
    3f10:	0f 93       	push	r16
    3f12:	1f 93       	push	r17
    3f14:	cf 93       	push	r28
    3f16:	df 93       	push	r29
    3f18:	86 9f       	mul	r24, r22
    3f1a:	80 01       	movw	r16, r0
    3f1c:	87 9f       	mul	r24, r23
    3f1e:	10 0d       	add	r17, r0
    3f20:	96 9f       	mul	r25, r22
    3f22:	10 0d       	add	r17, r0
    3f24:	11 24       	eor	r1, r1
    3f26:	c8 01       	movw	r24, r16
    3f28:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <malloc>
    3f2c:	ec 01       	movw	r28, r24
    3f2e:	00 97       	sbiw	r24, 0x00	; 0
    3f30:	29 f0       	breq	.+10     	; 0x3f3c <calloc+0x2c>
    3f32:	a8 01       	movw	r20, r16
    3f34:	60 e0       	ldi	r22, 0x00	; 0
    3f36:	70 e0       	ldi	r23, 0x00	; 0
    3f38:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <memset>
    3f3c:	ce 01       	movw	r24, r28
    3f3e:	df 91       	pop	r29
    3f40:	cf 91       	pop	r28
    3f42:	1f 91       	pop	r17
    3f44:	0f 91       	pop	r16
    3f46:	08 95       	ret

00003f48 <malloc>:
    3f48:	cf 93       	push	r28
    3f4a:	df 93       	push	r29
    3f4c:	82 30       	cpi	r24, 0x02	; 2
    3f4e:	91 05       	cpc	r25, r1
    3f50:	10 f4       	brcc	.+4      	; 0x3f56 <malloc+0xe>
    3f52:	82 e0       	ldi	r24, 0x02	; 2
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	e0 91 80 02 	lds	r30, 0x0280
    3f5a:	f0 91 81 02 	lds	r31, 0x0281
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	c0 e0       	ldi	r28, 0x00	; 0
    3f64:	d0 e0       	ldi	r29, 0x00	; 0
    3f66:	30 97       	sbiw	r30, 0x00	; 0
    3f68:	11 f1       	breq	.+68     	; 0x3fae <malloc+0x66>
    3f6a:	40 81       	ld	r20, Z
    3f6c:	51 81       	ldd	r21, Z+1	; 0x01
    3f6e:	48 17       	cp	r20, r24
    3f70:	59 07       	cpc	r21, r25
    3f72:	c0 f0       	brcs	.+48     	; 0x3fa4 <malloc+0x5c>
    3f74:	48 17       	cp	r20, r24
    3f76:	59 07       	cpc	r21, r25
    3f78:	61 f4       	brne	.+24     	; 0x3f92 <malloc+0x4a>
    3f7a:	82 81       	ldd	r24, Z+2	; 0x02
    3f7c:	93 81       	ldd	r25, Z+3	; 0x03
    3f7e:	20 97       	sbiw	r28, 0x00	; 0
    3f80:	19 f0       	breq	.+6      	; 0x3f88 <malloc+0x40>
    3f82:	9b 83       	std	Y+3, r25	; 0x03
    3f84:	8a 83       	std	Y+2, r24	; 0x02
    3f86:	2b c0       	rjmp	.+86     	; 0x3fde <malloc+0x96>
    3f88:	90 93 81 02 	sts	0x0281, r25
    3f8c:	80 93 80 02 	sts	0x0280, r24
    3f90:	26 c0       	rjmp	.+76     	; 0x3fde <malloc+0x96>
    3f92:	21 15       	cp	r18, r1
    3f94:	31 05       	cpc	r19, r1
    3f96:	19 f0       	breq	.+6      	; 0x3f9e <malloc+0x56>
    3f98:	42 17       	cp	r20, r18
    3f9a:	53 07       	cpc	r21, r19
    3f9c:	18 f4       	brcc	.+6      	; 0x3fa4 <malloc+0x5c>
    3f9e:	9a 01       	movw	r18, r20
    3fa0:	be 01       	movw	r22, r28
    3fa2:	df 01       	movw	r26, r30
    3fa4:	ef 01       	movw	r28, r30
    3fa6:	02 80       	ldd	r0, Z+2	; 0x02
    3fa8:	f3 81       	ldd	r31, Z+3	; 0x03
    3faa:	e0 2d       	mov	r30, r0
    3fac:	dc cf       	rjmp	.-72     	; 0x3f66 <malloc+0x1e>
    3fae:	21 15       	cp	r18, r1
    3fb0:	31 05       	cpc	r19, r1
    3fb2:	09 f1       	breq	.+66     	; 0x3ff6 <malloc+0xae>
    3fb4:	28 1b       	sub	r18, r24
    3fb6:	39 0b       	sbc	r19, r25
    3fb8:	24 30       	cpi	r18, 0x04	; 4
    3fba:	31 05       	cpc	r19, r1
    3fbc:	90 f4       	brcc	.+36     	; 0x3fe2 <malloc+0x9a>
    3fbe:	12 96       	adiw	r26, 0x02	; 2
    3fc0:	8d 91       	ld	r24, X+
    3fc2:	9c 91       	ld	r25, X
    3fc4:	13 97       	sbiw	r26, 0x03	; 3
    3fc6:	61 15       	cp	r22, r1
    3fc8:	71 05       	cpc	r23, r1
    3fca:	21 f0       	breq	.+8      	; 0x3fd4 <malloc+0x8c>
    3fcc:	fb 01       	movw	r30, r22
    3fce:	93 83       	std	Z+3, r25	; 0x03
    3fd0:	82 83       	std	Z+2, r24	; 0x02
    3fd2:	04 c0       	rjmp	.+8      	; 0x3fdc <malloc+0x94>
    3fd4:	90 93 81 02 	sts	0x0281, r25
    3fd8:	80 93 80 02 	sts	0x0280, r24
    3fdc:	fd 01       	movw	r30, r26
    3fde:	32 96       	adiw	r30, 0x02	; 2
    3fe0:	44 c0       	rjmp	.+136    	; 0x406a <malloc+0x122>
    3fe2:	fd 01       	movw	r30, r26
    3fe4:	e2 0f       	add	r30, r18
    3fe6:	f3 1f       	adc	r31, r19
    3fe8:	81 93       	st	Z+, r24
    3fea:	91 93       	st	Z+, r25
    3fec:	22 50       	subi	r18, 0x02	; 2
    3fee:	31 09       	sbc	r19, r1
    3ff0:	2d 93       	st	X+, r18
    3ff2:	3c 93       	st	X, r19
    3ff4:	3a c0       	rjmp	.+116    	; 0x406a <malloc+0x122>
    3ff6:	20 91 7e 02 	lds	r18, 0x027E
    3ffa:	30 91 7f 02 	lds	r19, 0x027F
    3ffe:	23 2b       	or	r18, r19
    4000:	41 f4       	brne	.+16     	; 0x4012 <malloc+0xca>
    4002:	20 91 02 01 	lds	r18, 0x0102
    4006:	30 91 03 01 	lds	r19, 0x0103
    400a:	30 93 7f 02 	sts	0x027F, r19
    400e:	20 93 7e 02 	sts	0x027E, r18
    4012:	20 91 00 01 	lds	r18, 0x0100
    4016:	30 91 01 01 	lds	r19, 0x0101
    401a:	21 15       	cp	r18, r1
    401c:	31 05       	cpc	r19, r1
    401e:	41 f4       	brne	.+16     	; 0x4030 <malloc+0xe8>
    4020:	2d b7       	in	r18, 0x3d	; 61
    4022:	3e b7       	in	r19, 0x3e	; 62
    4024:	40 91 04 01 	lds	r20, 0x0104
    4028:	50 91 05 01 	lds	r21, 0x0105
    402c:	24 1b       	sub	r18, r20
    402e:	35 0b       	sbc	r19, r21
    4030:	e0 91 7e 02 	lds	r30, 0x027E
    4034:	f0 91 7f 02 	lds	r31, 0x027F
    4038:	e2 17       	cp	r30, r18
    403a:	f3 07       	cpc	r31, r19
    403c:	a0 f4       	brcc	.+40     	; 0x4066 <malloc+0x11e>
    403e:	2e 1b       	sub	r18, r30
    4040:	3f 0b       	sbc	r19, r31
    4042:	28 17       	cp	r18, r24
    4044:	39 07       	cpc	r19, r25
    4046:	78 f0       	brcs	.+30     	; 0x4066 <malloc+0x11e>
    4048:	ac 01       	movw	r20, r24
    404a:	4e 5f       	subi	r20, 0xFE	; 254
    404c:	5f 4f       	sbci	r21, 0xFF	; 255
    404e:	24 17       	cp	r18, r20
    4050:	35 07       	cpc	r19, r21
    4052:	48 f0       	brcs	.+18     	; 0x4066 <malloc+0x11e>
    4054:	4e 0f       	add	r20, r30
    4056:	5f 1f       	adc	r21, r31
    4058:	50 93 7f 02 	sts	0x027F, r21
    405c:	40 93 7e 02 	sts	0x027E, r20
    4060:	81 93       	st	Z+, r24
    4062:	91 93       	st	Z+, r25
    4064:	02 c0       	rjmp	.+4      	; 0x406a <malloc+0x122>
    4066:	e0 e0       	ldi	r30, 0x00	; 0
    4068:	f0 e0       	ldi	r31, 0x00	; 0
    406a:	cf 01       	movw	r24, r30
    406c:	df 91       	pop	r29
    406e:	cf 91       	pop	r28
    4070:	08 95       	ret

00004072 <free>:
    4072:	0f 93       	push	r16
    4074:	1f 93       	push	r17
    4076:	cf 93       	push	r28
    4078:	df 93       	push	r29
    407a:	00 97       	sbiw	r24, 0x00	; 0
    407c:	09 f4       	brne	.+2      	; 0x4080 <free+0xe>
    407e:	8c c0       	rjmp	.+280    	; 0x4198 <free+0x126>
    4080:	fc 01       	movw	r30, r24
    4082:	32 97       	sbiw	r30, 0x02	; 2
    4084:	13 82       	std	Z+3, r1	; 0x03
    4086:	12 82       	std	Z+2, r1	; 0x02
    4088:	00 91 80 02 	lds	r16, 0x0280
    408c:	10 91 81 02 	lds	r17, 0x0281
    4090:	01 15       	cp	r16, r1
    4092:	11 05       	cpc	r17, r1
    4094:	81 f4       	brne	.+32     	; 0x40b6 <free+0x44>
    4096:	20 81       	ld	r18, Z
    4098:	31 81       	ldd	r19, Z+1	; 0x01
    409a:	82 0f       	add	r24, r18
    409c:	93 1f       	adc	r25, r19
    409e:	20 91 7e 02 	lds	r18, 0x027E
    40a2:	30 91 7f 02 	lds	r19, 0x027F
    40a6:	28 17       	cp	r18, r24
    40a8:	39 07       	cpc	r19, r25
    40aa:	79 f5       	brne	.+94     	; 0x410a <free+0x98>
    40ac:	f0 93 7f 02 	sts	0x027F, r31
    40b0:	e0 93 7e 02 	sts	0x027E, r30
    40b4:	71 c0       	rjmp	.+226    	; 0x4198 <free+0x126>
    40b6:	d8 01       	movw	r26, r16
    40b8:	40 e0       	ldi	r20, 0x00	; 0
    40ba:	50 e0       	ldi	r21, 0x00	; 0
    40bc:	ae 17       	cp	r26, r30
    40be:	bf 07       	cpc	r27, r31
    40c0:	50 f4       	brcc	.+20     	; 0x40d6 <free+0x64>
    40c2:	12 96       	adiw	r26, 0x02	; 2
    40c4:	2d 91       	ld	r18, X+
    40c6:	3c 91       	ld	r19, X
    40c8:	13 97       	sbiw	r26, 0x03	; 3
    40ca:	ad 01       	movw	r20, r26
    40cc:	21 15       	cp	r18, r1
    40ce:	31 05       	cpc	r19, r1
    40d0:	09 f1       	breq	.+66     	; 0x4114 <free+0xa2>
    40d2:	d9 01       	movw	r26, r18
    40d4:	f3 cf       	rjmp	.-26     	; 0x40bc <free+0x4a>
    40d6:	9d 01       	movw	r18, r26
    40d8:	da 01       	movw	r26, r20
    40da:	33 83       	std	Z+3, r19	; 0x03
    40dc:	22 83       	std	Z+2, r18	; 0x02
    40de:	60 81       	ld	r22, Z
    40e0:	71 81       	ldd	r23, Z+1	; 0x01
    40e2:	86 0f       	add	r24, r22
    40e4:	97 1f       	adc	r25, r23
    40e6:	82 17       	cp	r24, r18
    40e8:	93 07       	cpc	r25, r19
    40ea:	69 f4       	brne	.+26     	; 0x4106 <free+0x94>
    40ec:	ec 01       	movw	r28, r24
    40ee:	28 81       	ld	r18, Y
    40f0:	39 81       	ldd	r19, Y+1	; 0x01
    40f2:	26 0f       	add	r18, r22
    40f4:	37 1f       	adc	r19, r23
    40f6:	2e 5f       	subi	r18, 0xFE	; 254
    40f8:	3f 4f       	sbci	r19, 0xFF	; 255
    40fa:	31 83       	std	Z+1, r19	; 0x01
    40fc:	20 83       	st	Z, r18
    40fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4100:	9b 81       	ldd	r25, Y+3	; 0x03
    4102:	93 83       	std	Z+3, r25	; 0x03
    4104:	82 83       	std	Z+2, r24	; 0x02
    4106:	45 2b       	or	r20, r21
    4108:	29 f4       	brne	.+10     	; 0x4114 <free+0xa2>
    410a:	f0 93 81 02 	sts	0x0281, r31
    410e:	e0 93 80 02 	sts	0x0280, r30
    4112:	42 c0       	rjmp	.+132    	; 0x4198 <free+0x126>
    4114:	13 96       	adiw	r26, 0x03	; 3
    4116:	fc 93       	st	X, r31
    4118:	ee 93       	st	-X, r30
    411a:	12 97       	sbiw	r26, 0x02	; 2
    411c:	ed 01       	movw	r28, r26
    411e:	49 91       	ld	r20, Y+
    4120:	59 91       	ld	r21, Y+
    4122:	9e 01       	movw	r18, r28
    4124:	24 0f       	add	r18, r20
    4126:	35 1f       	adc	r19, r21
    4128:	e2 17       	cp	r30, r18
    412a:	f3 07       	cpc	r31, r19
    412c:	71 f4       	brne	.+28     	; 0x414a <free+0xd8>
    412e:	80 81       	ld	r24, Z
    4130:	91 81       	ldd	r25, Z+1	; 0x01
    4132:	84 0f       	add	r24, r20
    4134:	95 1f       	adc	r25, r21
    4136:	02 96       	adiw	r24, 0x02	; 2
    4138:	11 96       	adiw	r26, 0x01	; 1
    413a:	9c 93       	st	X, r25
    413c:	8e 93       	st	-X, r24
    413e:	82 81       	ldd	r24, Z+2	; 0x02
    4140:	93 81       	ldd	r25, Z+3	; 0x03
    4142:	13 96       	adiw	r26, 0x03	; 3
    4144:	9c 93       	st	X, r25
    4146:	8e 93       	st	-X, r24
    4148:	12 97       	sbiw	r26, 0x02	; 2
    414a:	e0 e0       	ldi	r30, 0x00	; 0
    414c:	f0 e0       	ldi	r31, 0x00	; 0
    414e:	d8 01       	movw	r26, r16
    4150:	12 96       	adiw	r26, 0x02	; 2
    4152:	8d 91       	ld	r24, X+
    4154:	9c 91       	ld	r25, X
    4156:	13 97       	sbiw	r26, 0x03	; 3
    4158:	00 97       	sbiw	r24, 0x00	; 0
    415a:	19 f0       	breq	.+6      	; 0x4162 <free+0xf0>
    415c:	f8 01       	movw	r30, r16
    415e:	8c 01       	movw	r16, r24
    4160:	f6 cf       	rjmp	.-20     	; 0x414e <free+0xdc>
    4162:	8d 91       	ld	r24, X+
    4164:	9c 91       	ld	r25, X
    4166:	98 01       	movw	r18, r16
    4168:	2e 5f       	subi	r18, 0xFE	; 254
    416a:	3f 4f       	sbci	r19, 0xFF	; 255
    416c:	82 0f       	add	r24, r18
    416e:	93 1f       	adc	r25, r19
    4170:	20 91 7e 02 	lds	r18, 0x027E
    4174:	30 91 7f 02 	lds	r19, 0x027F
    4178:	28 17       	cp	r18, r24
    417a:	39 07       	cpc	r19, r25
    417c:	69 f4       	brne	.+26     	; 0x4198 <free+0x126>
    417e:	30 97       	sbiw	r30, 0x00	; 0
    4180:	29 f4       	brne	.+10     	; 0x418c <free+0x11a>
    4182:	10 92 81 02 	sts	0x0281, r1
    4186:	10 92 80 02 	sts	0x0280, r1
    418a:	02 c0       	rjmp	.+4      	; 0x4190 <free+0x11e>
    418c:	13 82       	std	Z+3, r1	; 0x03
    418e:	12 82       	std	Z+2, r1	; 0x02
    4190:	10 93 7f 02 	sts	0x027F, r17
    4194:	00 93 7e 02 	sts	0x027E, r16
    4198:	df 91       	pop	r29
    419a:	cf 91       	pop	r28
    419c:	1f 91       	pop	r17
    419e:	0f 91       	pop	r16
    41a0:	08 95       	ret

000041a2 <memset>:
    41a2:	dc 01       	movw	r26, r24
    41a4:	01 c0       	rjmp	.+2      	; 0x41a8 <memset+0x6>
    41a6:	6d 93       	st	X+, r22
    41a8:	41 50       	subi	r20, 0x01	; 1
    41aa:	50 40       	sbci	r21, 0x00	; 0
    41ac:	e0 f7       	brcc	.-8      	; 0x41a6 <memset+0x4>
    41ae:	08 95       	ret

000041b0 <_exit>:
    41b0:	f8 94       	cli

000041b2 <__stop_program>:
    41b2:	ff cf       	rjmp	.-2      	; 0x41b2 <__stop_program>
