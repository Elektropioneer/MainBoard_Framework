
EP_Framework_Atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000411c  000041b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000411c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000156  0080011e  0080011e  000041ce  2**0
                  ALLOC
  3 .stab         00006840  00000000  00000000  000041d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002309  00000000  00000000  0000aa10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000cd19  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000cd2c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__vector_23>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__vector_32>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <__vector_34>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ec e1       	ldi	r30, 0x1C	; 28
      a8:	f1 e4       	ldi	r31, 0x41	; 65
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 31       	cpi	r26, 0x1E	; 30
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	ae e1       	ldi	r26, 0x1E	; 30
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a4 37       	cpi	r26, 0x74	; 116
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <main>
      ce:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <act_servo>:
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
      de:	69 97       	sbiw	r28, 0x19	; 25
      e0:	0f b6       	in	r0, 0x3f	; 63
      e2:	f8 94       	cli
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	0f be       	out	0x3f, r0	; 63
      e8:	cd bf       	out	0x3d, r28	; 61
      ea:	98 8f       	std	Y+24, r25	; 0x18
      ec:	8f 8b       	std	Y+23, r24	; 0x17
      ee:	69 8f       	std	Y+25, r22	; 0x19
      f0:	8f 89       	ldd	r24, Y+23	; 0x17
      f2:	98 8d       	ldd	r25, Y+24	; 0x18
      f4:	fc 01       	movw	r30, r24
      f6:	80 81       	ld	r24, Z
      f8:	88 23       	and	r24, r24
      fa:	21 f4       	brne	.+8      	; 0x104 <act_servo+0x2e>
      fc:	8f 89       	ldd	r24, Y+23	; 0x17
      fe:	98 8d       	ldd	r25, Y+24	; 0x18
     100:	0e 94 48 01 	call	0x290	; 0x290 <attach_servo>
     104:	83 e5       	ldi	r24, 0x53	; 83
     106:	8f 87       	std	Y+15, r24	; 0x0f
     108:	8f 89       	ldd	r24, Y+23	; 0x17
     10a:	98 8d       	ldd	r25, Y+24	; 0x18
     10c:	fc 01       	movw	r30, r24
     10e:	80 81       	ld	r24, Z
     110:	88 8b       	std	Y+16, r24	; 0x10
     112:	83 e4       	ldi	r24, 0x43	; 67
     114:	89 8b       	std	Y+17, r24	; 0x11
     116:	89 8d       	ldd	r24, Y+25	; 0x19
     118:	8a 8b       	std	Y+18, r24	; 0x12
     11a:	72 c0       	rjmp	.+228    	; 0x200 <act_servo+0x12a>
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	a8 e4       	ldi	r26, 0x48	; 72
     122:	b2 e4       	ldi	r27, 0x42	; 66
     124:	89 83       	std	Y+1, r24	; 0x01
     126:	9a 83       	std	Y+2, r25	; 0x02
     128:	ab 83       	std	Y+3, r26	; 0x03
     12a:	bc 83       	std	Y+4, r27	; 0x04
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e4       	ldi	r19, 0x40	; 64
     130:	4c e1       	ldi	r20, 0x1C	; 28
     132:	55 e4       	ldi	r21, 0x45	; 69
     134:	69 81       	ldd	r22, Y+1	; 0x01
     136:	7a 81       	ldd	r23, Y+2	; 0x02
     138:	8b 81       	ldd	r24, Y+3	; 0x03
     13a:	9c 81       	ldd	r25, Y+4	; 0x04
     13c:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     140:	dc 01       	movw	r26, r24
     142:	cb 01       	movw	r24, r22
     144:	8d 83       	std	Y+5, r24	; 0x05
     146:	9e 83       	std	Y+6, r25	; 0x06
     148:	af 83       	std	Y+7, r26	; 0x07
     14a:	b8 87       	std	Y+8, r27	; 0x08
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	40 e8       	ldi	r20, 0x80	; 128
     152:	5f e3       	ldi	r21, 0x3F	; 63
     154:	6d 81       	ldd	r22, Y+5	; 0x05
     156:	7e 81       	ldd	r23, Y+6	; 0x06
     158:	8f 81       	ldd	r24, Y+7	; 0x07
     15a:	98 85       	ldd	r25, Y+8	; 0x08
     15c:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
     160:	88 23       	and	r24, r24
     162:	2c f4       	brge	.+10     	; 0x16e <act_servo+0x98>
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	9a 87       	std	Y+10, r25	; 0x0a
     16a:	89 87       	std	Y+9, r24	; 0x09
     16c:	3f c0       	rjmp	.+126    	; 0x1ec <act_servo+0x116>
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	3f ef       	ldi	r19, 0xFF	; 255
     172:	4f e7       	ldi	r20, 0x7F	; 127
     174:	57 e4       	ldi	r21, 0x47	; 71
     176:	6d 81       	ldd	r22, Y+5	; 0x05
     178:	7e 81       	ldd	r23, Y+6	; 0x06
     17a:	8f 81       	ldd	r24, Y+7	; 0x07
     17c:	98 85       	ldd	r25, Y+8	; 0x08
     17e:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
     182:	18 16       	cp	r1, r24
     184:	4c f5       	brge	.+82     	; 0x1d8 <act_servo+0x102>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	40 e2       	ldi	r20, 0x20	; 32
     18c:	51 e4       	ldi	r21, 0x41	; 65
     18e:	69 81       	ldd	r22, Y+1	; 0x01
     190:	7a 81       	ldd	r23, Y+2	; 0x02
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	9c 81       	ldd	r25, Y+4	; 0x04
     196:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     19a:	dc 01       	movw	r26, r24
     19c:	cb 01       	movw	r24, r22
     19e:	bc 01       	movw	r22, r24
     1a0:	cd 01       	movw	r24, r26
     1a2:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     1a6:	dc 01       	movw	r26, r24
     1a8:	cb 01       	movw	r24, r22
     1aa:	9a 87       	std	Y+10, r25	; 0x0a
     1ac:	89 87       	std	Y+9, r24	; 0x09
     1ae:	0f c0       	rjmp	.+30     	; 0x1ce <act_servo+0xf8>
     1b0:	8a ef       	ldi	r24, 0xFA	; 250
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	9c 87       	std	Y+12, r25	; 0x0c
     1b6:	8b 87       	std	Y+11, r24	; 0x0b
     1b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     1ba:	9c 85       	ldd	r25, Y+12	; 0x0c
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <act_servo+0xe6>
     1c0:	9c 87       	std	Y+12, r25	; 0x0c
     1c2:	8b 87       	std	Y+11, r24	; 0x0b
     1c4:	89 85       	ldd	r24, Y+9	; 0x09
     1c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	9a 87       	std	Y+10, r25	; 0x0a
     1cc:	89 87       	std	Y+9, r24	; 0x09
     1ce:	89 85       	ldd	r24, Y+9	; 0x09
     1d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     1d2:	89 2b       	or	r24, r25
     1d4:	69 f7       	brne	.-38     	; 0x1b0 <act_servo+0xda>
     1d6:	14 c0       	rjmp	.+40     	; 0x200 <act_servo+0x12a>
     1d8:	6d 81       	ldd	r22, Y+5	; 0x05
     1da:	7e 81       	ldd	r23, Y+6	; 0x06
     1dc:	8f 81       	ldd	r24, Y+7	; 0x07
     1de:	98 85       	ldd	r25, Y+8	; 0x08
     1e0:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     1e4:	dc 01       	movw	r26, r24
     1e6:	cb 01       	movw	r24, r22
     1e8:	9a 87       	std	Y+10, r25	; 0x0a
     1ea:	89 87       	std	Y+9, r24	; 0x09
     1ec:	89 85       	ldd	r24, Y+9	; 0x09
     1ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     1f0:	9e 87       	std	Y+14, r25	; 0x0e
     1f2:	8d 87       	std	Y+13, r24	; 0x0d
     1f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     1f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <act_servo+0x122>
     1fc:	9e 87       	std	Y+14, r25	; 0x0e
     1fe:	8d 87       	std	Y+13, r24	; 0x0d
     200:	ce 01       	movw	r24, r28
     202:	0f 96       	adiw	r24, 0x0f	; 15
     204:	64 ed       	ldi	r22, 0xD4	; 212
     206:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     20a:	88 23       	and	r24, r24
     20c:	09 f0       	breq	.+2      	; 0x210 <act_servo+0x13a>
     20e:	86 cf       	rjmp	.-244    	; 0x11c <act_servo+0x46>
     210:	8f 89       	ldd	r24, Y+23	; 0x17
     212:	98 8d       	ldd	r25, Y+24	; 0x18
     214:	29 8d       	ldd	r18, Y+25	; 0x19
     216:	fc 01       	movw	r30, r24
     218:	21 83       	std	Z+1, r18	; 0x01
     21a:	69 96       	adiw	r28, 0x19	; 25
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	f8 94       	cli
     220:	de bf       	out	0x3e, r29	; 62
     222:	0f be       	out	0x3f, r0	; 63
     224:	cd bf       	out	0x3d, r28	; 61
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <setup_servo>:
			_delay_ms(50);

	servo_->angle = angle_;

}
	void setup_servo(Servo_Act* servo_, uint8_t ID_, uint8_t angle_, unsigned send) {
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	00 d0       	rcall	.+0      	; 0x232 <setup_servo+0x6>
     232:	00 d0       	rcall	.+0      	; 0x234 <setup_servo+0x8>
     234:	00 d0       	rcall	.+0      	; 0x236 <setup_servo+0xa>
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	9a 83       	std	Y+2, r25	; 0x02
     23c:	89 83       	std	Y+1, r24	; 0x01
     23e:	6b 83       	std	Y+3, r22	; 0x03
     240:	4c 83       	std	Y+4, r20	; 0x04
     242:	3e 83       	std	Y+6, r19	; 0x06
     244:	2d 83       	std	Y+5, r18	; 0x05

		servo_->ID 		= ID_;
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	9a 81       	ldd	r25, Y+2	; 0x02
     24a:	2b 81       	ldd	r18, Y+3	; 0x03
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18
		servo_->angle 	= angle_;
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	9a 81       	ldd	r25, Y+2	; 0x02
     254:	2c 81       	ldd	r18, Y+4	; 0x04
     256:	fc 01       	movw	r30, r24
     258:	21 83       	std	Z+1, r18	; 0x01

		if(send) {
     25a:	8d 81       	ldd	r24, Y+5	; 0x05
     25c:	9e 81       	ldd	r25, Y+6	; 0x06
     25e:	89 2b       	or	r24, r25
     260:	51 f0       	breq	.+20     	; 0x276 <setup_servo+0x4a>
			attach_servo(servo_);
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	0e 94 48 01 	call	0x290	; 0x290 <attach_servo>
			act_servo(servo_, angle_);
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	9a 81       	ldd	r25, Y+2	; 0x02
     26e:	6c 81       	ldd	r22, Y+4	; 0x04
     270:	0e 94 6b 00 	call	0xd6	; 0xd6 <act_servo>
     274:	04 c0       	rjmp	.+8      	; 0x27e <setup_servo+0x52>
		} else {
			detach_servo(servo_);
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	9a 81       	ldd	r25, Y+2	; 0x02
     27a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <detach_servo>
		}

	}
     27e:	26 96       	adiw	r28, 0x06	; 6
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	f8 94       	cli
     284:	de bf       	out	0x3e, r29	; 62
     286:	0f be       	out	0x3f, r0	; 63
     288:	cd bf       	out	0x3d, r28	; 61
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	08 95       	ret

00000290 <attach_servo>:

	void attach_servo(Servo_Act* servo_) {
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	68 97       	sbiw	r28, 0x18	; 24
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	98 8f       	std	Y+24, r25	; 0x18
     2a6:	8f 8b       	std	Y+23, r24	; 0x17

		uint8_t buf[8];

		buf[0] = 'S'; 			// servo
     2a8:	83 e5       	ldi	r24, 0x53	; 83
     2aa:	8f 87       	std	Y+15, r24	; 0x0f
		buf[1] = servo_->ID; 	// the ID
     2ac:	8f 89       	ldd	r24, Y+23	; 0x17
     2ae:	98 8d       	ldd	r25, Y+24	; 0x18
     2b0:	fc 01       	movw	r30, r24
     2b2:	80 81       	ld	r24, Z
     2b4:	88 8b       	std	Y+16, r24	; 0x10
		buf[2] = 'S';			// give heads up (status)
     2b6:	83 e5       	ldi	r24, 0x53	; 83
     2b8:	89 8b       	std	Y+17, r24	; 0x11
		buf[3] = 'A';			// attach
     2ba:	81 e4       	ldi	r24, 0x41	; 65
     2bc:	8a 8b       	std	Y+18, r24	; 0x12

		while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     2be:	72 c0       	rjmp	.+228    	; 0x3a4 <attach_servo+0x114>
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	a8 e4       	ldi	r26, 0x48	; 72
     2c6:	b2 e4       	ldi	r27, 0x42	; 66
     2c8:	89 83       	std	Y+1, r24	; 0x01
     2ca:	9a 83       	std	Y+2, r25	; 0x02
     2cc:	ab 83       	std	Y+3, r26	; 0x03
     2ce:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e4       	ldi	r19, 0x40	; 64
     2d4:	4c e1       	ldi	r20, 0x1C	; 28
     2d6:	55 e4       	ldi	r21, 0x45	; 69
     2d8:	69 81       	ldd	r22, Y+1	; 0x01
     2da:	7a 81       	ldd	r23, Y+2	; 0x02
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	9c 81       	ldd	r25, Y+4	; 0x04
     2e0:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     2e4:	dc 01       	movw	r26, r24
     2e6:	cb 01       	movw	r24, r22
     2e8:	8d 83       	std	Y+5, r24	; 0x05
     2ea:	9e 83       	std	Y+6, r25	; 0x06
     2ec:	af 83       	std	Y+7, r26	; 0x07
     2ee:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 e8       	ldi	r20, 0x80	; 128
     2f6:	5f e3       	ldi	r21, 0x3F	; 63
     2f8:	6d 81       	ldd	r22, Y+5	; 0x05
     2fa:	7e 81       	ldd	r23, Y+6	; 0x06
     2fc:	8f 81       	ldd	r24, Y+7	; 0x07
     2fe:	98 85       	ldd	r25, Y+8	; 0x08
     300:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
     304:	88 23       	and	r24, r24
     306:	2c f4       	brge	.+10     	; 0x312 <attach_servo+0x82>
		__ticks = 1;
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	9a 87       	std	Y+10, r25	; 0x0a
     30e:	89 87       	std	Y+9, r24	; 0x09
     310:	3f c0       	rjmp	.+126    	; 0x390 <attach_servo+0x100>
	else if (__tmp > 65535)
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	3f ef       	ldi	r19, 0xFF	; 255
     316:	4f e7       	ldi	r20, 0x7F	; 127
     318:	57 e4       	ldi	r21, 0x47	; 71
     31a:	6d 81       	ldd	r22, Y+5	; 0x05
     31c:	7e 81       	ldd	r23, Y+6	; 0x06
     31e:	8f 81       	ldd	r24, Y+7	; 0x07
     320:	98 85       	ldd	r25, Y+8	; 0x08
     322:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
     326:	18 16       	cp	r1, r24
     328:	4c f5       	brge	.+82     	; 0x37c <attach_servo+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e2       	ldi	r20, 0x20	; 32
     330:	51 e4       	ldi	r21, 0x41	; 65
     332:	69 81       	ldd	r22, Y+1	; 0x01
     334:	7a 81       	ldd	r23, Y+2	; 0x02
     336:	8b 81       	ldd	r24, Y+3	; 0x03
     338:	9c 81       	ldd	r25, Y+4	; 0x04
     33a:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     33e:	dc 01       	movw	r26, r24
     340:	cb 01       	movw	r24, r22
     342:	bc 01       	movw	r22, r24
     344:	cd 01       	movw	r24, r26
     346:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     34a:	dc 01       	movw	r26, r24
     34c:	cb 01       	movw	r24, r22
     34e:	9a 87       	std	Y+10, r25	; 0x0a
     350:	89 87       	std	Y+9, r24	; 0x09
     352:	0f c0       	rjmp	.+30     	; 0x372 <attach_servo+0xe2>
     354:	8a ef       	ldi	r24, 0xFA	; 250
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	9c 87       	std	Y+12, r25	; 0x0c
     35a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     35c:	8b 85       	ldd	r24, Y+11	; 0x0b
     35e:	9c 85       	ldd	r25, Y+12	; 0x0c
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	f1 f7       	brne	.-4      	; 0x360 <attach_servo+0xd0>
     364:	9c 87       	std	Y+12, r25	; 0x0c
     366:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     368:	89 85       	ldd	r24, Y+9	; 0x09
     36a:	9a 85       	ldd	r25, Y+10	; 0x0a
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	9a 87       	std	Y+10, r25	; 0x0a
     370:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     372:	89 85       	ldd	r24, Y+9	; 0x09
     374:	9a 85       	ldd	r25, Y+10	; 0x0a
     376:	89 2b       	or	r24, r25
     378:	69 f7       	brne	.-38     	; 0x354 <attach_servo+0xc4>
     37a:	14 c0       	rjmp	.+40     	; 0x3a4 <attach_servo+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     37c:	6d 81       	ldd	r22, Y+5	; 0x05
     37e:	7e 81       	ldd	r23, Y+6	; 0x06
     380:	8f 81       	ldd	r24, Y+7	; 0x07
     382:	98 85       	ldd	r25, Y+8	; 0x08
     384:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	9a 87       	std	Y+10, r25	; 0x0a
     38e:	89 87       	std	Y+9, r24	; 0x09
     390:	89 85       	ldd	r24, Y+9	; 0x09
     392:	9a 85       	ldd	r25, Y+10	; 0x0a
     394:	9e 87       	std	Y+14, r25	; 0x0e
     396:	8d 87       	std	Y+13, r24	; 0x0d
     398:	8d 85       	ldd	r24, Y+13	; 0x0d
     39a:	9e 85       	ldd	r25, Y+14	; 0x0e
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <attach_servo+0x10c>
     3a0:	9e 87       	std	Y+14, r25	; 0x0e
     3a2:	8d 87       	std	Y+13, r24	; 0x0d
     3a4:	ce 01       	movw	r24, r28
     3a6:	0f 96       	adiw	r24, 0x0f	; 15
     3a8:	64 ed       	ldi	r22, 0xD4	; 212
     3aa:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     3ae:	88 23       	and	r24, r24
     3b0:	09 f0       	breq	.+2      	; 0x3b4 <attach_servo+0x124>
     3b2:	86 cf       	rjmp	.-244    	; 0x2c0 <attach_servo+0x30>
					_delay_ms(50);

		servo_->status = ATTACHED;
     3b4:	8f 89       	ldd	r24, Y+23	; 0x17
     3b6:	98 8d       	ldd	r25, Y+24	; 0x18
     3b8:	21 e0       	ldi	r18, 0x01	; 1
     3ba:	fc 01       	movw	r30, r24
     3bc:	22 83       	std	Z+2, r18	; 0x02

	}
     3be:	68 96       	adiw	r28, 0x18	; 24
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <detach_servo>:

	void detach_servo(Servo_Act* servo_) {
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	68 97       	sbiw	r28, 0x18	; 24
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	98 8f       	std	Y+24, r25	; 0x18
     3e6:	8f 8b       	std	Y+23, r24	; 0x17

		uint8_t buf[8];

		buf[0] = 'S'; 			// servo
     3e8:	83 e5       	ldi	r24, 0x53	; 83
     3ea:	8f 87       	std	Y+15, r24	; 0x0f
		buf[1] = servo_->ID; 	// the ID
     3ec:	8f 89       	ldd	r24, Y+23	; 0x17
     3ee:	98 8d       	ldd	r25, Y+24	; 0x18
     3f0:	fc 01       	movw	r30, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	88 8b       	std	Y+16, r24	; 0x10
		buf[2] = 'S';			// give heads up (status)
     3f6:	83 e5       	ldi	r24, 0x53	; 83
     3f8:	89 8b       	std	Y+17, r24	; 0x11
		buf[3] = 'D';			// deattach
     3fa:	84 e4       	ldi	r24, 0x44	; 68
     3fc:	8a 8b       	std	Y+18, r24	; 0x12

		while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     3fe:	72 c0       	rjmp	.+228    	; 0x4e4 <detach_servo+0x114>
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	a8 e4       	ldi	r26, 0x48	; 72
     406:	b2 e4       	ldi	r27, 0x42	; 66
     408:	89 83       	std	Y+1, r24	; 0x01
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	ab 83       	std	Y+3, r26	; 0x03
     40e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e4       	ldi	r19, 0x40	; 64
     414:	4c e1       	ldi	r20, 0x1C	; 28
     416:	55 e4       	ldi	r21, 0x45	; 69
     418:	69 81       	ldd	r22, Y+1	; 0x01
     41a:	7a 81       	ldd	r23, Y+2	; 0x02
     41c:	8b 81       	ldd	r24, Y+3	; 0x03
     41e:	9c 81       	ldd	r25, Y+4	; 0x04
     420:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	8d 83       	std	Y+5, r24	; 0x05
     42a:	9e 83       	std	Y+6, r25	; 0x06
     42c:	af 83       	std	Y+7, r26	; 0x07
     42e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	40 e8       	ldi	r20, 0x80	; 128
     436:	5f e3       	ldi	r21, 0x3F	; 63
     438:	6d 81       	ldd	r22, Y+5	; 0x05
     43a:	7e 81       	ldd	r23, Y+6	; 0x06
     43c:	8f 81       	ldd	r24, Y+7	; 0x07
     43e:	98 85       	ldd	r25, Y+8	; 0x08
     440:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
     444:	88 23       	and	r24, r24
     446:	2c f4       	brge	.+10     	; 0x452 <detach_servo+0x82>
		__ticks = 1;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	9a 87       	std	Y+10, r25	; 0x0a
     44e:	89 87       	std	Y+9, r24	; 0x09
     450:	3f c0       	rjmp	.+126    	; 0x4d0 <detach_servo+0x100>
	else if (__tmp > 65535)
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	3f ef       	ldi	r19, 0xFF	; 255
     456:	4f e7       	ldi	r20, 0x7F	; 127
     458:	57 e4       	ldi	r21, 0x47	; 71
     45a:	6d 81       	ldd	r22, Y+5	; 0x05
     45c:	7e 81       	ldd	r23, Y+6	; 0x06
     45e:	8f 81       	ldd	r24, Y+7	; 0x07
     460:	98 85       	ldd	r25, Y+8	; 0x08
     462:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
     466:	18 16       	cp	r1, r24
     468:	4c f5       	brge	.+82     	; 0x4bc <detach_servo+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	40 e2       	ldi	r20, 0x20	; 32
     470:	51 e4       	ldi	r21, 0x41	; 65
     472:	69 81       	ldd	r22, Y+1	; 0x01
     474:	7a 81       	ldd	r23, Y+2	; 0x02
     476:	8b 81       	ldd	r24, Y+3	; 0x03
     478:	9c 81       	ldd	r25, Y+4	; 0x04
     47a:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     47e:	dc 01       	movw	r26, r24
     480:	cb 01       	movw	r24, r22
     482:	bc 01       	movw	r22, r24
     484:	cd 01       	movw	r24, r26
     486:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     48a:	dc 01       	movw	r26, r24
     48c:	cb 01       	movw	r24, r22
     48e:	9a 87       	std	Y+10, r25	; 0x0a
     490:	89 87       	std	Y+9, r24	; 0x09
     492:	0f c0       	rjmp	.+30     	; 0x4b2 <detach_servo+0xe2>
     494:	8a ef       	ldi	r24, 0xFA	; 250
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	9c 87       	std	Y+12, r25	; 0x0c
     49a:	8b 87       	std	Y+11, r24	; 0x0b
     49c:	8b 85       	ldd	r24, Y+11	; 0x0b
     49e:	9c 85       	ldd	r25, Y+12	; 0x0c
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <detach_servo+0xd0>
     4a4:	9c 87       	std	Y+12, r25	; 0x0c
     4a6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a8:	89 85       	ldd	r24, Y+9	; 0x09
     4aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ac:	01 97       	sbiw	r24, 0x01	; 1
     4ae:	9a 87       	std	Y+10, r25	; 0x0a
     4b0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4b2:	89 85       	ldd	r24, Y+9	; 0x09
     4b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b6:	89 2b       	or	r24, r25
     4b8:	69 f7       	brne	.-38     	; 0x494 <detach_servo+0xc4>
     4ba:	14 c0       	rjmp	.+40     	; 0x4e4 <detach_servo+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4bc:	6d 81       	ldd	r22, Y+5	; 0x05
     4be:	7e 81       	ldd	r23, Y+6	; 0x06
     4c0:	8f 81       	ldd	r24, Y+7	; 0x07
     4c2:	98 85       	ldd	r25, Y+8	; 0x08
     4c4:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     4c8:	dc 01       	movw	r26, r24
     4ca:	cb 01       	movw	r24, r22
     4cc:	9a 87       	std	Y+10, r25	; 0x0a
     4ce:	89 87       	std	Y+9, r24	; 0x09
     4d0:	89 85       	ldd	r24, Y+9	; 0x09
     4d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4d4:	9e 87       	std	Y+14, r25	; 0x0e
     4d6:	8d 87       	std	Y+13, r24	; 0x0d
     4d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     4da:	9e 85       	ldd	r25, Y+14	; 0x0e
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <detach_servo+0x10c>
     4e0:	9e 87       	std	Y+14, r25	; 0x0e
     4e2:	8d 87       	std	Y+13, r24	; 0x0d
     4e4:	ce 01       	movw	r24, r28
     4e6:	0f 96       	adiw	r24, 0x0f	; 15
     4e8:	64 ed       	ldi	r22, 0xD4	; 212
     4ea:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     4ee:	88 23       	and	r24, r24
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <detach_servo+0x124>
     4f2:	86 cf       	rjmp	.-244    	; 0x400 <detach_servo+0x30>
					_delay_ms(50);

		servo_->status = DATTACHED;
     4f4:	8f 89       	ldd	r24, Y+23	; 0x17
     4f6:	98 8d       	ldd	r25, Y+24	; 0x18
     4f8:	fc 01       	movw	r30, r24
     4fa:	12 82       	std	Z+2, r1	; 0x02
	}
     4fc:	68 96       	adiw	r28, 0x18	; 24
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <act_relay>:

void act_relay(Relay_Act* relay_info) {
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	68 97       	sbiw	r28, 0x18	; 24
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
     522:	98 8f       	std	Y+24, r25	; 0x18
     524:	8f 8b       	std	Y+23, r24	; 0x17

	//relay_info.status = WAITING;

	uint8_t buf[8];

	buf[0] = 'R';
     526:	82 e5       	ldi	r24, 0x52	; 82
     528:	8f 87       	std	Y+15, r24	; 0x0f
	buf[1] = relay_info->ID;
     52a:	8f 89       	ldd	r24, Y+23	; 0x17
     52c:	98 8d       	ldd	r25, Y+24	; 0x18
     52e:	fc 01       	movw	r30, r24
     530:	80 81       	ld	r24, Z
     532:	88 8b       	std	Y+16, r24	; 0x10
	buf[2] = relay_info->state;
     534:	8f 89       	ldd	r24, Y+23	; 0x17
     536:	98 8d       	ldd	r25, Y+24	; 0x18
     538:	fc 01       	movw	r30, r24
     53a:	81 81       	ldd	r24, Z+1	; 0x01
     53c:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     53e:	72 c0       	rjmp	.+228    	; 0x624 <act_relay+0x116>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	a8 e4       	ldi	r26, 0x48	; 72
     546:	b2 e4       	ldi	r27, 0x42	; 66
     548:	89 83       	std	Y+1, r24	; 0x01
     54a:	9a 83       	std	Y+2, r25	; 0x02
     54c:	ab 83       	std	Y+3, r26	; 0x03
     54e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e4       	ldi	r19, 0x40	; 64
     554:	4c e1       	ldi	r20, 0x1C	; 28
     556:	55 e4       	ldi	r21, 0x45	; 69
     558:	69 81       	ldd	r22, Y+1	; 0x01
     55a:	7a 81       	ldd	r23, Y+2	; 0x02
     55c:	8b 81       	ldd	r24, Y+3	; 0x03
     55e:	9c 81       	ldd	r25, Y+4	; 0x04
     560:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	8d 83       	std	Y+5, r24	; 0x05
     56a:	9e 83       	std	Y+6, r25	; 0x06
     56c:	af 83       	std	Y+7, r26	; 0x07
     56e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e8       	ldi	r20, 0x80	; 128
     576:	5f e3       	ldi	r21, 0x3F	; 63
     578:	6d 81       	ldd	r22, Y+5	; 0x05
     57a:	7e 81       	ldd	r23, Y+6	; 0x06
     57c:	8f 81       	ldd	r24, Y+7	; 0x07
     57e:	98 85       	ldd	r25, Y+8	; 0x08
     580:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
     584:	88 23       	and	r24, r24
     586:	2c f4       	brge	.+10     	; 0x592 <act_relay+0x84>
		__ticks = 1;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	9a 87       	std	Y+10, r25	; 0x0a
     58e:	89 87       	std	Y+9, r24	; 0x09
     590:	3f c0       	rjmp	.+126    	; 0x610 <act_relay+0x102>
	else if (__tmp > 65535)
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	3f ef       	ldi	r19, 0xFF	; 255
     596:	4f e7       	ldi	r20, 0x7F	; 127
     598:	57 e4       	ldi	r21, 0x47	; 71
     59a:	6d 81       	ldd	r22, Y+5	; 0x05
     59c:	7e 81       	ldd	r23, Y+6	; 0x06
     59e:	8f 81       	ldd	r24, Y+7	; 0x07
     5a0:	98 85       	ldd	r25, Y+8	; 0x08
     5a2:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
     5a6:	18 16       	cp	r1, r24
     5a8:	4c f5       	brge	.+82     	; 0x5fc <act_relay+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	40 e2       	ldi	r20, 0x20	; 32
     5b0:	51 e4       	ldi	r21, 0x41	; 65
     5b2:	69 81       	ldd	r22, Y+1	; 0x01
     5b4:	7a 81       	ldd	r23, Y+2	; 0x02
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ba:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	bc 01       	movw	r22, r24
     5c4:	cd 01       	movw	r24, r26
     5c6:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     5ca:	dc 01       	movw	r26, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	9a 87       	std	Y+10, r25	; 0x0a
     5d0:	89 87       	std	Y+9, r24	; 0x09
     5d2:	0f c0       	rjmp	.+30     	; 0x5f2 <act_relay+0xe4>
     5d4:	8a ef       	ldi	r24, 0xFA	; 250
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	9c 87       	std	Y+12, r25	; 0x0c
     5da:	8b 87       	std	Y+11, r24	; 0x0b
     5dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     5de:	9c 85       	ldd	r25, Y+12	; 0x0c
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <act_relay+0xd2>
     5e4:	9c 87       	std	Y+12, r25	; 0x0c
     5e6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e8:	89 85       	ldd	r24, Y+9	; 0x09
     5ea:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	9a 87       	std	Y+10, r25	; 0x0a
     5f0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f2:	89 85       	ldd	r24, Y+9	; 0x09
     5f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5f6:	89 2b       	or	r24, r25
     5f8:	69 f7       	brne	.-38     	; 0x5d4 <act_relay+0xc6>
     5fa:	14 c0       	rjmp	.+40     	; 0x624 <act_relay+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5fc:	6d 81       	ldd	r22, Y+5	; 0x05
     5fe:	7e 81       	ldd	r23, Y+6	; 0x06
     600:	8f 81       	ldd	r24, Y+7	; 0x07
     602:	98 85       	ldd	r25, Y+8	; 0x08
     604:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	9a 87       	std	Y+10, r25	; 0x0a
     60e:	89 87       	std	Y+9, r24	; 0x09
     610:	89 85       	ldd	r24, Y+9	; 0x09
     612:	9a 85       	ldd	r25, Y+10	; 0x0a
     614:	9e 87       	std	Y+14, r25	; 0x0e
     616:	8d 87       	std	Y+13, r24	; 0x0d
     618:	8d 85       	ldd	r24, Y+13	; 0x0d
     61a:	9e 85       	ldd	r25, Y+14	; 0x0e
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <act_relay+0x10e>
     620:	9e 87       	std	Y+14, r25	; 0x0e
     622:	8d 87       	std	Y+13, r24	; 0x0d
     624:	ce 01       	movw	r24, r28
     626:	0f 96       	adiw	r24, 0x0f	; 15
     628:	64 ed       	ldi	r22, 0xD4	; 212
     62a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     62e:	88 23       	and	r24, r24
     630:	09 f0       	breq	.+2      	; 0x634 <act_relay+0x126>
     632:	86 cf       	rjmp	.-244    	; 0x540 <act_relay+0x32>
				_delay_ms(50);

}
     634:	68 96       	adiw	r28, 0x18	; 24
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <act_mosfet>:

void act_mosfet(Mosfet_Act* mosfet_info) {
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	68 97       	sbiw	r28, 0x18	; 24
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	98 8f       	std	Y+24, r25	; 0x18
     65c:	8f 8b       	std	Y+23, r24	; 0x17

	uint8_t buf[8];

	buf[0] = 'M';
     65e:	8d e4       	ldi	r24, 0x4D	; 77
     660:	8f 87       	std	Y+15, r24	; 0x0f
	buf[1] = mosfet_info->ID;
     662:	8f 89       	ldd	r24, Y+23	; 0x17
     664:	98 8d       	ldd	r25, Y+24	; 0x18
     666:	fc 01       	movw	r30, r24
     668:	80 81       	ld	r24, Z
     66a:	88 8b       	std	Y+16, r24	; 0x10
	buf[2] = mosfet_info->state;
     66c:	8f 89       	ldd	r24, Y+23	; 0x17
     66e:	98 8d       	ldd	r25, Y+24	; 0x18
     670:	fc 01       	movw	r30, r24
     672:	81 81       	ldd	r24, Z+1	; 0x01
     674:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     676:	72 c0       	rjmp	.+228    	; 0x75c <act_mosfet+0x116>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	a8 e4       	ldi	r26, 0x48	; 72
     67e:	b2 e4       	ldi	r27, 0x42	; 66
     680:	89 83       	std	Y+1, r24	; 0x01
     682:	9a 83       	std	Y+2, r25	; 0x02
     684:	ab 83       	std	Y+3, r26	; 0x03
     686:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e4       	ldi	r19, 0x40	; 64
     68c:	4c e1       	ldi	r20, 0x1C	; 28
     68e:	55 e4       	ldi	r21, 0x45	; 69
     690:	69 81       	ldd	r22, Y+1	; 0x01
     692:	7a 81       	ldd	r23, Y+2	; 0x02
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	8d 83       	std	Y+5, r24	; 0x05
     6a2:	9e 83       	std	Y+6, r25	; 0x06
     6a4:	af 83       	std	Y+7, r26	; 0x07
     6a6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e8       	ldi	r20, 0x80	; 128
     6ae:	5f e3       	ldi	r21, 0x3F	; 63
     6b0:	6d 81       	ldd	r22, Y+5	; 0x05
     6b2:	7e 81       	ldd	r23, Y+6	; 0x06
     6b4:	8f 81       	ldd	r24, Y+7	; 0x07
     6b6:	98 85       	ldd	r25, Y+8	; 0x08
     6b8:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
     6bc:	88 23       	and	r24, r24
     6be:	2c f4       	brge	.+10     	; 0x6ca <act_mosfet+0x84>
		__ticks = 1;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	9a 87       	std	Y+10, r25	; 0x0a
     6c6:	89 87       	std	Y+9, r24	; 0x09
     6c8:	3f c0       	rjmp	.+126    	; 0x748 <act_mosfet+0x102>
	else if (__tmp > 65535)
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	3f ef       	ldi	r19, 0xFF	; 255
     6ce:	4f e7       	ldi	r20, 0x7F	; 127
     6d0:	57 e4       	ldi	r21, 0x47	; 71
     6d2:	6d 81       	ldd	r22, Y+5	; 0x05
     6d4:	7e 81       	ldd	r23, Y+6	; 0x06
     6d6:	8f 81       	ldd	r24, Y+7	; 0x07
     6d8:	98 85       	ldd	r25, Y+8	; 0x08
     6da:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
     6de:	18 16       	cp	r1, r24
     6e0:	4c f5       	brge	.+82     	; 0x734 <act_mosfet+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e2       	ldi	r20, 0x20	; 32
     6e8:	51 e4       	ldi	r21, 0x41	; 65
     6ea:	69 81       	ldd	r22, Y+1	; 0x01
     6ec:	7a 81       	ldd	r23, Y+2	; 0x02
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	9c 81       	ldd	r25, Y+4	; 0x04
     6f2:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     6f6:	dc 01       	movw	r26, r24
     6f8:	cb 01       	movw	r24, r22
     6fa:	bc 01       	movw	r22, r24
     6fc:	cd 01       	movw	r24, r26
     6fe:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     702:	dc 01       	movw	r26, r24
     704:	cb 01       	movw	r24, r22
     706:	9a 87       	std	Y+10, r25	; 0x0a
     708:	89 87       	std	Y+9, r24	; 0x09
     70a:	0f c0       	rjmp	.+30     	; 0x72a <act_mosfet+0xe4>
     70c:	8a ef       	ldi	r24, 0xFA	; 250
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	9c 87       	std	Y+12, r25	; 0x0c
     712:	8b 87       	std	Y+11, r24	; 0x0b
     714:	8b 85       	ldd	r24, Y+11	; 0x0b
     716:	9c 85       	ldd	r25, Y+12	; 0x0c
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <act_mosfet+0xd2>
     71c:	9c 87       	std	Y+12, r25	; 0x0c
     71e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     720:	89 85       	ldd	r24, Y+9	; 0x09
     722:	9a 85       	ldd	r25, Y+10	; 0x0a
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	9a 87       	std	Y+10, r25	; 0x0a
     728:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     72a:	89 85       	ldd	r24, Y+9	; 0x09
     72c:	9a 85       	ldd	r25, Y+10	; 0x0a
     72e:	89 2b       	or	r24, r25
     730:	69 f7       	brne	.-38     	; 0x70c <act_mosfet+0xc6>
     732:	14 c0       	rjmp	.+40     	; 0x75c <act_mosfet+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     734:	6d 81       	ldd	r22, Y+5	; 0x05
     736:	7e 81       	ldd	r23, Y+6	; 0x06
     738:	8f 81       	ldd	r24, Y+7	; 0x07
     73a:	98 85       	ldd	r25, Y+8	; 0x08
     73c:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     740:	dc 01       	movw	r26, r24
     742:	cb 01       	movw	r24, r22
     744:	9a 87       	std	Y+10, r25	; 0x0a
     746:	89 87       	std	Y+9, r24	; 0x09
     748:	89 85       	ldd	r24, Y+9	; 0x09
     74a:	9a 85       	ldd	r25, Y+10	; 0x0a
     74c:	9e 87       	std	Y+14, r25	; 0x0e
     74e:	8d 87       	std	Y+13, r24	; 0x0d
     750:	8d 85       	ldd	r24, Y+13	; 0x0d
     752:	9e 85       	ldd	r25, Y+14	; 0x0e
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	f1 f7       	brne	.-4      	; 0x754 <act_mosfet+0x10e>
     758:	9e 87       	std	Y+14, r25	; 0x0e
     75a:	8d 87       	std	Y+13, r24	; 0x0d
     75c:	ce 01       	movw	r24, r28
     75e:	0f 96       	adiw	r24, 0x0f	; 15
     760:	64 ed       	ldi	r22, 0xD4	; 212
     762:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     766:	88 23       	and	r24, r24
     768:	09 f0       	breq	.+2      	; 0x76c <act_mosfet+0x126>
     76a:	86 cf       	rjmp	.-244    	; 0x678 <act_mosfet+0x32>
				_delay_ms(50);

}
     76c:	68 96       	adiw	r28, 0x18	; 24
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <AX_UART_Init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "ax.h"

void AX_UART_Init(void)
{
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	2e 97       	sbiw	r28, 0x0e	; 14
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRD &= ~((1 << 2) | (1 << 3));
     792:	8a e2       	ldi	r24, 0x2A	; 42
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	2a e2       	ldi	r18, 0x2A	; 42
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	f9 01       	movw	r30, r18
     79c:	20 81       	ld	r18, Z
     79e:	23 7f       	andi	r18, 0xF3	; 243
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
	//PORTE = 0;
	UCSR1A = 0;
     7a4:	88 ec       	ldi	r24, 0xC8	; 200
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	fc 01       	movw	r30, r24
     7aa:	10 82       	st	Z, r1
	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
     7ac:	89 ec       	ldi	r24, 0xC9	; 201
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	28 e1       	ldi	r18, 0x18	; 24
     7b2:	fc 01       	movw	r30, r24
     7b4:	20 83       	st	Z, r18
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
     7b6:	8a ec       	ldi	r24, 0xCA	; 202
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	26 e0       	ldi	r18, 0x06	; 6
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18

	UBRR1H = 0;
     7c0:	8d ec       	ldi	r24, 0xCD	; 205
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	fc 01       	movw	r30, r24
     7c6:	10 82       	st	Z, r1
	UBRR1L = 5;
     7c8:	8c ec       	ldi	r24, 0xCC	; 204
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	25 e0       	ldi	r18, 0x05	; 5
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 83       	st	Z, r18
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	a8 ec       	ldi	r26, 0xC8	; 200
     7d8:	b2 e4       	ldi	r27, 0x42	; 66
     7da:	89 83       	std	Y+1, r24	; 0x01
     7dc:	9a 83       	std	Y+2, r25	; 0x02
     7de:	ab 83       	std	Y+3, r26	; 0x03
     7e0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e4       	ldi	r19, 0x40	; 64
     7e6:	4c e1       	ldi	r20, 0x1C	; 28
     7e8:	55 e4       	ldi	r21, 0x45	; 69
     7ea:	69 81       	ldd	r22, Y+1	; 0x01
     7ec:	7a 81       	ldd	r23, Y+2	; 0x02
     7ee:	8b 81       	ldd	r24, Y+3	; 0x03
     7f0:	9c 81       	ldd	r25, Y+4	; 0x04
     7f2:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     7f6:	dc 01       	movw	r26, r24
     7f8:	cb 01       	movw	r24, r22
     7fa:	8d 83       	std	Y+5, r24	; 0x05
     7fc:	9e 83       	std	Y+6, r25	; 0x06
     7fe:	af 83       	std	Y+7, r26	; 0x07
     800:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 e8       	ldi	r20, 0x80	; 128
     808:	5f e3       	ldi	r21, 0x3F	; 63
     80a:	6d 81       	ldd	r22, Y+5	; 0x05
     80c:	7e 81       	ldd	r23, Y+6	; 0x06
     80e:	8f 81       	ldd	r24, Y+7	; 0x07
     810:	98 85       	ldd	r25, Y+8	; 0x08
     812:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
     816:	88 23       	and	r24, r24
     818:	2c f4       	brge	.+10     	; 0x824 <AX_UART_Init+0xa6>
		__ticks = 1;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	9a 87       	std	Y+10, r25	; 0x0a
     820:	89 87       	std	Y+9, r24	; 0x09
     822:	3f c0       	rjmp	.+126    	; 0x8a2 <AX_UART_Init+0x124>
	else if (__tmp > 65535)
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	3f ef       	ldi	r19, 0xFF	; 255
     828:	4f e7       	ldi	r20, 0x7F	; 127
     82a:	57 e4       	ldi	r21, 0x47	; 71
     82c:	6d 81       	ldd	r22, Y+5	; 0x05
     82e:	7e 81       	ldd	r23, Y+6	; 0x06
     830:	8f 81       	ldd	r24, Y+7	; 0x07
     832:	98 85       	ldd	r25, Y+8	; 0x08
     834:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
     838:	18 16       	cp	r1, r24
     83a:	4c f5       	brge	.+82     	; 0x88e <AX_UART_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e2       	ldi	r20, 0x20	; 32
     842:	51 e4       	ldi	r21, 0x41	; 65
     844:	69 81       	ldd	r22, Y+1	; 0x01
     846:	7a 81       	ldd	r23, Y+2	; 0x02
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	bc 01       	movw	r22, r24
     856:	cd 01       	movw	r24, r26
     858:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     85c:	dc 01       	movw	r26, r24
     85e:	cb 01       	movw	r24, r22
     860:	9a 87       	std	Y+10, r25	; 0x0a
     862:	89 87       	std	Y+9, r24	; 0x09
     864:	0f c0       	rjmp	.+30     	; 0x884 <AX_UART_Init+0x106>
     866:	8a ef       	ldi	r24, 0xFA	; 250
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	9c 87       	std	Y+12, r25	; 0x0c
     86c:	8b 87       	std	Y+11, r24	; 0x0b
     86e:	8b 85       	ldd	r24, Y+11	; 0x0b
     870:	9c 85       	ldd	r25, Y+12	; 0x0c
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	f1 f7       	brne	.-4      	; 0x872 <AX_UART_Init+0xf4>
     876:	9c 87       	std	Y+12, r25	; 0x0c
     878:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	9a 85       	ldd	r25, Y+10	; 0x0a
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	9a 87       	std	Y+10, r25	; 0x0a
     882:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     884:	89 85       	ldd	r24, Y+9	; 0x09
     886:	9a 85       	ldd	r25, Y+10	; 0x0a
     888:	89 2b       	or	r24, r25
     88a:	69 f7       	brne	.-38     	; 0x866 <AX_UART_Init+0xe8>
     88c:	14 c0       	rjmp	.+40     	; 0x8b6 <AX_UART_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     88e:	6d 81       	ldd	r22, Y+5	; 0x05
     890:	7e 81       	ldd	r23, Y+6	; 0x06
     892:	8f 81       	ldd	r24, Y+7	; 0x07
     894:	98 85       	ldd	r25, Y+8	; 0x08
     896:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     89a:	dc 01       	movw	r26, r24
     89c:	cb 01       	movw	r24, r22
     89e:	9a 87       	std	Y+10, r25	; 0x0a
     8a0:	89 87       	std	Y+9, r24	; 0x09
     8a2:	89 85       	ldd	r24, Y+9	; 0x09
     8a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a6:	9e 87       	std	Y+14, r25	; 0x0e
     8a8:	8d 87       	std	Y+13, r24	; 0x0d
     8aa:	8d 85       	ldd	r24, Y+13	; 0x0d
     8ac:	9e 85       	ldd	r25, Y+14	; 0x0e
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <AX_UART_Init+0x130>
     8b2:	9e 87       	std	Y+14, r25	; 0x0e
     8b4:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);
}
     8b6:	2e 96       	adiw	r28, 0x0e	; 14
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	1f 92       	push	r1
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1<<UDRE1)) );
     8d4:	00 00       	nop
     8d6:	88 ec       	ldi	r24, 0xC8	; 200
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	fc 01       	movw	r30, r24
     8dc:	80 81       	ld	r24, Z
     8de:	88 2f       	mov	r24, r24
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	80 72       	andi	r24, 0x20	; 32
     8e4:	99 27       	eor	r25, r25
     8e6:	89 2b       	or	r24, r25
     8e8:	b1 f3       	breq	.-20     	; 0x8d6 <AX_SendChar+0xe>
	UDR1 = data;
     8ea:	8e ec       	ldi	r24, 0xCE	; 206
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	29 81       	ldd	r18, Y+1	; 0x01
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
}
     8f4:	0f 90       	pop	r0
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <AX_ReadChar>:
unsigned char AX_ReadChar(void)
{
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
   //UART1_Write('I');
   while( !( UCSR1A & (1<< RXC1)) );
     904:	00 00       	nop
     906:	88 ec       	ldi	r24, 0xC8	; 200
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	fc 01       	movw	r30, r24
     90c:	80 81       	ld	r24, Z
     90e:	88 23       	and	r24, r24
     910:	d4 f7       	brge	.-12     	; 0x906 <AX_ReadChar+0xa>
   return UDR1;
     912:	8e ec       	ldi	r24, 0xCE	; 206
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	fc 01       	movw	r30, r24
     918:	80 81       	ld	r24, Z
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <AX_ReadStatus>:
/*************************************************************************************************************************************************************************************
*															 Funkcije za upravljanje AX-12A servoima                                                                                                                                      *
*************************************************************************************************************************************************************************************/

void AX_ReadStatus(void)
{
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
     928:	27 97       	sbiw	r28, 0x07	; 7
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	de bf       	out	0x3e, r29	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	cd bf       	out	0x3d, r28	; 61
	 unsigned char status[7] = {0,0,0,0,0,0};
     934:	27 e0       	ldi	r18, 0x07	; 7
     936:	ce 01       	movw	r24, r28
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	fc 01       	movw	r30, r24
     93c:	32 2f       	mov	r19, r18
     93e:	11 92       	st	Z+, r1
     940:	3a 95       	dec	r19
     942:	e9 f7       	brne	.-6      	; 0x93e <AX_ReadStatus+0x1e>

	status[0] = AX_ReadChar();
     944:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     948:	89 83       	std	Y+1, r24	; 0x01
	status[1] = AX_ReadChar();
     94a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     94e:	8a 83       	std	Y+2, r24	; 0x02
	status[2] = AX_ReadChar();
     950:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     954:	8b 83       	std	Y+3, r24	; 0x03
	status[3] = AX_ReadChar();
     956:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     95a:	8c 83       	std	Y+4, r24	; 0x04
	status[4] = AX_ReadChar();
     95c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     960:	8d 83       	std	Y+5, r24	; 0x05
	status[5] = AX_ReadChar();
     962:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     966:	8e 83       	std	Y+6, r24	; 0x06
}
     968:	27 96       	adiw	r28, 0x07	; 7
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <AX_StopTransmitter>:

void AX_StopTransmitter(void)
{
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
	while( !(UCSR1A & (1<<TXC1)) );
     982:	00 00       	nop
     984:	88 ec       	ldi	r24, 0xC8	; 200
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	fc 01       	movw	r30, r24
     98a:	80 81       	ld	r24, Z
     98c:	88 2f       	mov	r24, r24
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	80 74       	andi	r24, 0x40	; 64
     992:	99 27       	eor	r25, r25
     994:	89 2b       	or	r24, r25
     996:	b1 f3       	breq	.-20     	; 0x984 <AX_StopTransmitter+0xa>
	UCSR1B &= 0xF7;
     998:	89 ec       	ldi	r24, 0xC9	; 201
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	29 ec       	ldi	r18, 0xC9	; 201
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	f9 01       	movw	r30, r18
     9a2:	20 81       	ld	r18, Z
     9a4:	27 7f       	andi	r18, 0xF7	; 247
     9a6:	fc 01       	movw	r30, r24
     9a8:	20 83       	st	Z, r18
	UCSR1A |= 0x40;
     9aa:	88 ec       	ldi	r24, 0xC8	; 200
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	28 ec       	ldi	r18, 0xC8	; 200
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	f9 01       	movw	r30, r18
     9b4:	20 81       	ld	r18, Z
     9b6:	20 64       	ori	r18, 0x40	; 64
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x08;
     9ca:	89 ec       	ldi	r24, 0xC9	; 201
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	29 ec       	ldi	r18, 0xC9	; 201
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	f9 01       	movw	r30, r18
     9d4:	20 81       	ld	r18, Z
     9d6:	28 60       	ori	r18, 0x08	; 8
     9d8:	fc 01       	movw	r30, r24
     9da:	20 83       	st	Z, r18
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <AX_StopReceiver>:

void AX_StopReceiver(void)
{
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
	UCSR1B &= 0xEF;
     9ea:	89 ec       	ldi	r24, 0xC9	; 201
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	29 ec       	ldi	r18, 0xC9	; 201
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	f9 01       	movw	r30, r18
     9f4:	20 81       	ld	r18, Z
     9f6:	2f 7e       	andi	r18, 0xEF	; 239
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18
}
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x10;
     a0a:	89 ec       	ldi	r24, 0xC9	; 201
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	29 ec       	ldi	r18, 0xC9	; 201
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	f9 01       	movw	r30, r18
     a14:	20 81       	ld	r18, Z
     a16:	20 61       	ori	r18, 0x10	; 16
     a18:	fc 01       	movw	r30, r24
     a1a:	20 83       	st	Z, r18
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	08 95       	ret

00000a22 <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
     a2a:	6a 97       	sbiw	r28, 0x1a	; 26
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	cd bf       	out	0x3d, r28	; 61
     a36:	9e 8b       	std	Y+22, r25	; 0x16
     a38:	8d 8b       	std	Y+21, r24	; 0x15
     a3a:	78 8f       	std	Y+24, r23	; 0x18
     a3c:	6f 8b       	std	Y+23, r22	; 0x17
     a3e:	49 8f       	std	Y+25, r20	; 0x19
     a40:	2a 8f       	std	Y+26, r18	; 0x1a
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;

	angle = (unsigned int)(1023 *((double)angle/300.0));
     a42:	8d 89       	ldd	r24, Y+21	; 0x15
     a44:	9e 89       	ldd	r25, Y+22	; 0x16
     a46:	cc 01       	movw	r24, r24
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	bc 01       	movw	r22, r24
     a4e:	cd 01       	movw	r24, r26
     a50:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <__floatunsisf>
     a54:	dc 01       	movw	r26, r24
     a56:	cb 01       	movw	r24, r22
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	46 e9       	ldi	r20, 0x96	; 150
     a5e:	53 e4       	ldi	r21, 0x43	; 67
     a60:	bc 01       	movw	r22, r24
     a62:	cd 01       	movw	r24, r26
     a64:	0e 94 77 1d 	call	0x3aee	; 0x3aee <__divsf3>
     a68:	dc 01       	movw	r26, r24
     a6a:	cb 01       	movw	r24, r22
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 ec       	ldi	r19, 0xC0	; 192
     a70:	4f e7       	ldi	r20, 0x7F	; 127
     a72:	54 e4       	ldi	r21, 0x44	; 68
     a74:	bc 01       	movw	r22, r24
     a76:	cd 01       	movw	r24, r26
     a78:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     a7c:	dc 01       	movw	r26, r24
     a7e:	cb 01       	movw	r24, r22
     a80:	bc 01       	movw	r22, r24
     a82:	cd 01       	movw	r24, r26
     a84:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     a88:	dc 01       	movw	r26, r24
     a8a:	cb 01       	movw	r24, r22
     a8c:	9e 8b       	std	Y+22, r25	; 0x16
     a8e:	8d 8b       	std	Y+21, r24	; 0x15

	angle_H = (unsigned char)(angle >> 8);
     a90:	8d 89       	ldd	r24, Y+21	; 0x15
     a92:	9e 89       	ldd	r25, Y+22	; 0x16
     a94:	89 2f       	mov	r24, r25
     a96:	99 27       	eor	r25, r25
     a98:	89 83       	std	Y+1, r24	; 0x01
	angle_L = (unsigned char)(angle & 0x00FF);
     a9a:	8d 89       	ldd	r24, Y+21	; 0x15
     a9c:	8a 83       	std	Y+2, r24	; 0x02

	speed |= (direction << 10);
     a9e:	89 8d       	ldd	r24, Y+25	; 0x19
     aa0:	88 2f       	mov	r24, r24
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	98 2f       	mov	r25, r24
     aa6:	88 27       	eor	r24, r24
     aa8:	99 0f       	add	r25, r25
     aaa:	99 0f       	add	r25, r25
     aac:	9c 01       	movw	r18, r24
     aae:	8f 89       	ldd	r24, Y+23	; 0x17
     ab0:	98 8d       	ldd	r25, Y+24	; 0x18
     ab2:	82 2b       	or	r24, r18
     ab4:	93 2b       	or	r25, r19
     ab6:	98 8f       	std	Y+24, r25	; 0x18
     ab8:	8f 8b       	std	Y+23, r24	; 0x17
	speed_H = (unsigned char)(speed >> 8);
     aba:	8f 89       	ldd	r24, Y+23	; 0x17
     abc:	98 8d       	ldd	r25, Y+24	; 0x18
     abe:	89 2f       	mov	r24, r25
     ac0:	99 27       	eor	r25, r25
     ac2:	8b 83       	std	Y+3, r24	; 0x03
	speed_L = (unsigned char)(speed & 0x00FF);
     ac4:	8f 89       	ldd	r24, Y+23	; 0x17
     ac6:	8c 83       	std	Y+4, r24	; 0x04

	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
     ac8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     aca:	88 2f       	mov	r24, r24
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	9c 01       	movw	r18, r24
     ad0:	28 5d       	subi	r18, 0xD8	; 216
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	88 2f       	mov	r24, r24
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	28 0f       	add	r18, r24
     adc:	39 1f       	adc	r19, r25
     ade:	8c 81       	ldd	r24, Y+4	; 0x04
     ae0:	88 2f       	mov	r24, r24
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	28 0f       	add	r18, r24
     ae6:	39 1f       	adc	r19, r25
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	88 2f       	mov	r24, r24
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	28 0f       	add	r18, r24
     af0:	39 1f       	adc	r19, r25
     af2:	8a 81       	ldd	r24, Y+2	; 0x02
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	82 0f       	add	r24, r18
     afa:	93 1f       	adc	r25, r19
     afc:	80 95       	com	r24
     afe:	90 95       	com	r25
     b00:	9e 83       	std	Y+6, r25	; 0x06
     b02:	8d 83       	std	Y+5, r24	; 0x05

	AX_StopReceiver();
     b04:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <AX_StopReceiver>

	AX_SendChar(START);
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(START);
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(id);
     b14:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b16:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(LENGTH);
     b1a:	87 e0       	ldi	r24, 0x07	; 7
     b1c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(INSTR);
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(ADDRESS);
     b26:	8e e1       	ldi	r24, 0x1E	; 30
     b28:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(angle_L);
     b2c:	8a 81       	ldd	r24, Y+2	; 0x02
     b2e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(angle_H);
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(speed_L);
     b38:	8c 81       	ldd	r24, Y+4	; 0x04
     b3a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(speed_H);
     b3e:	8b 81       	ldd	r24, Y+3	; 0x03
     b40:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(checksum);
     b44:	8d 81       	ldd	r24, Y+5	; 0x05
     b46:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>

	AX_StopTransmitter();
     b4a:	0e 94 bd 04 	call	0x97a	; 0x97a <AX_StopTransmitter>
	AX_ReleaseReceiver();
     b4e:	0e 94 01 05 	call	0xa02	; 0xa02 <AX_ReleaseReceiver>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a8 e4       	ldi	r26, 0x48	; 72
     b58:	b2 e4       	ldi	r27, 0x42	; 66
     b5a:	8f 83       	std	Y+7, r24	; 0x07
     b5c:	98 87       	std	Y+8, r25	; 0x08
     b5e:	a9 87       	std	Y+9, r26	; 0x09
     b60:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e4       	ldi	r19, 0x40	; 64
     b66:	4c e1       	ldi	r20, 0x1C	; 28
     b68:	55 e4       	ldi	r21, 0x45	; 69
     b6a:	6f 81       	ldd	r22, Y+7	; 0x07
     b6c:	78 85       	ldd	r23, Y+8	; 0x08
     b6e:	89 85       	ldd	r24, Y+9	; 0x09
     b70:	9a 85       	ldd	r25, Y+10	; 0x0a
     b72:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     b76:	dc 01       	movw	r26, r24
     b78:	cb 01       	movw	r24, r22
     b7a:	8b 87       	std	Y+11, r24	; 0x0b
     b7c:	9c 87       	std	Y+12, r25	; 0x0c
     b7e:	ad 87       	std	Y+13, r26	; 0x0d
     b80:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	40 e8       	ldi	r20, 0x80	; 128
     b88:	5f e3       	ldi	r21, 0x3F	; 63
     b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b90:	9e 85       	ldd	r25, Y+14	; 0x0e
     b92:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
     b96:	88 23       	and	r24, r24
     b98:	2c f4       	brge	.+10     	; 0xba4 <AX_SetAngle+0x182>
		__ticks = 1;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	98 8b       	std	Y+16, r25	; 0x10
     ba0:	8f 87       	std	Y+15, r24	; 0x0f
     ba2:	3f c0       	rjmp	.+126    	; 0xc22 <AX_SetAngle+0x200>
	else if (__tmp > 65535)
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	3f ef       	ldi	r19, 0xFF	; 255
     ba8:	4f e7       	ldi	r20, 0x7F	; 127
     baa:	57 e4       	ldi	r21, 0x47	; 71
     bac:	6b 85       	ldd	r22, Y+11	; 0x0b
     bae:	7c 85       	ldd	r23, Y+12	; 0x0c
     bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bb4:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
     bb8:	18 16       	cp	r1, r24
     bba:	4c f5       	brge	.+82     	; 0xc0e <AX_SetAngle+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e2       	ldi	r20, 0x20	; 32
     bc2:	51 e4       	ldi	r21, 0x41	; 65
     bc4:	6f 81       	ldd	r22, Y+7	; 0x07
     bc6:	78 85       	ldd	r23, Y+8	; 0x08
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	bc 01       	movw	r22, r24
     bd6:	cd 01       	movw	r24, r26
     bd8:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	98 8b       	std	Y+16, r25	; 0x10
     be2:	8f 87       	std	Y+15, r24	; 0x0f
     be4:	0f c0       	rjmp	.+30     	; 0xc04 <AX_SetAngle+0x1e2>
     be6:	8a ef       	ldi	r24, 0xFA	; 250
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	9a 8b       	std	Y+18, r25	; 0x12
     bec:	89 8b       	std	Y+17, r24	; 0x11
     bee:	89 89       	ldd	r24, Y+17	; 0x11
     bf0:	9a 89       	ldd	r25, Y+18	; 0x12
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <AX_SetAngle+0x1d0>
     bf6:	9a 8b       	std	Y+18, r25	; 0x12
     bf8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
     bfc:	98 89       	ldd	r25, Y+16	; 0x10
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	98 8b       	std	Y+16, r25	; 0x10
     c02:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c04:	8f 85       	ldd	r24, Y+15	; 0x0f
     c06:	98 89       	ldd	r25, Y+16	; 0x10
     c08:	89 2b       	or	r24, r25
     c0a:	69 f7       	brne	.-38     	; 0xbe6 <AX_SetAngle+0x1c4>
     c0c:	14 c0       	rjmp	.+40     	; 0xc36 <AX_SetAngle+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c10:	7c 85       	ldd	r23, Y+12	; 0x0c
     c12:	8d 85       	ldd	r24, Y+13	; 0x0d
     c14:	9e 85       	ldd	r25, Y+14	; 0x0e
     c16:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	98 8b       	std	Y+16, r25	; 0x10
     c20:	8f 87       	std	Y+15, r24	; 0x0f
     c22:	8f 85       	ldd	r24, Y+15	; 0x0f
     c24:	98 89       	ldd	r25, Y+16	; 0x10
     c26:	9c 8b       	std	Y+20, r25	; 0x14
     c28:	8b 8b       	std	Y+19, r24	; 0x13
     c2a:	8b 89       	ldd	r24, Y+19	; 0x13
     c2c:	9c 89       	ldd	r25, Y+20	; 0x14
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <AX_SetAngle+0x20c>
     c32:	9c 8b       	std	Y+20, r25	; 0x14
     c34:	8b 8b       	std	Y+19, r24	; 0x13

	_delay_ms(50);

	AX_ReleaseTransmitter();
     c36:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <AX_ReleaseTransmitter>
}
     c3a:	6a 96       	adiw	r28, 0x1a	; 26
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <AX_EndlessTurn>:


void AX_EndlessTurn(void)
{
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	60 97       	sbiw	r28, 0x10	; 16
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61

	unsigned int checksum;

	checksum = ~(0x01 + 0x07 + 0x03 + 0x06 + (1023 & 0xFF) + (1023 >> 8) & 0xFF);
     c60:	8c ee       	ldi	r24, 0xEC	; 236
     c62:	9f ef       	ldi	r25, 0xFF	; 255
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01

	AX_StopReceiver();
     c68:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <AX_StopReceiver>

	AX_SendChar(0xFF);
     c6c:	8f ef       	ldi	r24, 0xFF	; 255
     c6e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0xFF);
     c72:	8f ef       	ldi	r24, 0xFF	; 255
     c74:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x01);
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x07);
     c7e:	87 e0       	ldi	r24, 0x07	; 7
     c80:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x03);
     c84:	83 e0       	ldi	r24, 0x03	; 3
     c86:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x06);
     c8a:	86 e0       	ldi	r24, 0x06	; 6
     c8c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x00);
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x00);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(1023 & 0xFF);
     c9c:	8f ef       	ldi	r24, 0xFF	; 255
     c9e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(1023 >> 8);
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(checksum);
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>

	AX_StopTransmitter();
     cae:	0e 94 bd 04 	call	0x97a	; 0x97a <AX_StopTransmitter>
	AX_ReleaseReceiver();
     cb2:	0e 94 01 05 	call	0xa02	; 0xa02 <AX_ReleaseReceiver>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a8 e4       	ldi	r26, 0x48	; 72
     cbc:	b2 e4       	ldi	r27, 0x42	; 66
     cbe:	8b 83       	std	Y+3, r24	; 0x03
     cc0:	9c 83       	std	Y+4, r25	; 0x04
     cc2:	ad 83       	std	Y+5, r26	; 0x05
     cc4:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e4       	ldi	r19, 0x40	; 64
     cca:	4c e1       	ldi	r20, 0x1C	; 28
     ccc:	55 e4       	ldi	r21, 0x45	; 69
     cce:	6b 81       	ldd	r22, Y+3	; 0x03
     cd0:	7c 81       	ldd	r23, Y+4	; 0x04
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	8f 83       	std	Y+7, r24	; 0x07
     ce0:	98 87       	std	Y+8, r25	; 0x08
     ce2:	a9 87       	std	Y+9, r26	; 0x09
     ce4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
     cfa:	88 23       	and	r24, r24
     cfc:	2c f4       	brge	.+10     	; 0xd08 <AX_EndlessTurn+0xbc>
		__ticks = 1;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	9c 87       	std	Y+12, r25	; 0x0c
     d04:	8b 87       	std	Y+11, r24	; 0x0b
     d06:	3f c0       	rjmp	.+126    	; 0xd86 <AX_EndlessTurn+0x13a>
	else if (__tmp > 65535)
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
     d1c:	18 16       	cp	r1, r24
     d1e:	4c f5       	brge	.+82     	; 0xd72 <AX_EndlessTurn+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	6b 81       	ldd	r22, Y+3	; 0x03
     d2a:	7c 81       	ldd	r23, Y+4	; 0x04
     d2c:	8d 81       	ldd	r24, Y+5	; 0x05
     d2e:	9e 81       	ldd	r25, Y+6	; 0x06
     d30:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	bc 01       	movw	r22, r24
     d3a:	cd 01       	movw	r24, r26
     d3c:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	9c 87       	std	Y+12, r25	; 0x0c
     d46:	8b 87       	std	Y+11, r24	; 0x0b
     d48:	0f c0       	rjmp	.+30     	; 0xd68 <AX_EndlessTurn+0x11c>
     d4a:	8a ef       	ldi	r24, 0xFA	; 250
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	9e 87       	std	Y+14, r25	; 0x0e
     d50:	8d 87       	std	Y+13, r24	; 0x0d
     d52:	8d 85       	ldd	r24, Y+13	; 0x0d
     d54:	9e 85       	ldd	r25, Y+14	; 0x0e
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	f1 f7       	brne	.-4      	; 0xd56 <AX_EndlessTurn+0x10a>
     d5a:	9e 87       	std	Y+14, r25	; 0x0e
     d5c:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d60:	9c 85       	ldd	r25, Y+12	; 0x0c
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	9c 87       	std	Y+12, r25	; 0x0c
     d66:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d68:	8b 85       	ldd	r24, Y+11	; 0x0b
     d6a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d6c:	89 2b       	or	r24, r25
     d6e:	69 f7       	brne	.-38     	; 0xd4a <AX_EndlessTurn+0xfe>
     d70:	14 c0       	rjmp	.+40     	; 0xd9a <AX_EndlessTurn+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d72:	6f 81       	ldd	r22, Y+7	; 0x07
     d74:	78 85       	ldd	r23, Y+8	; 0x08
     d76:	89 85       	ldd	r24, Y+9	; 0x09
     d78:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7a:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	9c 87       	std	Y+12, r25	; 0x0c
     d84:	8b 87       	std	Y+11, r24	; 0x0b
     d86:	8b 85       	ldd	r24, Y+11	; 0x0b
     d88:	9c 85       	ldd	r25, Y+12	; 0x0c
     d8a:	98 8b       	std	Y+16, r25	; 0x10
     d8c:	8f 87       	std	Y+15, r24	; 0x0f
     d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d90:	98 89       	ldd	r25, Y+16	; 0x10
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <AX_EndlessTurn+0x146>
     d96:	98 8b       	std	Y+16, r25	; 0x10
     d98:	8f 87       	std	Y+15, r24	; 0x0f

	//AX_ReadStatus();
	_delay_ms(50);

	AX_ReleaseTransmitter();
     d9a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <AX_ReleaseTransmitter>
}
     d9e:	60 96       	adiw	r28, 0x10	; 16
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <AX_SetSpeed>:

void AX_SetSpeed(unsigned int direction, unsigned int speed)
{
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	28 97       	sbiw	r28, 0x08	; 8
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	8d 83       	std	Y+5, r24	; 0x05
     dc8:	78 87       	std	Y+8, r23	; 0x08
     dca:	6f 83       	std	Y+7, r22	; 0x07
	/*
		direction ---> TurnDirection -> 1 - ClockWise   0 - CounterClockWise
	*/

	unsigned int data = 0x0000;
     dcc:	1a 82       	std	Y+2, r1	; 0x02
     dce:	19 82       	std	Y+1, r1	; 0x01
	unsigned int checksum = 0;
     dd0:	1c 82       	std	Y+4, r1	; 0x04
     dd2:	1b 82       	std	Y+3, r1	; 0x03

	data = speed;
     dd4:	8f 81       	ldd	r24, Y+7	; 0x07
     dd6:	98 85       	ldd	r25, Y+8	; 0x08
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	89 83       	std	Y+1, r24	; 0x01
	data |= (direction << 10);
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	98 2f       	mov	r25, r24
     de2:	88 27       	eor	r24, r24
     de4:	99 0f       	add	r25, r25
     de6:	99 0f       	add	r25, r25
     de8:	29 81       	ldd	r18, Y+1	; 0x01
     dea:	3a 81       	ldd	r19, Y+2	; 0x02
     dec:	82 2b       	or	r24, r18
     dee:	93 2b       	or	r25, r19
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 83       	std	Y+1, r24	; 0x01


	checksum = ~(0x01 + 0x05 + 0x03 + 0x20 + data);
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	9a 81       	ldd	r25, Y+2	; 0x02
     df8:	89 96       	adiw	r24, 0x29	; 41
     dfa:	80 95       	com	r24
     dfc:	90 95       	com	r25
     dfe:	9c 83       	std	Y+4, r25	; 0x04
     e00:	8b 83       	std	Y+3, r24	; 0x03

	AX_StopReceiver();
     e02:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <AX_StopReceiver>

	AX_SendChar(0xFF);
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0xFF);
     e0c:	8f ef       	ldi	r24, 0xFF	; 255
     e0e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x01);
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x05);
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x03);
     e1e:	83 e0       	ldi	r24, 0x03	; 3
     e20:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x20);
     e24:	80 e2       	ldi	r24, 0x20	; 32
     e26:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(data);
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(data >> 8);
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	89 2f       	mov	r24, r25
     e36:	99 27       	eor	r25, r25
     e38:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(checksum);
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>

	AX_StopTransmitter();
     e42:	0e 94 bd 04 	call	0x97a	; 0x97a <AX_StopTransmitter>
	AX_ReleaseReceiver();
     e46:	0e 94 01 05 	call	0xa02	; 0xa02 <AX_ReleaseReceiver>

	AX_ReadStatus();
     e4a:	0e 94 90 04 	call	0x920	; 0x920 <AX_ReadStatus>

	AX_ReleaseTransmitter();
     e4e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <AX_ReleaseTransmitter>
}
     e52:	28 96       	adiw	r28, 0x08	; 8
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <__vector_18>:
static volatile unsigned char rxCounter[10];
//volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	00 90 5f 00 	lds	r0, 0x005F
     e6c:	0f 92       	push	r0
     e6e:	11 24       	eor	r1, r1
     e70:	00 90 5b 00 	lds	r0, 0x005B
     e74:	0f 92       	push	r0
     e76:	2f 93       	push	r18
     e78:	3f 93       	push	r19
     e7a:	4f 93       	push	r20
     e7c:	5f 93       	push	r21
     e7e:	8f 93       	push	r24
     e80:	9f 93       	push	r25
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <__vector_18+0x28>
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <__vector_18+0x2a>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     e92:	8d ee       	ldi	r24, 0xED	; 237
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	fc 01       	movw	r30, r24
     e98:	80 81       	ld	r24, Z
     e9a:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     e9c:	19 82       	std	Y+1, r1	; 0x01
     e9e:	a4 c0       	rjmp	.+328    	; 0xfe8 <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
     ea0:	8d ee       	ldi	r24, 0xED	; 237
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	29 81       	ldd	r18, Y+1	; 0x01
     ea6:	22 95       	swap	r18
     ea8:	20 7f       	andi	r18, 0xF0	; 240
     eaa:	fc 01       	movw	r30, r24
     eac:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     eae:	8e ee       	ldi	r24, 0xEE	; 238
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	fc 01       	movw	r30, r24
     eb4:	80 81       	ld	r24, Z
     eb6:	82 95       	swap	r24
     eb8:	86 95       	lsr	r24
     eba:	87 70       	andi	r24, 0x07	; 7
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	81 70       	andi	r24, 0x01	; 1
     ec2:	99 27       	eor	r25, r25
     ec4:	89 2b       	or	r24, r25
     ec6:	09 f4       	brne	.+2      	; 0xeca <__vector_18+0x66>
     ec8:	70 c0       	rjmp	.+224    	; 0xfaa <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     eca:	8f ee       	ldi	r24, 0xEF	; 239
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	20 e8       	ldi	r18, 0x80	; 128
     ed0:	fc 01       	movw	r30, r24
     ed2:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     ed4:	8e ee       	ldi	r24, 0xEE	; 238
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	2e ee       	ldi	r18, 0xEE	; 238
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	f9 01       	movw	r30, r18
     ede:	20 81       	ld	r18, Z
     ee0:	2f 7d       	andi	r18, 0xDF	; 223
     ee2:	fc 01       	movw	r30, r24
     ee4:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     ee6:	82 ef       	ldi	r24, 0xF2	; 242
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	fc 01       	movw	r30, r24
     eec:	80 81       	ld	r24, Z
     eee:	82 95       	swap	r24
     ef0:	86 95       	lsr	r24
     ef2:	87 70       	andi	r24, 0x07	; 7
     ef4:	28 2f       	mov	r18, r24
     ef6:	83 ef       	ldi	r24, 0xF3	; 243
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	fc 01       	movw	r30, r24
     efc:	80 81       	ld	r24, Z
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	82 2b       	or	r24, r18
     f10:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
     f12:	1a 82       	std	Y+2, r1	; 0x02
     f14:	26 c0       	rjmp	.+76     	; 0xf62 <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	81 50       	subi	r24, 0x01	; 1
     f1e:	90 48       	sbci	r25, 0x80	; 128
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	82 5e       	subi	r24, 0xE2	; 226
     f26:	9e 4f       	sbci	r25, 0xFE	; 254
     f28:	fc 01       	movw	r30, r24
     f2a:	20 81       	ld	r18, Z
     f2c:	31 81       	ldd	r19, Z+1	; 0x01
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	8e 5c       	subi	r24, 0xCE	; 206
     f38:	9e 4f       	sbci	r25, 0xFE	; 254
     f3a:	fc 01       	movw	r30, r24
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	84 0f       	add	r24, r20
     f4a:	95 1f       	adc	r25, r21
     f4c:	82 0f       	add	r24, r18
     f4e:	93 1f       	adc	r25, r19
     f50:	2a ef       	ldi	r18, 0xFA	; 250
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	f9 01       	movw	r30, r18
     f56:	20 81       	ld	r18, Z
     f58:	fc 01       	movw	r30, r24
     f5a:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	8a 83       	std	Y+2, r24	; 0x02
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	88 30       	cpi	r24, 0x08	; 8
     f66:	b8 f2       	brcs	.-82     	; 0xf16 <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	8e 5c       	subi	r24, 0xCE	; 206
     f72:	9e 4f       	sbci	r25, 0xFE	; 254
     f74:	fc 01       	movw	r30, r24
     f76:	20 81       	ld	r18, Z
     f78:	2f 5f       	subi	r18, 0xFF	; 255
     f7a:	fc 01       	movw	r30, r24
     f7c:	20 83       	st	Z, r18
     f7e:	25 30       	cpi	r18, 0x05	; 5
     f80:	41 f4       	brne	.+16     	; 0xf92 <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	8e 5c       	subi	r24, 0xCE	; 206
     f8c:	9e 4f       	sbci	r25, 0xFE	; 254
     f8e:	fc 01       	movw	r30, r24
     f90:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	8a 5b       	subi	r24, 0xBA	; 186
     f9c:	9e 4f       	sbci	r25, 0xFE	; 254
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 81       	ld	r18, Z
     fa2:	2f 5f       	subi	r18, 0xFF	; 255
     fa4:	fc 01       	movw	r30, r24
     fa6:	20 83       	st	Z, r18

			break;
     fa8:	23 c0       	rjmp	.+70     	; 0xff0 <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     faa:	8e ee       	ldi	r24, 0xEE	; 238
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	fc 01       	movw	r30, r24
     fb0:	80 81       	ld	r24, Z
     fb2:	82 95       	swap	r24
     fb4:	86 95       	lsr	r24
     fb6:	86 95       	lsr	r24
     fb8:	83 70       	andi	r24, 0x03	; 3
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	81 70       	andi	r24, 0x01	; 1
     fc0:	99 27       	eor	r25, r25
     fc2:	89 2b       	or	r24, r25
     fc4:	71 f0       	breq	.+28     	; 0xfe2 <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
     fc6:	8f ee       	ldi	r24, 0xEF	; 239
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	fc 01       	movw	r30, r24
     fcc:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     fce:	8e ee       	ldi	r24, 0xEE	; 238
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	2e ee       	ldi	r18, 0xEE	; 238
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	f9 01       	movw	r30, r18
     fd8:	20 81       	ld	r18, Z
     fda:	2f 7b       	andi	r18, 0xBF	; 191
     fdc:	fc 01       	movw	r30, r24
     fde:	20 83       	st	Z, r18

			break;
     fe0:	07 c0       	rjmp	.+14     	; 0xff0 <__vector_18+0x18c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	8f 5f       	subi	r24, 0xFF	; 255
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	8f 30       	cpi	r24, 0x0F	; 15
     fec:	08 f4       	brcc	.+2      	; 0xff0 <__vector_18+0x18c>
     fee:	58 cf       	rjmp	.-336    	; 0xea0 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     ff0:	8d ee       	ldi	r24, 0xED	; 237
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	2b 81       	ldd	r18, Y+3	; 0x03
     ff6:	fc 01       	movw	r30, r24
     ff8:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // zato sto tako treba.
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	ff 91       	pop	r31
    1008:	ef 91       	pop	r30
    100a:	9f 91       	pop	r25
    100c:	8f 91       	pop	r24
    100e:	5f 91       	pop	r21
    1010:	4f 91       	pop	r20
    1012:	3f 91       	pop	r19
    1014:	2f 91       	pop	r18
    1016:	0f 90       	pop	r0
    1018:	00 92 5b 00 	sts	0x005B, r0
    101c:	0f 90       	pop	r0
    101e:	00 92 5f 00 	sts	0x005F, r0
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <CAN_InitModule>:


static void CAN_InitModule(void)
{
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	00 d0       	rcall	.+0      	; 0x102e <CAN_InitModule+0x6>
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
    1032:	88 ed       	ldi	r24, 0xD8	; 216
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	21 e0       	ldi	r18, 0x01	; 1
    1038:	fc 01       	movw	r30, r24
    103a:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    103c:	19 82       	std	Y+1, r1	; 0x01
    103e:	3e c0       	rjmp	.+124    	; 0x10bc <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
    1040:	8d ee       	ldi	r24, 0xED	; 237
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	29 81       	ldd	r18, Y+1	; 0x01
    1046:	22 95       	swap	r18
    1048:	20 7f       	andi	r18, 0xF0	; 240
    104a:	fc 01       	movw	r30, r24
    104c:	20 83       	st	Z, r18

		CANSTMOB = 0;
    104e:	8e ee       	ldi	r24, 0xEE	; 238
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	fc 01       	movw	r30, r24
    1054:	10 82       	st	Z, r1
		CANCDMOB = 0;
    1056:	8f ee       	ldi	r24, 0xEF	; 239
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	fc 01       	movw	r30, r24
    105c:	10 82       	st	Z, r1

		CANIDT1 = 0;
    105e:	83 ef       	ldi	r24, 0xF3	; 243
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	fc 01       	movw	r30, r24
    1064:	10 82       	st	Z, r1
		CANIDT2 = 0;
    1066:	82 ef       	ldi	r24, 0xF2	; 242
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	fc 01       	movw	r30, r24
    106c:	10 82       	st	Z, r1
		CANIDT3 = 0;
    106e:	81 ef       	ldi	r24, 0xF1	; 241
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	fc 01       	movw	r30, r24
    1074:	10 82       	st	Z, r1
		CANIDT4 = 0;
    1076:	80 ef       	ldi	r24, 0xF0	; 240
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	fc 01       	movw	r30, r24
    107c:	10 82       	st	Z, r1
		CANIDM1 = 0;
    107e:	87 ef       	ldi	r24, 0xF7	; 247
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	fc 01       	movw	r30, r24
    1084:	10 82       	st	Z, r1
		CANIDM2 = 0;
    1086:	86 ef       	ldi	r24, 0xF6	; 246
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	fc 01       	movw	r30, r24
    108c:	10 82       	st	Z, r1
		CANIDM3 = 0;
    108e:	85 ef       	ldi	r24, 0xF5	; 245
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	fc 01       	movw	r30, r24
    1094:	10 82       	st	Z, r1
		CANIDM4 = 0;
    1096:	84 ef       	ldi	r24, 0xF4	; 244
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	fc 01       	movw	r30, r24
    109c:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    109e:	1a 82       	std	Y+2, r1	; 0x02
    10a0:	07 c0       	rjmp	.+14     	; 0x10b0 <CAN_InitModule+0x88>
			CANMSG = 0;
    10a2:	8a ef       	ldi	r24, 0xFA	; 250
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	fc 01       	movw	r30, r24
    10a8:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	8f 5f       	subi	r24, 0xFF	; 255
    10ae:	8a 83       	std	Y+2, r24	; 0x02
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	88 30       	cpi	r24, 0x08	; 8
    10b4:	b0 f3       	brcs	.-20     	; 0x10a2 <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	8f 5f       	subi	r24, 0xFF	; 255
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	8f 30       	cpi	r24, 0x0F	; 15
    10c0:	08 f4       	brcc	.+2      	; 0x10c4 <CAN_InitModule+0x9c>
    10c2:	be cf       	rjmp	.-132    	; 0x1040 <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
    10c4:	88 ed       	ldi	r24, 0xD8	; 216
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	22 e0       	ldi	r18, 0x02	; 2
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
    10ce:	82 ee       	ldi	r24, 0xE2	; 226
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	fc 01       	movw	r30, r24
    10d6:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
    10d8:	83 ee       	ldi	r24, 0xE3	; 227
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	28 e0       	ldi	r18, 0x08	; 8
    10de:	fc 01       	movw	r30, r24
    10e0:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
    10e2:	84 ee       	ldi	r24, 0xE4	; 228
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	2e e5       	ldi	r18, 0x5E	; 94
    10e8:	fc 01       	movw	r30, r24
    10ea:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
    10ec:	85 ee       	ldi	r24, 0xE5	; 229
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	fc 01       	movw	r30, r24
    10f2:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
    10f4:	8b ed       	ldi	r24, 0xDB	; 219
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	20 eb       	ldi	r18, 0xB0	; 176
    10fa:	fc 01       	movw	r30, r24
    10fc:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
    10fe:	8f ed       	ldi	r24, 0xDF	; 223
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	2f e7       	ldi	r18, 0x7F	; 127
    1104:	fc 01       	movw	r30, r24
    1106:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
    1108:	8e ed       	ldi	r24, 0xDE	; 222
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	2f ef       	ldi	r18, 0xFF	; 255
    110e:	fc 01       	movw	r30, r24
    1110:	20 83       	st	Z, r18
	sei();
    1112:	78 94       	sei
}
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	00 d0       	rcall	.+0      	; 0x1124 <CAN_InitRxMob+0x6>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <CAN_InitRxMob+0x8>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	9c 83       	std	Y+4, r25	; 0x04
    112c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    112e:	8d ee       	ldi	r24, 0xED	; 237
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	fc 01       	movw	r30, r24
    1134:	80 81       	ld	r24, Z
    1136:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    1138:	00 00       	nop
    113a:	89 ed       	ldi	r24, 0xD9	; 217
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	fc 01       	movw	r30, r24
    1140:	80 81       	ld	r24, Z
    1142:	82 95       	swap	r24
    1144:	8f 70       	andi	r24, 0x0F	; 15
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	81 70       	andi	r24, 0x01	; 1
    114c:	99 27       	eor	r25, r25
    114e:	89 2b       	or	r24, r25
    1150:	a1 f7       	brne	.-24     	; 0x113a <CAN_InitRxMob+0x1c>
    1152:	89 ed       	ldi	r24, 0xD9	; 217
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	fc 01       	movw	r30, r24
    1158:	80 81       	ld	r24, Z
    115a:	86 95       	lsr	r24
    115c:	86 95       	lsr	r24
    115e:	86 95       	lsr	r24
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	81 70       	andi	r24, 0x01	; 1
    1166:	99 27       	eor	r25, r25
    1168:	89 2b       	or	r24, r25
    116a:	39 f7       	brne	.-50     	; 0x113a <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    116c:	19 82       	std	Y+1, r1	; 0x01
    116e:	49 c0       	rjmp	.+146    	; 0x1202 <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
    1170:	8d ee       	ldi	r24, 0xED	; 237
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	29 81       	ldd	r18, Y+1	; 0x01
    1176:	22 95       	swap	r18
    1178:	20 7f       	andi	r18, 0xF0	; 240
    117a:	fc 01       	movw	r30, r24
    117c:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
    117e:	8f ee       	ldi	r24, 0xEF	; 239
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	fc 01       	movw	r30, r24
    1184:	80 81       	ld	r24, Z
    1186:	82 95       	swap	r24
    1188:	86 95       	lsr	r24
    118a:	86 95       	lsr	r24
    118c:	83 70       	andi	r24, 0x03	; 3
    118e:	88 23       	and	r24, r24
    1190:	21 f0       	breq	.+8      	; 0x119a <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	34 c0       	rjmp	.+104    	; 0x1202 <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
    119a:	8f ee       	ldi	r24, 0xEF	; 239
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	2f e0       	ldi	r18, 0x0F	; 15
    11a0:	fc 01       	movw	r30, r24
    11a2:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
    11a4:	83 ef       	ldi	r24, 0xF3	; 243
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	33 27       	eor	r19, r19
    11ae:	36 95       	lsr	r19
    11b0:	27 95       	ror	r18
    11b2:	36 95       	lsr	r19
    11b4:	27 95       	ror	r18
    11b6:	36 95       	lsr	r19
    11b8:	27 95       	ror	r18
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
    11be:	82 ef       	ldi	r24, 0xF2	; 242
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	2b 81       	ldd	r18, Y+3	; 0x03
    11c4:	22 95       	swap	r18
    11c6:	22 0f       	add	r18, r18
    11c8:	20 7e       	andi	r18, 0xE0	; 224
    11ca:	fc 01       	movw	r30, r24
    11cc:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
    11ce:	86 ef       	ldi	r24, 0xF6	; 246
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	20 ee       	ldi	r18, 0xE0	; 224
    11d4:	fc 01       	movw	r30, r24
    11d6:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
    11d8:	87 ef       	ldi	r24, 0xF7	; 247
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	2f ef       	ldi	r18, 0xFF	; 255
    11de:	fc 01       	movw	r30, r24
    11e0:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
    11e2:	8f ee       	ldi	r24, 0xEF	; 239
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	2f ee       	ldi	r18, 0xEF	; 239
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	f9 01       	movw	r30, r18
    11ec:	20 81       	ld	r18, Z
    11ee:	20 68       	ori	r18, 0x80	; 128
    11f0:	fc 01       	movw	r30, r24
    11f2:	20 83       	st	Z, r18

		CANPAGE = tempPage;
    11f4:	8d ee       	ldi	r24, 0xED	; 237
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	2a 81       	ldd	r18, Y+2	; 0x02
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 83       	st	Z, r18

		return 1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	0a c0       	rjmp	.+20     	; 0x1216 <CAN_InitRxMob+0xf8>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	8f 30       	cpi	r24, 0x0F	; 15
    1206:	08 f4       	brcc	.+2      	; 0x120a <CAN_InitRxMob+0xec>
    1208:	b3 cf       	rjmp	.-154    	; 0x1170 <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
    120a:	8d ee       	ldi	r24, 0xED	; 237
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	2a 81       	ldd	r18, Y+2	; 0x02
    1210:	fc 01       	movw	r30, r24
    1212:	20 83       	st	Z, r18

	return 0;
    1214:	80 e0       	ldi	r24, 0x00	; 0
}
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	00 d0       	rcall	.+0      	; 0x122e <CAN_Init+0xa>
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
    1234:	0e 94 14 08 	call	0x1028	; 0x1028 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    1238:	19 82       	std	Y+1, r1	; 0x01
    123a:	30 c0       	rjmp	.+96     	; 0x129c <CAN_Init+0x78>
	{
		CAN_InitRxMob(i + 1);
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	0e 94 8f 08 	call	0x111e	; 0x111e <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	8c 01       	movw	r16, r24
    1254:	02 5e       	subi	r16, 0xE2	; 226
    1256:	1e 4f       	sbci	r17, 0xFE	; 254
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	85 e0       	ldi	r24, 0x05	; 5
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <calloc>
    1264:	f8 01       	movw	r30, r16
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	29 81       	ldd	r18, Y+1	; 0x01
    1272:	22 2f       	mov	r18, r18
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	49 81       	ldd	r20, Y+1	; 0x01
    1278:	44 2f       	mov	r20, r20
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	4a 5b       	subi	r20, 0xBA	; 186
    1280:	5e 4f       	sbci	r21, 0xFE	; 254
    1282:	fa 01       	movw	r30, r20
    1284:	60 83       	st	Z, r22
    1286:	24 5c       	subi	r18, 0xC4	; 196
    1288:	3e 4f       	sbci	r19, 0xFE	; 254
    128a:	f9 01       	movw	r30, r18
    128c:	60 83       	st	Z, r22
    128e:	8e 5c       	subi	r24, 0xCE	; 206
    1290:	9e 4f       	sbci	r25, 0xFE	; 254
    1292:	fc 01       	movw	r30, r24
    1294:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	99 81       	ldd	r25, Y+1	; 0x01
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	98 17       	cp	r25, r24
    12a2:	60 f2       	brcs	.-104    	; 0x123c <CAN_Init+0x18>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	08 95       	ret

000012b2 <CAN_CheckRX>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	1f 92       	push	r1
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	89 83       	std	Y+1, r24	; 0x01
	return rxCounter[nodeID - 1];
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	8a 5b       	subi	r24, 0xBA	; 186
    12c8:	9e 4f       	sbci	r25, 0xFE	; 254
    12ca:	fc 01       	movw	r30, r24
    12cc:	80 81       	ld	r24, Z
}
    12ce:	0f 90       	pop	r0
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	08 95       	ret

000012d6 <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	00 d0       	rcall	.+0      	; 0x12dc <CAN_Read+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <CAN_Read+0x8>
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	9b 83       	std	Y+3, r25	; 0x03
    12e4:	8a 83       	std	Y+2, r24	; 0x02
    12e6:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
    12e8:	84 e3       	ldi	r24, 0x34	; 52
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	2f ef       	ldi	r18, 0xFF	; 255
    12ee:	fc 01       	movw	r30, r24
    12f0:	20 83       	st	Z, r18
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
    12f2:	00 00       	nop
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	8a 5b       	subi	r24, 0xBA	; 186
    12fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1300:	fc 01       	movw	r30, r24
    1302:	80 81       	ld	r24, Z
    1304:	88 23       	and	r24, r24
    1306:	b1 f3       	breq	.-20     	; 0x12f4 <CAN_Read+0x1e>

	for(i = 0; i < 8; ++i)
    1308:	19 82       	std	Y+1, r1	; 0x01
    130a:	2c c0       	rjmp	.+88     	; 0x1364 <CAN_Read+0x8e>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	2a 81       	ldd	r18, Y+2	; 0x02
    1314:	3b 81       	ldd	r19, Y+3	; 0x03
    1316:	82 0f       	add	r24, r18
    1318:	93 1f       	adc	r25, r19
    131a:	2c 81       	ldd	r18, Y+4	; 0x04
    131c:	22 2f       	mov	r18, r18
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	21 50       	subi	r18, 0x01	; 1
    1322:	30 48       	sbci	r19, 0x80	; 128
    1324:	22 0f       	add	r18, r18
    1326:	33 1f       	adc	r19, r19
    1328:	22 5e       	subi	r18, 0xE2	; 226
    132a:	3e 4f       	sbci	r19, 0xFE	; 254
    132c:	f9 01       	movw	r30, r18
    132e:	40 81       	ld	r20, Z
    1330:	51 81       	ldd	r21, Z+1	; 0x01
    1332:	2c 81       	ldd	r18, Y+4	; 0x04
    1334:	22 2f       	mov	r18, r18
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	21 50       	subi	r18, 0x01	; 1
    133a:	31 09       	sbc	r19, r1
    133c:	24 5c       	subi	r18, 0xC4	; 196
    133e:	3e 4f       	sbci	r19, 0xFE	; 254
    1340:	f9 01       	movw	r30, r18
    1342:	20 81       	ld	r18, Z
    1344:	62 2f       	mov	r22, r18
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	29 81       	ldd	r18, Y+1	; 0x01
    134a:	22 2f       	mov	r18, r18
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	26 0f       	add	r18, r22
    1350:	37 1f       	adc	r19, r23
    1352:	24 0f       	add	r18, r20
    1354:	35 1f       	adc	r19, r21
    1356:	f9 01       	movw	r30, r18
    1358:	20 81       	ld	r18, Z
    135a:	fc 01       	movw	r30, r24
    135c:	20 83       	st	Z, r18
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	8f 5f       	subi	r24, 0xFF	; 255
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	88 30       	cpi	r24, 0x08	; 8
    1368:	88 f2       	brcs	.-94     	; 0x130c <CAN_Read+0x36>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	84 5c       	subi	r24, 0xC4	; 196
    1374:	9e 4f       	sbci	r25, 0xFE	; 254
    1376:	fc 01       	movw	r30, r24
    1378:	20 81       	ld	r18, Z
    137a:	2f 5f       	subi	r18, 0xFF	; 255
    137c:	fc 01       	movw	r30, r24
    137e:	20 83       	st	Z, r18
    1380:	25 30       	cpi	r18, 0x05	; 5
    1382:	41 f4       	brne	.+16     	; 0x1394 <CAN_Read+0xbe>
	*(rxRdIndex + sendingNodeID - 1) = 0;
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	88 2f       	mov	r24, r24
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	84 5c       	subi	r24, 0xC4	; 196
    138e:	9e 4f       	sbci	r25, 0xFE	; 254
    1390:	fc 01       	movw	r30, r24
    1392:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	9c 01       	movw	r18, r24
    139e:	2a 5b       	subi	r18, 0xBA	; 186
    13a0:	3e 4f       	sbci	r19, 0xFE	; 254
    13a2:	f9 01       	movw	r30, r18
    13a4:	20 81       	ld	r18, Z
    13a6:	21 50       	subi	r18, 0x01	; 1
    13a8:	8a 5b       	subi	r24, 0xBA	; 186
    13aa:	9e 4f       	sbci	r25, 0xFE	; 254
    13ac:	fc 01       	movw	r30, r24
    13ae:	20 83       	st	Z, r18

	return 0;
    13b0:	80 e0       	ldi	r24, 0x00	; 0
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <CAN_Write+0x6>
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <CAN_Write+0x8>
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <CAN_Write+0xa>
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	9d 83       	std	Y+5, r25	; 0x05
    13d0:	8c 83       	std	Y+4, r24	; 0x04
    13d2:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    13d4:	00 00       	nop
    13d6:	89 ed       	ldi	r24, 0xD9	; 217
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	fc 01       	movw	r30, r24
    13dc:	80 81       	ld	r24, Z
    13de:	82 95       	swap	r24
    13e0:	8f 70       	andi	r24, 0x0F	; 15
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	81 70       	andi	r24, 0x01	; 1
    13e8:	99 27       	eor	r25, r25
    13ea:	89 2b       	or	r24, r25
    13ec:	a1 f7       	brne	.-24     	; 0x13d6 <CAN_Write+0x16>
    13ee:	89 ed       	ldi	r24, 0xD9	; 217
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	fc 01       	movw	r30, r24
    13f4:	80 81       	ld	r24, Z
    13f6:	86 95       	lsr	r24
    13f8:	86 95       	lsr	r24
    13fa:	86 95       	lsr	r24
    13fc:	88 2f       	mov	r24, r24
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	81 70       	andi	r24, 0x01	; 1
    1402:	99 27       	eor	r25, r25
    1404:	89 2b       	or	r24, r25
    1406:	39 f7       	brne	.-50     	; 0x13d6 <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    1408:	8d ee       	ldi	r24, 0xED	; 237
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	fc 01       	movw	r30, r24
    140e:	80 81       	ld	r24, Z
    1410:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
    1412:	1a 82       	std	Y+2, r1	; 0x02
    1414:	15 c0       	rjmp	.+42     	; 0x1440 <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
    1416:	8d ee       	ldi	r24, 0xED	; 237
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	2a 81       	ldd	r18, Y+2	; 0x02
    141c:	22 95       	swap	r18
    141e:	20 7f       	andi	r18, 0xF0	; 240
    1420:	fc 01       	movw	r30, r24
    1422:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
    1424:	8f ee       	ldi	r24, 0xEF	; 239
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	fc 01       	movw	r30, r24
    142a:	80 81       	ld	r24, Z
    142c:	82 95       	swap	r24
    142e:	86 95       	lsr	r24
    1430:	86 95       	lsr	r24
    1432:	83 70       	andi	r24, 0x03	; 3
    1434:	88 23       	and	r24, r24
    1436:	09 f4       	brne	.+2      	; 0x143a <CAN_Write+0x7a>
			break;
    1438:	06 c0       	rjmp	.+12     	; 0x1446 <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	8f 5f       	subi	r24, 0xFF	; 255
    143e:	8a 83       	std	Y+2, r24	; 0x02
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	8f 30       	cpi	r24, 0x0F	; 15
    1444:	40 f3       	brcs	.-48     	; 0x1416 <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	8f 30       	cpi	r24, 0x0F	; 15
    144a:	11 f4       	brne	.+4      	; 0x1450 <CAN_Write+0x90>
		return -1;
    144c:	8f ef       	ldi	r24, 0xFF	; 255
    144e:	39 c0       	rjmp	.+114    	; 0x14c2 <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
    1450:	82 ef       	ldi	r24, 0xF2	; 242
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	2e 81       	ldd	r18, Y+6	; 0x06
    1456:	22 95       	swap	r18
    1458:	22 0f       	add	r18, r18
    145a:	20 7e       	andi	r18, 0xE0	; 224
    145c:	fc 01       	movw	r30, r24
    145e:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
    1460:	83 ef       	ldi	r24, 0xF3	; 243
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	2e 81       	ldd	r18, Y+6	; 0x06
    1466:	26 95       	lsr	r18
    1468:	26 95       	lsr	r18
    146a:	26 95       	lsr	r18
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
    1470:	8f ee       	ldi	r24, 0xEF	; 239
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	28 e0       	ldi	r18, 0x08	; 8
    1476:	fc 01       	movw	r30, r24
    1478:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    147a:	19 82       	std	Y+1, r1	; 0x01
    147c:	10 c0       	rjmp	.+32     	; 0x149e <CAN_Write+0xde>
		CANMSG = data[i];
    147e:	8a ef       	ldi	r24, 0xFA	; 250
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	29 81       	ldd	r18, Y+1	; 0x01
    1484:	22 2f       	mov	r18, r18
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	4c 81       	ldd	r20, Y+4	; 0x04
    148a:	5d 81       	ldd	r21, Y+5	; 0x05
    148c:	24 0f       	add	r18, r20
    148e:	35 1f       	adc	r19, r21
    1490:	f9 01       	movw	r30, r18
    1492:	20 81       	ld	r18, Z
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	88 30       	cpi	r24, 0x08	; 8
    14a2:	68 f3       	brcs	.-38     	; 0x147e <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
    14a4:	8f ee       	ldi	r24, 0xEF	; 239
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	2f ee       	ldi	r18, 0xEF	; 239
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	f9 01       	movw	r30, r18
    14ae:	20 81       	ld	r18, Z
    14b0:	20 64       	ori	r18, 0x40	; 64
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18

	CANPAGE = tempPage;
    14b6:	8d ee       	ldi	r24, 0xED	; 237
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	2b 81       	ldd	r18, Y+3	; 0x03
    14bc:	fc 01       	movw	r30, r24
    14be:	20 83       	st	Z, r18

	return 0;
    14c0:	80 e0       	ldi	r24, 0x00	; 0
}
    14c2:	26 96       	adiw	r28, 0x06	; 6
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	00 d0       	rcall	.+0      	; 0x14da <__list_add+0x6>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <__list_add+0x8>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <__list_add+0xa>
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	7c 83       	std	Y+4, r23	; 0x04
    14e8:	6b 83       	std	Y+3, r22	; 0x03
    14ea:	5e 83       	std	Y+6, r21	; 0x06
    14ec:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	29 81       	ldd	r18, Y+1	; 0x01
    14f4:	3a 81       	ldd	r19, Y+2	; 0x02
    14f6:	fc 01       	movw	r30, r24
    14f8:	31 83       	std	Z+1, r19	; 0x01
    14fa:	20 83       	st	Z, r18
    new->next = next;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	2d 81       	ldd	r18, Y+5	; 0x05
    1502:	3e 81       	ldd	r19, Y+6	; 0x06
    1504:	fc 01       	movw	r30, r24
    1506:	33 83       	std	Z+3, r19	; 0x03
    1508:	22 83       	std	Z+2, r18	; 0x02
    new->prev = prev;
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	9a 81       	ldd	r25, Y+2	; 0x02
    150e:	2b 81       	ldd	r18, Y+3	; 0x03
    1510:	3c 81       	ldd	r19, Y+4	; 0x04
    1512:	fc 01       	movw	r30, r24
    1514:	31 83       	std	Z+1, r19	; 0x01
    1516:	20 83       	st	Z, r18
    prev->next = new;
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	29 81       	ldd	r18, Y+1	; 0x01
    151e:	3a 81       	ldd	r19, Y+2	; 0x02
    1520:	fc 01       	movw	r30, r24
    1522:	33 83       	std	Z+3, r19	; 0x03
    1524:	22 83       	std	Z+2, r18	; 0x02
}
    1526:	26 96       	adiw	r28, 0x06	; 6
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

00001538 <list_add>:

static inline void list_add(struct list_head* new, struct list_head* head)
{
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	00 d0       	rcall	.+0      	; 0x153e <list_add+0x6>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <list_add+0x8>
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	9a 83       	std	Y+2, r25	; 0x02
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	7c 83       	std	Y+4, r23	; 0x04
    154a:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	fc 01       	movw	r30, r24
    1552:	42 81       	ldd	r20, Z+2	; 0x02
    1554:	53 81       	ldd	r21, Z+3	; 0x03
    1556:	2b 81       	ldd	r18, Y+3	; 0x03
    1558:	3c 81       	ldd	r19, Y+4	; 0x04
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
    155e:	b9 01       	movw	r22, r18
    1560:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__list_add>
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	2b 97       	sbiw	r28, 0x0b	; 11
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	89 87       	std	Y+9, r24	; 0x09
    1588:	6a 87       	std	Y+10, r22	; 0x0a
    158a:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    158c:	80 91 08 01 	lds	r24, 0x0108
    1590:	90 91 09 01 	lds	r25, 0x0109
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	8b 83       	std	Y+3, r24	; 0x03
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	06 97       	sbiw	r24, 0x06	; 6
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	15 c0       	rjmp	.+42     	; 0x15ce <gpio_register_pin+0x5c>
    {
        if(input->pin == pin)
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	9a 81       	ldd	r25, Y+2	; 0x02
    15a8:	fc 01       	movw	r30, r24
    15aa:	90 81       	ld	r25, Z
    15ac:	89 85       	ldd	r24, Y+9	; 0x09
    15ae:	98 17       	cp	r25, r24
    15b0:	11 f4       	brne	.+4      	; 0x15b6 <gpio_register_pin+0x44>
            return 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	e5 c0       	rjmp	.+458    	; 0x1780 <gpio_register_pin+0x20e>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ba:	fc 01       	movw	r30, r24
    15bc:	80 85       	ldd	r24, Z+8	; 0x08
    15be:	91 85       	ldd	r25, Z+9	; 0x09
    15c0:	9e 83       	std	Y+6, r25	; 0x06
    15c2:	8d 83       	std	Y+5, r24	; 0x05
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	06 97       	sbiw	r24, 0x06	; 6
    15ca:	9a 83       	std	Y+2, r25	; 0x02
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	06 96       	adiw	r24, 0x06	; 6
    15d4:	86 50       	subi	r24, 0x06	; 6
    15d6:	91 40       	sbci	r25, 0x01	; 1
    15d8:	29 f7       	brne	.-54     	; 0x15a4 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    15da:	89 85       	ldd	r24, Y+9	; 0x09
    15dc:	86 95       	lsr	r24
    15de:	86 95       	lsr	r24
    15e0:	86 95       	lsr	r24
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t pin_reg = pin % 8;
    15e6:	89 85       	ldd	r24, Y+9	; 0x09
    15e8:	87 70       	andi	r24, 0x07	; 7
    15ea:	88 87       	std	Y+8, r24	; 0x08

	if(direction == GPIO_DIRECTION_OUTPUT)
    15ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <gpio_register_pin+0x82>
    15f2:	55 c0       	rjmp	.+170    	; 0x169e <gpio_register_pin+0x12c>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    15f4:	8f 81       	ldd	r24, Y+7	; 0x07
    15f6:	88 2f       	mov	r24, r24
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9c 01       	movw	r18, r24
    15fc:	21 50       	subi	r18, 0x01	; 1
    15fe:	31 09       	sbc	r19, r1
    1600:	c9 01       	movw	r24, r18
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	82 0f       	add	r24, r18
    1608:	93 1f       	adc	r25, r19
    160a:	81 96       	adiw	r24, 0x21	; 33
    160c:	ac 01       	movw	r20, r24
    160e:	8f 81       	ldd	r24, Y+7	; 0x07
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9c 01       	movw	r18, r24
    1616:	21 50       	subi	r18, 0x01	; 1
    1618:	31 09       	sbc	r19, r1
    161a:	c9 01       	movw	r24, r18
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	82 0f       	add	r24, r18
    1622:	93 1f       	adc	r25, r19
    1624:	81 96       	adiw	r24, 0x21	; 33
    1626:	fc 01       	movw	r30, r24
    1628:	80 81       	ld	r24, Z
    162a:	68 2f       	mov	r22, r24
    162c:	88 85       	ldd	r24, Y+8	; 0x08
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 c0       	rjmp	.+4      	; 0x163c <gpio_register_pin+0xca>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	2a 95       	dec	r18
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <gpio_register_pin+0xc6>
    1640:	86 2b       	or	r24, r22
    1642:	fa 01       	movw	r30, r20
    1644:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1646:	8f 81       	ldd	r24, Y+7	; 0x07
    1648:	88 2f       	mov	r24, r24
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9c 01       	movw	r18, r24
    164e:	21 50       	subi	r18, 0x01	; 1
    1650:	31 09       	sbc	r19, r1
    1652:	c9 01       	movw	r24, r18
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	82 0f       	add	r24, r18
    165a:	93 1f       	adc	r25, r19
    165c:	82 96       	adiw	r24, 0x22	; 34
    165e:	ac 01       	movw	r20, r24
    1660:	8f 81       	ldd	r24, Y+7	; 0x07
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9c 01       	movw	r18, r24
    1668:	21 50       	subi	r18, 0x01	; 1
    166a:	31 09       	sbc	r19, r1
    166c:	c9 01       	movw	r24, r18
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	82 0f       	add	r24, r18
    1674:	93 1f       	adc	r25, r19
    1676:	82 96       	adiw	r24, 0x22	; 34
    1678:	fc 01       	movw	r30, r24
    167a:	80 81       	ld	r24, Z
    167c:	68 2f       	mov	r22, r24
    167e:	88 85       	ldd	r24, Y+8	; 0x08
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 c0       	rjmp	.+4      	; 0x168e <gpio_register_pin+0x11c>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	2a 95       	dec	r18
    1690:	e2 f7       	brpl	.-8      	; 0x168a <gpio_register_pin+0x118>
    1692:	80 95       	com	r24
    1694:	86 23       	and	r24, r22
    1696:	fa 01       	movw	r30, r20
    1698:	80 83       	st	Z, r24
        return 0;
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	71 c0       	rjmp	.+226    	; 0x1780 <gpio_register_pin+0x20e>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    169e:	8f 81       	ldd	r24, Y+7	; 0x07
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9c 01       	movw	r18, r24
    16a6:	21 50       	subi	r18, 0x01	; 1
    16a8:	31 09       	sbc	r19, r1
    16aa:	c9 01       	movw	r24, r18
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	82 0f       	add	r24, r18
    16b2:	93 1f       	adc	r25, r19
    16b4:	81 96       	adiw	r24, 0x21	; 33
    16b6:	ac 01       	movw	r20, r24
    16b8:	8f 81       	ldd	r24, Y+7	; 0x07
    16ba:	88 2f       	mov	r24, r24
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	9c 01       	movw	r18, r24
    16c0:	21 50       	subi	r18, 0x01	; 1
    16c2:	31 09       	sbc	r19, r1
    16c4:	c9 01       	movw	r24, r18
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	82 0f       	add	r24, r18
    16cc:	93 1f       	adc	r25, r19
    16ce:	81 96       	adiw	r24, 0x21	; 33
    16d0:	fc 01       	movw	r30, r24
    16d2:	80 81       	ld	r24, Z
    16d4:	68 2f       	mov	r22, r24
    16d6:	88 85       	ldd	r24, Y+8	; 0x08
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <gpio_register_pin+0x174>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	2a 95       	dec	r18
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <gpio_register_pin+0x170>
    16ea:	80 95       	com	r24
    16ec:	86 23       	and	r24, r22
    16ee:	fa 01       	movw	r30, r20
    16f0:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    16f2:	8f 81       	ldd	r24, Y+7	; 0x07
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9c 01       	movw	r18, r24
    16fa:	21 50       	subi	r18, 0x01	; 1
    16fc:	31 09       	sbc	r19, r1
    16fe:	c9 01       	movw	r24, r18
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	82 0f       	add	r24, r18
    1706:	93 1f       	adc	r25, r19
    1708:	82 96       	adiw	r24, 0x22	; 34
    170a:	ac 01       	movw	r20, r24
    170c:	8f 81       	ldd	r24, Y+7	; 0x07
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	9c 01       	movw	r18, r24
    1714:	21 50       	subi	r18, 0x01	; 1
    1716:	31 09       	sbc	r19, r1
    1718:	c9 01       	movw	r24, r18
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	82 0f       	add	r24, r18
    1720:	93 1f       	adc	r25, r19
    1722:	82 96       	adiw	r24, 0x22	; 34
    1724:	fc 01       	movw	r30, r24
    1726:	80 81       	ld	r24, Z
    1728:	68 2f       	mov	r22, r24
    172a:	88 85       	ldd	r24, Y+8	; 0x08
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 c0       	rjmp	.+4      	; 0x173a <gpio_register_pin+0x1c8>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	2a 95       	dec	r18
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <gpio_register_pin+0x1c4>
    173e:	86 2b       	or	r24, r22
    1740:	fa 01       	movw	r30, r20
    1742:	80 83       	st	Z, r24
	}

	input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1744:	8a e0       	ldi	r24, 0x0A	; 10
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <malloc>
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01

    if(input == NULL)
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	89 2b       	or	r24, r25
    1756:	11 f4       	brne	.+4      	; 0x175c <gpio_register_pin+0x1ea>
        return 1;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	12 c0       	rjmp	.+36     	; 0x1780 <gpio_register_pin+0x20e>

    input->pin       = pin;
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	29 85       	ldd	r18, Y+9	; 0x09
    1762:	fc 01       	movw	r30, r24
    1764:	20 83       	st	Z, r18
    input->pulled_up = pulled_up;
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	9a 81       	ldd	r25, Y+2	; 0x02
    176a:	2b 85       	ldd	r18, Y+11	; 0x0b
    176c:	fc 01       	movw	r30, r24
    176e:	21 83       	std	Z+1, r18	; 0x01
    list_add(&input->list, &gpio_inputs);
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	06 96       	adiw	r24, 0x06	; 6
    1776:	66 e0       	ldi	r22, 0x06	; 6
    1778:	71 e0       	ldi	r23, 0x01	; 1
    177a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <list_add>

    return 0;
    177e:	80 e0       	ldi	r24, 0x00	; 0
}
    1780:	2b 96       	adiw	r28, 0x0b	; 11
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

00001792 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	00 d0       	rcall	.+0      	; 0x1798 <gpio_write_pin+0x6>
    1798:	00 d0       	rcall	.+0      	; 0x179a <gpio_write_pin+0x8>
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	8b 83       	std	Y+3, r24	; 0x03
    17a0:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	86 95       	lsr	r24
    17a6:	86 95       	lsr	r24
    17a8:	86 95       	lsr	r24
    17aa:	8f 5f       	subi	r24, 0xFF	; 255
    17ac:	89 83       	std	Y+1, r24	; 0x01
	pin = pin % 8;
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	87 70       	andi	r24, 0x07	; 7
    17b2:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	9c 01       	movw	r18, r24
    17bc:	21 50       	subi	r18, 0x01	; 1
    17be:	31 09       	sbc	r19, r1
    17c0:	c9 01       	movw	r24, r18
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	82 0f       	add	r24, r18
    17c8:	93 1f       	adc	r25, r19
    17ca:	82 96       	adiw	r24, 0x22	; 34
    17cc:	fc 01       	movw	r30, r24
    17ce:	80 81       	ld	r24, Z
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	a2 81       	ldd	r26, Z+2	; 0x02
    17d4:	b3 81       	ldd	r27, Z+3	; 0x03
    17d6:	8a 83       	std	Y+2, r24	; 0x02
	if(value != 0)
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	88 23       	and	r24, r24
    17dc:	31 f1       	breq	.+76     	; 0x182a <gpio_write_pin+0x98>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	9c 01       	movw	r18, r24
    17e6:	21 50       	subi	r18, 0x01	; 1
    17e8:	31 09       	sbc	r19, r1
    17ea:	c9 01       	movw	r24, r18
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	82 0f       	add	r24, r18
    17f2:	93 1f       	adc	r25, r19
    17f4:	82 96       	adiw	r24, 0x22	; 34
    17f6:	ac 01       	movw	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	68 2f       	mov	r22, r24
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 c0       	rjmp	.+4      	; 0x180e <gpio_write_pin+0x7c>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	6a 95       	dec	r22
    1810:	e2 f7       	brpl	.-8      	; 0x180a <gpio_write_pin+0x78>
    1812:	82 2b       	or	r24, r18
    1814:	93 2b       	or	r25, r19
    1816:	09 2e       	mov	r0, r25
    1818:	00 0c       	add	r0, r0
    181a:	aa 0b       	sbc	r26, r26
    181c:	bb 0b       	sbc	r27, r27
    181e:	fa 01       	movw	r30, r20
    1820:	80 83       	st	Z, r24
    1822:	91 83       	std	Z+1, r25	; 0x01
    1824:	a2 83       	std	Z+2, r26	; 0x02
    1826:	b3 83       	std	Z+3, r27	; 0x03
    1828:	27 c0       	rjmp	.+78     	; 0x1878 <gpio_write_pin+0xe6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	9c 01       	movw	r18, r24
    1832:	21 50       	subi	r18, 0x01	; 1
    1834:	31 09       	sbc	r19, r1
    1836:	c9 01       	movw	r24, r18
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	82 0f       	add	r24, r18
    183e:	93 1f       	adc	r25, r19
    1840:	82 96       	adiw	r24, 0x22	; 34
    1842:	ac 01       	movw	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	68 2f       	mov	r22, r24
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 c0       	rjmp	.+4      	; 0x185a <gpio_write_pin+0xc8>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	6a 95       	dec	r22
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <gpio_write_pin+0xc4>
    185e:	80 95       	com	r24
    1860:	90 95       	com	r25
    1862:	82 23       	and	r24, r18
    1864:	93 23       	and	r25, r19
    1866:	09 2e       	mov	r0, r25
    1868:	00 0c       	add	r0, r0
    186a:	aa 0b       	sbc	r26, r26
    186c:	bb 0b       	sbc	r27, r27
    186e:	fa 01       	movw	r30, r20
    1870:	80 83       	st	Z, r24
    1872:	91 83       	std	Z+1, r25	; 0x01
    1874:	a2 83       	std	Z+2, r26	; 0x02
    1876:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    1878:	80 e0       	ldi	r24, 0x00	; 0
}
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	08 95       	ret

00001888 <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	00 d0       	rcall	.+0      	; 0x188e <__gpio_read_pin+0x6>
    188e:	1f 92       	push	r1
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	86 95       	lsr	r24
    189a:	86 95       	lsr	r24
    189c:	86 95       	lsr	r24
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	87 70       	andi	r24, 0x07	; 7
    18a6:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9c 01       	movw	r18, r24
    18b0:	21 50       	subi	r18, 0x01	; 1
    18b2:	31 09       	sbc	r19, r1
    18b4:	c9 01       	movw	r24, r18
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	82 0f       	add	r24, r18
    18bc:	93 1f       	adc	r25, r19
    18be:	80 96       	adiw	r24, 0x20	; 32
    18c0:	fc 01       	movw	r30, r24
    18c2:	80 81       	ld	r24, Z
    18c4:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	88 2f       	mov	r24, r24
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	2b 81       	ldd	r18, Y+3	; 0x03
    18ce:	22 2f       	mov	r18, r18
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <__gpio_read_pin+0x50>
    18d4:	95 95       	asr	r25
    18d6:	87 95       	ror	r24
    18d8:	2a 95       	dec	r18
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <__gpio_read_pin+0x4c>
    18dc:	81 70       	andi	r24, 0x01	; 1
}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	08 95       	ret

000018ea <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	29 97       	sbiw	r28, 0x09	; 9
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1900:	80 91 08 01 	lds	r24, 0x0108
    1904:	90 91 09 01 	lds	r25, 0x0109
    1908:	9d 83       	std	Y+5, r25	; 0x05
    190a:	8c 83       	std	Y+4, r24	; 0x04
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	9d 81       	ldd	r25, Y+5	; 0x05
    1910:	06 97       	sbiw	r24, 0x06	; 6
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	55 c0       	rjmp	.+170    	; 0x19c2 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	fc 01       	movw	r30, r24
    191e:	90 81       	ld	r25, Z
    1920:	89 85       	ldd	r24, Y+9	; 0x09
    1922:	98 17       	cp	r25, r24
    1924:	09 f0       	breq	.+2      	; 0x1928 <gpio_read_pin+0x3e>
    1926:	41 c0       	rjmp	.+130    	; 0x19aa <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
    1928:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    192a:	1f c0       	rjmp	.+62     	; 0x196a <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	29 81       	ldd	r18, Y+1	; 0x01
    1934:	3a 81       	ldd	r19, Y+2	; 0x02
    1936:	82 0f       	add	r24, r18
    1938:	93 1f       	adc	r25, r19
    193a:	02 96       	adiw	r24, 0x02	; 2
    193c:	fc 01       	movw	r30, r24
    193e:	40 81       	ld	r20, Z
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	29 81       	ldd	r18, Y+1	; 0x01
    194a:	3a 81       	ldd	r19, Y+2	; 0x02
    194c:	82 0f       	add	r24, r18
    194e:	93 1f       	adc	r25, r19
    1950:	02 96       	adiw	r24, 0x02	; 2
    1952:	fc 01       	movw	r30, r24
    1954:	80 81       	ld	r24, Z
    1956:	48 17       	cp	r20, r24
    1958:	29 f0       	breq	.+10     	; 0x1964 <gpio_read_pin+0x7a>
                    return input->previous_state;
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	fc 01       	movw	r30, r24
    1960:	85 81       	ldd	r24, Z+5	; 0x05
    1962:	37 c0       	rjmp	.+110    	; 0x19d2 <gpio_read_pin+0xe8>
                i++;
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	8f 5f       	subi	r24, 0xFF	; 255
    1968:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	f0 f2       	brcs	.-68     	; 0x192c <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	9a 81       	ldd	r25, Y+2	; 0x02
    1974:	fc 01       	movw	r30, r24
    1976:	91 81       	ldd	r25, Z+1	; 0x01
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	89 27       	eor	r24, r25
    197c:	88 23       	and	r24, r24
    197e:	29 f0       	breq	.+10     	; 0x198a <gpio_read_pin+0xa0>
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	fc 01       	movw	r30, r24
    1986:	82 81       	ldd	r24, Z+2	; 0x02
    1988:	08 c0       	rjmp	.+16     	; 0x199a <gpio_read_pin+0xb0>
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	9a 81       	ldd	r25, Y+2	; 0x02
    198e:	fc 01       	movw	r30, r24
    1990:	92 81       	ldd	r25, Z+2	; 0x02
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	99 23       	and	r25, r25
    1996:	09 f0       	breq	.+2      	; 0x199a <gpio_read_pin+0xb0>
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	9a 81       	ldd	r25, Y+2	; 0x02
    19a0:	28 85       	ldd	r18, Y+8	; 0x08
    19a2:	fc 01       	movw	r30, r24
    19a4:	25 83       	std	Z+5, r18	; 0x05

            return state;
    19a6:	88 85       	ldd	r24, Y+8	; 0x08
    19a8:	14 c0       	rjmp	.+40     	; 0x19d2 <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	9a 81       	ldd	r25, Y+2	; 0x02
    19ae:	fc 01       	movw	r30, r24
    19b0:	80 85       	ldd	r24, Z+8	; 0x08
    19b2:	91 85       	ldd	r25, Z+9	; 0x09
    19b4:	9f 83       	std	Y+7, r25	; 0x07
    19b6:	8e 83       	std	Y+6, r24	; 0x06
    19b8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ba:	9f 81       	ldd	r25, Y+7	; 0x07
    19bc:	06 97       	sbiw	r24, 0x06	; 6
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	9a 81       	ldd	r25, Y+2	; 0x02
    19c6:	06 96       	adiw	r24, 0x06	; 6
    19c8:	86 50       	subi	r24, 0x06	; 6
    19ca:	91 40       	sbci	r25, 0x01	; 1
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <gpio_read_pin+0xe6>
    19ce:	a4 cf       	rjmp	.-184    	; 0x1918 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
}
    19d2:	29 96       	adiw	r28, 0x09	; 9
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	08 95       	ret

000019e4 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <gpio_debouncer+0xa>
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <gpio_debouncer+0xc>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <gpio_debouncer+0xe>
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    19f6:	80 91 08 01 	lds	r24, 0x0108
    19fa:	90 91 09 01 	lds	r25, 0x0109
    19fe:	9c 83       	std	Y+4, r25	; 0x04
    1a00:	8b 83       	std	Y+3, r24	; 0x03
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	06 97       	sbiw	r24, 0x06	; 6
    1a08:	9a 83       	std	Y+2, r25	; 0x02
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	1e c0       	rjmp	.+60     	; 0x1a4a <gpio_debouncer+0x66>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    1a0e:	00 91 52 01 	lds	r16, 0x0152
    1a12:	10 91 53 01 	lds	r17, 0x0153
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	80 81       	ld	r24, Z
    1a1e:	0e 94 44 0c 	call	0x1888	; 0x1888 <__gpio_read_pin>
    1a22:	28 2f       	mov	r18, r24
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	80 0f       	add	r24, r16
    1a2a:	91 1f       	adc	r25, r17
    1a2c:	02 96       	adiw	r24, 0x02	; 2
    1a2e:	fc 01       	movw	r30, r24
    1a30:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	9a 81       	ldd	r25, Y+2	; 0x02
    1a36:	fc 01       	movw	r30, r24
    1a38:	80 85       	ldd	r24, Z+8	; 0x08
    1a3a:	91 85       	ldd	r25, Z+9	; 0x09
    1a3c:	9e 83       	std	Y+6, r25	; 0x06
    1a3e:	8d 83       	std	Y+5, r24	; 0x05
    1a40:	8d 81       	ldd	r24, Y+5	; 0x05
    1a42:	9e 81       	ldd	r25, Y+6	; 0x06
    1a44:	06 97       	sbiw	r24, 0x06	; 6
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	06 96       	adiw	r24, 0x06	; 6
    1a50:	86 50       	subi	r24, 0x06	; 6
    1a52:	91 40       	sbci	r25, 0x01	; 1
    1a54:	e1 f6       	brne	.-72     	; 0x1a0e <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1a56:	80 91 52 01 	lds	r24, 0x0152
    1a5a:	90 91 53 01 	lds	r25, 0x0153
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	90 93 53 01 	sts	0x0153, r25
    1a64:	80 93 52 01 	sts	0x0152, r24
    1a68:	03 97       	sbiw	r24, 0x03	; 3
    1a6a:	21 f4       	brne	.+8      	; 0x1a74 <gpio_debouncer+0x90>
        count = 0;
    1a6c:	10 92 53 01 	sts	0x0153, r1
    1a70:	10 92 52 01 	sts	0x0152, r1

}
    1a74:	26 96       	adiw	r28, 0x06	; 6
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	08 95       	ret

00001a8a <i2c_init>:
#define F_SCL 100000UL // SCL frequency
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
	TWBR = (uint8_t)TWBR_val;
    1a92:	88 eb       	ldi	r24, 0xB8	; 184
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	2a e2       	ldi	r18, 0x2A	; 42
    1a98:	fc 01       	movw	r30, r24
    1a9a:	20 83       	st	Z, r18
}
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	08 95       	ret

00001aa2 <i2c_start>:

uint8_t i2c_start(uint8_t address)
{
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <i2c_start+0x6>
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	8a 83       	std	Y+2, r24	; 0x02
	// reset TWI control register
	TWCR = 0;
    1aae:	8c eb       	ldi	r24, 0xBC	; 188
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	10 82       	st	Z, r1
	// transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1ab6:	8c eb       	ldi	r24, 0xBC	; 188
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	24 ea       	ldi	r18, 0xA4	; 164
    1abc:	fc 01       	movw	r30, r24
    1abe:	20 83       	st	Z, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
    1ac0:	00 00       	nop
    1ac2:	8c eb       	ldi	r24, 0xBC	; 188
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	80 81       	ld	r24, Z
    1aca:	88 23       	and	r24, r24
    1acc:	d4 f7       	brge	.-12     	; 0x1ac2 <i2c_start+0x20>

	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
    1ace:	89 eb       	ldi	r24, 0xB9	; 185
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	80 81       	ld	r24, Z
    1ad6:	88 2f       	mov	r24, r24
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	88 7f       	andi	r24, 0xF8	; 248
    1adc:	99 27       	eor	r25, r25
    1ade:	08 97       	sbiw	r24, 0x08	; 8
    1ae0:	11 f0       	breq	.+4      	; 0x1ae6 <i2c_start+0x44>
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	20 c0       	rjmp	.+64     	; 0x1b26 <i2c_start+0x84>

	// load slave address into data register
	TWDR = address;
    1ae6:	8b eb       	ldi	r24, 0xBB	; 187
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	2a 81       	ldd	r18, Y+2	; 0x02
    1aec:	fc 01       	movw	r30, r24
    1aee:	20 83       	st	Z, r18
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
    1af0:	8c eb       	ldi	r24, 0xBC	; 188
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	24 e8       	ldi	r18, 0x84	; 132
    1af6:	fc 01       	movw	r30, r24
    1af8:	20 83       	st	Z, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
    1afa:	00 00       	nop
    1afc:	8c eb       	ldi	r24, 0xBC	; 188
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	fc 01       	movw	r30, r24
    1b02:	80 81       	ld	r24, Z
    1b04:	88 23       	and	r24, r24
    1b06:	d4 f7       	brge	.-12     	; 0x1afc <i2c_start+0x5a>

	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
    1b08:	89 eb       	ldi	r24, 0xB9	; 185
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	80 81       	ld	r24, Z
    1b10:	88 7f       	andi	r24, 0xF8	; 248
    1b12:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	88 31       	cpi	r24, 0x18	; 24
    1b18:	29 f0       	breq	.+10     	; 0x1b24 <i2c_start+0x82>
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	80 34       	cpi	r24, 0x40	; 64
    1b1e:	11 f0       	breq	.+4      	; 0x1b24 <i2c_start+0x82>
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <i2c_start+0x84>

	return 0;
    1b24:	80 e0       	ldi	r24, 0x00	; 0
}
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	08 95       	ret

00001b30 <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	1f 92       	push	r1
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	89 83       	std	Y+1, r24	; 0x01
	// load data into data register
	TWDR = data;
    1b3c:	8b eb       	ldi	r24, 0xBB	; 187
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	29 81       	ldd	r18, Y+1	; 0x01
    1b42:	fc 01       	movw	r30, r24
    1b44:	20 83       	st	Z, r18
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
    1b46:	8c eb       	ldi	r24, 0xBC	; 188
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	24 e8       	ldi	r18, 0x84	; 132
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	20 83       	st	Z, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
    1b50:	00 00       	nop
    1b52:	8c eb       	ldi	r24, 0xBC	; 188
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	fc 01       	movw	r30, r24
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 23       	and	r24, r24
    1b5c:	d4 f7       	brge	.-12     	; 0x1b52 <i2c_write+0x22>

	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
    1b5e:	89 eb       	ldi	r24, 0xB9	; 185
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	fc 01       	movw	r30, r24
    1b64:	80 81       	ld	r24, Z
    1b66:	88 2f       	mov	r24, r24
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	88 7f       	andi	r24, 0xF8	; 248
    1b6c:	99 27       	eor	r25, r25
    1b6e:	88 97       	sbiw	r24, 0x28	; 40
    1b70:	11 f0       	breq	.+4      	; 0x1b76 <i2c_write+0x46>
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	01 c0       	rjmp	.+2      	; 0x1b78 <i2c_write+0x48>

	return 0;
    1b76:	80 e0       	ldi	r24, 0x00	; 0
}
    1b78:	0f 90       	pop	r0
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	08 95       	ret

00001b80 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62

	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1b88:	8c eb       	ldi	r24, 0xBC	; 188
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	24 ec       	ldi	r18, 0xC4	; 196
    1b8e:	fc 01       	movw	r30, r24
    1b90:	20 83       	st	Z, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
    1b92:	00 00       	nop
    1b94:	8c eb       	ldi	r24, 0xBC	; 188
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	fc 01       	movw	r30, r24
    1b9a:	80 81       	ld	r24, Z
    1b9c:	88 23       	and	r24, r24
    1b9e:	d4 f7       	brge	.-12     	; 0x1b94 <i2c_read_ack+0x14>
	// return received data from TWDR
	return TWDR;
    1ba0:	8b eb       	ldi	r24, 0xBB	; 187
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	80 81       	ld	r24, Z
}
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	08 95       	ret

00001bae <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62

	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
    1bb6:	8c eb       	ldi	r24, 0xBC	; 188
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	24 e8       	ldi	r18, 0x84	; 132
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	20 83       	st	Z, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
    1bc0:	00 00       	nop
    1bc2:	8c eb       	ldi	r24, 0xBC	; 188
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	80 81       	ld	r24, Z
    1bca:	88 23       	and	r24, r24
    1bcc:	d4 f7       	brge	.-12     	; 0x1bc2 <i2c_read_nack+0x14>
	// return received data from TWDR
	return TWDR;
    1bce:	8b eb       	ldi	r24, 0xBB	; 187
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	80 81       	ld	r24, Z
}
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	08 95       	ret

00001bdc <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	27 97       	sbiw	r28, 0x07	; 7
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	8b 83       	std	Y+3, r24	; 0x03
    1bf2:	7d 83       	std	Y+5, r23	; 0x05
    1bf4:	6c 83       	std	Y+4, r22	; 0x04
    1bf6:	5f 83       	std	Y+7, r21	; 0x07
    1bf8:	4e 83       	std	Y+6, r20	; 0x06
	if (i2c_start(address | I2C_WRITE)) return 1;
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <i2c_start>
    1c00:	88 23       	and	r24, r24
    1c02:	11 f0       	breq	.+4      	; 0x1c08 <i2c_transmit+0x2c>
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	20 c0       	rjmp	.+64     	; 0x1c48 <i2c_transmit+0x6c>

	for (uint16_t i = 0; i < length; i++)
    1c08:	1a 82       	std	Y+2, r1	; 0x02
    1c0a:	19 82       	std	Y+1, r1	; 0x01
    1c0c:	13 c0       	rjmp	.+38     	; 0x1c34 <i2c_transmit+0x58>
	{
		if (i2c_write(data[i])) return 1;
    1c0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c10:	3d 81       	ldd	r19, Y+5	; 0x05
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	82 0f       	add	r24, r18
    1c18:	93 1f       	adc	r25, r19
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	80 81       	ld	r24, Z
    1c1e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <i2c_write>
    1c22:	88 23       	and	r24, r24
    1c24:	11 f0       	breq	.+4      	; 0x1c2a <i2c_transmit+0x4e>
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	0f c0       	rjmp	.+30     	; 0x1c48 <i2c_transmit+0x6c>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;

	for (uint16_t i = 0; i < length; i++)
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	01 96       	adiw	r24, 0x01	; 1
    1c30:	9a 83       	std	Y+2, r25	; 0x02
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	29 81       	ldd	r18, Y+1	; 0x01
    1c36:	3a 81       	ldd	r19, Y+2	; 0x02
    1c38:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c3c:	28 17       	cp	r18, r24
    1c3e:	39 07       	cpc	r19, r25
    1c40:	30 f3       	brcs	.-52     	; 0x1c0e <i2c_transmit+0x32>
	{
		if (i2c_write(data[i])) return 1;
	}

	i2c_stop();
    1c42:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <i2c_stop>

	return 0;
    1c46:	80 e0       	ldi	r24, 0x00	; 0
}
    1c48:	27 96       	adiw	r28, 0x07	; 7
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
    1c5a:	0f 93       	push	r16
    1c5c:	1f 93       	push	r17
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	27 97       	sbiw	r28, 0x07	; 7
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
    1c72:	8b 83       	std	Y+3, r24	; 0x03
    1c74:	7d 83       	std	Y+5, r23	; 0x05
    1c76:	6c 83       	std	Y+4, r22	; 0x04
    1c78:	5f 83       	std	Y+7, r21	; 0x07
    1c7a:	4e 83       	std	Y+6, r20	; 0x06
	if (i2c_start(address | I2C_READ)) return 1;
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	81 60       	ori	r24, 0x01	; 1
    1c80:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <i2c_start>
    1c84:	88 23       	and	r24, r24
    1c86:	11 f0       	breq	.+4      	; 0x1c8c <i2c_receive+0x32>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	2c c0       	rjmp	.+88     	; 0x1ce4 <i2c_receive+0x8a>

	for (uint16_t i = 0; i < (length-1); i++)
    1c8c:	1a 82       	std	Y+2, r1	; 0x02
    1c8e:	19 82       	std	Y+1, r1	; 0x01
    1c90:	10 c0       	rjmp	.+32     	; 0x1cb2 <i2c_receive+0x58>
	{
		data[i] = i2c_read_ack();
    1c92:	2c 81       	ldd	r18, Y+4	; 0x04
    1c94:	3d 81       	ldd	r19, Y+5	; 0x05
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	89 01       	movw	r16, r18
    1c9c:	08 0f       	add	r16, r24
    1c9e:	19 1f       	adc	r17, r25
    1ca0:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <i2c_read_ack>
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	80 83       	st	Z, r24

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb6:	9c 01       	movw	r18, r24
    1cb8:	21 50       	subi	r18, 0x01	; 1
    1cba:	31 09       	sbc	r19, r1
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc0:	82 17       	cp	r24, r18
    1cc2:	93 07       	cpc	r25, r19
    1cc4:	30 f3       	brcs	.-52     	; 0x1c92 <i2c_receive+0x38>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
    1cc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cce:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd0:	89 01       	movw	r16, r18
    1cd2:	08 0f       	add	r16, r24
    1cd4:	19 1f       	adc	r17, r25
    1cd6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <i2c_read_nack>
    1cda:	f8 01       	movw	r30, r16
    1cdc:	80 83       	st	Z, r24

	i2c_stop();
    1cde:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <i2c_stop>

	return 0;
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
}
    1ce4:	27 96       	adiw	r28, 0x07	; 7
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	08 95       	ret

00001cfa <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	28 97       	sbiw	r28, 0x08	; 8
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
    1d10:	6c 83       	std	Y+4, r22	; 0x04
    1d12:	5e 83       	std	Y+6, r21	; 0x06
    1d14:	4d 83       	std	Y+5, r20	; 0x05
    1d16:	38 87       	std	Y+8, r19	; 0x08
    1d18:	2f 83       	std	Y+7, r18	; 0x07
	if (i2c_start(devaddr | 0x00)) return 1;
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <i2c_start>
    1d20:	88 23       	and	r24, r24
    1d22:	11 f0       	breq	.+4      	; 0x1d28 <i2c_writeReg+0x2e>
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	23 c0       	rjmp	.+70     	; 0x1d6e <i2c_writeReg+0x74>

	i2c_write(regaddr);
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
    1d2e:	1a 82       	std	Y+2, r1	; 0x02
    1d30:	19 82       	std	Y+1, r1	; 0x01
    1d32:	13 c0       	rjmp	.+38     	; 0x1d5a <i2c_writeReg+0x60>
	{
		if (i2c_write(data[i])) return 1;
    1d34:	2d 81       	ldd	r18, Y+5	; 0x05
    1d36:	3e 81       	ldd	r19, Y+6	; 0x06
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3c:	82 0f       	add	r24, r18
    1d3e:	93 1f       	adc	r25, r19
    1d40:	fc 01       	movw	r30, r24
    1d42:	80 81       	ld	r24, Z
    1d44:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <i2c_write>
    1d48:	88 23       	and	r24, r24
    1d4a:	11 f0       	breq	.+4      	; 0x1d50 <i2c_writeReg+0x56>
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	0f c0       	rjmp	.+30     	; 0x1d6e <i2c_writeReg+0x74>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	29 81       	ldd	r18, Y+1	; 0x01
    1d5c:	3a 81       	ldd	r19, Y+2	; 0x02
    1d5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d60:	98 85       	ldd	r25, Y+8	; 0x08
    1d62:	28 17       	cp	r18, r24
    1d64:	39 07       	cpc	r19, r25
    1d66:	30 f3       	brcs	.-52     	; 0x1d34 <i2c_writeReg+0x3a>
	{
		if (i2c_write(data[i])) return 1;
	}

	i2c_stop();
    1d68:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <i2c_stop>

	return 0;
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
}
    1d6e:	28 96       	adiw	r28, 0x08	; 8
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	08 95       	ret

00001d80 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	28 97       	sbiw	r28, 0x08	; 8
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	8b 83       	std	Y+3, r24	; 0x03
    1d9a:	6c 83       	std	Y+4, r22	; 0x04
    1d9c:	5e 83       	std	Y+6, r21	; 0x06
    1d9e:	4d 83       	std	Y+5, r20	; 0x05
    1da0:	38 87       	std	Y+8, r19	; 0x08
    1da2:	2f 83       	std	Y+7, r18	; 0x07
	if (i2c_start(devaddr)) return 1;
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <i2c_start>
    1daa:	88 23       	and	r24, r24
    1dac:	11 f0       	breq	.+4      	; 0x1db2 <i2c_readReg+0x32>
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	37 c0       	rjmp	.+110    	; 0x1e20 <i2c_readReg+0xa0>

	i2c_write(regaddr);
    1db2:	8c 81       	ldd	r24, Y+4	; 0x04
    1db4:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	81 60       	ori	r24, 0x01	; 1
    1dbc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <i2c_start>
    1dc0:	88 23       	and	r24, r24
    1dc2:	11 f0       	breq	.+4      	; 0x1dc8 <i2c_readReg+0x48>
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	2c c0       	rjmp	.+88     	; 0x1e20 <i2c_readReg+0xa0>

	for (uint16_t i = 0; i < (length-1); i++)
    1dc8:	1a 82       	std	Y+2, r1	; 0x02
    1dca:	19 82       	std	Y+1, r1	; 0x01
    1dcc:	10 c0       	rjmp	.+32     	; 0x1dee <i2c_readReg+0x6e>
	{
		data[i] = i2c_read_ack();
    1dce:	2d 81       	ldd	r18, Y+5	; 0x05
    1dd0:	3e 81       	ldd	r19, Y+6	; 0x06
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd6:	89 01       	movw	r16, r18
    1dd8:	08 0f       	add	r16, r24
    1dda:	19 1f       	adc	r17, r25
    1ddc:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <i2c_read_ack>
    1de0:	f8 01       	movw	r30, r16
    1de2:	80 83       	st	Z, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	9a 81       	ldd	r25, Y+2	; 0x02
    1de8:	01 96       	adiw	r24, 0x01	; 1
    1dea:	9a 83       	std	Y+2, r25	; 0x02
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	8f 81       	ldd	r24, Y+7	; 0x07
    1df0:	98 85       	ldd	r25, Y+8	; 0x08
    1df2:	9c 01       	movw	r18, r24
    1df4:	21 50       	subi	r18, 0x01	; 1
    1df6:	31 09       	sbc	r19, r1
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfc:	82 17       	cp	r24, r18
    1dfe:	93 07       	cpc	r25, r19
    1e00:	30 f3       	brcs	.-52     	; 0x1dce <i2c_readReg+0x4e>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
    1e02:	8f 81       	ldd	r24, Y+7	; 0x07
    1e04:	98 85       	ldd	r25, Y+8	; 0x08
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	2d 81       	ldd	r18, Y+5	; 0x05
    1e0a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e0c:	89 01       	movw	r16, r18
    1e0e:	08 0f       	add	r16, r24
    1e10:	19 1f       	adc	r17, r25
    1e12:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <i2c_read_nack>
    1e16:	f8 01       	movw	r30, r16
    1e18:	80 83       	st	Z, r24

	i2c_stop();
    1e1a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <i2c_stop>

	return 0;
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
}
    1e20:	28 96       	adiw	r28, 0x08	; 8
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	08 95       	ret

00001e36 <i2c_stop>:

void i2c_stop(void)
{
    1e36:	cf 93       	push	r28
    1e38:	df 93       	push	r29
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1e3e:	8c eb       	ldi	r24, 0xBC	; 188
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	24 e9       	ldi	r18, 0x94	; 148
    1e44:	fc 01       	movw	r30, r24
    1e46:	20 83       	st	Z, r18
}
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	08 95       	ret

00001e4e <odometry_set_speed>:
 * 	void odometry_set_speed(uint8_t speed)
 *
 * 	Send odometry board the max speed
 */
void odometry_set_speed(uint8_t speed)
{
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	67 97       	sbiw	r28, 0x17	; 23
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1e64:	80 91 54 01 	lds	r24, 0x0154
    1e68:	9f 89       	ldd	r25, Y+23	; 0x17
    1e6a:	98 17       	cp	r25, r24
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <odometry_set_speed+0x22>
    1e6e:	82 c0       	rjmp	.+260    	; 0x1f74 <odometry_set_speed+0x126>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1e70:	86 e5       	ldi	r24, 0x56	; 86
    1e72:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1e74:	8f 89       	ldd	r24, Y+23	; 0x17
    1e76:	88 8b       	std	Y+16, r24	; 0x10
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1e78:	72 c0       	rjmp	.+228    	; 0x1f5e <odometry_set_speed+0x110>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a8 e4       	ldi	r26, 0x48	; 72
    1e80:	b2 e4       	ldi	r27, 0x42	; 66
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	ab 83       	std	Y+3, r26	; 0x03
    1e88:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e4       	ldi	r19, 0x40	; 64
    1e8e:	4c e1       	ldi	r20, 0x1C	; 28
    1e90:	55 e4       	ldi	r21, 0x45	; 69
    1e92:	69 81       	ldd	r22, Y+1	; 0x01
    1e94:	7a 81       	ldd	r23, Y+2	; 0x02
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	af 83       	std	Y+7, r26	; 0x07
    1ea8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e8       	ldi	r20, 0x80	; 128
    1eb0:	5f e3       	ldi	r21, 0x3F	; 63
    1eb2:	6d 81       	ldd	r22, Y+5	; 0x05
    1eb4:	7e 81       	ldd	r23, Y+6	; 0x06
    1eb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb8:	98 85       	ldd	r25, Y+8	; 0x08
    1eba:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <odometry_set_speed+0x7e>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9a 87       	std	Y+10, r25	; 0x0a
    1ec8:	89 87       	std	Y+9, r24	; 0x09
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	3f ef       	ldi	r19, 0xFF	; 255
    1ed0:	4f e7       	ldi	r20, 0x7F	; 127
    1ed2:	57 e4       	ldi	r21, 0x47	; 71
    1ed4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ed6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ed8:	8f 81       	ldd	r24, Y+7	; 0x07
    1eda:	98 85       	ldd	r25, Y+8	; 0x08
    1edc:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e2       	ldi	r20, 0x20	; 32
    1eea:	51 e4       	ldi	r21, 0x41	; 65
    1eec:	69 81       	ldd	r22, Y+1	; 0x01
    1eee:	7a 81       	ldd	r23, Y+2	; 0x02
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef4:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9a 87       	std	Y+10, r25	; 0x0a
    1f0a:	89 87       	std	Y+9, r24	; 0x09
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <odometry_set_speed+0xde>
    1f0e:	8a ef       	ldi	r24, 0xFA	; 250
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9c 87       	std	Y+12, r25	; 0x0c
    1f14:	8b 87       	std	Y+11, r24	; 0x0b
    1f16:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f18:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <odometry_set_speed+0xcc>
    1f1e:	9c 87       	std	Y+12, r25	; 0x0c
    1f20:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	89 85       	ldd	r24, Y+9	; 0x09
    1f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	9a 87       	std	Y+10, r25	; 0x0a
    1f2a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	89 85       	ldd	r24, Y+9	; 0x09
    1f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f30:	89 2b       	or	r24, r25
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <odometry_set_speed+0xc0>
    1f34:	14 c0       	rjmp	.+40     	; 0x1f5e <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	6d 81       	ldd	r22, Y+5	; 0x05
    1f38:	7e 81       	ldd	r23, Y+6	; 0x06
    1f3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f3c:	98 85       	ldd	r25, Y+8	; 0x08
    1f3e:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9a 87       	std	Y+10, r25	; 0x0a
    1f48:	89 87       	std	Y+9, r24	; 0x09
    1f4a:	89 85       	ldd	r24, Y+9	; 0x09
    1f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4e:	9e 87       	std	Y+14, r25	; 0x0e
    1f50:	8d 87       	std	Y+13, r24	; 0x0d
    1f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <odometry_set_speed+0x108>
    1f5a:	9e 87       	std	Y+14, r25	; 0x0e
    1f5c:	8d 87       	std	Y+13, r24	; 0x0d
    1f5e:	ce 01       	movw	r24, r28
    1f60:	0f 96       	adiw	r24, 0x0f	; 15
    1f62:	63 ec       	ldi	r22, 0xC3	; 195
    1f64:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    1f68:	88 23       	and	r24, r24
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <odometry_set_speed+0x120>
    1f6c:	86 cf       	rjmp	.-244    	; 0x1e7a <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    1f6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f70:	80 93 54 01 	sts	0x0154, r24
}
    1f74:	67 96       	adiw	r28, 0x17	; 23
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	08 95       	ret

00001f86 <odometry_query_position>:
 * 	void odometry_query_position(void)
 *
 * 	Get the current position. Update it to position
 */
void odometry_query_position(void)
{
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	66 97       	sbiw	r28, 0x16	; 22
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1f9a:	80 e5       	ldi	r24, 0x50	; 80
    1f9c:	8f 87       	std	Y+15, r24	; 0x0f
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1f9e:	72 c0       	rjmp	.+228    	; 0x2084 <odometry_query_position+0xfe>
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	a8 e4       	ldi	r26, 0x48	; 72
    1fa6:	b2 e4       	ldi	r27, 0x42	; 66
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	9a 83       	std	Y+2, r25	; 0x02
    1fac:	ab 83       	std	Y+3, r26	; 0x03
    1fae:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e4       	ldi	r19, 0x40	; 64
    1fb4:	4c e1       	ldi	r20, 0x1C	; 28
    1fb6:	55 e4       	ldi	r21, 0x45	; 69
    1fb8:	69 81       	ldd	r22, Y+1	; 0x01
    1fba:	7a 81       	ldd	r23, Y+2	; 0x02
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc0:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	8d 83       	std	Y+5, r24	; 0x05
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	af 83       	std	Y+7, r26	; 0x07
    1fce:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e8       	ldi	r20, 0x80	; 128
    1fd6:	5f e3       	ldi	r21, 0x3F	; 63
    1fd8:	6d 81       	ldd	r22, Y+5	; 0x05
    1fda:	7e 81       	ldd	r23, Y+6	; 0x06
    1fdc:	8f 81       	ldd	r24, Y+7	; 0x07
    1fde:	98 85       	ldd	r25, Y+8	; 0x08
    1fe0:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
    1fe4:	88 23       	and	r24, r24
    1fe6:	2c f4       	brge	.+10     	; 0x1ff2 <odometry_query_position+0x6c>
		__ticks = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9a 87       	std	Y+10, r25	; 0x0a
    1fee:	89 87       	std	Y+9, r24	; 0x09
    1ff0:	3f c0       	rjmp	.+126    	; 0x2070 <odometry_query_position+0xea>
	else if (__tmp > 65535)
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	3f ef       	ldi	r19, 0xFF	; 255
    1ff6:	4f e7       	ldi	r20, 0x7F	; 127
    1ff8:	57 e4       	ldi	r21, 0x47	; 71
    1ffa:	6d 81       	ldd	r22, Y+5	; 0x05
    1ffc:	7e 81       	ldd	r23, Y+6	; 0x06
    1ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    2000:	98 85       	ldd	r25, Y+8	; 0x08
    2002:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
    2006:	18 16       	cp	r1, r24
    2008:	4c f5       	brge	.+82     	; 0x205c <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e2       	ldi	r20, 0x20	; 32
    2010:	51 e4       	ldi	r21, 0x41	; 65
    2012:	69 81       	ldd	r22, Y+1	; 0x01
    2014:	7a 81       	ldd	r23, Y+2	; 0x02
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	9a 87       	std	Y+10, r25	; 0x0a
    2030:	89 87       	std	Y+9, r24	; 0x09
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <odometry_query_position+0xcc>
    2034:	8a ef       	ldi	r24, 0xFA	; 250
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	9c 87       	std	Y+12, r25	; 0x0c
    203a:	8b 87       	std	Y+11, r24	; 0x0b
    203c:	8b 85       	ldd	r24, Y+11	; 0x0b
    203e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <odometry_query_position+0xba>
    2044:	9c 87       	std	Y+12, r25	; 0x0c
    2046:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2048:	89 85       	ldd	r24, Y+9	; 0x09
    204a:	9a 85       	ldd	r25, Y+10	; 0x0a
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	9a 87       	std	Y+10, r25	; 0x0a
    2050:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	89 2b       	or	r24, r25
    2058:	69 f7       	brne	.-38     	; 0x2034 <odometry_query_position+0xae>
    205a:	14 c0       	rjmp	.+40     	; 0x2084 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205c:	6d 81       	ldd	r22, Y+5	; 0x05
    205e:	7e 81       	ldd	r23, Y+6	; 0x06
    2060:	8f 81       	ldd	r24, Y+7	; 0x07
    2062:	98 85       	ldd	r25, Y+8	; 0x08
    2064:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9a 87       	std	Y+10, r25	; 0x0a
    206e:	89 87       	std	Y+9, r24	; 0x09
    2070:	89 85       	ldd	r24, Y+9	; 0x09
    2072:	9a 85       	ldd	r25, Y+10	; 0x0a
    2074:	9e 87       	std	Y+14, r25	; 0x0e
    2076:	8d 87       	std	Y+13, r24	; 0x0d
    2078:	8d 85       	ldd	r24, Y+13	; 0x0d
    207a:	9e 85       	ldd	r25, Y+14	; 0x0e
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <odometry_query_position+0xf6>
    2080:	9e 87       	std	Y+14, r25	; 0x0e
    2082:	8d 87       	std	Y+13, r24	; 0x0d
    2084:	ce 01       	movw	r24, r28
    2086:	0f 96       	adiw	r24, 0x0f	; 15
    2088:	63 ec       	ldi	r22, 0xC3	; 195
    208a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    208e:	88 23       	and	r24, r24
    2090:	09 f0       	breq	.+2      	; 0x2094 <odometry_query_position+0x10e>
    2092:	86 cf       	rjmp	.-244    	; 0x1fa0 <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    2094:	ce 01       	movw	r24, r28
    2096:	0f 96       	adiw	r24, 0x0f	; 15
    2098:	61 e0       	ldi	r22, 0x01	; 1
    209a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CAN_Read>

	position.state = buffer[0];
    209e:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a0:	80 93 10 01 	sts	0x0110, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    20a4:	88 89       	ldd	r24, Y+16	; 0x10
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	38 2f       	mov	r19, r24
    20ac:	22 27       	eor	r18, r18
    20ae:	89 89       	ldd	r24, Y+17	; 0x11
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	82 2b       	or	r24, r18
    20b6:	93 2b       	or	r25, r19
    20b8:	90 93 0b 01 	sts	0x010B, r25
    20bc:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    20c0:	8a 89       	ldd	r24, Y+18	; 0x12
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	38 2f       	mov	r19, r24
    20c8:	22 27       	eor	r18, r18
    20ca:	8b 89       	ldd	r24, Y+19	; 0x13
    20cc:	88 2f       	mov	r24, r24
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	82 2b       	or	r24, r18
    20d2:	93 2b       	or	r25, r19
    20d4:	90 93 0d 01 	sts	0x010D, r25
    20d8:	80 93 0c 01 	sts	0x010C, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    20dc:	8c 89       	ldd	r24, Y+20	; 0x14
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	38 2f       	mov	r19, r24
    20e4:	22 27       	eor	r18, r18
    20e6:	8d 89       	ldd	r24, Y+21	; 0x15
    20e8:	88 2f       	mov	r24, r24
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	82 2b       	or	r24, r18
    20ee:	93 2b       	or	r25, r19
    20f0:	90 93 0f 01 	sts	0x010F, r25
    20f4:	80 93 0e 01 	sts	0x010E, r24
}
    20f8:	66 96       	adiw	r28, 0x16	; 22
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	08 95       	ret

0000210a <odometry_wait_until_done>:
 * 	static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
 *
 * 	Callback function, execute function while odometry is moving
 */
static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	00 d0       	rcall	.+0      	; 0x2110 <odometry_wait_until_done+0x6>
    2110:	00 d0       	rcall	.+0      	; 0x2112 <odometry_wait_until_done+0x8>
    2112:	00 d0       	rcall	.+0      	; 0x2114 <odometry_wait_until_done+0xa>
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	9e 83       	std	Y+6, r25	; 0x06
    211a:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    211c:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <system_get_system_time>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	89 83       	std	Y+1, r24	; 0x01
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	ab 83       	std	Y+3, r26	; 0x03
    212a:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    212c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <odometry_query_position>
		if(callback != NULL)
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	89 2b       	or	r24, r25
    2136:	71 f0       	breq	.+28     	; 0x2154 <odometry_wait_until_done+0x4a>
		{
			if(callback(time) == 1)
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	9a 81       	ldd	r25, Y+2	; 0x02
    213c:	ab 81       	ldd	r26, Y+3	; 0x03
    213e:	bc 81       	ldd	r27, Y+4	; 0x04
    2140:	2d 81       	ldd	r18, Y+5	; 0x05
    2142:	3e 81       	ldd	r19, Y+6	; 0x06
    2144:	bc 01       	movw	r22, r24
    2146:	cd 01       	movw	r24, r26
    2148:	f9 01       	movw	r30, r18
    214a:	09 95       	icall
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	11 f4       	brne	.+4      	; 0x2154 <odometry_wait_until_done+0x4a>
				return ODOMETRY_FAIL;
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	09 c0       	rjmp	.+18     	; 0x2166 <odometry_wait_until_done+0x5c>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    2154:	80 91 10 01 	lds	r24, 0x0110
    2158:	8d 34       	cpi	r24, 0x4D	; 77
    215a:	41 f3       	breq	.-48     	; 0x212c <odometry_wait_until_done+0x22>
    215c:	80 91 10 01 	lds	r24, 0x0110
    2160:	82 35       	cpi	r24, 0x52	; 82
    2162:	21 f3       	breq	.-56     	; 0x212c <odometry_wait_until_done+0x22>

	return ODOMETRY_SUCCESS;
    2164:	80 e0       	ldi	r24, 0x00	; 0
}
    2166:	26 96       	adiw	r28, 0x06	; 6
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	08 95       	ret

00002178 <odometry_stop>:
 * 	void odometry_stop(int8_t type)
 *
 * 	Send stop to odometry
 */
void odometry_stop(int8_t type)
{
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	67 97       	sbiw	r28, 0x17	; 23
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    218e:	8f 89       	ldd	r24, Y+23	; 0x17
    2190:	8f 87       	std	Y+15, r24	; 0x0f

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2192:	72 c0       	rjmp	.+228    	; 0x2278 <odometry_stop+0x100>
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	a8 e4       	ldi	r26, 0x48	; 72
    219a:	b2 e4       	ldi	r27, 0x42	; 66
    219c:	89 83       	std	Y+1, r24	; 0x01
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	ab 83       	std	Y+3, r26	; 0x03
    21a2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e4       	ldi	r19, 0x40	; 64
    21a8:	4c e1       	ldi	r20, 0x1C	; 28
    21aa:	55 e4       	ldi	r21, 0x45	; 69
    21ac:	69 81       	ldd	r22, Y+1	; 0x01
    21ae:	7a 81       	ldd	r23, Y+2	; 0x02
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9c 81       	ldd	r25, Y+4	; 0x04
    21b4:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	8d 83       	std	Y+5, r24	; 0x05
    21be:	9e 83       	std	Y+6, r25	; 0x06
    21c0:	af 83       	std	Y+7, r26	; 0x07
    21c2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e8       	ldi	r20, 0x80	; 128
    21ca:	5f e3       	ldi	r21, 0x3F	; 63
    21cc:	6d 81       	ldd	r22, Y+5	; 0x05
    21ce:	7e 81       	ldd	r23, Y+6	; 0x06
    21d0:	8f 81       	ldd	r24, Y+7	; 0x07
    21d2:	98 85       	ldd	r25, Y+8	; 0x08
    21d4:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
    21d8:	88 23       	and	r24, r24
    21da:	2c f4       	brge	.+10     	; 0x21e6 <odometry_stop+0x6e>
		__ticks = 1;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9a 87       	std	Y+10, r25	; 0x0a
    21e2:	89 87       	std	Y+9, r24	; 0x09
    21e4:	3f c0       	rjmp	.+126    	; 0x2264 <odometry_stop+0xec>
	else if (__tmp > 65535)
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	3f ef       	ldi	r19, 0xFF	; 255
    21ea:	4f e7       	ldi	r20, 0x7F	; 127
    21ec:	57 e4       	ldi	r21, 0x47	; 71
    21ee:	6d 81       	ldd	r22, Y+5	; 0x05
    21f0:	7e 81       	ldd	r23, Y+6	; 0x06
    21f2:	8f 81       	ldd	r24, Y+7	; 0x07
    21f4:	98 85       	ldd	r25, Y+8	; 0x08
    21f6:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
    21fa:	18 16       	cp	r1, r24
    21fc:	4c f5       	brge	.+82     	; 0x2250 <odometry_stop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	69 81       	ldd	r22, Y+1	; 0x01
    2208:	7a 81       	ldd	r23, Y+2	; 0x02
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9a 87       	std	Y+10, r25	; 0x0a
    2224:	89 87       	std	Y+9, r24	; 0x09
    2226:	0f c0       	rjmp	.+30     	; 0x2246 <odometry_stop+0xce>
    2228:	8a ef       	ldi	r24, 0xFA	; 250
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9c 87       	std	Y+12, r25	; 0x0c
    222e:	8b 87       	std	Y+11, r24	; 0x0b
    2230:	8b 85       	ldd	r24, Y+11	; 0x0b
    2232:	9c 85       	ldd	r25, Y+12	; 0x0c
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <odometry_stop+0xbc>
    2238:	9c 87       	std	Y+12, r25	; 0x0c
    223a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223c:	89 85       	ldd	r24, Y+9	; 0x09
    223e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	9a 87       	std	Y+10, r25	; 0x0a
    2244:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2246:	89 85       	ldd	r24, Y+9	; 0x09
    2248:	9a 85       	ldd	r25, Y+10	; 0x0a
    224a:	89 2b       	or	r24, r25
    224c:	69 f7       	brne	.-38     	; 0x2228 <odometry_stop+0xb0>
    224e:	14 c0       	rjmp	.+40     	; 0x2278 <odometry_stop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2250:	6d 81       	ldd	r22, Y+5	; 0x05
    2252:	7e 81       	ldd	r23, Y+6	; 0x06
    2254:	8f 81       	ldd	r24, Y+7	; 0x07
    2256:	98 85       	ldd	r25, Y+8	; 0x08
    2258:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	9a 87       	std	Y+10, r25	; 0x0a
    2262:	89 87       	std	Y+9, r24	; 0x09
    2264:	89 85       	ldd	r24, Y+9	; 0x09
    2266:	9a 85       	ldd	r25, Y+10	; 0x0a
    2268:	9e 87       	std	Y+14, r25	; 0x0e
    226a:	8d 87       	std	Y+13, r24	; 0x0d
    226c:	8d 85       	ldd	r24, Y+13	; 0x0d
    226e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <odometry_stop+0xf8>
    2274:	9e 87       	std	Y+14, r25	; 0x0e
    2276:	8d 87       	std	Y+13, r24	; 0x0d
    2278:	ce 01       	movw	r24, r28
    227a:	0f 96       	adiw	r24, 0x0f	; 15
    227c:	63 ec       	ldi	r22, 0xC3	; 195
    227e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    2282:	88 23       	and	r24, r24
    2284:	09 f0       	breq	.+2      	; 0x2288 <odometry_stop+0x110>
    2286:	86 cf       	rjmp	.-244    	; 0x2194 <odometry_stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    2288:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    228c:	80 91 10 01 	lds	r24, 0x0110
    2290:	8d 34       	cpi	r24, 0x4D	; 77
    2292:	09 f4       	brne	.+2      	; 0x2296 <odometry_stop+0x11e>
    2294:	7c cf       	rjmp	.-264    	; 0x218e <odometry_stop+0x16>
    2296:	80 91 10 01 	lds	r24, 0x0110
    229a:	82 35       	cpi	r24, 0x52	; 82
    229c:	09 f4       	brne	.+2      	; 0x22a0 <odometry_stop+0x128>
    229e:	77 cf       	rjmp	.-274    	; 0x218e <odometry_stop+0x16>
}
    22a0:	67 96       	adiw	r28, 0x17	; 23
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	08 95       	ret

000022b2 <odometry_move_straight>:
 * 	uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move straight command to odometry
 */
uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	6b 97       	sbiw	r28, 0x1b	; 27
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	98 8f       	std	Y+24, r25	; 0x18
    22c8:	8f 8b       	std	Y+23, r24	; 0x17
    22ca:	69 8f       	std	Y+25, r22	; 0x19
    22cc:	5b 8f       	std	Y+27, r21	; 0x1b
    22ce:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    22d0:	89 8d       	ldd	r24, Y+25	; 0x19
    22d2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <odometry_set_speed>
	buffer[0] = 'D';
    22d6:	84 e4       	ldi	r24, 0x44	; 68
    22d8:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    22da:	8f 89       	ldd	r24, Y+23	; 0x17
    22dc:	98 8d       	ldd	r25, Y+24	; 0x18
    22de:	89 2f       	mov	r24, r25
    22e0:	99 0f       	add	r25, r25
    22e2:	99 0b       	sbc	r25, r25
    22e4:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    22e6:	8f 89       	ldd	r24, Y+23	; 0x17
    22e8:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    22ea:	72 c0       	rjmp	.+228    	; 0x23d0 <odometry_move_straight+0x11e>
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	a8 e4       	ldi	r26, 0x48	; 72
    22f2:	b2 e4       	ldi	r27, 0x42	; 66
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	9a 83       	std	Y+2, r25	; 0x02
    22f8:	ab 83       	std	Y+3, r26	; 0x03
    22fa:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e4       	ldi	r19, 0x40	; 64
    2300:	4c e1       	ldi	r20, 0x1C	; 28
    2302:	55 e4       	ldi	r21, 0x45	; 69
    2304:	69 81       	ldd	r22, Y+1	; 0x01
    2306:	7a 81       	ldd	r23, Y+2	; 0x02
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8d 83       	std	Y+5, r24	; 0x05
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	af 83       	std	Y+7, r26	; 0x07
    231a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	6d 81       	ldd	r22, Y+5	; 0x05
    2326:	7e 81       	ldd	r23, Y+6	; 0x06
    2328:	8f 81       	ldd	r24, Y+7	; 0x07
    232a:	98 85       	ldd	r25, Y+8	; 0x08
    232c:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
    2330:	88 23       	and	r24, r24
    2332:	2c f4       	brge	.+10     	; 0x233e <odometry_move_straight+0x8c>
		__ticks = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9a 87       	std	Y+10, r25	; 0x0a
    233a:	89 87       	std	Y+9, r24	; 0x09
    233c:	3f c0       	rjmp	.+126    	; 0x23bc <odometry_move_straight+0x10a>
	else if (__tmp > 65535)
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	3f ef       	ldi	r19, 0xFF	; 255
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	57 e4       	ldi	r21, 0x47	; 71
    2346:	6d 81       	ldd	r22, Y+5	; 0x05
    2348:	7e 81       	ldd	r23, Y+6	; 0x06
    234a:	8f 81       	ldd	r24, Y+7	; 0x07
    234c:	98 85       	ldd	r25, Y+8	; 0x08
    234e:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
    2352:	18 16       	cp	r1, r24
    2354:	4c f5       	brge	.+82     	; 0x23a8 <odometry_move_straight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e2       	ldi	r20, 0x20	; 32
    235c:	51 e4       	ldi	r21, 0x41	; 65
    235e:	69 81       	ldd	r22, Y+1	; 0x01
    2360:	7a 81       	ldd	r23, Y+2	; 0x02
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	9c 81       	ldd	r25, Y+4	; 0x04
    2366:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9a 87       	std	Y+10, r25	; 0x0a
    237c:	89 87       	std	Y+9, r24	; 0x09
    237e:	0f c0       	rjmp	.+30     	; 0x239e <odometry_move_straight+0xec>
    2380:	8a ef       	ldi	r24, 0xFA	; 250
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9c 87       	std	Y+12, r25	; 0x0c
    2386:	8b 87       	std	Y+11, r24	; 0x0b
    2388:	8b 85       	ldd	r24, Y+11	; 0x0b
    238a:	9c 85       	ldd	r25, Y+12	; 0x0c
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <odometry_move_straight+0xda>
    2390:	9c 87       	std	Y+12, r25	; 0x0c
    2392:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2394:	89 85       	ldd	r24, Y+9	; 0x09
    2396:	9a 85       	ldd	r25, Y+10	; 0x0a
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	9a 87       	std	Y+10, r25	; 0x0a
    239c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239e:	89 85       	ldd	r24, Y+9	; 0x09
    23a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a2:	89 2b       	or	r24, r25
    23a4:	69 f7       	brne	.-38     	; 0x2380 <odometry_move_straight+0xce>
    23a6:	14 c0       	rjmp	.+40     	; 0x23d0 <odometry_move_straight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a8:	6d 81       	ldd	r22, Y+5	; 0x05
    23aa:	7e 81       	ldd	r23, Y+6	; 0x06
    23ac:	8f 81       	ldd	r24, Y+7	; 0x07
    23ae:	98 85       	ldd	r25, Y+8	; 0x08
    23b0:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	9a 87       	std	Y+10, r25	; 0x0a
    23ba:	89 87       	std	Y+9, r24	; 0x09
    23bc:	89 85       	ldd	r24, Y+9	; 0x09
    23be:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c0:	9e 87       	std	Y+14, r25	; 0x0e
    23c2:	8d 87       	std	Y+13, r24	; 0x0d
    23c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <odometry_move_straight+0x116>
    23cc:	9e 87       	std	Y+14, r25	; 0x0e
    23ce:	8d 87       	std	Y+13, r24	; 0x0d
    23d0:	ce 01       	movw	r24, r28
    23d2:	0f 96       	adiw	r24, 0x0f	; 15
    23d4:	63 ec       	ldi	r22, 0xC3	; 195
    23d6:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    23da:	88 23       	and	r24, r24
    23dc:	09 f0       	breq	.+2      	; 0x23e0 <odometry_move_straight+0x12e>
    23de:	86 cf       	rjmp	.-244    	; 0x22ec <odometry_move_straight+0x3a>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    23e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23e4:	0e 94 85 10 	call	0x210a	; 0x210a <odometry_wait_until_done>
}
    23e8:	6b 96       	adiw	r28, 0x1b	; 27
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	de bf       	out	0x3e, r29	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	08 95       	ret

000023fa <odometry_move_to_position>:
 * 	uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move to position function to odometry
 */
uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	6c 97       	sbiw	r28, 0x1c	; 28
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	98 8f       	std	Y+24, r25	; 0x18
    2410:	8f 8b       	std	Y+23, r24	; 0x17
    2412:	69 8f       	std	Y+25, r22	; 0x19
    2414:	4a 8f       	std	Y+26, r20	; 0x1a
    2416:	3c 8f       	std	Y+28, r19	; 0x1c
    2418:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    241a:	89 8d       	ldd	r24, Y+25	; 0x19
    241c:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <odometry_set_speed>

	buffer[0] = 'G';
    2420:	87 e4       	ldi	r24, 0x47	; 71
    2422:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    2424:	8f 89       	ldd	r24, Y+23	; 0x17
    2426:	98 8d       	ldd	r25, Y+24	; 0x18
    2428:	fc 01       	movw	r30, r24
    242a:	80 81       	ld	r24, Z
    242c:	91 81       	ldd	r25, Z+1	; 0x01
    242e:	89 2f       	mov	r24, r25
    2430:	99 0f       	add	r25, r25
    2432:	99 0b       	sbc	r25, r25
    2434:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    2436:	8f 89       	ldd	r24, Y+23	; 0x17
    2438:	98 8d       	ldd	r25, Y+24	; 0x18
    243a:	fc 01       	movw	r30, r24
    243c:	80 81       	ld	r24, Z
    243e:	91 81       	ldd	r25, Z+1	; 0x01
    2440:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    2442:	8f 89       	ldd	r24, Y+23	; 0x17
    2444:	98 8d       	ldd	r25, Y+24	; 0x18
    2446:	fc 01       	movw	r30, r24
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	89 2f       	mov	r24, r25
    244e:	99 0f       	add	r25, r25
    2450:	99 0b       	sbc	r25, r25
    2452:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    2454:	8f 89       	ldd	r24, Y+23	; 0x17
    2456:	98 8d       	ldd	r25, Y+24	; 0x18
    2458:	fc 01       	movw	r30, r24
    245a:	82 81       	ldd	r24, Z+2	; 0x02
    245c:	93 81       	ldd	r25, Z+3	; 0x03
    245e:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    2460:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    2462:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2464:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2466:	72 c0       	rjmp	.+228    	; 0x254c <odometry_move_to_position+0x152>
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	a8 e4       	ldi	r26, 0x48	; 72
    246e:	b2 e4       	ldi	r27, 0x42	; 66
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	9a 83       	std	Y+2, r25	; 0x02
    2474:	ab 83       	std	Y+3, r26	; 0x03
    2476:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e4       	ldi	r19, 0x40	; 64
    247c:	4c e1       	ldi	r20, 0x1C	; 28
    247e:	55 e4       	ldi	r21, 0x45	; 69
    2480:	69 81       	ldd	r22, Y+1	; 0x01
    2482:	7a 81       	ldd	r23, Y+2	; 0x02
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	8d 83       	std	Y+5, r24	; 0x05
    2492:	9e 83       	std	Y+6, r25	; 0x06
    2494:	af 83       	std	Y+7, r26	; 0x07
    2496:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e8       	ldi	r20, 0x80	; 128
    249e:	5f e3       	ldi	r21, 0x3F	; 63
    24a0:	6d 81       	ldd	r22, Y+5	; 0x05
    24a2:	7e 81       	ldd	r23, Y+6	; 0x06
    24a4:	8f 81       	ldd	r24, Y+7	; 0x07
    24a6:	98 85       	ldd	r25, Y+8	; 0x08
    24a8:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
    24ac:	88 23       	and	r24, r24
    24ae:	2c f4       	brge	.+10     	; 0x24ba <odometry_move_to_position+0xc0>
		__ticks = 1;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	9a 87       	std	Y+10, r25	; 0x0a
    24b6:	89 87       	std	Y+9, r24	; 0x09
    24b8:	3f c0       	rjmp	.+126    	; 0x2538 <odometry_move_to_position+0x13e>
	else if (__tmp > 65535)
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	3f ef       	ldi	r19, 0xFF	; 255
    24be:	4f e7       	ldi	r20, 0x7F	; 127
    24c0:	57 e4       	ldi	r21, 0x47	; 71
    24c2:	6d 81       	ldd	r22, Y+5	; 0x05
    24c4:	7e 81       	ldd	r23, Y+6	; 0x06
    24c6:	8f 81       	ldd	r24, Y+7	; 0x07
    24c8:	98 85       	ldd	r25, Y+8	; 0x08
    24ca:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
    24ce:	18 16       	cp	r1, r24
    24d0:	4c f5       	brge	.+82     	; 0x2524 <odometry_move_to_position+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e2       	ldi	r20, 0x20	; 32
    24d8:	51 e4       	ldi	r21, 0x41	; 65
    24da:	69 81       	ldd	r22, Y+1	; 0x01
    24dc:	7a 81       	ldd	r23, Y+2	; 0x02
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	9c 81       	ldd	r25, Y+4	; 0x04
    24e2:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	bc 01       	movw	r22, r24
    24ec:	cd 01       	movw	r24, r26
    24ee:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9a 87       	std	Y+10, r25	; 0x0a
    24f8:	89 87       	std	Y+9, r24	; 0x09
    24fa:	0f c0       	rjmp	.+30     	; 0x251a <odometry_move_to_position+0x120>
    24fc:	8a ef       	ldi	r24, 0xFA	; 250
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	9c 87       	std	Y+12, r25	; 0x0c
    2502:	8b 87       	std	Y+11, r24	; 0x0b
    2504:	8b 85       	ldd	r24, Y+11	; 0x0b
    2506:	9c 85       	ldd	r25, Y+12	; 0x0c
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <odometry_move_to_position+0x10e>
    250c:	9c 87       	std	Y+12, r25	; 0x0c
    250e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2510:	89 85       	ldd	r24, Y+9	; 0x09
    2512:	9a 85       	ldd	r25, Y+10	; 0x0a
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	9a 87       	std	Y+10, r25	; 0x0a
    2518:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	89 2b       	or	r24, r25
    2520:	69 f7       	brne	.-38     	; 0x24fc <odometry_move_to_position+0x102>
    2522:	14 c0       	rjmp	.+40     	; 0x254c <odometry_move_to_position+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2524:	6d 81       	ldd	r22, Y+5	; 0x05
    2526:	7e 81       	ldd	r23, Y+6	; 0x06
    2528:	8f 81       	ldd	r24, Y+7	; 0x07
    252a:	98 85       	ldd	r25, Y+8	; 0x08
    252c:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9a 87       	std	Y+10, r25	; 0x0a
    2536:	89 87       	std	Y+9, r24	; 0x09
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	9a 85       	ldd	r25, Y+10	; 0x0a
    253c:	9e 87       	std	Y+14, r25	; 0x0e
    253e:	8d 87       	std	Y+13, r24	; 0x0d
    2540:	8d 85       	ldd	r24, Y+13	; 0x0d
    2542:	9e 85       	ldd	r25, Y+14	; 0x0e
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <odometry_move_to_position+0x14a>
    2548:	9e 87       	std	Y+14, r25	; 0x0e
    254a:	8d 87       	std	Y+13, r24	; 0x0d
    254c:	ce 01       	movw	r24, r28
    254e:	0f 96       	adiw	r24, 0x0f	; 15
    2550:	63 ec       	ldi	r22, 0xC3	; 195
    2552:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    2556:	88 23       	and	r24, r24
    2558:	09 f0       	breq	.+2      	; 0x255c <odometry_move_to_position+0x162>
    255a:	86 cf       	rjmp	.-244    	; 0x2468 <odometry_move_to_position+0x6e>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    255c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    255e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2560:	0e 94 85 10 	call	0x210a	; 0x210a <odometry_wait_until_done>
}
    2564:	6c 96       	adiw	r28, 0x1c	; 28
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	de bf       	out	0x3e, r29	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	cd bf       	out	0x3d, r28	; 61
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	08 95       	ret

00002576 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	68 97       	sbiw	r28, 0x18	; 24
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	98 8f       	std	Y+24, r25	; 0x18
    258c:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    258e:	89 e4       	ldi	r24, 0x49	; 73
    2590:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    2592:	8f 89       	ldd	r24, Y+23	; 0x17
    2594:	98 8d       	ldd	r25, Y+24	; 0x18
    2596:	fc 01       	movw	r30, r24
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	89 2f       	mov	r24, r25
    259e:	99 0f       	add	r25, r25
    25a0:	99 0b       	sbc	r25, r25
    25a2:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    25a4:	8f 89       	ldd	r24, Y+23	; 0x17
    25a6:	98 8d       	ldd	r25, Y+24	; 0x18
    25a8:	fc 01       	movw	r30, r24
    25aa:	80 81       	ld	r24, Z
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    25b0:	8f 89       	ldd	r24, Y+23	; 0x17
    25b2:	98 8d       	ldd	r25, Y+24	; 0x18
    25b4:	fc 01       	movw	r30, r24
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	89 2f       	mov	r24, r25
    25bc:	99 0f       	add	r25, r25
    25be:	99 0b       	sbc	r25, r25
    25c0:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    25c2:	8f 89       	ldd	r24, Y+23	; 0x17
    25c4:	98 8d       	ldd	r25, Y+24	; 0x18
    25c6:	fc 01       	movw	r30, r24
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    25ce:	8f 89       	ldd	r24, Y+23	; 0x17
    25d0:	98 8d       	ldd	r25, Y+24	; 0x18
    25d2:	fc 01       	movw	r30, r24
    25d4:	84 81       	ldd	r24, Z+4	; 0x04
    25d6:	95 81       	ldd	r25, Z+5	; 0x05
    25d8:	89 2f       	mov	r24, r25
    25da:	99 0f       	add	r25, r25
    25dc:	99 0b       	sbc	r25, r25
    25de:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    25e0:	8f 89       	ldd	r24, Y+23	; 0x17
    25e2:	98 8d       	ldd	r25, Y+24	; 0x18
    25e4:	fc 01       	movw	r30, r24
    25e6:	84 81       	ldd	r24, Z+4	; 0x04
    25e8:	95 81       	ldd	r25, Z+5	; 0x05
    25ea:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    25ec:	8f 89       	ldd	r24, Y+23	; 0x17
    25ee:	98 8d       	ldd	r25, Y+24	; 0x18
    25f0:	fc 01       	movw	r30, r24
    25f2:	80 81       	ld	r24, Z
    25f4:	91 81       	ldd	r25, Z+1	; 0x01
    25f6:	90 93 0b 01 	sts	0x010B, r25
    25fa:	80 93 0a 01 	sts	0x010A, r24
	position.y	   = new_position->y;
    25fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2600:	98 8d       	ldd	r25, Y+24	; 0x18
    2602:	fc 01       	movw	r30, r24
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	90 93 0d 01 	sts	0x010D, r25
    260c:	80 93 0c 01 	sts	0x010C, r24
	position.angle = new_position->angle;
    2610:	8f 89       	ldd	r24, Y+23	; 0x17
    2612:	98 8d       	ldd	r25, Y+24	; 0x18
    2614:	fc 01       	movw	r30, r24
    2616:	84 81       	ldd	r24, Z+4	; 0x04
    2618:	95 81       	ldd	r25, Z+5	; 0x05
    261a:	90 93 0f 01 	sts	0x010F, r25
    261e:	80 93 0e 01 	sts	0x010E, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2622:	72 c0       	rjmp	.+228    	; 0x2708 <odometry_set_position+0x192>
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	a8 e4       	ldi	r26, 0x48	; 72
    262a:	b2 e4       	ldi	r27, 0x42	; 66
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	9a 83       	std	Y+2, r25	; 0x02
    2630:	ab 83       	std	Y+3, r26	; 0x03
    2632:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e4       	ldi	r19, 0x40	; 64
    2638:	4c e1       	ldi	r20, 0x1C	; 28
    263a:	55 e4       	ldi	r21, 0x45	; 69
    263c:	69 81       	ldd	r22, Y+1	; 0x01
    263e:	7a 81       	ldd	r23, Y+2	; 0x02
    2640:	8b 81       	ldd	r24, Y+3	; 0x03
    2642:	9c 81       	ldd	r25, Y+4	; 0x04
    2644:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	8d 83       	std	Y+5, r24	; 0x05
    264e:	9e 83       	std	Y+6, r25	; 0x06
    2650:	af 83       	std	Y+7, r26	; 0x07
    2652:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e8       	ldi	r20, 0x80	; 128
    265a:	5f e3       	ldi	r21, 0x3F	; 63
    265c:	6d 81       	ldd	r22, Y+5	; 0x05
    265e:	7e 81       	ldd	r23, Y+6	; 0x06
    2660:	8f 81       	ldd	r24, Y+7	; 0x07
    2662:	98 85       	ldd	r25, Y+8	; 0x08
    2664:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
    2668:	88 23       	and	r24, r24
    266a:	2c f4       	brge	.+10     	; 0x2676 <odometry_set_position+0x100>
		__ticks = 1;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9a 87       	std	Y+10, r25	; 0x0a
    2672:	89 87       	std	Y+9, r24	; 0x09
    2674:	3f c0       	rjmp	.+126    	; 0x26f4 <odometry_set_position+0x17e>
	else if (__tmp > 65535)
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	3f ef       	ldi	r19, 0xFF	; 255
    267a:	4f e7       	ldi	r20, 0x7F	; 127
    267c:	57 e4       	ldi	r21, 0x47	; 71
    267e:	6d 81       	ldd	r22, Y+5	; 0x05
    2680:	7e 81       	ldd	r23, Y+6	; 0x06
    2682:	8f 81       	ldd	r24, Y+7	; 0x07
    2684:	98 85       	ldd	r25, Y+8	; 0x08
    2686:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
    268a:	18 16       	cp	r1, r24
    268c:	4c f5       	brge	.+82     	; 0x26e0 <odometry_set_position+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e2       	ldi	r20, 0x20	; 32
    2694:	51 e4       	ldi	r21, 0x41	; 65
    2696:	69 81       	ldd	r22, Y+1	; 0x01
    2698:	7a 81       	ldd	r23, Y+2	; 0x02
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9a 87       	std	Y+10, r25	; 0x0a
    26b4:	89 87       	std	Y+9, r24	; 0x09
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <odometry_set_position+0x160>
    26b8:	8a ef       	ldi	r24, 0xFA	; 250
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9c 87       	std	Y+12, r25	; 0x0c
    26be:	8b 87       	std	Y+11, r24	; 0x0b
    26c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    26c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <odometry_set_position+0x14e>
    26c8:	9c 87       	std	Y+12, r25	; 0x0c
    26ca:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26cc:	89 85       	ldd	r24, Y+9	; 0x09
    26ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	9a 87       	std	Y+10, r25	; 0x0a
    26d4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d6:	89 85       	ldd	r24, Y+9	; 0x09
    26d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26da:	89 2b       	or	r24, r25
    26dc:	69 f7       	brne	.-38     	; 0x26b8 <odometry_set_position+0x142>
    26de:	14 c0       	rjmp	.+40     	; 0x2708 <odometry_set_position+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e0:	6d 81       	ldd	r22, Y+5	; 0x05
    26e2:	7e 81       	ldd	r23, Y+6	; 0x06
    26e4:	8f 81       	ldd	r24, Y+7	; 0x07
    26e6:	98 85       	ldd	r25, Y+8	; 0x08
    26e8:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	9a 87       	std	Y+10, r25	; 0x0a
    26f2:	89 87       	std	Y+9, r24	; 0x09
    26f4:	89 85       	ldd	r24, Y+9	; 0x09
    26f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f8:	9e 87       	std	Y+14, r25	; 0x0e
    26fa:	8d 87       	std	Y+13, r24	; 0x0d
    26fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <odometry_set_position+0x18a>
    2704:	9e 87       	std	Y+14, r25	; 0x0e
    2706:	8d 87       	std	Y+13, r24	; 0x0d
    2708:	ce 01       	movw	r24, r28
    270a:	0f 96       	adiw	r24, 0x0f	; 15
    270c:	63 ec       	ldi	r22, 0xC3	; 195
    270e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    2712:	88 23       	and	r24, r24
    2714:	09 f0       	breq	.+2      	; 0x2718 <odometry_set_position+0x1a2>
    2716:	86 cf       	rjmp	.-244    	; 0x2624 <odometry_set_position+0xae>
		_delay_ms(50);
}
    2718:	68 96       	adiw	r28, 0x18	; 24
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	cd bf       	out	0x3d, r28	; 61
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	08 95       	ret

0000272a <odometry_rotate_for>:
 * 	uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send rotate for command to odometry board
 */
uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	6b 97       	sbiw	r28, 0x1b	; 27
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	98 8f       	std	Y+24, r25	; 0x18
    2740:	8f 8b       	std	Y+23, r24	; 0x17
    2742:	69 8f       	std	Y+25, r22	; 0x19
    2744:	5b 8f       	std	Y+27, r21	; 0x1b
    2746:	4a 8f       	std	Y+26, r20	; 0x1a

	uint8_t buffer[8];
	odometry_set_speed(speed);
    2748:	89 8d       	ldd	r24, Y+25	; 0x19
    274a:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <odometry_set_speed>

	buffer[0] = 'T';
    274e:	84 e5       	ldi	r24, 0x54	; 84
    2750:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    2752:	8f 89       	ldd	r24, Y+23	; 0x17
    2754:	98 8d       	ldd	r25, Y+24	; 0x18
    2756:	89 2f       	mov	r24, r25
    2758:	99 27       	eor	r25, r25
    275a:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    275c:	8f 89       	ldd	r24, Y+23	; 0x17
    275e:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2760:	72 c0       	rjmp	.+228    	; 0x2846 <odometry_rotate_for+0x11c>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	a8 e4       	ldi	r26, 0x48	; 72
    2768:	b2 e4       	ldi	r27, 0x42	; 66
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	9a 83       	std	Y+2, r25	; 0x02
    276e:	ab 83       	std	Y+3, r26	; 0x03
    2770:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e4       	ldi	r19, 0x40	; 64
    2776:	4c e1       	ldi	r20, 0x1C	; 28
    2778:	55 e4       	ldi	r21, 0x45	; 69
    277a:	69 81       	ldd	r22, Y+1	; 0x01
    277c:	7a 81       	ldd	r23, Y+2	; 0x02
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	8d 83       	std	Y+5, r24	; 0x05
    278c:	9e 83       	std	Y+6, r25	; 0x06
    278e:	af 83       	std	Y+7, r26	; 0x07
    2790:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e8       	ldi	r20, 0x80	; 128
    2798:	5f e3       	ldi	r21, 0x3F	; 63
    279a:	6d 81       	ldd	r22, Y+5	; 0x05
    279c:	7e 81       	ldd	r23, Y+6	; 0x06
    279e:	8f 81       	ldd	r24, Y+7	; 0x07
    27a0:	98 85       	ldd	r25, Y+8	; 0x08
    27a2:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	2c f4       	brge	.+10     	; 0x27b4 <odometry_rotate_for+0x8a>
		__ticks = 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9a 87       	std	Y+10, r25	; 0x0a
    27b0:	89 87       	std	Y+9, r24	; 0x09
    27b2:	3f c0       	rjmp	.+126    	; 0x2832 <odometry_rotate_for+0x108>
	else if (__tmp > 65535)
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	3f ef       	ldi	r19, 0xFF	; 255
    27b8:	4f e7       	ldi	r20, 0x7F	; 127
    27ba:	57 e4       	ldi	r21, 0x47	; 71
    27bc:	6d 81       	ldd	r22, Y+5	; 0x05
    27be:	7e 81       	ldd	r23, Y+6	; 0x06
    27c0:	8f 81       	ldd	r24, Y+7	; 0x07
    27c2:	98 85       	ldd	r25, Y+8	; 0x08
    27c4:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
    27c8:	18 16       	cp	r1, r24
    27ca:	4c f5       	brge	.+82     	; 0x281e <odometry_rotate_for+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e2       	ldi	r20, 0x20	; 32
    27d2:	51 e4       	ldi	r21, 0x41	; 65
    27d4:	69 81       	ldd	r22, Y+1	; 0x01
    27d6:	7a 81       	ldd	r23, Y+2	; 0x02
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	9c 81       	ldd	r25, Y+4	; 0x04
    27dc:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	9a 87       	std	Y+10, r25	; 0x0a
    27f2:	89 87       	std	Y+9, r24	; 0x09
    27f4:	0f c0       	rjmp	.+30     	; 0x2814 <odometry_rotate_for+0xea>
    27f6:	8a ef       	ldi	r24, 0xFA	; 250
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	9c 87       	std	Y+12, r25	; 0x0c
    27fc:	8b 87       	std	Y+11, r24	; 0x0b
    27fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2800:	9c 85       	ldd	r25, Y+12	; 0x0c
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <odometry_rotate_for+0xd8>
    2806:	9c 87       	std	Y+12, r25	; 0x0c
    2808:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280a:	89 85       	ldd	r24, Y+9	; 0x09
    280c:	9a 85       	ldd	r25, Y+10	; 0x0a
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	9a 87       	std	Y+10, r25	; 0x0a
    2812:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	89 2b       	or	r24, r25
    281a:	69 f7       	brne	.-38     	; 0x27f6 <odometry_rotate_for+0xcc>
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <odometry_rotate_for+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281e:	6d 81       	ldd	r22, Y+5	; 0x05
    2820:	7e 81       	ldd	r23, Y+6	; 0x06
    2822:	8f 81       	ldd	r24, Y+7	; 0x07
    2824:	98 85       	ldd	r25, Y+8	; 0x08
    2826:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	9a 87       	std	Y+10, r25	; 0x0a
    2830:	89 87       	std	Y+9, r24	; 0x09
    2832:	89 85       	ldd	r24, Y+9	; 0x09
    2834:	9a 85       	ldd	r25, Y+10	; 0x0a
    2836:	9e 87       	std	Y+14, r25	; 0x0e
    2838:	8d 87       	std	Y+13, r24	; 0x0d
    283a:	8d 85       	ldd	r24, Y+13	; 0x0d
    283c:	9e 85       	ldd	r25, Y+14	; 0x0e
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <odometry_rotate_for+0x114>
    2842:	9e 87       	std	Y+14, r25	; 0x0e
    2844:	8d 87       	std	Y+13, r24	; 0x0d
    2846:	ce 01       	movw	r24, r28
    2848:	0f 96       	adiw	r24, 0x0f	; 15
    284a:	63 ec       	ldi	r22, 0xC3	; 195
    284c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    2850:	88 23       	and	r24, r24
    2852:	09 f0       	breq	.+2      	; 0x2856 <odometry_rotate_for+0x12c>
    2854:	86 cf       	rjmp	.-244    	; 0x2762 <odometry_rotate_for+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2856:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2858:	9b 8d       	ldd	r25, Y+27	; 0x1b
    285a:	0e 94 85 10 	call	0x210a	; 0x210a <odometry_wait_until_done>

}
    285e:	6b 96       	adiw	r28, 0x1b	; 27
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	08 95       	ret

00002870 <odometry_set_angle>:
 * 	uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Set angle for odometry
 */
uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	6b 97       	sbiw	r28, 0x1b	; 27
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	cd bf       	out	0x3d, r28	; 61
    2884:	98 8f       	std	Y+24, r25	; 0x18
    2886:	8f 8b       	std	Y+23, r24	; 0x17
    2888:	69 8f       	std	Y+25, r22	; 0x19
    288a:	5b 8f       	std	Y+27, r21	; 0x1b
    288c:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    288e:	89 8d       	ldd	r24, Y+25	; 0x19
    2890:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <odometry_set_speed>

	buffer[0] = 'A';
    2894:	81 e4       	ldi	r24, 0x41	; 65
    2896:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    2898:	8f 89       	ldd	r24, Y+23	; 0x17
    289a:	98 8d       	ldd	r25, Y+24	; 0x18
    289c:	89 2f       	mov	r24, r25
    289e:	99 27       	eor	r25, r25
    28a0:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    28a2:	8f 89       	ldd	r24, Y+23	; 0x17
    28a4:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    28a6:	72 c0       	rjmp	.+228    	; 0x298c <odometry_set_angle+0x11c>
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	a8 e4       	ldi	r26, 0x48	; 72
    28ae:	b2 e4       	ldi	r27, 0x42	; 66
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	9a 83       	std	Y+2, r25	; 0x02
    28b4:	ab 83       	std	Y+3, r26	; 0x03
    28b6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e4       	ldi	r19, 0x40	; 64
    28bc:	4c e1       	ldi	r20, 0x1C	; 28
    28be:	55 e4       	ldi	r21, 0x45	; 69
    28c0:	69 81       	ldd	r22, Y+1	; 0x01
    28c2:	7a 81       	ldd	r23, Y+2	; 0x02
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	9c 81       	ldd	r25, Y+4	; 0x04
    28c8:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	8d 83       	std	Y+5, r24	; 0x05
    28d2:	9e 83       	std	Y+6, r25	; 0x06
    28d4:	af 83       	std	Y+7, r26	; 0x07
    28d6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	40 e8       	ldi	r20, 0x80	; 128
    28de:	5f e3       	ldi	r21, 0x3F	; 63
    28e0:	6d 81       	ldd	r22, Y+5	; 0x05
    28e2:	7e 81       	ldd	r23, Y+6	; 0x06
    28e4:	8f 81       	ldd	r24, Y+7	; 0x07
    28e6:	98 85       	ldd	r25, Y+8	; 0x08
    28e8:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
    28ec:	88 23       	and	r24, r24
    28ee:	2c f4       	brge	.+10     	; 0x28fa <odometry_set_angle+0x8a>
		__ticks = 1;
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	9a 87       	std	Y+10, r25	; 0x0a
    28f6:	89 87       	std	Y+9, r24	; 0x09
    28f8:	3f c0       	rjmp	.+126    	; 0x2978 <odometry_set_angle+0x108>
	else if (__tmp > 65535)
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	3f ef       	ldi	r19, 0xFF	; 255
    28fe:	4f e7       	ldi	r20, 0x7F	; 127
    2900:	57 e4       	ldi	r21, 0x47	; 71
    2902:	6d 81       	ldd	r22, Y+5	; 0x05
    2904:	7e 81       	ldd	r23, Y+6	; 0x06
    2906:	8f 81       	ldd	r24, Y+7	; 0x07
    2908:	98 85       	ldd	r25, Y+8	; 0x08
    290a:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
    290e:	18 16       	cp	r1, r24
    2910:	4c f5       	brge	.+82     	; 0x2964 <odometry_set_angle+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e2       	ldi	r20, 0x20	; 32
    2918:	51 e4       	ldi	r21, 0x41	; 65
    291a:	69 81       	ldd	r22, Y+1	; 0x01
    291c:	7a 81       	ldd	r23, Y+2	; 0x02
    291e:	8b 81       	ldd	r24, Y+3	; 0x03
    2920:	9c 81       	ldd	r25, Y+4	; 0x04
    2922:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	bc 01       	movw	r22, r24
    292c:	cd 01       	movw	r24, r26
    292e:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	9a 87       	std	Y+10, r25	; 0x0a
    2938:	89 87       	std	Y+9, r24	; 0x09
    293a:	0f c0       	rjmp	.+30     	; 0x295a <odometry_set_angle+0xea>
    293c:	8a ef       	ldi	r24, 0xFA	; 250
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	9c 87       	std	Y+12, r25	; 0x0c
    2942:	8b 87       	std	Y+11, r24	; 0x0b
    2944:	8b 85       	ldd	r24, Y+11	; 0x0b
    2946:	9c 85       	ldd	r25, Y+12	; 0x0c
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	f1 f7       	brne	.-4      	; 0x2948 <odometry_set_angle+0xd8>
    294c:	9c 87       	std	Y+12, r25	; 0x0c
    294e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2950:	89 85       	ldd	r24, Y+9	; 0x09
    2952:	9a 85       	ldd	r25, Y+10	; 0x0a
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	9a 87       	std	Y+10, r25	; 0x0a
    2958:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295a:	89 85       	ldd	r24, Y+9	; 0x09
    295c:	9a 85       	ldd	r25, Y+10	; 0x0a
    295e:	89 2b       	or	r24, r25
    2960:	69 f7       	brne	.-38     	; 0x293c <odometry_set_angle+0xcc>
    2962:	14 c0       	rjmp	.+40     	; 0x298c <odometry_set_angle+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2964:	6d 81       	ldd	r22, Y+5	; 0x05
    2966:	7e 81       	ldd	r23, Y+6	; 0x06
    2968:	8f 81       	ldd	r24, Y+7	; 0x07
    296a:	98 85       	ldd	r25, Y+8	; 0x08
    296c:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	9a 87       	std	Y+10, r25	; 0x0a
    2976:	89 87       	std	Y+9, r24	; 0x09
    2978:	89 85       	ldd	r24, Y+9	; 0x09
    297a:	9a 85       	ldd	r25, Y+10	; 0x0a
    297c:	9e 87       	std	Y+14, r25	; 0x0e
    297e:	8d 87       	std	Y+13, r24	; 0x0d
    2980:	8d 85       	ldd	r24, Y+13	; 0x0d
    2982:	9e 85       	ldd	r25, Y+14	; 0x0e
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	f1 f7       	brne	.-4      	; 0x2984 <odometry_set_angle+0x114>
    2988:	9e 87       	std	Y+14, r25	; 0x0e
    298a:	8d 87       	std	Y+13, r24	; 0x0d
    298c:	ce 01       	movw	r24, r28
    298e:	0f 96       	adiw	r24, 0x0f	; 15
    2990:	63 ec       	ldi	r22, 0xC3	; 195
    2992:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    2996:	88 23       	and	r24, r24
    2998:	09 f0       	breq	.+2      	; 0x299c <odometry_set_angle+0x12c>
    299a:	86 cf       	rjmp	.-244    	; 0x28a8 <odometry_set_angle+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    299c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    299e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29a0:	0e 94 85 10 	call	0x210a	; 0x210a <odometry_wait_until_done>
}
    29a4:	6b 96       	adiw	r28, 0x1b	; 27
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	de bf       	out	0x3e, r29	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	cd bf       	out	0x3d, r28	; 61
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	08 95       	ret

000029b6 <odometry_kurva>:

uint8_t odometry_kurva(uint16_t x_pos, uint16_t y_pos, int8_t angle, uint8_t direction, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    29b6:	ef 92       	push	r14
    29b8:	ff 92       	push	r15
    29ba:	0f 93       	push	r16
    29bc:	cf 93       	push	r28
    29be:	df 93       	push	r29
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    29c4:	6f 97       	sbiw	r28, 0x1f	; 31
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	98 8f       	std	Y+24, r25	; 0x18
    29d2:	8f 8b       	std	Y+23, r24	; 0x17
    29d4:	7a 8f       	std	Y+26, r23	; 0x1a
    29d6:	69 8f       	std	Y+25, r22	; 0x19
    29d8:	4b 8f       	std	Y+27, r20	; 0x1b
    29da:	2c 8f       	std	Y+28, r18	; 0x1c
    29dc:	0d 8f       	std	Y+29, r16	; 0x1d
    29de:	ff 8e       	std	Y+31, r15	; 0x1f
    29e0:	ee 8e       	std	Y+30, r14	; 0x1e
	uint8_t buffer[8];

	odometry_set_speed(speed);
    29e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29e4:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <odometry_set_speed>

	buffer[0] = 'Q';
    29e8:	81 e5       	ldi	r24, 0x51	; 81
    29ea:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = x_pos >> 8;
    29ec:	8f 89       	ldd	r24, Y+23	; 0x17
    29ee:	98 8d       	ldd	r25, Y+24	; 0x18
    29f0:	89 2f       	mov	r24, r25
    29f2:	99 27       	eor	r25, r25
    29f4:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = x_pos & 0xFF;
    29f6:	8f 89       	ldd	r24, Y+23	; 0x17
    29f8:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = y_pos >> 8;
    29fa:	89 8d       	ldd	r24, Y+25	; 0x19
    29fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    29fe:	89 2f       	mov	r24, r25
    2a00:	99 27       	eor	r25, r25
    2a02:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = y_pos & 0xFF;
    2a04:	89 8d       	ldd	r24, Y+25	; 0x19
    2a06:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = angle >> 8;
    2a08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a0a:	08 2e       	mov	r0, r24
    2a0c:	00 0c       	add	r0, r0
    2a0e:	99 0b       	sbc	r25, r25
    2a10:	89 2f       	mov	r24, r25
    2a12:	99 0f       	add	r25, r25
    2a14:	99 0b       	sbc	r25, r25
    2a16:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = angle & 0xFF;
    2a18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a1a:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[7] = direction;
    2a1c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a1e:	8e 8b       	std	Y+22, r24	; 0x16

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2a20:	72 c0       	rjmp	.+228    	; 0x2b06 <odometry_kurva+0x150>
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	a8 e4       	ldi	r26, 0x48	; 72
    2a28:	b2 e4       	ldi	r27, 0x42	; 66
    2a2a:	89 83       	std	Y+1, r24	; 0x01
    2a2c:	9a 83       	std	Y+2, r25	; 0x02
    2a2e:	ab 83       	std	Y+3, r26	; 0x03
    2a30:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e4       	ldi	r19, 0x40	; 64
    2a36:	4c e1       	ldi	r20, 0x1C	; 28
    2a38:	55 e4       	ldi	r21, 0x45	; 69
    2a3a:	69 81       	ldd	r22, Y+1	; 0x01
    2a3c:	7a 81       	ldd	r23, Y+2	; 0x02
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	9c 81       	ldd	r25, Y+4	; 0x04
    2a42:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
    2a4c:	9e 83       	std	Y+6, r25	; 0x06
    2a4e:	af 83       	std	Y+7, r26	; 0x07
    2a50:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e8       	ldi	r20, 0x80	; 128
    2a58:	5f e3       	ldi	r21, 0x3F	; 63
    2a5a:	6d 81       	ldd	r22, Y+5	; 0x05
    2a5c:	7e 81       	ldd	r23, Y+6	; 0x06
    2a5e:	8f 81       	ldd	r24, Y+7	; 0x07
    2a60:	98 85       	ldd	r25, Y+8	; 0x08
    2a62:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
    2a66:	88 23       	and	r24, r24
    2a68:	2c f4       	brge	.+10     	; 0x2a74 <odometry_kurva+0xbe>
		__ticks = 1;
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	9a 87       	std	Y+10, r25	; 0x0a
    2a70:	89 87       	std	Y+9, r24	; 0x09
    2a72:	3f c0       	rjmp	.+126    	; 0x2af2 <odometry_kurva+0x13c>
	else if (__tmp > 65535)
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	3f ef       	ldi	r19, 0xFF	; 255
    2a78:	4f e7       	ldi	r20, 0x7F	; 127
    2a7a:	57 e4       	ldi	r21, 0x47	; 71
    2a7c:	6d 81       	ldd	r22, Y+5	; 0x05
    2a7e:	7e 81       	ldd	r23, Y+6	; 0x06
    2a80:	8f 81       	ldd	r24, Y+7	; 0x07
    2a82:	98 85       	ldd	r25, Y+8	; 0x08
    2a84:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
    2a88:	18 16       	cp	r1, r24
    2a8a:	4c f5       	brge	.+82     	; 0x2ade <odometry_kurva+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e2       	ldi	r20, 0x20	; 32
    2a92:	51 e4       	ldi	r21, 0x41	; 65
    2a94:	69 81       	ldd	r22, Y+1	; 0x01
    2a96:	7a 81       	ldd	r23, Y+2	; 0x02
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9c:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	bc 01       	movw	r22, r24
    2aa6:	cd 01       	movw	r24, r26
    2aa8:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	9a 87       	std	Y+10, r25	; 0x0a
    2ab2:	89 87       	std	Y+9, r24	; 0x09
    2ab4:	0f c0       	rjmp	.+30     	; 0x2ad4 <odometry_kurva+0x11e>
    2ab6:	8a ef       	ldi	r24, 0xFA	; 250
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	9c 87       	std	Y+12, r25	; 0x0c
    2abc:	8b 87       	std	Y+11, r24	; 0x0b
    2abe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ac0:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <odometry_kurva+0x10c>
    2ac6:	9c 87       	std	Y+12, r25	; 0x0c
    2ac8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aca:	89 85       	ldd	r24, Y+9	; 0x09
    2acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	9a 87       	std	Y+10, r25	; 0x0a
    2ad2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad4:	89 85       	ldd	r24, Y+9	; 0x09
    2ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad8:	89 2b       	or	r24, r25
    2ada:	69 f7       	brne	.-38     	; 0x2ab6 <odometry_kurva+0x100>
    2adc:	14 c0       	rjmp	.+40     	; 0x2b06 <odometry_kurva+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ade:	6d 81       	ldd	r22, Y+5	; 0x05
    2ae0:	7e 81       	ldd	r23, Y+6	; 0x06
    2ae2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ae4:	98 85       	ldd	r25, Y+8	; 0x08
    2ae6:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	9a 87       	std	Y+10, r25	; 0x0a
    2af0:	89 87       	std	Y+9, r24	; 0x09
    2af2:	89 85       	ldd	r24, Y+9	; 0x09
    2af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af6:	9e 87       	std	Y+14, r25	; 0x0e
    2af8:	8d 87       	std	Y+13, r24	; 0x0d
    2afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	f1 f7       	brne	.-4      	; 0x2afe <odometry_kurva+0x148>
    2b02:	9e 87       	std	Y+14, r25	; 0x0e
    2b04:	8d 87       	std	Y+13, r24	; 0x0d
    2b06:	ce 01       	movw	r24, r28
    2b08:	0f 96       	adiw	r24, 0x0f	; 15
    2b0a:	63 ec       	ldi	r22, 0xC3	; 195
    2b0c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    2b10:	88 23       	and	r24, r24
    2b12:	09 f0       	breq	.+2      	; 0x2b16 <odometry_kurva+0x160>
    2b14:	86 cf       	rjmp	.-244    	; 0x2a22 <odometry_kurva+0x6c>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2b16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b18:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b1a:	0e 94 85 10 	call	0x210a	; 0x210a <odometry_wait_until_done>
}
    2b1e:	6f 96       	adiw	r28, 0x1f	; 31
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	df 91       	pop	r29
    2b2c:	cf 91       	pop	r28
    2b2e:	0f 91       	pop	r16
    2b30:	ff 90       	pop	r15
    2b32:	ef 90       	pop	r14
    2b34:	08 95       	ret

00002b36 <match_end_odometry>:

void match_end_odometry()
{
    2b36:	cf 93       	push	r28
    2b38:	df 93       	push	r29
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
    2b3e:	66 97       	sbiw	r28, 0x16	; 22
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	f8 94       	cli
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];

	buffer[0] = 'K';
    2b4a:	8b e4       	ldi	r24, 0x4B	; 75
    2b4c:	8f 87       	std	Y+15, r24	; 0x0f

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2b4e:	72 c0       	rjmp	.+228    	; 0x2c34 <match_end_odometry+0xfe>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a8 e4       	ldi	r26, 0x48	; 72
    2b56:	b2 e4       	ldi	r27, 0x42	; 66
    2b58:	89 83       	std	Y+1, r24	; 0x01
    2b5a:	9a 83       	std	Y+2, r25	; 0x02
    2b5c:	ab 83       	std	Y+3, r26	; 0x03
    2b5e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e4       	ldi	r19, 0x40	; 64
    2b64:	4c e1       	ldi	r20, 0x1C	; 28
    2b66:	55 e4       	ldi	r21, 0x45	; 69
    2b68:	69 81       	ldd	r22, Y+1	; 0x01
    2b6a:	7a 81       	ldd	r23, Y+2	; 0x02
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b70:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	8d 83       	std	Y+5, r24	; 0x05
    2b7a:	9e 83       	std	Y+6, r25	; 0x06
    2b7c:	af 83       	std	Y+7, r26	; 0x07
    2b7e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e8       	ldi	r20, 0x80	; 128
    2b86:	5f e3       	ldi	r21, 0x3F	; 63
    2b88:	6d 81       	ldd	r22, Y+5	; 0x05
    2b8a:	7e 81       	ldd	r23, Y+6	; 0x06
    2b8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b8e:	98 85       	ldd	r25, Y+8	; 0x08
    2b90:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
    2b94:	88 23       	and	r24, r24
    2b96:	2c f4       	brge	.+10     	; 0x2ba2 <match_end_odometry+0x6c>
		__ticks = 1;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	9a 87       	std	Y+10, r25	; 0x0a
    2b9e:	89 87       	std	Y+9, r24	; 0x09
    2ba0:	3f c0       	rjmp	.+126    	; 0x2c20 <match_end_odometry+0xea>
	else if (__tmp > 65535)
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	3f ef       	ldi	r19, 0xFF	; 255
    2ba6:	4f e7       	ldi	r20, 0x7F	; 127
    2ba8:	57 e4       	ldi	r21, 0x47	; 71
    2baa:	6d 81       	ldd	r22, Y+5	; 0x05
    2bac:	7e 81       	ldd	r23, Y+6	; 0x06
    2bae:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb0:	98 85       	ldd	r25, Y+8	; 0x08
    2bb2:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
    2bb6:	18 16       	cp	r1, r24
    2bb8:	4c f5       	brge	.+82     	; 0x2c0c <match_end_odometry+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e2       	ldi	r20, 0x20	; 32
    2bc0:	51 e4       	ldi	r21, 0x41	; 65
    2bc2:	69 81       	ldd	r22, Y+1	; 0x01
    2bc4:	7a 81       	ldd	r23, Y+2	; 0x02
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bca:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9a 87       	std	Y+10, r25	; 0x0a
    2be0:	89 87       	std	Y+9, r24	; 0x09
    2be2:	0f c0       	rjmp	.+30     	; 0x2c02 <match_end_odometry+0xcc>
    2be4:	8a ef       	ldi	r24, 0xFA	; 250
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	9c 87       	std	Y+12, r25	; 0x0c
    2bea:	8b 87       	std	Y+11, r24	; 0x0b
    2bec:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bee:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <match_end_odometry+0xba>
    2bf4:	9c 87       	std	Y+12, r25	; 0x0c
    2bf6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf8:	89 85       	ldd	r24, Y+9	; 0x09
    2bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	9a 87       	std	Y+10, r25	; 0x0a
    2c00:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c06:	89 2b       	or	r24, r25
    2c08:	69 f7       	brne	.-38     	; 0x2be4 <match_end_odometry+0xae>
    2c0a:	14 c0       	rjmp	.+40     	; 0x2c34 <match_end_odometry+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0c:	6d 81       	ldd	r22, Y+5	; 0x05
    2c0e:	7e 81       	ldd	r23, Y+6	; 0x06
    2c10:	8f 81       	ldd	r24, Y+7	; 0x07
    2c12:	98 85       	ldd	r25, Y+8	; 0x08
    2c14:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	9a 87       	std	Y+10, r25	; 0x0a
    2c1e:	89 87       	std	Y+9, r24	; 0x09
    2c20:	89 85       	ldd	r24, Y+9	; 0x09
    2c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c24:	9e 87       	std	Y+14, r25	; 0x0e
    2c26:	8d 87       	std	Y+13, r24	; 0x0d
    2c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <match_end_odometry+0xf6>
    2c30:	9e 87       	std	Y+14, r25	; 0x0e
    2c32:	8d 87       	std	Y+13, r24	; 0x0d
    2c34:	ce 01       	movw	r24, r28
    2c36:	0f 96       	adiw	r24, 0x0f	; 15
    2c38:	63 ec       	ldi	r22, 0xC3	; 195
    2c3a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    2c3e:	88 23       	and	r24, r24
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <match_end_odometry+0x10e>
    2c42:	86 cf       	rjmp	.-244    	; 0x2b50 <match_end_odometry+0x1a>
			_delay_ms(50);

}
    2c44:	66 96       	adiw	r28, 0x16	; 22
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	08 95       	ret

00002c56 <getState>:

/*
 * 	Update position
 */
uint8_t getState(void)
{
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2c5e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <odometry_query_position>
	return position.state;
    2c62:	80 91 10 01 	lds	r24, 0x0110
}
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	08 95       	ret

00002c6c <odometry_get_x>:

int16_t odometry_get_x(void)
{
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2c74:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <odometry_query_position>
	return position.x;
    2c78:	80 91 0a 01 	lds	r24, 0x010A
    2c7c:	90 91 0b 01 	lds	r25, 0x010B
}
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	08 95       	ret

00002c86 <odometry_get_y>:

int16_t odometry_get_y(void)
{
    2c86:	cf 93       	push	r28
    2c88:	df 93       	push	r29
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2c8e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <odometry_query_position>
	return position.y;
    2c92:	80 91 0c 01 	lds	r24, 0x010C
    2c96:	90 91 0d 01 	lds	r25, 0x010D
}
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	08 95       	ret

00002ca0 <odometry_get_angle>:

int16_t odometry_get_angle(void)
{
    2ca0:	cf 93       	push	r28
    2ca2:	df 93       	push	r29
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2ca8:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <odometry_query_position>
	return position.angle;
    2cac:	80 91 0e 01 	lds	r24, 0x010E
    2cb0:	90 91 0f 01 	lds	r25, 0x010F
}
    2cb4:	df 91       	pop	r29
    2cb6:	cf 91       	pop	r28
    2cb8:	08 95       	ret

00002cba <timer_register_callback>:
 *	Function: 		void timer_register_callback(void (*callback)(void))
 *	Parameters: 	void (*callback)(void))
 *	Description: 	timer callbacks
 */
void timer_register_callback(void (*callback)(void))
{
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
    2cbe:	00 d0       	rcall	.+0      	; 0x2cc0 <timer_register_callback+0x6>
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	9a 83       	std	Y+2, r25	; 0x02
    2cc6:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ccc:	90 93 5b 01 	sts	0x015B, r25
    2cd0:	80 93 5a 01 	sts	0x015A, r24
}
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	08 95       	ret

00002cde <timer_init>:
 *	Function: 		void timer_init(unsigned int freq)
 *	Parameters: 	unsigned int freq - frequency of timer
 *	Description: 	setup timer
 */
void timer_init(unsigned int freq)
{
    2cde:	0f 93       	push	r16
    2ce0:	1f 93       	push	r17
    2ce2:	cf 93       	push	r28
    2ce4:	df 93       	push	r29
    2ce6:	00 d0       	rcall	.+0      	; 0x2ce8 <timer_init+0xa>
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
    2cec:	9a 83       	std	Y+2, r25	; 0x02
    2cee:	89 83       	std	Y+1, r24	; 0x01

    TCCR1A = 0;
    2cf0:	80 e8       	ldi	r24, 0x80	; 128
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    2cf8:	81 e8       	ldi	r24, 0x81	; 129
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	29 e0       	ldi	r18, 0x09	; 9
    2cfe:	fc 01       	movw	r30, r24
    2d00:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    2d02:	08 e8       	ldi	r16, 0x88	; 136
    2d04:	10 e0       	ldi	r17, 0x00	; 0
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0a:	cc 01       	movw	r24, r24
    2d0c:	a0 e0       	ldi	r26, 0x00	; 0
    2d0e:	b0 e0       	ldi	r27, 0x00	; 0
    2d10:	bc 01       	movw	r22, r24
    2d12:	cd 01       	movw	r24, r26
    2d14:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <__floatunsisf>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	9c 01       	movw	r18, r24
    2d1e:	ad 01       	movw	r20, r26
    2d20:	60 e8       	ldi	r22, 0x80	; 128
    2d22:	76 e9       	ldi	r23, 0x96	; 150
    2d24:	88 e1       	ldi	r24, 0x18	; 24
    2d26:	9b e4       	ldi	r25, 0x4B	; 75
    2d28:	0e 94 77 1d 	call	0x3aee	; 0x3aee <__divsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	40 e0       	ldi	r20, 0x00	; 0
    2d36:	5f e3       	ldi	r21, 0x3F	; 63
    2d38:	bc 01       	movw	r22, r24
    2d3a:	cd 01       	movw	r24, r26
    2d3c:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__addsf3>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	f8 01       	movw	r30, r16
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2d56:	8f e6       	ldi	r24, 0x6F	; 111
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	22 e0       	ldi	r18, 0x02	; 2
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	20 83       	st	Z, r18

	SREG |= 0x80;
    2d60:	8f e5       	ldi	r24, 0x5F	; 95
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	2f e5       	ldi	r18, 0x5F	; 95
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	f9 01       	movw	r30, r18
    2d6a:	20 81       	ld	r18, Z
    2d6c:	20 68       	ori	r18, 0x80	; 128
    2d6e:	fc 01       	movw	r30, r24
    2d70:	20 83       	st	Z, r18
}
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	1f 91       	pop	r17
    2d7c:	0f 91       	pop	r16
    2d7e:	08 95       	ret

00002d80 <__vector_12>:
/*
 *	Function: 		ISR(TIMER1_COMPA_vect)
 *	Description: 	ISR interrupt for timer
 */
ISR(TIMER1_COMPA_vect)
{
    2d80:	1f 92       	push	r1
    2d82:	0f 92       	push	r0
    2d84:	00 90 5f 00 	lds	r0, 0x005F
    2d88:	0f 92       	push	r0
    2d8a:	11 24       	eor	r1, r1
    2d8c:	00 90 5b 00 	lds	r0, 0x005B
    2d90:	0f 92       	push	r0
    2d92:	2f 93       	push	r18
    2d94:	3f 93       	push	r19
    2d96:	4f 93       	push	r20
    2d98:	5f 93       	push	r21
    2d9a:	6f 93       	push	r22
    2d9c:	7f 93       	push	r23
    2d9e:	8f 93       	push	r24
    2da0:	9f 93       	push	r25
    2da2:	af 93       	push	r26
    2da4:	bf 93       	push	r27
    2da6:	ef 93       	push	r30
    2da8:	ff 93       	push	r31
    2daa:	cf 93       	push	r28
    2dac:	df 93       	push	r29
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    2db2:	80 91 5a 01 	lds	r24, 0x015A
    2db6:	90 91 5b 01 	lds	r25, 0x015B
    2dba:	89 2b       	or	r24, r25
    2dbc:	31 f0       	breq	.+12     	; 0x2dca <__vector_12+0x4a>
        timer_callback();
    2dbe:	80 91 5a 01 	lds	r24, 0x015A
    2dc2:	90 91 5b 01 	lds	r25, 0x015B
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	09 95       	icall
	if(sys_time >= 90000)					// if match end
    2dca:	80 91 55 01 	lds	r24, 0x0155
    2dce:	90 91 56 01 	lds	r25, 0x0156
    2dd2:	a0 91 57 01 	lds	r26, 0x0157
    2dd6:	b0 91 58 01 	lds	r27, 0x0158
    2dda:	80 39       	cpi	r24, 0x90	; 144
    2ddc:	9f 45       	sbci	r25, 0x5F	; 95
    2dde:	a1 40       	sbci	r26, 0x01	; 1
    2de0:	b1 05       	cpc	r27, r1
    2de2:	28 f0       	brcs	.+10     	; 0x2dee <__vector_12+0x6e>
	{
		if(system_get_match_started())		// if the match has started before
    2de4:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <system_get_match_started>
    2de8:	88 23       	and	r24, r24
    2dea:	09 f0       	breq	.+2      	; 0x2dee <__vector_12+0x6e>
		{

			while(1);
    2dec:	ff cf       	rjmp	.-2      	; 0x2dec <__vector_12+0x6c>
		}
	}
	sys_time++;
    2dee:	80 91 55 01 	lds	r24, 0x0155
    2df2:	90 91 56 01 	lds	r25, 0x0156
    2df6:	a0 91 57 01 	lds	r26, 0x0157
    2dfa:	b0 91 58 01 	lds	r27, 0x0158
    2dfe:	01 96       	adiw	r24, 0x01	; 1
    2e00:	a1 1d       	adc	r26, r1
    2e02:	b1 1d       	adc	r27, r1
    2e04:	80 93 55 01 	sts	0x0155, r24
    2e08:	90 93 56 01 	sts	0x0156, r25
    2e0c:	a0 93 57 01 	sts	0x0157, r26
    2e10:	b0 93 58 01 	sts	0x0158, r27
}
    2e14:	df 91       	pop	r29
    2e16:	cf 91       	pop	r28
    2e18:	ff 91       	pop	r31
    2e1a:	ef 91       	pop	r30
    2e1c:	bf 91       	pop	r27
    2e1e:	af 91       	pop	r26
    2e20:	9f 91       	pop	r25
    2e22:	8f 91       	pop	r24
    2e24:	7f 91       	pop	r23
    2e26:	6f 91       	pop	r22
    2e28:	5f 91       	pop	r21
    2e2a:	4f 91       	pop	r20
    2e2c:	3f 91       	pop	r19
    2e2e:	2f 91       	pop	r18
    2e30:	0f 90       	pop	r0
    2e32:	00 92 5b 00 	sts	0x005B, r0
    2e36:	0f 90       	pop	r0
    2e38:	00 92 5f 00 	sts	0x005F, r0
    2e3c:	0f 90       	pop	r0
    2e3e:	1f 90       	pop	r1
    2e40:	18 95       	reti

00002e42 <system_reset_system_time>:
 *	Function: 		void system_reset_system_time(void)
 *	Parameters: 	void
 *	Description:	reset system time
 */
void system_reset_system_time(void)
{
    2e42:	cf 93       	push	r28
    2e44:	df 93       	push	r29
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    2e4a:	10 92 55 01 	sts	0x0155, r1
    2e4e:	10 92 56 01 	sts	0x0156, r1
    2e52:	10 92 57 01 	sts	0x0157, r1
    2e56:	10 92 58 01 	sts	0x0158, r1
}
    2e5a:	df 91       	pop	r29
    2e5c:	cf 91       	pop	r28
    2e5e:	08 95       	ret

00002e60 <system_set_match_started>:
 *	Function: 		void system_set_match_started(void)
 *	Parameters: 	void
 *	Description:	let the match begiiiiiiiiiin
 */
void system_set_match_started(void)
{
    2e60:	cf 93       	push	r28
    2e62:	df 93       	push	r29
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	80 93 59 01 	sts	0x0159, r24
}
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	08 95       	ret

00002e74 <system_get_system_time>:
 *	Function: 		uint32_t system_get_system_time(void)
 *	Parameters: 	void
 *	Description:	returns current system time
 */
uint32_t system_get_system_time(void)
{
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    2e7c:	80 91 55 01 	lds	r24, 0x0155
    2e80:	90 91 56 01 	lds	r25, 0x0156
    2e84:	a0 91 57 01 	lds	r26, 0x0157
    2e88:	b0 91 58 01 	lds	r27, 0x0158
}
    2e8c:	bc 01       	movw	r22, r24
    2e8e:	cd 01       	movw	r24, r26
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	08 95       	ret

00002e96 <system_get_match_started>:
 *	Function: 		uint8_t system_get_match_started(void)
 *	Parameters: 	void
 *	Description:	return if match has started
 */
uint8_t system_get_match_started(void)
{
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
	return match_started;
    2e9e:	80 91 59 01 	lds	r24, 0x0159
}
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	08 95       	ret

00002ea8 <system_init>:
 *	Function: 		void system_init(void)
 *	Parameters: 	void
 *	Description:	initing all the things
 */
void system_init(void)
{
    2ea8:	cf 93       	push	r28
    2eaa:	df 93       	push	r29
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
    2eb0:	2e 97       	sbiw	r28, 0x0e	; 14
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	de bf       	out	0x3e, r29	; 62
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	cd bf       	out	0x3d, r28	; 61
	// sets debouncer
	timer_register_callback(gpio_debouncer);
    2ebc:	82 ef       	ldi	r24, 0xF2	; 242
    2ebe:	9c e0       	ldi	r25, 0x0C	; 12
    2ec0:	0e 94 5d 16 	call	0x2cba	; 0x2cba <timer_register_callback>
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	a8 ec       	ldi	r26, 0xC8	; 200
    2eca:	b2 e4       	ldi	r27, 0x42	; 66
    2ecc:	89 83       	std	Y+1, r24	; 0x01
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	ab 83       	std	Y+3, r26	; 0x03
    2ed2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e4       	ldi	r19, 0x40	; 64
    2ed8:	4c e1       	ldi	r20, 0x1C	; 28
    2eda:	55 e4       	ldi	r21, 0x45	; 69
    2edc:	69 81       	ldd	r22, Y+1	; 0x01
    2ede:	7a 81       	ldd	r23, Y+2	; 0x02
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee4:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	8d 83       	std	Y+5, r24	; 0x05
    2eee:	9e 83       	std	Y+6, r25	; 0x06
    2ef0:	af 83       	std	Y+7, r26	; 0x07
    2ef2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	40 e8       	ldi	r20, 0x80	; 128
    2efa:	5f e3       	ldi	r21, 0x3F	; 63
    2efc:	6d 81       	ldd	r22, Y+5	; 0x05
    2efe:	7e 81       	ldd	r23, Y+6	; 0x06
    2f00:	8f 81       	ldd	r24, Y+7	; 0x07
    2f02:	98 85       	ldd	r25, Y+8	; 0x08
    2f04:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
    2f08:	88 23       	and	r24, r24
    2f0a:	2c f4       	brge	.+10     	; 0x2f16 <system_init+0x6e>
		__ticks = 1;
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	9a 87       	std	Y+10, r25	; 0x0a
    2f12:	89 87       	std	Y+9, r24	; 0x09
    2f14:	3f c0       	rjmp	.+126    	; 0x2f94 <system_init+0xec>
	else if (__tmp > 65535)
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	3f ef       	ldi	r19, 0xFF	; 255
    2f1a:	4f e7       	ldi	r20, 0x7F	; 127
    2f1c:	57 e4       	ldi	r21, 0x47	; 71
    2f1e:	6d 81       	ldd	r22, Y+5	; 0x05
    2f20:	7e 81       	ldd	r23, Y+6	; 0x06
    2f22:	8f 81       	ldd	r24, Y+7	; 0x07
    2f24:	98 85       	ldd	r25, Y+8	; 0x08
    2f26:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
    2f2a:	18 16       	cp	r1, r24
    2f2c:	4c f5       	brge	.+82     	; 0x2f80 <system_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	40 e2       	ldi	r20, 0x20	; 32
    2f34:	51 e4       	ldi	r21, 0x41	; 65
    2f36:	69 81       	ldd	r22, Y+1	; 0x01
    2f38:	7a 81       	ldd	r23, Y+2	; 0x02
    2f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3e:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	bc 01       	movw	r22, r24
    2f48:	cd 01       	movw	r24, r26
    2f4a:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	9a 87       	std	Y+10, r25	; 0x0a
    2f54:	89 87       	std	Y+9, r24	; 0x09
    2f56:	0f c0       	rjmp	.+30     	; 0x2f76 <system_init+0xce>
    2f58:	8a ef       	ldi	r24, 0xFA	; 250
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9c 87       	std	Y+12, r25	; 0x0c
    2f5e:	8b 87       	std	Y+11, r24	; 0x0b
    2f60:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f62:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <system_init+0xbc>
    2f68:	9c 87       	std	Y+12, r25	; 0x0c
    2f6a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6c:	89 85       	ldd	r24, Y+9	; 0x09
    2f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	9a 87       	std	Y+10, r25	; 0x0a
    2f74:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f76:	89 85       	ldd	r24, Y+9	; 0x09
    2f78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7a:	89 2b       	or	r24, r25
    2f7c:	69 f7       	brne	.-38     	; 0x2f58 <system_init+0xb0>
    2f7e:	14 c0       	rjmp	.+40     	; 0x2fa8 <system_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f80:	6d 81       	ldd	r22, Y+5	; 0x05
    2f82:	7e 81       	ldd	r23, Y+6	; 0x06
    2f84:	8f 81       	ldd	r24, Y+7	; 0x07
    2f86:	98 85       	ldd	r25, Y+8	; 0x08
    2f88:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	9a 87       	std	Y+10, r25	; 0x0a
    2f92:	89 87       	std	Y+9, r24	; 0x09
    2f94:	89 85       	ldd	r24, Y+9	; 0x09
    2f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f98:	9e 87       	std	Y+14, r25	; 0x0e
    2f9a:	8d 87       	std	Y+13, r24	; 0x0d
    2f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <system_init+0xf8>
    2fa4:	9e 87       	std	Y+14, r25	; 0x0e
    2fa6:	8d 87       	std	Y+13, r24	; 0x0d

	// small delay
	_delay_ms(100);

	CAN_Init(1);
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	0e 94 12 09 	call	0x1224	; 0x1224 <CAN_Init>


	//system_reset_system_time();															// reset system time
	//system_set_match_started();															// match has started!

}
    2fae:	2e 96       	adiw	r28, 0x0e	; 14
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	df 91       	pop	r29
    2fbc:	cf 91       	pop	r28
    2fbe:	08 95       	ret

00002fc0 <UART0_Init>:
* Parameters        : unsigned int baud
					  char isrOnOff
* Return Value      : void
*********************************************************************************/
void UART0_Init(unsigned long baud, char isrOnOff)
{
    2fc0:	cf 93       	push	r28
    2fc2:	df 93       	push	r29
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    2fc8:	27 97       	sbiw	r28, 0x07	; 7
    2fca:	0f b6       	in	r0, 0x3f	; 63
    2fcc:	f8 94       	cli
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	0f be       	out	0x3f, r0	; 63
    2fd2:	cd bf       	out	0x3d, r28	; 61
    2fd4:	6b 83       	std	Y+3, r22	; 0x03
    2fd6:	7c 83       	std	Y+4, r23	; 0x04
    2fd8:	8d 83       	std	Y+5, r24	; 0x05
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR0A = 0;
    2fde:	80 ec       	ldi	r24, 0xC0	; 192
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	10 82       	st	Z, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    2fe6:	81 ec       	ldi	r24, 0xC1	; 193
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	28 e1       	ldi	r18, 0x18	; 24
    2fec:	fc 01       	movw	r30, r24
    2fee:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    2ff0:	82 ec       	ldi	r24, 0xC2	; 194
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	26 e0       	ldi	r18, 0x06	; 6
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    2ffa:	8f 81       	ldd	r24, Y+7	; 0x07
    2ffc:	81 30       	cpi	r24, 0x01	; 1
    2ffe:	91 f4       	brne	.+36     	; 0x3024 <UART0_Init+0x64>
	{
		UCSR0B |= ((1 << RXCIE0) | (1 << TXCIE0));
    3000:	81 ec       	ldi	r24, 0xC1	; 193
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	21 ec       	ldi	r18, 0xC1	; 193
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	f9 01       	movw	r30, r18
    300a:	20 81       	ld	r18, Z
    300c:	20 6c       	ori	r18, 0xC0	; 192
    300e:	fc 01       	movw	r30, r24
    3010:	20 83       	st	Z, r18
		SREG |= 0x80;
    3012:	8f e5       	ldi	r24, 0x5F	; 95
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	2f e5       	ldi	r18, 0x5F	; 95
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	f9 01       	movw	r30, r18
    301c:	20 81       	ld	r18, Z
    301e:	20 68       	ori	r18, 0x80	; 128
    3020:	fc 01       	movw	r30, r24
    3022:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    3024:	6b 81       	ldd	r22, Y+3	; 0x03
    3026:	7c 81       	ldd	r23, Y+4	; 0x04
    3028:	8d 81       	ldd	r24, Y+5	; 0x05
    302a:	9e 81       	ldd	r25, Y+6	; 0x06
    302c:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <__floatunsisf>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	40 e8       	ldi	r20, 0x80	; 128
    303a:	51 e4       	ldi	r21, 0x41	; 65
    303c:	bc 01       	movw	r22, r24
    303e:	cd 01       	movw	r24, r26
    3040:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	9c 01       	movw	r18, r24
    304a:	ad 01       	movw	r20, r26
    304c:	60 e8       	ldi	r22, 0x80	; 128
    304e:	76 e9       	ldi	r23, 0x96	; 150
    3050:	88 e1       	ldi	r24, 0x18	; 24
    3052:	9b e4       	ldi	r25, 0x4B	; 75
    3054:	0e 94 77 1d 	call	0x3aee	; 0x3aee <__divsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e8       	ldi	r20, 0x80	; 128
    3062:	5f e3       	ldi	r21, 0x3F	; 63
    3064:	bc 01       	movw	r22, r24
    3066:	cd 01       	movw	r24, r26
    3068:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <__subsf3>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	40 e0       	ldi	r20, 0x00	; 0
    3076:	5f e3       	ldi	r21, 0x3F	; 63
    3078:	bc 01       	movw	r22, r24
    307a:	cd 01       	movw	r24, r26
    307c:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__addsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	bc 01       	movw	r22, r24
    3086:	cd 01       	movw	r24, r26
    3088:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	9a 83       	std	Y+2, r25	; 0x02
    3092:	89 83       	std	Y+1, r24	; 0x01

	UBRR0H = temp >> 8;
    3094:	85 ec       	ldi	r24, 0xC5	; 197
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	29 81       	ldd	r18, Y+1	; 0x01
    309a:	3a 81       	ldd	r19, Y+2	; 0x02
    309c:	23 2f       	mov	r18, r19
    309e:	33 27       	eor	r19, r19
    30a0:	fc 01       	movw	r30, r24
    30a2:	20 83       	st	Z, r18
	UBRR0L = temp;
    30a4:	84 ec       	ldi	r24, 0xC4	; 196
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	29 81       	ldd	r18, Y+1	; 0x01
    30aa:	fc 01       	movw	r30, r24
    30ac:	20 83       	st	Z, r18
}
    30ae:	27 96       	adiw	r28, 0x07	; 7
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	08 95       	ret

000030c0 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    30c0:	1f 92       	push	r1
    30c2:	0f 92       	push	r0
    30c4:	00 90 5f 00 	lds	r0, 0x005F
    30c8:	0f 92       	push	r0
    30ca:	11 24       	eor	r1, r1
    30cc:	00 90 5b 00 	lds	r0, 0x005B
    30d0:	0f 92       	push	r0
    30d2:	2f 93       	push	r18
    30d4:	3f 93       	push	r19
    30d6:	8f 93       	push	r24
    30d8:	9f 93       	push	r25
    30da:	ef 93       	push	r30
    30dc:	ff 93       	push	r31
    30de:	cf 93       	push	r28
    30e0:	df 93       	push	r29
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    30e6:	80 91 9f 01 	lds	r24, 0x019F
    30ea:	88 23       	and	r24, r24
    30ec:	d1 f0       	breq	.+52     	; 0x3122 <__vector_23+0x62>
	{
		tx0_counter--;
    30ee:	80 91 9f 01 	lds	r24, 0x019F
    30f2:	81 50       	subi	r24, 0x01	; 1
    30f4:	80 93 9f 01 	sts	0x019F, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    30f8:	86 ec       	ldi	r24, 0xC6	; 198
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	20 91 a0 01 	lds	r18, 0x01A0
    3100:	22 2f       	mov	r18, r18
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	22 5a       	subi	r18, 0xA2	; 162
    3106:	3e 4f       	sbci	r19, 0xFE	; 254
    3108:	f9 01       	movw	r30, r18
    310a:	20 81       	ld	r18, Z
    310c:	fc 01       	movw	r30, r24
    310e:	20 83       	st	Z, r18
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    3110:	80 91 a0 01 	lds	r24, 0x01A0
    3114:	8f 5f       	subi	r24, 0xFF	; 255
    3116:	80 93 a0 01 	sts	0x01A0, r24
    311a:	80 34       	cpi	r24, 0x40	; 64
    311c:	11 f4       	brne	.+4      	; 0x3122 <__vector_23+0x62>
			tx0_rd_index = 0;
    311e:	10 92 a0 01 	sts	0x01A0, r1
	}
}
    3122:	df 91       	pop	r29
    3124:	cf 91       	pop	r28
    3126:	ff 91       	pop	r31
    3128:	ef 91       	pop	r30
    312a:	9f 91       	pop	r25
    312c:	8f 91       	pop	r24
    312e:	3f 91       	pop	r19
    3130:	2f 91       	pop	r18
    3132:	0f 90       	pop	r0
    3134:	00 92 5b 00 	sts	0x005B, r0
    3138:	0f 90       	pop	r0
    313a:	00 92 5f 00 	sts	0x005F, r0
    313e:	0f 90       	pop	r0
    3140:	1f 90       	pop	r1
    3142:	18 95       	reti

00003144 <UART0_Write>:
/****************************************************************************************************************************************
Slanje podataka USART0 modulom
****************************************************************************************************************************************/

void UART0_Write(unsigned char data)
{
    3144:	cf 93       	push	r28
    3146:	df 93       	push	r29
    3148:	1f 92       	push	r1
    314a:	cd b7       	in	r28, 0x3d	; 61
    314c:	de b7       	in	r29, 0x3e	; 62
    314e:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR0B >> TXCIE0) & 0x01)
    3150:	81 ec       	ldi	r24, 0xC1	; 193
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	fc 01       	movw	r30, r24
    3156:	80 81       	ld	r24, Z
    3158:	82 95       	swap	r24
    315a:	86 95       	lsr	r24
    315c:	86 95       	lsr	r24
    315e:	83 70       	andi	r24, 0x03	; 3
    3160:	88 2f       	mov	r24, r24
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	81 70       	andi	r24, 0x01	; 1
    3166:	99 27       	eor	r25, r25
    3168:	89 2b       	or	r24, r25
    316a:	99 f1       	breq	.+102    	; 0x31d2 <UART0_Write+0x8e>
	{
		while(tx0_counter == TX0_BUFFER_SIZE);
    316c:	00 00       	nop
    316e:	80 91 9f 01 	lds	r24, 0x019F
    3172:	80 34       	cpi	r24, 0x40	; 64
    3174:	e1 f3       	breq	.-8      	; 0x316e <UART0_Write+0x2a>

		cli();
    3176:	f8 94       	cli

		if(tx0_counter || (UCSR0A & 0x20) == 0)
    3178:	80 91 9f 01 	lds	r24, 0x019F
    317c:	88 23       	and	r24, r24
    317e:	51 f4       	brne	.+20     	; 0x3194 <UART0_Write+0x50>
    3180:	80 ec       	ldi	r24, 0xC0	; 192
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	fc 01       	movw	r30, r24
    3186:	80 81       	ld	r24, Z
    3188:	88 2f       	mov	r24, r24
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	80 72       	andi	r24, 0x20	; 32
    318e:	99 27       	eor	r25, r25
    3190:	89 2b       	or	r24, r25
    3192:	c1 f4       	brne	.+48     	; 0x31c4 <UART0_Write+0x80>
		{
			tx0_buffer[tx0_wr_index] = data;
    3194:	80 91 9e 01 	lds	r24, 0x019E
    3198:	88 2f       	mov	r24, r24
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	82 5a       	subi	r24, 0xA2	; 162
    319e:	9e 4f       	sbci	r25, 0xFE	; 254
    31a0:	29 81       	ldd	r18, Y+1	; 0x01
    31a2:	fc 01       	movw	r30, r24
    31a4:	20 83       	st	Z, r18
			if(++tx0_wr_index == TX0_BUFFER_SIZE)
    31a6:	80 91 9e 01 	lds	r24, 0x019E
    31aa:	8f 5f       	subi	r24, 0xFF	; 255
    31ac:	80 93 9e 01 	sts	0x019E, r24
    31b0:	80 34       	cpi	r24, 0x40	; 64
    31b2:	11 f4       	brne	.+4      	; 0x31b8 <UART0_Write+0x74>
				tx0_wr_index = 0;
    31b4:	10 92 9e 01 	sts	0x019E, r1

			tx0_counter++;
    31b8:	80 91 9f 01 	lds	r24, 0x019F
    31bc:	8f 5f       	subi	r24, 0xFF	; 255
    31be:	80 93 9f 01 	sts	0x019F, r24
    31c2:	05 c0       	rjmp	.+10     	; 0x31ce <UART0_Write+0x8a>
		}
		else
			UDR0 = data;
    31c4:	86 ec       	ldi	r24, 0xC6	; 198
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	29 81       	ldd	r18, Y+1	; 0x01
    31ca:	fc 01       	movw	r30, r24
    31cc:	20 83       	st	Z, r18

		sei();
    31ce:	78 94       	sei
    31d0:	03 c0       	rjmp	.+6      	; 0x31d8 <UART0_Write+0x94>
	}
	else
		altUart0Write(data);
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	0e 94 91 1a 	call	0x3522	; 0x3522 <altUart0Write>
}
    31d8:	0f 90       	pop	r0
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	08 95       	ret

000031e0 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    31e0:	1f 92       	push	r1
    31e2:	0f 92       	push	r0
    31e4:	00 90 5f 00 	lds	r0, 0x005F
    31e8:	0f 92       	push	r0
    31ea:	11 24       	eor	r1, r1
    31ec:	00 90 5b 00 	lds	r0, 0x005B
    31f0:	0f 92       	push	r0
    31f2:	2f 93       	push	r18
    31f4:	3f 93       	push	r19
    31f6:	8f 93       	push	r24
    31f8:	9f 93       	push	r25
    31fa:	ef 93       	push	r30
    31fc:	ff 93       	push	r31
    31fe:	cf 93       	push	r28
    3200:	df 93       	push	r29
    3202:	1f 92       	push	r1
    3204:	cd b7       	in	r28, 0x3d	; 61
    3206:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    3208:	80 ec       	ldi	r24, 0xC0	; 192
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	fc 01       	movw	r30, r24
    320e:	80 81       	ld	r24, Z
    3210:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    3212:	89 81       	ldd	r24, Y+1	; 0x01
    3214:	88 2f       	mov	r24, r24
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	8c 71       	andi	r24, 0x1C	; 28
    321a:	99 27       	eor	r25, r25
    321c:	89 2b       	or	r24, r25
    321e:	d1 f4       	brne	.+52     	; 0x3254 <__vector_21+0x74>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    3220:	80 91 e1 01 	lds	r24, 0x01E1
    3224:	88 2f       	mov	r24, r24
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	26 ec       	ldi	r18, 0xC6	; 198
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	f9 01       	movw	r30, r18
    322e:	20 81       	ld	r18, Z
    3230:	8f 55       	subi	r24, 0x5F	; 95
    3232:	9e 4f       	sbci	r25, 0xFE	; 254
    3234:	fc 01       	movw	r30, r24
    3236:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    3238:	80 91 e1 01 	lds	r24, 0x01E1
    323c:	8f 5f       	subi	r24, 0xFF	; 255
    323e:	80 93 e1 01 	sts	0x01E1, r24
    3242:	80 34       	cpi	r24, 0x40	; 64
    3244:	11 f4       	brne	.+4      	; 0x324a <__vector_21+0x6a>
			rx0_wr_index = 0;
    3246:	10 92 e1 01 	sts	0x01E1, r1

		rx0_counter++;
    324a:	80 91 e2 01 	lds	r24, 0x01E2
    324e:	8f 5f       	subi	r24, 0xFF	; 255
    3250:	80 93 e2 01 	sts	0x01E2, r24
	}
}
    3254:	0f 90       	pop	r0
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	ff 91       	pop	r31
    325c:	ef 91       	pop	r30
    325e:	9f 91       	pop	r25
    3260:	8f 91       	pop	r24
    3262:	3f 91       	pop	r19
    3264:	2f 91       	pop	r18
    3266:	0f 90       	pop	r0
    3268:	00 92 5b 00 	sts	0x005B, r0
    326c:	0f 90       	pop	r0
    326e:	00 92 5f 00 	sts	0x005F, r0
    3272:	0f 90       	pop	r0
    3274:	1f 90       	pop	r1
    3276:	18 95       	reti

00003278 <UART0_Read>:
/****************************************************************************************************************************************
Primanje podataka USART0 modulom
****************************************************************************************************************************************/

unsigned char UART0_Read(void)
{
    3278:	cf 93       	push	r28
    327a:	df 93       	push	r29
    327c:	1f 92       	push	r1
    327e:	cd b7       	in	r28, 0x3d	; 61
    3280:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR0B >> RXCIE0) & 0x01)
    3282:	81 ec       	ldi	r24, 0xC1	; 193
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	fc 01       	movw	r30, r24
    3288:	80 81       	ld	r24, Z
    328a:	88 1f       	adc	r24, r24
    328c:	88 27       	eor	r24, r24
    328e:	88 1f       	adc	r24, r24
    3290:	88 2f       	mov	r24, r24
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	81 70       	andi	r24, 0x01	; 1
    3296:	99 27       	eor	r25, r25
    3298:	89 2b       	or	r24, r25
    329a:	e9 f0       	breq	.+58     	; 0x32d6 <UART0_Read+0x5e>
	{
		while(rx0_counter == 0);
    329c:	00 00       	nop
    329e:	80 91 e2 01 	lds	r24, 0x01E2
    32a2:	88 23       	and	r24, r24
    32a4:	e1 f3       	breq	.-8      	; 0x329e <UART0_Read+0x26>

		data = rx0_buffer[rx0_rd_index];
    32a6:	80 91 e3 01 	lds	r24, 0x01E3
    32aa:	88 2f       	mov	r24, r24
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	8f 55       	subi	r24, 0x5F	; 95
    32b0:	9e 4f       	sbci	r25, 0xFE	; 254
    32b2:	fc 01       	movw	r30, r24
    32b4:	80 81       	ld	r24, Z
    32b6:	89 83       	std	Y+1, r24	; 0x01

		if(++rx0_rd_index == RX0_BUFFER_SIZE)
    32b8:	80 91 e3 01 	lds	r24, 0x01E3
    32bc:	8f 5f       	subi	r24, 0xFF	; 255
    32be:	80 93 e3 01 	sts	0x01E3, r24
    32c2:	80 34       	cpi	r24, 0x40	; 64
    32c4:	11 f4       	brne	.+4      	; 0x32ca <UART0_Read+0x52>
			rx0_rd_index = 0;
    32c6:	10 92 e3 01 	sts	0x01E3, r1

		rx0_counter--;
    32ca:	80 91 e2 01 	lds	r24, 0x01E2
    32ce:	81 50       	subi	r24, 0x01	; 1
    32d0:	80 93 e2 01 	sts	0x01E2, r24
    32d4:	13 c0       	rjmp	.+38     	; 0x32fc <UART0_Read+0x84>
	}
	else
	{
		while( !((UCSR0A >> RXC0) & 0x01));
    32d6:	00 00       	nop
    32d8:	80 ec       	ldi	r24, 0xC0	; 192
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	fc 01       	movw	r30, r24
    32de:	80 81       	ld	r24, Z
    32e0:	88 1f       	adc	r24, r24
    32e2:	88 27       	eor	r24, r24
    32e4:	88 1f       	adc	r24, r24
    32e6:	88 2f       	mov	r24, r24
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	81 70       	andi	r24, 0x01	; 1
    32ec:	99 27       	eor	r25, r25
    32ee:	89 2b       	or	r24, r25
    32f0:	99 f3       	breq	.-26     	; 0x32d8 <UART0_Read+0x60>
		data = UDR0;
    32f2:	86 ec       	ldi	r24, 0xC6	; 198
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	fc 01       	movw	r30, r24
    32f8:	80 81       	ld	r24, Z
    32fa:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    32fe:	0f 90       	pop	r0
    3300:	df 91       	pop	r29
    3302:	cf 91       	pop	r28
    3304:	08 95       	ret

00003306 <UART1_Init>:
-bez paritet
-9600baud
-asynchron
****************************************************************************************************************************************/
void UART1_Init(unsigned long baud, char isrOnOff)
{
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    330e:	27 97       	sbiw	r28, 0x07	; 7
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	cd bf       	out	0x3d, r28	; 61
    331a:	6b 83       	std	Y+3, r22	; 0x03
    331c:	7c 83       	std	Y+4, r23	; 0x04
    331e:	8d 83       	std	Y+5, r24	; 0x05
    3320:	9e 83       	std	Y+6, r25	; 0x06
    3322:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
    3324:	88 ec       	ldi	r24, 0xC8	; 200
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	fc 01       	movw	r30, r24
    332a:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
    332c:	89 ec       	ldi	r24, 0xC9	; 201
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	28 e1       	ldi	r18, 0x18	; 24
    3332:	fc 01       	movw	r30, r24
    3334:	20 83       	st	Z, r18

	// comment or uncomment define in usart.h
	#ifdef ARDUINO_COMMUNICATION
		UCSR1C = (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1); // sa 2 stop bit
    3336:	8a ec       	ldi	r24, 0xCA	; 202
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	2e e0       	ldi	r18, 0x0E	; 14
    333c:	fc 01       	movw	r30, r24
    333e:	20 83       	st	Z, r18
	#else
		//UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); sa 1stop bit
	#endif


	if(isrOnOff == UART_ISR_ON)
    3340:	8f 81       	ldd	r24, Y+7	; 0x07
    3342:	81 30       	cpi	r24, 0x01	; 1
    3344:	91 f4       	brne	.+36     	; 0x336a <UART1_Init+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
    3346:	89 ec       	ldi	r24, 0xC9	; 201
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	29 ec       	ldi	r18, 0xC9	; 201
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	f9 01       	movw	r30, r18
    3350:	20 81       	ld	r18, Z
    3352:	20 6c       	ori	r18, 0xC0	; 192
    3354:	fc 01       	movw	r30, r24
    3356:	20 83       	st	Z, r18
		SREG |= 0x80;
    3358:	8f e5       	ldi	r24, 0x5F	; 95
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	2f e5       	ldi	r18, 0x5F	; 95
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	f9 01       	movw	r30, r18
    3362:	20 81       	ld	r18, Z
    3364:	20 68       	ori	r18, 0x80	; 128
    3366:	fc 01       	movw	r30, r24
    3368:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    336a:	6b 81       	ldd	r22, Y+3	; 0x03
    336c:	7c 81       	ldd	r23, Y+4	; 0x04
    336e:	8d 81       	ldd	r24, Y+5	; 0x05
    3370:	9e 81       	ldd	r25, Y+6	; 0x06
    3372:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <__floatunsisf>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	40 e8       	ldi	r20, 0x80	; 128
    3380:	51 e4       	ldi	r21, 0x41	; 65
    3382:	bc 01       	movw	r22, r24
    3384:	cd 01       	movw	r24, r26
    3386:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	9c 01       	movw	r18, r24
    3390:	ad 01       	movw	r20, r26
    3392:	60 e8       	ldi	r22, 0x80	; 128
    3394:	76 e9       	ldi	r23, 0x96	; 150
    3396:	88 e1       	ldi	r24, 0x18	; 24
    3398:	9b e4       	ldi	r25, 0x4B	; 75
    339a:	0e 94 77 1d 	call	0x3aee	; 0x3aee <__divsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e8       	ldi	r20, 0x80	; 128
    33a8:	5f e3       	ldi	r21, 0x3F	; 63
    33aa:	bc 01       	movw	r22, r24
    33ac:	cd 01       	movw	r24, r26
    33ae:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <__subsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	5f e3       	ldi	r21, 0x3F	; 63
    33be:	bc 01       	movw	r22, r24
    33c0:	cd 01       	movw	r24, r26
    33c2:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__addsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	bc 01       	movw	r22, r24
    33cc:	cd 01       	movw	r24, r26
    33ce:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	9a 83       	std	Y+2, r25	; 0x02
    33d8:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
    33da:	8d ec       	ldi	r24, 0xCD	; 205
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	29 81       	ldd	r18, Y+1	; 0x01
    33e0:	3a 81       	ldd	r19, Y+2	; 0x02
    33e2:	23 2f       	mov	r18, r19
    33e4:	33 27       	eor	r19, r19
    33e6:	fc 01       	movw	r30, r24
    33e8:	20 83       	st	Z, r18
	UBRR1L = temp;
    33ea:	8c ec       	ldi	r24, 0xCC	; 204
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	29 81       	ldd	r18, Y+1	; 0x01
    33f0:	fc 01       	movw	r30, r24
    33f2:	20 83       	st	Z, r18
}
    33f4:	27 96       	adiw	r28, 0x07	; 7
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	de bf       	out	0x3e, r29	; 62
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	cd bf       	out	0x3d, r28	; 61
    3400:	df 91       	pop	r29
    3402:	cf 91       	pop	r28
    3404:	08 95       	ret

00003406 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    3406:	1f 92       	push	r1
    3408:	0f 92       	push	r0
    340a:	00 90 5f 00 	lds	r0, 0x005F
    340e:	0f 92       	push	r0
    3410:	11 24       	eor	r1, r1
    3412:	00 90 5b 00 	lds	r0, 0x005B
    3416:	0f 92       	push	r0
    3418:	2f 93       	push	r18
    341a:	3f 93       	push	r19
    341c:	8f 93       	push	r24
    341e:	9f 93       	push	r25
    3420:	ef 93       	push	r30
    3422:	ff 93       	push	r31
    3424:	cf 93       	push	r28
    3426:	df 93       	push	r29
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    342c:	80 91 25 02 	lds	r24, 0x0225
    3430:	88 23       	and	r24, r24
    3432:	d1 f0       	breq	.+52     	; 0x3468 <__vector_34+0x62>
	{
		tx1_counter--;
    3434:	80 91 25 02 	lds	r24, 0x0225
    3438:	81 50       	subi	r24, 0x01	; 1
    343a:	80 93 25 02 	sts	0x0225, r24
		UDR1=tx1_buffer[tx1_rd_index];
    343e:	8e ec       	ldi	r24, 0xCE	; 206
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	20 91 26 02 	lds	r18, 0x0226
    3446:	22 2f       	mov	r18, r18
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	2c 51       	subi	r18, 0x1C	; 28
    344c:	3e 4f       	sbci	r19, 0xFE	; 254
    344e:	f9 01       	movw	r30, r18
    3450:	20 81       	ld	r18, Z
    3452:	fc 01       	movw	r30, r24
    3454:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    3456:	80 91 26 02 	lds	r24, 0x0226
    345a:	8f 5f       	subi	r24, 0xFF	; 255
    345c:	80 93 26 02 	sts	0x0226, r24
    3460:	80 34       	cpi	r24, 0x40	; 64
    3462:	11 f4       	brne	.+4      	; 0x3468 <__vector_34+0x62>
			tx1_rd_index = 0;
    3464:	10 92 26 02 	sts	0x0226, r1
	}
}
    3468:	df 91       	pop	r29
    346a:	cf 91       	pop	r28
    346c:	ff 91       	pop	r31
    346e:	ef 91       	pop	r30
    3470:	9f 91       	pop	r25
    3472:	8f 91       	pop	r24
    3474:	3f 91       	pop	r19
    3476:	2f 91       	pop	r18
    3478:	0f 90       	pop	r0
    347a:	00 92 5b 00 	sts	0x005B, r0
    347e:	0f 90       	pop	r0
    3480:	00 92 5f 00 	sts	0x005F, r0
    3484:	0f 90       	pop	r0
    3486:	1f 90       	pop	r1
    3488:	18 95       	reti

0000348a <__vector_32>:

ISR(USART1_RX_vect)
{
    348a:	1f 92       	push	r1
    348c:	0f 92       	push	r0
    348e:	00 90 5f 00 	lds	r0, 0x005F
    3492:	0f 92       	push	r0
    3494:	11 24       	eor	r1, r1
    3496:	00 90 5b 00 	lds	r0, 0x005B
    349a:	0f 92       	push	r0
    349c:	2f 93       	push	r18
    349e:	3f 93       	push	r19
    34a0:	8f 93       	push	r24
    34a2:	9f 93       	push	r25
    34a4:	ef 93       	push	r30
    34a6:	ff 93       	push	r31
    34a8:	cf 93       	push	r28
    34aa:	df 93       	push	r29
    34ac:	1f 92       	push	r1
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    34b2:	88 ec       	ldi	r24, 0xC8	; 200
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	fc 01       	movw	r30, r24
    34b8:	80 81       	ld	r24, Z
    34ba:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	88 2f       	mov	r24, r24
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	8c 71       	andi	r24, 0x1C	; 28
    34c4:	99 27       	eor	r25, r25
    34c6:	89 2b       	or	r24, r25
    34c8:	d1 f4       	brne	.+52     	; 0x34fe <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    34ca:	80 91 67 02 	lds	r24, 0x0267
    34ce:	88 2f       	mov	r24, r24
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	2e ec       	ldi	r18, 0xCE	; 206
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	f9 01       	movw	r30, r18
    34d8:	20 81       	ld	r18, Z
    34da:	89 5d       	subi	r24, 0xD9	; 217
    34dc:	9d 4f       	sbci	r25, 0xFD	; 253
    34de:	fc 01       	movw	r30, r24
    34e0:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    34e2:	80 91 67 02 	lds	r24, 0x0267
    34e6:	8f 5f       	subi	r24, 0xFF	; 255
    34e8:	80 93 67 02 	sts	0x0267, r24
    34ec:	80 34       	cpi	r24, 0x40	; 64
    34ee:	11 f4       	brne	.+4      	; 0x34f4 <__vector_32+0x6a>
		rx1_wr_index = 0;
    34f0:	10 92 67 02 	sts	0x0267, r1

		rx1_counter++;
    34f4:	80 91 68 02 	lds	r24, 0x0268
    34f8:	8f 5f       	subi	r24, 0xFF	; 255
    34fa:	80 93 68 02 	sts	0x0268, r24
	}
}
    34fe:	0f 90       	pop	r0
    3500:	df 91       	pop	r29
    3502:	cf 91       	pop	r28
    3504:	ff 91       	pop	r31
    3506:	ef 91       	pop	r30
    3508:	9f 91       	pop	r25
    350a:	8f 91       	pop	r24
    350c:	3f 91       	pop	r19
    350e:	2f 91       	pop	r18
    3510:	0f 90       	pop	r0
    3512:	00 92 5b 00 	sts	0x005B, r0
    3516:	0f 90       	pop	r0
    3518:	00 92 5f 00 	sts	0x005F, r0
    351c:	0f 90       	pop	r0
    351e:	1f 90       	pop	r1
    3520:	18 95       	reti

00003522 <altUart0Write>:

void altUart0Write(unsigned char data)
{
    3522:	cf 93       	push	r28
    3524:	df 93       	push	r29
    3526:	1f 92       	push	r1
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
    352e:	00 00       	nop
    3530:	80 ec       	ldi	r24, 0xC0	; 192
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	fc 01       	movw	r30, r24
    3536:	80 81       	ld	r24, Z
    3538:	88 2f       	mov	r24, r24
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	80 72       	andi	r24, 0x20	; 32
    353e:	99 27       	eor	r25, r25
    3540:	89 2b       	or	r24, r25
    3542:	b1 f3       	breq	.-20     	; 0x3530 <altUart0Write+0xe>

	UDR0 = data;
    3544:	86 ec       	ldi	r24, 0xC6	; 198
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	29 81       	ldd	r18, Y+1	; 0x01
    354a:	fc 01       	movw	r30, r24
    354c:	20 83       	st	Z, r18
}
    354e:	0f 90       	pop	r0
    3550:	df 91       	pop	r29
    3552:	cf 91       	pop	r28
    3554:	08 95       	ret

00003556 <altUart1Write>:

void altUart1Write(unsigned char data)
{
    3556:	cf 93       	push	r28
    3558:	df 93       	push	r29
    355a:	1f 92       	push	r1
    355c:	cd b7       	in	r28, 0x3d	; 61
    355e:	de b7       	in	r29, 0x3e	; 62
    3560:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
    3562:	00 00       	nop
    3564:	88 ec       	ldi	r24, 0xC8	; 200
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	fc 01       	movw	r30, r24
    356a:	80 81       	ld	r24, Z
    356c:	88 2f       	mov	r24, r24
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	80 72       	andi	r24, 0x20	; 32
    3572:	99 27       	eor	r25, r25
    3574:	89 2b       	or	r24, r25
    3576:	b1 f3       	breq	.-20     	; 0x3564 <altUart1Write+0xe>
	UDR1 = data;
    3578:	8e ec       	ldi	r24, 0xCE	; 206
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	29 81       	ldd	r18, Y+1	; 0x01
    357e:	fc 01       	movw	r30, r24
    3580:	20 83       	st	Z, r18
}
    3582:	0f 90       	pop	r0
    3584:	df 91       	pop	r29
    3586:	cf 91       	pop	r28
    3588:	08 95       	ret

0000358a <UART1_Write>:
Slanje podataka USART1 modulom
**
**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
    358a:	cf 93       	push	r28
    358c:	df 93       	push	r29
    358e:	1f 92       	push	r1
    3590:	cd b7       	in	r28, 0x3d	; 61
    3592:	de b7       	in	r29, 0x3e	; 62
    3594:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
    3596:	89 ec       	ldi	r24, 0xC9	; 201
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	fc 01       	movw	r30, r24
    359c:	80 81       	ld	r24, Z
    359e:	82 95       	swap	r24
    35a0:	86 95       	lsr	r24
    35a2:	86 95       	lsr	r24
    35a4:	83 70       	andi	r24, 0x03	; 3
    35a6:	88 2f       	mov	r24, r24
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	81 70       	andi	r24, 0x01	; 1
    35ac:	99 27       	eor	r25, r25
    35ae:	89 2b       	or	r24, r25
    35b0:	99 f1       	breq	.+102    	; 0x3618 <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
    35b2:	00 00       	nop
    35b4:	80 91 25 02 	lds	r24, 0x0225
    35b8:	80 34       	cpi	r24, 0x40	; 64
    35ba:	e1 f3       	breq	.-8      	; 0x35b4 <UART1_Write+0x2a>

		cli();
    35bc:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
    35be:	80 91 25 02 	lds	r24, 0x0225
    35c2:	88 23       	and	r24, r24
    35c4:	51 f4       	brne	.+20     	; 0x35da <UART1_Write+0x50>
    35c6:	88 ec       	ldi	r24, 0xC8	; 200
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	fc 01       	movw	r30, r24
    35cc:	80 81       	ld	r24, Z
    35ce:	88 2f       	mov	r24, r24
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	80 72       	andi	r24, 0x20	; 32
    35d4:	99 27       	eor	r25, r25
    35d6:	89 2b       	or	r24, r25
    35d8:	c1 f4       	brne	.+48     	; 0x360a <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
    35da:	80 91 24 02 	lds	r24, 0x0224
    35de:	88 2f       	mov	r24, r24
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	8c 51       	subi	r24, 0x1C	; 28
    35e4:	9e 4f       	sbci	r25, 0xFE	; 254
    35e6:	29 81       	ldd	r18, Y+1	; 0x01
    35e8:	fc 01       	movw	r30, r24
    35ea:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
    35ec:	80 91 24 02 	lds	r24, 0x0224
    35f0:	8f 5f       	subi	r24, 0xFF	; 255
    35f2:	80 93 24 02 	sts	0x0224, r24
    35f6:	80 34       	cpi	r24, 0x40	; 64
    35f8:	11 f4       	brne	.+4      	; 0x35fe <UART1_Write+0x74>
				tx1_wr_index = 0;
    35fa:	10 92 24 02 	sts	0x0224, r1

			tx1_counter++;
    35fe:	80 91 25 02 	lds	r24, 0x0225
    3602:	8f 5f       	subi	r24, 0xFF	; 255
    3604:	80 93 25 02 	sts	0x0225, r24
    3608:	05 c0       	rjmp	.+10     	; 0x3614 <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
    360a:	8e ec       	ldi	r24, 0xCE	; 206
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	29 81       	ldd	r18, Y+1	; 0x01
    3610:	fc 01       	movw	r30, r24
    3612:	20 83       	st	Z, r18

		sei();
    3614:	78 94       	sei
    3616:	03 c0       	rjmp	.+6      	; 0x361e <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	0e 94 ab 1a 	call	0x3556	; 0x3556 <altUart1Write>
}
    361e:	0f 90       	pop	r0
    3620:	df 91       	pop	r29
    3622:	cf 91       	pop	r28
    3624:	08 95       	ret

00003626 <UART1_Read>:

unsigned char UART1_Read(void)
{
    3626:	cf 93       	push	r28
    3628:	df 93       	push	r29
    362a:	1f 92       	push	r1
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
    3630:	89 ec       	ldi	r24, 0xC9	; 201
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	fc 01       	movw	r30, r24
    3636:	80 81       	ld	r24, Z
    3638:	88 1f       	adc	r24, r24
    363a:	88 27       	eor	r24, r24
    363c:	88 1f       	adc	r24, r24
    363e:	88 2f       	mov	r24, r24
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	81 70       	andi	r24, 0x01	; 1
    3644:	99 27       	eor	r25, r25
    3646:	89 2b       	or	r24, r25
    3648:	e9 f0       	breq	.+58     	; 0x3684 <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
    364a:	00 00       	nop
    364c:	80 91 68 02 	lds	r24, 0x0268
    3650:	88 23       	and	r24, r24
    3652:	e1 f3       	breq	.-8      	; 0x364c <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
    3654:	80 91 69 02 	lds	r24, 0x0269
    3658:	88 2f       	mov	r24, r24
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	89 5d       	subi	r24, 0xD9	; 217
    365e:	9d 4f       	sbci	r25, 0xFD	; 253
    3660:	fc 01       	movw	r30, r24
    3662:	80 81       	ld	r24, Z
    3664:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
    3666:	80 91 69 02 	lds	r24, 0x0269
    366a:	8f 5f       	subi	r24, 0xFF	; 255
    366c:	80 93 69 02 	sts	0x0269, r24
    3670:	80 34       	cpi	r24, 0x40	; 64
    3672:	11 f4       	brne	.+4      	; 0x3678 <UART1_Read+0x52>
			rx1_rd_index = 0;
    3674:	10 92 69 02 	sts	0x0269, r1

		rx1_counter--;
    3678:	80 91 68 02 	lds	r24, 0x0268
    367c:	81 50       	subi	r24, 0x01	; 1
    367e:	80 93 68 02 	sts	0x0268, r24
    3682:	13 c0       	rjmp	.+38     	; 0x36aa <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
    3684:	00 00       	nop
    3686:	88 ec       	ldi	r24, 0xC8	; 200
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	fc 01       	movw	r30, r24
    368c:	80 81       	ld	r24, Z
    368e:	88 1f       	adc	r24, r24
    3690:	88 27       	eor	r24, r24
    3692:	88 1f       	adc	r24, r24
    3694:	88 2f       	mov	r24, r24
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	81 70       	andi	r24, 0x01	; 1
    369a:	99 27       	eor	r25, r25
    369c:	89 2b       	or	r24, r25
    369e:	99 f3       	breq	.-26     	; 0x3686 <UART1_Read+0x60>
		data = UDR1;
    36a0:	8e ec       	ldi	r24, 0xCE	; 206
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	fc 01       	movw	r30, r24
    36a6:	80 81       	ld	r24, Z
    36a8:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    36ac:	0f 90       	pop	r0
    36ae:	df 91       	pop	r29
    36b0:	cf 91       	pop	r28
    36b2:	08 95       	ret

000036b4 <UART1_Buffer>:

void UART1_Buffer(uint8_t* str) {
    36b4:	cf 93       	push	r28
    36b6:	df 93       	push	r29
    36b8:	00 d0       	rcall	.+0      	; 0x36ba <UART1_Buffer+0x6>
    36ba:	cd b7       	in	r28, 0x3d	; 61
    36bc:	de b7       	in	r29, 0x3e	; 62
    36be:	9a 83       	std	Y+2, r25	; 0x02
    36c0:	89 83       	std	Y+1, r24	; 0x01
	while(*str) {
    36c2:	0b c0       	rjmp	.+22     	; 0x36da <UART1_Buffer+0x26>
		altUart1Write(*str++);
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	9a 81       	ldd	r25, Y+2	; 0x02
    36c8:	9c 01       	movw	r18, r24
    36ca:	2f 5f       	subi	r18, 0xFF	; 255
    36cc:	3f 4f       	sbci	r19, 0xFF	; 255
    36ce:	3a 83       	std	Y+2, r19	; 0x02
    36d0:	29 83       	std	Y+1, r18	; 0x01
    36d2:	fc 01       	movw	r30, r24
    36d4:	80 81       	ld	r24, Z
    36d6:	0e 94 ab 1a 	call	0x3556	; 0x3556 <altUart1Write>

	return data;
}

void UART1_Buffer(uint8_t* str) {
	while(*str) {
    36da:	89 81       	ldd	r24, Y+1	; 0x01
    36dc:	9a 81       	ldd	r25, Y+2	; 0x02
    36de:	fc 01       	movw	r30, r24
    36e0:	80 81       	ld	r24, Z
    36e2:	88 23       	and	r24, r24
    36e4:	79 f7       	brne	.-34     	; 0x36c4 <UART1_Buffer+0x10>
		altUart1Write(*str++);
	}
}
    36e6:	0f 90       	pop	r0
    36e8:	0f 90       	pop	r0
    36ea:	df 91       	pop	r29
    36ec:	cf 91       	pop	r28
    36ee:	08 95       	ret

000036f0 <wait_on_detection_tactic_one>:

const gotoFields TACTIC_ONE_POSITION[TACTIC_ONE_POSITION_COUNT] = {
		{{100,0,0}, 50, FORWARD, NULL}
};

void wait_on_detection_tactic_one(void) {
    36f0:	cf 93       	push	r28
    36f2:	df 93       	push	r29
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62
    36f8:	2e 97       	sbiw	r28, 0x0e	; 14
    36fa:	0f b6       	in	r0, 0x3f	; 63
    36fc:	f8 94       	cli
    36fe:	de bf       	out	0x3e, r29	; 62
    3700:	0f be       	out	0x3f, r0	; 63
    3702:	cd bf       	out	0x3d, r28	; 61

	while(TACTIC_ONE_POSITION[current_position].callback(0) == 1)
    3704:	72 c0       	rjmp	.+228    	; 0x37ea <wait_on_detection_tactic_one+0xfa>
    3706:	80 e0       	ldi	r24, 0x00	; 0
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	a8 ec       	ldi	r26, 0xC8	; 200
    370c:	b2 e4       	ldi	r27, 0x42	; 66
    370e:	89 83       	std	Y+1, r24	; 0x01
    3710:	9a 83       	std	Y+2, r25	; 0x02
    3712:	ab 83       	std	Y+3, r26	; 0x03
    3714:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e4       	ldi	r19, 0x40	; 64
    371a:	4c e1       	ldi	r20, 0x1C	; 28
    371c:	55 e4       	ldi	r21, 0x45	; 69
    371e:	69 81       	ldd	r22, Y+1	; 0x01
    3720:	7a 81       	ldd	r23, Y+2	; 0x02
    3722:	8b 81       	ldd	r24, Y+3	; 0x03
    3724:	9c 81       	ldd	r25, Y+4	; 0x04
    3726:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	8d 83       	std	Y+5, r24	; 0x05
    3730:	9e 83       	std	Y+6, r25	; 0x06
    3732:	af 83       	std	Y+7, r26	; 0x07
    3734:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	40 e8       	ldi	r20, 0x80	; 128
    373c:	5f e3       	ldi	r21, 0x3F	; 63
    373e:	6d 81       	ldd	r22, Y+5	; 0x05
    3740:	7e 81       	ldd	r23, Y+6	; 0x06
    3742:	8f 81       	ldd	r24, Y+7	; 0x07
    3744:	98 85       	ldd	r25, Y+8	; 0x08
    3746:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
    374a:	88 23       	and	r24, r24
    374c:	2c f4       	brge	.+10     	; 0x3758 <wait_on_detection_tactic_one+0x68>
		__ticks = 1;
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	9a 87       	std	Y+10, r25	; 0x0a
    3754:	89 87       	std	Y+9, r24	; 0x09
    3756:	3f c0       	rjmp	.+126    	; 0x37d6 <wait_on_detection_tactic_one+0xe6>
	else if (__tmp > 65535)
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	3f ef       	ldi	r19, 0xFF	; 255
    375c:	4f e7       	ldi	r20, 0x7F	; 127
    375e:	57 e4       	ldi	r21, 0x47	; 71
    3760:	6d 81       	ldd	r22, Y+5	; 0x05
    3762:	7e 81       	ldd	r23, Y+6	; 0x06
    3764:	8f 81       	ldd	r24, Y+7	; 0x07
    3766:	98 85       	ldd	r25, Y+8	; 0x08
    3768:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
    376c:	18 16       	cp	r1, r24
    376e:	4c f5       	brge	.+82     	; 0x37c2 <wait_on_detection_tactic_one+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	40 e2       	ldi	r20, 0x20	; 32
    3776:	51 e4       	ldi	r21, 0x41	; 65
    3778:	69 81       	ldd	r22, Y+1	; 0x01
    377a:	7a 81       	ldd	r23, Y+2	; 0x02
    377c:	8b 81       	ldd	r24, Y+3	; 0x03
    377e:	9c 81       	ldd	r25, Y+4	; 0x04
    3780:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	bc 01       	movw	r22, r24
    378a:	cd 01       	movw	r24, r26
    378c:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	9a 87       	std	Y+10, r25	; 0x0a
    3796:	89 87       	std	Y+9, r24	; 0x09
    3798:	0f c0       	rjmp	.+30     	; 0x37b8 <wait_on_detection_tactic_one+0xc8>
    379a:	8a ef       	ldi	r24, 0xFA	; 250
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	9c 87       	std	Y+12, r25	; 0x0c
    37a0:	8b 87       	std	Y+11, r24	; 0x0b
    37a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    37a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <wait_on_detection_tactic_one+0xb6>
    37aa:	9c 87       	std	Y+12, r25	; 0x0c
    37ac:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ae:	89 85       	ldd	r24, Y+9	; 0x09
    37b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	9a 87       	std	Y+10, r25	; 0x0a
    37b6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b8:	89 85       	ldd	r24, Y+9	; 0x09
    37ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    37bc:	89 2b       	or	r24, r25
    37be:	69 f7       	brne	.-38     	; 0x379a <wait_on_detection_tactic_one+0xaa>
    37c0:	14 c0       	rjmp	.+40     	; 0x37ea <wait_on_detection_tactic_one+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c2:	6d 81       	ldd	r22, Y+5	; 0x05
    37c4:	7e 81       	ldd	r23, Y+6	; 0x06
    37c6:	8f 81       	ldd	r24, Y+7	; 0x07
    37c8:	98 85       	ldd	r25, Y+8	; 0x08
    37ca:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	9a 87       	std	Y+10, r25	; 0x0a
    37d4:	89 87       	std	Y+9, r24	; 0x09
    37d6:	89 85       	ldd	r24, Y+9	; 0x09
    37d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37da:	9e 87       	std	Y+14, r25	; 0x0e
    37dc:	8d 87       	std	Y+13, r24	; 0x0d
    37de:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	f1 f7       	brne	.-4      	; 0x37e2 <wait_on_detection_tactic_one+0xf2>
    37e6:	9e 87       	std	Y+14, r25	; 0x0e
    37e8:	8d 87       	std	Y+13, r24	; 0x0d
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	60 e0       	ldi	r22, 0x00	; 0
    37f0:	70 e0       	ldi	r23, 0x00	; 0
    37f2:	cb 01       	movw	r24, r22
    37f4:	f9 01       	movw	r30, r18
    37f6:	09 95       	icall
    37f8:	81 30       	cpi	r24, 0x01	; 1
    37fa:	09 f4       	brne	.+2      	; 0x37fe <wait_on_detection_tactic_one+0x10e>
    37fc:	84 cf       	rjmp	.-248    	; 0x3706 <wait_on_detection_tactic_one+0x16>
		_delay_ms(100);
	next_position = current_position;
    37fe:	80 91 6a 02 	lds	r24, 0x026A
    3802:	80 93 6b 02 	sts	0x026B, r24
	active_state = TACTIC_ONE;
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	80 93 11 01 	sts	0x0111, r24
}
    380c:	2e 96       	adiw	r28, 0x0e	; 14
    380e:	0f b6       	in	r0, 0x3f	; 63
    3810:	f8 94       	cli
    3812:	de bf       	out	0x3e, r29	; 62
    3814:	0f be       	out	0x3f, r0	; 63
    3816:	cd bf       	out	0x3d, r28	; 61
    3818:	df 91       	pop	r29
    381a:	cf 91       	pop	r28
    381c:	08 95       	ret

0000381e <darkside>:

void darkside(void) {
    381e:	cf 93       	push	r28
    3820:	df 93       	push	r29
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    3826:	65 97       	sbiw	r28, 0x15	; 21
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	f8 94       	cli
    382c:	de bf       	out	0x3e, r29	; 62
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	cd bf       	out	0x3d, r28	; 61
	struct odometry_position startingPosition; startingPosition.x = 0; startingPosition.y = 0; startingPosition.angle = 0;
    3832:	18 8a       	std	Y+16, r1	; 0x10
    3834:	1f 86       	std	Y+15, r1	; 0x0f
    3836:	1a 8a       	std	Y+18, r1	; 0x12
    3838:	19 8a       	std	Y+17, r1	; 0x11
    383a:	1c 8a       	std	Y+20, r1	; 0x14
    383c:	1b 8a       	std	Y+19, r1	; 0x13

	odometry_set_position(&startingPosition);
    383e:	ce 01       	movw	r24, r28
    3840:	0f 96       	adiw	r24, 0x0f	; 15
    3842:	0e 94 bb 12 	call	0x2576	; 0x2576 <odometry_set_position>

	while(1) {
		switch(active_state) {
    3846:	80 91 11 01 	lds	r24, 0x0111
    384a:	88 2f       	mov	r24, r24
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	81 30       	cpi	r24, 0x01	; 1
    3850:	91 05       	cpc	r25, r1
    3852:	09 f4       	brne	.+2      	; 0x3856 <darkside+0x38>
    3854:	7e c0       	rjmp	.+252    	; 0x3952 <darkside+0x134>
    3856:	83 35       	cpi	r24, 0x53	; 83
    3858:	91 05       	cpc	r25, r1
    385a:	09 f0       	breq	.+2      	; 0x385e <darkside+0x40>
    385c:	c7 c0       	rjmp	.+398    	; 0x39ec <darkside+0x1ce>
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	aa e7       	ldi	r26, 0x7A	; 122
    3864:	b4 e4       	ldi	r27, 0x44	; 68
    3866:	89 83       	std	Y+1, r24	; 0x01
    3868:	9a 83       	std	Y+2, r25	; 0x02
    386a:	ab 83       	std	Y+3, r26	; 0x03
    386c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e4       	ldi	r19, 0x40	; 64
    3872:	4c e1       	ldi	r20, 0x1C	; 28
    3874:	55 e4       	ldi	r21, 0x45	; 69
    3876:	69 81       	ldd	r22, Y+1	; 0x01
    3878:	7a 81       	ldd	r23, Y+2	; 0x02
    387a:	8b 81       	ldd	r24, Y+3	; 0x03
    387c:	9c 81       	ldd	r25, Y+4	; 0x04
    387e:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	8d 83       	std	Y+5, r24	; 0x05
    3888:	9e 83       	std	Y+6, r25	; 0x06
    388a:	af 83       	std	Y+7, r26	; 0x07
    388c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	40 e8       	ldi	r20, 0x80	; 128
    3894:	5f e3       	ldi	r21, 0x3F	; 63
    3896:	6d 81       	ldd	r22, Y+5	; 0x05
    3898:	7e 81       	ldd	r23, Y+6	; 0x06
    389a:	8f 81       	ldd	r24, Y+7	; 0x07
    389c:	98 85       	ldd	r25, Y+8	; 0x08
    389e:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__cmpsf2>
    38a2:	88 23       	and	r24, r24
    38a4:	2c f4       	brge	.+10     	; 0x38b0 <darkside+0x92>
		__ticks = 1;
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	9a 87       	std	Y+10, r25	; 0x0a
    38ac:	89 87       	std	Y+9, r24	; 0x09
    38ae:	3f c0       	rjmp	.+126    	; 0x392e <darkside+0x110>
	else if (__tmp > 65535)
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	3f ef       	ldi	r19, 0xFF	; 255
    38b4:	4f e7       	ldi	r20, 0x7F	; 127
    38b6:	57 e4       	ldi	r21, 0x47	; 71
    38b8:	6d 81       	ldd	r22, Y+5	; 0x05
    38ba:	7e 81       	ldd	r23, Y+6	; 0x06
    38bc:	8f 81       	ldd	r24, Y+7	; 0x07
    38be:	98 85       	ldd	r25, Y+8	; 0x08
    38c0:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__gesf2>
    38c4:	18 16       	cp	r1, r24
    38c6:	4c f5       	brge	.+82     	; 0x391a <darkside+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c8:	20 e0       	ldi	r18, 0x00	; 0
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	40 e2       	ldi	r20, 0x20	; 32
    38ce:	51 e4       	ldi	r21, 0x41	; 65
    38d0:	69 81       	ldd	r22, Y+1	; 0x01
    38d2:	7a 81       	ldd	r23, Y+2	; 0x02
    38d4:	8b 81       	ldd	r24, Y+3	; 0x03
    38d6:	9c 81       	ldd	r25, Y+4	; 0x04
    38d8:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__mulsf3>
    38dc:	dc 01       	movw	r26, r24
    38de:	cb 01       	movw	r24, r22
    38e0:	bc 01       	movw	r22, r24
    38e2:	cd 01       	movw	r24, r26
    38e4:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	9a 87       	std	Y+10, r25	; 0x0a
    38ee:	89 87       	std	Y+9, r24	; 0x09
    38f0:	0f c0       	rjmp	.+30     	; 0x3910 <darkside+0xf2>
    38f2:	8a ef       	ldi	r24, 0xFA	; 250
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	9c 87       	std	Y+12, r25	; 0x0c
    38f8:	8b 87       	std	Y+11, r24	; 0x0b
    38fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    38fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    38fe:	01 97       	sbiw	r24, 0x01	; 1
    3900:	f1 f7       	brne	.-4      	; 0x38fe <darkside+0xe0>
    3902:	9c 87       	std	Y+12, r25	; 0x0c
    3904:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3906:	89 85       	ldd	r24, Y+9	; 0x09
    3908:	9a 85       	ldd	r25, Y+10	; 0x0a
    390a:	01 97       	sbiw	r24, 0x01	; 1
    390c:	9a 87       	std	Y+10, r25	; 0x0a
    390e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3910:	89 85       	ldd	r24, Y+9	; 0x09
    3912:	9a 85       	ldd	r25, Y+10	; 0x0a
    3914:	89 2b       	or	r24, r25
    3916:	69 f7       	brne	.-38     	; 0x38f2 <darkside+0xd4>
    3918:	14 c0       	rjmp	.+40     	; 0x3942 <darkside+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    391a:	6d 81       	ldd	r22, Y+5	; 0x05
    391c:	7e 81       	ldd	r23, Y+6	; 0x06
    391e:	8f 81       	ldd	r24, Y+7	; 0x07
    3920:	98 85       	ldd	r25, Y+8	; 0x08
    3922:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <__fixunssfsi>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	9a 87       	std	Y+10, r25	; 0x0a
    392c:	89 87       	std	Y+9, r24	; 0x09
    392e:	89 85       	ldd	r24, Y+9	; 0x09
    3930:	9a 85       	ldd	r25, Y+10	; 0x0a
    3932:	9e 87       	std	Y+14, r25	; 0x0e
    3934:	8d 87       	std	Y+13, r24	; 0x0d
    3936:	8d 85       	ldd	r24, Y+13	; 0x0d
    3938:	9e 85       	ldd	r25, Y+14	; 0x0e
    393a:	01 97       	sbiw	r24, 0x01	; 1
    393c:	f1 f7       	brne	.-4      	; 0x393a <darkside+0x11c>
    393e:	9e 87       	std	Y+14, r25	; 0x0e
    3940:	8d 87       	std	Y+13, r24	; 0x0d
		case COLLISION:
			break;
		case STUCK:
			_delay_ms(1000);
			active_state = TACTIC_ONE;
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	80 93 11 01 	sts	0x0111, r24
			next_position = current_position;
    3948:	80 91 6a 02 	lds	r24, 0x026A
    394c:	80 93 6b 02 	sts	0x026B, r24

			break;
    3950:	4e c0       	rjmp	.+156    	; 0x39ee <darkside+0x1d0>
		case TACTIC_ONE:
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {
    3952:	80 91 6b 02 	lds	r24, 0x026B
    3956:	80 93 6a 02 	sts	0x026A, r24
    395a:	42 c0       	rjmp	.+132    	; 0x39e0 <darkside+0x1c2>
				odometry_status = odometry_move_to_position(&TACTIC_ONE_POSITION[current_position].point, TACTIC_ONE_POSITION[current_position].speed, TACTIC_ONE_POSITION[current_position].direction, TACTIC_ONE_POSITION[current_position].callback);
    395c:	40 e0       	ldi	r20, 0x00	; 0
    395e:	50 e0       	ldi	r21, 0x00	; 0
    3960:	80 91 6a 02 	lds	r24, 0x026A
    3964:	28 2f       	mov	r18, r24
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	6b e0       	ldi	r22, 0x0B	; 11
    396a:	62 9f       	mul	r22, r18
    396c:	c0 01       	movw	r24, r0
    396e:	63 9f       	mul	r22, r19
    3970:	90 0d       	add	r25, r0
    3972:	11 24       	eor	r1, r1
    3974:	86 5e       	subi	r24, 0xE6	; 230
    3976:	9e 4f       	sbci	r25, 0xFE	; 254
    3978:	dc 01       	movw	r26, r24
    397a:	ec 91       	ld	r30, X
    397c:	80 91 6a 02 	lds	r24, 0x026A
    3980:	28 2f       	mov	r18, r24
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	6b e0       	ldi	r22, 0x0B	; 11
    3986:	62 9f       	mul	r22, r18
    3988:	c0 01       	movw	r24, r0
    398a:	63 9f       	mul	r22, r19
    398c:	90 0d       	add	r25, r0
    398e:	11 24       	eor	r1, r1
    3990:	87 5e       	subi	r24, 0xE7	; 231
    3992:	9e 4f       	sbci	r25, 0xFE	; 254
    3994:	dc 01       	movw	r26, r24
    3996:	7c 91       	ld	r23, X
    3998:	80 91 6a 02 	lds	r24, 0x026A
    399c:	28 2f       	mov	r18, r24
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	6b e0       	ldi	r22, 0x0B	; 11
    39a2:	62 9f       	mul	r22, r18
    39a4:	c0 01       	movw	r24, r0
    39a6:	63 9f       	mul	r22, r19
    39a8:	90 0d       	add	r25, r0
    39aa:	11 24       	eor	r1, r1
    39ac:	8e 5e       	subi	r24, 0xEE	; 238
    39ae:	9e 4f       	sbci	r25, 0xFE	; 254
    39b0:	9a 01       	movw	r18, r20
    39b2:	4e 2f       	mov	r20, r30
    39b4:	67 2f       	mov	r22, r23
    39b6:	0e 94 fd 11 	call	0x23fa	; 0x23fa <odometry_move_to_position>
    39ba:	80 93 6f 02 	sts	0x026F, r24

				if(odometry_status == ODOMETRY_FAIL)
    39be:	80 91 6f 02 	lds	r24, 0x026F
    39c2:	81 30       	cpi	r24, 0x01	; 1
    39c4:	19 f4       	brne	.+6      	; 0x39cc <darkside+0x1ae>
				{
					active_state = COLLISION;
    39c6:	10 92 11 01 	sts	0x0111, r1
					break;
    39ca:	11 c0       	rjmp	.+34     	; 0x39ee <darkside+0x1d0>
				{

				}

				// last position
				if(current_position == (TACTIC_ONE_POSITION_COUNT - 1))
    39cc:	80 91 6a 02 	lds	r24, 0x026A
    39d0:	88 23       	and	r24, r24
    39d2:	09 f4       	brne	.+2      	; 0x39d6 <darkside+0x1b8>
				{
					while(1);
    39d4:	ff cf       	rjmp	.-2      	; 0x39d4 <darkside+0x1b6>
			active_state = TACTIC_ONE;
			next_position = current_position;

			break;
		case TACTIC_ONE:
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {
    39d6:	80 91 6a 02 	lds	r24, 0x026A
    39da:	8f 5f       	subi	r24, 0xFF	; 255
    39dc:	80 93 6a 02 	sts	0x026A, r24
    39e0:	80 91 6a 02 	lds	r24, 0x026A
    39e4:	88 23       	and	r24, r24
    39e6:	09 f4       	brne	.+2      	; 0x39ea <darkside+0x1cc>
    39e8:	b9 cf       	rjmp	.-142    	; 0x395c <darkside+0x13e>
    39ea:	01 c0       	rjmp	.+2      	; 0x39ee <darkside+0x1d0>
	odometry_set_position(&startingPosition);

	while(1) {
		switch(active_state) {
		case COLLISION:
			break;
    39ec:	00 00       	nop
				{
					while(1);
				}
			}//end of for
		}//end of switch
	}//end of while
    39ee:	2b cf       	rjmp	.-426    	; 0x3846 <darkside+0x28>

000039f0 <main>:
#include "ax.h"
#include "system.h"
#include "sides.h"

int main()
{
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62

	system_init();
    39f8:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <system_init>

	darkside();
    39fc:	0e 94 0f 1c 	call	0x381e	; 0x381e <darkside>

	return 0;
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	90 e0       	ldi	r25, 0x00	; 0

}//end of main()
    3a04:	df 91       	pop	r29
    3a06:	cf 91       	pop	r28
    3a08:	08 95       	ret

00003a0a <__subsf3>:
    3a0a:	50 58       	subi	r21, 0x80	; 128

00003a0c <__addsf3>:
    3a0c:	bb 27       	eor	r27, r27
    3a0e:	aa 27       	eor	r26, r26
    3a10:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <__addsf3x>
    3a14:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__fp_round>
    3a18:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__fp_pscA>
    3a1c:	38 f0       	brcs	.+14     	; 0x3a2c <__addsf3+0x20>
    3a1e:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <__fp_pscB>
    3a22:	20 f0       	brcs	.+8      	; 0x3a2c <__addsf3+0x20>
    3a24:	39 f4       	brne	.+14     	; 0x3a34 <__addsf3+0x28>
    3a26:	9f 3f       	cpi	r25, 0xFF	; 255
    3a28:	19 f4       	brne	.+6      	; 0x3a30 <__addsf3+0x24>
    3a2a:	26 f4       	brtc	.+8      	; 0x3a34 <__addsf3+0x28>
    3a2c:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_nan>
    3a30:	0e f4       	brtc	.+2      	; 0x3a34 <__addsf3+0x28>
    3a32:	e0 95       	com	r30
    3a34:	e7 fb       	bst	r30, 7
    3a36:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__fp_inf>

00003a3a <__addsf3x>:
    3a3a:	e9 2f       	mov	r30, r25
    3a3c:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__fp_split3>
    3a40:	58 f3       	brcs	.-42     	; 0x3a18 <__addsf3+0xc>
    3a42:	ba 17       	cp	r27, r26
    3a44:	62 07       	cpc	r22, r18
    3a46:	73 07       	cpc	r23, r19
    3a48:	84 07       	cpc	r24, r20
    3a4a:	95 07       	cpc	r25, r21
    3a4c:	20 f0       	brcs	.+8      	; 0x3a56 <__addsf3x+0x1c>
    3a4e:	79 f4       	brne	.+30     	; 0x3a6e <__addsf3x+0x34>
    3a50:	a6 f5       	brtc	.+104    	; 0x3aba <__addsf3x+0x80>
    3a52:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__fp_zero>
    3a56:	0e f4       	brtc	.+2      	; 0x3a5a <__addsf3x+0x20>
    3a58:	e0 95       	com	r30
    3a5a:	0b 2e       	mov	r0, r27
    3a5c:	ba 2f       	mov	r27, r26
    3a5e:	a0 2d       	mov	r26, r0
    3a60:	0b 01       	movw	r0, r22
    3a62:	b9 01       	movw	r22, r18
    3a64:	90 01       	movw	r18, r0
    3a66:	0c 01       	movw	r0, r24
    3a68:	ca 01       	movw	r24, r20
    3a6a:	a0 01       	movw	r20, r0
    3a6c:	11 24       	eor	r1, r1
    3a6e:	ff 27       	eor	r31, r31
    3a70:	59 1b       	sub	r21, r25
    3a72:	99 f0       	breq	.+38     	; 0x3a9a <__addsf3x+0x60>
    3a74:	59 3f       	cpi	r21, 0xF9	; 249
    3a76:	50 f4       	brcc	.+20     	; 0x3a8c <__addsf3x+0x52>
    3a78:	50 3e       	cpi	r21, 0xE0	; 224
    3a7a:	68 f1       	brcs	.+90     	; 0x3ad6 <__addsf3x+0x9c>
    3a7c:	1a 16       	cp	r1, r26
    3a7e:	f0 40       	sbci	r31, 0x00	; 0
    3a80:	a2 2f       	mov	r26, r18
    3a82:	23 2f       	mov	r18, r19
    3a84:	34 2f       	mov	r19, r20
    3a86:	44 27       	eor	r20, r20
    3a88:	58 5f       	subi	r21, 0xF8	; 248
    3a8a:	f3 cf       	rjmp	.-26     	; 0x3a72 <__addsf3x+0x38>
    3a8c:	46 95       	lsr	r20
    3a8e:	37 95       	ror	r19
    3a90:	27 95       	ror	r18
    3a92:	a7 95       	ror	r26
    3a94:	f0 40       	sbci	r31, 0x00	; 0
    3a96:	53 95       	inc	r21
    3a98:	c9 f7       	brne	.-14     	; 0x3a8c <__addsf3x+0x52>
    3a9a:	7e f4       	brtc	.+30     	; 0x3aba <__addsf3x+0x80>
    3a9c:	1f 16       	cp	r1, r31
    3a9e:	ba 0b       	sbc	r27, r26
    3aa0:	62 0b       	sbc	r22, r18
    3aa2:	73 0b       	sbc	r23, r19
    3aa4:	84 0b       	sbc	r24, r20
    3aa6:	ba f0       	brmi	.+46     	; 0x3ad6 <__addsf3x+0x9c>
    3aa8:	91 50       	subi	r25, 0x01	; 1
    3aaa:	a1 f0       	breq	.+40     	; 0x3ad4 <__addsf3x+0x9a>
    3aac:	ff 0f       	add	r31, r31
    3aae:	bb 1f       	adc	r27, r27
    3ab0:	66 1f       	adc	r22, r22
    3ab2:	77 1f       	adc	r23, r23
    3ab4:	88 1f       	adc	r24, r24
    3ab6:	c2 f7       	brpl	.-16     	; 0x3aa8 <__addsf3x+0x6e>
    3ab8:	0e c0       	rjmp	.+28     	; 0x3ad6 <__addsf3x+0x9c>
    3aba:	ba 0f       	add	r27, r26
    3abc:	62 1f       	adc	r22, r18
    3abe:	73 1f       	adc	r23, r19
    3ac0:	84 1f       	adc	r24, r20
    3ac2:	48 f4       	brcc	.+18     	; 0x3ad6 <__addsf3x+0x9c>
    3ac4:	87 95       	ror	r24
    3ac6:	77 95       	ror	r23
    3ac8:	67 95       	ror	r22
    3aca:	b7 95       	ror	r27
    3acc:	f7 95       	ror	r31
    3ace:	9e 3f       	cpi	r25, 0xFE	; 254
    3ad0:	08 f0       	brcs	.+2      	; 0x3ad4 <__addsf3x+0x9a>
    3ad2:	b0 cf       	rjmp	.-160    	; 0x3a34 <__addsf3+0x28>
    3ad4:	93 95       	inc	r25
    3ad6:	88 0f       	add	r24, r24
    3ad8:	08 f0       	brcs	.+2      	; 0x3adc <__addsf3x+0xa2>
    3ada:	99 27       	eor	r25, r25
    3adc:	ee 0f       	add	r30, r30
    3ade:	97 95       	ror	r25
    3ae0:	87 95       	ror	r24
    3ae2:	08 95       	ret

00003ae4 <__cmpsf2>:
    3ae4:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__fp_cmp>
    3ae8:	08 f4       	brcc	.+2      	; 0x3aec <__cmpsf2+0x8>
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	08 95       	ret

00003aee <__divsf3>:
    3aee:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <__divsf3x>
    3af2:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__fp_round>
    3af6:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <__fp_pscB>
    3afa:	58 f0       	brcs	.+22     	; 0x3b12 <__divsf3+0x24>
    3afc:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__fp_pscA>
    3b00:	40 f0       	brcs	.+16     	; 0x3b12 <__divsf3+0x24>
    3b02:	29 f4       	brne	.+10     	; 0x3b0e <__divsf3+0x20>
    3b04:	5f 3f       	cpi	r21, 0xFF	; 255
    3b06:	29 f0       	breq	.+10     	; 0x3b12 <__divsf3+0x24>
    3b08:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__fp_inf>
    3b0c:	51 11       	cpse	r21, r1
    3b0e:	0c 94 c4 1e 	jmp	0x3d88	; 0x3d88 <__fp_szero>
    3b12:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_nan>

00003b16 <__divsf3x>:
    3b16:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__fp_split3>
    3b1a:	68 f3       	brcs	.-38     	; 0x3af6 <__divsf3+0x8>

00003b1c <__divsf3_pse>:
    3b1c:	99 23       	and	r25, r25
    3b1e:	b1 f3       	breq	.-20     	; 0x3b0c <__divsf3+0x1e>
    3b20:	55 23       	and	r21, r21
    3b22:	91 f3       	breq	.-28     	; 0x3b08 <__divsf3+0x1a>
    3b24:	95 1b       	sub	r25, r21
    3b26:	55 0b       	sbc	r21, r21
    3b28:	bb 27       	eor	r27, r27
    3b2a:	aa 27       	eor	r26, r26
    3b2c:	62 17       	cp	r22, r18
    3b2e:	73 07       	cpc	r23, r19
    3b30:	84 07       	cpc	r24, r20
    3b32:	38 f0       	brcs	.+14     	; 0x3b42 <__divsf3_pse+0x26>
    3b34:	9f 5f       	subi	r25, 0xFF	; 255
    3b36:	5f 4f       	sbci	r21, 0xFF	; 255
    3b38:	22 0f       	add	r18, r18
    3b3a:	33 1f       	adc	r19, r19
    3b3c:	44 1f       	adc	r20, r20
    3b3e:	aa 1f       	adc	r26, r26
    3b40:	a9 f3       	breq	.-22     	; 0x3b2c <__divsf3_pse+0x10>
    3b42:	35 d0       	rcall	.+106    	; 0x3bae <__divsf3_pse+0x92>
    3b44:	0e 2e       	mov	r0, r30
    3b46:	3a f0       	brmi	.+14     	; 0x3b56 <__divsf3_pse+0x3a>
    3b48:	e0 e8       	ldi	r30, 0x80	; 128
    3b4a:	32 d0       	rcall	.+100    	; 0x3bb0 <__divsf3_pse+0x94>
    3b4c:	91 50       	subi	r25, 0x01	; 1
    3b4e:	50 40       	sbci	r21, 0x00	; 0
    3b50:	e6 95       	lsr	r30
    3b52:	00 1c       	adc	r0, r0
    3b54:	ca f7       	brpl	.-14     	; 0x3b48 <__divsf3_pse+0x2c>
    3b56:	2b d0       	rcall	.+86     	; 0x3bae <__divsf3_pse+0x92>
    3b58:	fe 2f       	mov	r31, r30
    3b5a:	29 d0       	rcall	.+82     	; 0x3bae <__divsf3_pse+0x92>
    3b5c:	66 0f       	add	r22, r22
    3b5e:	77 1f       	adc	r23, r23
    3b60:	88 1f       	adc	r24, r24
    3b62:	bb 1f       	adc	r27, r27
    3b64:	26 17       	cp	r18, r22
    3b66:	37 07       	cpc	r19, r23
    3b68:	48 07       	cpc	r20, r24
    3b6a:	ab 07       	cpc	r26, r27
    3b6c:	b0 e8       	ldi	r27, 0x80	; 128
    3b6e:	09 f0       	breq	.+2      	; 0x3b72 <__divsf3_pse+0x56>
    3b70:	bb 0b       	sbc	r27, r27
    3b72:	80 2d       	mov	r24, r0
    3b74:	bf 01       	movw	r22, r30
    3b76:	ff 27       	eor	r31, r31
    3b78:	93 58       	subi	r25, 0x83	; 131
    3b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b7c:	3a f0       	brmi	.+14     	; 0x3b8c <__divsf3_pse+0x70>
    3b7e:	9e 3f       	cpi	r25, 0xFE	; 254
    3b80:	51 05       	cpc	r21, r1
    3b82:	78 f0       	brcs	.+30     	; 0x3ba2 <__divsf3_pse+0x86>
    3b84:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__fp_inf>
    3b88:	0c 94 c4 1e 	jmp	0x3d88	; 0x3d88 <__fp_szero>
    3b8c:	5f 3f       	cpi	r21, 0xFF	; 255
    3b8e:	e4 f3       	brlt	.-8      	; 0x3b88 <__divsf3_pse+0x6c>
    3b90:	98 3e       	cpi	r25, 0xE8	; 232
    3b92:	d4 f3       	brlt	.-12     	; 0x3b88 <__divsf3_pse+0x6c>
    3b94:	86 95       	lsr	r24
    3b96:	77 95       	ror	r23
    3b98:	67 95       	ror	r22
    3b9a:	b7 95       	ror	r27
    3b9c:	f7 95       	ror	r31
    3b9e:	9f 5f       	subi	r25, 0xFF	; 255
    3ba0:	c9 f7       	brne	.-14     	; 0x3b94 <__divsf3_pse+0x78>
    3ba2:	88 0f       	add	r24, r24
    3ba4:	91 1d       	adc	r25, r1
    3ba6:	96 95       	lsr	r25
    3ba8:	87 95       	ror	r24
    3baa:	97 f9       	bld	r25, 7
    3bac:	08 95       	ret
    3bae:	e1 e0       	ldi	r30, 0x01	; 1
    3bb0:	66 0f       	add	r22, r22
    3bb2:	77 1f       	adc	r23, r23
    3bb4:	88 1f       	adc	r24, r24
    3bb6:	bb 1f       	adc	r27, r27
    3bb8:	62 17       	cp	r22, r18
    3bba:	73 07       	cpc	r23, r19
    3bbc:	84 07       	cpc	r24, r20
    3bbe:	ba 07       	cpc	r27, r26
    3bc0:	20 f0       	brcs	.+8      	; 0x3bca <__divsf3_pse+0xae>
    3bc2:	62 1b       	sub	r22, r18
    3bc4:	73 0b       	sbc	r23, r19
    3bc6:	84 0b       	sbc	r24, r20
    3bc8:	ba 0b       	sbc	r27, r26
    3bca:	ee 1f       	adc	r30, r30
    3bcc:	88 f7       	brcc	.-30     	; 0x3bb0 <__divsf3_pse+0x94>
    3bce:	e0 95       	com	r30
    3bd0:	08 95       	ret

00003bd2 <__fixunssfsi>:
    3bd2:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <__fp_splitA>
    3bd6:	88 f0       	brcs	.+34     	; 0x3bfa <__fixunssfsi+0x28>
    3bd8:	9f 57       	subi	r25, 0x7F	; 127
    3bda:	98 f0       	brcs	.+38     	; 0x3c02 <__fixunssfsi+0x30>
    3bdc:	b9 2f       	mov	r27, r25
    3bde:	99 27       	eor	r25, r25
    3be0:	b7 51       	subi	r27, 0x17	; 23
    3be2:	b0 f0       	brcs	.+44     	; 0x3c10 <__fixunssfsi+0x3e>
    3be4:	e1 f0       	breq	.+56     	; 0x3c1e <__fixunssfsi+0x4c>
    3be6:	66 0f       	add	r22, r22
    3be8:	77 1f       	adc	r23, r23
    3bea:	88 1f       	adc	r24, r24
    3bec:	99 1f       	adc	r25, r25
    3bee:	1a f0       	brmi	.+6      	; 0x3bf6 <__fixunssfsi+0x24>
    3bf0:	ba 95       	dec	r27
    3bf2:	c9 f7       	brne	.-14     	; 0x3be6 <__fixunssfsi+0x14>
    3bf4:	14 c0       	rjmp	.+40     	; 0x3c1e <__fixunssfsi+0x4c>
    3bf6:	b1 30       	cpi	r27, 0x01	; 1
    3bf8:	91 f0       	breq	.+36     	; 0x3c1e <__fixunssfsi+0x4c>
    3bfa:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__fp_zero>
    3bfe:	b1 e0       	ldi	r27, 0x01	; 1
    3c00:	08 95       	ret
    3c02:	0c 94 c3 1e 	jmp	0x3d86	; 0x3d86 <__fp_zero>
    3c06:	67 2f       	mov	r22, r23
    3c08:	78 2f       	mov	r23, r24
    3c0a:	88 27       	eor	r24, r24
    3c0c:	b8 5f       	subi	r27, 0xF8	; 248
    3c0e:	39 f0       	breq	.+14     	; 0x3c1e <__fixunssfsi+0x4c>
    3c10:	b9 3f       	cpi	r27, 0xF9	; 249
    3c12:	cc f3       	brlt	.-14     	; 0x3c06 <__fixunssfsi+0x34>
    3c14:	86 95       	lsr	r24
    3c16:	77 95       	ror	r23
    3c18:	67 95       	ror	r22
    3c1a:	b3 95       	inc	r27
    3c1c:	d9 f7       	brne	.-10     	; 0x3c14 <__fixunssfsi+0x42>
    3c1e:	3e f4       	brtc	.+14     	; 0x3c2e <__fixunssfsi+0x5c>
    3c20:	90 95       	com	r25
    3c22:	80 95       	com	r24
    3c24:	70 95       	com	r23
    3c26:	61 95       	neg	r22
    3c28:	7f 4f       	sbci	r23, 0xFF	; 255
    3c2a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c2e:	08 95       	ret

00003c30 <__floatunsisf>:
    3c30:	e8 94       	clt
    3c32:	09 c0       	rjmp	.+18     	; 0x3c46 <__floatsisf+0x12>

00003c34 <__floatsisf>:
    3c34:	97 fb       	bst	r25, 7
    3c36:	3e f4       	brtc	.+14     	; 0x3c46 <__floatsisf+0x12>
    3c38:	90 95       	com	r25
    3c3a:	80 95       	com	r24
    3c3c:	70 95       	com	r23
    3c3e:	61 95       	neg	r22
    3c40:	7f 4f       	sbci	r23, 0xFF	; 255
    3c42:	8f 4f       	sbci	r24, 0xFF	; 255
    3c44:	9f 4f       	sbci	r25, 0xFF	; 255
    3c46:	99 23       	and	r25, r25
    3c48:	a9 f0       	breq	.+42     	; 0x3c74 <__floatsisf+0x40>
    3c4a:	f9 2f       	mov	r31, r25
    3c4c:	96 e9       	ldi	r25, 0x96	; 150
    3c4e:	bb 27       	eor	r27, r27
    3c50:	93 95       	inc	r25
    3c52:	f6 95       	lsr	r31
    3c54:	87 95       	ror	r24
    3c56:	77 95       	ror	r23
    3c58:	67 95       	ror	r22
    3c5a:	b7 95       	ror	r27
    3c5c:	f1 11       	cpse	r31, r1
    3c5e:	f8 cf       	rjmp	.-16     	; 0x3c50 <__floatsisf+0x1c>
    3c60:	fa f4       	brpl	.+62     	; 0x3ca0 <__floatsisf+0x6c>
    3c62:	bb 0f       	add	r27, r27
    3c64:	11 f4       	brne	.+4      	; 0x3c6a <__floatsisf+0x36>
    3c66:	60 ff       	sbrs	r22, 0
    3c68:	1b c0       	rjmp	.+54     	; 0x3ca0 <__floatsisf+0x6c>
    3c6a:	6f 5f       	subi	r22, 0xFF	; 255
    3c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c70:	9f 4f       	sbci	r25, 0xFF	; 255
    3c72:	16 c0       	rjmp	.+44     	; 0x3ca0 <__floatsisf+0x6c>
    3c74:	88 23       	and	r24, r24
    3c76:	11 f0       	breq	.+4      	; 0x3c7c <__floatsisf+0x48>
    3c78:	96 e9       	ldi	r25, 0x96	; 150
    3c7a:	11 c0       	rjmp	.+34     	; 0x3c9e <__floatsisf+0x6a>
    3c7c:	77 23       	and	r23, r23
    3c7e:	21 f0       	breq	.+8      	; 0x3c88 <__floatsisf+0x54>
    3c80:	9e e8       	ldi	r25, 0x8E	; 142
    3c82:	87 2f       	mov	r24, r23
    3c84:	76 2f       	mov	r23, r22
    3c86:	05 c0       	rjmp	.+10     	; 0x3c92 <__floatsisf+0x5e>
    3c88:	66 23       	and	r22, r22
    3c8a:	71 f0       	breq	.+28     	; 0x3ca8 <__floatsisf+0x74>
    3c8c:	96 e8       	ldi	r25, 0x86	; 134
    3c8e:	86 2f       	mov	r24, r22
    3c90:	70 e0       	ldi	r23, 0x00	; 0
    3c92:	60 e0       	ldi	r22, 0x00	; 0
    3c94:	2a f0       	brmi	.+10     	; 0x3ca0 <__floatsisf+0x6c>
    3c96:	9a 95       	dec	r25
    3c98:	66 0f       	add	r22, r22
    3c9a:	77 1f       	adc	r23, r23
    3c9c:	88 1f       	adc	r24, r24
    3c9e:	da f7       	brpl	.-10     	; 0x3c96 <__floatsisf+0x62>
    3ca0:	88 0f       	add	r24, r24
    3ca2:	96 95       	lsr	r25
    3ca4:	87 95       	ror	r24
    3ca6:	97 f9       	bld	r25, 7
    3ca8:	08 95       	ret

00003caa <__fp_cmp>:
    3caa:	99 0f       	add	r25, r25
    3cac:	00 08       	sbc	r0, r0
    3cae:	55 0f       	add	r21, r21
    3cb0:	aa 0b       	sbc	r26, r26
    3cb2:	e0 e8       	ldi	r30, 0x80	; 128
    3cb4:	fe ef       	ldi	r31, 0xFE	; 254
    3cb6:	16 16       	cp	r1, r22
    3cb8:	17 06       	cpc	r1, r23
    3cba:	e8 07       	cpc	r30, r24
    3cbc:	f9 07       	cpc	r31, r25
    3cbe:	c0 f0       	brcs	.+48     	; 0x3cf0 <__fp_cmp+0x46>
    3cc0:	12 16       	cp	r1, r18
    3cc2:	13 06       	cpc	r1, r19
    3cc4:	e4 07       	cpc	r30, r20
    3cc6:	f5 07       	cpc	r31, r21
    3cc8:	98 f0       	brcs	.+38     	; 0x3cf0 <__fp_cmp+0x46>
    3cca:	62 1b       	sub	r22, r18
    3ccc:	73 0b       	sbc	r23, r19
    3cce:	84 0b       	sbc	r24, r20
    3cd0:	95 0b       	sbc	r25, r21
    3cd2:	39 f4       	brne	.+14     	; 0x3ce2 <__fp_cmp+0x38>
    3cd4:	0a 26       	eor	r0, r26
    3cd6:	61 f0       	breq	.+24     	; 0x3cf0 <__fp_cmp+0x46>
    3cd8:	23 2b       	or	r18, r19
    3cda:	24 2b       	or	r18, r20
    3cdc:	25 2b       	or	r18, r21
    3cde:	21 f4       	brne	.+8      	; 0x3ce8 <__fp_cmp+0x3e>
    3ce0:	08 95       	ret
    3ce2:	0a 26       	eor	r0, r26
    3ce4:	09 f4       	brne	.+2      	; 0x3ce8 <__fp_cmp+0x3e>
    3ce6:	a1 40       	sbci	r26, 0x01	; 1
    3ce8:	a6 95       	lsr	r26
    3cea:	8f ef       	ldi	r24, 0xFF	; 255
    3cec:	81 1d       	adc	r24, r1
    3cee:	81 1d       	adc	r24, r1
    3cf0:	08 95       	ret

00003cf2 <__fp_inf>:
    3cf2:	97 f9       	bld	r25, 7
    3cf4:	9f 67       	ori	r25, 0x7F	; 127
    3cf6:	80 e8       	ldi	r24, 0x80	; 128
    3cf8:	70 e0       	ldi	r23, 0x00	; 0
    3cfa:	60 e0       	ldi	r22, 0x00	; 0
    3cfc:	08 95       	ret

00003cfe <__fp_nan>:
    3cfe:	9f ef       	ldi	r25, 0xFF	; 255
    3d00:	80 ec       	ldi	r24, 0xC0	; 192
    3d02:	08 95       	ret

00003d04 <__fp_pscA>:
    3d04:	00 24       	eor	r0, r0
    3d06:	0a 94       	dec	r0
    3d08:	16 16       	cp	r1, r22
    3d0a:	17 06       	cpc	r1, r23
    3d0c:	18 06       	cpc	r1, r24
    3d0e:	09 06       	cpc	r0, r25
    3d10:	08 95       	ret

00003d12 <__fp_pscB>:
    3d12:	00 24       	eor	r0, r0
    3d14:	0a 94       	dec	r0
    3d16:	12 16       	cp	r1, r18
    3d18:	13 06       	cpc	r1, r19
    3d1a:	14 06       	cpc	r1, r20
    3d1c:	05 06       	cpc	r0, r21
    3d1e:	08 95       	ret

00003d20 <__fp_round>:
    3d20:	09 2e       	mov	r0, r25
    3d22:	03 94       	inc	r0
    3d24:	00 0c       	add	r0, r0
    3d26:	11 f4       	brne	.+4      	; 0x3d2c <__fp_round+0xc>
    3d28:	88 23       	and	r24, r24
    3d2a:	52 f0       	brmi	.+20     	; 0x3d40 <__fp_round+0x20>
    3d2c:	bb 0f       	add	r27, r27
    3d2e:	40 f4       	brcc	.+16     	; 0x3d40 <__fp_round+0x20>
    3d30:	bf 2b       	or	r27, r31
    3d32:	11 f4       	brne	.+4      	; 0x3d38 <__fp_round+0x18>
    3d34:	60 ff       	sbrs	r22, 0
    3d36:	04 c0       	rjmp	.+8      	; 0x3d40 <__fp_round+0x20>
    3d38:	6f 5f       	subi	r22, 0xFF	; 255
    3d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d40:	08 95       	ret

00003d42 <__fp_split3>:
    3d42:	57 fd       	sbrc	r21, 7
    3d44:	90 58       	subi	r25, 0x80	; 128
    3d46:	44 0f       	add	r20, r20
    3d48:	55 1f       	adc	r21, r21
    3d4a:	59 f0       	breq	.+22     	; 0x3d62 <__fp_splitA+0x10>
    3d4c:	5f 3f       	cpi	r21, 0xFF	; 255
    3d4e:	71 f0       	breq	.+28     	; 0x3d6c <__fp_splitA+0x1a>
    3d50:	47 95       	ror	r20

00003d52 <__fp_splitA>:
    3d52:	88 0f       	add	r24, r24
    3d54:	97 fb       	bst	r25, 7
    3d56:	99 1f       	adc	r25, r25
    3d58:	61 f0       	breq	.+24     	; 0x3d72 <__fp_splitA+0x20>
    3d5a:	9f 3f       	cpi	r25, 0xFF	; 255
    3d5c:	79 f0       	breq	.+30     	; 0x3d7c <__fp_splitA+0x2a>
    3d5e:	87 95       	ror	r24
    3d60:	08 95       	ret
    3d62:	12 16       	cp	r1, r18
    3d64:	13 06       	cpc	r1, r19
    3d66:	14 06       	cpc	r1, r20
    3d68:	55 1f       	adc	r21, r21
    3d6a:	f2 cf       	rjmp	.-28     	; 0x3d50 <__fp_split3+0xe>
    3d6c:	46 95       	lsr	r20
    3d6e:	f1 df       	rcall	.-30     	; 0x3d52 <__fp_splitA>
    3d70:	08 c0       	rjmp	.+16     	; 0x3d82 <__fp_splitA+0x30>
    3d72:	16 16       	cp	r1, r22
    3d74:	17 06       	cpc	r1, r23
    3d76:	18 06       	cpc	r1, r24
    3d78:	99 1f       	adc	r25, r25
    3d7a:	f1 cf       	rjmp	.-30     	; 0x3d5e <__fp_splitA+0xc>
    3d7c:	86 95       	lsr	r24
    3d7e:	71 05       	cpc	r23, r1
    3d80:	61 05       	cpc	r22, r1
    3d82:	08 94       	sec
    3d84:	08 95       	ret

00003d86 <__fp_zero>:
    3d86:	e8 94       	clt

00003d88 <__fp_szero>:
    3d88:	bb 27       	eor	r27, r27
    3d8a:	66 27       	eor	r22, r22
    3d8c:	77 27       	eor	r23, r23
    3d8e:	cb 01       	movw	r24, r22
    3d90:	97 f9       	bld	r25, 7
    3d92:	08 95       	ret

00003d94 <__gesf2>:
    3d94:	0e 94 55 1e 	call	0x3caa	; 0x3caa <__fp_cmp>
    3d98:	08 f4       	brcc	.+2      	; 0x3d9c <__gesf2+0x8>
    3d9a:	8f ef       	ldi	r24, 0xFF	; 255
    3d9c:	08 95       	ret

00003d9e <__mulsf3>:
    3d9e:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <__mulsf3x>
    3da2:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__fp_round>
    3da6:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__fp_pscA>
    3daa:	38 f0       	brcs	.+14     	; 0x3dba <__mulsf3+0x1c>
    3dac:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <__fp_pscB>
    3db0:	20 f0       	brcs	.+8      	; 0x3dba <__mulsf3+0x1c>
    3db2:	95 23       	and	r25, r21
    3db4:	11 f0       	breq	.+4      	; 0x3dba <__mulsf3+0x1c>
    3db6:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__fp_inf>
    3dba:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__fp_nan>
    3dbe:	11 24       	eor	r1, r1
    3dc0:	0c 94 c4 1e 	jmp	0x3d88	; 0x3d88 <__fp_szero>

00003dc4 <__mulsf3x>:
    3dc4:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__fp_split3>
    3dc8:	70 f3       	brcs	.-36     	; 0x3da6 <__mulsf3+0x8>

00003dca <__mulsf3_pse>:
    3dca:	95 9f       	mul	r25, r21
    3dcc:	c1 f3       	breq	.-16     	; 0x3dbe <__mulsf3+0x20>
    3dce:	95 0f       	add	r25, r21
    3dd0:	50 e0       	ldi	r21, 0x00	; 0
    3dd2:	55 1f       	adc	r21, r21
    3dd4:	62 9f       	mul	r22, r18
    3dd6:	f0 01       	movw	r30, r0
    3dd8:	72 9f       	mul	r23, r18
    3dda:	bb 27       	eor	r27, r27
    3ddc:	f0 0d       	add	r31, r0
    3dde:	b1 1d       	adc	r27, r1
    3de0:	63 9f       	mul	r22, r19
    3de2:	aa 27       	eor	r26, r26
    3de4:	f0 0d       	add	r31, r0
    3de6:	b1 1d       	adc	r27, r1
    3de8:	aa 1f       	adc	r26, r26
    3dea:	64 9f       	mul	r22, r20
    3dec:	66 27       	eor	r22, r22
    3dee:	b0 0d       	add	r27, r0
    3df0:	a1 1d       	adc	r26, r1
    3df2:	66 1f       	adc	r22, r22
    3df4:	82 9f       	mul	r24, r18
    3df6:	22 27       	eor	r18, r18
    3df8:	b0 0d       	add	r27, r0
    3dfa:	a1 1d       	adc	r26, r1
    3dfc:	62 1f       	adc	r22, r18
    3dfe:	73 9f       	mul	r23, r19
    3e00:	b0 0d       	add	r27, r0
    3e02:	a1 1d       	adc	r26, r1
    3e04:	62 1f       	adc	r22, r18
    3e06:	83 9f       	mul	r24, r19
    3e08:	a0 0d       	add	r26, r0
    3e0a:	61 1d       	adc	r22, r1
    3e0c:	22 1f       	adc	r18, r18
    3e0e:	74 9f       	mul	r23, r20
    3e10:	33 27       	eor	r19, r19
    3e12:	a0 0d       	add	r26, r0
    3e14:	61 1d       	adc	r22, r1
    3e16:	23 1f       	adc	r18, r19
    3e18:	84 9f       	mul	r24, r20
    3e1a:	60 0d       	add	r22, r0
    3e1c:	21 1d       	adc	r18, r1
    3e1e:	82 2f       	mov	r24, r18
    3e20:	76 2f       	mov	r23, r22
    3e22:	6a 2f       	mov	r22, r26
    3e24:	11 24       	eor	r1, r1
    3e26:	9f 57       	subi	r25, 0x7F	; 127
    3e28:	50 40       	sbci	r21, 0x00	; 0
    3e2a:	9a f0       	brmi	.+38     	; 0x3e52 <__mulsf3_pse+0x88>
    3e2c:	f1 f0       	breq	.+60     	; 0x3e6a <__mulsf3_pse+0xa0>
    3e2e:	88 23       	and	r24, r24
    3e30:	4a f0       	brmi	.+18     	; 0x3e44 <__mulsf3_pse+0x7a>
    3e32:	ee 0f       	add	r30, r30
    3e34:	ff 1f       	adc	r31, r31
    3e36:	bb 1f       	adc	r27, r27
    3e38:	66 1f       	adc	r22, r22
    3e3a:	77 1f       	adc	r23, r23
    3e3c:	88 1f       	adc	r24, r24
    3e3e:	91 50       	subi	r25, 0x01	; 1
    3e40:	50 40       	sbci	r21, 0x00	; 0
    3e42:	a9 f7       	brne	.-22     	; 0x3e2e <__mulsf3_pse+0x64>
    3e44:	9e 3f       	cpi	r25, 0xFE	; 254
    3e46:	51 05       	cpc	r21, r1
    3e48:	80 f0       	brcs	.+32     	; 0x3e6a <__mulsf3_pse+0xa0>
    3e4a:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__fp_inf>
    3e4e:	0c 94 c4 1e 	jmp	0x3d88	; 0x3d88 <__fp_szero>
    3e52:	5f 3f       	cpi	r21, 0xFF	; 255
    3e54:	e4 f3       	brlt	.-8      	; 0x3e4e <__mulsf3_pse+0x84>
    3e56:	98 3e       	cpi	r25, 0xE8	; 232
    3e58:	d4 f3       	brlt	.-12     	; 0x3e4e <__mulsf3_pse+0x84>
    3e5a:	86 95       	lsr	r24
    3e5c:	77 95       	ror	r23
    3e5e:	67 95       	ror	r22
    3e60:	b7 95       	ror	r27
    3e62:	f7 95       	ror	r31
    3e64:	e7 95       	ror	r30
    3e66:	9f 5f       	subi	r25, 0xFF	; 255
    3e68:	c1 f7       	brne	.-16     	; 0x3e5a <__mulsf3_pse+0x90>
    3e6a:	fe 2b       	or	r31, r30
    3e6c:	88 0f       	add	r24, r24
    3e6e:	91 1d       	adc	r25, r1
    3e70:	96 95       	lsr	r25
    3e72:	87 95       	ror	r24
    3e74:	97 f9       	bld	r25, 7
    3e76:	08 95       	ret

00003e78 <calloc>:
    3e78:	0f 93       	push	r16
    3e7a:	1f 93       	push	r17
    3e7c:	cf 93       	push	r28
    3e7e:	df 93       	push	r29
    3e80:	86 9f       	mul	r24, r22
    3e82:	80 01       	movw	r16, r0
    3e84:	87 9f       	mul	r24, r23
    3e86:	10 0d       	add	r17, r0
    3e88:	96 9f       	mul	r25, r22
    3e8a:	10 0d       	add	r17, r0
    3e8c:	11 24       	eor	r1, r1
    3e8e:	c8 01       	movw	r24, r16
    3e90:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <malloc>
    3e94:	ec 01       	movw	r28, r24
    3e96:	00 97       	sbiw	r24, 0x00	; 0
    3e98:	29 f0       	breq	.+10     	; 0x3ea4 <calloc+0x2c>
    3e9a:	a8 01       	movw	r20, r16
    3e9c:	60 e0       	ldi	r22, 0x00	; 0
    3e9e:	70 e0       	ldi	r23, 0x00	; 0
    3ea0:	0e 94 85 20 	call	0x410a	; 0x410a <memset>
    3ea4:	ce 01       	movw	r24, r28
    3ea6:	df 91       	pop	r29
    3ea8:	cf 91       	pop	r28
    3eaa:	1f 91       	pop	r17
    3eac:	0f 91       	pop	r16
    3eae:	08 95       	ret

00003eb0 <malloc>:
    3eb0:	cf 93       	push	r28
    3eb2:	df 93       	push	r29
    3eb4:	82 30       	cpi	r24, 0x02	; 2
    3eb6:	91 05       	cpc	r25, r1
    3eb8:	10 f4       	brcc	.+4      	; 0x3ebe <malloc+0xe>
    3eba:	82 e0       	ldi	r24, 0x02	; 2
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	e0 91 72 02 	lds	r30, 0x0272
    3ec2:	f0 91 73 02 	lds	r31, 0x0273
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	c0 e0       	ldi	r28, 0x00	; 0
    3ecc:	d0 e0       	ldi	r29, 0x00	; 0
    3ece:	30 97       	sbiw	r30, 0x00	; 0
    3ed0:	11 f1       	breq	.+68     	; 0x3f16 <malloc+0x66>
    3ed2:	40 81       	ld	r20, Z
    3ed4:	51 81       	ldd	r21, Z+1	; 0x01
    3ed6:	48 17       	cp	r20, r24
    3ed8:	59 07       	cpc	r21, r25
    3eda:	c0 f0       	brcs	.+48     	; 0x3f0c <malloc+0x5c>
    3edc:	48 17       	cp	r20, r24
    3ede:	59 07       	cpc	r21, r25
    3ee0:	61 f4       	brne	.+24     	; 0x3efa <malloc+0x4a>
    3ee2:	82 81       	ldd	r24, Z+2	; 0x02
    3ee4:	93 81       	ldd	r25, Z+3	; 0x03
    3ee6:	20 97       	sbiw	r28, 0x00	; 0
    3ee8:	19 f0       	breq	.+6      	; 0x3ef0 <malloc+0x40>
    3eea:	9b 83       	std	Y+3, r25	; 0x03
    3eec:	8a 83       	std	Y+2, r24	; 0x02
    3eee:	2b c0       	rjmp	.+86     	; 0x3f46 <malloc+0x96>
    3ef0:	90 93 73 02 	sts	0x0273, r25
    3ef4:	80 93 72 02 	sts	0x0272, r24
    3ef8:	26 c0       	rjmp	.+76     	; 0x3f46 <malloc+0x96>
    3efa:	21 15       	cp	r18, r1
    3efc:	31 05       	cpc	r19, r1
    3efe:	19 f0       	breq	.+6      	; 0x3f06 <malloc+0x56>
    3f00:	42 17       	cp	r20, r18
    3f02:	53 07       	cpc	r21, r19
    3f04:	18 f4       	brcc	.+6      	; 0x3f0c <malloc+0x5c>
    3f06:	9a 01       	movw	r18, r20
    3f08:	be 01       	movw	r22, r28
    3f0a:	df 01       	movw	r26, r30
    3f0c:	ef 01       	movw	r28, r30
    3f0e:	02 80       	ldd	r0, Z+2	; 0x02
    3f10:	f3 81       	ldd	r31, Z+3	; 0x03
    3f12:	e0 2d       	mov	r30, r0
    3f14:	dc cf       	rjmp	.-72     	; 0x3ece <malloc+0x1e>
    3f16:	21 15       	cp	r18, r1
    3f18:	31 05       	cpc	r19, r1
    3f1a:	09 f1       	breq	.+66     	; 0x3f5e <malloc+0xae>
    3f1c:	28 1b       	sub	r18, r24
    3f1e:	39 0b       	sbc	r19, r25
    3f20:	24 30       	cpi	r18, 0x04	; 4
    3f22:	31 05       	cpc	r19, r1
    3f24:	90 f4       	brcc	.+36     	; 0x3f4a <malloc+0x9a>
    3f26:	12 96       	adiw	r26, 0x02	; 2
    3f28:	8d 91       	ld	r24, X+
    3f2a:	9c 91       	ld	r25, X
    3f2c:	13 97       	sbiw	r26, 0x03	; 3
    3f2e:	61 15       	cp	r22, r1
    3f30:	71 05       	cpc	r23, r1
    3f32:	21 f0       	breq	.+8      	; 0x3f3c <malloc+0x8c>
    3f34:	fb 01       	movw	r30, r22
    3f36:	93 83       	std	Z+3, r25	; 0x03
    3f38:	82 83       	std	Z+2, r24	; 0x02
    3f3a:	04 c0       	rjmp	.+8      	; 0x3f44 <malloc+0x94>
    3f3c:	90 93 73 02 	sts	0x0273, r25
    3f40:	80 93 72 02 	sts	0x0272, r24
    3f44:	fd 01       	movw	r30, r26
    3f46:	32 96       	adiw	r30, 0x02	; 2
    3f48:	44 c0       	rjmp	.+136    	; 0x3fd2 <malloc+0x122>
    3f4a:	fd 01       	movw	r30, r26
    3f4c:	e2 0f       	add	r30, r18
    3f4e:	f3 1f       	adc	r31, r19
    3f50:	81 93       	st	Z+, r24
    3f52:	91 93       	st	Z+, r25
    3f54:	22 50       	subi	r18, 0x02	; 2
    3f56:	31 09       	sbc	r19, r1
    3f58:	2d 93       	st	X+, r18
    3f5a:	3c 93       	st	X, r19
    3f5c:	3a c0       	rjmp	.+116    	; 0x3fd2 <malloc+0x122>
    3f5e:	20 91 70 02 	lds	r18, 0x0270
    3f62:	30 91 71 02 	lds	r19, 0x0271
    3f66:	23 2b       	or	r18, r19
    3f68:	41 f4       	brne	.+16     	; 0x3f7a <malloc+0xca>
    3f6a:	20 91 02 01 	lds	r18, 0x0102
    3f6e:	30 91 03 01 	lds	r19, 0x0103
    3f72:	30 93 71 02 	sts	0x0271, r19
    3f76:	20 93 70 02 	sts	0x0270, r18
    3f7a:	20 91 00 01 	lds	r18, 0x0100
    3f7e:	30 91 01 01 	lds	r19, 0x0101
    3f82:	21 15       	cp	r18, r1
    3f84:	31 05       	cpc	r19, r1
    3f86:	41 f4       	brne	.+16     	; 0x3f98 <malloc+0xe8>
    3f88:	2d b7       	in	r18, 0x3d	; 61
    3f8a:	3e b7       	in	r19, 0x3e	; 62
    3f8c:	40 91 04 01 	lds	r20, 0x0104
    3f90:	50 91 05 01 	lds	r21, 0x0105
    3f94:	24 1b       	sub	r18, r20
    3f96:	35 0b       	sbc	r19, r21
    3f98:	e0 91 70 02 	lds	r30, 0x0270
    3f9c:	f0 91 71 02 	lds	r31, 0x0271
    3fa0:	e2 17       	cp	r30, r18
    3fa2:	f3 07       	cpc	r31, r19
    3fa4:	a0 f4       	brcc	.+40     	; 0x3fce <malloc+0x11e>
    3fa6:	2e 1b       	sub	r18, r30
    3fa8:	3f 0b       	sbc	r19, r31
    3faa:	28 17       	cp	r18, r24
    3fac:	39 07       	cpc	r19, r25
    3fae:	78 f0       	brcs	.+30     	; 0x3fce <malloc+0x11e>
    3fb0:	ac 01       	movw	r20, r24
    3fb2:	4e 5f       	subi	r20, 0xFE	; 254
    3fb4:	5f 4f       	sbci	r21, 0xFF	; 255
    3fb6:	24 17       	cp	r18, r20
    3fb8:	35 07       	cpc	r19, r21
    3fba:	48 f0       	brcs	.+18     	; 0x3fce <malloc+0x11e>
    3fbc:	4e 0f       	add	r20, r30
    3fbe:	5f 1f       	adc	r21, r31
    3fc0:	50 93 71 02 	sts	0x0271, r21
    3fc4:	40 93 70 02 	sts	0x0270, r20
    3fc8:	81 93       	st	Z+, r24
    3fca:	91 93       	st	Z+, r25
    3fcc:	02 c0       	rjmp	.+4      	; 0x3fd2 <malloc+0x122>
    3fce:	e0 e0       	ldi	r30, 0x00	; 0
    3fd0:	f0 e0       	ldi	r31, 0x00	; 0
    3fd2:	cf 01       	movw	r24, r30
    3fd4:	df 91       	pop	r29
    3fd6:	cf 91       	pop	r28
    3fd8:	08 95       	ret

00003fda <free>:
    3fda:	0f 93       	push	r16
    3fdc:	1f 93       	push	r17
    3fde:	cf 93       	push	r28
    3fe0:	df 93       	push	r29
    3fe2:	00 97       	sbiw	r24, 0x00	; 0
    3fe4:	09 f4       	brne	.+2      	; 0x3fe8 <free+0xe>
    3fe6:	8c c0       	rjmp	.+280    	; 0x4100 <free+0x126>
    3fe8:	fc 01       	movw	r30, r24
    3fea:	32 97       	sbiw	r30, 0x02	; 2
    3fec:	13 82       	std	Z+3, r1	; 0x03
    3fee:	12 82       	std	Z+2, r1	; 0x02
    3ff0:	00 91 72 02 	lds	r16, 0x0272
    3ff4:	10 91 73 02 	lds	r17, 0x0273
    3ff8:	01 15       	cp	r16, r1
    3ffa:	11 05       	cpc	r17, r1
    3ffc:	81 f4       	brne	.+32     	; 0x401e <free+0x44>
    3ffe:	20 81       	ld	r18, Z
    4000:	31 81       	ldd	r19, Z+1	; 0x01
    4002:	82 0f       	add	r24, r18
    4004:	93 1f       	adc	r25, r19
    4006:	20 91 70 02 	lds	r18, 0x0270
    400a:	30 91 71 02 	lds	r19, 0x0271
    400e:	28 17       	cp	r18, r24
    4010:	39 07       	cpc	r19, r25
    4012:	79 f5       	brne	.+94     	; 0x4072 <free+0x98>
    4014:	f0 93 71 02 	sts	0x0271, r31
    4018:	e0 93 70 02 	sts	0x0270, r30
    401c:	71 c0       	rjmp	.+226    	; 0x4100 <free+0x126>
    401e:	d8 01       	movw	r26, r16
    4020:	40 e0       	ldi	r20, 0x00	; 0
    4022:	50 e0       	ldi	r21, 0x00	; 0
    4024:	ae 17       	cp	r26, r30
    4026:	bf 07       	cpc	r27, r31
    4028:	50 f4       	brcc	.+20     	; 0x403e <free+0x64>
    402a:	12 96       	adiw	r26, 0x02	; 2
    402c:	2d 91       	ld	r18, X+
    402e:	3c 91       	ld	r19, X
    4030:	13 97       	sbiw	r26, 0x03	; 3
    4032:	ad 01       	movw	r20, r26
    4034:	21 15       	cp	r18, r1
    4036:	31 05       	cpc	r19, r1
    4038:	09 f1       	breq	.+66     	; 0x407c <free+0xa2>
    403a:	d9 01       	movw	r26, r18
    403c:	f3 cf       	rjmp	.-26     	; 0x4024 <free+0x4a>
    403e:	9d 01       	movw	r18, r26
    4040:	da 01       	movw	r26, r20
    4042:	33 83       	std	Z+3, r19	; 0x03
    4044:	22 83       	std	Z+2, r18	; 0x02
    4046:	60 81       	ld	r22, Z
    4048:	71 81       	ldd	r23, Z+1	; 0x01
    404a:	86 0f       	add	r24, r22
    404c:	97 1f       	adc	r25, r23
    404e:	82 17       	cp	r24, r18
    4050:	93 07       	cpc	r25, r19
    4052:	69 f4       	brne	.+26     	; 0x406e <free+0x94>
    4054:	ec 01       	movw	r28, r24
    4056:	28 81       	ld	r18, Y
    4058:	39 81       	ldd	r19, Y+1	; 0x01
    405a:	26 0f       	add	r18, r22
    405c:	37 1f       	adc	r19, r23
    405e:	2e 5f       	subi	r18, 0xFE	; 254
    4060:	3f 4f       	sbci	r19, 0xFF	; 255
    4062:	31 83       	std	Z+1, r19	; 0x01
    4064:	20 83       	st	Z, r18
    4066:	8a 81       	ldd	r24, Y+2	; 0x02
    4068:	9b 81       	ldd	r25, Y+3	; 0x03
    406a:	93 83       	std	Z+3, r25	; 0x03
    406c:	82 83       	std	Z+2, r24	; 0x02
    406e:	45 2b       	or	r20, r21
    4070:	29 f4       	brne	.+10     	; 0x407c <free+0xa2>
    4072:	f0 93 73 02 	sts	0x0273, r31
    4076:	e0 93 72 02 	sts	0x0272, r30
    407a:	42 c0       	rjmp	.+132    	; 0x4100 <free+0x126>
    407c:	13 96       	adiw	r26, 0x03	; 3
    407e:	fc 93       	st	X, r31
    4080:	ee 93       	st	-X, r30
    4082:	12 97       	sbiw	r26, 0x02	; 2
    4084:	ed 01       	movw	r28, r26
    4086:	49 91       	ld	r20, Y+
    4088:	59 91       	ld	r21, Y+
    408a:	9e 01       	movw	r18, r28
    408c:	24 0f       	add	r18, r20
    408e:	35 1f       	adc	r19, r21
    4090:	e2 17       	cp	r30, r18
    4092:	f3 07       	cpc	r31, r19
    4094:	71 f4       	brne	.+28     	; 0x40b2 <free+0xd8>
    4096:	80 81       	ld	r24, Z
    4098:	91 81       	ldd	r25, Z+1	; 0x01
    409a:	84 0f       	add	r24, r20
    409c:	95 1f       	adc	r25, r21
    409e:	02 96       	adiw	r24, 0x02	; 2
    40a0:	11 96       	adiw	r26, 0x01	; 1
    40a2:	9c 93       	st	X, r25
    40a4:	8e 93       	st	-X, r24
    40a6:	82 81       	ldd	r24, Z+2	; 0x02
    40a8:	93 81       	ldd	r25, Z+3	; 0x03
    40aa:	13 96       	adiw	r26, 0x03	; 3
    40ac:	9c 93       	st	X, r25
    40ae:	8e 93       	st	-X, r24
    40b0:	12 97       	sbiw	r26, 0x02	; 2
    40b2:	e0 e0       	ldi	r30, 0x00	; 0
    40b4:	f0 e0       	ldi	r31, 0x00	; 0
    40b6:	d8 01       	movw	r26, r16
    40b8:	12 96       	adiw	r26, 0x02	; 2
    40ba:	8d 91       	ld	r24, X+
    40bc:	9c 91       	ld	r25, X
    40be:	13 97       	sbiw	r26, 0x03	; 3
    40c0:	00 97       	sbiw	r24, 0x00	; 0
    40c2:	19 f0       	breq	.+6      	; 0x40ca <free+0xf0>
    40c4:	f8 01       	movw	r30, r16
    40c6:	8c 01       	movw	r16, r24
    40c8:	f6 cf       	rjmp	.-20     	; 0x40b6 <free+0xdc>
    40ca:	8d 91       	ld	r24, X+
    40cc:	9c 91       	ld	r25, X
    40ce:	98 01       	movw	r18, r16
    40d0:	2e 5f       	subi	r18, 0xFE	; 254
    40d2:	3f 4f       	sbci	r19, 0xFF	; 255
    40d4:	82 0f       	add	r24, r18
    40d6:	93 1f       	adc	r25, r19
    40d8:	20 91 70 02 	lds	r18, 0x0270
    40dc:	30 91 71 02 	lds	r19, 0x0271
    40e0:	28 17       	cp	r18, r24
    40e2:	39 07       	cpc	r19, r25
    40e4:	69 f4       	brne	.+26     	; 0x4100 <free+0x126>
    40e6:	30 97       	sbiw	r30, 0x00	; 0
    40e8:	29 f4       	brne	.+10     	; 0x40f4 <free+0x11a>
    40ea:	10 92 73 02 	sts	0x0273, r1
    40ee:	10 92 72 02 	sts	0x0272, r1
    40f2:	02 c0       	rjmp	.+4      	; 0x40f8 <free+0x11e>
    40f4:	13 82       	std	Z+3, r1	; 0x03
    40f6:	12 82       	std	Z+2, r1	; 0x02
    40f8:	10 93 71 02 	sts	0x0271, r17
    40fc:	00 93 70 02 	sts	0x0270, r16
    4100:	df 91       	pop	r29
    4102:	cf 91       	pop	r28
    4104:	1f 91       	pop	r17
    4106:	0f 91       	pop	r16
    4108:	08 95       	ret

0000410a <memset>:
    410a:	dc 01       	movw	r26, r24
    410c:	01 c0       	rjmp	.+2      	; 0x4110 <memset+0x6>
    410e:	6d 93       	st	X+, r22
    4110:	41 50       	subi	r20, 0x01	; 1
    4112:	50 40       	sbci	r21, 0x00	; 0
    4114:	e0 f7       	brcc	.-8      	; 0x410e <memset+0x4>
    4116:	08 95       	ret

00004118 <_exit>:
    4118:	f8 94       	cli

0000411a <__stop_program>:
    411a:	ff cf       	rjmp	.-2      	; 0x411a <__stop_program>
