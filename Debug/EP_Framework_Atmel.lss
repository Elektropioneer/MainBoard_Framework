
EP_Framework_Atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  00005bf4  00005c88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005bf4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d5  0080019e  0080019e  00005d26  2**0
                  ALLOC
  3 .stab         00007d28  00000000  00000000  00005d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a18  00000000  00000000  0000da50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00010468  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001047c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__ctors_end>
       4:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       8:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
       c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      10:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      14:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      18:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      1c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      20:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__vector_8>
      24:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      28:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      2c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      30:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__vector_12>
      34:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      38:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      3c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      40:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      44:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      48:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__vector_18>
      4c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      50:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      54:	0c 94 9d 21 	jmp	0x433a	; 0x433a <__vector_21>
      58:	0c 94 7f 21 	jmp	0x42fe	; 0x42fe <__vector_22>
      5c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      60:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      64:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      68:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      6c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      70:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      74:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      78:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      7c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      80:	0c 94 d6 21 	jmp	0x43ac	; 0x43ac <__vector_32>
      84:	0c 94 b8 21 	jmp	0x4370	; 0x4370 <__vector_33>
      88:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      8c:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>
      90:	0c 94 04 01 	jmp	0x208	; 0x208 <__bad_interrupt>

00000094 <__trampolines_end>:
      94:	4e 41       	sbci	r20, 0x1E	; 30
      96:	4e 49       	sbci	r20, 0x9E	; 158

00000097 <pstr_inity>:
      97:	49 4e 49 54 59                                      INITY

0000009c <pstr_inf>:
      9c:	49 4e 46                                            INF

0000009f <pwr_m10>:
      9f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      af:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000000b7 <pwr_p10>:
      b7:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      c7:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      d7:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      e7:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      f7:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     107:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     117:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     127:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     137:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     147:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     157:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     167:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     177:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     187:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     197:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     1a7:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     1b7:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     1c7:	3d 27 00                                            ='.

000001ca <__ctors_end>:
     1ca:	11 24       	eor	r1, r1
     1cc:	1f be       	out	0x3f, r1	; 63
     1ce:	cf ef       	ldi	r28, 0xFF	; 255
     1d0:	d0 e1       	ldi	r29, 0x10	; 16
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	cd bf       	out	0x3d, r28	; 61

000001d6 <__do_copy_data>:
     1d6:	11 e0       	ldi	r17, 0x01	; 1
     1d8:	a0 e0       	ldi	r26, 0x00	; 0
     1da:	b1 e0       	ldi	r27, 0x01	; 1
     1dc:	e4 ef       	ldi	r30, 0xF4	; 244
     1de:	fb e5       	ldi	r31, 0x5B	; 91
     1e0:	00 e0       	ldi	r16, 0x00	; 0
     1e2:	0b bf       	out	0x3b, r16	; 59
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <__do_copy_data+0x14>
     1e6:	07 90       	elpm	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	ae 39       	cpi	r26, 0x9E	; 158
     1ec:	b1 07       	cpc	r27, r17
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <__do_copy_data+0x10>

000001f0 <__do_clear_bss>:
     1f0:	22 e0       	ldi	r18, 0x02	; 2
     1f2:	ae e9       	ldi	r26, 0x9E	; 158
     1f4:	b1 e0       	ldi	r27, 0x01	; 1
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <.do_clear_bss_start>

000001f8 <.do_clear_bss_loop>:
     1f8:	1d 92       	st	X+, r1

000001fa <.do_clear_bss_start>:
     1fa:	a3 37       	cpi	r26, 0x73	; 115
     1fc:	b2 07       	cpc	r27, r18
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <.do_clear_bss_loop>
     200:	0e 94 9f 24 	call	0x493e	; 0x493e <main>
     204:	0c 94 f8 2d 	jmp	0x5bf0	; 0x5bf0 <_exit>

00000208 <__bad_interrupt>:
     208:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020c <act_servo>:
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	69 97       	sbiw	r28, 0x19	; 25
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	f8 94       	cli
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	cd bf       	out	0x3d, r28	; 61
     220:	98 8f       	std	Y+24, r25	; 0x18
     222:	8f 8b       	std	Y+23, r24	; 0x17
     224:	69 8f       	std	Y+25, r22	; 0x19
     226:	8f 89       	ldd	r24, Y+23	; 0x17
     228:	98 8d       	ldd	r25, Y+24	; 0x18
     22a:	fc 01       	movw	r30, r24
     22c:	80 81       	ld	r24, Z
     22e:	88 23       	and	r24, r24
     230:	21 f4       	brne	.+8      	; 0x23a <act_servo+0x2e>
     232:	8f 89       	ldd	r24, Y+23	; 0x17
     234:	98 8d       	ldd	r25, Y+24	; 0x18
     236:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <attach_servo>
     23a:	83 e5       	ldi	r24, 0x53	; 83
     23c:	8f 87       	std	Y+15, r24	; 0x0f
     23e:	8f 89       	ldd	r24, Y+23	; 0x17
     240:	98 8d       	ldd	r25, Y+24	; 0x18
     242:	fc 01       	movw	r30, r24
     244:	80 81       	ld	r24, Z
     246:	88 8b       	std	Y+16, r24	; 0x10
     248:	83 e4       	ldi	r24, 0x43	; 67
     24a:	89 8b       	std	Y+17, r24	; 0x11
     24c:	89 8d       	ldd	r24, Y+25	; 0x19
     24e:	8a 8b       	std	Y+18, r24	; 0x12
     250:	72 c0       	rjmp	.+228    	; 0x336 <act_servo+0x12a>
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	a8 e4       	ldi	r26, 0x48	; 72
     258:	b2 e4       	ldi	r27, 0x42	; 66
     25a:	89 83       	std	Y+1, r24	; 0x01
     25c:	9a 83       	std	Y+2, r25	; 0x02
     25e:	ab 83       	std	Y+3, r26	; 0x03
     260:	bc 83       	std	Y+4, r27	; 0x04
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e4       	ldi	r19, 0x40	; 64
     266:	4c e1       	ldi	r20, 0x1C	; 28
     268:	55 e4       	ldi	r21, 0x45	; 69
     26a:	69 81       	ldd	r22, Y+1	; 0x01
     26c:	7a 81       	ldd	r23, Y+2	; 0x02
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
     270:	9c 81       	ldd	r25, Y+4	; 0x04
     272:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     276:	dc 01       	movw	r26, r24
     278:	cb 01       	movw	r24, r22
     27a:	8d 83       	std	Y+5, r24	; 0x05
     27c:	9e 83       	std	Y+6, r25	; 0x06
     27e:	af 83       	std	Y+7, r26	; 0x07
     280:	b8 87       	std	Y+8, r27	; 0x08
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	40 e8       	ldi	r20, 0x80	; 128
     288:	5f e3       	ldi	r21, 0x3F	; 63
     28a:	6d 81       	ldd	r22, Y+5	; 0x05
     28c:	7e 81       	ldd	r23, Y+6	; 0x06
     28e:	8f 81       	ldd	r24, Y+7	; 0x07
     290:	98 85       	ldd	r25, Y+8	; 0x08
     292:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
     296:	88 23       	and	r24, r24
     298:	2c f4       	brge	.+10     	; 0x2a4 <act_servo+0x98>
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	9a 87       	std	Y+10, r25	; 0x0a
     2a0:	89 87       	std	Y+9, r24	; 0x09
     2a2:	3f c0       	rjmp	.+126    	; 0x322 <act_servo+0x116>
     2a4:	20 e0       	ldi	r18, 0x00	; 0
     2a6:	3f ef       	ldi	r19, 0xFF	; 255
     2a8:	4f e7       	ldi	r20, 0x7F	; 127
     2aa:	57 e4       	ldi	r21, 0x47	; 71
     2ac:	6d 81       	ldd	r22, Y+5	; 0x05
     2ae:	7e 81       	ldd	r23, Y+6	; 0x06
     2b0:	8f 81       	ldd	r24, Y+7	; 0x07
     2b2:	98 85       	ldd	r25, Y+8	; 0x08
     2b4:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
     2b8:	18 16       	cp	r1, r24
     2ba:	4c f5       	brge	.+82     	; 0x30e <act_servo+0x102>
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	40 e2       	ldi	r20, 0x20	; 32
     2c2:	51 e4       	ldi	r21, 0x41	; 65
     2c4:	69 81       	ldd	r22, Y+1	; 0x01
     2c6:	7a 81       	ldd	r23, Y+2	; 0x02
     2c8:	8b 81       	ldd	r24, Y+3	; 0x03
     2ca:	9c 81       	ldd	r25, Y+4	; 0x04
     2cc:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     2d0:	dc 01       	movw	r26, r24
     2d2:	cb 01       	movw	r24, r22
     2d4:	bc 01       	movw	r22, r24
     2d6:	cd 01       	movw	r24, r26
     2d8:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     2dc:	dc 01       	movw	r26, r24
     2de:	cb 01       	movw	r24, r22
     2e0:	9a 87       	std	Y+10, r25	; 0x0a
     2e2:	89 87       	std	Y+9, r24	; 0x09
     2e4:	0f c0       	rjmp	.+30     	; 0x304 <act_servo+0xf8>
     2e6:	8a ef       	ldi	r24, 0xFA	; 250
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	9c 87       	std	Y+12, r25	; 0x0c
     2ec:	8b 87       	std	Y+11, r24	; 0x0b
     2ee:	8b 85       	ldd	r24, Y+11	; 0x0b
     2f0:	9c 85       	ldd	r25, Y+12	; 0x0c
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <act_servo+0xe6>
     2f6:	9c 87       	std	Y+12, r25	; 0x0c
     2f8:	8b 87       	std	Y+11, r24	; 0x0b
     2fa:	89 85       	ldd	r24, Y+9	; 0x09
     2fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	9a 87       	std	Y+10, r25	; 0x0a
     302:	89 87       	std	Y+9, r24	; 0x09
     304:	89 85       	ldd	r24, Y+9	; 0x09
     306:	9a 85       	ldd	r25, Y+10	; 0x0a
     308:	89 2b       	or	r24, r25
     30a:	69 f7       	brne	.-38     	; 0x2e6 <act_servo+0xda>
     30c:	14 c0       	rjmp	.+40     	; 0x336 <act_servo+0x12a>
     30e:	6d 81       	ldd	r22, Y+5	; 0x05
     310:	7e 81       	ldd	r23, Y+6	; 0x06
     312:	8f 81       	ldd	r24, Y+7	; 0x07
     314:	98 85       	ldd	r25, Y+8	; 0x08
     316:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     31a:	dc 01       	movw	r26, r24
     31c:	cb 01       	movw	r24, r22
     31e:	9a 87       	std	Y+10, r25	; 0x0a
     320:	89 87       	std	Y+9, r24	; 0x09
     322:	89 85       	ldd	r24, Y+9	; 0x09
     324:	9a 85       	ldd	r25, Y+10	; 0x0a
     326:	9e 87       	std	Y+14, r25	; 0x0e
     328:	8d 87       	std	Y+13, r24	; 0x0d
     32a:	8d 85       	ldd	r24, Y+13	; 0x0d
     32c:	9e 85       	ldd	r25, Y+14	; 0x0e
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <act_servo+0x122>
     332:	9e 87       	std	Y+14, r25	; 0x0e
     334:	8d 87       	std	Y+13, r24	; 0x0d
     336:	ce 01       	movw	r24, r28
     338:	0f 96       	adiw	r24, 0x0f	; 15
     33a:	64 ed       	ldi	r22, 0xD4	; 212
     33c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
     340:	88 23       	and	r24, r24
     342:	09 f0       	breq	.+2      	; 0x346 <act_servo+0x13a>
     344:	86 cf       	rjmp	.-244    	; 0x252 <act_servo+0x46>
     346:	8f 89       	ldd	r24, Y+23	; 0x17
     348:	98 8d       	ldd	r25, Y+24	; 0x18
     34a:	29 8d       	ldd	r18, Y+25	; 0x19
     34c:	fc 01       	movw	r30, r24
     34e:	21 83       	std	Z+1, r18	; 0x01
     350:	69 96       	adiw	r28, 0x19	; 25
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <setup_servo>:
			_delay_ms(50);

	servo_->angle = angle_;

}
	void setup_servo(Servo_Act* servo_, uint8_t ID_, uint8_t angle_, unsigned send) {
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	00 d0       	rcall	.+0      	; 0x368 <setup_servo+0x6>
     368:	00 d0       	rcall	.+0      	; 0x36a <setup_servo+0x8>
     36a:	00 d0       	rcall	.+0      	; 0x36c <setup_servo+0xa>
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	9a 83       	std	Y+2, r25	; 0x02
     372:	89 83       	std	Y+1, r24	; 0x01
     374:	6b 83       	std	Y+3, r22	; 0x03
     376:	4c 83       	std	Y+4, r20	; 0x04
     378:	3e 83       	std	Y+6, r19	; 0x06
     37a:	2d 83       	std	Y+5, r18	; 0x05

		servo_->ID 		= ID_;
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	9a 81       	ldd	r25, Y+2	; 0x02
     380:	2b 81       	ldd	r18, Y+3	; 0x03
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
		servo_->angle 	= angle_;
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	9a 81       	ldd	r25, Y+2	; 0x02
     38a:	2c 81       	ldd	r18, Y+4	; 0x04
     38c:	fc 01       	movw	r30, r24
     38e:	21 83       	std	Z+1, r18	; 0x01

		if(send) {
     390:	8d 81       	ldd	r24, Y+5	; 0x05
     392:	9e 81       	ldd	r25, Y+6	; 0x06
     394:	89 2b       	or	r24, r25
     396:	51 f0       	breq	.+20     	; 0x3ac <setup_servo+0x4a>
			attach_servo(servo_);
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	9a 81       	ldd	r25, Y+2	; 0x02
     39c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <attach_servo>
			act_servo(servo_, angle_);
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	9a 81       	ldd	r25, Y+2	; 0x02
     3a4:	6c 81       	ldd	r22, Y+4	; 0x04
     3a6:	0e 94 06 01 	call	0x20c	; 0x20c <act_servo>
     3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <setup_servo+0x52>
		} else {
			detach_servo(servo_);
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	9a 81       	ldd	r25, Y+2	; 0x02
     3b0:	0e 94 83 02 	call	0x506	; 0x506 <detach_servo>
		}

	}
     3b4:	26 96       	adiw	r28, 0x06	; 6
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	cd bf       	out	0x3d, r28	; 61
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <attach_servo>:

	void attach_servo(Servo_Act* servo_) {
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
     3ce:	68 97       	sbiw	r28, 0x18	; 24
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	98 8f       	std	Y+24, r25	; 0x18
     3dc:	8f 8b       	std	Y+23, r24	; 0x17

		uint8_t buf[8];

		buf[0] = 'S'; 			// servo
     3de:	83 e5       	ldi	r24, 0x53	; 83
     3e0:	8f 87       	std	Y+15, r24	; 0x0f
		buf[1] = servo_->ID; 	// the ID
     3e2:	8f 89       	ldd	r24, Y+23	; 0x17
     3e4:	98 8d       	ldd	r25, Y+24	; 0x18
     3e6:	fc 01       	movw	r30, r24
     3e8:	80 81       	ld	r24, Z
     3ea:	88 8b       	std	Y+16, r24	; 0x10
		buf[2] = 'S';			// give heads up (status)
     3ec:	83 e5       	ldi	r24, 0x53	; 83
     3ee:	89 8b       	std	Y+17, r24	; 0x11
		buf[3] = 'A';			// attach
     3f0:	81 e4       	ldi	r24, 0x41	; 65
     3f2:	8a 8b       	std	Y+18, r24	; 0x12

		while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     3f4:	72 c0       	rjmp	.+228    	; 0x4da <attach_servo+0x114>
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	a8 e4       	ldi	r26, 0x48	; 72
     3fc:	b2 e4       	ldi	r27, 0x42	; 66
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	9a 83       	std	Y+2, r25	; 0x02
     402:	ab 83       	std	Y+3, r26	; 0x03
     404:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e4       	ldi	r19, 0x40	; 64
     40a:	4c e1       	ldi	r20, 0x1C	; 28
     40c:	55 e4       	ldi	r21, 0x45	; 69
     40e:	69 81       	ldd	r22, Y+1	; 0x01
     410:	7a 81       	ldd	r23, Y+2	; 0x02
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	9c 81       	ldd	r25, Y+4	; 0x04
     416:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     41a:	dc 01       	movw	r26, r24
     41c:	cb 01       	movw	r24, r22
     41e:	8d 83       	std	Y+5, r24	; 0x05
     420:	9e 83       	std	Y+6, r25	; 0x06
     422:	af 83       	std	Y+7, r26	; 0x07
     424:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e8       	ldi	r20, 0x80	; 128
     42c:	5f e3       	ldi	r21, 0x3F	; 63
     42e:	6d 81       	ldd	r22, Y+5	; 0x05
     430:	7e 81       	ldd	r23, Y+6	; 0x06
     432:	8f 81       	ldd	r24, Y+7	; 0x07
     434:	98 85       	ldd	r25, Y+8	; 0x08
     436:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
     43a:	88 23       	and	r24, r24
     43c:	2c f4       	brge	.+10     	; 0x448 <attach_servo+0x82>
		__ticks = 1;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	9a 87       	std	Y+10, r25	; 0x0a
     444:	89 87       	std	Y+9, r24	; 0x09
     446:	3f c0       	rjmp	.+126    	; 0x4c6 <attach_servo+0x100>
	else if (__tmp > 65535)
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	3f ef       	ldi	r19, 0xFF	; 255
     44c:	4f e7       	ldi	r20, 0x7F	; 127
     44e:	57 e4       	ldi	r21, 0x47	; 71
     450:	6d 81       	ldd	r22, Y+5	; 0x05
     452:	7e 81       	ldd	r23, Y+6	; 0x06
     454:	8f 81       	ldd	r24, Y+7	; 0x07
     456:	98 85       	ldd	r25, Y+8	; 0x08
     458:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
     45c:	18 16       	cp	r1, r24
     45e:	4c f5       	brge	.+82     	; 0x4b2 <attach_servo+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	40 e2       	ldi	r20, 0x20	; 32
     466:	51 e4       	ldi	r21, 0x41	; 65
     468:	69 81       	ldd	r22, Y+1	; 0x01
     46a:	7a 81       	ldd	r23, Y+2	; 0x02
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	9c 81       	ldd	r25, Y+4	; 0x04
     470:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     474:	dc 01       	movw	r26, r24
     476:	cb 01       	movw	r24, r22
     478:	bc 01       	movw	r22, r24
     47a:	cd 01       	movw	r24, r26
     47c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	9a 87       	std	Y+10, r25	; 0x0a
     486:	89 87       	std	Y+9, r24	; 0x09
     488:	0f c0       	rjmp	.+30     	; 0x4a8 <attach_servo+0xe2>
     48a:	8a ef       	ldi	r24, 0xFA	; 250
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	9c 87       	std	Y+12, r25	; 0x0c
     490:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     492:	8b 85       	ldd	r24, Y+11	; 0x0b
     494:	9c 85       	ldd	r25, Y+12	; 0x0c
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	f1 f7       	brne	.-4      	; 0x496 <attach_servo+0xd0>
     49a:	9c 87       	std	Y+12, r25	; 0x0c
     49c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     49e:	89 85       	ldd	r24, Y+9	; 0x09
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	9a 87       	std	Y+10, r25	; 0x0a
     4a6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4a8:	89 85       	ldd	r24, Y+9	; 0x09
     4aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ac:	89 2b       	or	r24, r25
     4ae:	69 f7       	brne	.-38     	; 0x48a <attach_servo+0xc4>
     4b0:	14 c0       	rjmp	.+40     	; 0x4da <attach_servo+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4b2:	6d 81       	ldd	r22, Y+5	; 0x05
     4b4:	7e 81       	ldd	r23, Y+6	; 0x06
     4b6:	8f 81       	ldd	r24, Y+7	; 0x07
     4b8:	98 85       	ldd	r25, Y+8	; 0x08
     4ba:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	9a 87       	std	Y+10, r25	; 0x0a
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	89 85       	ldd	r24, Y+9	; 0x09
     4c8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ca:	9e 87       	std	Y+14, r25	; 0x0e
     4cc:	8d 87       	std	Y+13, r24	; 0x0d
     4ce:	8d 85       	ldd	r24, Y+13	; 0x0d
     4d0:	9e 85       	ldd	r25, Y+14	; 0x0e
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <attach_servo+0x10c>
     4d6:	9e 87       	std	Y+14, r25	; 0x0e
     4d8:	8d 87       	std	Y+13, r24	; 0x0d
     4da:	ce 01       	movw	r24, r28
     4dc:	0f 96       	adiw	r24, 0x0f	; 15
     4de:	64 ed       	ldi	r22, 0xD4	; 212
     4e0:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
     4e4:	88 23       	and	r24, r24
     4e6:	09 f0       	breq	.+2      	; 0x4ea <attach_servo+0x124>
     4e8:	86 cf       	rjmp	.-244    	; 0x3f6 <attach_servo+0x30>
					_delay_ms(50);

		servo_->status = ATTACHED;
     4ea:	8f 89       	ldd	r24, Y+23	; 0x17
     4ec:	98 8d       	ldd	r25, Y+24	; 0x18
     4ee:	21 e0       	ldi	r18, 0x01	; 1
     4f0:	fc 01       	movw	r30, r24
     4f2:	22 83       	std	Z+2, r18	; 0x02

	}
     4f4:	68 96       	adiw	r28, 0x18	; 24
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <detach_servo>:

	void detach_servo(Servo_Act* servo_) {
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	68 97       	sbiw	r28, 0x18	; 24
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	98 8f       	std	Y+24, r25	; 0x18
     51c:	8f 8b       	std	Y+23, r24	; 0x17

		uint8_t buf[8];

		buf[0] = 'S'; 			// servo
     51e:	83 e5       	ldi	r24, 0x53	; 83
     520:	8f 87       	std	Y+15, r24	; 0x0f
		buf[1] = servo_->ID; 	// the ID
     522:	8f 89       	ldd	r24, Y+23	; 0x17
     524:	98 8d       	ldd	r25, Y+24	; 0x18
     526:	fc 01       	movw	r30, r24
     528:	80 81       	ld	r24, Z
     52a:	88 8b       	std	Y+16, r24	; 0x10
		buf[2] = 'S';			// give heads up (status)
     52c:	83 e5       	ldi	r24, 0x53	; 83
     52e:	89 8b       	std	Y+17, r24	; 0x11
		buf[3] = 'D';			// deattach
     530:	84 e4       	ldi	r24, 0x44	; 68
     532:	8a 8b       	std	Y+18, r24	; 0x12

		while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     534:	72 c0       	rjmp	.+228    	; 0x61a <detach_servo+0x114>
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	a8 e4       	ldi	r26, 0x48	; 72
     53c:	b2 e4       	ldi	r27, 0x42	; 66
     53e:	89 83       	std	Y+1, r24	; 0x01
     540:	9a 83       	std	Y+2, r25	; 0x02
     542:	ab 83       	std	Y+3, r26	; 0x03
     544:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e4       	ldi	r19, 0x40	; 64
     54a:	4c e1       	ldi	r20, 0x1C	; 28
     54c:	55 e4       	ldi	r21, 0x45	; 69
     54e:	69 81       	ldd	r22, Y+1	; 0x01
     550:	7a 81       	ldd	r23, Y+2	; 0x02
     552:	8b 81       	ldd	r24, Y+3	; 0x03
     554:	9c 81       	ldd	r25, Y+4	; 0x04
     556:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     55a:	dc 01       	movw	r26, r24
     55c:	cb 01       	movw	r24, r22
     55e:	8d 83       	std	Y+5, r24	; 0x05
     560:	9e 83       	std	Y+6, r25	; 0x06
     562:	af 83       	std	Y+7, r26	; 0x07
     564:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	40 e8       	ldi	r20, 0x80	; 128
     56c:	5f e3       	ldi	r21, 0x3F	; 63
     56e:	6d 81       	ldd	r22, Y+5	; 0x05
     570:	7e 81       	ldd	r23, Y+6	; 0x06
     572:	8f 81       	ldd	r24, Y+7	; 0x07
     574:	98 85       	ldd	r25, Y+8	; 0x08
     576:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
     57a:	88 23       	and	r24, r24
     57c:	2c f4       	brge	.+10     	; 0x588 <detach_servo+0x82>
		__ticks = 1;
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	9a 87       	std	Y+10, r25	; 0x0a
     584:	89 87       	std	Y+9, r24	; 0x09
     586:	3f c0       	rjmp	.+126    	; 0x606 <detach_servo+0x100>
	else if (__tmp > 65535)
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	3f ef       	ldi	r19, 0xFF	; 255
     58c:	4f e7       	ldi	r20, 0x7F	; 127
     58e:	57 e4       	ldi	r21, 0x47	; 71
     590:	6d 81       	ldd	r22, Y+5	; 0x05
     592:	7e 81       	ldd	r23, Y+6	; 0x06
     594:	8f 81       	ldd	r24, Y+7	; 0x07
     596:	98 85       	ldd	r25, Y+8	; 0x08
     598:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
     59c:	18 16       	cp	r1, r24
     59e:	4c f5       	brge	.+82     	; 0x5f2 <detach_servo+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	40 e2       	ldi	r20, 0x20	; 32
     5a6:	51 e4       	ldi	r21, 0x41	; 65
     5a8:	69 81       	ldd	r22, Y+1	; 0x01
     5aa:	7a 81       	ldd	r23, Y+2	; 0x02
     5ac:	8b 81       	ldd	r24, Y+3	; 0x03
     5ae:	9c 81       	ldd	r25, Y+4	; 0x04
     5b0:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	bc 01       	movw	r22, r24
     5ba:	cd 01       	movw	r24, r26
     5bc:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	9a 87       	std	Y+10, r25	; 0x0a
     5c6:	89 87       	std	Y+9, r24	; 0x09
     5c8:	0f c0       	rjmp	.+30     	; 0x5e8 <detach_servo+0xe2>
     5ca:	8a ef       	ldi	r24, 0xFA	; 250
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	9c 87       	std	Y+12, r25	; 0x0c
     5d0:	8b 87       	std	Y+11, r24	; 0x0b
     5d2:	8b 85       	ldd	r24, Y+11	; 0x0b
     5d4:	9c 85       	ldd	r25, Y+12	; 0x0c
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <detach_servo+0xd0>
     5da:	9c 87       	std	Y+12, r25	; 0x0c
     5dc:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5de:	89 85       	ldd	r24, Y+9	; 0x09
     5e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	9a 87       	std	Y+10, r25	; 0x0a
     5e6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5e8:	89 85       	ldd	r24, Y+9	; 0x09
     5ea:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ec:	89 2b       	or	r24, r25
     5ee:	69 f7       	brne	.-38     	; 0x5ca <detach_servo+0xc4>
     5f0:	14 c0       	rjmp	.+40     	; 0x61a <detach_servo+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5f2:	6d 81       	ldd	r22, Y+5	; 0x05
     5f4:	7e 81       	ldd	r23, Y+6	; 0x06
     5f6:	8f 81       	ldd	r24, Y+7	; 0x07
     5f8:	98 85       	ldd	r25, Y+8	; 0x08
     5fa:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     5fe:	dc 01       	movw	r26, r24
     600:	cb 01       	movw	r24, r22
     602:	9a 87       	std	Y+10, r25	; 0x0a
     604:	89 87       	std	Y+9, r24	; 0x09
     606:	89 85       	ldd	r24, Y+9	; 0x09
     608:	9a 85       	ldd	r25, Y+10	; 0x0a
     60a:	9e 87       	std	Y+14, r25	; 0x0e
     60c:	8d 87       	std	Y+13, r24	; 0x0d
     60e:	8d 85       	ldd	r24, Y+13	; 0x0d
     610:	9e 85       	ldd	r25, Y+14	; 0x0e
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <detach_servo+0x10c>
     616:	9e 87       	std	Y+14, r25	; 0x0e
     618:	8d 87       	std	Y+13, r24	; 0x0d
     61a:	ce 01       	movw	r24, r28
     61c:	0f 96       	adiw	r24, 0x0f	; 15
     61e:	64 ed       	ldi	r22, 0xD4	; 212
     620:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
     624:	88 23       	and	r24, r24
     626:	09 f0       	breq	.+2      	; 0x62a <detach_servo+0x124>
     628:	86 cf       	rjmp	.-244    	; 0x536 <detach_servo+0x30>
					_delay_ms(50);

		servo_->status = DATTACHED;
     62a:	8f 89       	ldd	r24, Y+23	; 0x17
     62c:	98 8d       	ldd	r25, Y+24	; 0x18
     62e:	fc 01       	movw	r30, r24
     630:	12 82       	std	Z+2, r1	; 0x02
	}
     632:	68 96       	adiw	r28, 0x18	; 24
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <act_relay>:

void act_relay(Relay_Act* relay_info) {
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	68 97       	sbiw	r28, 0x18	; 24
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
     658:	98 8f       	std	Y+24, r25	; 0x18
     65a:	8f 8b       	std	Y+23, r24	; 0x17

	//relay_info.status = WAITING;

	uint8_t buf[8];

	buf[0] = 'R';
     65c:	82 e5       	ldi	r24, 0x52	; 82
     65e:	8f 87       	std	Y+15, r24	; 0x0f
	buf[1] = relay_info->ID;
     660:	8f 89       	ldd	r24, Y+23	; 0x17
     662:	98 8d       	ldd	r25, Y+24	; 0x18
     664:	fc 01       	movw	r30, r24
     666:	80 81       	ld	r24, Z
     668:	88 8b       	std	Y+16, r24	; 0x10
	buf[2] = relay_info->state;
     66a:	8f 89       	ldd	r24, Y+23	; 0x17
     66c:	98 8d       	ldd	r25, Y+24	; 0x18
     66e:	fc 01       	movw	r30, r24
     670:	81 81       	ldd	r24, Z+1	; 0x01
     672:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     674:	72 c0       	rjmp	.+228    	; 0x75a <act_relay+0x116>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	a8 e4       	ldi	r26, 0x48	; 72
     67c:	b2 e4       	ldi	r27, 0x42	; 66
     67e:	89 83       	std	Y+1, r24	; 0x01
     680:	9a 83       	std	Y+2, r25	; 0x02
     682:	ab 83       	std	Y+3, r26	; 0x03
     684:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e4       	ldi	r19, 0x40	; 64
     68a:	4c e1       	ldi	r20, 0x1C	; 28
     68c:	55 e4       	ldi	r21, 0x45	; 69
     68e:	69 81       	ldd	r22, Y+1	; 0x01
     690:	7a 81       	ldd	r23, Y+2	; 0x02
     692:	8b 81       	ldd	r24, Y+3	; 0x03
     694:	9c 81       	ldd	r25, Y+4	; 0x04
     696:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     69a:	dc 01       	movw	r26, r24
     69c:	cb 01       	movw	r24, r22
     69e:	8d 83       	std	Y+5, r24	; 0x05
     6a0:	9e 83       	std	Y+6, r25	; 0x06
     6a2:	af 83       	std	Y+7, r26	; 0x07
     6a4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e8       	ldi	r20, 0x80	; 128
     6ac:	5f e3       	ldi	r21, 0x3F	; 63
     6ae:	6d 81       	ldd	r22, Y+5	; 0x05
     6b0:	7e 81       	ldd	r23, Y+6	; 0x06
     6b2:	8f 81       	ldd	r24, Y+7	; 0x07
     6b4:	98 85       	ldd	r25, Y+8	; 0x08
     6b6:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
     6ba:	88 23       	and	r24, r24
     6bc:	2c f4       	brge	.+10     	; 0x6c8 <act_relay+0x84>
		__ticks = 1;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	9a 87       	std	Y+10, r25	; 0x0a
     6c4:	89 87       	std	Y+9, r24	; 0x09
     6c6:	3f c0       	rjmp	.+126    	; 0x746 <act_relay+0x102>
	else if (__tmp > 65535)
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	3f ef       	ldi	r19, 0xFF	; 255
     6cc:	4f e7       	ldi	r20, 0x7F	; 127
     6ce:	57 e4       	ldi	r21, 0x47	; 71
     6d0:	6d 81       	ldd	r22, Y+5	; 0x05
     6d2:	7e 81       	ldd	r23, Y+6	; 0x06
     6d4:	8f 81       	ldd	r24, Y+7	; 0x07
     6d6:	98 85       	ldd	r25, Y+8	; 0x08
     6d8:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
     6dc:	18 16       	cp	r1, r24
     6de:	4c f5       	brge	.+82     	; 0x732 <act_relay+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e2       	ldi	r20, 0x20	; 32
     6e6:	51 e4       	ldi	r21, 0x41	; 65
     6e8:	69 81       	ldd	r22, Y+1	; 0x01
     6ea:	7a 81       	ldd	r23, Y+2	; 0x02
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	9c 81       	ldd	r25, Y+4	; 0x04
     6f0:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     6f4:	dc 01       	movw	r26, r24
     6f6:	cb 01       	movw	r24, r22
     6f8:	bc 01       	movw	r22, r24
     6fa:	cd 01       	movw	r24, r26
     6fc:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     700:	dc 01       	movw	r26, r24
     702:	cb 01       	movw	r24, r22
     704:	9a 87       	std	Y+10, r25	; 0x0a
     706:	89 87       	std	Y+9, r24	; 0x09
     708:	0f c0       	rjmp	.+30     	; 0x728 <act_relay+0xe4>
     70a:	8a ef       	ldi	r24, 0xFA	; 250
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	9c 87       	std	Y+12, r25	; 0x0c
     710:	8b 87       	std	Y+11, r24	; 0x0b
     712:	8b 85       	ldd	r24, Y+11	; 0x0b
     714:	9c 85       	ldd	r25, Y+12	; 0x0c
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <act_relay+0xd2>
     71a:	9c 87       	std	Y+12, r25	; 0x0c
     71c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     71e:	89 85       	ldd	r24, Y+9	; 0x09
     720:	9a 85       	ldd	r25, Y+10	; 0x0a
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	9a 87       	std	Y+10, r25	; 0x0a
     726:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     728:	89 85       	ldd	r24, Y+9	; 0x09
     72a:	9a 85       	ldd	r25, Y+10	; 0x0a
     72c:	89 2b       	or	r24, r25
     72e:	69 f7       	brne	.-38     	; 0x70a <act_relay+0xc6>
     730:	14 c0       	rjmp	.+40     	; 0x75a <act_relay+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     732:	6d 81       	ldd	r22, Y+5	; 0x05
     734:	7e 81       	ldd	r23, Y+6	; 0x06
     736:	8f 81       	ldd	r24, Y+7	; 0x07
     738:	98 85       	ldd	r25, Y+8	; 0x08
     73a:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     73e:	dc 01       	movw	r26, r24
     740:	cb 01       	movw	r24, r22
     742:	9a 87       	std	Y+10, r25	; 0x0a
     744:	89 87       	std	Y+9, r24	; 0x09
     746:	89 85       	ldd	r24, Y+9	; 0x09
     748:	9a 85       	ldd	r25, Y+10	; 0x0a
     74a:	9e 87       	std	Y+14, r25	; 0x0e
     74c:	8d 87       	std	Y+13, r24	; 0x0d
     74e:	8d 85       	ldd	r24, Y+13	; 0x0d
     750:	9e 85       	ldd	r25, Y+14	; 0x0e
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	f1 f7       	brne	.-4      	; 0x752 <act_relay+0x10e>
     756:	9e 87       	std	Y+14, r25	; 0x0e
     758:	8d 87       	std	Y+13, r24	; 0x0d
     75a:	ce 01       	movw	r24, r28
     75c:	0f 96       	adiw	r24, 0x0f	; 15
     75e:	64 ed       	ldi	r22, 0xD4	; 212
     760:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
     764:	88 23       	and	r24, r24
     766:	09 f0       	breq	.+2      	; 0x76a <act_relay+0x126>
     768:	86 cf       	rjmp	.-244    	; 0x676 <act_relay+0x32>
				_delay_ms(50);

}
     76a:	68 96       	adiw	r28, 0x18	; 24
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	de bf       	out	0x3e, r29	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	cd bf       	out	0x3d, r28	; 61
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <act_mosfet>:

void act_mosfet(Mosfet_Act* mosfet_info) {
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	68 97       	sbiw	r28, 0x18	; 24
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	98 8f       	std	Y+24, r25	; 0x18
     792:	8f 8b       	std	Y+23, r24	; 0x17

	uint8_t buf[8];

	buf[0] = 'M';
     794:	8d e4       	ldi	r24, 0x4D	; 77
     796:	8f 87       	std	Y+15, r24	; 0x0f
	buf[1] = mosfet_info->ID;
     798:	8f 89       	ldd	r24, Y+23	; 0x17
     79a:	98 8d       	ldd	r25, Y+24	; 0x18
     79c:	fc 01       	movw	r30, r24
     79e:	80 81       	ld	r24, Z
     7a0:	88 8b       	std	Y+16, r24	; 0x10
	buf[2] = mosfet_info->state;
     7a2:	8f 89       	ldd	r24, Y+23	; 0x17
     7a4:	98 8d       	ldd	r25, Y+24	; 0x18
     7a6:	fc 01       	movw	r30, r24
     7a8:	81 81       	ldd	r24, Z+1	; 0x01
     7aa:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     7ac:	72 c0       	rjmp	.+228    	; 0x892 <act_mosfet+0x116>
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	a8 e4       	ldi	r26, 0x48	; 72
     7b4:	b2 e4       	ldi	r27, 0x42	; 66
     7b6:	89 83       	std	Y+1, r24	; 0x01
     7b8:	9a 83       	std	Y+2, r25	; 0x02
     7ba:	ab 83       	std	Y+3, r26	; 0x03
     7bc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e4       	ldi	r19, 0x40	; 64
     7c2:	4c e1       	ldi	r20, 0x1C	; 28
     7c4:	55 e4       	ldi	r21, 0x45	; 69
     7c6:	69 81       	ldd	r22, Y+1	; 0x01
     7c8:	7a 81       	ldd	r23, Y+2	; 0x02
     7ca:	8b 81       	ldd	r24, Y+3	; 0x03
     7cc:	9c 81       	ldd	r25, Y+4	; 0x04
     7ce:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     7d2:	dc 01       	movw	r26, r24
     7d4:	cb 01       	movw	r24, r22
     7d6:	8d 83       	std	Y+5, r24	; 0x05
     7d8:	9e 83       	std	Y+6, r25	; 0x06
     7da:	af 83       	std	Y+7, r26	; 0x07
     7dc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	40 e8       	ldi	r20, 0x80	; 128
     7e4:	5f e3       	ldi	r21, 0x3F	; 63
     7e6:	6d 81       	ldd	r22, Y+5	; 0x05
     7e8:	7e 81       	ldd	r23, Y+6	; 0x06
     7ea:	8f 81       	ldd	r24, Y+7	; 0x07
     7ec:	98 85       	ldd	r25, Y+8	; 0x08
     7ee:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
     7f2:	88 23       	and	r24, r24
     7f4:	2c f4       	brge	.+10     	; 0x800 <act_mosfet+0x84>
		__ticks = 1;
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	9a 87       	std	Y+10, r25	; 0x0a
     7fc:	89 87       	std	Y+9, r24	; 0x09
     7fe:	3f c0       	rjmp	.+126    	; 0x87e <act_mosfet+0x102>
	else if (__tmp > 65535)
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	3f ef       	ldi	r19, 0xFF	; 255
     804:	4f e7       	ldi	r20, 0x7F	; 127
     806:	57 e4       	ldi	r21, 0x47	; 71
     808:	6d 81       	ldd	r22, Y+5	; 0x05
     80a:	7e 81       	ldd	r23, Y+6	; 0x06
     80c:	8f 81       	ldd	r24, Y+7	; 0x07
     80e:	98 85       	ldd	r25, Y+8	; 0x08
     810:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
     814:	18 16       	cp	r1, r24
     816:	4c f5       	brge	.+82     	; 0x86a <act_mosfet+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	40 e2       	ldi	r20, 0x20	; 32
     81e:	51 e4       	ldi	r21, 0x41	; 65
     820:	69 81       	ldd	r22, Y+1	; 0x01
     822:	7a 81       	ldd	r23, Y+2	; 0x02
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	9c 81       	ldd	r25, Y+4	; 0x04
     828:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     82c:	dc 01       	movw	r26, r24
     82e:	cb 01       	movw	r24, r22
     830:	bc 01       	movw	r22, r24
     832:	cd 01       	movw	r24, r26
     834:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	9a 87       	std	Y+10, r25	; 0x0a
     83e:	89 87       	std	Y+9, r24	; 0x09
     840:	0f c0       	rjmp	.+30     	; 0x860 <act_mosfet+0xe4>
     842:	8a ef       	ldi	r24, 0xFA	; 250
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	9c 87       	std	Y+12, r25	; 0x0c
     848:	8b 87       	std	Y+11, r24	; 0x0b
     84a:	8b 85       	ldd	r24, Y+11	; 0x0b
     84c:	9c 85       	ldd	r25, Y+12	; 0x0c
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <act_mosfet+0xd2>
     852:	9c 87       	std	Y+12, r25	; 0x0c
     854:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     856:	89 85       	ldd	r24, Y+9	; 0x09
     858:	9a 85       	ldd	r25, Y+10	; 0x0a
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	9a 87       	std	Y+10, r25	; 0x0a
     85e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     860:	89 85       	ldd	r24, Y+9	; 0x09
     862:	9a 85       	ldd	r25, Y+10	; 0x0a
     864:	89 2b       	or	r24, r25
     866:	69 f7       	brne	.-38     	; 0x842 <act_mosfet+0xc6>
     868:	14 c0       	rjmp	.+40     	; 0x892 <act_mosfet+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     86a:	6d 81       	ldd	r22, Y+5	; 0x05
     86c:	7e 81       	ldd	r23, Y+6	; 0x06
     86e:	8f 81       	ldd	r24, Y+7	; 0x07
     870:	98 85       	ldd	r25, Y+8	; 0x08
     872:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     876:	dc 01       	movw	r26, r24
     878:	cb 01       	movw	r24, r22
     87a:	9a 87       	std	Y+10, r25	; 0x0a
     87c:	89 87       	std	Y+9, r24	; 0x09
     87e:	89 85       	ldd	r24, Y+9	; 0x09
     880:	9a 85       	ldd	r25, Y+10	; 0x0a
     882:	9e 87       	std	Y+14, r25	; 0x0e
     884:	8d 87       	std	Y+13, r24	; 0x0d
     886:	8d 85       	ldd	r24, Y+13	; 0x0d
     888:	9e 85       	ldd	r25, Y+14	; 0x0e
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	f1 f7       	brne	.-4      	; 0x88a <act_mosfet+0x10e>
     88e:	9e 87       	std	Y+14, r25	; 0x0e
     890:	8d 87       	std	Y+13, r24	; 0x0d
     892:	ce 01       	movw	r24, r28
     894:	0f 96       	adiw	r24, 0x0f	; 15
     896:	64 ed       	ldi	r22, 0xD4	; 212
     898:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
     89c:	88 23       	and	r24, r24
     89e:	09 f0       	breq	.+2      	; 0x8a2 <act_mosfet+0x126>
     8a0:	86 cf       	rjmp	.-244    	; 0x7ae <act_mosfet+0x32>
				_delay_ms(50);

}
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <AX_UART_Init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "ax.h"

void AX_UART_Init(void)
{
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	cd b7       	in	r28, 0x3d	; 61
     8ba:	de b7       	in	r29, 0x3e	; 62
     8bc:	2e 97       	sbiw	r28, 0x0e	; 14
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	cd bf       	out	0x3d, r28	; 61
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRD &= ~((1 << 2) | (1 << 3));
     8c8:	8a e2       	ldi	r24, 0x2A	; 42
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	2a e2       	ldi	r18, 0x2A	; 42
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	f9 01       	movw	r30, r18
     8d2:	20 81       	ld	r18, Z
     8d4:	23 7f       	andi	r18, 0xF3	; 243
     8d6:	fc 01       	movw	r30, r24
     8d8:	20 83       	st	Z, r18
	//PORTE = 0;
	UCSR1A = 0;
     8da:	88 ec       	ldi	r24, 0xC8	; 200
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	fc 01       	movw	r30, r24
     8e0:	10 82       	st	Z, r1
	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
     8e2:	89 ec       	ldi	r24, 0xC9	; 201
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	28 e1       	ldi	r18, 0x18	; 24
     8e8:	fc 01       	movw	r30, r24
     8ea:	20 83       	st	Z, r18
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
     8ec:	8a ec       	ldi	r24, 0xCA	; 202
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	26 e0       	ldi	r18, 0x06	; 6
     8f2:	fc 01       	movw	r30, r24
     8f4:	20 83       	st	Z, r18

	UBRR1H = 0;
     8f6:	8d ec       	ldi	r24, 0xCD	; 205
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	fc 01       	movw	r30, r24
     8fc:	10 82       	st	Z, r1
	UBRR1L = 5;
     8fe:	8c ec       	ldi	r24, 0xCC	; 204
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	25 e0       	ldi	r18, 0x05	; 5
     904:	fc 01       	movw	r30, r24
     906:	20 83       	st	Z, r18
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a8 ec       	ldi	r26, 0xC8	; 200
     90e:	b2 e4       	ldi	r27, 0x42	; 66
     910:	89 83       	std	Y+1, r24	; 0x01
     912:	9a 83       	std	Y+2, r25	; 0x02
     914:	ab 83       	std	Y+3, r26	; 0x03
     916:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e4       	ldi	r19, 0x40	; 64
     91c:	4c e1       	ldi	r20, 0x1C	; 28
     91e:	55 e4       	ldi	r21, 0x45	; 69
     920:	69 81       	ldd	r22, Y+1	; 0x01
     922:	7a 81       	ldd	r23, Y+2	; 0x02
     924:	8b 81       	ldd	r24, Y+3	; 0x03
     926:	9c 81       	ldd	r25, Y+4	; 0x04
     928:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 83       	std	Y+5, r24	; 0x05
     932:	9e 83       	std	Y+6, r25	; 0x06
     934:	af 83       	std	Y+7, r26	; 0x07
     936:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	40 e8       	ldi	r20, 0x80	; 128
     93e:	5f e3       	ldi	r21, 0x3F	; 63
     940:	6d 81       	ldd	r22, Y+5	; 0x05
     942:	7e 81       	ldd	r23, Y+6	; 0x06
     944:	8f 81       	ldd	r24, Y+7	; 0x07
     946:	98 85       	ldd	r25, Y+8	; 0x08
     948:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <AX_UART_Init+0xa6>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9a 87       	std	Y+10, r25	; 0x0a
     956:	89 87       	std	Y+9, r24	; 0x09
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <AX_UART_Init+0x124>
	else if (__tmp > 65535)
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	3f ef       	ldi	r19, 0xFF	; 255
     95e:	4f e7       	ldi	r20, 0x7F	; 127
     960:	57 e4       	ldi	r21, 0x47	; 71
     962:	6d 81       	ldd	r22, Y+5	; 0x05
     964:	7e 81       	ldd	r23, Y+6	; 0x06
     966:	8f 81       	ldd	r24, Y+7	; 0x07
     968:	98 85       	ldd	r25, Y+8	; 0x08
     96a:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <AX_UART_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	40 e2       	ldi	r20, 0x20	; 32
     978:	51 e4       	ldi	r21, 0x41	; 65
     97a:	69 81       	ldd	r22, Y+1	; 0x01
     97c:	7a 81       	ldd	r23, Y+2	; 0x02
     97e:	8b 81       	ldd	r24, Y+3	; 0x03
     980:	9c 81       	ldd	r25, Y+4	; 0x04
     982:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9a 87       	std	Y+10, r25	; 0x0a
     998:	89 87       	std	Y+9, r24	; 0x09
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <AX_UART_Init+0x106>
     99c:	8a ef       	ldi	r24, 0xFA	; 250
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	9c 87       	std	Y+12, r25	; 0x0c
     9a2:	8b 87       	std	Y+11, r24	; 0x0b
     9a4:	8b 85       	ldd	r24, Y+11	; 0x0b
     9a6:	9c 85       	ldd	r25, Y+12	; 0x0c
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <AX_UART_Init+0xf4>
     9ac:	9c 87       	std	Y+12, r25	; 0x0c
     9ae:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	89 85       	ldd	r24, Y+9	; 0x09
     9b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9a 87       	std	Y+10, r25	; 0x0a
     9b8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	89 85       	ldd	r24, Y+9	; 0x09
     9bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     9be:	89 2b       	or	r24, r25
     9c0:	69 f7       	brne	.-38     	; 0x99c <AX_UART_Init+0xe8>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <AX_UART_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 81       	ldd	r22, Y+5	; 0x05
     9c6:	7e 81       	ldd	r23, Y+6	; 0x06
     9c8:	8f 81       	ldd	r24, Y+7	; 0x07
     9ca:	98 85       	ldd	r25, Y+8	; 0x08
     9cc:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9a 87       	std	Y+10, r25	; 0x0a
     9d6:	89 87       	std	Y+9, r24	; 0x09
     9d8:	89 85       	ldd	r24, Y+9	; 0x09
     9da:	9a 85       	ldd	r25, Y+10	; 0x0a
     9dc:	9e 87       	std	Y+14, r25	; 0x0e
     9de:	8d 87       	std	Y+13, r24	; 0x0d
     9e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     9e2:	9e 85       	ldd	r25, Y+14	; 0x0e
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <AX_UART_Init+0x130>
     9e8:	9e 87       	std	Y+14, r25	; 0x0e
     9ea:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);
}
     9ec:	2e 96       	adiw	r28, 0x0e	; 14
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	08 95       	ret

000009fe <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	1f 92       	push	r1
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
     a08:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1<<UDRE1)) );
     a0a:	00 00       	nop
     a0c:	88 ec       	ldi	r24, 0xC8	; 200
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	fc 01       	movw	r30, r24
     a12:	80 81       	ld	r24, Z
     a14:	88 2f       	mov	r24, r24
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	80 72       	andi	r24, 0x20	; 32
     a1a:	99 27       	eor	r25, r25
     a1c:	89 2b       	or	r24, r25
     a1e:	b1 f3       	breq	.-20     	; 0xa0c <AX_SendChar+0xe>
	UDR1 = data;
     a20:	8e ec       	ldi	r24, 0xCE	; 206
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	29 81       	ldd	r18, Y+1	; 0x01
     a26:	fc 01       	movw	r30, r24
     a28:	20 83       	st	Z, r18
}
     a2a:	0f 90       	pop	r0
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <AX_ReadChar>:
unsigned char AX_ReadChar(void)
{
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
   //UART1_Write('I');
   while( !( UCSR1A & (1<< RXC1)) );
     a3a:	00 00       	nop
     a3c:	88 ec       	ldi	r24, 0xC8	; 200
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	fc 01       	movw	r30, r24
     a42:	80 81       	ld	r24, Z
     a44:	88 23       	and	r24, r24
     a46:	d4 f7       	brge	.-12     	; 0xa3c <AX_ReadChar+0xa>
   return UDR1;
     a48:	8e ec       	ldi	r24, 0xCE	; 206
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	fc 01       	movw	r30, r24
     a4e:	80 81       	ld	r24, Z
}
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	08 95       	ret

00000a56 <AX_ReadStatus>:
/*************************************************************************************************************************************************************************************
*															 Funkcije za upravljanje AX-12A servoima                                                                                                                                      *
*************************************************************************************************************************************************************************************/

void AX_ReadStatus(void)
{
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
     a5e:	27 97       	sbiw	r28, 0x07	; 7
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	f8 94       	cli
     a64:	de bf       	out	0x3e, r29	; 62
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	cd bf       	out	0x3d, r28	; 61
	 unsigned char status[7] = {0,0,0,0,0,0};
     a6a:	27 e0       	ldi	r18, 0x07	; 7
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	fc 01       	movw	r30, r24
     a72:	32 2f       	mov	r19, r18
     a74:	11 92       	st	Z+, r1
     a76:	3a 95       	dec	r19
     a78:	e9 f7       	brne	.-6      	; 0xa74 <AX_ReadStatus+0x1e>

	status[0] = AX_ReadChar();
     a7a:	0e 94 19 05 	call	0xa32	; 0xa32 <AX_ReadChar>
     a7e:	89 83       	std	Y+1, r24	; 0x01
	status[1] = AX_ReadChar();
     a80:	0e 94 19 05 	call	0xa32	; 0xa32 <AX_ReadChar>
     a84:	8a 83       	std	Y+2, r24	; 0x02
	status[2] = AX_ReadChar();
     a86:	0e 94 19 05 	call	0xa32	; 0xa32 <AX_ReadChar>
     a8a:	8b 83       	std	Y+3, r24	; 0x03
	status[3] = AX_ReadChar();
     a8c:	0e 94 19 05 	call	0xa32	; 0xa32 <AX_ReadChar>
     a90:	8c 83       	std	Y+4, r24	; 0x04
	status[4] = AX_ReadChar();
     a92:	0e 94 19 05 	call	0xa32	; 0xa32 <AX_ReadChar>
     a96:	8d 83       	std	Y+5, r24	; 0x05
	status[5] = AX_ReadChar();
     a98:	0e 94 19 05 	call	0xa32	; 0xa32 <AX_ReadChar>
     a9c:	8e 83       	std	Y+6, r24	; 0x06
}
     a9e:	27 96       	adiw	r28, 0x07	; 7
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	de bf       	out	0x3e, r29	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	cd bf       	out	0x3d, r28	; 61
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	08 95       	ret

00000ab0 <AX_StopTransmitter>:

void AX_StopTransmitter(void)
{
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
	while( !(UCSR1A & (1<<TXC1)) );
     ab8:	00 00       	nop
     aba:	88 ec       	ldi	r24, 0xC8	; 200
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	fc 01       	movw	r30, r24
     ac0:	80 81       	ld	r24, Z
     ac2:	88 2f       	mov	r24, r24
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	80 74       	andi	r24, 0x40	; 64
     ac8:	99 27       	eor	r25, r25
     aca:	89 2b       	or	r24, r25
     acc:	b1 f3       	breq	.-20     	; 0xaba <AX_StopTransmitter+0xa>
	UCSR1B &= 0xF7;
     ace:	89 ec       	ldi	r24, 0xC9	; 201
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	29 ec       	ldi	r18, 0xC9	; 201
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	f9 01       	movw	r30, r18
     ad8:	20 81       	ld	r18, Z
     ada:	27 7f       	andi	r18, 0xF7	; 247
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18
	UCSR1A |= 0x40;
     ae0:	88 ec       	ldi	r24, 0xC8	; 200
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	28 ec       	ldi	r18, 0xC8	; 200
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	f9 01       	movw	r30, r18
     aea:	20 81       	ld	r18, Z
     aec:	20 64       	ori	r18, 0x40	; 64
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18
}
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x08;
     b00:	89 ec       	ldi	r24, 0xC9	; 201
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	29 ec       	ldi	r18, 0xC9	; 201
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	f9 01       	movw	r30, r18
     b0a:	20 81       	ld	r18, Z
     b0c:	28 60       	ori	r18, 0x08	; 8
     b0e:	fc 01       	movw	r30, r24
     b10:	20 83       	st	Z, r18
}
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <AX_StopReceiver>:

void AX_StopReceiver(void)
{
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
	UCSR1B &= 0xEF;
     b20:	89 ec       	ldi	r24, 0xC9	; 201
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	29 ec       	ldi	r18, 0xC9	; 201
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	f9 01       	movw	r30, r18
     b2a:	20 81       	ld	r18, Z
     b2c:	2f 7e       	andi	r18, 0xEF	; 239
     b2e:	fc 01       	movw	r30, r24
     b30:	20 83       	st	Z, r18
}
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x10;
     b40:	89 ec       	ldi	r24, 0xC9	; 201
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	29 ec       	ldi	r18, 0xC9	; 201
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	f9 01       	movw	r30, r18
     b4a:	20 81       	ld	r18, Z
     b4c:	20 61       	ori	r18, 0x10	; 16
     b4e:	fc 01       	movw	r30, r24
     b50:	20 83       	st	Z, r18
}
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	6a 97       	sbiw	r28, 0x1a	; 26
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	9e 8b       	std	Y+22, r25	; 0x16
     b6e:	8d 8b       	std	Y+21, r24	; 0x15
     b70:	78 8f       	std	Y+24, r23	; 0x18
     b72:	6f 8b       	std	Y+23, r22	; 0x17
     b74:	49 8f       	std	Y+25, r20	; 0x19
     b76:	2a 8f       	std	Y+26, r18	; 0x1a
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;

	angle = (unsigned int)(1023 *((double)angle/300.0));
     b78:	8d 89       	ldd	r24, Y+21	; 0x15
     b7a:	9e 89       	ldd	r25, Y+22	; 0x16
     b7c:	cc 01       	movw	r24, r24
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	bc 01       	movw	r22, r24
     b84:	cd 01       	movw	r24, r26
     b86:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__floatunsisf>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	20 e0       	ldi	r18, 0x00	; 0
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	46 e9       	ldi	r20, 0x96	; 150
     b94:	53 e4       	ldi	r21, 0x43	; 67
     b96:	bc 01       	movw	r22, r24
     b98:	cd 01       	movw	r24, r26
     b9a:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <__divsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 ec       	ldi	r19, 0xC0	; 192
     ba6:	4f e7       	ldi	r20, 0x7F	; 127
     ba8:	54 e4       	ldi	r21, 0x44	; 68
     baa:	bc 01       	movw	r22, r24
     bac:	cd 01       	movw	r24, r26
     bae:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	bc 01       	movw	r22, r24
     bb8:	cd 01       	movw	r24, r26
     bba:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
     bc2:	9e 8b       	std	Y+22, r25	; 0x16
     bc4:	8d 8b       	std	Y+21, r24	; 0x15

	angle_H = (unsigned char)(angle >> 8);
     bc6:	8d 89       	ldd	r24, Y+21	; 0x15
     bc8:	9e 89       	ldd	r25, Y+22	; 0x16
     bca:	89 2f       	mov	r24, r25
     bcc:	99 27       	eor	r25, r25
     bce:	89 83       	std	Y+1, r24	; 0x01
	angle_L = (unsigned char)(angle & 0x00FF);
     bd0:	8d 89       	ldd	r24, Y+21	; 0x15
     bd2:	8a 83       	std	Y+2, r24	; 0x02

	speed |= (direction << 10);
     bd4:	89 8d       	ldd	r24, Y+25	; 0x19
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	98 2f       	mov	r25, r24
     bdc:	88 27       	eor	r24, r24
     bde:	99 0f       	add	r25, r25
     be0:	99 0f       	add	r25, r25
     be2:	9c 01       	movw	r18, r24
     be4:	8f 89       	ldd	r24, Y+23	; 0x17
     be6:	98 8d       	ldd	r25, Y+24	; 0x18
     be8:	82 2b       	or	r24, r18
     bea:	93 2b       	or	r25, r19
     bec:	98 8f       	std	Y+24, r25	; 0x18
     bee:	8f 8b       	std	Y+23, r24	; 0x17
	speed_H = (unsigned char)(speed >> 8);
     bf0:	8f 89       	ldd	r24, Y+23	; 0x17
     bf2:	98 8d       	ldd	r25, Y+24	; 0x18
     bf4:	89 2f       	mov	r24, r25
     bf6:	99 27       	eor	r25, r25
     bf8:	8b 83       	std	Y+3, r24	; 0x03
	speed_L = (unsigned char)(speed & 0x00FF);
     bfa:	8f 89       	ldd	r24, Y+23	; 0x17
     bfc:	8c 83       	std	Y+4, r24	; 0x04

	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
     bfe:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	9c 01       	movw	r18, r24
     c06:	28 5d       	subi	r18, 0xD8	; 216
     c08:	3f 4f       	sbci	r19, 0xFF	; 255
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	88 2f       	mov	r24, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	28 0f       	add	r18, r24
     c12:	39 1f       	adc	r19, r25
     c14:	8c 81       	ldd	r24, Y+4	; 0x04
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	28 0f       	add	r18, r24
     c1c:	39 1f       	adc	r19, r25
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	88 2f       	mov	r24, r24
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	28 0f       	add	r18, r24
     c26:	39 1f       	adc	r19, r25
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	82 0f       	add	r24, r18
     c30:	93 1f       	adc	r25, r19
     c32:	80 95       	com	r24
     c34:	90 95       	com	r25
     c36:	9e 83       	std	Y+6, r25	; 0x06
     c38:	8d 83       	std	Y+5, r24	; 0x05

	AX_StopReceiver();
     c3a:	0e 94 8c 05 	call	0xb18	; 0xb18 <AX_StopReceiver>

	AX_SendChar(START);
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(START);
     c44:	8f ef       	ldi	r24, 0xFF	; 255
     c46:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(id);
     c4a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c4c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(LENGTH);
     c50:	87 e0       	ldi	r24, 0x07	; 7
     c52:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(INSTR);
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(ADDRESS);
     c5c:	8e e1       	ldi	r24, 0x1E	; 30
     c5e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(angle_L);
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(angle_H);
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(speed_L);
     c6e:	8c 81       	ldd	r24, Y+4	; 0x04
     c70:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(speed_H);
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(checksum);
     c7a:	8d 81       	ldd	r24, Y+5	; 0x05
     c7c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>

	AX_StopTransmitter();
     c80:	0e 94 58 05 	call	0xab0	; 0xab0 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     c84:	0e 94 9c 05 	call	0xb38	; 0xb38 <AX_ReleaseReceiver>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a8 e4       	ldi	r26, 0x48	; 72
     c8e:	b2 e4       	ldi	r27, 0x42	; 66
     c90:	8f 83       	std	Y+7, r24	; 0x07
     c92:	98 87       	std	Y+8, r25	; 0x08
     c94:	a9 87       	std	Y+9, r26	; 0x09
     c96:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e4       	ldi	r19, 0x40	; 64
     c9c:	4c e1       	ldi	r20, 0x1C	; 28
     c9e:	55 e4       	ldi	r21, 0x45	; 69
     ca0:	6f 81       	ldd	r22, Y+7	; 0x07
     ca2:	78 85       	ldd	r23, Y+8	; 0x08
     ca4:	89 85       	ldd	r24, Y+9	; 0x09
     ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca8:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	8b 87       	std	Y+11, r24	; 0x0b
     cb2:	9c 87       	std	Y+12, r25	; 0x0c
     cb4:	ad 87       	std	Y+13, r26	; 0x0d
     cb6:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 e8       	ldi	r20, 0x80	; 128
     cbe:	5f e3       	ldi	r21, 0x3F	; 63
     cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc8:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
     ccc:	88 23       	and	r24, r24
     cce:	2c f4       	brge	.+10     	; 0xcda <AX_SetAngle+0x182>
		__ticks = 1;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	98 8b       	std	Y+16, r25	; 0x10
     cd6:	8f 87       	std	Y+15, r24	; 0x0f
     cd8:	3f c0       	rjmp	.+126    	; 0xd58 <AX_SetAngle+0x200>
	else if (__tmp > 65535)
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	3f ef       	ldi	r19, 0xFF	; 255
     cde:	4f e7       	ldi	r20, 0x7F	; 127
     ce0:	57 e4       	ldi	r21, 0x47	; 71
     ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cea:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
     cee:	18 16       	cp	r1, r24
     cf0:	4c f5       	brge	.+82     	; 0xd44 <AX_SetAngle+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e2       	ldi	r20, 0x20	; 32
     cf8:	51 e4       	ldi	r21, 0x41	; 65
     cfa:	6f 81       	ldd	r22, Y+7	; 0x07
     cfc:	78 85       	ldd	r23, Y+8	; 0x08
     cfe:	89 85       	ldd	r24, Y+9	; 0x09
     d00:	9a 85       	ldd	r25, Y+10	; 0x0a
     d02:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	bc 01       	movw	r22, r24
     d0c:	cd 01       	movw	r24, r26
     d0e:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	98 8b       	std	Y+16, r25	; 0x10
     d18:	8f 87       	std	Y+15, r24	; 0x0f
     d1a:	0f c0       	rjmp	.+30     	; 0xd3a <AX_SetAngle+0x1e2>
     d1c:	8a ef       	ldi	r24, 0xFA	; 250
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	9a 8b       	std	Y+18, r25	; 0x12
     d22:	89 8b       	std	Y+17, r24	; 0x11
     d24:	89 89       	ldd	r24, Y+17	; 0x11
     d26:	9a 89       	ldd	r25, Y+18	; 0x12
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <AX_SetAngle+0x1d0>
     d2c:	9a 8b       	std	Y+18, r25	; 0x12
     d2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d30:	8f 85       	ldd	r24, Y+15	; 0x0f
     d32:	98 89       	ldd	r25, Y+16	; 0x10
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	98 8b       	std	Y+16, r25	; 0x10
     d38:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d3c:	98 89       	ldd	r25, Y+16	; 0x10
     d3e:	89 2b       	or	r24, r25
     d40:	69 f7       	brne	.-38     	; 0xd1c <AX_SetAngle+0x1c4>
     d42:	14 c0       	rjmp	.+40     	; 0xd6c <AX_SetAngle+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d44:	6b 85       	ldd	r22, Y+11	; 0x0b
     d46:	7c 85       	ldd	r23, Y+12	; 0x0c
     d48:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	98 8b       	std	Y+16, r25	; 0x10
     d56:	8f 87       	std	Y+15, r24	; 0x0f
     d58:	8f 85       	ldd	r24, Y+15	; 0x0f
     d5a:	98 89       	ldd	r25, Y+16	; 0x10
     d5c:	9c 8b       	std	Y+20, r25	; 0x14
     d5e:	8b 8b       	std	Y+19, r24	; 0x13
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <AX_SetAngle+0x20c>
     d68:	9c 8b       	std	Y+20, r25	; 0x14
     d6a:	8b 8b       	std	Y+19, r24	; 0x13

	_delay_ms(50);

	AX_ReleaseTransmitter();
     d6c:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <AX_ReleaseTransmitter>
}
     d70:	6a 96       	adiw	r28, 0x1a	; 26
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <AX_EndlessTurn>:


void AX_EndlessTurn(void)
{
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	60 97       	sbiw	r28, 0x10	; 16
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61

	unsigned int checksum;

	checksum = ~(0x01 + 0x07 + 0x03 + 0x06 + (1023 & 0xFF) + (1023 >> 8) & 0xFF);
     d96:	8c ee       	ldi	r24, 0xEC	; 236
     d98:	9f ef       	ldi	r25, 0xFF	; 255
     d9a:	9a 83       	std	Y+2, r25	; 0x02
     d9c:	89 83       	std	Y+1, r24	; 0x01

	AX_StopReceiver();
     d9e:	0e 94 8c 05 	call	0xb18	; 0xb18 <AX_StopReceiver>

	AX_SendChar(0xFF);
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(0xFF);
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(0x01);
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(0x07);
     db4:	87 e0       	ldi	r24, 0x07	; 7
     db6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(0x03);
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(0x06);
     dc0:	86 e0       	ldi	r24, 0x06	; 6
     dc2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(0x00);
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(0x00);
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(1023 & 0xFF);
     dd2:	8f ef       	ldi	r24, 0xFF	; 255
     dd4:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(1023 >> 8);
     dd8:	83 e0       	ldi	r24, 0x03	; 3
     dda:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(checksum);
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>

	AX_StopTransmitter();
     de4:	0e 94 58 05 	call	0xab0	; 0xab0 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     de8:	0e 94 9c 05 	call	0xb38	; 0xb38 <AX_ReleaseReceiver>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a8 e4       	ldi	r26, 0x48	; 72
     df2:	b2 e4       	ldi	r27, 0x42	; 66
     df4:	8b 83       	std	Y+3, r24	; 0x03
     df6:	9c 83       	std	Y+4, r25	; 0x04
     df8:	ad 83       	std	Y+5, r26	; 0x05
     dfa:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e4       	ldi	r19, 0x40	; 64
     e00:	4c e1       	ldi	r20, 0x1C	; 28
     e02:	55 e4       	ldi	r21, 0x45	; 69
     e04:	6b 81       	ldd	r22, Y+3	; 0x03
     e06:	7c 81       	ldd	r23, Y+4	; 0x04
     e08:	8d 81       	ldd	r24, Y+5	; 0x05
     e0a:	9e 81       	ldd	r25, Y+6	; 0x06
     e0c:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	8f 83       	std	Y+7, r24	; 0x07
     e16:	98 87       	std	Y+8, r25	; 0x08
     e18:	a9 87       	std	Y+9, r26	; 0x09
     e1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e8       	ldi	r20, 0x80	; 128
     e22:	5f e3       	ldi	r21, 0x3F	; 63
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
     e30:	88 23       	and	r24, r24
     e32:	2c f4       	brge	.+10     	; 0xe3e <AX_EndlessTurn+0xbc>
		__ticks = 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9c 87       	std	Y+12, r25	; 0x0c
     e3a:	8b 87       	std	Y+11, r24	; 0x0b
     e3c:	3f c0       	rjmp	.+126    	; 0xebc <AX_EndlessTurn+0x13a>
	else if (__tmp > 65535)
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	3f ef       	ldi	r19, 0xFF	; 255
     e42:	4f e7       	ldi	r20, 0x7F	; 127
     e44:	57 e4       	ldi	r21, 0x47	; 71
     e46:	6f 81       	ldd	r22, Y+7	; 0x07
     e48:	78 85       	ldd	r23, Y+8	; 0x08
     e4a:	89 85       	ldd	r24, Y+9	; 0x09
     e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4e:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
     e52:	18 16       	cp	r1, r24
     e54:	4c f5       	brge	.+82     	; 0xea8 <AX_EndlessTurn+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e2       	ldi	r20, 0x20	; 32
     e5c:	51 e4       	ldi	r21, 0x41	; 65
     e5e:	6b 81       	ldd	r22, Y+3	; 0x03
     e60:	7c 81       	ldd	r23, Y+4	; 0x04
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
     e64:	9e 81       	ldd	r25, Y+6	; 0x06
     e66:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	9c 87       	std	Y+12, r25	; 0x0c
     e7c:	8b 87       	std	Y+11, r24	; 0x0b
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <AX_EndlessTurn+0x11c>
     e80:	8a ef       	ldi	r24, 0xFA	; 250
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9e 87       	std	Y+14, r25	; 0x0e
     e86:	8d 87       	std	Y+13, r24	; 0x0d
     e88:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <AX_EndlessTurn+0x10a>
     e90:	9e 87       	std	Y+14, r25	; 0x0e
     e92:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e94:	8b 85       	ldd	r24, Y+11	; 0x0b
     e96:	9c 85       	ldd	r25, Y+12	; 0x0c
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	9c 87       	std	Y+12, r25	; 0x0c
     e9c:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9e:	8b 85       	ldd	r24, Y+11	; 0x0b
     ea0:	9c 85       	ldd	r25, Y+12	; 0x0c
     ea2:	89 2b       	or	r24, r25
     ea4:	69 f7       	brne	.-38     	; 0xe80 <AX_EndlessTurn+0xfe>
     ea6:	14 c0       	rjmp	.+40     	; 0xed0 <AX_EndlessTurn+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea8:	6f 81       	ldd	r22, Y+7	; 0x07
     eaa:	78 85       	ldd	r23, Y+8	; 0x08
     eac:	89 85       	ldd	r24, Y+9	; 0x09
     eae:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb0:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	9c 87       	std	Y+12, r25	; 0x0c
     eba:	8b 87       	std	Y+11, r24	; 0x0b
     ebc:	8b 85       	ldd	r24, Y+11	; 0x0b
     ebe:	9c 85       	ldd	r25, Y+12	; 0x0c
     ec0:	98 8b       	std	Y+16, r25	; 0x10
     ec2:	8f 87       	std	Y+15, r24	; 0x0f
     ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec6:	98 89       	ldd	r25, Y+16	; 0x10
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <AX_EndlessTurn+0x146>
     ecc:	98 8b       	std	Y+16, r25	; 0x10
     ece:	8f 87       	std	Y+15, r24	; 0x0f

	//AX_ReadStatus();
	_delay_ms(50);

	AX_ReleaseTransmitter();
     ed0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <AX_ReleaseTransmitter>
}
     ed4:	60 96       	adiw	r28, 0x10	; 16
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <AX_SetSpeed>:

void AX_SetSpeed(unsigned int direction, unsigned int speed)
{
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	28 97       	sbiw	r28, 0x08	; 8
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	9e 83       	std	Y+6, r25	; 0x06
     efc:	8d 83       	std	Y+5, r24	; 0x05
     efe:	78 87       	std	Y+8, r23	; 0x08
     f00:	6f 83       	std	Y+7, r22	; 0x07
	/*
		direction ---> TurnDirection -> 1 - ClockWise   0 - CounterClockWise
	*/

	unsigned int data = 0x0000;
     f02:	1a 82       	std	Y+2, r1	; 0x02
     f04:	19 82       	std	Y+1, r1	; 0x01
	unsigned int checksum = 0;
     f06:	1c 82       	std	Y+4, r1	; 0x04
     f08:	1b 82       	std	Y+3, r1	; 0x03

	data = speed;
     f0a:	8f 81       	ldd	r24, Y+7	; 0x07
     f0c:	98 85       	ldd	r25, Y+8	; 0x08
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
	data |= (direction << 10);
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	98 2f       	mov	r25, r24
     f18:	88 27       	eor	r24, r24
     f1a:	99 0f       	add	r25, r25
     f1c:	99 0f       	add	r25, r25
     f1e:	29 81       	ldd	r18, Y+1	; 0x01
     f20:	3a 81       	ldd	r19, Y+2	; 0x02
     f22:	82 2b       	or	r24, r18
     f24:	93 2b       	or	r25, r19
     f26:	9a 83       	std	Y+2, r25	; 0x02
     f28:	89 83       	std	Y+1, r24	; 0x01


	checksum = ~(0x01 + 0x05 + 0x03 + 0x20 + data);
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	89 96       	adiw	r24, 0x29	; 41
     f30:	80 95       	com	r24
     f32:	90 95       	com	r25
     f34:	9c 83       	std	Y+4, r25	; 0x04
     f36:	8b 83       	std	Y+3, r24	; 0x03

	AX_StopReceiver();
     f38:	0e 94 8c 05 	call	0xb18	; 0xb18 <AX_StopReceiver>

	AX_SendChar(0xFF);
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(0xFF);
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(0x01);
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(0x05);
     f4e:	85 e0       	ldi	r24, 0x05	; 5
     f50:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(0x03);
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(0x20);
     f5a:	80 e2       	ldi	r24, 0x20	; 32
     f5c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(data);
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(data >> 8);
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	89 2f       	mov	r24, r25
     f6c:	99 27       	eor	r25, r25
     f6e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>
	AX_SendChar(checksum);
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	0e 94 ff 04 	call	0x9fe	; 0x9fe <AX_SendChar>

	AX_StopTransmitter();
     f78:	0e 94 58 05 	call	0xab0	; 0xab0 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     f7c:	0e 94 9c 05 	call	0xb38	; 0xb38 <AX_ReleaseReceiver>

	AX_ReadStatus();
     f80:	0e 94 2b 05 	call	0xa56	; 0xa56 <AX_ReadStatus>

	AX_ReleaseTransmitter();
     f84:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <AX_ReleaseTransmitter>
}
     f88:	28 96       	adiw	r28, 0x08	; 8
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <__vector_18>:
static volatile unsigned char rxCounter[10];
//volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	00 90 5f 00 	lds	r0, 0x005F
     fa2:	0f 92       	push	r0
     fa4:	11 24       	eor	r1, r1
     fa6:	00 90 5b 00 	lds	r0, 0x005B
     faa:	0f 92       	push	r0
     fac:	2f 93       	push	r18
     fae:	3f 93       	push	r19
     fb0:	4f 93       	push	r20
     fb2:	5f 93       	push	r21
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <__vector_18+0x28>
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <__vector_18+0x2a>
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     fc8:	8d ee       	ldi	r24, 0xED	; 237
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	fc 01       	movw	r30, r24
     fce:	80 81       	ld	r24, Z
     fd0:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     fd2:	19 82       	std	Y+1, r1	; 0x01
     fd4:	a4 c0       	rjmp	.+328    	; 0x111e <__stack+0x1f>
	{
		CANPAGE = ch << 4;
     fd6:	8d ee       	ldi	r24, 0xED	; 237
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	29 81       	ldd	r18, Y+1	; 0x01
     fdc:	22 95       	swap	r18
     fde:	20 7f       	andi	r18, 0xF0	; 240
     fe0:	fc 01       	movw	r30, r24
     fe2:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     fe4:	8e ee       	ldi	r24, 0xEE	; 238
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	fc 01       	movw	r30, r24
     fea:	80 81       	ld	r24, Z
     fec:	82 95       	swap	r24
     fee:	86 95       	lsr	r24
     ff0:	87 70       	andi	r24, 0x07	; 7
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	81 70       	andi	r24, 0x01	; 1
     ff8:	99 27       	eor	r25, r25
     ffa:	89 2b       	or	r24, r25
     ffc:	09 f4       	brne	.+2      	; 0x1000 <__vector_18+0x66>
     ffe:	70 c0       	rjmp	.+224    	; 0x10e0 <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
    1000:	8f ee       	ldi	r24, 0xEF	; 239
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	20 e8       	ldi	r18, 0x80	; 128
    1006:	fc 01       	movw	r30, r24
    1008:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
    100a:	8e ee       	ldi	r24, 0xEE	; 238
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	2e ee       	ldi	r18, 0xEE	; 238
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	f9 01       	movw	r30, r18
    1014:	20 81       	ld	r18, Z
    1016:	2f 7d       	andi	r18, 0xDF	; 223
    1018:	fc 01       	movw	r30, r24
    101a:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
    101c:	82 ef       	ldi	r24, 0xF2	; 242
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	fc 01       	movw	r30, r24
    1022:	80 81       	ld	r24, Z
    1024:	82 95       	swap	r24
    1026:	86 95       	lsr	r24
    1028:	87 70       	andi	r24, 0x07	; 7
    102a:	28 2f       	mov	r18, r24
    102c:	83 ef       	ldi	r24, 0xF3	; 243
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	fc 01       	movw	r30, r24
    1032:	80 81       	ld	r24, Z
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	82 2b       	or	r24, r18
    1046:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
    1048:	1a 82       	std	Y+2, r1	; 0x02
    104a:	26 c0       	rjmp	.+76     	; 0x1098 <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
    104c:	8c 81       	ldd	r24, Y+4	; 0x04
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	81 50       	subi	r24, 0x01	; 1
    1054:	90 48       	sbci	r25, 0x80	; 128
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	82 56       	subi	r24, 0x62	; 98
    105c:	9e 4f       	sbci	r25, 0xFE	; 254
    105e:	fc 01       	movw	r30, r24
    1060:	20 81       	ld	r18, Z
    1062:	31 81       	ldd	r19, Z+1	; 0x01
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	8e 54       	subi	r24, 0x4E	; 78
    106e:	9e 4f       	sbci	r25, 0xFE	; 254
    1070:	fc 01       	movw	r30, r24
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	84 0f       	add	r24, r20
    1080:	95 1f       	adc	r25, r21
    1082:	82 0f       	add	r24, r18
    1084:	93 1f       	adc	r25, r19
    1086:	2a ef       	ldi	r18, 0xFA	; 250
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	f9 01       	movw	r30, r18
    108c:	20 81       	ld	r18, Z
    108e:	fc 01       	movw	r30, r24
    1090:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	8a 83       	std	Y+2, r24	; 0x02
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	88 30       	cpi	r24, 0x08	; 8
    109c:	b8 f2       	brcs	.-82     	; 0x104c <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	8e 54       	subi	r24, 0x4E	; 78
    10a8:	9e 4f       	sbci	r25, 0xFE	; 254
    10aa:	fc 01       	movw	r30, r24
    10ac:	20 81       	ld	r18, Z
    10ae:	2f 5f       	subi	r18, 0xFF	; 255
    10b0:	fc 01       	movw	r30, r24
    10b2:	20 83       	st	Z, r18
    10b4:	25 30       	cpi	r18, 0x05	; 5
    10b6:	41 f4       	brne	.+16     	; 0x10c8 <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	8e 54       	subi	r24, 0x4E	; 78
    10c2:	9e 4f       	sbci	r25, 0xFE	; 254
    10c4:	fc 01       	movw	r30, r24
    10c6:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	8a 53       	subi	r24, 0x3A	; 58
    10d2:	9e 4f       	sbci	r25, 0xFE	; 254
    10d4:	fc 01       	movw	r30, r24
    10d6:	20 81       	ld	r18, Z
    10d8:	2f 5f       	subi	r18, 0xFF	; 255
    10da:	fc 01       	movw	r30, r24
    10dc:	20 83       	st	Z, r18

			break;
    10de:	23 c0       	rjmp	.+70     	; 0x1126 <__stack+0x27>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
    10e0:	8e ee       	ldi	r24, 0xEE	; 238
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	fc 01       	movw	r30, r24
    10e6:	80 81       	ld	r24, Z
    10e8:	82 95       	swap	r24
    10ea:	86 95       	lsr	r24
    10ec:	86 95       	lsr	r24
    10ee:	83 70       	andi	r24, 0x03	; 3
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	81 70       	andi	r24, 0x01	; 1
    10f6:	99 27       	eor	r25, r25
    10f8:	89 2b       	or	r24, r25
    10fa:	71 f0       	breq	.+28     	; 0x1118 <__stack+0x19>
		{
			CANCDMOB = 0; // disable mob
    10fc:	8f ee       	ldi	r24, 0xEF	; 239
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	fc 01       	movw	r30, r24
    1102:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
    1104:	8e ee       	ldi	r24, 0xEE	; 238
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	2e ee       	ldi	r18, 0xEE	; 238
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	f9 01       	movw	r30, r18
    110e:	20 81       	ld	r18, Z
    1110:	2f 7b       	andi	r18, 0xBF	; 191
    1112:	fc 01       	movw	r30, r24
    1114:	20 83       	st	Z, r18

			break;
    1116:	07 c0       	rjmp	.+14     	; 0x1126 <__stack+0x27>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	8f 5f       	subi	r24, 0xFF	; 255
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	8f 30       	cpi	r24, 0x0F	; 15
    1122:	08 f4       	brcc	.+2      	; 0x1126 <__stack+0x27>
    1124:	58 cf       	rjmp	.-336    	; 0xfd6 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
    1126:	8d ee       	ldi	r24, 0xED	; 237
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	2b 81       	ldd	r18, Y+3	; 0x03
    112c:	fc 01       	movw	r30, r24
    112e:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // zato sto tako treba.
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	ff 91       	pop	r31
    113e:	ef 91       	pop	r30
    1140:	9f 91       	pop	r25
    1142:	8f 91       	pop	r24
    1144:	5f 91       	pop	r21
    1146:	4f 91       	pop	r20
    1148:	3f 91       	pop	r19
    114a:	2f 91       	pop	r18
    114c:	0f 90       	pop	r0
    114e:	00 92 5b 00 	sts	0x005B, r0
    1152:	0f 90       	pop	r0
    1154:	00 92 5f 00 	sts	0x005F, r0
    1158:	0f 90       	pop	r0
    115a:	1f 90       	pop	r1
    115c:	18 95       	reti

0000115e <CAN_InitModule>:


static void CAN_InitModule(void)
{
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	00 d0       	rcall	.+0      	; 0x1164 <CAN_InitModule+0x6>
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
    1168:	88 ed       	ldi	r24, 0xD8	; 216
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	21 e0       	ldi	r18, 0x01	; 1
    116e:	fc 01       	movw	r30, r24
    1170:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    1172:	19 82       	std	Y+1, r1	; 0x01
    1174:	3e c0       	rjmp	.+124    	; 0x11f2 <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
    1176:	8d ee       	ldi	r24, 0xED	; 237
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	29 81       	ldd	r18, Y+1	; 0x01
    117c:	22 95       	swap	r18
    117e:	20 7f       	andi	r18, 0xF0	; 240
    1180:	fc 01       	movw	r30, r24
    1182:	20 83       	st	Z, r18

		CANSTMOB = 0;
    1184:	8e ee       	ldi	r24, 0xEE	; 238
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	fc 01       	movw	r30, r24
    118a:	10 82       	st	Z, r1
		CANCDMOB = 0;
    118c:	8f ee       	ldi	r24, 0xEF	; 239
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	fc 01       	movw	r30, r24
    1192:	10 82       	st	Z, r1

		CANIDT1 = 0;
    1194:	83 ef       	ldi	r24, 0xF3	; 243
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	fc 01       	movw	r30, r24
    119a:	10 82       	st	Z, r1
		CANIDT2 = 0;
    119c:	82 ef       	ldi	r24, 0xF2	; 242
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	fc 01       	movw	r30, r24
    11a2:	10 82       	st	Z, r1
		CANIDT3 = 0;
    11a4:	81 ef       	ldi	r24, 0xF1	; 241
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	fc 01       	movw	r30, r24
    11aa:	10 82       	st	Z, r1
		CANIDT4 = 0;
    11ac:	80 ef       	ldi	r24, 0xF0	; 240
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	fc 01       	movw	r30, r24
    11b2:	10 82       	st	Z, r1
		CANIDM1 = 0;
    11b4:	87 ef       	ldi	r24, 0xF7	; 247
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	fc 01       	movw	r30, r24
    11ba:	10 82       	st	Z, r1
		CANIDM2 = 0;
    11bc:	86 ef       	ldi	r24, 0xF6	; 246
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	fc 01       	movw	r30, r24
    11c2:	10 82       	st	Z, r1
		CANIDM3 = 0;
    11c4:	85 ef       	ldi	r24, 0xF5	; 245
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	fc 01       	movw	r30, r24
    11ca:	10 82       	st	Z, r1
		CANIDM4 = 0;
    11cc:	84 ef       	ldi	r24, 0xF4	; 244
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	fc 01       	movw	r30, r24
    11d2:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    11d4:	1a 82       	std	Y+2, r1	; 0x02
    11d6:	07 c0       	rjmp	.+14     	; 0x11e6 <CAN_InitModule+0x88>
			CANMSG = 0;
    11d8:	8a ef       	ldi	r24, 0xFA	; 250
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	fc 01       	movw	r30, r24
    11de:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	8a 83       	std	Y+2, r24	; 0x02
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	88 30       	cpi	r24, 0x08	; 8
    11ea:	b0 f3       	brcs	.-20     	; 0x11d8 <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	8f 5f       	subi	r24, 0xFF	; 255
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	8f 30       	cpi	r24, 0x0F	; 15
    11f6:	08 f4       	brcc	.+2      	; 0x11fa <CAN_InitModule+0x9c>
    11f8:	be cf       	rjmp	.-132    	; 0x1176 <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
    11fa:	88 ed       	ldi	r24, 0xD8	; 216
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	22 e0       	ldi	r18, 0x02	; 2
    1200:	fc 01       	movw	r30, r24
    1202:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
    1204:	82 ee       	ldi	r24, 0xE2	; 226
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	21 e0       	ldi	r18, 0x01	; 1
    120a:	fc 01       	movw	r30, r24
    120c:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
    120e:	83 ee       	ldi	r24, 0xE3	; 227
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	28 e0       	ldi	r18, 0x08	; 8
    1214:	fc 01       	movw	r30, r24
    1216:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
    1218:	84 ee       	ldi	r24, 0xE4	; 228
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	2e e5       	ldi	r18, 0x5E	; 94
    121e:	fc 01       	movw	r30, r24
    1220:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
    1222:	85 ee       	ldi	r24, 0xE5	; 229
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	fc 01       	movw	r30, r24
    1228:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
    122a:	8b ed       	ldi	r24, 0xDB	; 219
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	20 eb       	ldi	r18, 0xB0	; 176
    1230:	fc 01       	movw	r30, r24
    1232:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
    1234:	8f ed       	ldi	r24, 0xDF	; 223
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	2f e7       	ldi	r18, 0x7F	; 127
    123a:	fc 01       	movw	r30, r24
    123c:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
    123e:	8e ed       	ldi	r24, 0xDE	; 222
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	2f ef       	ldi	r18, 0xFF	; 255
    1244:	fc 01       	movw	r30, r24
    1246:	20 83       	st	Z, r18
	sei();
    1248:	78 94       	sei
}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	00 d0       	rcall	.+0      	; 0x125a <CAN_InitRxMob+0x6>
    125a:	00 d0       	rcall	.+0      	; 0x125c <CAN_InitRxMob+0x8>
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	9c 83       	std	Y+4, r25	; 0x04
    1262:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    1264:	8d ee       	ldi	r24, 0xED	; 237
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	fc 01       	movw	r30, r24
    126a:	80 81       	ld	r24, Z
    126c:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    126e:	00 00       	nop
    1270:	89 ed       	ldi	r24, 0xD9	; 217
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	fc 01       	movw	r30, r24
    1276:	80 81       	ld	r24, Z
    1278:	82 95       	swap	r24
    127a:	8f 70       	andi	r24, 0x0F	; 15
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	81 70       	andi	r24, 0x01	; 1
    1282:	99 27       	eor	r25, r25
    1284:	89 2b       	or	r24, r25
    1286:	a1 f7       	brne	.-24     	; 0x1270 <CAN_InitRxMob+0x1c>
    1288:	89 ed       	ldi	r24, 0xD9	; 217
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	fc 01       	movw	r30, r24
    128e:	80 81       	ld	r24, Z
    1290:	86 95       	lsr	r24
    1292:	86 95       	lsr	r24
    1294:	86 95       	lsr	r24
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	81 70       	andi	r24, 0x01	; 1
    129c:	99 27       	eor	r25, r25
    129e:	89 2b       	or	r24, r25
    12a0:	39 f7       	brne	.-50     	; 0x1270 <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    12a2:	19 82       	std	Y+1, r1	; 0x01
    12a4:	49 c0       	rjmp	.+146    	; 0x1338 <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
    12a6:	8d ee       	ldi	r24, 0xED	; 237
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	29 81       	ldd	r18, Y+1	; 0x01
    12ac:	22 95       	swap	r18
    12ae:	20 7f       	andi	r18, 0xF0	; 240
    12b0:	fc 01       	movw	r30, r24
    12b2:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
    12b4:	8f ee       	ldi	r24, 0xEF	; 239
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	fc 01       	movw	r30, r24
    12ba:	80 81       	ld	r24, Z
    12bc:	82 95       	swap	r24
    12be:	86 95       	lsr	r24
    12c0:	86 95       	lsr	r24
    12c2:	83 70       	andi	r24, 0x03	; 3
    12c4:	88 23       	and	r24, r24
    12c6:	21 f0       	breq	.+8      	; 0x12d0 <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	8f 5f       	subi	r24, 0xFF	; 255
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	34 c0       	rjmp	.+104    	; 0x1338 <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
    12d0:	8f ee       	ldi	r24, 0xEF	; 239
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	2f e0       	ldi	r18, 0x0F	; 15
    12d6:	fc 01       	movw	r30, r24
    12d8:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
    12da:	83 ef       	ldi	r24, 0xF3	; 243
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	2b 81       	ldd	r18, Y+3	; 0x03
    12e0:	3c 81       	ldd	r19, Y+4	; 0x04
    12e2:	33 27       	eor	r19, r19
    12e4:	36 95       	lsr	r19
    12e6:	27 95       	ror	r18
    12e8:	36 95       	lsr	r19
    12ea:	27 95       	ror	r18
    12ec:	36 95       	lsr	r19
    12ee:	27 95       	ror	r18
    12f0:	fc 01       	movw	r30, r24
    12f2:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
    12f4:	82 ef       	ldi	r24, 0xF2	; 242
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	2b 81       	ldd	r18, Y+3	; 0x03
    12fa:	22 95       	swap	r18
    12fc:	22 0f       	add	r18, r18
    12fe:	20 7e       	andi	r18, 0xE0	; 224
    1300:	fc 01       	movw	r30, r24
    1302:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
    1304:	86 ef       	ldi	r24, 0xF6	; 246
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	20 ee       	ldi	r18, 0xE0	; 224
    130a:	fc 01       	movw	r30, r24
    130c:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
    130e:	87 ef       	ldi	r24, 0xF7	; 247
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	2f ef       	ldi	r18, 0xFF	; 255
    1314:	fc 01       	movw	r30, r24
    1316:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
    1318:	8f ee       	ldi	r24, 0xEF	; 239
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	2f ee       	ldi	r18, 0xEF	; 239
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	f9 01       	movw	r30, r18
    1322:	20 81       	ld	r18, Z
    1324:	20 68       	ori	r18, 0x80	; 128
    1326:	fc 01       	movw	r30, r24
    1328:	20 83       	st	Z, r18

		CANPAGE = tempPage;
    132a:	8d ee       	ldi	r24, 0xED	; 237
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	2a 81       	ldd	r18, Y+2	; 0x02
    1330:	fc 01       	movw	r30, r24
    1332:	20 83       	st	Z, r18

		return 1;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	0a c0       	rjmp	.+20     	; 0x134c <CAN_InitRxMob+0xf8>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	8f 30       	cpi	r24, 0x0F	; 15
    133c:	08 f4       	brcc	.+2      	; 0x1340 <CAN_InitRxMob+0xec>
    133e:	b3 cf       	rjmp	.-154    	; 0x12a6 <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
    1340:	8d ee       	ldi	r24, 0xED	; 237
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	2a 81       	ldd	r18, Y+2	; 0x02
    1346:	fc 01       	movw	r30, r24
    1348:	20 83       	st	Z, r18

	return 0;
    134a:	80 e0       	ldi	r24, 0x00	; 0
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	08 95       	ret

0000135a <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	00 d0       	rcall	.+0      	; 0x1364 <CAN_Init+0xa>
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
    136a:	0e 94 af 08 	call	0x115e	; 0x115e <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    136e:	19 82       	std	Y+1, r1	; 0x01
    1370:	30 c0       	rjmp	.+96     	; 0x13d2 <CAN_Init+0x78>
	{
		CAN_InitRxMob(i + 1);
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	88 2f       	mov	r24, r24
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	0e 94 2a 09 	call	0x1254	; 0x1254 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	88 2f       	mov	r24, r24
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	8c 01       	movw	r16, r24
    138a:	02 56       	subi	r16, 0x62	; 98
    138c:	1e 4f       	sbci	r17, 0xFE	; 254
    138e:	61 e0       	ldi	r22, 0x01	; 1
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	85 e0       	ldi	r24, 0x05	; 5
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 7d 27 	call	0x4efa	; 0x4efa <calloc>
    139a:	f8 01       	movw	r30, r16
    139c:	91 83       	std	Z+1, r25	; 0x01
    139e:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	29 81       	ldd	r18, Y+1	; 0x01
    13a8:	22 2f       	mov	r18, r18
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	49 81       	ldd	r20, Y+1	; 0x01
    13ae:	44 2f       	mov	r20, r20
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	4a 53       	subi	r20, 0x3A	; 58
    13b6:	5e 4f       	sbci	r21, 0xFE	; 254
    13b8:	fa 01       	movw	r30, r20
    13ba:	60 83       	st	Z, r22
    13bc:	24 54       	subi	r18, 0x44	; 68
    13be:	3e 4f       	sbci	r19, 0xFE	; 254
    13c0:	f9 01       	movw	r30, r18
    13c2:	60 83       	st	Z, r22
    13c4:	8e 54       	subi	r24, 0x4E	; 78
    13c6:	9e 4f       	sbci	r25, 0xFE	; 254
    13c8:	fc 01       	movw	r30, r24
    13ca:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	8f 5f       	subi	r24, 0xFF	; 255
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	99 81       	ldd	r25, Y+1	; 0x01
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	98 17       	cp	r25, r24
    13d8:	60 f2       	brcs	.-104    	; 0x1372 <CAN_Init+0x18>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	08 95       	ret

000013e8 <CAN_CheckRX>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	1f 92       	push	r1
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	89 83       	std	Y+1, r24	; 0x01
	return rxCounter[nodeID - 1];
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	88 2f       	mov	r24, r24
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	8a 53       	subi	r24, 0x3A	; 58
    13fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1400:	fc 01       	movw	r30, r24
    1402:	80 81       	ld	r24, Z
}
    1404:	0f 90       	pop	r0
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	08 95       	ret

0000140c <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	00 d0       	rcall	.+0      	; 0x1412 <CAN_Read+0x6>
    1412:	00 d0       	rcall	.+0      	; 0x1414 <CAN_Read+0x8>
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	9b 83       	std	Y+3, r25	; 0x03
    141a:	8a 83       	std	Y+2, r24	; 0x02
    141c:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
    141e:	84 e3       	ldi	r24, 0x34	; 52
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	2f ef       	ldi	r18, 0xFF	; 255
    1424:	fc 01       	movw	r30, r24
    1426:	20 83       	st	Z, r18
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
    1428:	00 00       	nop
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	88 2f       	mov	r24, r24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	8a 53       	subi	r24, 0x3A	; 58
    1434:	9e 4f       	sbci	r25, 0xFE	; 254
    1436:	fc 01       	movw	r30, r24
    1438:	80 81       	ld	r24, Z
    143a:	88 23       	and	r24, r24
    143c:	b1 f3       	breq	.-20     	; 0x142a <CAN_Read+0x1e>

	for(i = 0; i < 8; ++i)
    143e:	19 82       	std	Y+1, r1	; 0x01
    1440:	2c c0       	rjmp	.+88     	; 0x149a <CAN_Read+0x8e>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	2a 81       	ldd	r18, Y+2	; 0x02
    144a:	3b 81       	ldd	r19, Y+3	; 0x03
    144c:	82 0f       	add	r24, r18
    144e:	93 1f       	adc	r25, r19
    1450:	2c 81       	ldd	r18, Y+4	; 0x04
    1452:	22 2f       	mov	r18, r18
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	21 50       	subi	r18, 0x01	; 1
    1458:	30 48       	sbci	r19, 0x80	; 128
    145a:	22 0f       	add	r18, r18
    145c:	33 1f       	adc	r19, r19
    145e:	22 56       	subi	r18, 0x62	; 98
    1460:	3e 4f       	sbci	r19, 0xFE	; 254
    1462:	f9 01       	movw	r30, r18
    1464:	40 81       	ld	r20, Z
    1466:	51 81       	ldd	r21, Z+1	; 0x01
    1468:	2c 81       	ldd	r18, Y+4	; 0x04
    146a:	22 2f       	mov	r18, r18
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	21 50       	subi	r18, 0x01	; 1
    1470:	31 09       	sbc	r19, r1
    1472:	24 54       	subi	r18, 0x44	; 68
    1474:	3e 4f       	sbci	r19, 0xFE	; 254
    1476:	f9 01       	movw	r30, r18
    1478:	20 81       	ld	r18, Z
    147a:	62 2f       	mov	r22, r18
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	29 81       	ldd	r18, Y+1	; 0x01
    1480:	22 2f       	mov	r18, r18
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	26 0f       	add	r18, r22
    1486:	37 1f       	adc	r19, r23
    1488:	24 0f       	add	r18, r20
    148a:	35 1f       	adc	r19, r21
    148c:	f9 01       	movw	r30, r18
    148e:	20 81       	ld	r18, Z
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	8f 5f       	subi	r24, 0xFF	; 255
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	88 30       	cpi	r24, 0x08	; 8
    149e:	88 f2       	brcs	.-94     	; 0x1442 <CAN_Read+0x36>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	88 2f       	mov	r24, r24
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	84 54       	subi	r24, 0x44	; 68
    14aa:	9e 4f       	sbci	r25, 0xFE	; 254
    14ac:	fc 01       	movw	r30, r24
    14ae:	20 81       	ld	r18, Z
    14b0:	2f 5f       	subi	r18, 0xFF	; 255
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18
    14b6:	25 30       	cpi	r18, 0x05	; 5
    14b8:	41 f4       	brne	.+16     	; 0x14ca <CAN_Read+0xbe>
	*(rxRdIndex + sendingNodeID - 1) = 0;
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	84 54       	subi	r24, 0x44	; 68
    14c4:	9e 4f       	sbci	r25, 0xFE	; 254
    14c6:	fc 01       	movw	r30, r24
    14c8:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
    14ca:	8c 81       	ldd	r24, Y+4	; 0x04
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	9c 01       	movw	r18, r24
    14d4:	2a 53       	subi	r18, 0x3A	; 58
    14d6:	3e 4f       	sbci	r19, 0xFE	; 254
    14d8:	f9 01       	movw	r30, r18
    14da:	20 81       	ld	r18, Z
    14dc:	21 50       	subi	r18, 0x01	; 1
    14de:	8a 53       	subi	r24, 0x3A	; 58
    14e0:	9e 4f       	sbci	r25, 0xFE	; 254
    14e2:	fc 01       	movw	r30, r24
    14e4:	20 83       	st	Z, r18

	return 0;
    14e6:	80 e0       	ldi	r24, 0x00	; 0
}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <CAN_Write+0x6>
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <CAN_Write+0x8>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <CAN_Write+0xa>
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	9d 83       	std	Y+5, r25	; 0x05
    1506:	8c 83       	std	Y+4, r24	; 0x04
    1508:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    150a:	00 00       	nop
    150c:	89 ed       	ldi	r24, 0xD9	; 217
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	fc 01       	movw	r30, r24
    1512:	80 81       	ld	r24, Z
    1514:	82 95       	swap	r24
    1516:	8f 70       	andi	r24, 0x0F	; 15
    1518:	88 2f       	mov	r24, r24
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	81 70       	andi	r24, 0x01	; 1
    151e:	99 27       	eor	r25, r25
    1520:	89 2b       	or	r24, r25
    1522:	a1 f7       	brne	.-24     	; 0x150c <CAN_Write+0x16>
    1524:	89 ed       	ldi	r24, 0xD9	; 217
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	fc 01       	movw	r30, r24
    152a:	80 81       	ld	r24, Z
    152c:	86 95       	lsr	r24
    152e:	86 95       	lsr	r24
    1530:	86 95       	lsr	r24
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	81 70       	andi	r24, 0x01	; 1
    1538:	99 27       	eor	r25, r25
    153a:	89 2b       	or	r24, r25
    153c:	39 f7       	brne	.-50     	; 0x150c <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    153e:	8d ee       	ldi	r24, 0xED	; 237
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	fc 01       	movw	r30, r24
    1544:	80 81       	ld	r24, Z
    1546:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
    1548:	1a 82       	std	Y+2, r1	; 0x02
    154a:	15 c0       	rjmp	.+42     	; 0x1576 <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
    154c:	8d ee       	ldi	r24, 0xED	; 237
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	2a 81       	ldd	r18, Y+2	; 0x02
    1552:	22 95       	swap	r18
    1554:	20 7f       	andi	r18, 0xF0	; 240
    1556:	fc 01       	movw	r30, r24
    1558:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
    155a:	8f ee       	ldi	r24, 0xEF	; 239
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	fc 01       	movw	r30, r24
    1560:	80 81       	ld	r24, Z
    1562:	82 95       	swap	r24
    1564:	86 95       	lsr	r24
    1566:	86 95       	lsr	r24
    1568:	83 70       	andi	r24, 0x03	; 3
    156a:	88 23       	and	r24, r24
    156c:	09 f4       	brne	.+2      	; 0x1570 <CAN_Write+0x7a>
			break;
    156e:	06 c0       	rjmp	.+12     	; 0x157c <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	8f 5f       	subi	r24, 0xFF	; 255
    1574:	8a 83       	std	Y+2, r24	; 0x02
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	8f 30       	cpi	r24, 0x0F	; 15
    157a:	40 f3       	brcs	.-48     	; 0x154c <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	8f 30       	cpi	r24, 0x0F	; 15
    1580:	11 f4       	brne	.+4      	; 0x1586 <CAN_Write+0x90>
		return -1;
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	39 c0       	rjmp	.+114    	; 0x15f8 <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
    1586:	82 ef       	ldi	r24, 0xF2	; 242
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	2e 81       	ldd	r18, Y+6	; 0x06
    158c:	22 95       	swap	r18
    158e:	22 0f       	add	r18, r18
    1590:	20 7e       	andi	r18, 0xE0	; 224
    1592:	fc 01       	movw	r30, r24
    1594:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
    1596:	83 ef       	ldi	r24, 0xF3	; 243
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	2e 81       	ldd	r18, Y+6	; 0x06
    159c:	26 95       	lsr	r18
    159e:	26 95       	lsr	r18
    15a0:	26 95       	lsr	r18
    15a2:	fc 01       	movw	r30, r24
    15a4:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
    15a6:	8f ee       	ldi	r24, 0xEF	; 239
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	28 e0       	ldi	r18, 0x08	; 8
    15ac:	fc 01       	movw	r30, r24
    15ae:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    15b0:	19 82       	std	Y+1, r1	; 0x01
    15b2:	10 c0       	rjmp	.+32     	; 0x15d4 <CAN_Write+0xde>
		CANMSG = data[i];
    15b4:	8a ef       	ldi	r24, 0xFA	; 250
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	29 81       	ldd	r18, Y+1	; 0x01
    15ba:	22 2f       	mov	r18, r18
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	4c 81       	ldd	r20, Y+4	; 0x04
    15c0:	5d 81       	ldd	r21, Y+5	; 0x05
    15c2:	24 0f       	add	r18, r20
    15c4:	35 1f       	adc	r19, r21
    15c6:	f9 01       	movw	r30, r18
    15c8:	20 81       	ld	r18, Z
    15ca:	fc 01       	movw	r30, r24
    15cc:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	8f 5f       	subi	r24, 0xFF	; 255
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	88 30       	cpi	r24, 0x08	; 8
    15d8:	68 f3       	brcs	.-38     	; 0x15b4 <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
    15da:	8f ee       	ldi	r24, 0xEF	; 239
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	2f ee       	ldi	r18, 0xEF	; 239
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	f9 01       	movw	r30, r18
    15e4:	20 81       	ld	r18, Z
    15e6:	20 64       	ori	r18, 0x40	; 64
    15e8:	fc 01       	movw	r30, r24
    15ea:	20 83       	st	Z, r18

	CANPAGE = tempPage;
    15ec:	8d ee       	ldi	r24, 0xED	; 237
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	2b 81       	ldd	r18, Y+3	; 0x03
    15f2:	fc 01       	movw	r30, r24
    15f4:	20 83       	st	Z, r18

	return 0;
    15f6:	80 e0       	ldi	r24, 0x00	; 0
}
    15f8:	26 96       	adiw	r28, 0x06	; 6
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	08 95       	ret

0000160a <debug_init>:
#include "debug.h"

//pin and the starting state of debug pins
uint8_t debug_pins[5] = {48,49,50,51,52};

void debug_init() {
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62


}
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	08 95       	ret

00001618 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	00 d0       	rcall	.+0      	; 0x161e <__list_add+0x6>
    161e:	00 d0       	rcall	.+0      	; 0x1620 <__list_add+0x8>
    1620:	00 d0       	rcall	.+0      	; 0x1622 <__list_add+0xa>
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	9a 83       	std	Y+2, r25	; 0x02
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	7c 83       	std	Y+4, r23	; 0x04
    162c:	6b 83       	std	Y+3, r22	; 0x03
    162e:	5e 83       	std	Y+6, r21	; 0x06
    1630:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	29 81       	ldd	r18, Y+1	; 0x01
    1638:	3a 81       	ldd	r19, Y+2	; 0x02
    163a:	fc 01       	movw	r30, r24
    163c:	31 83       	std	Z+1, r19	; 0x01
    163e:	20 83       	st	Z, r18
    new->next = next;
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	2d 81       	ldd	r18, Y+5	; 0x05
    1646:	3e 81       	ldd	r19, Y+6	; 0x06
    1648:	fc 01       	movw	r30, r24
    164a:	33 83       	std	Z+3, r19	; 0x03
    164c:	22 83       	std	Z+2, r18	; 0x02
    new->prev = prev;
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	2b 81       	ldd	r18, Y+3	; 0x03
    1654:	3c 81       	ldd	r19, Y+4	; 0x04
    1656:	fc 01       	movw	r30, r24
    1658:	31 83       	std	Z+1, r19	; 0x01
    165a:	20 83       	st	Z, r18
    prev->next = new;
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	29 81       	ldd	r18, Y+1	; 0x01
    1662:	3a 81       	ldd	r19, Y+2	; 0x02
    1664:	fc 01       	movw	r30, r24
    1666:	33 83       	std	Z+3, r19	; 0x03
    1668:	22 83       	std	Z+2, r18	; 0x02
}
    166a:	26 96       	adiw	r28, 0x06	; 6
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

0000167c <list_add>:

static inline void list_add(struct list_head* new, struct list_head* head)
{
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	00 d0       	rcall	.+0      	; 0x1682 <list_add+0x6>
    1682:	00 d0       	rcall	.+0      	; 0x1684 <list_add+0x8>
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	9a 83       	std	Y+2, r25	; 0x02
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	7c 83       	std	Y+4, r23	; 0x04
    168e:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	fc 01       	movw	r30, r24
    1696:	42 81       	ldd	r20, Z+2	; 0x02
    1698:	53 81       	ldd	r21, Z+3	; 0x03
    169a:	2b 81       	ldd	r18, Y+3	; 0x03
    169c:	3c 81       	ldd	r19, Y+4	; 0x04
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	9a 81       	ldd	r25, Y+2	; 0x02
    16a2:	b9 01       	movw	r22, r18
    16a4:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__list_add>
}
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	08 95       	ret

000016b6 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	2b 97       	sbiw	r28, 0x0b	; 11
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	89 87       	std	Y+9, r24	; 0x09
    16cc:	6a 87       	std	Y+10, r22	; 0x0a
    16ce:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    16d0:	80 91 0d 01 	lds	r24, 0x010D
    16d4:	90 91 0e 01 	lds	r25, 0x010E
    16d8:	9c 83       	std	Y+4, r25	; 0x04
    16da:	8b 83       	std	Y+3, r24	; 0x03
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	05 97       	sbiw	r24, 0x05	; 5
    16e2:	9a 83       	std	Y+2, r25	; 0x02
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	15 c0       	rjmp	.+42     	; 0x1712 <gpio_register_pin+0x5c>
    {
        if(input->pin == pin)
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	fc 01       	movw	r30, r24
    16ee:	90 81       	ld	r25, Z
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	98 17       	cp	r25, r24
    16f4:	11 f4       	brne	.+4      	; 0x16fa <gpio_register_pin+0x44>
            return 1;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	bc c0       	rjmp	.+376    	; 0x1872 <gpio_register_pin+0x1bc>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	9a 81       	ldd	r25, Y+2	; 0x02
    16fe:	fc 01       	movw	r30, r24
    1700:	87 81       	ldd	r24, Z+7	; 0x07
    1702:	90 85       	ldd	r25, Z+8	; 0x08
    1704:	9e 83       	std	Y+6, r25	; 0x06
    1706:	8d 83       	std	Y+5, r24	; 0x05
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	9e 81       	ldd	r25, Y+6	; 0x06
    170c:	05 97       	sbiw	r24, 0x05	; 5
    170e:	9a 83       	std	Y+2, r25	; 0x02
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	05 96       	adiw	r24, 0x05	; 5
    1718:	8b 50       	subi	r24, 0x0B	; 11
    171a:	91 40       	sbci	r25, 0x01	; 1
    171c:	29 f7       	brne	.-54     	; 0x16e8 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    171e:	89 85       	ldd	r24, Y+9	; 0x09
    1720:	86 95       	lsr	r24
    1722:	86 95       	lsr	r24
    1724:	86 95       	lsr	r24
    1726:	8f 5f       	subi	r24, 0xFF	; 255
    1728:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t pin_reg = pin % 8;
    172a:	89 85       	ldd	r24, Y+9	; 0x09
    172c:	87 70       	andi	r24, 0x07	; 7
    172e:	88 87       	std	Y+8, r24	; 0x08
	if(direction == GPIO_DIRECTION_OUTPUT)
    1730:	8a 85       	ldd	r24, Y+10	; 0x0a
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	09 f0       	breq	.+2      	; 0x1738 <gpio_register_pin+0x82>
    1736:	55 c0       	rjmp	.+170    	; 0x17e2 <gpio_register_pin+0x12c>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    1738:	8f 81       	ldd	r24, Y+7	; 0x07
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	9c 01       	movw	r18, r24
    1740:	21 50       	subi	r18, 0x01	; 1
    1742:	31 09       	sbc	r19, r1
    1744:	c9 01       	movw	r24, r18
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	82 0f       	add	r24, r18
    174c:	93 1f       	adc	r25, r19
    174e:	81 96       	adiw	r24, 0x21	; 33
    1750:	ac 01       	movw	r20, r24
    1752:	8f 81       	ldd	r24, Y+7	; 0x07
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9c 01       	movw	r18, r24
    175a:	21 50       	subi	r18, 0x01	; 1
    175c:	31 09       	sbc	r19, r1
    175e:	c9 01       	movw	r24, r18
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	82 0f       	add	r24, r18
    1766:	93 1f       	adc	r25, r19
    1768:	81 96       	adiw	r24, 0x21	; 33
    176a:	fc 01       	movw	r30, r24
    176c:	80 81       	ld	r24, Z
    176e:	68 2f       	mov	r22, r24
    1770:	88 85       	ldd	r24, Y+8	; 0x08
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <gpio_register_pin+0xca>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	2a 95       	dec	r18
    1782:	e2 f7       	brpl	.-8      	; 0x177c <gpio_register_pin+0xc6>
    1784:	86 2b       	or	r24, r22
    1786:	fa 01       	movw	r30, r20
    1788:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    178a:	8f 81       	ldd	r24, Y+7	; 0x07
    178c:	88 2f       	mov	r24, r24
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	9c 01       	movw	r18, r24
    1792:	21 50       	subi	r18, 0x01	; 1
    1794:	31 09       	sbc	r19, r1
    1796:	c9 01       	movw	r24, r18
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	82 0f       	add	r24, r18
    179e:	93 1f       	adc	r25, r19
    17a0:	82 96       	adiw	r24, 0x22	; 34
    17a2:	ac 01       	movw	r20, r24
    17a4:	8f 81       	ldd	r24, Y+7	; 0x07
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	9c 01       	movw	r18, r24
    17ac:	21 50       	subi	r18, 0x01	; 1
    17ae:	31 09       	sbc	r19, r1
    17b0:	c9 01       	movw	r24, r18
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	82 0f       	add	r24, r18
    17b8:	93 1f       	adc	r25, r19
    17ba:	82 96       	adiw	r24, 0x22	; 34
    17bc:	fc 01       	movw	r30, r24
    17be:	80 81       	ld	r24, Z
    17c0:	68 2f       	mov	r22, r24
    17c2:	88 85       	ldd	r24, Y+8	; 0x08
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <gpio_register_pin+0x11c>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	2a 95       	dec	r18
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <gpio_register_pin+0x118>
    17d6:	80 95       	com	r24
    17d8:	86 23       	and	r24, r22
    17da:	fa 01       	movw	r30, r20
    17dc:	80 83       	st	Z, r24
        return 0;
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	48 c0       	rjmp	.+144    	; 0x1872 <gpio_register_pin+0x1bc>
	}
	else
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    17e2:	8f 81       	ldd	r24, Y+7	; 0x07
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	9c 01       	movw	r18, r24
    17ea:	21 50       	subi	r18, 0x01	; 1
    17ec:	31 09       	sbc	r19, r1
    17ee:	c9 01       	movw	r24, r18
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	82 0f       	add	r24, r18
    17f6:	93 1f       	adc	r25, r19
    17f8:	81 96       	adiw	r24, 0x21	; 33
    17fa:	ac 01       	movw	r20, r24
    17fc:	8f 81       	ldd	r24, Y+7	; 0x07
    17fe:	88 2f       	mov	r24, r24
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	9c 01       	movw	r18, r24
    1804:	21 50       	subi	r18, 0x01	; 1
    1806:	31 09       	sbc	r19, r1
    1808:	c9 01       	movw	r24, r18
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	82 0f       	add	r24, r18
    1810:	93 1f       	adc	r25, r19
    1812:	81 96       	adiw	r24, 0x21	; 33
    1814:	fc 01       	movw	r30, r24
    1816:	80 81       	ld	r24, Z
    1818:	68 2f       	mov	r22, r24
    181a:	88 85       	ldd	r24, Y+8	; 0x08
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 c0       	rjmp	.+4      	; 0x182a <gpio_register_pin+0x174>
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	2a 95       	dec	r18
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <gpio_register_pin+0x170>
    182e:	80 95       	com	r24
    1830:	86 23       	and	r24, r22
    1832:	fa 01       	movw	r30, r20
    1834:	80 83       	st	Z, r24

    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1836:	89 e0       	ldi	r24, 0x09	; 9
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <malloc>
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
    if(input == NULL)
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	89 2b       	or	r24, r25
    1848:	11 f4       	brne	.+4      	; 0x184e <gpio_register_pin+0x198>
        return 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	12 c0       	rjmp	.+36     	; 0x1872 <gpio_register_pin+0x1bc>

    input->pin       = pin;
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	9a 81       	ldd	r25, Y+2	; 0x02
    1852:	29 85       	ldd	r18, Y+9	; 0x09
    1854:	fc 01       	movw	r30, r24
    1856:	20 83       	st	Z, r18
    input->pulled_up = pulled_up;
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	9a 81       	ldd	r25, Y+2	; 0x02
    185c:	2b 85       	ldd	r18, Y+11	; 0x0b
    185e:	fc 01       	movw	r30, r24
    1860:	21 83       	std	Z+1, r18	; 0x01
    list_add(&input->list, &gpio_inputs);
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	9a 81       	ldd	r25, Y+2	; 0x02
    1866:	05 96       	adiw	r24, 0x05	; 5
    1868:	6b e0       	ldi	r22, 0x0B	; 11
    186a:	71 e0       	ldi	r23, 0x01	; 1
    186c:	0e 94 3e 0b 	call	0x167c	; 0x167c <list_add>

    return 0;
    1870:	80 e0       	ldi	r24, 0x00	; 0
}
    1872:	2b 96       	adiw	r28, 0x0b	; 11
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	08 95       	ret

00001884 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	00 d0       	rcall	.+0      	; 0x188a <gpio_write_pin+0x6>
    188a:	00 d0       	rcall	.+0      	; 0x188c <gpio_write_pin+0x8>
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	8b 83       	std	Y+3, r24	; 0x03
    1892:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	86 95       	lsr	r24
    1898:	86 95       	lsr	r24
    189a:	86 95       	lsr	r24
    189c:	8f 5f       	subi	r24, 0xFF	; 255
    189e:	89 83       	std	Y+1, r24	; 0x01
	pin = pin % 8;
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	87 70       	andi	r24, 0x07	; 7
    18a4:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	88 2f       	mov	r24, r24
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9c 01       	movw	r18, r24
    18ae:	21 50       	subi	r18, 0x01	; 1
    18b0:	31 09       	sbc	r19, r1
    18b2:	c9 01       	movw	r24, r18
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	82 0f       	add	r24, r18
    18ba:	93 1f       	adc	r25, r19
    18bc:	82 96       	adiw	r24, 0x22	; 34
    18be:	fc 01       	movw	r30, r24
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
    18c4:	a2 81       	ldd	r26, Z+2	; 0x02
    18c6:	b3 81       	ldd	r27, Z+3	; 0x03
    18c8:	8a 83       	std	Y+2, r24	; 0x02
	if(value != 0)
    18ca:	8c 81       	ldd	r24, Y+4	; 0x04
    18cc:	88 23       	and	r24, r24
    18ce:	31 f1       	breq	.+76     	; 0x191c <gpio_write_pin+0x98>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9c 01       	movw	r18, r24
    18d8:	21 50       	subi	r18, 0x01	; 1
    18da:	31 09       	sbc	r19, r1
    18dc:	c9 01       	movw	r24, r18
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	82 0f       	add	r24, r18
    18e4:	93 1f       	adc	r25, r19
    18e6:	82 96       	adiw	r24, 0x22	; 34
    18e8:	ac 01       	movw	r20, r24
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	68 2f       	mov	r22, r24
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <gpio_write_pin+0x7c>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	6a 95       	dec	r22
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <gpio_write_pin+0x78>
    1904:	82 2b       	or	r24, r18
    1906:	93 2b       	or	r25, r19
    1908:	09 2e       	mov	r0, r25
    190a:	00 0c       	add	r0, r0
    190c:	aa 0b       	sbc	r26, r26
    190e:	bb 0b       	sbc	r27, r27
    1910:	fa 01       	movw	r30, r20
    1912:	80 83       	st	Z, r24
    1914:	91 83       	std	Z+1, r25	; 0x01
    1916:	a2 83       	std	Z+2, r26	; 0x02
    1918:	b3 83       	std	Z+3, r27	; 0x03
    191a:	27 c0       	rjmp	.+78     	; 0x196a <gpio_write_pin+0xe6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	9c 01       	movw	r18, r24
    1924:	21 50       	subi	r18, 0x01	; 1
    1926:	31 09       	sbc	r19, r1
    1928:	c9 01       	movw	r24, r18
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	82 0f       	add	r24, r18
    1930:	93 1f       	adc	r25, r19
    1932:	82 96       	adiw	r24, 0x22	; 34
    1934:	ac 01       	movw	r20, r24
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	68 2f       	mov	r22, r24
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 c0       	rjmp	.+4      	; 0x194c <gpio_write_pin+0xc8>
    1948:	88 0f       	add	r24, r24
    194a:	99 1f       	adc	r25, r25
    194c:	6a 95       	dec	r22
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <gpio_write_pin+0xc4>
    1950:	80 95       	com	r24
    1952:	90 95       	com	r25
    1954:	82 23       	and	r24, r18
    1956:	93 23       	and	r25, r19
    1958:	09 2e       	mov	r0, r25
    195a:	00 0c       	add	r0, r0
    195c:	aa 0b       	sbc	r26, r26
    195e:	bb 0b       	sbc	r27, r27
    1960:	fa 01       	movw	r30, r20
    1962:	80 83       	st	Z, r24
    1964:	91 83       	std	Z+1, r25	; 0x01
    1966:	a2 83       	std	Z+2, r26	; 0x02
    1968:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    196a:	80 e0       	ldi	r24, 0x00	; 0
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	00 d0       	rcall	.+0      	; 0x1980 <__gpio_read_pin+0x6>
    1980:	1f 92       	push	r1
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	86 95       	lsr	r24
    198c:	86 95       	lsr	r24
    198e:	86 95       	lsr	r24
    1990:	8f 5f       	subi	r24, 0xFF	; 255
    1992:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	87 70       	andi	r24, 0x07	; 7
    1998:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9c 01       	movw	r18, r24
    19a2:	21 50       	subi	r18, 0x01	; 1
    19a4:	31 09       	sbc	r19, r1
    19a6:	c9 01       	movw	r24, r18
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	82 0f       	add	r24, r18
    19ae:	93 1f       	adc	r25, r19
    19b0:	80 96       	adiw	r24, 0x20	; 32
    19b2:	fc 01       	movw	r30, r24
    19b4:	80 81       	ld	r24, Z
    19b6:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	88 2f       	mov	r24, r24
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	2b 81       	ldd	r18, Y+3	; 0x03
    19c0:	22 2f       	mov	r18, r18
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <__gpio_read_pin+0x50>
    19c6:	95 95       	asr	r25
    19c8:	87 95       	ror	r24
    19ca:	2a 95       	dec	r18
    19cc:	e2 f7       	brpl	.-8      	; 0x19c6 <__gpio_read_pin+0x4c>
    19ce:	81 70       	andi	r24, 0x01	; 1
}
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	08 95       	ret

000019dc <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	29 97       	sbiw	r28, 0x09	; 9
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    19f2:	80 91 0d 01 	lds	r24, 0x010D
    19f6:	90 91 0e 01 	lds	r25, 0x010E
    19fa:	9d 83       	std	Y+5, r25	; 0x05
    19fc:	8c 83       	std	Y+4, r24	; 0x04
    19fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1a00:	9d 81       	ldd	r25, Y+5	; 0x05
    1a02:	05 97       	sbiw	r24, 0x05	; 5
    1a04:	9a 83       	std	Y+2, r25	; 0x02
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	55 c0       	rjmp	.+170    	; 0x1ab4 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	fc 01       	movw	r30, r24
    1a10:	90 81       	ld	r25, Z
    1a12:	89 85       	ldd	r24, Y+9	; 0x09
    1a14:	98 17       	cp	r25, r24
    1a16:	09 f0       	breq	.+2      	; 0x1a1a <gpio_read_pin+0x3e>
    1a18:	41 c0       	rjmp	.+130    	; 0x1a9c <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
    1a1a:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1a1c:	1f c0       	rjmp	.+62     	; 0x1a5c <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	88 2f       	mov	r24, r24
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	29 81       	ldd	r18, Y+1	; 0x01
    1a26:	3a 81       	ldd	r19, Y+2	; 0x02
    1a28:	82 0f       	add	r24, r18
    1a2a:	93 1f       	adc	r25, r19
    1a2c:	02 96       	adiw	r24, 0x02	; 2
    1a2e:	fc 01       	movw	r30, r24
    1a30:	40 81       	ld	r20, Z
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	29 81       	ldd	r18, Y+1	; 0x01
    1a3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a3e:	82 0f       	add	r24, r18
    1a40:	93 1f       	adc	r25, r19
    1a42:	02 96       	adiw	r24, 0x02	; 2
    1a44:	fc 01       	movw	r30, r24
    1a46:	80 81       	ld	r24, Z
    1a48:	48 17       	cp	r20, r24
    1a4a:	29 f0       	breq	.+10     	; 0x1a56 <gpio_read_pin+0x7a>
                    return input->previous_state;
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a50:	fc 01       	movw	r30, r24
    1a52:	84 81       	ldd	r24, Z+4	; 0x04
    1a54:	37 c0       	rjmp	.+110    	; 0x1ac4 <gpio_read_pin+0xe8>
                i++;
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	8f 5f       	subi	r24, 0xFF	; 255
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	88 23       	and	r24, r24
    1a60:	f1 f2       	breq	.-68     	; 0x1a1e <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	9a 81       	ldd	r25, Y+2	; 0x02
    1a66:	fc 01       	movw	r30, r24
    1a68:	91 81       	ldd	r25, Z+1	; 0x01
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	89 27       	eor	r24, r25
    1a6e:	88 23       	and	r24, r24
    1a70:	29 f0       	breq	.+10     	; 0x1a7c <gpio_read_pin+0xa0>
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	fc 01       	movw	r30, r24
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	08 c0       	rjmp	.+16     	; 0x1a8c <gpio_read_pin+0xb0>
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	fc 01       	movw	r30, r24
    1a82:	92 81       	ldd	r25, Z+2	; 0x02
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	99 23       	and	r25, r25
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <gpio_read_pin+0xb0>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	9a 81       	ldd	r25, Y+2	; 0x02
    1a92:	28 85       	ldd	r18, Y+8	; 0x08
    1a94:	fc 01       	movw	r30, r24
    1a96:	24 83       	std	Z+4, r18	; 0x04

            return state;
    1a98:	88 85       	ldd	r24, Y+8	; 0x08
    1a9a:	14 c0       	rjmp	.+40     	; 0x1ac4 <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	87 81       	ldd	r24, Z+7	; 0x07
    1aa4:	90 85       	ldd	r25, Z+8	; 0x08
    1aa6:	9f 83       	std	Y+7, r25	; 0x07
    1aa8:	8e 83       	std	Y+6, r24	; 0x06
    1aaa:	8e 81       	ldd	r24, Y+6	; 0x06
    1aac:	9f 81       	ldd	r25, Y+7	; 0x07
    1aae:	05 97       	sbiw	r24, 0x05	; 5
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	05 96       	adiw	r24, 0x05	; 5
    1aba:	8b 50       	subi	r24, 0x0B	; 11
    1abc:	91 40       	sbci	r25, 0x01	; 1
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <gpio_read_pin+0xe6>
    1ac0:	a4 cf       	rjmp	.-184    	; 0x1a0a <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
}
    1ac4:	29 96       	adiw	r28, 0x09	; 9
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	08 95       	ret

00001ad6 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    1ad6:	0f 93       	push	r16
    1ad8:	1f 93       	push	r17
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <gpio_debouncer+0xa>
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <gpio_debouncer+0xc>
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <gpio_debouncer+0xe>
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1ae8:	80 91 0d 01 	lds	r24, 0x010D
    1aec:	90 91 0e 01 	lds	r25, 0x010E
    1af0:	9c 83       	std	Y+4, r25	; 0x04
    1af2:	8b 83       	std	Y+3, r24	; 0x03
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	05 97       	sbiw	r24, 0x05	; 5
    1afa:	9a 83       	std	Y+2, r25	; 0x02
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	1e c0       	rjmp	.+60     	; 0x1b3c <gpio_debouncer+0x66>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    1b00:	00 91 d2 01 	lds	r16, 0x01D2
    1b04:	10 91 d3 01 	lds	r17, 0x01D3
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	80 81       	ld	r24, Z
    1b10:	0e 94 bd 0c 	call	0x197a	; 0x197a <__gpio_read_pin>
    1b14:	28 2f       	mov	r18, r24
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1a:	80 0f       	add	r24, r16
    1b1c:	91 1f       	adc	r25, r17
    1b1e:	02 96       	adiw	r24, 0x02	; 2
    1b20:	fc 01       	movw	r30, r24
    1b22:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	fc 01       	movw	r30, r24
    1b2a:	87 81       	ldd	r24, Z+7	; 0x07
    1b2c:	90 85       	ldd	r25, Z+8	; 0x08
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	05 97       	sbiw	r24, 0x05	; 5
    1b38:	9a 83       	std	Y+2, r25	; 0x02
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b40:	05 96       	adiw	r24, 0x05	; 5
    1b42:	8b 50       	subi	r24, 0x0B	; 11
    1b44:	91 40       	sbci	r25, 0x01	; 1
    1b46:	e1 f6       	brne	.-72     	; 0x1b00 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1b48:	80 91 d2 01 	lds	r24, 0x01D2
    1b4c:	90 91 d3 01 	lds	r25, 0x01D3
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	90 93 d3 01 	sts	0x01D3, r25
    1b56:	80 93 d2 01 	sts	0x01D2, r24
    1b5a:	02 97       	sbiw	r24, 0x02	; 2
    1b5c:	21 f4       	brne	.+8      	; 0x1b66 <gpio_debouncer+0x90>
        count = 0;
    1b5e:	10 92 d3 01 	sts	0x01D3, r1
    1b62:	10 92 d2 01 	sts	0x01D2, r1

}
    1b66:	26 96       	adiw	r28, 0x06	; 6
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	08 95       	ret

00001b7c <odometry_set_speed>:
 * 	void odometry_set_speed(uint8_t speed)
 *
 * 	Send odometry board the max speed
 */
void odometry_set_speed(uint8_t speed)
{
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	67 97       	sbiw	r28, 0x17	; 23
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1b92:	80 91 d4 01 	lds	r24, 0x01D4
    1b96:	9f 89       	ldd	r25, Y+23	; 0x17
    1b98:	98 17       	cp	r25, r24
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <odometry_set_speed+0x22>
    1b9c:	82 c0       	rjmp	.+260    	; 0x1ca2 <odometry_set_speed+0x126>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1b9e:	86 e5       	ldi	r24, 0x56	; 86
    1ba0:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1ba2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba4:	88 8b       	std	Y+16, r24	; 0x10
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1ba6:	72 c0       	rjmp	.+228    	; 0x1c8c <odometry_set_speed+0x110>
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a8 e4       	ldi	r26, 0x48	; 72
    1bae:	b2 e4       	ldi	r27, 0x42	; 66
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	9a 83       	std	Y+2, r25	; 0x02
    1bb4:	ab 83       	std	Y+3, r26	; 0x03
    1bb6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e4       	ldi	r19, 0x40	; 64
    1bbc:	4c e1       	ldi	r20, 0x1C	; 28
    1bbe:	55 e4       	ldi	r21, 0x45	; 69
    1bc0:	69 81       	ldd	r22, Y+1	; 0x01
    1bc2:	7a 81       	ldd	r23, Y+2	; 0x02
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	af 83       	std	Y+7, r26	; 0x07
    1bd6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	6d 81       	ldd	r22, Y+5	; 0x05
    1be2:	7e 81       	ldd	r23, Y+6	; 0x06
    1be4:	8f 81       	ldd	r24, Y+7	; 0x07
    1be6:	98 85       	ldd	r25, Y+8	; 0x08
    1be8:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    1bec:	88 23       	and	r24, r24
    1bee:	2c f4       	brge	.+10     	; 0x1bfa <odometry_set_speed+0x7e>
		__ticks = 1;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9a 87       	std	Y+10, r25	; 0x0a
    1bf6:	89 87       	std	Y+9, r24	; 0x09
    1bf8:	3f c0       	rjmp	.+126    	; 0x1c78 <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
    1bfe:	4f e7       	ldi	r20, 0x7F	; 127
    1c00:	57 e4       	ldi	r21, 0x47	; 71
    1c02:	6d 81       	ldd	r22, Y+5	; 0x05
    1c04:	7e 81       	ldd	r23, Y+6	; 0x06
    1c06:	8f 81       	ldd	r24, Y+7	; 0x07
    1c08:	98 85       	ldd	r25, Y+8	; 0x08
    1c0a:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	4c f5       	brge	.+82     	; 0x1c64 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	69 81       	ldd	r22, Y+1	; 0x01
    1c1c:	7a 81       	ldd	r23, Y+2	; 0x02
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9a 87       	std	Y+10, r25	; 0x0a
    1c38:	89 87       	std	Y+9, r24	; 0x09
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <odometry_set_speed+0xde>
    1c3c:	8a ef       	ldi	r24, 0xFA	; 250
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9c 87       	std	Y+12, r25	; 0x0c
    1c42:	8b 87       	std	Y+11, r24	; 0x0b
    1c44:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c46:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <odometry_set_speed+0xcc>
    1c4c:	9c 87       	std	Y+12, r25	; 0x0c
    1c4e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c50:	89 85       	ldd	r24, Y+9	; 0x09
    1c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	9a 87       	std	Y+10, r25	; 0x0a
    1c58:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	89 85       	ldd	r24, Y+9	; 0x09
    1c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5e:	89 2b       	or	r24, r25
    1c60:	69 f7       	brne	.-38     	; 0x1c3c <odometry_set_speed+0xc0>
    1c62:	14 c0       	rjmp	.+40     	; 0x1c8c <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	6d 81       	ldd	r22, Y+5	; 0x05
    1c66:	7e 81       	ldd	r23, Y+6	; 0x06
    1c68:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6a:	98 85       	ldd	r25, Y+8	; 0x08
    1c6c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9a 87       	std	Y+10, r25	; 0x0a
    1c76:	89 87       	std	Y+9, r24	; 0x09
    1c78:	89 85       	ldd	r24, Y+9	; 0x09
    1c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7c:	9e 87       	std	Y+14, r25	; 0x0e
    1c7e:	8d 87       	std	Y+13, r24	; 0x0d
    1c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <odometry_set_speed+0x108>
    1c88:	9e 87       	std	Y+14, r25	; 0x0e
    1c8a:	8d 87       	std	Y+13, r24	; 0x0d
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	0f 96       	adiw	r24, 0x0f	; 15
    1c90:	63 ec       	ldi	r22, 0xC3	; 195
    1c92:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
    1c96:	88 23       	and	r24, r24
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <odometry_set_speed+0x120>
    1c9a:	86 cf       	rjmp	.-244    	; 0x1ba8 <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    1c9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9e:	80 93 d4 01 	sts	0x01D4, r24
}
    1ca2:	67 96       	adiw	r28, 0x17	; 23
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	08 95       	ret

00001cb4 <odometry_query_position>:
 * 	void odometry_query_position(void)
 *
 * 	Get the current position. Update it to position
 */
void odometry_query_position(void)
{
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	66 97       	sbiw	r28, 0x16	; 22
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1cc8:	80 e5       	ldi	r24, 0x50	; 80
    1cca:	8f 87       	std	Y+15, r24	; 0x0f
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1ccc:	72 c0       	rjmp	.+228    	; 0x1db2 <odometry_query_position+0xfe>
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a8 e4       	ldi	r26, 0x48	; 72
    1cd4:	b2 e4       	ldi	r27, 0x42	; 66
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	9a 83       	std	Y+2, r25	; 0x02
    1cda:	ab 83       	std	Y+3, r26	; 0x03
    1cdc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e4       	ldi	r19, 0x40	; 64
    1ce2:	4c e1       	ldi	r20, 0x1C	; 28
    1ce4:	55 e4       	ldi	r21, 0x45	; 69
    1ce6:	69 81       	ldd	r22, Y+1	; 0x01
    1ce8:	7a 81       	ldd	r23, Y+2	; 0x02
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	8d 83       	std	Y+5, r24	; 0x05
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	af 83       	std	Y+7, r26	; 0x07
    1cfc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	6d 81       	ldd	r22, Y+5	; 0x05
    1d08:	7e 81       	ldd	r23, Y+6	; 0x06
    1d0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0c:	98 85       	ldd	r25, Y+8	; 0x08
    1d0e:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    1d12:	88 23       	and	r24, r24
    1d14:	2c f4       	brge	.+10     	; 0x1d20 <odometry_query_position+0x6c>
		__ticks = 1;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9a 87       	std	Y+10, r25	; 0x0a
    1d1c:	89 87       	std	Y+9, r24	; 0x09
    1d1e:	3f c0       	rjmp	.+126    	; 0x1d9e <odometry_query_position+0xea>
	else if (__tmp > 65535)
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	4f e7       	ldi	r20, 0x7F	; 127
    1d26:	57 e4       	ldi	r21, 0x47	; 71
    1d28:	6d 81       	ldd	r22, Y+5	; 0x05
    1d2a:	7e 81       	ldd	r23, Y+6	; 0x06
    1d2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d2e:	98 85       	ldd	r25, Y+8	; 0x08
    1d30:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    1d34:	18 16       	cp	r1, r24
    1d36:	4c f5       	brge	.+82     	; 0x1d8a <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e2       	ldi	r20, 0x20	; 32
    1d3e:	51 e4       	ldi	r21, 0x41	; 65
    1d40:	69 81       	ldd	r22, Y+1	; 0x01
    1d42:	7a 81       	ldd	r23, Y+2	; 0x02
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	9c 81       	ldd	r25, Y+4	; 0x04
    1d48:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9a 87       	std	Y+10, r25	; 0x0a
    1d5e:	89 87       	std	Y+9, r24	; 0x09
    1d60:	0f c0       	rjmp	.+30     	; 0x1d80 <odometry_query_position+0xcc>
    1d62:	8a ef       	ldi	r24, 0xFA	; 250
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	9c 87       	std	Y+12, r25	; 0x0c
    1d68:	8b 87       	std	Y+11, r24	; 0x0b
    1d6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d6c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <odometry_query_position+0xba>
    1d72:	9c 87       	std	Y+12, r25	; 0x0c
    1d74:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d76:	89 85       	ldd	r24, Y+9	; 0x09
    1d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	9a 87       	std	Y+10, r25	; 0x0a
    1d7e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d80:	89 85       	ldd	r24, Y+9	; 0x09
    1d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d84:	89 2b       	or	r24, r25
    1d86:	69 f7       	brne	.-38     	; 0x1d62 <odometry_query_position+0xae>
    1d88:	14 c0       	rjmp	.+40     	; 0x1db2 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8a:	6d 81       	ldd	r22, Y+5	; 0x05
    1d8c:	7e 81       	ldd	r23, Y+6	; 0x06
    1d8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d90:	98 85       	ldd	r25, Y+8	; 0x08
    1d92:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9a 87       	std	Y+10, r25	; 0x0a
    1d9c:	89 87       	std	Y+9, r24	; 0x09
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	9e 87       	std	Y+14, r25	; 0x0e
    1da4:	8d 87       	std	Y+13, r24	; 0x0d
    1da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <odometry_query_position+0xf6>
    1dae:	9e 87       	std	Y+14, r25	; 0x0e
    1db0:	8d 87       	std	Y+13, r24	; 0x0d
    1db2:	ce 01       	movw	r24, r28
    1db4:	0f 96       	adiw	r24, 0x0f	; 15
    1db6:	63 ec       	ldi	r22, 0xC3	; 195
    1db8:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
    1dbc:	88 23       	and	r24, r24
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <odometry_query_position+0x10e>
    1dc0:	86 cf       	rjmp	.-244    	; 0x1cce <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1dc2:	ce 01       	movw	r24, r28
    1dc4:	0f 96       	adiw	r24, 0x0f	; 15
    1dc6:	61 e0       	ldi	r22, 0x01	; 1
    1dc8:	0e 94 06 0a 	call	0x140c	; 0x140c <CAN_Read>

	position.state = buffer[0];
    1dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dce:	80 93 15 01 	sts	0x0115, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1dd2:	88 89       	ldd	r24, Y+16	; 0x10
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	38 2f       	mov	r19, r24
    1dda:	22 27       	eor	r18, r18
    1ddc:	89 89       	ldd	r24, Y+17	; 0x11
    1dde:	88 2f       	mov	r24, r24
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	82 2b       	or	r24, r18
    1de4:	93 2b       	or	r25, r19
    1de6:	90 93 10 01 	sts	0x0110, r25
    1dea:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1dee:	8a 89       	ldd	r24, Y+18	; 0x12
    1df0:	88 2f       	mov	r24, r24
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	38 2f       	mov	r19, r24
    1df6:	22 27       	eor	r18, r18
    1df8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfa:	88 2f       	mov	r24, r24
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	82 2b       	or	r24, r18
    1e00:	93 2b       	or	r25, r19
    1e02:	90 93 12 01 	sts	0x0112, r25
    1e06:	80 93 11 01 	sts	0x0111, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    1e0a:	8c 89       	ldd	r24, Y+20	; 0x14
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	38 2f       	mov	r19, r24
    1e12:	22 27       	eor	r18, r18
    1e14:	8d 89       	ldd	r24, Y+21	; 0x15
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	82 2b       	or	r24, r18
    1e1c:	93 2b       	or	r25, r19
    1e1e:	90 93 14 01 	sts	0x0114, r25
    1e22:	80 93 13 01 	sts	0x0113, r24
}
    1e26:	66 96       	adiw	r28, 0x16	; 22
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	08 95       	ret

00001e38 <odometry_wait_until_done>:
 * 	static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
 *
 * 	Callback function, execute function while odometry is moving
 */
static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <odometry_wait_until_done+0x6>
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <odometry_wait_until_done+0x8>
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <odometry_wait_until_done+0xa>
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	9e 83       	std	Y+6, r25	; 0x06
    1e48:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    1e4a:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <system_get_system_time>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	9a 83       	std	Y+2, r25	; 0x02
    1e56:	ab 83       	std	Y+3, r26	; 0x03
    1e58:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    1e5a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <odometry_query_position>
		if(callback != NULL)
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	89 2b       	or	r24, r25
    1e64:	71 f0       	breq	.+28     	; 0x1e82 <odometry_wait_until_done+0x4a>
		{
			if(callback(time) == 1)
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6a:	ab 81       	ldd	r26, Y+3	; 0x03
    1e6c:	bc 81       	ldd	r27, Y+4	; 0x04
    1e6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e70:	3e 81       	ldd	r19, Y+6	; 0x06
    1e72:	bc 01       	movw	r22, r24
    1e74:	cd 01       	movw	r24, r26
    1e76:	f9 01       	movw	r30, r18
    1e78:	09 95       	icall
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	11 f4       	brne	.+4      	; 0x1e82 <odometry_wait_until_done+0x4a>
				return ODOMETRY_FAIL;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	09 c0       	rjmp	.+18     	; 0x1e94 <odometry_wait_until_done+0x5c>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1e82:	80 91 15 01 	lds	r24, 0x0115
    1e86:	8d 34       	cpi	r24, 0x4D	; 77
    1e88:	41 f3       	breq	.-48     	; 0x1e5a <odometry_wait_until_done+0x22>
    1e8a:	80 91 15 01 	lds	r24, 0x0115
    1e8e:	82 35       	cpi	r24, 0x52	; 82
    1e90:	21 f3       	breq	.-56     	; 0x1e5a <odometry_wait_until_done+0x22>

	return ODOMETRY_SUCCESS;
    1e92:	80 e0       	ldi	r24, 0x00	; 0
}
    1e94:	26 96       	adiw	r28, 0x06	; 6
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	08 95       	ret

00001ea6 <odometry_stop>:
 * 	void odometry_stop(int8_t type)
 *
 * 	Send stop to odometry
 */
void odometry_stop(int8_t type)
{
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	67 97       	sbiw	r28, 0x17	; 23
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    1ebc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ebe:	8f 87       	std	Y+15, r24	; 0x0f

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1ec0:	72 c0       	rjmp	.+228    	; 0x1fa6 <odometry_stop+0x100>
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	a8 e4       	ldi	r26, 0x48	; 72
    1ec8:	b2 e4       	ldi	r27, 0x42	; 66
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	ab 83       	std	Y+3, r26	; 0x03
    1ed0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e4       	ldi	r19, 0x40	; 64
    1ed6:	4c e1       	ldi	r20, 0x1C	; 28
    1ed8:	55 e4       	ldi	r21, 0x45	; 69
    1eda:	69 81       	ldd	r22, Y+1	; 0x01
    1edc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	8d 83       	std	Y+5, r24	; 0x05
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	af 83       	std	Y+7, r26	; 0x07
    1ef0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e8       	ldi	r20, 0x80	; 128
    1ef8:	5f e3       	ldi	r21, 0x3F	; 63
    1efa:	6d 81       	ldd	r22, Y+5	; 0x05
    1efc:	7e 81       	ldd	r23, Y+6	; 0x06
    1efe:	8f 81       	ldd	r24, Y+7	; 0x07
    1f00:	98 85       	ldd	r25, Y+8	; 0x08
    1f02:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    1f06:	88 23       	and	r24, r24
    1f08:	2c f4       	brge	.+10     	; 0x1f14 <odometry_stop+0x6e>
		__ticks = 1;
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	9a 87       	std	Y+10, r25	; 0x0a
    1f10:	89 87       	std	Y+9, r24	; 0x09
    1f12:	3f c0       	rjmp	.+126    	; 0x1f92 <odometry_stop+0xec>
	else if (__tmp > 65535)
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	3f ef       	ldi	r19, 0xFF	; 255
    1f18:	4f e7       	ldi	r20, 0x7F	; 127
    1f1a:	57 e4       	ldi	r21, 0x47	; 71
    1f1c:	6d 81       	ldd	r22, Y+5	; 0x05
    1f1e:	7e 81       	ldd	r23, Y+6	; 0x06
    1f20:	8f 81       	ldd	r24, Y+7	; 0x07
    1f22:	98 85       	ldd	r25, Y+8	; 0x08
    1f24:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    1f28:	18 16       	cp	r1, r24
    1f2a:	4c f5       	brge	.+82     	; 0x1f7e <odometry_stop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e2       	ldi	r20, 0x20	; 32
    1f32:	51 e4       	ldi	r21, 0x41	; 65
    1f34:	69 81       	ldd	r22, Y+1	; 0x01
    1f36:	7a 81       	ldd	r23, Y+2	; 0x02
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3c:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9a 87       	std	Y+10, r25	; 0x0a
    1f52:	89 87       	std	Y+9, r24	; 0x09
    1f54:	0f c0       	rjmp	.+30     	; 0x1f74 <odometry_stop+0xce>
    1f56:	8a ef       	ldi	r24, 0xFA	; 250
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9c 87       	std	Y+12, r25	; 0x0c
    1f5c:	8b 87       	std	Y+11, r24	; 0x0b
    1f5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f60:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <odometry_stop+0xbc>
    1f66:	9c 87       	std	Y+12, r25	; 0x0c
    1f68:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6a:	89 85       	ldd	r24, Y+9	; 0x09
    1f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	9a 87       	std	Y+10, r25	; 0x0a
    1f72:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	89 2b       	or	r24, r25
    1f7a:	69 f7       	brne	.-38     	; 0x1f56 <odometry_stop+0xb0>
    1f7c:	14 c0       	rjmp	.+40     	; 0x1fa6 <odometry_stop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7e:	6d 81       	ldd	r22, Y+5	; 0x05
    1f80:	7e 81       	ldd	r23, Y+6	; 0x06
    1f82:	8f 81       	ldd	r24, Y+7	; 0x07
    1f84:	98 85       	ldd	r25, Y+8	; 0x08
    1f86:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9a 87       	std	Y+10, r25	; 0x0a
    1f90:	89 87       	std	Y+9, r24	; 0x09
    1f92:	89 85       	ldd	r24, Y+9	; 0x09
    1f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f96:	9e 87       	std	Y+14, r25	; 0x0e
    1f98:	8d 87       	std	Y+13, r24	; 0x0d
    1f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <odometry_stop+0xf8>
    1fa2:	9e 87       	std	Y+14, r25	; 0x0e
    1fa4:	8d 87       	std	Y+13, r24	; 0x0d
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	0f 96       	adiw	r24, 0x0f	; 15
    1faa:	63 ec       	ldi	r22, 0xC3	; 195
    1fac:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
    1fb0:	88 23       	and	r24, r24
    1fb2:	09 f0       	breq	.+2      	; 0x1fb6 <odometry_stop+0x110>
    1fb4:	86 cf       	rjmp	.-244    	; 0x1ec2 <odometry_stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    1fb6:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    1fba:	80 91 15 01 	lds	r24, 0x0115
    1fbe:	8d 34       	cpi	r24, 0x4D	; 77
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <odometry_stop+0x11e>
    1fc2:	7c cf       	rjmp	.-264    	; 0x1ebc <odometry_stop+0x16>
    1fc4:	80 91 15 01 	lds	r24, 0x0115
    1fc8:	82 35       	cpi	r24, 0x52	; 82
    1fca:	09 f4       	brne	.+2      	; 0x1fce <odometry_stop+0x128>
    1fcc:	77 cf       	rjmp	.-274    	; 0x1ebc <odometry_stop+0x16>
}
    1fce:	67 96       	adiw	r28, 0x17	; 23
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	08 95       	ret

00001fe0 <odometry_move_straight>:
 * 	uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move straight command to odometry
 */
uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	6b 97       	sbiw	r28, 0x1b	; 27
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	98 8f       	std	Y+24, r25	; 0x18
    1ff6:	8f 8b       	std	Y+23, r24	; 0x17
    1ff8:	69 8f       	std	Y+25, r22	; 0x19
    1ffa:	5b 8f       	std	Y+27, r21	; 0x1b
    1ffc:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1ffe:	89 8d       	ldd	r24, Y+25	; 0x19
    2000:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <odometry_set_speed>
	buffer[0] = 'D';
    2004:	84 e4       	ldi	r24, 0x44	; 68
    2006:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    2008:	8f 89       	ldd	r24, Y+23	; 0x17
    200a:	98 8d       	ldd	r25, Y+24	; 0x18
    200c:	89 2f       	mov	r24, r25
    200e:	99 0f       	add	r25, r25
    2010:	99 0b       	sbc	r25, r25
    2012:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    2014:	8f 89       	ldd	r24, Y+23	; 0x17
    2016:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2018:	72 c0       	rjmp	.+228    	; 0x20fe <odometry_move_straight+0x11e>
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a8 e4       	ldi	r26, 0x48	; 72
    2020:	b2 e4       	ldi	r27, 0x42	; 66
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	9a 83       	std	Y+2, r25	; 0x02
    2026:	ab 83       	std	Y+3, r26	; 0x03
    2028:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e4       	ldi	r19, 0x40	; 64
    202e:	4c e1       	ldi	r20, 0x1C	; 28
    2030:	55 e4       	ldi	r21, 0x45	; 69
    2032:	69 81       	ldd	r22, Y+1	; 0x01
    2034:	7a 81       	ldd	r23, Y+2	; 0x02
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	9c 81       	ldd	r25, Y+4	; 0x04
    203a:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	8d 83       	std	Y+5, r24	; 0x05
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	af 83       	std	Y+7, r26	; 0x07
    2048:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	5f e3       	ldi	r21, 0x3F	; 63
    2052:	6d 81       	ldd	r22, Y+5	; 0x05
    2054:	7e 81       	ldd	r23, Y+6	; 0x06
    2056:	8f 81       	ldd	r24, Y+7	; 0x07
    2058:	98 85       	ldd	r25, Y+8	; 0x08
    205a:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    205e:	88 23       	and	r24, r24
    2060:	2c f4       	brge	.+10     	; 0x206c <odometry_move_straight+0x8c>
		__ticks = 1;
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	9a 87       	std	Y+10, r25	; 0x0a
    2068:	89 87       	std	Y+9, r24	; 0x09
    206a:	3f c0       	rjmp	.+126    	; 0x20ea <odometry_move_straight+0x10a>
	else if (__tmp > 65535)
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	4f e7       	ldi	r20, 0x7F	; 127
    2072:	57 e4       	ldi	r21, 0x47	; 71
    2074:	6d 81       	ldd	r22, Y+5	; 0x05
    2076:	7e 81       	ldd	r23, Y+6	; 0x06
    2078:	8f 81       	ldd	r24, Y+7	; 0x07
    207a:	98 85       	ldd	r25, Y+8	; 0x08
    207c:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    2080:	18 16       	cp	r1, r24
    2082:	4c f5       	brge	.+82     	; 0x20d6 <odometry_move_straight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	69 81       	ldd	r22, Y+1	; 0x01
    208e:	7a 81       	ldd	r23, Y+2	; 0x02
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	bc 01       	movw	r22, r24
    209e:	cd 01       	movw	r24, r26
    20a0:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	9a 87       	std	Y+10, r25	; 0x0a
    20aa:	89 87       	std	Y+9, r24	; 0x09
    20ac:	0f c0       	rjmp	.+30     	; 0x20cc <odometry_move_straight+0xec>
    20ae:	8a ef       	ldi	r24, 0xFA	; 250
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	9c 87       	std	Y+12, r25	; 0x0c
    20b4:	8b 87       	std	Y+11, r24	; 0x0b
    20b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    20b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <odometry_move_straight+0xda>
    20be:	9c 87       	std	Y+12, r25	; 0x0c
    20c0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c2:	89 85       	ldd	r24, Y+9	; 0x09
    20c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	9a 87       	std	Y+10, r25	; 0x0a
    20ca:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20cc:	89 85       	ldd	r24, Y+9	; 0x09
    20ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d0:	89 2b       	or	r24, r25
    20d2:	69 f7       	brne	.-38     	; 0x20ae <odometry_move_straight+0xce>
    20d4:	14 c0       	rjmp	.+40     	; 0x20fe <odometry_move_straight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d6:	6d 81       	ldd	r22, Y+5	; 0x05
    20d8:	7e 81       	ldd	r23, Y+6	; 0x06
    20da:	8f 81       	ldd	r24, Y+7	; 0x07
    20dc:	98 85       	ldd	r25, Y+8	; 0x08
    20de:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9a 87       	std	Y+10, r25	; 0x0a
    20e8:	89 87       	std	Y+9, r24	; 0x09
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	9e 87       	std	Y+14, r25	; 0x0e
    20f0:	8d 87       	std	Y+13, r24	; 0x0d
    20f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <odometry_move_straight+0x116>
    20fa:	9e 87       	std	Y+14, r25	; 0x0e
    20fc:	8d 87       	std	Y+13, r24	; 0x0d
    20fe:	ce 01       	movw	r24, r28
    2100:	0f 96       	adiw	r24, 0x0f	; 15
    2102:	63 ec       	ldi	r22, 0xC3	; 195
    2104:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
    2108:	88 23       	and	r24, r24
    210a:	09 f0       	breq	.+2      	; 0x210e <odometry_move_straight+0x12e>
    210c:	86 cf       	rjmp	.-244    	; 0x201a <odometry_move_straight+0x3a>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    210e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2110:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2112:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <odometry_wait_until_done>
}
    2116:	6b 96       	adiw	r28, 0x1b	; 27
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	08 95       	ret

00002128 <odometry_move_to_position>:
 * 	uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move to position function to odometry
 */
uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, char (*callback)(uint32_t start_time))
{
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	6c 97       	sbiw	r28, 0x1c	; 28
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	98 8f       	std	Y+24, r25	; 0x18
    213e:	8f 8b       	std	Y+23, r24	; 0x17
    2140:	69 8f       	std	Y+25, r22	; 0x19
    2142:	4a 8f       	std	Y+26, r20	; 0x1a
    2144:	3c 8f       	std	Y+28, r19	; 0x1c
    2146:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    2148:	89 8d       	ldd	r24, Y+25	; 0x19
    214a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <odometry_set_speed>

	buffer[0] = 'G';
    214e:	87 e4       	ldi	r24, 0x47	; 71
    2150:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    2152:	8f 89       	ldd	r24, Y+23	; 0x17
    2154:	98 8d       	ldd	r25, Y+24	; 0x18
    2156:	fc 01       	movw	r30, r24
    2158:	80 81       	ld	r24, Z
    215a:	91 81       	ldd	r25, Z+1	; 0x01
    215c:	89 2f       	mov	r24, r25
    215e:	99 0f       	add	r25, r25
    2160:	99 0b       	sbc	r25, r25
    2162:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    2164:	8f 89       	ldd	r24, Y+23	; 0x17
    2166:	98 8d       	ldd	r25, Y+24	; 0x18
    2168:	fc 01       	movw	r30, r24
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    2170:	8f 89       	ldd	r24, Y+23	; 0x17
    2172:	98 8d       	ldd	r25, Y+24	; 0x18
    2174:	fc 01       	movw	r30, r24
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	89 2f       	mov	r24, r25
    217c:	99 0f       	add	r25, r25
    217e:	99 0b       	sbc	r25, r25
    2180:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    2182:	8f 89       	ldd	r24, Y+23	; 0x17
    2184:	98 8d       	ldd	r25, Y+24	; 0x18
    2186:	fc 01       	movw	r30, r24
    2188:	82 81       	ldd	r24, Z+2	; 0x02
    218a:	93 81       	ldd	r25, Z+3	; 0x03
    218c:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    218e:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    2190:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2192:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2194:	72 c0       	rjmp	.+228    	; 0x227a <odometry_move_to_position+0x152>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a8 e4       	ldi	r26, 0x48	; 72
    219c:	b2 e4       	ldi	r27, 0x42	; 66
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	ab 83       	std	Y+3, r26	; 0x03
    21a4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e4       	ldi	r19, 0x40	; 64
    21aa:	4c e1       	ldi	r20, 0x1C	; 28
    21ac:	55 e4       	ldi	r21, 0x45	; 69
    21ae:	69 81       	ldd	r22, Y+1	; 0x01
    21b0:	7a 81       	ldd	r23, Y+2	; 0x02
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	9c 81       	ldd	r25, Y+4	; 0x04
    21b6:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	8d 83       	std	Y+5, r24	; 0x05
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	af 83       	std	Y+7, r26	; 0x07
    21c4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e8       	ldi	r20, 0x80	; 128
    21cc:	5f e3       	ldi	r21, 0x3F	; 63
    21ce:	6d 81       	ldd	r22, Y+5	; 0x05
    21d0:	7e 81       	ldd	r23, Y+6	; 0x06
    21d2:	8f 81       	ldd	r24, Y+7	; 0x07
    21d4:	98 85       	ldd	r25, Y+8	; 0x08
    21d6:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    21da:	88 23       	and	r24, r24
    21dc:	2c f4       	brge	.+10     	; 0x21e8 <odometry_move_to_position+0xc0>
		__ticks = 1;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9a 87       	std	Y+10, r25	; 0x0a
    21e4:	89 87       	std	Y+9, r24	; 0x09
    21e6:	3f c0       	rjmp	.+126    	; 0x2266 <odometry_move_to_position+0x13e>
	else if (__tmp > 65535)
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	57 e4       	ldi	r21, 0x47	; 71
    21f0:	6d 81       	ldd	r22, Y+5	; 0x05
    21f2:	7e 81       	ldd	r23, Y+6	; 0x06
    21f4:	8f 81       	ldd	r24, Y+7	; 0x07
    21f6:	98 85       	ldd	r25, Y+8	; 0x08
    21f8:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    21fc:	18 16       	cp	r1, r24
    21fe:	4c f5       	brge	.+82     	; 0x2252 <odometry_move_to_position+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e2       	ldi	r20, 0x20	; 32
    2206:	51 e4       	ldi	r21, 0x41	; 65
    2208:	69 81       	ldd	r22, Y+1	; 0x01
    220a:	7a 81       	ldd	r23, Y+2	; 0x02
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
    2210:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9a 87       	std	Y+10, r25	; 0x0a
    2226:	89 87       	std	Y+9, r24	; 0x09
    2228:	0f c0       	rjmp	.+30     	; 0x2248 <odometry_move_to_position+0x120>
    222a:	8a ef       	ldi	r24, 0xFA	; 250
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	9c 87       	std	Y+12, r25	; 0x0c
    2230:	8b 87       	std	Y+11, r24	; 0x0b
    2232:	8b 85       	ldd	r24, Y+11	; 0x0b
    2234:	9c 85       	ldd	r25, Y+12	; 0x0c
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <odometry_move_to_position+0x10e>
    223a:	9c 87       	std	Y+12, r25	; 0x0c
    223c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223e:	89 85       	ldd	r24, Y+9	; 0x09
    2240:	9a 85       	ldd	r25, Y+10	; 0x0a
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	9a 87       	std	Y+10, r25	; 0x0a
    2246:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2248:	89 85       	ldd	r24, Y+9	; 0x09
    224a:	9a 85       	ldd	r25, Y+10	; 0x0a
    224c:	89 2b       	or	r24, r25
    224e:	69 f7       	brne	.-38     	; 0x222a <odometry_move_to_position+0x102>
    2250:	14 c0       	rjmp	.+40     	; 0x227a <odometry_move_to_position+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2252:	6d 81       	ldd	r22, Y+5	; 0x05
    2254:	7e 81       	ldd	r23, Y+6	; 0x06
    2256:	8f 81       	ldd	r24, Y+7	; 0x07
    2258:	98 85       	ldd	r25, Y+8	; 0x08
    225a:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9a 87       	std	Y+10, r25	; 0x0a
    2264:	89 87       	std	Y+9, r24	; 0x09
    2266:	89 85       	ldd	r24, Y+9	; 0x09
    2268:	9a 85       	ldd	r25, Y+10	; 0x0a
    226a:	9e 87       	std	Y+14, r25	; 0x0e
    226c:	8d 87       	std	Y+13, r24	; 0x0d
    226e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2270:	9e 85       	ldd	r25, Y+14	; 0x0e
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <odometry_move_to_position+0x14a>
    2276:	9e 87       	std	Y+14, r25	; 0x0e
    2278:	8d 87       	std	Y+13, r24	; 0x0d
    227a:	ce 01       	movw	r24, r28
    227c:	0f 96       	adiw	r24, 0x0f	; 15
    227e:	63 ec       	ldi	r22, 0xC3	; 195
    2280:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
    2284:	88 23       	and	r24, r24
    2286:	09 f0       	breq	.+2      	; 0x228a <odometry_move_to_position+0x162>
    2288:	86 cf       	rjmp	.-244    	; 0x2196 <odometry_move_to_position+0x6e>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    228a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    228c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    228e:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <odometry_wait_until_done>
}
    2292:	6c 96       	adiw	r28, 0x1c	; 28
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	08 95       	ret

000022a4 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	68 97       	sbiw	r28, 0x18	; 24
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	98 8f       	std	Y+24, r25	; 0x18
    22ba:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    22bc:	89 e4       	ldi	r24, 0x49	; 73
    22be:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    22c0:	8f 89       	ldd	r24, Y+23	; 0x17
    22c2:	98 8d       	ldd	r25, Y+24	; 0x18
    22c4:	fc 01       	movw	r30, r24
    22c6:	80 81       	ld	r24, Z
    22c8:	91 81       	ldd	r25, Z+1	; 0x01
    22ca:	89 2f       	mov	r24, r25
    22cc:	99 0f       	add	r25, r25
    22ce:	99 0b       	sbc	r25, r25
    22d0:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    22d2:	8f 89       	ldd	r24, Y+23	; 0x17
    22d4:	98 8d       	ldd	r25, Y+24	; 0x18
    22d6:	fc 01       	movw	r30, r24
    22d8:	80 81       	ld	r24, Z
    22da:	91 81       	ldd	r25, Z+1	; 0x01
    22dc:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    22de:	8f 89       	ldd	r24, Y+23	; 0x17
    22e0:	98 8d       	ldd	r25, Y+24	; 0x18
    22e2:	fc 01       	movw	r30, r24
    22e4:	82 81       	ldd	r24, Z+2	; 0x02
    22e6:	93 81       	ldd	r25, Z+3	; 0x03
    22e8:	89 2f       	mov	r24, r25
    22ea:	99 0f       	add	r25, r25
    22ec:	99 0b       	sbc	r25, r25
    22ee:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    22f0:	8f 89       	ldd	r24, Y+23	; 0x17
    22f2:	98 8d       	ldd	r25, Y+24	; 0x18
    22f4:	fc 01       	movw	r30, r24
    22f6:	82 81       	ldd	r24, Z+2	; 0x02
    22f8:	93 81       	ldd	r25, Z+3	; 0x03
    22fa:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    22fc:	8f 89       	ldd	r24, Y+23	; 0x17
    22fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2300:	fc 01       	movw	r30, r24
    2302:	84 81       	ldd	r24, Z+4	; 0x04
    2304:	95 81       	ldd	r25, Z+5	; 0x05
    2306:	89 2f       	mov	r24, r25
    2308:	99 0f       	add	r25, r25
    230a:	99 0b       	sbc	r25, r25
    230c:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    230e:	8f 89       	ldd	r24, Y+23	; 0x17
    2310:	98 8d       	ldd	r25, Y+24	; 0x18
    2312:	fc 01       	movw	r30, r24
    2314:	84 81       	ldd	r24, Z+4	; 0x04
    2316:	95 81       	ldd	r25, Z+5	; 0x05
    2318:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    231a:	8f 89       	ldd	r24, Y+23	; 0x17
    231c:	98 8d       	ldd	r25, Y+24	; 0x18
    231e:	fc 01       	movw	r30, r24
    2320:	80 81       	ld	r24, Z
    2322:	91 81       	ldd	r25, Z+1	; 0x01
    2324:	90 93 10 01 	sts	0x0110, r25
    2328:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = new_position->y;
    232c:	8f 89       	ldd	r24, Y+23	; 0x17
    232e:	98 8d       	ldd	r25, Y+24	; 0x18
    2330:	fc 01       	movw	r30, r24
    2332:	82 81       	ldd	r24, Z+2	; 0x02
    2334:	93 81       	ldd	r25, Z+3	; 0x03
    2336:	90 93 12 01 	sts	0x0112, r25
    233a:	80 93 11 01 	sts	0x0111, r24
	position.angle = new_position->angle;
    233e:	8f 89       	ldd	r24, Y+23	; 0x17
    2340:	98 8d       	ldd	r25, Y+24	; 0x18
    2342:	fc 01       	movw	r30, r24
    2344:	84 81       	ldd	r24, Z+4	; 0x04
    2346:	95 81       	ldd	r25, Z+5	; 0x05
    2348:	90 93 14 01 	sts	0x0114, r25
    234c:	80 93 13 01 	sts	0x0113, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2350:	72 c0       	rjmp	.+228    	; 0x2436 <odometry_set_position+0x192>
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a8 e4       	ldi	r26, 0x48	; 72
    2358:	b2 e4       	ldi	r27, 0x42	; 66
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	ab 83       	std	Y+3, r26	; 0x03
    2360:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e4       	ldi	r19, 0x40	; 64
    2366:	4c e1       	ldi	r20, 0x1C	; 28
    2368:	55 e4       	ldi	r21, 0x45	; 69
    236a:	69 81       	ldd	r22, Y+1	; 0x01
    236c:	7a 81       	ldd	r23, Y+2	; 0x02
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	9c 81       	ldd	r25, Y+4	; 0x04
    2372:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	8d 83       	std	Y+5, r24	; 0x05
    237c:	9e 83       	std	Y+6, r25	; 0x06
    237e:	af 83       	std	Y+7, r26	; 0x07
    2380:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	6d 81       	ldd	r22, Y+5	; 0x05
    238c:	7e 81       	ldd	r23, Y+6	; 0x06
    238e:	8f 81       	ldd	r24, Y+7	; 0x07
    2390:	98 85       	ldd	r25, Y+8	; 0x08
    2392:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    2396:	88 23       	and	r24, r24
    2398:	2c f4       	brge	.+10     	; 0x23a4 <odometry_set_position+0x100>
		__ticks = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9a 87       	std	Y+10, r25	; 0x0a
    23a0:	89 87       	std	Y+9, r24	; 0x09
    23a2:	3f c0       	rjmp	.+126    	; 0x2422 <odometry_set_position+0x17e>
	else if (__tmp > 65535)
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	6d 81       	ldd	r22, Y+5	; 0x05
    23ae:	7e 81       	ldd	r23, Y+6	; 0x06
    23b0:	8f 81       	ldd	r24, Y+7	; 0x07
    23b2:	98 85       	ldd	r25, Y+8	; 0x08
    23b4:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    23b8:	18 16       	cp	r1, r24
    23ba:	4c f5       	brge	.+82     	; 0x240e <odometry_set_position+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	69 81       	ldd	r22, Y+1	; 0x01
    23c6:	7a 81       	ldd	r23, Y+2	; 0x02
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	9a 87       	std	Y+10, r25	; 0x0a
    23e2:	89 87       	std	Y+9, r24	; 0x09
    23e4:	0f c0       	rjmp	.+30     	; 0x2404 <odometry_set_position+0x160>
    23e6:	8a ef       	ldi	r24, 0xFA	; 250
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	9c 87       	std	Y+12, r25	; 0x0c
    23ec:	8b 87       	std	Y+11, r24	; 0x0b
    23ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    23f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <odometry_set_position+0x14e>
    23f6:	9c 87       	std	Y+12, r25	; 0x0c
    23f8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fa:	89 85       	ldd	r24, Y+9	; 0x09
    23fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	9a 87       	std	Y+10, r25	; 0x0a
    2402:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2404:	89 85       	ldd	r24, Y+9	; 0x09
    2406:	9a 85       	ldd	r25, Y+10	; 0x0a
    2408:	89 2b       	or	r24, r25
    240a:	69 f7       	brne	.-38     	; 0x23e6 <odometry_set_position+0x142>
    240c:	14 c0       	rjmp	.+40     	; 0x2436 <odometry_set_position+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240e:	6d 81       	ldd	r22, Y+5	; 0x05
    2410:	7e 81       	ldd	r23, Y+6	; 0x06
    2412:	8f 81       	ldd	r24, Y+7	; 0x07
    2414:	98 85       	ldd	r25, Y+8	; 0x08
    2416:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	9a 87       	std	Y+10, r25	; 0x0a
    2420:	89 87       	std	Y+9, r24	; 0x09
    2422:	89 85       	ldd	r24, Y+9	; 0x09
    2424:	9a 85       	ldd	r25, Y+10	; 0x0a
    2426:	9e 87       	std	Y+14, r25	; 0x0e
    2428:	8d 87       	std	Y+13, r24	; 0x0d
    242a:	8d 85       	ldd	r24, Y+13	; 0x0d
    242c:	9e 85       	ldd	r25, Y+14	; 0x0e
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <odometry_set_position+0x18a>
    2432:	9e 87       	std	Y+14, r25	; 0x0e
    2434:	8d 87       	std	Y+13, r24	; 0x0d
    2436:	ce 01       	movw	r24, r28
    2438:	0f 96       	adiw	r24, 0x0f	; 15
    243a:	63 ec       	ldi	r22, 0xC3	; 195
    243c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
    2440:	88 23       	and	r24, r24
    2442:	09 f0       	breq	.+2      	; 0x2446 <odometry_set_position+0x1a2>
    2444:	86 cf       	rjmp	.-244    	; 0x2352 <odometry_set_position+0xae>
		_delay_ms(50);
}
    2446:	68 96       	adiw	r28, 0x18	; 24
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	08 95       	ret

00002458 <odometry_rotate_for>:
 * 	uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send rotate for command to odometry board
 */
uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	6b 97       	sbiw	r28, 0x1b	; 27
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	98 8f       	std	Y+24, r25	; 0x18
    246e:	8f 8b       	std	Y+23, r24	; 0x17
    2470:	69 8f       	std	Y+25, r22	; 0x19
    2472:	5b 8f       	std	Y+27, r21	; 0x1b
    2474:	4a 8f       	std	Y+26, r20	; 0x1a

	uint8_t buffer[8];
	odometry_set_speed(speed);
    2476:	89 8d       	ldd	r24, Y+25	; 0x19
    2478:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <odometry_set_speed>

	buffer[0] = 'T';
    247c:	84 e5       	ldi	r24, 0x54	; 84
    247e:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    2480:	8f 89       	ldd	r24, Y+23	; 0x17
    2482:	98 8d       	ldd	r25, Y+24	; 0x18
    2484:	89 2f       	mov	r24, r25
    2486:	99 27       	eor	r25, r25
    2488:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    248a:	8f 89       	ldd	r24, Y+23	; 0x17
    248c:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    248e:	72 c0       	rjmp	.+228    	; 0x2574 <odometry_rotate_for+0x11c>
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a8 e4       	ldi	r26, 0x48	; 72
    2496:	b2 e4       	ldi	r27, 0x42	; 66
    2498:	89 83       	std	Y+1, r24	; 0x01
    249a:	9a 83       	std	Y+2, r25	; 0x02
    249c:	ab 83       	std	Y+3, r26	; 0x03
    249e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e4       	ldi	r19, 0x40	; 64
    24a4:	4c e1       	ldi	r20, 0x1C	; 28
    24a6:	55 e4       	ldi	r21, 0x45	; 69
    24a8:	69 81       	ldd	r22, Y+1	; 0x01
    24aa:	7a 81       	ldd	r23, Y+2	; 0x02
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	8d 83       	std	Y+5, r24	; 0x05
    24ba:	9e 83       	std	Y+6, r25	; 0x06
    24bc:	af 83       	std	Y+7, r26	; 0x07
    24be:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e8       	ldi	r20, 0x80	; 128
    24c6:	5f e3       	ldi	r21, 0x3F	; 63
    24c8:	6d 81       	ldd	r22, Y+5	; 0x05
    24ca:	7e 81       	ldd	r23, Y+6	; 0x06
    24cc:	8f 81       	ldd	r24, Y+7	; 0x07
    24ce:	98 85       	ldd	r25, Y+8	; 0x08
    24d0:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <odometry_rotate_for+0x8a>
		__ticks = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9a 87       	std	Y+10, r25	; 0x0a
    24de:	89 87       	std	Y+9, r24	; 0x09
    24e0:	3f c0       	rjmp	.+126    	; 0x2560 <odometry_rotate_for+0x108>
	else if (__tmp > 65535)
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	3f ef       	ldi	r19, 0xFF	; 255
    24e6:	4f e7       	ldi	r20, 0x7F	; 127
    24e8:	57 e4       	ldi	r21, 0x47	; 71
    24ea:	6d 81       	ldd	r22, Y+5	; 0x05
    24ec:	7e 81       	ldd	r23, Y+6	; 0x06
    24ee:	8f 81       	ldd	r24, Y+7	; 0x07
    24f0:	98 85       	ldd	r25, Y+8	; 0x08
    24f2:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	4c f5       	brge	.+82     	; 0x254c <odometry_rotate_for+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e2       	ldi	r20, 0x20	; 32
    2500:	51 e4       	ldi	r21, 0x41	; 65
    2502:	69 81       	ldd	r22, Y+1	; 0x01
    2504:	7a 81       	ldd	r23, Y+2	; 0x02
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	9c 81       	ldd	r25, Y+4	; 0x04
    250a:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9a 87       	std	Y+10, r25	; 0x0a
    2520:	89 87       	std	Y+9, r24	; 0x09
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <odometry_rotate_for+0xea>
    2524:	8a ef       	ldi	r24, 0xFA	; 250
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9c 87       	std	Y+12, r25	; 0x0c
    252a:	8b 87       	std	Y+11, r24	; 0x0b
    252c:	8b 85       	ldd	r24, Y+11	; 0x0b
    252e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <odometry_rotate_for+0xd8>
    2534:	9c 87       	std	Y+12, r25	; 0x0c
    2536:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	9a 85       	ldd	r25, Y+10	; 0x0a
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	9a 87       	std	Y+10, r25	; 0x0a
    2540:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	89 85       	ldd	r24, Y+9	; 0x09
    2544:	9a 85       	ldd	r25, Y+10	; 0x0a
    2546:	89 2b       	or	r24, r25
    2548:	69 f7       	brne	.-38     	; 0x2524 <odometry_rotate_for+0xcc>
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <odometry_rotate_for+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254c:	6d 81       	ldd	r22, Y+5	; 0x05
    254e:	7e 81       	ldd	r23, Y+6	; 0x06
    2550:	8f 81       	ldd	r24, Y+7	; 0x07
    2552:	98 85       	ldd	r25, Y+8	; 0x08
    2554:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9a 87       	std	Y+10, r25	; 0x0a
    255e:	89 87       	std	Y+9, r24	; 0x09
    2560:	89 85       	ldd	r24, Y+9	; 0x09
    2562:	9a 85       	ldd	r25, Y+10	; 0x0a
    2564:	9e 87       	std	Y+14, r25	; 0x0e
    2566:	8d 87       	std	Y+13, r24	; 0x0d
    2568:	8d 85       	ldd	r24, Y+13	; 0x0d
    256a:	9e 85       	ldd	r25, Y+14	; 0x0e
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <odometry_rotate_for+0x114>
    2570:	9e 87       	std	Y+14, r25	; 0x0e
    2572:	8d 87       	std	Y+13, r24	; 0x0d
    2574:	ce 01       	movw	r24, r28
    2576:	0f 96       	adiw	r24, 0x0f	; 15
    2578:	63 ec       	ldi	r22, 0xC3	; 195
    257a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
    257e:	88 23       	and	r24, r24
    2580:	09 f0       	breq	.+2      	; 0x2584 <odometry_rotate_for+0x12c>
    2582:	86 cf       	rjmp	.-244    	; 0x2490 <odometry_rotate_for+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2584:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2586:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2588:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <odometry_wait_until_done>

}
    258c:	6b 96       	adiw	r28, 0x1b	; 27
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	f8 94       	cli
    2592:	de bf       	out	0x3e, r29	; 62
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	cd bf       	out	0x3d, r28	; 61
    2598:	df 91       	pop	r29
    259a:	cf 91       	pop	r28
    259c:	08 95       	ret

0000259e <odometry_set_angle>:
 * 	uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Set angle for odometry
 */
uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	6b 97       	sbiw	r28, 0x1b	; 27
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	f8 94       	cli
    25ac:	de bf       	out	0x3e, r29	; 62
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	cd bf       	out	0x3d, r28	; 61
    25b2:	98 8f       	std	Y+24, r25	; 0x18
    25b4:	8f 8b       	std	Y+23, r24	; 0x17
    25b6:	69 8f       	std	Y+25, r22	; 0x19
    25b8:	5b 8f       	std	Y+27, r21	; 0x1b
    25ba:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    25bc:	89 8d       	ldd	r24, Y+25	; 0x19
    25be:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <odometry_set_speed>

	buffer[0] = 'A';
    25c2:	81 e4       	ldi	r24, 0x41	; 65
    25c4:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    25c6:	8f 89       	ldd	r24, Y+23	; 0x17
    25c8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ca:	89 2f       	mov	r24, r25
    25cc:	99 27       	eor	r25, r25
    25ce:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    25d0:	8f 89       	ldd	r24, Y+23	; 0x17
    25d2:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    25d4:	72 c0       	rjmp	.+228    	; 0x26ba <odometry_set_angle+0x11c>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a8 e4       	ldi	r26, 0x48	; 72
    25dc:	b2 e4       	ldi	r27, 0x42	; 66
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	ab 83       	std	Y+3, r26	; 0x03
    25e4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e4       	ldi	r19, 0x40	; 64
    25ea:	4c e1       	ldi	r20, 0x1C	; 28
    25ec:	55 e4       	ldi	r21, 0x45	; 69
    25ee:	69 81       	ldd	r22, Y+1	; 0x01
    25f0:	7a 81       	ldd	r23, Y+2	; 0x02
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	9c 81       	ldd	r25, Y+4	; 0x04
    25f6:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	8d 83       	std	Y+5, r24	; 0x05
    2600:	9e 83       	std	Y+6, r25	; 0x06
    2602:	af 83       	std	Y+7, r26	; 0x07
    2604:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e8       	ldi	r20, 0x80	; 128
    260c:	5f e3       	ldi	r21, 0x3F	; 63
    260e:	6d 81       	ldd	r22, Y+5	; 0x05
    2610:	7e 81       	ldd	r23, Y+6	; 0x06
    2612:	8f 81       	ldd	r24, Y+7	; 0x07
    2614:	98 85       	ldd	r25, Y+8	; 0x08
    2616:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    261a:	88 23       	and	r24, r24
    261c:	2c f4       	brge	.+10     	; 0x2628 <odometry_set_angle+0x8a>
		__ticks = 1;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9a 87       	std	Y+10, r25	; 0x0a
    2624:	89 87       	std	Y+9, r24	; 0x09
    2626:	3f c0       	rjmp	.+126    	; 0x26a6 <odometry_set_angle+0x108>
	else if (__tmp > 65535)
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	3f ef       	ldi	r19, 0xFF	; 255
    262c:	4f e7       	ldi	r20, 0x7F	; 127
    262e:	57 e4       	ldi	r21, 0x47	; 71
    2630:	6d 81       	ldd	r22, Y+5	; 0x05
    2632:	7e 81       	ldd	r23, Y+6	; 0x06
    2634:	8f 81       	ldd	r24, Y+7	; 0x07
    2636:	98 85       	ldd	r25, Y+8	; 0x08
    2638:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    263c:	18 16       	cp	r1, r24
    263e:	4c f5       	brge	.+82     	; 0x2692 <odometry_set_angle+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e2       	ldi	r20, 0x20	; 32
    2646:	51 e4       	ldi	r21, 0x41	; 65
    2648:	69 81       	ldd	r22, Y+1	; 0x01
    264a:	7a 81       	ldd	r23, Y+2	; 0x02
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	9c 81       	ldd	r25, Y+4	; 0x04
    2650:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	9a 87       	std	Y+10, r25	; 0x0a
    2666:	89 87       	std	Y+9, r24	; 0x09
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <odometry_set_angle+0xea>
    266a:	8a ef       	ldi	r24, 0xFA	; 250
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9c 87       	std	Y+12, r25	; 0x0c
    2670:	8b 87       	std	Y+11, r24	; 0x0b
    2672:	8b 85       	ldd	r24, Y+11	; 0x0b
    2674:	9c 85       	ldd	r25, Y+12	; 0x0c
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <odometry_set_angle+0xd8>
    267a:	9c 87       	std	Y+12, r25	; 0x0c
    267c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267e:	89 85       	ldd	r24, Y+9	; 0x09
    2680:	9a 85       	ldd	r25, Y+10	; 0x0a
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	9a 87       	std	Y+10, r25	; 0x0a
    2686:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2688:	89 85       	ldd	r24, Y+9	; 0x09
    268a:	9a 85       	ldd	r25, Y+10	; 0x0a
    268c:	89 2b       	or	r24, r25
    268e:	69 f7       	brne	.-38     	; 0x266a <odometry_set_angle+0xcc>
    2690:	14 c0       	rjmp	.+40     	; 0x26ba <odometry_set_angle+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2692:	6d 81       	ldd	r22, Y+5	; 0x05
    2694:	7e 81       	ldd	r23, Y+6	; 0x06
    2696:	8f 81       	ldd	r24, Y+7	; 0x07
    2698:	98 85       	ldd	r25, Y+8	; 0x08
    269a:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	9a 87       	std	Y+10, r25	; 0x0a
    26a4:	89 87       	std	Y+9, r24	; 0x09
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	9e 87       	std	Y+14, r25	; 0x0e
    26ac:	8d 87       	std	Y+13, r24	; 0x0d
    26ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <odometry_set_angle+0x114>
    26b6:	9e 87       	std	Y+14, r25	; 0x0e
    26b8:	8d 87       	std	Y+13, r24	; 0x0d
    26ba:	ce 01       	movw	r24, r28
    26bc:	0f 96       	adiw	r24, 0x0f	; 15
    26be:	63 ec       	ldi	r22, 0xC3	; 195
    26c0:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
    26c4:	88 23       	and	r24, r24
    26c6:	09 f0       	breq	.+2      	; 0x26ca <odometry_set_angle+0x12c>
    26c8:	86 cf       	rjmp	.-244    	; 0x25d6 <odometry_set_angle+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    26ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26ce:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <odometry_wait_until_done>
}
    26d2:	6b 96       	adiw	r28, 0x1b	; 27
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	08 95       	ret

000026e4 <odometry_kurva>:

uint8_t odometry_kurva(uint16_t x_pos, uint16_t y_pos, int8_t angle, uint8_t direction, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    26e4:	ef 92       	push	r14
    26e6:	ff 92       	push	r15
    26e8:	0f 93       	push	r16
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	6f 97       	sbiw	r28, 0x1f	; 31
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	cd bf       	out	0x3d, r28	; 61
    26fe:	98 8f       	std	Y+24, r25	; 0x18
    2700:	8f 8b       	std	Y+23, r24	; 0x17
    2702:	7a 8f       	std	Y+26, r23	; 0x1a
    2704:	69 8f       	std	Y+25, r22	; 0x19
    2706:	4b 8f       	std	Y+27, r20	; 0x1b
    2708:	2c 8f       	std	Y+28, r18	; 0x1c
    270a:	0d 8f       	std	Y+29, r16	; 0x1d
    270c:	ff 8e       	std	Y+31, r15	; 0x1f
    270e:	ee 8e       	std	Y+30, r14	; 0x1e
	uint8_t buffer[8];

	odometry_set_speed(speed);
    2710:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2712:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <odometry_set_speed>

	buffer[0] = 'Q';
    2716:	81 e5       	ldi	r24, 0x51	; 81
    2718:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = x_pos >> 8;
    271a:	8f 89       	ldd	r24, Y+23	; 0x17
    271c:	98 8d       	ldd	r25, Y+24	; 0x18
    271e:	89 2f       	mov	r24, r25
    2720:	99 27       	eor	r25, r25
    2722:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = x_pos & 0xFF;
    2724:	8f 89       	ldd	r24, Y+23	; 0x17
    2726:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = y_pos >> 8;
    2728:	89 8d       	ldd	r24, Y+25	; 0x19
    272a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    272c:	89 2f       	mov	r24, r25
    272e:	99 27       	eor	r25, r25
    2730:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = y_pos & 0xFF;
    2732:	89 8d       	ldd	r24, Y+25	; 0x19
    2734:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = angle >> 8;
    2736:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2738:	08 2e       	mov	r0, r24
    273a:	00 0c       	add	r0, r0
    273c:	99 0b       	sbc	r25, r25
    273e:	89 2f       	mov	r24, r25
    2740:	99 0f       	add	r25, r25
    2742:	99 0b       	sbc	r25, r25
    2744:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = angle & 0xFF;
    2746:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2748:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[7] = direction;
    274a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    274c:	8e 8b       	std	Y+22, r24	; 0x16

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    274e:	72 c0       	rjmp	.+228    	; 0x2834 <odometry_kurva+0x150>
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a8 e4       	ldi	r26, 0x48	; 72
    2756:	b2 e4       	ldi	r27, 0x42	; 66
    2758:	89 83       	std	Y+1, r24	; 0x01
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	ab 83       	std	Y+3, r26	; 0x03
    275e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e4       	ldi	r19, 0x40	; 64
    2764:	4c e1       	ldi	r20, 0x1C	; 28
    2766:	55 e4       	ldi	r21, 0x45	; 69
    2768:	69 81       	ldd	r22, Y+1	; 0x01
    276a:	7a 81       	ldd	r23, Y+2	; 0x02
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	9c 81       	ldd	r25, Y+4	; 0x04
    2770:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	8d 83       	std	Y+5, r24	; 0x05
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	af 83       	std	Y+7, r26	; 0x07
    277e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	6d 81       	ldd	r22, Y+5	; 0x05
    278a:	7e 81       	ldd	r23, Y+6	; 0x06
    278c:	8f 81       	ldd	r24, Y+7	; 0x07
    278e:	98 85       	ldd	r25, Y+8	; 0x08
    2790:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    2794:	88 23       	and	r24, r24
    2796:	2c f4       	brge	.+10     	; 0x27a2 <odometry_kurva+0xbe>
		__ticks = 1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9a 87       	std	Y+10, r25	; 0x0a
    279e:	89 87       	std	Y+9, r24	; 0x09
    27a0:	3f c0       	rjmp	.+126    	; 0x2820 <odometry_kurva+0x13c>
	else if (__tmp > 65535)
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	57 e4       	ldi	r21, 0x47	; 71
    27aa:	6d 81       	ldd	r22, Y+5	; 0x05
    27ac:	7e 81       	ldd	r23, Y+6	; 0x06
    27ae:	8f 81       	ldd	r24, Y+7	; 0x07
    27b0:	98 85       	ldd	r25, Y+8	; 0x08
    27b2:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    27b6:	18 16       	cp	r1, r24
    27b8:	4c f5       	brge	.+82     	; 0x280c <odometry_kurva+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e2       	ldi	r20, 0x20	; 32
    27c0:	51 e4       	ldi	r21, 0x41	; 65
    27c2:	69 81       	ldd	r22, Y+1	; 0x01
    27c4:	7a 81       	ldd	r23, Y+2	; 0x02
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ca:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	bc 01       	movw	r22, r24
    27d4:	cd 01       	movw	r24, r26
    27d6:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	9a 87       	std	Y+10, r25	; 0x0a
    27e0:	89 87       	std	Y+9, r24	; 0x09
    27e2:	0f c0       	rjmp	.+30     	; 0x2802 <odometry_kurva+0x11e>
    27e4:	8a ef       	ldi	r24, 0xFA	; 250
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	9c 87       	std	Y+12, r25	; 0x0c
    27ea:	8b 87       	std	Y+11, r24	; 0x0b
    27ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    27ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	f1 f7       	brne	.-4      	; 0x27f0 <odometry_kurva+0x10c>
    27f4:	9c 87       	std	Y+12, r25	; 0x0c
    27f6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f8:	89 85       	ldd	r24, Y+9	; 0x09
    27fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	9a 87       	std	Y+10, r25	; 0x0a
    2800:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2802:	89 85       	ldd	r24, Y+9	; 0x09
    2804:	9a 85       	ldd	r25, Y+10	; 0x0a
    2806:	89 2b       	or	r24, r25
    2808:	69 f7       	brne	.-38     	; 0x27e4 <odometry_kurva+0x100>
    280a:	14 c0       	rjmp	.+40     	; 0x2834 <odometry_kurva+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280c:	6d 81       	ldd	r22, Y+5	; 0x05
    280e:	7e 81       	ldd	r23, Y+6	; 0x06
    2810:	8f 81       	ldd	r24, Y+7	; 0x07
    2812:	98 85       	ldd	r25, Y+8	; 0x08
    2814:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	9a 87       	std	Y+10, r25	; 0x0a
    281e:	89 87       	std	Y+9, r24	; 0x09
    2820:	89 85       	ldd	r24, Y+9	; 0x09
    2822:	9a 85       	ldd	r25, Y+10	; 0x0a
    2824:	9e 87       	std	Y+14, r25	; 0x0e
    2826:	8d 87       	std	Y+13, r24	; 0x0d
    2828:	8d 85       	ldd	r24, Y+13	; 0x0d
    282a:	9e 85       	ldd	r25, Y+14	; 0x0e
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <odometry_kurva+0x148>
    2830:	9e 87       	std	Y+14, r25	; 0x0e
    2832:	8d 87       	std	Y+13, r24	; 0x0d
    2834:	ce 01       	movw	r24, r28
    2836:	0f 96       	adiw	r24, 0x0f	; 15
    2838:	63 ec       	ldi	r22, 0xC3	; 195
    283a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
    283e:	88 23       	and	r24, r24
    2840:	09 f0       	breq	.+2      	; 0x2844 <odometry_kurva+0x160>
    2842:	86 cf       	rjmp	.-244    	; 0x2750 <odometry_kurva+0x6c>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2844:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2846:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2848:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <odometry_wait_until_done>
}
    284c:	6f 96       	adiw	r28, 0x1f	; 31
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	df 91       	pop	r29
    285a:	cf 91       	pop	r28
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	08 95       	ret

00002864 <odometry_match_end>:

void odometry_match_end(void)
{
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	66 97       	sbiw	r28, 0x16	; 22
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];

	buffer[0] = 'K';
    2878:	8b e4       	ldi	r24, 0x4B	; 75
    287a:	8f 87       	std	Y+15, r24	; 0x0f

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    287c:	72 c0       	rjmp	.+228    	; 0x2962 <odometry_match_end+0xfe>
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	a8 e4       	ldi	r26, 0x48	; 72
    2884:	b2 e4       	ldi	r27, 0x42	; 66
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	9a 83       	std	Y+2, r25	; 0x02
    288a:	ab 83       	std	Y+3, r26	; 0x03
    288c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e4       	ldi	r19, 0x40	; 64
    2892:	4c e1       	ldi	r20, 0x1C	; 28
    2894:	55 e4       	ldi	r21, 0x45	; 69
    2896:	69 81       	ldd	r22, Y+1	; 0x01
    2898:	7a 81       	ldd	r23, Y+2	; 0x02
    289a:	8b 81       	ldd	r24, Y+3	; 0x03
    289c:	9c 81       	ldd	r25, Y+4	; 0x04
    289e:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	9e 83       	std	Y+6, r25	; 0x06
    28aa:	af 83       	std	Y+7, r26	; 0x07
    28ac:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e8       	ldi	r20, 0x80	; 128
    28b4:	5f e3       	ldi	r21, 0x3F	; 63
    28b6:	6d 81       	ldd	r22, Y+5	; 0x05
    28b8:	7e 81       	ldd	r23, Y+6	; 0x06
    28ba:	8f 81       	ldd	r24, Y+7	; 0x07
    28bc:	98 85       	ldd	r25, Y+8	; 0x08
    28be:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    28c2:	88 23       	and	r24, r24
    28c4:	2c f4       	brge	.+10     	; 0x28d0 <odometry_match_end+0x6c>
		__ticks = 1;
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	9a 87       	std	Y+10, r25	; 0x0a
    28cc:	89 87       	std	Y+9, r24	; 0x09
    28ce:	3f c0       	rjmp	.+126    	; 0x294e <odometry_match_end+0xea>
	else if (__tmp > 65535)
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	3f ef       	ldi	r19, 0xFF	; 255
    28d4:	4f e7       	ldi	r20, 0x7F	; 127
    28d6:	57 e4       	ldi	r21, 0x47	; 71
    28d8:	6d 81       	ldd	r22, Y+5	; 0x05
    28da:	7e 81       	ldd	r23, Y+6	; 0x06
    28dc:	8f 81       	ldd	r24, Y+7	; 0x07
    28de:	98 85       	ldd	r25, Y+8	; 0x08
    28e0:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    28e4:	18 16       	cp	r1, r24
    28e6:	4c f5       	brge	.+82     	; 0x293a <odometry_match_end+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e2       	ldi	r20, 0x20	; 32
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	69 81       	ldd	r22, Y+1	; 0x01
    28f2:	7a 81       	ldd	r23, Y+2	; 0x02
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	9c 81       	ldd	r25, Y+4	; 0x04
    28f8:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	9a 87       	std	Y+10, r25	; 0x0a
    290e:	89 87       	std	Y+9, r24	; 0x09
    2910:	0f c0       	rjmp	.+30     	; 0x2930 <odometry_match_end+0xcc>
    2912:	8a ef       	ldi	r24, 0xFA	; 250
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	9c 87       	std	Y+12, r25	; 0x0c
    2918:	8b 87       	std	Y+11, r24	; 0x0b
    291a:	8b 85       	ldd	r24, Y+11	; 0x0b
    291c:	9c 85       	ldd	r25, Y+12	; 0x0c
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	f1 f7       	brne	.-4      	; 0x291e <odometry_match_end+0xba>
    2922:	9c 87       	std	Y+12, r25	; 0x0c
    2924:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2926:	89 85       	ldd	r24, Y+9	; 0x09
    2928:	9a 85       	ldd	r25, Y+10	; 0x0a
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	9a 87       	std	Y+10, r25	; 0x0a
    292e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	89 2b       	or	r24, r25
    2936:	69 f7       	brne	.-38     	; 0x2912 <odometry_match_end+0xae>
    2938:	14 c0       	rjmp	.+40     	; 0x2962 <odometry_match_end+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293a:	6d 81       	ldd	r22, Y+5	; 0x05
    293c:	7e 81       	ldd	r23, Y+6	; 0x06
    293e:	8f 81       	ldd	r24, Y+7	; 0x07
    2940:	98 85       	ldd	r25, Y+8	; 0x08
    2942:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	9a 87       	std	Y+10, r25	; 0x0a
    294c:	89 87       	std	Y+9, r24	; 0x09
    294e:	89 85       	ldd	r24, Y+9	; 0x09
    2950:	9a 85       	ldd	r25, Y+10	; 0x0a
    2952:	9e 87       	std	Y+14, r25	; 0x0e
    2954:	8d 87       	std	Y+13, r24	; 0x0d
    2956:	8d 85       	ldd	r24, Y+13	; 0x0d
    2958:	9e 85       	ldd	r25, Y+14	; 0x0e
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	f1 f7       	brne	.-4      	; 0x295a <odometry_match_end+0xf6>
    295e:	9e 87       	std	Y+14, r25	; 0x0e
    2960:	8d 87       	std	Y+13, r24	; 0x0d
    2962:	ce 01       	movw	r24, r28
    2964:	0f 96       	adiw	r24, 0x0f	; 15
    2966:	63 ec       	ldi	r22, 0xC3	; 195
    2968:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <CAN_Write>
    296c:	88 23       	and	r24, r24
    296e:	09 f0       	breq	.+2      	; 0x2972 <odometry_match_end+0x10e>
    2970:	86 cf       	rjmp	.-244    	; 0x287e <odometry_match_end+0x1a>
			_delay_ms(50);

}
    2972:	66 96       	adiw	r28, 0x16	; 22
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	08 95       	ret

00002984 <getState>:

/*
 * 	Update position
 */
uint8_t getState(void)
{
    2984:	cf 93       	push	r28
    2986:	df 93       	push	r29
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    298c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <odometry_query_position>
	return position.state;
    2990:	80 91 15 01 	lds	r24, 0x0115
}
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	08 95       	ret

0000299a <odometry_get_x>:

int16_t odometry_get_x(void)
{
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    29a2:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <odometry_query_position>
	return position.x;
    29a6:	80 91 0f 01 	lds	r24, 0x010F
    29aa:	90 91 10 01 	lds	r25, 0x0110
}
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	08 95       	ret

000029b4 <odometry_get_y>:

int16_t odometry_get_y(void)
{
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    29bc:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <odometry_query_position>
	return position.y;
    29c0:	80 91 11 01 	lds	r24, 0x0111
    29c4:	90 91 12 01 	lds	r25, 0x0112
}
    29c8:	df 91       	pop	r29
    29ca:	cf 91       	pop	r28
    29cc:	08 95       	ret

000029ce <odometry_get_angle>:

int16_t odometry_get_angle(void)
{
    29ce:	cf 93       	push	r28
    29d0:	df 93       	push	r29
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    29d6:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <odometry_query_position>
	return position.angle;
    29da:	80 91 13 01 	lds	r24, 0x0113
    29de:	90 91 14 01 	lds	r25, 0x0114
}
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	08 95       	ret

000029e8 <timer_register_callback>:
 *	Function: 		void timer_register_callback(void (*callback)(void))
 *	Parameters: 	void (*callback)(void))
 *	Description: 	timer callbacks
 */
void timer_register_callback(void (*callback)(void))
{
    29e8:	cf 93       	push	r28
    29ea:	df 93       	push	r29
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <timer_register_callback+0x6>
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	9a 83       	std	Y+2, r25	; 0x02
    29f4:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	9a 81       	ldd	r25, Y+2	; 0x02
    29fa:	90 93 db 01 	sts	0x01DB, r25
    29fe:	80 93 da 01 	sts	0x01DA, r24
}
    2a02:	0f 90       	pop	r0
    2a04:	0f 90       	pop	r0
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	08 95       	ret

00002a0c <timer_init>:
 *	Function: 		void timer_init(unsigned int freq)
 *	Parameters: 	unsigned int freq - frequency of timer
 *	Description: 	setup timer
 */
void timer_init(unsigned int freq)
{
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	00 d0       	rcall	.+0      	; 0x2a16 <timer_init+0xa>
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	9a 83       	std	Y+2, r25	; 0x02
    2a1c:	89 83       	std	Y+1, r24	; 0x01

    TCCR1A = 0;
    2a1e:	80 e8       	ldi	r24, 0x80	; 128
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	fc 01       	movw	r30, r24
    2a24:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    2a26:	81 e8       	ldi	r24, 0x81	; 129
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	29 e0       	ldi	r18, 0x09	; 9
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    2a30:	08 e8       	ldi	r16, 0x88	; 136
    2a32:	10 e0       	ldi	r17, 0x00	; 0
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	9a 81       	ldd	r25, Y+2	; 0x02
    2a38:	cc 01       	movw	r24, r24
    2a3a:	a0 e0       	ldi	r26, 0x00	; 0
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__floatunsisf>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	9c 01       	movw	r18, r24
    2a4c:	ad 01       	movw	r20, r26
    2a4e:	60 e8       	ldi	r22, 0x80	; 128
    2a50:	76 e9       	ldi	r23, 0x96	; 150
    2a52:	88 e1       	ldi	r24, 0x18	; 24
    2a54:	9b e4       	ldi	r25, 0x4B	; 75
    2a56:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <__divsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	5f e3       	ldi	r21, 0x3F	; 63
    2a66:	bc 01       	movw	r22, r24
    2a68:	cd 01       	movw	r24, r26
    2a6a:	0e 94 47 25 	call	0x4a8e	; 0x4a8e <__addsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	bc 01       	movw	r22, r24
    2a74:	cd 01       	movw	r24, r26
    2a76:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	f8 01       	movw	r30, r16
    2a80:	91 83       	std	Z+1, r25	; 0x01
    2a82:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2a84:	8f e6       	ldi	r24, 0x6F	; 111
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	22 e0       	ldi	r18, 0x02	; 2
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	20 83       	st	Z, r18

	SREG |= 0x80;
    2a8e:	8f e5       	ldi	r24, 0x5F	; 95
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	2f e5       	ldi	r18, 0x5F	; 95
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	f9 01       	movw	r30, r18
    2a98:	20 81       	ld	r18, Z
    2a9a:	20 68       	ori	r18, 0x80	; 128
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	20 83       	st	Z, r18
}
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	1f 91       	pop	r17
    2aaa:	0f 91       	pop	r16
    2aac:	08 95       	ret

00002aae <__vector_12>:
/*
 *	Function: 		ISR(TIMER1_COMPA_vect)
 *	Description: 	ISR interrupt for timer
 */
ISR(TIMER1_COMPA_vect)
{
    2aae:	1f 92       	push	r1
    2ab0:	0f 92       	push	r0
    2ab2:	00 90 5f 00 	lds	r0, 0x005F
    2ab6:	0f 92       	push	r0
    2ab8:	11 24       	eor	r1, r1
    2aba:	00 90 5b 00 	lds	r0, 0x005B
    2abe:	0f 92       	push	r0
    2ac0:	2f 93       	push	r18
    2ac2:	3f 93       	push	r19
    2ac4:	4f 93       	push	r20
    2ac6:	5f 93       	push	r21
    2ac8:	6f 93       	push	r22
    2aca:	7f 93       	push	r23
    2acc:	8f 93       	push	r24
    2ace:	9f 93       	push	r25
    2ad0:	af 93       	push	r26
    2ad2:	bf 93       	push	r27
    2ad4:	ef 93       	push	r30
    2ad6:	ff 93       	push	r31
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ae2:	de bf       	out	0x3e, r29	; 62
    2ae4:	cd bf       	out	0x3d, r28	; 61
    if(timer_callback != NULL)
    2ae6:	80 91 da 01 	lds	r24, 0x01DA
    2aea:	90 91 db 01 	lds	r25, 0x01DB
    2aee:	89 2b       	or	r24, r25
    2af0:	31 f0       	breq	.+12     	; 0x2afe <__vector_12+0x50>
        timer_callback();
    2af2:	80 91 da 01 	lds	r24, 0x01DA
    2af6:	90 91 db 01 	lds	r25, 0x01DB
    2afa:	fc 01       	movw	r30, r24
    2afc:	09 95       	icall
	if(sys_time >= 90000)					// if match end
    2afe:	80 91 d5 01 	lds	r24, 0x01D5
    2b02:	90 91 d6 01 	lds	r25, 0x01D6
    2b06:	a0 91 d7 01 	lds	r26, 0x01D7
    2b0a:	b0 91 d8 01 	lds	r27, 0x01D8
    2b0e:	80 39       	cpi	r24, 0x90	; 144
    2b10:	9f 45       	sbci	r25, 0x5F	; 95
    2b12:	a1 40       	sbci	r26, 0x01	; 1
    2b14:	b1 05       	cpc	r27, r1
    2b16:	08 f4       	brcc	.+2      	; 0x2b1a <__vector_12+0x6c>
    2b18:	83 c0       	rjmp	.+262    	; 0x2c20 <__vector_12+0x172>
	{
		if(system_get_match_started())		// if the match has started before
    2b1a:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <system_get_match_started>
    2b1e:	88 23       	and	r24, r24
    2b20:	09 f4       	brne	.+2      	; 0x2b24 <__vector_12+0x76>
    2b22:	7e c0       	rjmp	.+252    	; 0x2c20 <__vector_12+0x172>
		{
			odometry_match_end();
    2b24:	0e 94 32 14 	call	0x2864	; 0x2864 <odometry_match_end>
			while(1) {
				PORTG = ~PORTG;
    2b28:	84 e3       	ldi	r24, 0x34	; 52
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	24 e3       	ldi	r18, 0x34	; 52
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	f9 01       	movw	r30, r18
    2b32:	20 81       	ld	r18, Z
    2b34:	20 95       	com	r18
    2b36:	fc 01       	movw	r30, r24
    2b38:	20 83       	st	Z, r18
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	aa e7       	ldi	r26, 0x7A	; 122
    2b40:	b4 e4       	ldi	r27, 0x44	; 68
    2b42:	89 83       	std	Y+1, r24	; 0x01
    2b44:	9a 83       	std	Y+2, r25	; 0x02
    2b46:	ab 83       	std	Y+3, r26	; 0x03
    2b48:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e4       	ldi	r19, 0x40	; 64
    2b4e:	4c e1       	ldi	r20, 0x1C	; 28
    2b50:	55 e4       	ldi	r21, 0x45	; 69
    2b52:	69 81       	ldd	r22, Y+1	; 0x01
    2b54:	7a 81       	ldd	r23, Y+2	; 0x02
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5a:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	8d 83       	std	Y+5, r24	; 0x05
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	af 83       	std	Y+7, r26	; 0x07
    2b68:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e8       	ldi	r20, 0x80	; 128
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	6d 81       	ldd	r22, Y+5	; 0x05
    2b74:	7e 81       	ldd	r23, Y+6	; 0x06
    2b76:	8f 81       	ldd	r24, Y+7	; 0x07
    2b78:	98 85       	ldd	r25, Y+8	; 0x08
    2b7a:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    2b7e:	88 23       	and	r24, r24
    2b80:	2c f4       	brge	.+10     	; 0x2b8c <__vector_12+0xde>
		__ticks = 1;
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	9a 87       	std	Y+10, r25	; 0x0a
    2b88:	89 87       	std	Y+9, r24	; 0x09
    2b8a:	3f c0       	rjmp	.+126    	; 0x2c0a <__vector_12+0x15c>
	else if (__tmp > 65535)
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	3f ef       	ldi	r19, 0xFF	; 255
    2b90:	4f e7       	ldi	r20, 0x7F	; 127
    2b92:	57 e4       	ldi	r21, 0x47	; 71
    2b94:	6d 81       	ldd	r22, Y+5	; 0x05
    2b96:	7e 81       	ldd	r23, Y+6	; 0x06
    2b98:	8f 81       	ldd	r24, Y+7	; 0x07
    2b9a:	98 85       	ldd	r25, Y+8	; 0x08
    2b9c:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    2ba0:	18 16       	cp	r1, r24
    2ba2:	4c f5       	brge	.+82     	; 0x2bf6 <__vector_12+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e2       	ldi	r20, 0x20	; 32
    2baa:	51 e4       	ldi	r21, 0x41	; 65
    2bac:	69 81       	ldd	r22, Y+1	; 0x01
    2bae:	7a 81       	ldd	r23, Y+2	; 0x02
    2bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb4:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	cd 01       	movw	r24, r26
    2bc0:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	9a 87       	std	Y+10, r25	; 0x0a
    2bca:	89 87       	std	Y+9, r24	; 0x09
    2bcc:	0f c0       	rjmp	.+30     	; 0x2bec <__vector_12+0x13e>
    2bce:	8a ef       	ldi	r24, 0xFA	; 250
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	9c 87       	std	Y+12, r25	; 0x0c
    2bd4:	8b 87       	std	Y+11, r24	; 0x0b
    2bd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bd8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <__vector_12+0x12c>
    2bde:	9c 87       	std	Y+12, r25	; 0x0c
    2be0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be2:	89 85       	ldd	r24, Y+9	; 0x09
    2be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	9a 87       	std	Y+10, r25	; 0x0a
    2bea:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bec:	89 85       	ldd	r24, Y+9	; 0x09
    2bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf0:	89 2b       	or	r24, r25
    2bf2:	69 f7       	brne	.-38     	; 0x2bce <__vector_12+0x120>
    2bf4:	14 c0       	rjmp	.+40     	; 0x2c1e <__vector_12+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf6:	6d 81       	ldd	r22, Y+5	; 0x05
    2bf8:	7e 81       	ldd	r23, Y+6	; 0x06
    2bfa:	8f 81       	ldd	r24, Y+7	; 0x07
    2bfc:	98 85       	ldd	r25, Y+8	; 0x08
    2bfe:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	9a 87       	std	Y+10, r25	; 0x0a
    2c08:	89 87       	std	Y+9, r24	; 0x09
    2c0a:	89 85       	ldd	r24, Y+9	; 0x09
    2c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0e:	9e 87       	std	Y+14, r25	; 0x0e
    2c10:	8d 87       	std	Y+13, r24	; 0x0d
    2c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <__vector_12+0x168>
    2c1a:	9e 87       	std	Y+14, r25	; 0x0e
    2c1c:	8d 87       	std	Y+13, r24	; 0x0d
				_delay_ms(1000);
			}
    2c1e:	84 cf       	rjmp	.-248    	; 0x2b28 <__vector_12+0x7a>
	/*if((sys_time % 1000) == 0) {

		PORTG = ~PORTG;
	}*/

	sys_time++;
    2c20:	80 91 d5 01 	lds	r24, 0x01D5
    2c24:	90 91 d6 01 	lds	r25, 0x01D6
    2c28:	a0 91 d7 01 	lds	r26, 0x01D7
    2c2c:	b0 91 d8 01 	lds	r27, 0x01D8
    2c30:	01 96       	adiw	r24, 0x01	; 1
    2c32:	a1 1d       	adc	r26, r1
    2c34:	b1 1d       	adc	r27, r1
    2c36:	80 93 d5 01 	sts	0x01D5, r24
    2c3a:	90 93 d6 01 	sts	0x01D6, r25
    2c3e:	a0 93 d7 01 	sts	0x01D7, r26
    2c42:	b0 93 d8 01 	sts	0x01D8, r27


}
    2c46:	2e 96       	adiw	r28, 0x0e	; 14
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	df 91       	pop	r29
    2c54:	cf 91       	pop	r28
    2c56:	ff 91       	pop	r31
    2c58:	ef 91       	pop	r30
    2c5a:	bf 91       	pop	r27
    2c5c:	af 91       	pop	r26
    2c5e:	9f 91       	pop	r25
    2c60:	8f 91       	pop	r24
    2c62:	7f 91       	pop	r23
    2c64:	6f 91       	pop	r22
    2c66:	5f 91       	pop	r21
    2c68:	4f 91       	pop	r20
    2c6a:	3f 91       	pop	r19
    2c6c:	2f 91       	pop	r18
    2c6e:	0f 90       	pop	r0
    2c70:	00 92 5b 00 	sts	0x005B, r0
    2c74:	0f 90       	pop	r0
    2c76:	00 92 5f 00 	sts	0x005F, r0
    2c7a:	0f 90       	pop	r0
    2c7c:	1f 90       	pop	r1
    2c7e:	18 95       	reti

00002c80 <system_reset_system_time>:

void system_reset_system_time(void) 	{ 	sys_time = 0; 			}
    2c80:	cf 93       	push	r28
    2c82:	df 93       	push	r29
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
    2c88:	10 92 d5 01 	sts	0x01D5, r1
    2c8c:	10 92 d6 01 	sts	0x01D6, r1
    2c90:	10 92 d7 01 	sts	0x01D7, r1
    2c94:	10 92 d8 01 	sts	0x01D8, r1
    2c98:	df 91       	pop	r29
    2c9a:	cf 91       	pop	r28
    2c9c:	08 95       	ret

00002c9e <system_set_match_started>:
void system_set_match_started(void) 	{ 	match_started = 1; 		}
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	80 93 d9 01 	sts	0x01D9, r24
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	08 95       	ret

00002cb2 <system_get_system_time>:
uint32_t system_get_system_time(void) 	{ 	return sys_time; 		}
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	80 91 d5 01 	lds	r24, 0x01D5
    2cbe:	90 91 d6 01 	lds	r25, 0x01D6
    2cc2:	a0 91 d7 01 	lds	r26, 0x01D7
    2cc6:	b0 91 d8 01 	lds	r27, 0x01D8
    2cca:	bc 01       	movw	r22, r24
    2ccc:	cd 01       	movw	r24, r26
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	08 95       	ret

00002cd4 <system_get_match_started>:
uint8_t system_get_match_started(void) 	{ 	return match_started; 	}
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
    2cdc:	80 91 d9 01 	lds	r24, 0x01D9
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	08 95       	ret

00002ce6 <__vector_8>:


ISR(INT7_vect) {
    2ce6:	1f 92       	push	r1
    2ce8:	0f 92       	push	r0
    2cea:	00 90 5f 00 	lds	r0, 0x005F
    2cee:	0f 92       	push	r0
    2cf0:	11 24       	eor	r1, r1
    2cf2:	8f 93       	push	r24
    2cf4:	cf 93       	push	r28
    2cf6:	df 93       	push	r29
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
	jumper_pulled = true;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	80 93 de 01 	sts	0x01DE, r24
}
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	8f 91       	pop	r24
    2d08:	0f 90       	pop	r0
    2d0a:	00 92 5f 00 	sts	0x005F, r0
    2d0e:	0f 90       	pop	r0
    2d10:	1f 90       	pop	r1
    2d12:	18 95       	reti

00002d14 <system_setup_jumper>:

static void system_setup_jumper() {
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
    2d1c:	2e 97       	sbiw	r28, 0x0e	; 14
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61

	DDRE &= ~(1 << PIN7);			// setup pin as input
    2d28:	8d e2       	ldi	r24, 0x2D	; 45
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	2d e2       	ldi	r18, 0x2D	; 45
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	f9 01       	movw	r30, r18
    2d32:	20 81       	ld	r18, Z
    2d34:	2f 77       	andi	r18, 0x7F	; 127
    2d36:	fc 01       	movw	r30, r24
    2d38:	20 83       	st	Z, r18

	PORTE |= (1 << PIN7);			// pullup
    2d3a:	8e e2       	ldi	r24, 0x2E	; 46
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	2e e2       	ldi	r18, 0x2E	; 46
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	f9 01       	movw	r30, r18
    2d44:	20 81       	ld	r18, Z
    2d46:	20 68       	ori	r18, 0x80	; 128
    2d48:	fc 01       	movw	r30, r24
    2d4a:	20 83       	st	Z, r18

	EICRB = (1 << ISC70);			// set on status change to triggure interrupt
    2d4c:	8a e6       	ldi	r24, 0x6A	; 106
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	20 e4       	ldi	r18, 0x40	; 64
    2d52:	fc 01       	movw	r30, r24
    2d54:	20 83       	st	Z, r18

	EIMSK |= (1 << INT7);			// enable interrupt
    2d56:	8d e3       	ldi	r24, 0x3D	; 61
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	2d e3       	ldi	r18, 0x3D	; 61
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	f9 01       	movw	r30, r18
    2d60:	20 81       	ld	r18, Z
    2d62:	20 68       	ori	r18, 0x80	; 128
    2d64:	fc 01       	movw	r30, r24
    2d66:	20 83       	st	Z, r18
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	a8 ec       	ldi	r26, 0xC8	; 200
    2d6e:	b2 e4       	ldi	r27, 0x42	; 66
    2d70:	89 83       	std	Y+1, r24	; 0x01
    2d72:	9a 83       	std	Y+2, r25	; 0x02
    2d74:	ab 83       	std	Y+3, r26	; 0x03
    2d76:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e4       	ldi	r19, 0x40	; 64
    2d7c:	4c e1       	ldi	r20, 0x1C	; 28
    2d7e:	55 e4       	ldi	r21, 0x45	; 69
    2d80:	69 81       	ldd	r22, Y+1	; 0x01
    2d82:	7a 81       	ldd	r23, Y+2	; 0x02
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	9c 81       	ldd	r25, Y+4	; 0x04
    2d88:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	8d 83       	std	Y+5, r24	; 0x05
    2d92:	9e 83       	std	Y+6, r25	; 0x06
    2d94:	af 83       	std	Y+7, r26	; 0x07
    2d96:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	40 e8       	ldi	r20, 0x80	; 128
    2d9e:	5f e3       	ldi	r21, 0x3F	; 63
    2da0:	6d 81       	ldd	r22, Y+5	; 0x05
    2da2:	7e 81       	ldd	r23, Y+6	; 0x06
    2da4:	8f 81       	ldd	r24, Y+7	; 0x07
    2da6:	98 85       	ldd	r25, Y+8	; 0x08
    2da8:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    2dac:	88 23       	and	r24, r24
    2dae:	2c f4       	brge	.+10     	; 0x2dba <system_setup_jumper+0xa6>
		__ticks = 1;
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9a 87       	std	Y+10, r25	; 0x0a
    2db6:	89 87       	std	Y+9, r24	; 0x09
    2db8:	3f c0       	rjmp	.+126    	; 0x2e38 <system_setup_jumper+0x124>
	else if (__tmp > 65535)
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	3f ef       	ldi	r19, 0xFF	; 255
    2dbe:	4f e7       	ldi	r20, 0x7F	; 127
    2dc0:	57 e4       	ldi	r21, 0x47	; 71
    2dc2:	6d 81       	ldd	r22, Y+5	; 0x05
    2dc4:	7e 81       	ldd	r23, Y+6	; 0x06
    2dc6:	8f 81       	ldd	r24, Y+7	; 0x07
    2dc8:	98 85       	ldd	r25, Y+8	; 0x08
    2dca:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    2dce:	18 16       	cp	r1, r24
    2dd0:	4c f5       	brge	.+82     	; 0x2e24 <system_setup_jumper+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e2       	ldi	r20, 0x20	; 32
    2dd8:	51 e4       	ldi	r21, 0x41	; 65
    2dda:	69 81       	ldd	r22, Y+1	; 0x01
    2ddc:	7a 81       	ldd	r23, Y+2	; 0x02
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	9c 81       	ldd	r25, Y+4	; 0x04
    2de2:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	bc 01       	movw	r22, r24
    2dec:	cd 01       	movw	r24, r26
    2dee:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	9a 87       	std	Y+10, r25	; 0x0a
    2df8:	89 87       	std	Y+9, r24	; 0x09
    2dfa:	0f c0       	rjmp	.+30     	; 0x2e1a <system_setup_jumper+0x106>
    2dfc:	8a ef       	ldi	r24, 0xFA	; 250
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	9c 87       	std	Y+12, r25	; 0x0c
    2e02:	8b 87       	std	Y+11, r24	; 0x0b
    2e04:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e06:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <system_setup_jumper+0xf4>
    2e0c:	9c 87       	std	Y+12, r25	; 0x0c
    2e0e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e10:	89 85       	ldd	r24, Y+9	; 0x09
    2e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	9a 87       	std	Y+10, r25	; 0x0a
    2e18:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1a:	89 85       	ldd	r24, Y+9	; 0x09
    2e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1e:	89 2b       	or	r24, r25
    2e20:	69 f7       	brne	.-38     	; 0x2dfc <system_setup_jumper+0xe8>
    2e22:	14 c0       	rjmp	.+40     	; 0x2e4c <system_setup_jumper+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e24:	6d 81       	ldd	r22, Y+5	; 0x05
    2e26:	7e 81       	ldd	r23, Y+6	; 0x06
    2e28:	8f 81       	ldd	r24, Y+7	; 0x07
    2e2a:	98 85       	ldd	r25, Y+8	; 0x08
    2e2c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	9a 87       	std	Y+10, r25	; 0x0a
    2e36:	89 87       	std	Y+9, r24	; 0x09
    2e38:	89 85       	ldd	r24, Y+9	; 0x09
    2e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3c:	9e 87       	std	Y+14, r25	; 0x0e
    2e3e:	8d 87       	std	Y+13, r24	; 0x0d
    2e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	f1 f7       	brne	.-4      	; 0x2e44 <system_setup_jumper+0x130>
    2e48:	9e 87       	std	Y+14, r25	; 0x0e
    2e4a:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);

	sei();							// enable global interrupts
    2e4c:	78 94       	sei
}
    2e4e:	2e 96       	adiw	r28, 0x0e	; 14
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	df 91       	pop	r29
    2e5c:	cf 91       	pop	r28
    2e5e:	08 95       	ret

00002e60 <system_wait_for_jumper>:

static void system_wait_for_jumper() {
    2e60:	cf 93       	push	r28
    2e62:	df 93       	push	r29
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	2e 97       	sbiw	r28, 0x0e	; 14
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	de bf       	out	0x3e, r29	; 62
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	cd bf       	out	0x3d, r28	; 61

	while(jumper_pulled == false)		// wait for jumper_pulled t be set true
    2e74:	72 c0       	rjmp	.+228    	; 0x2f5a <system_wait_for_jumper+0xfa>
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	a0 e2       	ldi	r26, 0x20	; 32
    2e7c:	b1 e4       	ldi	r27, 0x41	; 65
    2e7e:	89 83       	std	Y+1, r24	; 0x01
    2e80:	9a 83       	std	Y+2, r25	; 0x02
    2e82:	ab 83       	std	Y+3, r26	; 0x03
    2e84:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e4       	ldi	r19, 0x40	; 64
    2e8a:	4c e1       	ldi	r20, 0x1C	; 28
    2e8c:	55 e4       	ldi	r21, 0x45	; 69
    2e8e:	69 81       	ldd	r22, Y+1	; 0x01
    2e90:	7a 81       	ldd	r23, Y+2	; 0x02
    2e92:	8b 81       	ldd	r24, Y+3	; 0x03
    2e94:	9c 81       	ldd	r25, Y+4	; 0x04
    2e96:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	8d 83       	std	Y+5, r24	; 0x05
    2ea0:	9e 83       	std	Y+6, r25	; 0x06
    2ea2:	af 83       	std	Y+7, r26	; 0x07
    2ea4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	40 e8       	ldi	r20, 0x80	; 128
    2eac:	5f e3       	ldi	r21, 0x3F	; 63
    2eae:	6d 81       	ldd	r22, Y+5	; 0x05
    2eb0:	7e 81       	ldd	r23, Y+6	; 0x06
    2eb2:	8f 81       	ldd	r24, Y+7	; 0x07
    2eb4:	98 85       	ldd	r25, Y+8	; 0x08
    2eb6:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    2eba:	88 23       	and	r24, r24
    2ebc:	2c f4       	brge	.+10     	; 0x2ec8 <system_wait_for_jumper+0x68>
		__ticks = 1;
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	9a 87       	std	Y+10, r25	; 0x0a
    2ec4:	89 87       	std	Y+9, r24	; 0x09
    2ec6:	3f c0       	rjmp	.+126    	; 0x2f46 <system_wait_for_jumper+0xe6>
	else if (__tmp > 65535)
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	3f ef       	ldi	r19, 0xFF	; 255
    2ecc:	4f e7       	ldi	r20, 0x7F	; 127
    2ece:	57 e4       	ldi	r21, 0x47	; 71
    2ed0:	6d 81       	ldd	r22, Y+5	; 0x05
    2ed2:	7e 81       	ldd	r23, Y+6	; 0x06
    2ed4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ed6:	98 85       	ldd	r25, Y+8	; 0x08
    2ed8:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    2edc:	18 16       	cp	r1, r24
    2ede:	4c f5       	brge	.+82     	; 0x2f32 <system_wait_for_jumper+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	40 e2       	ldi	r20, 0x20	; 32
    2ee6:	51 e4       	ldi	r21, 0x41	; 65
    2ee8:	69 81       	ldd	r22, Y+1	; 0x01
    2eea:	7a 81       	ldd	r23, Y+2	; 0x02
    2eec:	8b 81       	ldd	r24, Y+3	; 0x03
    2eee:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef0:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	bc 01       	movw	r22, r24
    2efa:	cd 01       	movw	r24, r26
    2efc:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	9a 87       	std	Y+10, r25	; 0x0a
    2f06:	89 87       	std	Y+9, r24	; 0x09
    2f08:	0f c0       	rjmp	.+30     	; 0x2f28 <system_wait_for_jumper+0xc8>
    2f0a:	8a ef       	ldi	r24, 0xFA	; 250
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	9c 87       	std	Y+12, r25	; 0x0c
    2f10:	8b 87       	std	Y+11, r24	; 0x0b
    2f12:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f14:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	f1 f7       	brne	.-4      	; 0x2f16 <system_wait_for_jumper+0xb6>
    2f1a:	9c 87       	std	Y+12, r25	; 0x0c
    2f1c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1e:	89 85       	ldd	r24, Y+9	; 0x09
    2f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	9a 87       	std	Y+10, r25	; 0x0a
    2f26:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f28:	89 85       	ldd	r24, Y+9	; 0x09
    2f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2c:	89 2b       	or	r24, r25
    2f2e:	69 f7       	brne	.-38     	; 0x2f0a <system_wait_for_jumper+0xaa>
    2f30:	14 c0       	rjmp	.+40     	; 0x2f5a <system_wait_for_jumper+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f32:	6d 81       	ldd	r22, Y+5	; 0x05
    2f34:	7e 81       	ldd	r23, Y+6	; 0x06
    2f36:	8f 81       	ldd	r24, Y+7	; 0x07
    2f38:	98 85       	ldd	r25, Y+8	; 0x08
    2f3a:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	9a 87       	std	Y+10, r25	; 0x0a
    2f44:	89 87       	std	Y+9, r24	; 0x09
    2f46:	89 85       	ldd	r24, Y+9	; 0x09
    2f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4a:	9e 87       	std	Y+14, r25	; 0x0e
    2f4c:	8d 87       	std	Y+13, r24	; 0x0d
    2f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f52:	01 97       	sbiw	r24, 0x01	; 1
    2f54:	f1 f7       	brne	.-4      	; 0x2f52 <system_wait_for_jumper+0xf2>
    2f56:	9e 87       	std	Y+14, r25	; 0x0e
    2f58:	8d 87       	std	Y+13, r24	; 0x0d
    2f5a:	80 91 de 01 	lds	r24, 0x01DE
    2f5e:	88 23       	and	r24, r24
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <system_wait_for_jumper+0x104>
    2f62:	89 cf       	rjmp	.-238    	; 0x2e76 <system_wait_for_jumper+0x16>
		_delay_ms(10);

}
    2f64:	2e 96       	adiw	r28, 0x0e	; 14
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	08 95       	ret

00002f76 <system_init>:
 *	Function: 		void system_init(void)
 *	Parameters: 	void
 *	Description:	initing all the things
 */
void system_init(void)
{
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	aa 97       	sbiw	r28, 0x2a	; 42
    2f80:	0f b6       	in	r0, 0x3f	; 63
    2f82:	f8 94       	cli
    2f84:	de bf       	out	0x3e, r29	; 62
    2f86:	0f be       	out	0x3f, r0	; 63
    2f88:	cd bf       	out	0x3d, r28	; 61
	// sets debouncer
	timer_register_callback(gpio_debouncer);
    2f8a:	8b e6       	ldi	r24, 0x6B	; 107
    2f8c:	9d e0       	ldi	r25, 0x0D	; 13
    2f8e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <timer_register_callback>
    2f92:	80 e0       	ldi	r24, 0x00	; 0
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	a8 ec       	ldi	r26, 0xC8	; 200
    2f98:	b2 e4       	ldi	r27, 0x42	; 66
    2f9a:	89 83       	std	Y+1, r24	; 0x01
    2f9c:	9a 83       	std	Y+2, r25	; 0x02
    2f9e:	ab 83       	std	Y+3, r26	; 0x03
    2fa0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e4       	ldi	r19, 0x40	; 64
    2fa6:	4c e1       	ldi	r20, 0x1C	; 28
    2fa8:	55 e4       	ldi	r21, 0x45	; 69
    2faa:	69 81       	ldd	r22, Y+1	; 0x01
    2fac:	7a 81       	ldd	r23, Y+2	; 0x02
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb2:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	8d 83       	std	Y+5, r24	; 0x05
    2fbc:	9e 83       	std	Y+6, r25	; 0x06
    2fbe:	af 83       	std	Y+7, r26	; 0x07
    2fc0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	40 e8       	ldi	r20, 0x80	; 128
    2fc8:	5f e3       	ldi	r21, 0x3F	; 63
    2fca:	6d 81       	ldd	r22, Y+5	; 0x05
    2fcc:	7e 81       	ldd	r23, Y+6	; 0x06
    2fce:	8f 81       	ldd	r24, Y+7	; 0x07
    2fd0:	98 85       	ldd	r25, Y+8	; 0x08
    2fd2:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    2fd6:	88 23       	and	r24, r24
    2fd8:	2c f4       	brge	.+10     	; 0x2fe4 <system_init+0x6e>
		__ticks = 1;
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	9a 87       	std	Y+10, r25	; 0x0a
    2fe0:	89 87       	std	Y+9, r24	; 0x09
    2fe2:	3f c0       	rjmp	.+126    	; 0x3062 <system_init+0xec>
	else if (__tmp > 65535)
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	3f ef       	ldi	r19, 0xFF	; 255
    2fe8:	4f e7       	ldi	r20, 0x7F	; 127
    2fea:	57 e4       	ldi	r21, 0x47	; 71
    2fec:	6d 81       	ldd	r22, Y+5	; 0x05
    2fee:	7e 81       	ldd	r23, Y+6	; 0x06
    2ff0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff2:	98 85       	ldd	r25, Y+8	; 0x08
    2ff4:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    2ff8:	18 16       	cp	r1, r24
    2ffa:	4c f5       	brge	.+82     	; 0x304e <system_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 e2       	ldi	r20, 0x20	; 32
    3002:	51 e4       	ldi	r21, 0x41	; 65
    3004:	69 81       	ldd	r22, Y+1	; 0x01
    3006:	7a 81       	ldd	r23, Y+2	; 0x02
    3008:	8b 81       	ldd	r24, Y+3	; 0x03
    300a:	9c 81       	ldd	r25, Y+4	; 0x04
    300c:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	bc 01       	movw	r22, r24
    3016:	cd 01       	movw	r24, r26
    3018:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	9a 87       	std	Y+10, r25	; 0x0a
    3022:	89 87       	std	Y+9, r24	; 0x09
    3024:	0f c0       	rjmp	.+30     	; 0x3044 <system_init+0xce>
    3026:	8a ef       	ldi	r24, 0xFA	; 250
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	9c 87       	std	Y+12, r25	; 0x0c
    302c:	8b 87       	std	Y+11, r24	; 0x0b
    302e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3030:	9c 85       	ldd	r25, Y+12	; 0x0c
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	f1 f7       	brne	.-4      	; 0x3032 <system_init+0xbc>
    3036:	9c 87       	std	Y+12, r25	; 0x0c
    3038:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    303a:	89 85       	ldd	r24, Y+9	; 0x09
    303c:	9a 85       	ldd	r25, Y+10	; 0x0a
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	9a 87       	std	Y+10, r25	; 0x0a
    3042:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3044:	89 85       	ldd	r24, Y+9	; 0x09
    3046:	9a 85       	ldd	r25, Y+10	; 0x0a
    3048:	89 2b       	or	r24, r25
    304a:	69 f7       	brne	.-38     	; 0x3026 <system_init+0xb0>
    304c:	14 c0       	rjmp	.+40     	; 0x3076 <system_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    304e:	6d 81       	ldd	r22, Y+5	; 0x05
    3050:	7e 81       	ldd	r23, Y+6	; 0x06
    3052:	8f 81       	ldd	r24, Y+7	; 0x07
    3054:	98 85       	ldd	r25, Y+8	; 0x08
    3056:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	9a 87       	std	Y+10, r25	; 0x0a
    3060:	89 87       	std	Y+9, r24	; 0x09
    3062:	89 85       	ldd	r24, Y+9	; 0x09
    3064:	9a 85       	ldd	r25, Y+10	; 0x0a
    3066:	9e 87       	std	Y+14, r25	; 0x0e
    3068:	8d 87       	std	Y+13, r24	; 0x0d
    306a:	8d 85       	ldd	r24, Y+13	; 0x0d
    306c:	9e 85       	ldd	r25, Y+14	; 0x0e
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	f1 f7       	brne	.-4      	; 0x306e <system_init+0xf8>
    3072:	9e 87       	std	Y+14, r25	; 0x0e
    3074:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);

	gpio_register_pin(0, GPIO_DIRECTION_INPUT, true);
    3076:	41 e0       	ldi	r20, 0x01	; 1
    3078:	60 e0       	ldi	r22, 0x00	; 0
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <gpio_register_pin>
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	a8 ec       	ldi	r26, 0xC8	; 200
    3086:	b2 e4       	ldi	r27, 0x42	; 66
    3088:	8f 87       	std	Y+15, r24	; 0x0f
    308a:	98 8b       	std	Y+16, r25	; 0x10
    308c:	a9 8b       	std	Y+17, r26	; 0x11
    308e:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e4       	ldi	r19, 0x40	; 64
    3094:	4c e1       	ldi	r20, 0x1C	; 28
    3096:	55 e4       	ldi	r21, 0x45	; 69
    3098:	6f 85       	ldd	r22, Y+15	; 0x0f
    309a:	78 89       	ldd	r23, Y+16	; 0x10
    309c:	89 89       	ldd	r24, Y+17	; 0x11
    309e:	9a 89       	ldd	r25, Y+18	; 0x12
    30a0:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	8b 8b       	std	Y+19, r24	; 0x13
    30aa:	9c 8b       	std	Y+20, r25	; 0x14
    30ac:	ad 8b       	std	Y+21, r26	; 0x15
    30ae:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e8       	ldi	r20, 0x80	; 128
    30b6:	5f e3       	ldi	r21, 0x3F	; 63
    30b8:	6b 89       	ldd	r22, Y+19	; 0x13
    30ba:	7c 89       	ldd	r23, Y+20	; 0x14
    30bc:	8d 89       	ldd	r24, Y+21	; 0x15
    30be:	9e 89       	ldd	r25, Y+22	; 0x16
    30c0:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    30c4:	88 23       	and	r24, r24
    30c6:	2c f4       	brge	.+10     	; 0x30d2 <system_init+0x15c>
		__ticks = 1;
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	98 8f       	std	Y+24, r25	; 0x18
    30ce:	8f 8b       	std	Y+23, r24	; 0x17
    30d0:	3f c0       	rjmp	.+126    	; 0x3150 <system_init+0x1da>
	else if (__tmp > 65535)
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	3f ef       	ldi	r19, 0xFF	; 255
    30d6:	4f e7       	ldi	r20, 0x7F	; 127
    30d8:	57 e4       	ldi	r21, 0x47	; 71
    30da:	6b 89       	ldd	r22, Y+19	; 0x13
    30dc:	7c 89       	ldd	r23, Y+20	; 0x14
    30de:	8d 89       	ldd	r24, Y+21	; 0x15
    30e0:	9e 89       	ldd	r25, Y+22	; 0x16
    30e2:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    30e6:	18 16       	cp	r1, r24
    30e8:	4c f5       	brge	.+82     	; 0x313c <system_init+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e2       	ldi	r20, 0x20	; 32
    30f0:	51 e4       	ldi	r21, 0x41	; 65
    30f2:	6f 85       	ldd	r22, Y+15	; 0x0f
    30f4:	78 89       	ldd	r23, Y+16	; 0x10
    30f6:	89 89       	ldd	r24, Y+17	; 0x11
    30f8:	9a 89       	ldd	r25, Y+18	; 0x12
    30fa:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	bc 01       	movw	r22, r24
    3104:	cd 01       	movw	r24, r26
    3106:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	98 8f       	std	Y+24, r25	; 0x18
    3110:	8f 8b       	std	Y+23, r24	; 0x17
    3112:	0f c0       	rjmp	.+30     	; 0x3132 <system_init+0x1bc>
    3114:	8a ef       	ldi	r24, 0xFA	; 250
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	9a 8f       	std	Y+26, r25	; 0x1a
    311a:	89 8f       	std	Y+25, r24	; 0x19
    311c:	89 8d       	ldd	r24, Y+25	; 0x19
    311e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <system_init+0x1aa>
    3124:	9a 8f       	std	Y+26, r25	; 0x1a
    3126:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3128:	8f 89       	ldd	r24, Y+23	; 0x17
    312a:	98 8d       	ldd	r25, Y+24	; 0x18
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	98 8f       	std	Y+24, r25	; 0x18
    3130:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3132:	8f 89       	ldd	r24, Y+23	; 0x17
    3134:	98 8d       	ldd	r25, Y+24	; 0x18
    3136:	89 2b       	or	r24, r25
    3138:	69 f7       	brne	.-38     	; 0x3114 <system_init+0x19e>
    313a:	14 c0       	rjmp	.+40     	; 0x3164 <system_init+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313c:	6b 89       	ldd	r22, Y+19	; 0x13
    313e:	7c 89       	ldd	r23, Y+20	; 0x14
    3140:	8d 89       	ldd	r24, Y+21	; 0x15
    3142:	9e 89       	ldd	r25, Y+22	; 0x16
    3144:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	98 8f       	std	Y+24, r25	; 0x18
    314e:	8f 8b       	std	Y+23, r24	; 0x17
    3150:	8f 89       	ldd	r24, Y+23	; 0x17
    3152:	98 8d       	ldd	r25, Y+24	; 0x18
    3154:	9c 8f       	std	Y+28, r25	; 0x1c
    3156:	8b 8f       	std	Y+27, r24	; 0x1b
    3158:	8b 8d       	ldd	r24, Y+27	; 0x1b
    315a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	f1 f7       	brne	.-4      	; 0x315c <system_init+0x1e6>
    3160:	9c 8f       	std	Y+28, r25	; 0x1c
    3162:	8b 8f       	std	Y+27, r24	; 0x1b

	// small delay
	_delay_ms(100);

	DDRG = 0xff;
    3164:	83 e3       	ldi	r24, 0x33	; 51
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	2f ef       	ldi	r18, 0xFF	; 255
    316a:	fc 01       	movw	r30, r24
    316c:	20 83       	st	Z, r18
	PORTG = 0x00;
    316e:	84 e3       	ldi	r24, 0x34	; 52
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	fc 01       	movw	r30, r24
    3174:	10 82       	st	Z, r1

	// waiting for jumper
	timer_init(1000);
    3176:	88 ee       	ldi	r24, 0xE8	; 232
    3178:	93 e0       	ldi	r25, 0x03	; 3
    317a:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <timer_init>
	CAN_Init(1);
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	0e 94 ad 09 	call	0x135a	; 0x135a <CAN_Init>
    3184:	80 e0       	ldi	r24, 0x00	; 0
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	aa ef       	ldi	r26, 0xFA	; 250
    318a:	b3 e4       	ldi	r27, 0x43	; 67
    318c:	8d 8f       	std	Y+29, r24	; 0x1d
    318e:	9e 8f       	std	Y+30, r25	; 0x1e
    3190:	af 8f       	std	Y+31, r26	; 0x1f
    3192:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e4       	ldi	r19, 0x40	; 64
    3198:	4c e1       	ldi	r20, 0x1C	; 28
    319a:	55 e4       	ldi	r21, 0x45	; 69
    319c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    319e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    31a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31a2:	98 a1       	ldd	r25, Y+32	; 0x20
    31a4:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	89 a3       	std	Y+33, r24	; 0x21
    31ae:	9a a3       	std	Y+34, r25	; 0x22
    31b0:	ab a3       	std	Y+35, r26	; 0x23
    31b2:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e8       	ldi	r20, 0x80	; 128
    31ba:	5f e3       	ldi	r21, 0x3F	; 63
    31bc:	69 a1       	ldd	r22, Y+33	; 0x21
    31be:	7a a1       	ldd	r23, Y+34	; 0x22
    31c0:	8b a1       	ldd	r24, Y+35	; 0x23
    31c2:	9c a1       	ldd	r25, Y+36	; 0x24
    31c4:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    31c8:	88 23       	and	r24, r24
    31ca:	2c f4       	brge	.+10     	; 0x31d6 <system_init+0x260>
		__ticks = 1;
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	9e a3       	std	Y+38, r25	; 0x26
    31d2:	8d a3       	std	Y+37, r24	; 0x25
    31d4:	3f c0       	rjmp	.+126    	; 0x3254 <system_init+0x2de>
	else if (__tmp > 65535)
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	3f ef       	ldi	r19, 0xFF	; 255
    31da:	4f e7       	ldi	r20, 0x7F	; 127
    31dc:	57 e4       	ldi	r21, 0x47	; 71
    31de:	69 a1       	ldd	r22, Y+33	; 0x21
    31e0:	7a a1       	ldd	r23, Y+34	; 0x22
    31e2:	8b a1       	ldd	r24, Y+35	; 0x23
    31e4:	9c a1       	ldd	r25, Y+36	; 0x24
    31e6:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    31ea:	18 16       	cp	r1, r24
    31ec:	4c f5       	brge	.+82     	; 0x3240 <system_init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 e2       	ldi	r20, 0x20	; 32
    31f4:	51 e4       	ldi	r21, 0x41	; 65
    31f6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    31f8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    31fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31fc:	98 a1       	ldd	r25, Y+32	; 0x20
    31fe:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	bc 01       	movw	r22, r24
    3208:	cd 01       	movw	r24, r26
    320a:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9e a3       	std	Y+38, r25	; 0x26
    3214:	8d a3       	std	Y+37, r24	; 0x25
    3216:	0f c0       	rjmp	.+30     	; 0x3236 <system_init+0x2c0>
    3218:	8a ef       	ldi	r24, 0xFA	; 250
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	98 a7       	std	Y+40, r25	; 0x28
    321e:	8f a3       	std	Y+39, r24	; 0x27
    3220:	8f a1       	ldd	r24, Y+39	; 0x27
    3222:	98 a5       	ldd	r25, Y+40	; 0x28
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	f1 f7       	brne	.-4      	; 0x3224 <system_init+0x2ae>
    3228:	98 a7       	std	Y+40, r25	; 0x28
    322a:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322c:	8d a1       	ldd	r24, Y+37	; 0x25
    322e:	9e a1       	ldd	r25, Y+38	; 0x26
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	9e a3       	std	Y+38, r25	; 0x26
    3234:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3236:	8d a1       	ldd	r24, Y+37	; 0x25
    3238:	9e a1       	ldd	r25, Y+38	; 0x26
    323a:	89 2b       	or	r24, r25
    323c:	69 f7       	brne	.-38     	; 0x3218 <system_init+0x2a2>
    323e:	14 c0       	rjmp	.+40     	; 0x3268 <system_init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3240:	69 a1       	ldd	r22, Y+33	; 0x21
    3242:	7a a1       	ldd	r23, Y+34	; 0x22
    3244:	8b a1       	ldd	r24, Y+35	; 0x23
    3246:	9c a1       	ldd	r25, Y+36	; 0x24
    3248:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	9e a3       	std	Y+38, r25	; 0x26
    3252:	8d a3       	std	Y+37, r24	; 0x25
    3254:	8d a1       	ldd	r24, Y+37	; 0x25
    3256:	9e a1       	ldd	r25, Y+38	; 0x26
    3258:	9a a7       	std	Y+42, r25	; 0x2a
    325a:	89 a7       	std	Y+41, r24	; 0x29
    325c:	89 a5       	ldd	r24, Y+41	; 0x29
    325e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	f1 f7       	brne	.-4      	; 0x3260 <system_init+0x2ea>
    3264:	9a a7       	std	Y+42, r25	; 0x2a
    3266:	89 a7       	std	Y+41, r24	; 0x29

	_delay_ms(500);

	system_setup_jumper();
    3268:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <system_setup_jumper>
	//detection_setup();
	//debug_init();


	// waiting for jumper
	system_wait_for_jumper();
    326c:	0e 94 30 17 	call	0x2e60	; 0x2e60 <system_wait_for_jumper>
	PORTG = 0xff;
    3270:	84 e3       	ldi	r24, 0x34	; 52
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	2f ef       	ldi	r18, 0xFF	; 255
    3276:	fc 01       	movw	r30, r24
    3278:	20 83       	st	Z, r18


	system_reset_system_time();															// reset system time
    327a:	0e 94 40 16 	call	0x2c80	; 0x2c80 <system_reset_system_time>
	system_set_match_started();															// match has started!
    327e:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <system_set_match_started>

}
    3282:	aa 96       	adiw	r28, 0x2a	; 42
    3284:	0f b6       	in	r0, 0x3f	; 63
    3286:	f8 94       	cli
    3288:	de bf       	out	0x3e, r29	; 62
    328a:	0f be       	out	0x3f, r0	; 63
    328c:	cd bf       	out	0x3d, r28	; 61
    328e:	df 91       	pop	r29
    3290:	cf 91       	pop	r28
    3292:	08 95       	ret

00003294 <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    3294:	cf 93       	push	r28
    3296:	df 93       	push	r29
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    cli();
    329c:	f8 94       	cli
    return 1;
    329e:	81 e0       	ldi	r24, 0x01	; 1
}
    32a0:	df 91       	pop	r29
    32a2:	cf 91       	pop	r28
    32a4:	08 95       	ret

000032a6 <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	00 d0       	rcall	.+0      	; 0x32ac <__iRestore+0x6>
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
    32b0:	9a 83       	std	Y+2, r25	; 0x02
    32b2:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
    32b4:	8f e5       	ldi	r24, 0x5F	; 95
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	29 81       	ldd	r18, Y+1	; 0x01
    32ba:	3a 81       	ldd	r19, Y+2	; 0x02
    32bc:	f9 01       	movw	r30, r18
    32be:	20 81       	ld	r18, Z
    32c0:	fc 01       	movw	r30, r24
    32c2:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	df 91       	pop	r29
    32ca:	cf 91       	pop	r28
    32cc:	08 95       	ret

000032ce <uart0_reinit>:
//Note      : Use BAUD_CALC(speed) macro to calculate UBRR value.
//          : All data inside UDR shift register will be lost.
//          : U2X bit is cleared if USARTn_U2X_SPEED is not defined.
//******************************************************************
	void uart0_reinit(uint16_t ubrr_value)
	{
    32ce:	cf 93       	push	r28
    32d0:	df 93       	push	r29
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <uart0_reinit+0x6>
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	9a 83       	std	Y+2, r25	; 0x02
    32da:	89 83       	std	Y+1, r24	; 0x01
	#ifdef USART0_RS485_MODE
		___PORT(RS485_CONTROL0_IOPORTNAME) &= ~(1<<RS485_CONTROL0_PIN); //set low
		___DDR(RS485_CONTROL0_IOPORTNAME) |= (1<<RS485_CONTROL0_PIN);
	#endif
		
		UCSR0B_REGISTER = 0; //flush all hardware buffers
    32dc:	81 ec       	ldi	r24, 0xC1	; 193
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	fc 01       	movw	r30, r24
    32e2:	10 82       	st	Z, r1
		
		//(writing TXENn to zero) will not become effective until ongoing and pending transmissions are completed
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
    32e4:	84 ec       	ldi	r24, 0xC4	; 196
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	29 81       	ldd	r18, Y+1	; 0x01
    32ea:	fc 01       	movw	r30, r24
    32ec:	20 83       	st	Z, r18
		UBRR0H_REGISTER = (ubrr_value>>8);
    32ee:	85 ec       	ldi	r24, 0xC5	; 197
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	29 81       	ldd	r18, Y+1	; 0x01
    32f4:	3a 81       	ldd	r19, Y+2	; 0x02
    32f6:	23 2f       	mov	r18, r19
    32f8:	33 27       	eor	r19, r19
    32fa:	fc 01       	movw	r30, r24
    32fc:	20 83       	st	Z, r18
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER = (1<<MPCM0_BIT);
	#endif
	
		UCSR0B_REGISTER = USART0_CONFIG_B;
    32fe:	81 ec       	ldi	r24, 0xC1	; 193
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	28 e9       	ldi	r18, 0x98	; 152
    3304:	fc 01       	movw	r30, r24
    3306:	20 83       	st	Z, r18
		
	#ifdef USART0_USE_SOFT_RTS
		___DDR(RTS0_IOPORTNAME) |= (1<<RTS0_PIN);
		___PORT(RTS0_IOPORTNAME) &= ~(1<<RTS0_PIN);
	#endif
	}
    3308:	0f 90       	pop	r0
    330a:	0f 90       	pop	r0
    330c:	df 91       	pop	r29
    330e:	cf 91       	pop	r28
    3310:	08 95       	ret

00003312 <uart1_reinit>:
#endif // USE_USART0

#ifdef USE_USART1
	void uart1_reinit(uint16_t ubrr_value)
	{
    3312:	cf 93       	push	r28
    3314:	df 93       	push	r29
    3316:	00 d0       	rcall	.+0      	; 0x3318 <uart1_reinit+0x6>
    3318:	cd b7       	in	r28, 0x3d	; 61
    331a:	de b7       	in	r29, 0x3e	; 62
    331c:	9a 83       	std	Y+2, r25	; 0x02
    331e:	89 83       	std	Y+1, r24	; 0x01
	#ifdef USART1_RS485_MODE
		___PORT(RS485_CONTROL1_IOPORTNAME) &= ~(1<<RS485_CONTROL1_PIN); //set low
		___DDR(RS485_CONTROL1_IOPORTNAME) |= (1<<RS485_CONTROL1_PIN);
	#endif
		
		UCSR1B_REGISTER = 0; //flush all hardware buffers
    3320:	89 ec       	ldi	r24, 0xC9	; 201
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	fc 01       	movw	r30, r24
    3326:	10 82       	st	Z, r1
		
		//(writing TXENn to zero) will not become effective until ongoing and pending transmissions are completed
		
		UBRR1L_REGISTER = (uint8_t) ubrr_value;
    3328:	8c ec       	ldi	r24, 0xCC	; 204
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	29 81       	ldd	r18, Y+1	; 0x01
    332e:	fc 01       	movw	r30, r24
    3330:	20 83       	st	Z, r18
		UBRR1H_REGISTER = (ubrr_value>>8);
    3332:	8d ec       	ldi	r24, 0xCD	; 205
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	29 81       	ldd	r18, Y+1	; 0x01
    3338:	3a 81       	ldd	r19, Y+2	; 0x02
    333a:	23 2f       	mov	r18, r19
    333c:	33 27       	eor	r19, r19
    333e:	fc 01       	movw	r30, r24
    3340:	20 83       	st	Z, r18
		#endif
	#elif defined(USART1_MPCM_MODE)
		UCSR1A_REGISTER = (1<<MPCM1_BIT);
	#endif
	
		UCSR1B_REGISTER = USART1_CONFIG_B;
    3342:	89 ec       	ldi	r24, 0xC9	; 201
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	28 e9       	ldi	r18, 0x98	; 152
    3348:	fc 01       	movw	r30, r24
    334a:	20 83       	st	Z, r18
		
	#ifdef USART1_USE_SOFT_RTS
		___DDR(RTS1_IOPORTNAME) |= (1<<RTS1_PIN);
		___PORT(RTS1_IOPORTNAME) &= ~(1<<RTS1_PIN);
	#endif
	}
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	df 91       	pop	r29
    3352:	cf 91       	pop	r28
    3354:	08 95       	ret

00003356 <uart0_putc>:
			[udre_bit]      "M"	(UDRE0_BIT)
			: // clobbers
			"r26","r27"
		);
	#else
		asm volatile("\n\t"
    3356:	90 91 27 02 	lds	r25, 0x0227
    335a:	93 95       	inc	r25
    335c:	9f 71       	andi	r25, 0x1F	; 31

0000335e <waitforspace_108>:
    335e:	b0 91 05 02 	lds	r27, 0x0205
    3362:	b9 17       	cp	r27, r25
    3364:	e1 f3       	breq	.-8      	; 0x335e <waitforspace_108>
			: // clobbers
			"r27"
		);
	#endif
		
		asm volatile("\n\t"
    3366:	a9 2f       	mov	r26, r25
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	a4 5b       	subi	r26, 0xB4	; 180
    336c:	bd 4f       	sbci	r27, 0xFD	; 253
    336e:	8c 93       	st	X, r24
			: // inputs
			: // clobbers
			"r26","r27"
		);
	
		cli();
    3370:	f8 94       	cli
		{
			tx0_Head = tmp_tx_Head;
    3372:	90 93 27 02 	sts	0x0227, r25
		#endif
			{
			#ifdef USART0_IN_IO_ADDRESS_SPACE
				UCSR0B_REGISTER |= (1<<UDRIE0_BIT); // enable UDRE interrupt
			#else
				asm volatile("\n\t"
    3376:	90 91 c1 00 	lds	r25, 0x00C1
    337a:	90 62       	ori	r25, 0x20	; 32
    337c:	90 93 c1 00 	sts	0x00C1, r25
				);
			#endif
			}
		}
	
		reti();
    3380:	18 95       	reti

00003382 <uart0_putc_noblock>:
		}
		return COMPLETED;
	}
#else //!USART_NO_ABI_BREAKING_PREMATURES
	uint8_t uart0_putc_noblock(char data)
	{
    3382:	1f 93       	push	r17
    3384:	cf 93       	push	r28
    3386:	df 93       	push	r29
    3388:	00 d0       	rcall	.+0      	; 0x338a <uart0_putc_noblock+0x8>
    338a:	1f 92       	push	r1
    338c:	cd b7       	in	r28, 0x3d	; 61
    338e:	de b7       	in	r29, 0x3e	; 62
    3390:	8b 83       	std	Y+3, r24	; 0x03
		tmp_tx_Head = (tmp_tx_Head + 1) & TX0_BUFFER_MASK;
		
		if(tmp_tx_Tail == tmp_tx_Head)
			return BUFFER_FULL;
	#else
		register uint8_t tmp_tx_Head = (tx0_Head + 1) & TX0_BUFFER_MASK; // calculate new position of TX head in buffer
    3392:	80 91 27 02 	lds	r24, 0x0227
    3396:	8f 5f       	subi	r24, 0xFF	; 255
    3398:	18 2f       	mov	r17, r24
    339a:	1f 71       	andi	r17, 0x1F	; 31
		
		if(tx0_Tail == tmp_tx_Head)
    339c:	80 91 05 02 	lds	r24, 0x0205
    33a0:	81 17       	cp	r24, r17
    33a2:	11 f4       	brne	.+4      	; 0x33a8 <uart0_putc_noblock+0x26>
			return BUFFER_FULL;
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	26 c0       	rjmp	.+76     	; 0x33f4 <uart0_putc_noblock+0x72>
	#endif
	
		asm volatile("\n\t"
    33a8:	8b 81       	ldd	r24, Y+3	; 0x03
    33aa:	91 2f       	mov	r25, r17
    33ac:	a9 2f       	mov	r26, r25
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	a4 5b       	subi	r26, 0xB4	; 180
    33b2:	bd 4f       	sbci	r27, 0xFD	; 253
    33b4:	8c 93       	st	X, r24
    33b6:	19 2f       	mov	r17, r25
    33b8:	8b 83       	std	Y+3, r24	; 0x03
		#endif
			"r26"
		);
		
		
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    33ba:	8f e5       	ldi	r24, 0x5F	; 95
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	fc 01       	movw	r30, r24
    33c0:	80 81       	ld	r24, Z
    33c2:	8a 83       	std	Y+2, r24	; 0x02
    33c4:	0e 94 4a 19 	call	0x3294	; 0x3294 <__iCliRetVal>
    33c8:	89 83       	std	Y+1, r24	; 0x01
    33ca:	0c c0       	rjmp	.+24     	; 0x33e4 <uart0_putc_noblock+0x62>
		{
			tx0_Head = tmp_tx_Head;
    33cc:	10 93 27 02 	sts	0x0227, r17
			
		#ifdef USART0_USE_SOFT_CTS
			if(!(___PIN(CTS0_IOPORTNAME) & (1<<CTS0_PIN)))
		#endif
			{
				UCSR0B_REGISTER |= (1<<UDRIE0_BIT); // enable UDRE interrupt
    33d0:	81 ec       	ldi	r24, 0xC1	; 193
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	21 ec       	ldi	r18, 0xC1	; 193
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	f9 01       	movw	r30, r18
    33da:	20 81       	ld	r18, Z
    33dc:	20 62       	ori	r18, 0x20	; 32
    33de:	fc 01       	movw	r30, r24
    33e0:	20 83       	st	Z, r18
		#endif
			"r26"
		);
		
		
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    33e2:	19 82       	std	Y+1, r1	; 0x01
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	88 23       	and	r24, r24
    33e8:	89 f7       	brne	.-30     	; 0x33cc <uart0_putc_noblock+0x4a>
    33ea:	ce 01       	movw	r24, r28
    33ec:	02 96       	adiw	r24, 0x02	; 2
    33ee:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__iRestore>
		#endif
			{
				UCSR0B_REGISTER |= (1<<UDRIE0_BIT); // enable UDRE interrupt
			}
		}
		return COMPLETED;
    33f2:	81 e0       	ldi	r24, 0x01	; 1
	}
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	df 91       	pop	r29
    33fc:	cf 91       	pop	r28
    33fe:	1f 91       	pop	r17
    3400:	08 95       	ret

00003402 <uart0_putstr>:
		char c;
		while ((c = *string++)) uart0_putc(c);
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	void uart0_putstr(char *string)
	{
    3402:	cf 93       	push	r28
    3404:	df 93       	push	r29
    3406:	00 d0       	rcall	.+0      	; 0x3408 <uart0_putstr+0x6>
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
    340c:	9a 83       	std	Y+2, r25	; 0x02
    340e:	89 83       	std	Y+1, r24	; 0x01
		asm volatile("\n\t"
    3410:	29 81       	ldd	r18, Y+1	; 0x01
    3412:	3a 81       	ldd	r19, Y+2	; 0x02
    3414:	f9 01       	movw	r30, r18

00003416 <load_loop_200>:
    3416:	81 91       	ld	r24, Z+
    3418:	88 23       	and	r24, r24
    341a:	11 f0       	breq	.+4      	; 0x3420 <skip_loop_200>
    341c:	9c df       	rcall	.-200    	; 0x3356 <uart0_putc>
    341e:	fb cf       	rjmp	.-10     	; 0x3416 <load_loop_200>

00003420 <skip_loop_200>:
			"z" (string)
			: // clobbers
			"r24",
			"r25","r26","r27" // uart_putc()
		);
	}
    3420:	0f 90       	pop	r0
    3422:	0f 90       	pop	r0
    3424:	df 91       	pop	r29
    3426:	cf 91       	pop	r28
    3428:	08 95       	ret

0000342a <uart0_putstrl>:
		while(BytesToWrite--)
			uart0_putc(*string++);
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	void uart0_putstrl(char *string, uint8_t BytesToWrite)
	{
    342a:	cf 93       	push	r28
    342c:	df 93       	push	r29
    342e:	00 d0       	rcall	.+0      	; 0x3430 <uart0_putstrl+0x6>
    3430:	1f 92       	push	r1
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	9a 83       	std	Y+2, r25	; 0x02
    3438:	89 83       	std	Y+1, r24	; 0x01
    343a:	6b 83       	std	Y+3, r22	; 0x03
		asm volatile("\n\t"
    343c:	4b 81       	ldd	r20, Y+3	; 0x03
    343e:	29 81       	ldd	r18, Y+1	; 0x01
    3440:	3a 81       	ldd	r19, Y+2	; 0x02
    3442:	f9 01       	movw	r30, r18
    3444:	4e 0f       	add	r20, r30

00003446 <load_loop_221>:
    3446:	4e 17       	cp	r20, r30
    3448:	19 f0       	breq	.+6      	; 0x3450 <skip_loop_221>
    344a:	81 91       	ld	r24, Z+
    344c:	84 df       	rcall	.-248    	; 0x3356 <uart0_putc>
    344e:	fb cf       	rjmp	.-10     	; 0x3446 <load_loop_221>

00003450 <skip_loop_221>:
			"z" (string)
			: // clobbers
			"r24",
			"r25","r26","r27" // uart_putc()
		);
	}
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	df 91       	pop	r29
    3458:	cf 91       	pop	r28
    345a:	08 95       	ret

0000345c <uart0_puts_p>:
		while ( (c = *string++) ) uart0_putc(c); 
	#endif
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	void uart0_puts_p(const __flash char *string)
	{
    345c:	cf 93       	push	r28
    345e:	df 93       	push	r29
    3460:	00 d0       	rcall	.+0      	; 0x3462 <uart0_puts_p+0x6>
    3462:	cd b7       	in	r28, 0x3d	; 61
    3464:	de b7       	in	r29, 0x3e	; 62
    3466:	9a 83       	std	Y+2, r25	; 0x02
    3468:	89 83       	std	Y+1, r24	; 0x01
	#if !defined(__AVR_ATtiny102__)||!defined(__AVR_ATtiny104__)
		asm volatile("\n\t"
    346a:	29 81       	ldd	r18, Y+1	; 0x01
    346c:	3a 81       	ldd	r19, Y+2	; 0x02
    346e:	f9 01       	movw	r30, r18

00003470 <load_loop_240>:
    3470:	85 91       	lpm	r24, Z+
    3472:	88 23       	and	r24, r24
    3474:	11 f0       	breq	.+4      	; 0x347a <skip_loop_240>
    3476:	6f df       	rcall	.-290    	; 0x3356 <uart0_putc>
    3478:	fb cf       	rjmp	.-10     	; 0x3470 <load_loop_240>

0000347a <skip_loop_240>:
			: // clobbers
			"r24",
			"r25","r26","r27" // uart_putc()
		);
	#endif
	}
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	08 95       	ret

00003484 <uart0_putint>:
//Function  : Send integer formated into ASCI string (base 10).
//Arguments : int16_t data value.
//Return    : none
//******************************************************************
	void uart0_putint(int16_t data)
	{
    3484:	cf 93       	push	r28
    3486:	df 93       	push	r29
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	29 97       	sbiw	r28, 0x09	; 9
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	f8 94       	cli
    3492:	de bf       	out	0x3e, r29	; 62
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	cd bf       	out	0x3d, r28	; 61
    3498:	99 87       	std	Y+9, r25	; 0x09
    349a:	88 87       	std	Y+8, r24	; 0x08
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[7]; // heading, 5 digit bytes, NULL
	#endif
	
		itoa(data, u_tmp_buff, 10);
    349c:	88 85       	ldd	r24, Y+8	; 0x08
    349e:	99 85       	ldd	r25, Y+9	; 0x09
    34a0:	4a e0       	ldi	r20, 0x0A	; 10
    34a2:	50 e0       	ldi	r21, 0x00	; 0
    34a4:	9e 01       	movw	r18, r28
    34a6:	2f 5f       	subi	r18, 0xFF	; 255
    34a8:	3f 4f       	sbci	r19, 0xFF	; 255
    34aa:	b9 01       	movw	r22, r18
    34ac:	0e 94 36 29 	call	0x526c	; 0x526c <itoa>
		uart0_putstr(u_tmp_buff);
    34b0:	ce 01       	movw	r24, r28
    34b2:	01 96       	adiw	r24, 0x01	; 1
    34b4:	0e 94 01 1a 	call	0x3402	; 0x3402 <uart0_putstr>
	}
    34b8:	29 96       	adiw	r28, 0x09	; 9
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	08 95       	ret

000034ca <uart0_putintr>:
//Arguments : 1. uint16_t data value.
//          : 2. Base value (DEC, HEX, OCT, BIN, etc.).
//Return    :    none
//******************************************************************
	void uart0_putintr(int16_t data, uint8_t radix)
	{
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	64 97       	sbiw	r28, 0x14	; 20
    34d4:	0f b6       	in	r0, 0x3f	; 63
    34d6:	f8 94       	cli
    34d8:	de bf       	out	0x3e, r29	; 62
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	cd bf       	out	0x3d, r28	; 61
    34de:	9b 8b       	std	Y+19, r25	; 0x13
    34e0:	8a 8b       	std	Y+18, r24	; 0x12
    34e2:	6c 8b       	std	Y+20, r22	; 0x14
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[17]; // heading, 15 digit bytes, NULL
	#endif
		
		itoa(data, u_tmp_buff, radix);
    34e4:	8c 89       	ldd	r24, Y+20	; 0x14
    34e6:	28 2f       	mov	r18, r24
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	8a 89       	ldd	r24, Y+18	; 0x12
    34ec:	9b 89       	ldd	r25, Y+19	; 0x13
    34ee:	a9 01       	movw	r20, r18
    34f0:	9e 01       	movw	r18, r28
    34f2:	2f 5f       	subi	r18, 0xFF	; 255
    34f4:	3f 4f       	sbci	r19, 0xFF	; 255
    34f6:	b9 01       	movw	r22, r18
    34f8:	0e 94 36 29 	call	0x526c	; 0x526c <itoa>
		uart0_putstr(u_tmp_buff);
    34fc:	ce 01       	movw	r24, r28
    34fe:	01 96       	adiw	r24, 0x01	; 1
    3500:	0e 94 01 1a 	call	0x3402	; 0x3402 <uart0_putstr>
	}
    3504:	64 96       	adiw	r28, 0x14	; 20
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61
    3510:	df 91       	pop	r29
    3512:	cf 91       	pop	r28
    3514:	08 95       	ret

00003516 <uart0_putuint>:
//Function  : Send unsigned integer formated into ASCI string (base 10).
//Arguments : uint16_t data value.
//Return    : none
//******************************************************************
	void uart0_putuint(uint16_t data)
	{
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	29 97       	sbiw	r28, 0x09	; 9
    3520:	0f b6       	in	r0, 0x3f	; 63
    3522:	f8 94       	cli
    3524:	de bf       	out	0x3e, r29	; 62
    3526:	0f be       	out	0x3f, r0	; 63
    3528:	cd bf       	out	0x3d, r28	; 61
    352a:	99 87       	std	Y+9, r25	; 0x09
    352c:	88 87       	std	Y+8, r24	; 0x08
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[7]; // heading, 5 digit bytes, NULL
	#endif
	
		utoa(data, u_tmp_buff, 10);
    352e:	88 85       	ldd	r24, Y+8	; 0x08
    3530:	99 85       	ldd	r25, Y+9	; 0x09
    3532:	4a e0       	ldi	r20, 0x0A	; 10
    3534:	50 e0       	ldi	r21, 0x00	; 0
    3536:	9e 01       	movw	r18, r28
    3538:	2f 5f       	subi	r18, 0xFF	; 255
    353a:	3f 4f       	sbci	r19, 0xFF	; 255
    353c:	b9 01       	movw	r22, r18
    353e:	0e 94 b0 29 	call	0x5360	; 0x5360 <utoa>
		uart0_putstr(u_tmp_buff);
    3542:	ce 01       	movw	r24, r28
    3544:	01 96       	adiw	r24, 0x01	; 1
    3546:	0e 94 01 1a 	call	0x3402	; 0x3402 <uart0_putstr>
	}
    354a:	29 96       	adiw	r28, 0x09	; 9
    354c:	0f b6       	in	r0, 0x3f	; 63
    354e:	f8 94       	cli
    3550:	de bf       	out	0x3e, r29	; 62
    3552:	0f be       	out	0x3f, r0	; 63
    3554:	cd bf       	out	0x3d, r28	; 61
    3556:	df 91       	pop	r29
    3558:	cf 91       	pop	r28
    355a:	08 95       	ret

0000355c <uart0_putuintr>:
//Arguments : 1. uint16_t data value.
//          : 2. Base value (DEC, HEX, OCT, BIN, etc.).
//Return    :    none
//******************************************************************
	void uart0_putuintr(uint16_t data, uint8_t radix)
	{
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	64 97       	sbiw	r28, 0x14	; 20
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	9b 8b       	std	Y+19, r25	; 0x13
    3572:	8a 8b       	std	Y+18, r24	; 0x12
    3574:	6c 8b       	std	Y+20, r22	; 0x14
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[17]; // heading, 15 digit bytes, NULL
	#endif
		utoa(data, u_tmp_buff, radix);
    3576:	8c 89       	ldd	r24, Y+20	; 0x14
    3578:	28 2f       	mov	r18, r24
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	8a 89       	ldd	r24, Y+18	; 0x12
    357e:	9b 89       	ldd	r25, Y+19	; 0x13
    3580:	a9 01       	movw	r20, r18
    3582:	9e 01       	movw	r18, r28
    3584:	2f 5f       	subi	r18, 0xFF	; 255
    3586:	3f 4f       	sbci	r19, 0xFF	; 255
    3588:	b9 01       	movw	r22, r18
    358a:	0e 94 b0 29 	call	0x5360	; 0x5360 <utoa>
		uart0_putstr(u_tmp_buff);
    358e:	ce 01       	movw	r24, r28
    3590:	01 96       	adiw	r24, 0x01	; 1
    3592:	0e 94 01 1a 	call	0x3402	; 0x3402 <uart0_putstr>
	}
    3596:	64 96       	adiw	r28, 0x14	; 20
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
    35a2:	df 91       	pop	r29
    35a4:	cf 91       	pop	r28
    35a6:	08 95       	ret

000035a8 <uart0_puthex>:
//Function  : Send unsigned integer formated into ASCI string (base 16)
//Arguments : uint16_t data value.
//Return    : none
//******************************************************************
	void uart0_puthex(uint8_t data)
	{
    35a8:	cf 93       	push	r28
    35aa:	df 93       	push	r29
    35ac:	00 d0       	rcall	.+0      	; 0x35ae <uart0_puthex+0x6>
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t tmp; 
		
		tmp = (data >> 4) & 0x0f;
    35b4:	8a 81       	ldd	r24, Y+2	; 0x02
    35b6:	82 95       	swap	r24
    35b8:	8f 70       	andi	r24, 0x0F	; 15
    35ba:	89 83       	std	Y+1, r24	; 0x01
	#ifdef USART_PUTHEX_IN_UPPERCASE
		uart0_putc( (tmp <= 9 ? '0' + tmp : 'A' - 10 + tmp));
	#else
		uart0_putc( (tmp <= 9 ? '0' + tmp : 'a' - 10 + tmp));
    35bc:	89 81       	ldd	r24, Y+1	; 0x01
    35be:	8a 30       	cpi	r24, 0x0A	; 10
    35c0:	18 f4       	brcc	.+6      	; 0x35c8 <uart0_puthex+0x20>
    35c2:	89 81       	ldd	r24, Y+1	; 0x01
    35c4:	80 5d       	subi	r24, 0xD0	; 208
    35c6:	02 c0       	rjmp	.+4      	; 0x35cc <uart0_puthex+0x24>
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	89 5a       	subi	r24, 0xA9	; 169
    35cc:	0e 94 ab 19 	call	0x3356	; 0x3356 <uart0_putc>
	#endif
		
		tmp = data & 0x0f;
    35d0:	8a 81       	ldd	r24, Y+2	; 0x02
    35d2:	8f 70       	andi	r24, 0x0F	; 15
    35d4:	89 83       	std	Y+1, r24	; 0x01
	#ifdef USART_PUTHEX_IN_UPPERCASE
		uart0_putc( (tmp <= 9 ? '0' + tmp : 'A' - 10 + tmp));
	#else
		uart0_putc( (tmp <= 9 ? '0' + tmp : 'a' - 10 + tmp));
    35d6:	89 81       	ldd	r24, Y+1	; 0x01
    35d8:	8a 30       	cpi	r24, 0x0A	; 10
    35da:	18 f4       	brcc	.+6      	; 0x35e2 <uart0_puthex+0x3a>
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	80 5d       	subi	r24, 0xD0	; 208
    35e0:	02 c0       	rjmp	.+4      	; 0x35e6 <uart0_puthex+0x3e>
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	89 5a       	subi	r24, 0xA9	; 169
    35e6:	0e 94 ab 19 	call	0x3356	; 0x3356 <uart0_putc>
	#endif
	}
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	df 91       	pop	r29
    35f0:	cf 91       	pop	r28
    35f2:	08 95       	ret

000035f4 <uart0_putlong>:
//Function  : Send long integer formated into ASCI string (base 10).
//Arguments : int32_t data value.
//Return    : none
//******************************************************************
	void uart0_putlong(int32_t data)
	{
    35f4:	cf 93       	push	r28
    35f6:	df 93       	push	r29
    35f8:	cd b7       	in	r28, 0x3d	; 61
    35fa:	de b7       	in	r29, 0x3e	; 62
    35fc:	60 97       	sbiw	r28, 0x10	; 16
    35fe:	0f b6       	in	r0, 0x3f	; 63
    3600:	f8 94       	cli
    3602:	de bf       	out	0x3e, r29	; 62
    3604:	0f be       	out	0x3f, r0	; 63
    3606:	cd bf       	out	0x3d, r28	; 61
    3608:	6d 87       	std	Y+13, r22	; 0x0d
    360a:	7e 87       	std	Y+14, r23	; 0x0e
    360c:	8f 87       	std	Y+15, r24	; 0x0f
    360e:	98 8b       	std	Y+16, r25	; 0x10
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[12]; // heading, 10 digit bytes, NULL
	#endif
		
		ltoa(data, u_tmp_buff, 10);
    3610:	8d 85       	ldd	r24, Y+13	; 0x0d
    3612:	9e 85       	ldd	r25, Y+14	; 0x0e
    3614:	af 85       	ldd	r26, Y+15	; 0x0f
    3616:	b8 89       	ldd	r27, Y+16	; 0x10
    3618:	2a e0       	ldi	r18, 0x0A	; 10
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	ae 01       	movw	r20, r28
    361e:	4f 5f       	subi	r20, 0xFF	; 255
    3620:	5f 4f       	sbci	r21, 0xFF	; 255
    3622:	bc 01       	movw	r22, r24
    3624:	cd 01       	movw	r24, r26
    3626:	0e 94 4c 29 	call	0x5298	; 0x5298 <ltoa>
		uart0_putstr(u_tmp_buff);
    362a:	ce 01       	movw	r24, r28
    362c:	01 96       	adiw	r24, 0x01	; 1
    362e:	0e 94 01 1a 	call	0x3402	; 0x3402 <uart0_putstr>
	}
    3632:	60 96       	adiw	r28, 0x10	; 16
    3634:	0f b6       	in	r0, 0x3f	; 63
    3636:	f8 94       	cli
    3638:	de bf       	out	0x3e, r29	; 62
    363a:	0f be       	out	0x3f, r0	; 63
    363c:	cd bf       	out	0x3d, r28	; 61
    363e:	df 91       	pop	r29
    3640:	cf 91       	pop	r28
    3642:	08 95       	ret

00003644 <uart0_putlongr>:
//Arguments : 1. int32_t data value.
//          : 2. Base value (DEC, HEX, OCT, BIN, etc.).
//Return    :    none
//******************************************************************
	void uart0_putlongr(int32_t data, uint8_t radix)
	{
    3644:	cf 93       	push	r28
    3646:	df 93       	push	r29
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62
    364c:	66 97       	sbiw	r28, 0x16	; 22
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	f8 94       	cli
    3652:	de bf       	out	0x3e, r29	; 62
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	cd bf       	out	0x3d, r28	; 61
    3658:	6a 8b       	std	Y+18, r22	; 0x12
    365a:	7b 8b       	std	Y+19, r23	; 0x13
    365c:	8c 8b       	std	Y+20, r24	; 0x14
    365e:	9d 8b       	std	Y+21, r25	; 0x15
    3660:	4e 8b       	std	Y+22, r20	; 0x16
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[17]; // heading, 15 digit bytes, NULL
	#endif
		
		ltoa(data, u_tmp_buff, radix);
    3662:	8e 89       	ldd	r24, Y+22	; 0x16
    3664:	28 2f       	mov	r18, r24
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	8a 89       	ldd	r24, Y+18	; 0x12
    366a:	9b 89       	ldd	r25, Y+19	; 0x13
    366c:	ac 89       	ldd	r26, Y+20	; 0x14
    366e:	bd 89       	ldd	r27, Y+21	; 0x15
    3670:	ae 01       	movw	r20, r28
    3672:	4f 5f       	subi	r20, 0xFF	; 255
    3674:	5f 4f       	sbci	r21, 0xFF	; 255
    3676:	bc 01       	movw	r22, r24
    3678:	cd 01       	movw	r24, r26
    367a:	0e 94 4c 29 	call	0x5298	; 0x5298 <ltoa>
		uart0_putstr(u_tmp_buff);
    367e:	ce 01       	movw	r24, r28
    3680:	01 96       	adiw	r24, 0x01	; 1
    3682:	0e 94 01 1a 	call	0x3402	; 0x3402 <uart0_putstr>
	}
    3686:	66 96       	adiw	r28, 0x16	; 22
    3688:	0f b6       	in	r0, 0x3f	; 63
    368a:	f8 94       	cli
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	0f be       	out	0x3f, r0	; 63
    3690:	cd bf       	out	0x3d, r28	; 61
    3692:	df 91       	pop	r29
    3694:	cf 91       	pop	r28
    3696:	08 95       	ret

00003698 <uart0_putulong>:
//Function  : Send unsigned long integer formated into ASCI string (base 10).
//Arguments : uint32_t data value.
//Return    : none
//******************************************************************
	void uart0_putulong(uint32_t data)
	{
    3698:	cf 93       	push	r28
    369a:	df 93       	push	r29
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	60 97       	sbiw	r28, 0x10	; 16
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	de bf       	out	0x3e, r29	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	6d 87       	std	Y+13, r22	; 0x0d
    36ae:	7e 87       	std	Y+14, r23	; 0x0e
    36b0:	8f 87       	std	Y+15, r24	; 0x0f
    36b2:	98 8b       	std	Y+16, r25	; 0x10
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[12]; // heading, 10 digit bytes, NULL
	#endif
		
		ultoa(data, u_tmp_buff, 10);
    36b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36b8:	af 85       	ldd	r26, Y+15	; 0x0f
    36ba:	b8 89       	ldd	r27, Y+16	; 0x10
    36bc:	2a e0       	ldi	r18, 0x0A	; 10
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	ae 01       	movw	r20, r28
    36c2:	4f 5f       	subi	r20, 0xFF	; 255
    36c4:	5f 4f       	sbci	r21, 0xFF	; 255
    36c6:	bc 01       	movw	r22, r24
    36c8:	cd 01       	movw	r24, r26
    36ca:	0e 94 83 29 	call	0x5306	; 0x5306 <ultoa>
		uart0_putstr(u_tmp_buff);
    36ce:	ce 01       	movw	r24, r28
    36d0:	01 96       	adiw	r24, 0x01	; 1
    36d2:	0e 94 01 1a 	call	0x3402	; 0x3402 <uart0_putstr>
	}
    36d6:	60 96       	adiw	r28, 0x10	; 16
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	de bf       	out	0x3e, r29	; 62
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	cd bf       	out	0x3d, r28	; 61
    36e2:	df 91       	pop	r29
    36e4:	cf 91       	pop	r28
    36e6:	08 95       	ret

000036e8 <uart0_putulongr>:
//Arguments : 1. uint32_t data value.
//          : 2. Base value (DEC, HEX, OCT, BIN, etc.).
//Return    :    none
//******************************************************************
	void uart0_putulongr(uint32_t data, uint8_t radix)
	{
    36e8:	cf 93       	push	r28
    36ea:	df 93       	push	r29
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	66 97       	sbiw	r28, 0x16	; 22
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	f8 94       	cli
    36f6:	de bf       	out	0x3e, r29	; 62
    36f8:	0f be       	out	0x3f, r0	; 63
    36fa:	cd bf       	out	0x3d, r28	; 61
    36fc:	6a 8b       	std	Y+18, r22	; 0x12
    36fe:	7b 8b       	std	Y+19, r23	; 0x13
    3700:	8c 8b       	std	Y+20, r24	; 0x14
    3702:	9d 8b       	std	Y+21, r25	; 0x15
    3704:	4e 8b       	std	Y+22, r20	; 0x16
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[17]; // heading, 15 digit bytes, NULL
	#endif
		
		ultoa(data, u_tmp_buff, radix);
    3706:	8e 89       	ldd	r24, Y+22	; 0x16
    3708:	28 2f       	mov	r18, r24
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	8a 89       	ldd	r24, Y+18	; 0x12
    370e:	9b 89       	ldd	r25, Y+19	; 0x13
    3710:	ac 89       	ldd	r26, Y+20	; 0x14
    3712:	bd 89       	ldd	r27, Y+21	; 0x15
    3714:	ae 01       	movw	r20, r28
    3716:	4f 5f       	subi	r20, 0xFF	; 255
    3718:	5f 4f       	sbci	r21, 0xFF	; 255
    371a:	bc 01       	movw	r22, r24
    371c:	cd 01       	movw	r24, r26
    371e:	0e 94 83 29 	call	0x5306	; 0x5306 <ultoa>
		uart0_putstr(u_tmp_buff);
    3722:	ce 01       	movw	r24, r28
    3724:	01 96       	adiw	r24, 0x01	; 1
    3726:	0e 94 01 1a 	call	0x3402	; 0x3402 <uart0_putstr>
	}
    372a:	66 96       	adiw	r28, 0x16	; 22
    372c:	0f b6       	in	r0, 0x3f	; 63
    372e:	f8 94       	cli
    3730:	de bf       	out	0x3e, r29	; 62
    3732:	0f be       	out	0x3f, r0	; 63
    3734:	cd bf       	out	0x3d, r28	; 61
    3736:	df 91       	pop	r29
    3738:	cf 91       	pop	r28
    373a:	08 95       	ret

0000373c <uart0_putfloat>:
//Function  : Send floating point value formated into ASCI string.
//Arguments : float data value.
//Return    : none
//******************************************************************
	void uart0_putfloat(float data)
	{
    373c:	0f 93       	push	r16
    373e:	1f 93       	push	r17
    3740:	cf 93       	push	r28
    3742:	df 93       	push	r29
    3744:	cd b7       	in	r28, 0x3d	; 61
    3746:	de b7       	in	r29, 0x3e	; 62
    3748:	66 97       	sbiw	r28, 0x16	; 22
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	de bf       	out	0x3e, r29	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	cd bf       	out	0x3d, r28	; 61
    3754:	6b 8b       	std	Y+19, r22	; 0x13
    3756:	7c 8b       	std	Y+20, r23	; 0x14
    3758:	8d 8b       	std	Y+21, r24	; 0x15
    375a:	9e 8b       	std	Y+22, r25	; 0x16
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[16];
	#endif
		
		dtostrf(data, 15, 6, u_tmp_buff);
    375c:	9e 01       	movw	r18, r28
    375e:	2d 5f       	subi	r18, 0xFD	; 253
    3760:	3f 4f       	sbci	r19, 0xFF	; 255
    3762:	8b 89       	ldd	r24, Y+19	; 0x13
    3764:	9c 89       	ldd	r25, Y+20	; 0x14
    3766:	ad 89       	ldd	r26, Y+21	; 0x15
    3768:	be 89       	ldd	r27, Y+22	; 0x16
    376a:	89 01       	movw	r16, r18
    376c:	26 e0       	ldi	r18, 0x06	; 6
    376e:	4f e0       	ldi	r20, 0x0F	; 15
    3770:	bc 01       	movw	r22, r24
    3772:	cd 01       	movw	r24, r26
    3774:	0e 94 99 27 	call	0x4f32	; 0x4f32 <dtostrf>
		
		char *p = u_tmp_buff;
    3778:	ce 01       	movw	r24, r28
    377a:	03 96       	adiw	r24, 0x03	; 3
    377c:	9a 83       	std	Y+2, r25	; 0x02
    377e:	89 83       	std	Y+1, r24	; 0x01
		while(*p == ' ') // remove all unwanted spaces
    3780:	05 c0       	rjmp	.+10     	; 0x378c <uart0_putfloat+0x50>
			p++;
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	9a 81       	ldd	r25, Y+2	; 0x02
    3786:	01 96       	adiw	r24, 0x01	; 1
    3788:	9a 83       	std	Y+2, r25	; 0x02
    378a:	89 83       	std	Y+1, r24	; 0x01
	#endif
		
		dtostrf(data, 15, 6, u_tmp_buff);
		
		char *p = u_tmp_buff;
		while(*p == ' ') // remove all unwanted spaces
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	9a 81       	ldd	r25, Y+2	; 0x02
    3790:	fc 01       	movw	r30, r24
    3792:	80 81       	ld	r24, Z
    3794:	80 32       	cpi	r24, 0x20	; 32
    3796:	a9 f3       	breq	.-22     	; 0x3782 <uart0_putfloat+0x46>
			p++;
		
		uart0_putstr(p);
    3798:	89 81       	ldd	r24, Y+1	; 0x01
    379a:	9a 81       	ldd	r25, Y+2	; 0x02
    379c:	0e 94 01 1a 	call	0x3402	; 0x3402 <uart0_putstr>
	}
    37a0:	66 96       	adiw	r28, 0x16	; 22
    37a2:	0f b6       	in	r0, 0x3f	; 63
    37a4:	f8 94       	cli
    37a6:	de bf       	out	0x3e, r29	; 62
    37a8:	0f be       	out	0x3f, r0	; 63
    37aa:	cd bf       	out	0x3d, r28	; 61
    37ac:	df 91       	pop	r29
    37ae:	cf 91       	pop	r28
    37b0:	1f 91       	pop	r17
    37b2:	0f 91       	pop	r16
    37b4:	08 95       	ret

000037b6 <uart0_fputfloat>:
//Arguments : 1. Float data value.
//          : 2. Number of displayed digits after the dot.
//Return    :    none
//******************************************************************
	void uart0_fputfloat(float data, uint8_t precision)
	{
    37b6:	0f 93       	push	r16
    37b8:	1f 93       	push	r17
    37ba:	cf 93       	push	r28
    37bc:	df 93       	push	r29
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
    37c2:	67 97       	sbiw	r28, 0x17	; 23
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	de bf       	out	0x3e, r29	; 62
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	cd bf       	out	0x3d, r28	; 61
    37ce:	6b 8b       	std	Y+19, r22	; 0x13
    37d0:	7c 8b       	std	Y+20, r23	; 0x14
    37d2:	8d 8b       	std	Y+21, r24	; 0x15
    37d4:	9e 8b       	std	Y+22, r25	; 0x16
    37d6:	4f 8b       	std	Y+23, r20	; 0x17
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[16];
	#endif
		
		dtostrf(data, 15, precision, u_tmp_buff);
    37d8:	9e 01       	movw	r18, r28
    37da:	2d 5f       	subi	r18, 0xFD	; 253
    37dc:	3f 4f       	sbci	r19, 0xFF	; 255
    37de:	8b 89       	ldd	r24, Y+19	; 0x13
    37e0:	9c 89       	ldd	r25, Y+20	; 0x14
    37e2:	ad 89       	ldd	r26, Y+21	; 0x15
    37e4:	be 89       	ldd	r27, Y+22	; 0x16
    37e6:	89 01       	movw	r16, r18
    37e8:	2f 89       	ldd	r18, Y+23	; 0x17
    37ea:	4f e0       	ldi	r20, 0x0F	; 15
    37ec:	bc 01       	movw	r22, r24
    37ee:	cd 01       	movw	r24, r26
    37f0:	0e 94 99 27 	call	0x4f32	; 0x4f32 <dtostrf>
		
		char *p = u_tmp_buff;
    37f4:	ce 01       	movw	r24, r28
    37f6:	03 96       	adiw	r24, 0x03	; 3
    37f8:	9a 83       	std	Y+2, r25	; 0x02
    37fa:	89 83       	std	Y+1, r24	; 0x01
		while(*p == ' ') // remove all unwanted spaces
    37fc:	05 c0       	rjmp	.+10     	; 0x3808 <uart0_fputfloat+0x52>
			p++;
    37fe:	89 81       	ldd	r24, Y+1	; 0x01
    3800:	9a 81       	ldd	r25, Y+2	; 0x02
    3802:	01 96       	adiw	r24, 0x01	; 1
    3804:	9a 83       	std	Y+2, r25	; 0x02
    3806:	89 83       	std	Y+1, r24	; 0x01
	#endif
		
		dtostrf(data, 15, precision, u_tmp_buff);
		
		char *p = u_tmp_buff;
		while(*p == ' ') // remove all unwanted spaces
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	9a 81       	ldd	r25, Y+2	; 0x02
    380c:	fc 01       	movw	r30, r24
    380e:	80 81       	ld	r24, Z
    3810:	80 32       	cpi	r24, 0x20	; 32
    3812:	a9 f3       	breq	.-22     	; 0x37fe <uart0_fputfloat+0x48>
			p++;
		
		uart0_putstr(p);
    3814:	89 81       	ldd	r24, Y+1	; 0x01
    3816:	9a 81       	ldd	r25, Y+2	; 0x02
    3818:	0e 94 01 1a 	call	0x3402	; 0x3402 <uart0_putstr>
	}
    381c:	67 96       	adiw	r28, 0x17	; 23
    381e:	0f b6       	in	r0, 0x3f	; 63
    3820:	f8 94       	cli
    3822:	de bf       	out	0x3e, r29	; 62
    3824:	0f be       	out	0x3f, r0	; 63
    3826:	cd bf       	out	0x3d, r28	; 61
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	08 95       	ret

00003832 <uart0_flush>:
//Function  : Wait until all data in TX buffer are flushed.
//Arguments : none
//Return    : none
//******************************************************************	
	void uart0_flush(void)
	{
    3832:	cf 93       	push	r28
    3834:	df 93       	push	r29
    3836:	cd b7       	in	r28, 0x3d	; 61
    3838:	de b7       	in	r29, 0x3e	; 62
	#ifdef USART0_RS485_MODE // flush UDR buffer
		while (___PORT(RS485_CONTROL0_IOPORTNAME) & (1<<RS485_CONTROL0_PIN));
	#else	
		while(tx0_Tail != tx0_Head); // just flush the ring buffer
    383a:	00 00       	nop
    383c:	90 91 05 02 	lds	r25, 0x0205
    3840:	80 91 27 02 	lds	r24, 0x0227
    3844:	98 17       	cp	r25, r24
    3846:	d1 f7       	brne	.-12     	; 0x383c <uart0_flush+0xa>
	#endif
	}
    3848:	df 91       	pop	r29
    384a:	cf 91       	pop	r28
    384c:	08 95       	ret

0000384e <uart1_putc>:
			[udre_bit]      "M"	(UDRE1_BIT)
			: // clobbers
			"r26","r27"
		);
	#else
		asm volatile("\n\t"
    384e:	90 91 4b 02 	lds	r25, 0x024B
    3852:	93 95       	inc	r25
    3854:	9f 71       	andi	r25, 0x1F	; 31

00003856 <waitforspace_657>:
    3856:	b0 91 49 02 	lds	r27, 0x0249
    385a:	b9 17       	cp	r27, r25
    385c:	e1 f3       	breq	.-8      	; 0x3856 <waitforspace_657>
			: // clobbers
			"r27"
		);
	#endif
		
		asm volatile("\n\t"
    385e:	a9 2f       	mov	r26, r25
    3860:	b0 e0       	ldi	r27, 0x00	; 0
    3862:	a9 5f       	subi	r26, 0xF9	; 249
    3864:	bd 4f       	sbci	r27, 0xFD	; 253
    3866:	8c 93       	st	X, r24
			: // inputs
			: // clobbers
			"r26","r27"
		);
		
		cli();
    3868:	f8 94       	cli
		{
			tx1_Head = tmp_tx_Head;
    386a:	90 93 4b 02 	sts	0x024B, r25
		#endif
			{
			#ifdef USART1_IN_IO_ADDRESS_SPACE
				UCSR1B_REGISTER |= (1<<UDRIE1_BIT); // enable UDRE interrupt
			#else
				asm volatile("\n\t"
    386e:	90 91 c9 00 	lds	r25, 0x00C9
    3872:	90 62       	ori	r25, 0x20	; 32
    3874:	90 93 c9 00 	sts	0x00C9, r25
				);
			#endif
			}
		}
	
		reti();
    3878:	18 95       	reti

0000387a <uart1_putc_noblock>:
		}
		return COMPLETED;
	}
#else //!USART_NO_ABI_BREAKING_PREMATURES
	uint8_t uart1_putc_noblock(char data)
	{
    387a:	1f 93       	push	r17
    387c:	cf 93       	push	r28
    387e:	df 93       	push	r29
    3880:	00 d0       	rcall	.+0      	; 0x3882 <uart1_putc_noblock+0x8>
    3882:	1f 92       	push	r1
    3884:	cd b7       	in	r28, 0x3d	; 61
    3886:	de b7       	in	r29, 0x3e	; 62
    3888:	8b 83       	std	Y+3, r24	; 0x03
		tmp_tx_Head = (tmp_tx_Head + 1) & TX1_BUFFER_MASK;
		
		if(tmp_tx_Tail == tmp_tx_Head)
			return BUFFER_FULL;
	#else
		register uint8_t tmp_tx_Head = (tx1_Head + 1) & TX1_BUFFER_MASK; // calculate new position of TX head in buffer
    388a:	80 91 4b 02 	lds	r24, 0x024B
    388e:	8f 5f       	subi	r24, 0xFF	; 255
    3890:	18 2f       	mov	r17, r24
    3892:	1f 71       	andi	r17, 0x1F	; 31
		
		if(tx1_Tail == tmp_tx_Head)
    3894:	80 91 49 02 	lds	r24, 0x0249
    3898:	81 17       	cp	r24, r17
    389a:	11 f4       	brne	.+4      	; 0x38a0 <uart1_putc_noblock+0x26>
			return BUFFER_FULL;
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	26 c0       	rjmp	.+76     	; 0x38ec <uart1_putc_noblock+0x72>
	#endif
	
		asm volatile("\n\t"
    38a0:	8b 81       	ldd	r24, Y+3	; 0x03
    38a2:	91 2f       	mov	r25, r17
    38a4:	a9 2f       	mov	r26, r25
    38a6:	b0 e0       	ldi	r27, 0x00	; 0
    38a8:	a9 5f       	subi	r26, 0xF9	; 249
    38aa:	bd 4f       	sbci	r27, 0xFD	; 253
    38ac:	8c 93       	st	X, r24
    38ae:	19 2f       	mov	r17, r25
    38b0:	8b 83       	std	Y+3, r24	; 0x03
			: // inputs
			: // clobbers
			"r26","r27"
		);
		
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    38b2:	8f e5       	ldi	r24, 0x5F	; 95
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	fc 01       	movw	r30, r24
    38b8:	80 81       	ld	r24, Z
    38ba:	8a 83       	std	Y+2, r24	; 0x02
    38bc:	0e 94 4a 19 	call	0x3294	; 0x3294 <__iCliRetVal>
    38c0:	89 83       	std	Y+1, r24	; 0x01
    38c2:	0c c0       	rjmp	.+24     	; 0x38dc <uart1_putc_noblock+0x62>
		{
			tx1_Head = tmp_tx_Head;
    38c4:	10 93 4b 02 	sts	0x024B, r17
			
		#ifdef USART1_USE_SOFT_CTS
			if(!(___PIN(CTS1_IOPORTNAME) & (1<<CTS1_PIN)))
		#endif
			{
				UCSR1B_REGISTER |= (1<<UDRIE1_BIT); // enable UDRE interrupt
    38c8:	89 ec       	ldi	r24, 0xC9	; 201
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	29 ec       	ldi	r18, 0xC9	; 201
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	f9 01       	movw	r30, r18
    38d2:	20 81       	ld	r18, Z
    38d4:	20 62       	ori	r18, 0x20	; 32
    38d6:	fc 01       	movw	r30, r24
    38d8:	20 83       	st	Z, r18
			: // inputs
			: // clobbers
			"r26","r27"
		);
		
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    38da:	19 82       	std	Y+1, r1	; 0x01
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	88 23       	and	r24, r24
    38e0:	89 f7       	brne	.-30     	; 0x38c4 <uart1_putc_noblock+0x4a>
    38e2:	ce 01       	movw	r24, r28
    38e4:	02 96       	adiw	r24, 0x02	; 2
    38e6:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__iRestore>
		#endif
			{
				UCSR1B_REGISTER |= (1<<UDRIE1_BIT); // enable UDRE interrupt
			}
		}
		return COMPLETED;
    38ea:	81 e0       	ldi	r24, 0x01	; 1
	}
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	0f 90       	pop	r0
    38f2:	df 91       	pop	r29
    38f4:	cf 91       	pop	r28
    38f6:	1f 91       	pop	r17
    38f8:	08 95       	ret

000038fa <uart1_putstr>:
		char c;
		while ((c = *string++)) uart1_putc(c);
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	void uart1_putstr(char *string)
	{
    38fa:	cf 93       	push	r28
    38fc:	df 93       	push	r29
    38fe:	00 d0       	rcall	.+0      	; 0x3900 <uart1_putstr+0x6>
    3900:	cd b7       	in	r28, 0x3d	; 61
    3902:	de b7       	in	r29, 0x3e	; 62
    3904:	9a 83       	std	Y+2, r25	; 0x02
    3906:	89 83       	std	Y+1, r24	; 0x01
		asm volatile("\n\t"
    3908:	29 81       	ldd	r18, Y+1	; 0x01
    390a:	3a 81       	ldd	r19, Y+2	; 0x02
    390c:	f9 01       	movw	r30, r18

0000390e <load_loop_749>:
    390e:	81 91       	ld	r24, Z+
    3910:	88 23       	and	r24, r24
    3912:	11 f0       	breq	.+4      	; 0x3918 <skip_loop_749>
    3914:	9c df       	rcall	.-200    	; 0x384e <uart1_putc>
    3916:	fb cf       	rjmp	.-10     	; 0x390e <load_loop_749>

00003918 <skip_loop_749>:
			"z" (string)
			: // clobbers
			"r24",
			"r25","r26","r27" // uart_putc()
		);
	}
    3918:	0f 90       	pop	r0
    391a:	0f 90       	pop	r0
    391c:	df 91       	pop	r29
    391e:	cf 91       	pop	r28
    3920:	08 95       	ret

00003922 <uart1_putstrl>:
		while(BytesToWrite--)
			uart1_putc(*string++);
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	void uart1_putstrl(char *string, uint8_t BytesToWrite)
	{
    3922:	cf 93       	push	r28
    3924:	df 93       	push	r29
    3926:	00 d0       	rcall	.+0      	; 0x3928 <uart1_putstrl+0x6>
    3928:	1f 92       	push	r1
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    392e:	9a 83       	std	Y+2, r25	; 0x02
    3930:	89 83       	std	Y+1, r24	; 0x01
    3932:	6b 83       	std	Y+3, r22	; 0x03
		asm volatile("\n\t"
    3934:	4b 81       	ldd	r20, Y+3	; 0x03
    3936:	29 81       	ldd	r18, Y+1	; 0x01
    3938:	3a 81       	ldd	r19, Y+2	; 0x02
    393a:	f9 01       	movw	r30, r18
    393c:	4e 0f       	add	r20, r30

0000393e <load_loop_770>:
    393e:	4e 17       	cp	r20, r30
    3940:	19 f0       	breq	.+6      	; 0x3948 <skip_loop_770>
    3942:	81 91       	ld	r24, Z+
    3944:	84 df       	rcall	.-248    	; 0x384e <uart1_putc>
    3946:	fb cf       	rjmp	.-10     	; 0x393e <load_loop_770>

00003948 <skip_loop_770>:
			"z" (string)
			: // clobbers
			"r24",
			"r25","r26","r27" // uart_putc()
		);
	}
    3948:	0f 90       	pop	r0
    394a:	0f 90       	pop	r0
    394c:	0f 90       	pop	r0
    394e:	df 91       	pop	r29
    3950:	cf 91       	pop	r28
    3952:	08 95       	ret

00003954 <uart1_puts_p>:
		register char c;
		while ( (c = *string++) ) uart1_putc(c); 
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	void uart1_puts_p(const __flash char *string)
	{
    3954:	cf 93       	push	r28
    3956:	df 93       	push	r29
    3958:	00 d0       	rcall	.+0      	; 0x395a <uart1_puts_p+0x6>
    395a:	cd b7       	in	r28, 0x3d	; 61
    395c:	de b7       	in	r29, 0x3e	; 62
    395e:	9a 83       	std	Y+2, r25	; 0x02
    3960:	89 83       	std	Y+1, r24	; 0x01
		asm volatile("\n\t"
    3962:	29 81       	ldd	r18, Y+1	; 0x01
    3964:	3a 81       	ldd	r19, Y+2	; 0x02
    3966:	f9 01       	movw	r30, r18

00003968 <load_loop_789>:
    3968:	85 91       	lpm	r24, Z+
    396a:	88 23       	and	r24, r24
    396c:	11 f0       	breq	.+4      	; 0x3972 <skip_loop_789>
    396e:	6f df       	rcall	.-290    	; 0x384e <uart1_putc>
    3970:	fb cf       	rjmp	.-10     	; 0x3968 <load_loop_789>

00003972 <skip_loop_789>:
			"z" (string)
			: // clobbers
			"r24",
			"r25","r26","r27" // uart_putc()
		);
	}
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	df 91       	pop	r29
    3978:	cf 91       	pop	r28
    397a:	08 95       	ret

0000397c <uart1_putint>:
#endif // USART_NO_ABI_BREAKING_PREMATURES

	void uart1_putint(int16_t data)
	{
    397c:	cf 93       	push	r28
    397e:	df 93       	push	r29
    3980:	cd b7       	in	r28, 0x3d	; 61
    3982:	de b7       	in	r29, 0x3e	; 62
    3984:	29 97       	sbiw	r28, 0x09	; 9
    3986:	0f b6       	in	r0, 0x3f	; 63
    3988:	f8 94       	cli
    398a:	de bf       	out	0x3e, r29	; 62
    398c:	0f be       	out	0x3f, r0	; 63
    398e:	cd bf       	out	0x3d, r28	; 61
    3990:	99 87       	std	Y+9, r25	; 0x09
    3992:	88 87       	std	Y+8, r24	; 0x08
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[7]; // heading, 5 digit bytes, NULL
	#endif
	
		itoa(data, u_tmp_buff, 10);
    3994:	88 85       	ldd	r24, Y+8	; 0x08
    3996:	99 85       	ldd	r25, Y+9	; 0x09
    3998:	4a e0       	ldi	r20, 0x0A	; 10
    399a:	50 e0       	ldi	r21, 0x00	; 0
    399c:	9e 01       	movw	r18, r28
    399e:	2f 5f       	subi	r18, 0xFF	; 255
    39a0:	3f 4f       	sbci	r19, 0xFF	; 255
    39a2:	b9 01       	movw	r22, r18
    39a4:	0e 94 36 29 	call	0x526c	; 0x526c <itoa>
		uart1_putstr(u_tmp_buff);
    39a8:	ce 01       	movw	r24, r28
    39aa:	01 96       	adiw	r24, 0x01	; 1
    39ac:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart1_putstr>
	}
    39b0:	29 96       	adiw	r28, 0x09	; 9
    39b2:	0f b6       	in	r0, 0x3f	; 63
    39b4:	f8 94       	cli
    39b6:	de bf       	out	0x3e, r29	; 62
    39b8:	0f be       	out	0x3f, r0	; 63
    39ba:	cd bf       	out	0x3d, r28	; 61
    39bc:	df 91       	pop	r29
    39be:	cf 91       	pop	r28
    39c0:	08 95       	ret

000039c2 <uart1_putintr>:

	void uart1_putintr(int16_t data, uint8_t radix)
	{
    39c2:	cf 93       	push	r28
    39c4:	df 93       	push	r29
    39c6:	cd b7       	in	r28, 0x3d	; 61
    39c8:	de b7       	in	r29, 0x3e	; 62
    39ca:	64 97       	sbiw	r28, 0x14	; 20
    39cc:	0f b6       	in	r0, 0x3f	; 63
    39ce:	f8 94       	cli
    39d0:	de bf       	out	0x3e, r29	; 62
    39d2:	0f be       	out	0x3f, r0	; 63
    39d4:	cd bf       	out	0x3d, r28	; 61
    39d6:	9b 8b       	std	Y+19, r25	; 0x13
    39d8:	8a 8b       	std	Y+18, r24	; 0x12
    39da:	6c 8b       	std	Y+20, r22	; 0x14
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[17]; // heading, 15 digit bytes, NULL
	#endif
		
		itoa(data, u_tmp_buff, radix);
    39dc:	8c 89       	ldd	r24, Y+20	; 0x14
    39de:	28 2f       	mov	r18, r24
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	8a 89       	ldd	r24, Y+18	; 0x12
    39e4:	9b 89       	ldd	r25, Y+19	; 0x13
    39e6:	a9 01       	movw	r20, r18
    39e8:	9e 01       	movw	r18, r28
    39ea:	2f 5f       	subi	r18, 0xFF	; 255
    39ec:	3f 4f       	sbci	r19, 0xFF	; 255
    39ee:	b9 01       	movw	r22, r18
    39f0:	0e 94 36 29 	call	0x526c	; 0x526c <itoa>
		uart1_putstr(u_tmp_buff);
    39f4:	ce 01       	movw	r24, r28
    39f6:	01 96       	adiw	r24, 0x01	; 1
    39f8:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart1_putstr>
	}
    39fc:	64 96       	adiw	r28, 0x14	; 20
    39fe:	0f b6       	in	r0, 0x3f	; 63
    3a00:	f8 94       	cli
    3a02:	de bf       	out	0x3e, r29	; 62
    3a04:	0f be       	out	0x3f, r0	; 63
    3a06:	cd bf       	out	0x3d, r28	; 61
    3a08:	df 91       	pop	r29
    3a0a:	cf 91       	pop	r28
    3a0c:	08 95       	ret

00003a0e <uart1_putuint>:

	void uart1_putuint(uint16_t data)
	{
    3a0e:	cf 93       	push	r28
    3a10:	df 93       	push	r29
    3a12:	cd b7       	in	r28, 0x3d	; 61
    3a14:	de b7       	in	r29, 0x3e	; 62
    3a16:	29 97       	sbiw	r28, 0x09	; 9
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	f8 94       	cli
    3a1c:	de bf       	out	0x3e, r29	; 62
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	cd bf       	out	0x3d, r28	; 61
    3a22:	99 87       	std	Y+9, r25	; 0x09
    3a24:	88 87       	std	Y+8, r24	; 0x08
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[7]; // heading, 5 digit bytes, NULL
	#endif
	
		utoa(data, u_tmp_buff, 10);
    3a26:	88 85       	ldd	r24, Y+8	; 0x08
    3a28:	99 85       	ldd	r25, Y+9	; 0x09
    3a2a:	4a e0       	ldi	r20, 0x0A	; 10
    3a2c:	50 e0       	ldi	r21, 0x00	; 0
    3a2e:	9e 01       	movw	r18, r28
    3a30:	2f 5f       	subi	r18, 0xFF	; 255
    3a32:	3f 4f       	sbci	r19, 0xFF	; 255
    3a34:	b9 01       	movw	r22, r18
    3a36:	0e 94 b0 29 	call	0x5360	; 0x5360 <utoa>
		uart1_putstr(u_tmp_buff);
    3a3a:	ce 01       	movw	r24, r28
    3a3c:	01 96       	adiw	r24, 0x01	; 1
    3a3e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart1_putstr>
	}
    3a42:	29 96       	adiw	r28, 0x09	; 9
    3a44:	0f b6       	in	r0, 0x3f	; 63
    3a46:	f8 94       	cli
    3a48:	de bf       	out	0x3e, r29	; 62
    3a4a:	0f be       	out	0x3f, r0	; 63
    3a4c:	cd bf       	out	0x3d, r28	; 61
    3a4e:	df 91       	pop	r29
    3a50:	cf 91       	pop	r28
    3a52:	08 95       	ret

00003a54 <uart1_putuintr>:
	
	void uart1_putuintr(uint16_t data, uint8_t radix)
	{
    3a54:	cf 93       	push	r28
    3a56:	df 93       	push	r29
    3a58:	cd b7       	in	r28, 0x3d	; 61
    3a5a:	de b7       	in	r29, 0x3e	; 62
    3a5c:	64 97       	sbiw	r28, 0x14	; 20
    3a5e:	0f b6       	in	r0, 0x3f	; 63
    3a60:	f8 94       	cli
    3a62:	de bf       	out	0x3e, r29	; 62
    3a64:	0f be       	out	0x3f, r0	; 63
    3a66:	cd bf       	out	0x3d, r28	; 61
    3a68:	9b 8b       	std	Y+19, r25	; 0x13
    3a6a:	8a 8b       	std	Y+18, r24	; 0x12
    3a6c:	6c 8b       	std	Y+20, r22	; 0x14
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[17]; // heading, 15 digit bytes, NULL
	#endif
		utoa(data, u_tmp_buff, radix);
    3a6e:	8c 89       	ldd	r24, Y+20	; 0x14
    3a70:	28 2f       	mov	r18, r24
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	8a 89       	ldd	r24, Y+18	; 0x12
    3a76:	9b 89       	ldd	r25, Y+19	; 0x13
    3a78:	a9 01       	movw	r20, r18
    3a7a:	9e 01       	movw	r18, r28
    3a7c:	2f 5f       	subi	r18, 0xFF	; 255
    3a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a80:	b9 01       	movw	r22, r18
    3a82:	0e 94 b0 29 	call	0x5360	; 0x5360 <utoa>
		uart1_putstr(u_tmp_buff);
    3a86:	ce 01       	movw	r24, r28
    3a88:	01 96       	adiw	r24, 0x01	; 1
    3a8a:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart1_putstr>
	}
    3a8e:	64 96       	adiw	r28, 0x14	; 20
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	de bf       	out	0x3e, r29	; 62
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	cd bf       	out	0x3d, r28	; 61
    3a9a:	df 91       	pop	r29
    3a9c:	cf 91       	pop	r28
    3a9e:	08 95       	ret

00003aa0 <uart1_puthex>:

	void uart1_puthex(uint8_t data)
	{
    3aa0:	cf 93       	push	r28
    3aa2:	df 93       	push	r29
    3aa4:	00 d0       	rcall	.+0      	; 0x3aa6 <uart1_puthex+0x6>
    3aa6:	cd b7       	in	r28, 0x3d	; 61
    3aa8:	de b7       	in	r29, 0x3e	; 62
    3aaa:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t tmp; 
		
		tmp = (data >> 4) & 0x0f;
    3aac:	8a 81       	ldd	r24, Y+2	; 0x02
    3aae:	82 95       	swap	r24
    3ab0:	8f 70       	andi	r24, 0x0F	; 15
    3ab2:	89 83       	std	Y+1, r24	; 0x01
	#ifdef USART_PUTHEX_IN_UPPERCASE
		uart1_putc( (tmp <= 9 ? '0' + tmp : 'A' - 10 + tmp));
	#else
		uart1_putc( (tmp <= 9 ? '0' + tmp : 'a' - 10 + tmp));
    3ab4:	89 81       	ldd	r24, Y+1	; 0x01
    3ab6:	8a 30       	cpi	r24, 0x0A	; 10
    3ab8:	18 f4       	brcc	.+6      	; 0x3ac0 <uart1_puthex+0x20>
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	80 5d       	subi	r24, 0xD0	; 208
    3abe:	02 c0       	rjmp	.+4      	; 0x3ac4 <uart1_puthex+0x24>
    3ac0:	89 81       	ldd	r24, Y+1	; 0x01
    3ac2:	89 5a       	subi	r24, 0xA9	; 169
    3ac4:	0e 94 27 1c 	call	0x384e	; 0x384e <uart1_putc>
	#endif
		
		tmp = data & 0x0f;
    3ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aca:	8f 70       	andi	r24, 0x0F	; 15
    3acc:	89 83       	std	Y+1, r24	; 0x01
	#ifdef USART_PUTHEX_IN_UPPERCASE
		uart1_putc( (tmp <= 9 ? '0' + tmp : 'A' - 10 + tmp));
	#else
		uart1_putc( (tmp <= 9 ? '0' + tmp : 'a' - 10 + tmp));
    3ace:	89 81       	ldd	r24, Y+1	; 0x01
    3ad0:	8a 30       	cpi	r24, 0x0A	; 10
    3ad2:	18 f4       	brcc	.+6      	; 0x3ada <uart1_puthex+0x3a>
    3ad4:	89 81       	ldd	r24, Y+1	; 0x01
    3ad6:	80 5d       	subi	r24, 0xD0	; 208
    3ad8:	02 c0       	rjmp	.+4      	; 0x3ade <uart1_puthex+0x3e>
    3ada:	89 81       	ldd	r24, Y+1	; 0x01
    3adc:	89 5a       	subi	r24, 0xA9	; 169
    3ade:	0e 94 27 1c 	call	0x384e	; 0x384e <uart1_putc>
	#endif
	}
    3ae2:	0f 90       	pop	r0
    3ae4:	0f 90       	pop	r0
    3ae6:	df 91       	pop	r29
    3ae8:	cf 91       	pop	r28
    3aea:	08 95       	ret

00003aec <uart1_putlong>:

	void uart1_putlong(int32_t data)
	{
    3aec:	cf 93       	push	r28
    3aee:	df 93       	push	r29
    3af0:	cd b7       	in	r28, 0x3d	; 61
    3af2:	de b7       	in	r29, 0x3e	; 62
    3af4:	60 97       	sbiw	r28, 0x10	; 16
    3af6:	0f b6       	in	r0, 0x3f	; 63
    3af8:	f8 94       	cli
    3afa:	de bf       	out	0x3e, r29	; 62
    3afc:	0f be       	out	0x3f, r0	; 63
    3afe:	cd bf       	out	0x3d, r28	; 61
    3b00:	6d 87       	std	Y+13, r22	; 0x0d
    3b02:	7e 87       	std	Y+14, r23	; 0x0e
    3b04:	8f 87       	std	Y+15, r24	; 0x0f
    3b06:	98 8b       	std	Y+16, r25	; 0x10
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[12]; // heading, 10 digit bytes, NULL
	#endif
		
		ltoa(data, u_tmp_buff, 10);
    3b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b0c:	af 85       	ldd	r26, Y+15	; 0x0f
    3b0e:	b8 89       	ldd	r27, Y+16	; 0x10
    3b10:	2a e0       	ldi	r18, 0x0A	; 10
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	ae 01       	movw	r20, r28
    3b16:	4f 5f       	subi	r20, 0xFF	; 255
    3b18:	5f 4f       	sbci	r21, 0xFF	; 255
    3b1a:	bc 01       	movw	r22, r24
    3b1c:	cd 01       	movw	r24, r26
    3b1e:	0e 94 4c 29 	call	0x5298	; 0x5298 <ltoa>
		uart1_putstr(u_tmp_buff);
    3b22:	ce 01       	movw	r24, r28
    3b24:	01 96       	adiw	r24, 0x01	; 1
    3b26:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart1_putstr>
	}
    3b2a:	60 96       	adiw	r28, 0x10	; 16
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	f8 94       	cli
    3b30:	de bf       	out	0x3e, r29	; 62
    3b32:	0f be       	out	0x3f, r0	; 63
    3b34:	cd bf       	out	0x3d, r28	; 61
    3b36:	df 91       	pop	r29
    3b38:	cf 91       	pop	r28
    3b3a:	08 95       	ret

00003b3c <uart1_putlongr>:
	
	void uart1_putlongr(int32_t data, uint8_t radix)
	{
    3b3c:	cf 93       	push	r28
    3b3e:	df 93       	push	r29
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
    3b44:	66 97       	sbiw	r28, 0x16	; 22
    3b46:	0f b6       	in	r0, 0x3f	; 63
    3b48:	f8 94       	cli
    3b4a:	de bf       	out	0x3e, r29	; 62
    3b4c:	0f be       	out	0x3f, r0	; 63
    3b4e:	cd bf       	out	0x3d, r28	; 61
    3b50:	6a 8b       	std	Y+18, r22	; 0x12
    3b52:	7b 8b       	std	Y+19, r23	; 0x13
    3b54:	8c 8b       	std	Y+20, r24	; 0x14
    3b56:	9d 8b       	std	Y+21, r25	; 0x15
    3b58:	4e 8b       	std	Y+22, r20	; 0x16
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[17]; // heading, 15 digit bytes, NULL
	#endif
		
		ltoa(data, u_tmp_buff, radix);
    3b5a:	8e 89       	ldd	r24, Y+22	; 0x16
    3b5c:	28 2f       	mov	r18, r24
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	8a 89       	ldd	r24, Y+18	; 0x12
    3b62:	9b 89       	ldd	r25, Y+19	; 0x13
    3b64:	ac 89       	ldd	r26, Y+20	; 0x14
    3b66:	bd 89       	ldd	r27, Y+21	; 0x15
    3b68:	ae 01       	movw	r20, r28
    3b6a:	4f 5f       	subi	r20, 0xFF	; 255
    3b6c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b6e:	bc 01       	movw	r22, r24
    3b70:	cd 01       	movw	r24, r26
    3b72:	0e 94 4c 29 	call	0x5298	; 0x5298 <ltoa>
		uart1_putstr(u_tmp_buff);
    3b76:	ce 01       	movw	r24, r28
    3b78:	01 96       	adiw	r24, 0x01	; 1
    3b7a:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart1_putstr>
	}
    3b7e:	66 96       	adiw	r28, 0x16	; 22
    3b80:	0f b6       	in	r0, 0x3f	; 63
    3b82:	f8 94       	cli
    3b84:	de bf       	out	0x3e, r29	; 62
    3b86:	0f be       	out	0x3f, r0	; 63
    3b88:	cd bf       	out	0x3d, r28	; 61
    3b8a:	df 91       	pop	r29
    3b8c:	cf 91       	pop	r28
    3b8e:	08 95       	ret

00003b90 <uart1_putulong>:
	
	void uart1_putulong(uint32_t data)
	{
    3b90:	cf 93       	push	r28
    3b92:	df 93       	push	r29
    3b94:	cd b7       	in	r28, 0x3d	; 61
    3b96:	de b7       	in	r29, 0x3e	; 62
    3b98:	60 97       	sbiw	r28, 0x10	; 16
    3b9a:	0f b6       	in	r0, 0x3f	; 63
    3b9c:	f8 94       	cli
    3b9e:	de bf       	out	0x3e, r29	; 62
    3ba0:	0f be       	out	0x3f, r0	; 63
    3ba2:	cd bf       	out	0x3d, r28	; 61
    3ba4:	6d 87       	std	Y+13, r22	; 0x0d
    3ba6:	7e 87       	std	Y+14, r23	; 0x0e
    3ba8:	8f 87       	std	Y+15, r24	; 0x0f
    3baa:	98 8b       	std	Y+16, r25	; 0x10
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[12]; // heading, 10 digit bytes, NULL
	#endif
		
		ultoa(data, u_tmp_buff, 10);
    3bac:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bae:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bb0:	af 85       	ldd	r26, Y+15	; 0x0f
    3bb2:	b8 89       	ldd	r27, Y+16	; 0x10
    3bb4:	2a e0       	ldi	r18, 0x0A	; 10
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	ae 01       	movw	r20, r28
    3bba:	4f 5f       	subi	r20, 0xFF	; 255
    3bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    3bbe:	bc 01       	movw	r22, r24
    3bc0:	cd 01       	movw	r24, r26
    3bc2:	0e 94 83 29 	call	0x5306	; 0x5306 <ultoa>
		uart1_putstr(u_tmp_buff);
    3bc6:	ce 01       	movw	r24, r28
    3bc8:	01 96       	adiw	r24, 0x01	; 1
    3bca:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart1_putstr>
	}
    3bce:	60 96       	adiw	r28, 0x10	; 16
    3bd0:	0f b6       	in	r0, 0x3f	; 63
    3bd2:	f8 94       	cli
    3bd4:	de bf       	out	0x3e, r29	; 62
    3bd6:	0f be       	out	0x3f, r0	; 63
    3bd8:	cd bf       	out	0x3d, r28	; 61
    3bda:	df 91       	pop	r29
    3bdc:	cf 91       	pop	r28
    3bde:	08 95       	ret

00003be0 <uart1_putulongr>:
	
	void uart1_putulongr(uint32_t data, uint8_t radix)
	{
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
    3be8:	66 97       	sbiw	r28, 0x16	; 22
    3bea:	0f b6       	in	r0, 0x3f	; 63
    3bec:	f8 94       	cli
    3bee:	de bf       	out	0x3e, r29	; 62
    3bf0:	0f be       	out	0x3f, r0	; 63
    3bf2:	cd bf       	out	0x3d, r28	; 61
    3bf4:	6a 8b       	std	Y+18, r22	; 0x12
    3bf6:	7b 8b       	std	Y+19, r23	; 0x13
    3bf8:	8c 8b       	std	Y+20, r24	; 0x14
    3bfa:	9d 8b       	std	Y+21, r25	; 0x15
    3bfc:	4e 8b       	std	Y+22, r20	; 0x16
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[17]; // heading, 15 digit bytes, NULL
	#endif
		
		ultoa(data, u_tmp_buff, radix);
    3bfe:	8e 89       	ldd	r24, Y+22	; 0x16
    3c00:	28 2f       	mov	r18, r24
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	8a 89       	ldd	r24, Y+18	; 0x12
    3c06:	9b 89       	ldd	r25, Y+19	; 0x13
    3c08:	ac 89       	ldd	r26, Y+20	; 0x14
    3c0a:	bd 89       	ldd	r27, Y+21	; 0x15
    3c0c:	ae 01       	movw	r20, r28
    3c0e:	4f 5f       	subi	r20, 0xFF	; 255
    3c10:	5f 4f       	sbci	r21, 0xFF	; 255
    3c12:	bc 01       	movw	r22, r24
    3c14:	cd 01       	movw	r24, r26
    3c16:	0e 94 83 29 	call	0x5306	; 0x5306 <ultoa>
		uart1_putstr(u_tmp_buff);
    3c1a:	ce 01       	movw	r24, r28
    3c1c:	01 96       	adiw	r24, 0x01	; 1
    3c1e:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart1_putstr>
	}
    3c22:	66 96       	adiw	r28, 0x16	; 22
    3c24:	0f b6       	in	r0, 0x3f	; 63
    3c26:	f8 94       	cli
    3c28:	de bf       	out	0x3e, r29	; 62
    3c2a:	0f be       	out	0x3f, r0	; 63
    3c2c:	cd bf       	out	0x3d, r28	; 61
    3c2e:	df 91       	pop	r29
    3c30:	cf 91       	pop	r28
    3c32:	08 95       	ret

00003c34 <uart1_putfloat>:

	void uart1_putfloat(float data)
	{
    3c34:	0f 93       	push	r16
    3c36:	1f 93       	push	r17
    3c38:	cf 93       	push	r28
    3c3a:	df 93       	push	r29
    3c3c:	cd b7       	in	r28, 0x3d	; 61
    3c3e:	de b7       	in	r29, 0x3e	; 62
    3c40:	66 97       	sbiw	r28, 0x16	; 22
    3c42:	0f b6       	in	r0, 0x3f	; 63
    3c44:	f8 94       	cli
    3c46:	de bf       	out	0x3e, r29	; 62
    3c48:	0f be       	out	0x3f, r0	; 63
    3c4a:	cd bf       	out	0x3d, r28	; 61
    3c4c:	6b 8b       	std	Y+19, r22	; 0x13
    3c4e:	7c 8b       	std	Y+20, r23	; 0x14
    3c50:	8d 8b       	std	Y+21, r24	; 0x15
    3c52:	9e 8b       	std	Y+22, r25	; 0x16
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[16];
	#endif
		
		dtostrf(data, 15, 6, u_tmp_buff);
    3c54:	9e 01       	movw	r18, r28
    3c56:	2d 5f       	subi	r18, 0xFD	; 253
    3c58:	3f 4f       	sbci	r19, 0xFF	; 255
    3c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c5e:	ad 89       	ldd	r26, Y+21	; 0x15
    3c60:	be 89       	ldd	r27, Y+22	; 0x16
    3c62:	89 01       	movw	r16, r18
    3c64:	26 e0       	ldi	r18, 0x06	; 6
    3c66:	4f e0       	ldi	r20, 0x0F	; 15
    3c68:	bc 01       	movw	r22, r24
    3c6a:	cd 01       	movw	r24, r26
    3c6c:	0e 94 99 27 	call	0x4f32	; 0x4f32 <dtostrf>
		
		char *p = u_tmp_buff;
    3c70:	ce 01       	movw	r24, r28
    3c72:	03 96       	adiw	r24, 0x03	; 3
    3c74:	9a 83       	std	Y+2, r25	; 0x02
    3c76:	89 83       	std	Y+1, r24	; 0x01
		while(*p == ' ') // remove all unwanted spaces
    3c78:	05 c0       	rjmp	.+10     	; 0x3c84 <uart1_putfloat+0x50>
			p++;
    3c7a:	89 81       	ldd	r24, Y+1	; 0x01
    3c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7e:	01 96       	adiw	r24, 0x01	; 1
    3c80:	9a 83       	std	Y+2, r25	; 0x02
    3c82:	89 83       	std	Y+1, r24	; 0x01
	#endif
		
		dtostrf(data, 15, 6, u_tmp_buff);
		
		char *p = u_tmp_buff;
		while(*p == ' ') // remove all unwanted spaces
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	9a 81       	ldd	r25, Y+2	; 0x02
    3c88:	fc 01       	movw	r30, r24
    3c8a:	80 81       	ld	r24, Z
    3c8c:	80 32       	cpi	r24, 0x20	; 32
    3c8e:	a9 f3       	breq	.-22     	; 0x3c7a <uart1_putfloat+0x46>
			p++;
		
		uart1_putstr(p);
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	9a 81       	ldd	r25, Y+2	; 0x02
    3c94:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart1_putstr>
	}
    3c98:	66 96       	adiw	r28, 0x16	; 22
    3c9a:	0f b6       	in	r0, 0x3f	; 63
    3c9c:	f8 94       	cli
    3c9e:	de bf       	out	0x3e, r29	; 62
    3ca0:	0f be       	out	0x3f, r0	; 63
    3ca2:	cd bf       	out	0x3d, r28	; 61
    3ca4:	df 91       	pop	r29
    3ca6:	cf 91       	pop	r28
    3ca8:	1f 91       	pop	r17
    3caa:	0f 91       	pop	r16
    3cac:	08 95       	ret

00003cae <uart1_fputfloat>:

	void uart1_fputfloat(float data, uint8_t precision)
	{
    3cae:	0f 93       	push	r16
    3cb0:	1f 93       	push	r17
    3cb2:	cf 93       	push	r28
    3cb4:	df 93       	push	r29
    3cb6:	cd b7       	in	r28, 0x3d	; 61
    3cb8:	de b7       	in	r29, 0x3e	; 62
    3cba:	67 97       	sbiw	r28, 0x17	; 23
    3cbc:	0f b6       	in	r0, 0x3f	; 63
    3cbe:	f8 94       	cli
    3cc0:	de bf       	out	0x3e, r29	; 62
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	cd bf       	out	0x3d, r28	; 61
    3cc6:	6b 8b       	std	Y+19, r22	; 0x13
    3cc8:	7c 8b       	std	Y+20, r23	; 0x14
    3cca:	8d 8b       	std	Y+21, r24	; 0x15
    3ccc:	9e 8b       	std	Y+22, r25	; 0x16
    3cce:	4f 8b       	std	Y+23, r20	; 0x17
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[16];
	#endif
		
		dtostrf(data, 15, precision, u_tmp_buff);
    3cd0:	9e 01       	movw	r18, r28
    3cd2:	2d 5f       	subi	r18, 0xFD	; 253
    3cd4:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd6:	8b 89       	ldd	r24, Y+19	; 0x13
    3cd8:	9c 89       	ldd	r25, Y+20	; 0x14
    3cda:	ad 89       	ldd	r26, Y+21	; 0x15
    3cdc:	be 89       	ldd	r27, Y+22	; 0x16
    3cde:	89 01       	movw	r16, r18
    3ce0:	2f 89       	ldd	r18, Y+23	; 0x17
    3ce2:	4f e0       	ldi	r20, 0x0F	; 15
    3ce4:	bc 01       	movw	r22, r24
    3ce6:	cd 01       	movw	r24, r26
    3ce8:	0e 94 99 27 	call	0x4f32	; 0x4f32 <dtostrf>
		
		char *p = u_tmp_buff;
    3cec:	ce 01       	movw	r24, r28
    3cee:	03 96       	adiw	r24, 0x03	; 3
    3cf0:	9a 83       	std	Y+2, r25	; 0x02
    3cf2:	89 83       	std	Y+1, r24	; 0x01
		while(*p == ' ') // remove all unwanted spaces
    3cf4:	05 c0       	rjmp	.+10     	; 0x3d00 <uart1_fputfloat+0x52>
			p++;
    3cf6:	89 81       	ldd	r24, Y+1	; 0x01
    3cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfa:	01 96       	adiw	r24, 0x01	; 1
    3cfc:	9a 83       	std	Y+2, r25	; 0x02
    3cfe:	89 83       	std	Y+1, r24	; 0x01
	#endif
		
		dtostrf(data, 15, precision, u_tmp_buff);
		
		char *p = u_tmp_buff;
		while(*p == ' ') // remove all unwanted spaces
    3d00:	89 81       	ldd	r24, Y+1	; 0x01
    3d02:	9a 81       	ldd	r25, Y+2	; 0x02
    3d04:	fc 01       	movw	r30, r24
    3d06:	80 81       	ld	r24, Z
    3d08:	80 32       	cpi	r24, 0x20	; 32
    3d0a:	a9 f3       	breq	.-22     	; 0x3cf6 <uart1_fputfloat+0x48>
			p++;
		
		uart1_putstr(p);
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d10:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart1_putstr>
	}
    3d14:	67 96       	adiw	r28, 0x17	; 23
    3d16:	0f b6       	in	r0, 0x3f	; 63
    3d18:	f8 94       	cli
    3d1a:	de bf       	out	0x3e, r29	; 62
    3d1c:	0f be       	out	0x3f, r0	; 63
    3d1e:	cd bf       	out	0x3d, r28	; 61
    3d20:	df 91       	pop	r29
    3d22:	cf 91       	pop	r28
    3d24:	1f 91       	pop	r17
    3d26:	0f 91       	pop	r16
    3d28:	08 95       	ret

00003d2a <uart1_flush>:
	
	void uart1_flush(void)
	{
    3d2a:	cf 93       	push	r28
    3d2c:	df 93       	push	r29
    3d2e:	cd b7       	in	r28, 0x3d	; 61
    3d30:	de b7       	in	r29, 0x3e	; 62
	#ifdef USART1_RS485_MODE // flush UDR buffer
		while (___PORT(RS485_CONTROL1_IOPORTNAME) & (1<<RS485_CONTROL1_PIN));
	#else	
		while(tx1_Tail != tx1_Head); // just flush the ring buffer 
    3d32:	00 00       	nop
    3d34:	90 91 49 02 	lds	r25, 0x0249
    3d38:	80 91 4b 02 	lds	r24, 0x024B
    3d3c:	98 17       	cp	r25, r24
    3d3e:	d1 f7       	brne	.-12     	; 0x3d34 <uart1_flush+0xa>
	#endif
	}
    3d40:	df 91       	pop	r29
    3d42:	cf 91       	pop	r28
    3d44:	08 95       	ret

00003d46 <uart0_getc>:
		
		return tmp;
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	char uart0_getc(void)
	{
    3d46:	cf 93       	push	r28
    3d48:	df 93       	push	r29
    3d4a:	1f 92       	push	r1
    3d4c:	cd b7       	in	r28, 0x3d	; 61
    3d4e:	de b7       	in	r29, 0x3e	; 62
		register uint8_t tmp_rx_Tail asm("r25");
		char tmp;
		
		tmp_rx_Tail = rx0_Tail;
    3d50:	80 91 06 02 	lds	r24, 0x0206
    3d54:	98 2f       	mov	r25, r24
		
		if(tmp_rx_Tail == rx0_Head) 
    3d56:	29 2f       	mov	r18, r25
    3d58:	80 91 48 02 	lds	r24, 0x0248
    3d5c:	28 17       	cp	r18, r24
    3d5e:	11 f4       	brne	.+4      	; 0x3d64 <uart0_getc+0x1e>
			return 0;
    3d60:	80 e0       	ldi	r24, 0x00	; 0
    3d62:	0e c0       	rjmp	.+28     	; 0x3d80 <uart0_getc+0x3a>
		
		tmp_rx_Tail = (tmp_rx_Tail+1) & RX0_BUFFER_MASK;
    3d64:	89 2f       	mov	r24, r25
    3d66:	8f 5f       	subi	r24, 0xFF	; 255
    3d68:	8f 71       	andi	r24, 0x1F	; 31
    3d6a:	98 2f       	mov	r25, r24
	
		asm volatile("\n\t"
    3d6c:	a9 2f       	mov	r26, r25
    3d6e:	b0 e0       	ldi	r27, 0x00	; 0
    3d70:	ac 51       	subi	r26, 0x1C	; 28
    3d72:	be 4f       	sbci	r27, 0xFE	; 254
    3d74:	8c 91       	ld	r24, X
    3d76:	89 83       	std	Y+1, r24	; 0x01
			"r27",
		#endif
			"r26"
		);
	
		rx0_Tail = tmp_rx_Tail;
    3d78:	89 2f       	mov	r24, r25
    3d7a:	80 93 06 02 	sts	0x0206, r24
			if(tmp == '\r')
				uart0_putc('\n');
		#endif
	#endif // RX0_GETC_ECHO
		
		return tmp;
    3d7e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3d80:	0f 90       	pop	r0
    3d82:	df 91       	pop	r29
    3d84:	cf 91       	pop	r28
    3d86:	08 95       	ret

00003d88 <uart0_gets>:
		}
		*buffer = 0;
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	void uart0_gets(char *buffer, uint8_t bufferlimit)
	{
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	00 d0       	rcall	.+0      	; 0x3d8e <uart0_gets+0x6>
    3d8e:	1f 92       	push	r1
    3d90:	cd b7       	in	r28, 0x3d	; 61
    3d92:	de b7       	in	r29, 0x3e	; 62
    3d94:	9a 83       	std	Y+2, r25	; 0x02
    3d96:	89 83       	std	Y+1, r24	; 0x01
    3d98:	6b 83       	std	Y+3, r22	; 0x03
		asm volatile("\n\t"
    3d9a:	29 81       	ldd	r18, Y+1	; 0x01
    3d9c:	3a 81       	ldd	r19, Y+2	; 0x02
    3d9e:	4b 81       	ldd	r20, Y+3	; 0x03
    3da0:	f9 01       	movw	r30, r18

00003da2 <loop_1254>:
    3da2:	4a 95       	dec	r20
    3da4:	21 f0       	breq	.+8      	; 0x3dae <store_NULL_1254>
    3da6:	cf df       	rcall	.-98     	; 0x3d46 <uart0_getc>
    3da8:	81 93       	st	Z+, r24
    3daa:	81 11       	cpse	r24, r1
    3dac:	fa cf       	rjmp	.-12     	; 0x3da2 <loop_1254>

00003dae <store_NULL_1254>:
    3dae:	10 82       	st	Z, r1
			[limit] "r" (bufferlimit)
			: // clobbers
			"r24",
			"r25","r26","r27" // uart_getc()
		);
	}
    3db0:	0f 90       	pop	r0
    3db2:	0f 90       	pop	r0
    3db4:	0f 90       	pop	r0
    3db6:	df 91       	pop	r29
    3db8:	cf 91       	pop	r28
    3dba:	08 95       	ret

00003dbc <uart0_getln>:
		}
		*buffer = 0;
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	void uart0_getln(char *buffer, uint8_t bufferlimit)
	{
    3dbc:	cf 93       	push	r28
    3dbe:	df 93       	push	r29
    3dc0:	00 d0       	rcall	.+0      	; 0x3dc2 <uart0_getln+0x6>
    3dc2:	1f 92       	push	r1
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	9a 83       	std	Y+2, r25	; 0x02
    3dca:	89 83       	std	Y+1, r24	; 0x01
    3dcc:	6b 83       	std	Y+3, r22	; 0x03
		asm volatile("\n\t"
    3dce:	29 81       	ldd	r18, Y+1	; 0x01
    3dd0:	3a 81       	ldd	r19, Y+2	; 0x02
    3dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd4:	f9 01       	movw	r30, r18

00003dd6 <loop_1275>:
    3dd6:	9a 95       	dec	r25
    3dd8:	51 f0       	breq	.+20     	; 0x3dee <store_NULL_1275>

00003dda <wait_loop_1275>:
    3dda:	b5 df       	rcall	.-150    	; 0x3d46 <uart0_getc>
    3ddc:	88 23       	and	r24, r24
    3dde:	e9 f3       	breq	.-6      	; 0x3dda <wait_loop_1275>
    3de0:	8d 30       	cpi	r24, 0x0D	; 13
    3de2:	11 f0       	breq	.+4      	; 0x3de8 <wait_loop2_1275>
    3de4:	81 93       	st	Z+, r24
    3de6:	f7 cf       	rjmp	.-18     	; 0x3dd6 <loop_1275>

00003de8 <wait_loop2_1275>:
    3de8:	ae df       	rcall	.-164    	; 0x3d46 <uart0_getc>
    3dea:	88 23       	and	r24, r24
    3dec:	e9 f3       	breq	.-6      	; 0x3de8 <wait_loop2_1275>

00003dee <store_NULL_1275>:
    3dee:	10 82       	st	Z, r1
			"z" (buffer),
			[limit] "r" (bufferlimit)
			: // clobbers
			"r24"
		);
	}
    3df0:	0f 90       	pop	r0
    3df2:	0f 90       	pop	r0
    3df4:	0f 90       	pop	r0
    3df6:	df 91       	pop	r29
    3df8:	cf 91       	pop	r28
    3dfa:	08 95       	ret

00003dfc <uart0_getlnToFirstWhiteSpace>:
		}
		*buffer = 0;
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	void uart0_getlnToFirstWhiteSpace(char *buffer, uint8_t bufferlimit)
	{
    3dfc:	cf 93       	push	r28
    3dfe:	df 93       	push	r29
    3e00:	00 d0       	rcall	.+0      	; 0x3e02 <uart0_getlnToFirstWhiteSpace+0x6>
    3e02:	1f 92       	push	r1
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	9a 83       	std	Y+2, r25	; 0x02
    3e0a:	89 83       	std	Y+1, r24	; 0x01
    3e0c:	6b 83       	std	Y+3, r22	; 0x03
		asm volatile("\n\t"
    3e0e:	29 81       	ldd	r18, Y+1	; 0x01
    3e10:	3a 81       	ldd	r19, Y+2	; 0x02
    3e12:	4b 81       	ldd	r20, Y+3	; 0x03
    3e14:	f9 01       	movw	r30, r18

00003e16 <skip_whitespaces_loop_1296>:
    3e16:	97 df       	rcall	.-210    	; 0x3d46 <uart0_getc>
    3e18:	81 32       	cpi	r24, 0x21	; 33
    3e1a:	e8 f3       	brcs	.-6      	; 0x3e16 <skip_whitespaces_loop_1296>
    3e1c:	81 93       	st	Z+, r24
    3e1e:	4a 95       	dec	r20

00003e20 <loop_1296>:
    3e20:	4a 95       	dec	r20
    3e22:	61 f0       	breq	.+24     	; 0x3e3c <store_NULL_1296>

00003e24 <wait_loop_1296>:
    3e24:	90 df       	rcall	.-224    	; 0x3d46 <uart0_getc>
    3e26:	88 23       	and	r24, r24
    3e28:	e9 f3       	breq	.-6      	; 0x3e24 <wait_loop_1296>
    3e2a:	8d 30       	cpi	r24, 0x0D	; 13
    3e2c:	21 f0       	breq	.+8      	; 0x3e36 <exit_wait_loop_1296>
    3e2e:	81 32       	cpi	r24, 0x21	; 33
    3e30:	28 f0       	brcs	.+10     	; 0x3e3c <store_NULL_1296>
    3e32:	81 93       	st	Z+, r24
    3e34:	f5 cf       	rjmp	.-22     	; 0x3e20 <loop_1296>

00003e36 <exit_wait_loop_1296>:
    3e36:	87 df       	rcall	.-242    	; 0x3d46 <uart0_getc>
    3e38:	88 23       	and	r24, r24
    3e3a:	e9 f3       	breq	.-6      	; 0x3e36 <exit_wait_loop_1296>

00003e3c <store_NULL_1296>:
    3e3c:	10 82       	st	Z, r1
			[limit] "r" (bufferlimit)
			: // clobbers
			"r24",
			"r25","r26","r27" // uart_getc()
		);
	}
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	0f 90       	pop	r0
    3e44:	df 91       	pop	r29
    3e46:	cf 91       	pop	r28
    3e48:	08 95       	ret

00003e4a <uart0_getint>:
//Function  : Read 16bit integer value from the input stream.
//Arguments : none
//Return    : Received 16bit integer value.
//******************************************************************
	int16_t uart0_getint(void)
	{
    3e4a:	cf 93       	push	r28
    3e4c:	df 93       	push	r29
    3e4e:	cd b7       	in	r28, 0x3d	; 61
    3e50:	de b7       	in	r29, 0x3e	; 62
    3e52:	27 97       	sbiw	r28, 0x07	; 7
    3e54:	0f b6       	in	r0, 0x3f	; 63
    3e56:	f8 94       	cli
    3e58:	de bf       	out	0x3e, r29	; 62
    3e5a:	0f be       	out	0x3f, r0	; 63
    3e5c:	cd bf       	out	0x3d, r28	; 61
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[7]; // heading, 5 digit bytes, NULL
	#endif
	
		uart0_getlnToFirstWhiteSpace(u_tmp_buff, 7);
    3e5e:	67 e0       	ldi	r22, 0x07	; 7
    3e60:	ce 01       	movw	r24, r28
    3e62:	01 96       	adiw	r24, 0x01	; 1
    3e64:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <uart0_getlnToFirstWhiteSpace>
		
		return atoi(u_tmp_buff);
    3e68:	ce 01       	movw	r24, r28
    3e6a:	01 96       	adiw	r24, 0x01	; 1
    3e6c:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <atoi>
	}
    3e70:	27 96       	adiw	r28, 0x07	; 7
    3e72:	0f b6       	in	r0, 0x3f	; 63
    3e74:	f8 94       	cli
    3e76:	de bf       	out	0x3e, r29	; 62
    3e78:	0f be       	out	0x3f, r0	; 63
    3e7a:	cd bf       	out	0x3d, r28	; 61
    3e7c:	df 91       	pop	r29
    3e7e:	cf 91       	pop	r28
    3e80:	08 95       	ret

00003e82 <uart0_getlong>:
//Function  : Read 32bit integer value from the input stream.
//Arguments : none
//Return    : Received 32bit integer value
//******************************************************************
	int32_t uart0_getlong(void)
	{
    3e82:	cf 93       	push	r28
    3e84:	df 93       	push	r29
    3e86:	cd b7       	in	r28, 0x3d	; 61
    3e88:	de b7       	in	r29, 0x3e	; 62
    3e8a:	2c 97       	sbiw	r28, 0x0c	; 12
    3e8c:	0f b6       	in	r0, 0x3f	; 63
    3e8e:	f8 94       	cli
    3e90:	de bf       	out	0x3e, r29	; 62
    3e92:	0f be       	out	0x3f, r0	; 63
    3e94:	cd bf       	out	0x3d, r28	; 61
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[12]; // heading, 10 digit bytes, NULL
	#endif
	
		uart0_getlnToFirstWhiteSpace(u_tmp_buff, 12);
    3e96:	6c e0       	ldi	r22, 0x0C	; 12
    3e98:	ce 01       	movw	r24, r28
    3e9a:	01 96       	adiw	r24, 0x01	; 1
    3e9c:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <uart0_getlnToFirstWhiteSpace>
		
		return atol(u_tmp_buff);
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	01 96       	adiw	r24, 0x01	; 1
    3ea4:	0e 94 08 29 	call	0x5210	; 0x5210 <atol>
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	cb 01       	movw	r24, r22
	}
    3eac:	bc 01       	movw	r22, r24
    3eae:	cd 01       	movw	r24, r26
    3eb0:	2c 96       	adiw	r28, 0x0c	; 12
    3eb2:	0f b6       	in	r0, 0x3f	; 63
    3eb4:	f8 94       	cli
    3eb6:	de bf       	out	0x3e, r29	; 62
    3eb8:	0f be       	out	0x3f, r0	; 63
    3eba:	cd bf       	out	0x3d, r28	; 61
    3ebc:	df 91       	pop	r29
    3ebe:	cf 91       	pop	r28
    3ec0:	08 95       	ret

00003ec2 <uart0_getfloat>:
//Function  : Read floating point value from the input stream.
//Arguments : none
//Return    : Received float value.
//******************************************************************
	float uart0_getfloat(void)
	{
    3ec2:	cf 93       	push	r28
    3ec4:	df 93       	push	r29
    3ec6:	cd b7       	in	r28, 0x3d	; 61
    3ec8:	de b7       	in	r29, 0x3e	; 62
    3eca:	a0 97       	sbiw	r28, 0x20	; 32
    3ecc:	0f b6       	in	r0, 0x3f	; 63
    3ece:	f8 94       	cli
    3ed0:	de bf       	out	0x3e, r29	; 62
    3ed2:	0f be       	out	0x3f, r0	; 63
    3ed4:	cd bf       	out	0x3d, r28	; 61
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[32];
	#endif
	
		uart0_getlnToFirstWhiteSpace(u_tmp_buff, 32);
    3ed6:	60 e2       	ldi	r22, 0x20	; 32
    3ed8:	ce 01       	movw	r24, r28
    3eda:	01 96       	adiw	r24, 0x01	; 1
    3edc:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <uart0_getlnToFirstWhiteSpace>
		
		return atof(u_tmp_buff);
    3ee0:	ce 01       	movw	r24, r28
    3ee2:	01 96       	adiw	r24, 0x01	; 1
    3ee4:	0e 94 e6 28 	call	0x51cc	; 0x51cc <atof>
    3ee8:	dc 01       	movw	r26, r24
    3eea:	cb 01       	movw	r24, r22
	}
    3eec:	bc 01       	movw	r22, r24
    3eee:	cd 01       	movw	r24, r26
    3ef0:	a0 96       	adiw	r28, 0x20	; 32
    3ef2:	0f b6       	in	r0, 0x3f	; 63
    3ef4:	f8 94       	cli
    3ef6:	de bf       	out	0x3e, r29	; 62
    3ef8:	0f be       	out	0x3f, r0	; 63
    3efa:	cd bf       	out	0x3d, r28	; 61
    3efc:	df 91       	pop	r29
    3efe:	cf 91       	pop	r28
    3f00:	08 95       	ret

00003f02 <uart0_getData>:
		
		return tmp;
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	int16_t uart0_getData(void)
	{
    3f02:	1f 93       	push	r17
    3f04:	cf 93       	push	r28
    3f06:	df 93       	push	r29
    3f08:	1f 92       	push	r1
    3f0a:	cd b7       	in	r28, 0x3d	; 61
    3f0c:	de b7       	in	r29, 0x3e	; 62
		register uint8_t tmp_rx_Tail = rx0_Tail;
    3f0e:	10 91 06 02 	lds	r17, 0x0206
		uint8_t tmp;
		
		if(tmp_rx_Tail == rx0_Head) 
    3f12:	80 91 48 02 	lds	r24, 0x0248
    3f16:	18 17       	cp	r17, r24
    3f18:	19 f4       	brne	.+6      	; 0x3f20 <uart0_getData+0x1e>
			return -1;
    3f1a:	8f ef       	ldi	r24, 0xFF	; 255
    3f1c:	9f ef       	ldi	r25, 0xFF	; 255
    3f1e:	11 c0       	rjmp	.+34     	; 0x3f42 <uart0_getData+0x40>
		
		tmp_rx_Tail = (tmp_rx_Tail+1) & RX0_BUFFER_MASK;
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	81 0f       	add	r24, r17
    3f24:	18 2f       	mov	r17, r24
    3f26:	1f 71       	andi	r17, 0x1F	; 31
	
		asm volatile("\n\t"
    3f28:	81 2f       	mov	r24, r17
    3f2a:	a8 2f       	mov	r26, r24
    3f2c:	b0 e0       	ldi	r27, 0x00	; 0
    3f2e:	ac 51       	subi	r26, 0x1C	; 28
    3f30:	be 4f       	sbci	r27, 0xFE	; 254
    3f32:	9c 91       	ld	r25, X
    3f34:	18 2f       	mov	r17, r24
    3f36:	99 83       	std	Y+1, r25	; 0x01
			"r27",
		#endif
			"r26"
		);
		
		rx0_Tail = tmp_rx_Tail;
    3f38:	10 93 06 02 	sts	0x0206, r17
		if (___PORT(RTS0_IOPORTNAME) & (1<<RTS0_PIN))
			if (!(UCSR0A_REGISTER & (1<<RXC0_BIT)))
				___PORT(RTS0_IOPORTNAME) &= ~(1<<RTS0_PIN);
	#endif
		
		return tmp;
    3f3c:	89 81       	ldd	r24, Y+1	; 0x01
    3f3e:	88 2f       	mov	r24, r24
    3f40:	90 e0       	ldi	r25, 0x00	; 0
	}
    3f42:	0f 90       	pop	r0
    3f44:	df 91       	pop	r29
    3f46:	cf 91       	pop	r28
    3f48:	1f 91       	pop	r17
    3f4a:	08 95       	ret

00003f4c <uart0_LoadData>:
//Return    : Status value: 0 = BUFFER_EMPTY, 1 = COMPLETED.
//Note      : This function doesn't cut CR, LF, NULL terminators
//          : If receiver buffer is empty return status = BUFFER_EMPTY instead of returning NULL (as in getc).
//******************************************************************
	uint8_t uart0_LoadData(uint8_t *data)
	{
    3f4c:	1f 93       	push	r17
    3f4e:	cf 93       	push	r28
    3f50:	df 93       	push	r29
    3f52:	00 d0       	rcall	.+0      	; 0x3f54 <uart0_LoadData+0x8>
    3f54:	cd b7       	in	r28, 0x3d	; 61
    3f56:	de b7       	in	r29, 0x3e	; 62
    3f58:	9a 83       	std	Y+2, r25	; 0x02
    3f5a:	89 83       	std	Y+1, r24	; 0x01
		register uint8_t tmp_rx_Tail = rx0_Tail;
    3f5c:	10 91 06 02 	lds	r17, 0x0206
		
		if(tmp_rx_Tail == rx0_Head) return BUFFER_EMPTY; // result = 0
    3f60:	80 91 48 02 	lds	r24, 0x0248
    3f64:	18 17       	cp	r17, r24
    3f66:	11 f4       	brne	.+4      	; 0x3f6c <uart0_LoadData+0x20>
    3f68:	80 e0       	ldi	r24, 0x00	; 0
    3f6a:	11 c0       	rjmp	.+34     	; 0x3f8e <uart0_LoadData+0x42>
		
		tmp_rx_Tail = (tmp_rx_Tail+1) & RX0_BUFFER_MASK;
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	81 0f       	add	r24, r17
    3f70:	18 2f       	mov	r17, r24
    3f72:	1f 71       	andi	r17, 0x1F	; 31
		*data = rx0_buffer[tmp_rx_Tail];
    3f74:	81 2f       	mov	r24, r17
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	8c 51       	subi	r24, 0x1C	; 28
    3f7a:	9e 4f       	sbci	r25, 0xFE	; 254
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	20 81       	ld	r18, Z
    3f80:	89 81       	ldd	r24, Y+1	; 0x01
    3f82:	9a 81       	ldd	r25, Y+2	; 0x02
    3f84:	fc 01       	movw	r30, r24
    3f86:	20 83       	st	Z, r18
		
		rx0_Tail = tmp_rx_Tail;
    3f88:	10 93 06 02 	sts	0x0206, r17
		if (___PORT(RTS0_IOPORTNAME) & (1<<RTS0_PIN))
			if (!(UCSR0A_REGISTER & (1<<RXC0_BIT)))	
				___PORT(RTS0_IOPORTNAME) &= ~(1<<RTS0_PIN);
	#endif
		
		return COMPLETED; // result = 1
    3f8c:	81 e0       	ldi	r24, 0x01	; 1
	}
    3f8e:	0f 90       	pop	r0
    3f90:	0f 90       	pop	r0
    3f92:	df 91       	pop	r29
    3f94:	cf 91       	pop	r28
    3f96:	1f 91       	pop	r17
    3f98:	08 95       	ret

00003f9a <uart0_peek>:
//Function  : Peek at the next byte in buffer.
//Arguments : none
//Return    : Next byte in buffer.
//******************************************************************
	uint8_t uart0_peek(void)
	{
    3f9a:	cf 93       	push	r28
    3f9c:	df 93       	push	r29
    3f9e:	cd b7       	in	r28, 0x3d	; 61
    3fa0:	de b7       	in	r29, 0x3e	; 62
		return rx0_buffer[(rx0_Tail+1) & RX0_BUFFER_MASK];
    3fa2:	80 91 06 02 	lds	r24, 0x0206
    3fa6:	88 2f       	mov	r24, r24
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	01 96       	adiw	r24, 0x01	; 1
    3fac:	8f 71       	andi	r24, 0x1F	; 31
    3fae:	99 27       	eor	r25, r25
    3fb0:	8c 51       	subi	r24, 0x1C	; 28
    3fb2:	9e 4f       	sbci	r25, 0xFE	; 254
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	80 81       	ld	r24, Z
	}
    3fb8:	df 91       	pop	r29
    3fba:	cf 91       	pop	r28
    3fbc:	08 95       	ret

00003fbe <uart1_getc>:
		
		return tmp;
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	char uart1_getc(void)
	{
    3fbe:	cf 93       	push	r28
    3fc0:	df 93       	push	r29
    3fc2:	1f 92       	push	r1
    3fc4:	cd b7       	in	r28, 0x3d	; 61
    3fc6:	de b7       	in	r29, 0x3e	; 62
		register uint8_t tmp_rx_Tail asm("r25");
		char tmp;
		
		tmp_rx_Tail = rx1_Tail;
    3fc8:	80 91 04 02 	lds	r24, 0x0204
    3fcc:	98 2f       	mov	r25, r24
		
		if(tmp_rx_Tail == rx1_Head) 
    3fce:	29 2f       	mov	r18, r25
    3fd0:	80 91 4a 02 	lds	r24, 0x024A
    3fd4:	28 17       	cp	r18, r24
    3fd6:	11 f4       	brne	.+4      	; 0x3fdc <uart1_getc+0x1e>
			return 0;
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
    3fda:	0e c0       	rjmp	.+28     	; 0x3ff8 <uart1_getc+0x3a>
		
		tmp_rx_Tail = (tmp_rx_Tail+1) & RX1_BUFFER_MASK;
    3fdc:	89 2f       	mov	r24, r25
    3fde:	8f 5f       	subi	r24, 0xFF	; 255
    3fe0:	8f 71       	andi	r24, 0x1F	; 31
    3fe2:	98 2f       	mov	r25, r24
	
		asm volatile("\n\t"
    3fe4:	a9 2f       	mov	r26, r25
    3fe6:	b0 e0       	ldi	r27, 0x00	; 0
    3fe8:	a8 5d       	subi	r26, 0xD8	; 216
    3fea:	bd 4f       	sbci	r27, 0xFD	; 253
    3fec:	8c 91       	ld	r24, X
    3fee:	89 83       	std	Y+1, r24	; 0x01
			: // inputs
			: // clobbers
			"r26","r27"
		);
	
		rx1_Tail = tmp_rx_Tail;
    3ff0:	89 2f       	mov	r24, r25
    3ff2:	80 93 04 02 	sts	0x0204, r24
			if(tmp == '\r') 
				uart1_putc('\n');
		#endif
	#endif // RX1_GETC_ECHO
		
		return tmp;
    3ff6:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3ff8:	0f 90       	pop	r0
    3ffa:	df 91       	pop	r29
    3ffc:	cf 91       	pop	r28
    3ffe:	08 95       	ret

00004000 <uart1_gets>:
		}
		*buffer = 0;
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	void uart1_gets(char *buffer, uint8_t bufferlimit)
	{
    4000:	cf 93       	push	r28
    4002:	df 93       	push	r29
    4004:	00 d0       	rcall	.+0      	; 0x4006 <uart1_gets+0x6>
    4006:	1f 92       	push	r1
    4008:	cd b7       	in	r28, 0x3d	; 61
    400a:	de b7       	in	r29, 0x3e	; 62
    400c:	9a 83       	std	Y+2, r25	; 0x02
    400e:	89 83       	std	Y+1, r24	; 0x01
    4010:	6b 83       	std	Y+3, r22	; 0x03
		asm volatile("\n\t"
    4012:	29 81       	ldd	r18, Y+1	; 0x01
    4014:	3a 81       	ldd	r19, Y+2	; 0x02
    4016:	4b 81       	ldd	r20, Y+3	; 0x03
    4018:	f9 01       	movw	r30, r18

0000401a <loop_1544>:
    401a:	4a 95       	dec	r20
    401c:	21 f0       	breq	.+8      	; 0x4026 <store_NULL_1544>
    401e:	cf df       	rcall	.-98     	; 0x3fbe <uart1_getc>
    4020:	81 93       	st	Z+, r24
    4022:	81 11       	cpse	r24, r1
    4024:	fa cf       	rjmp	.-12     	; 0x401a <loop_1544>

00004026 <store_NULL_1544>:
    4026:	10 82       	st	Z, r1
			[limit] "r" (bufferlimit)
			: // clobbers
			"r24",
			"r25","r26","r27" // uart_getc()
		);
	}
    4028:	0f 90       	pop	r0
    402a:	0f 90       	pop	r0
    402c:	0f 90       	pop	r0
    402e:	df 91       	pop	r29
    4030:	cf 91       	pop	r28
    4032:	08 95       	ret

00004034 <uart1_getln>:
		}
		*buffer = 0;
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	void uart1_getln(char *buffer, uint8_t bufferlimit)
	{
    4034:	cf 93       	push	r28
    4036:	df 93       	push	r29
    4038:	00 d0       	rcall	.+0      	; 0x403a <uart1_getln+0x6>
    403a:	1f 92       	push	r1
    403c:	cd b7       	in	r28, 0x3d	; 61
    403e:	de b7       	in	r29, 0x3e	; 62
    4040:	9a 83       	std	Y+2, r25	; 0x02
    4042:	89 83       	std	Y+1, r24	; 0x01
    4044:	6b 83       	std	Y+3, r22	; 0x03
		asm volatile("\n\t"
    4046:	29 81       	ldd	r18, Y+1	; 0x01
    4048:	3a 81       	ldd	r19, Y+2	; 0x02
    404a:	4b 81       	ldd	r20, Y+3	; 0x03
    404c:	f9 01       	movw	r30, r18

0000404e <loop_1565>:
    404e:	4a 95       	dec	r20
    4050:	51 f0       	breq	.+20     	; 0x4066 <store_NULL_1565>

00004052 <wait_loop_1565>:
    4052:	b5 df       	rcall	.-150    	; 0x3fbe <uart1_getc>
    4054:	88 23       	and	r24, r24
    4056:	e9 f3       	breq	.-6      	; 0x4052 <wait_loop_1565>
    4058:	8d 30       	cpi	r24, 0x0D	; 13
    405a:	11 f0       	breq	.+4      	; 0x4060 <wait_loop2_1565>
    405c:	81 93       	st	Z+, r24
    405e:	f7 cf       	rjmp	.-18     	; 0x404e <loop_1565>

00004060 <wait_loop2_1565>:
    4060:	ae df       	rcall	.-164    	; 0x3fbe <uart1_getc>
    4062:	88 23       	and	r24, r24
    4064:	e9 f3       	breq	.-6      	; 0x4060 <wait_loop2_1565>

00004066 <store_NULL_1565>:
    4066:	10 82       	st	Z, r1
			[limit] "r" (bufferlimit)
			: // clobbers
			"r24",
			"r25","r26","r27" // uart_getc()
		);
	}
    4068:	0f 90       	pop	r0
    406a:	0f 90       	pop	r0
    406c:	0f 90       	pop	r0
    406e:	df 91       	pop	r29
    4070:	cf 91       	pop	r28
    4072:	08 95       	ret

00004074 <uart1_getlnToFirstWhiteSpace>:
		}
		*buffer = 0;
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	void uart1_getlnToFirstWhiteSpace(char *buffer, uint8_t bufferlimit)
	{
    4074:	cf 93       	push	r28
    4076:	df 93       	push	r29
    4078:	00 d0       	rcall	.+0      	; 0x407a <uart1_getlnToFirstWhiteSpace+0x6>
    407a:	1f 92       	push	r1
    407c:	cd b7       	in	r28, 0x3d	; 61
    407e:	de b7       	in	r29, 0x3e	; 62
    4080:	9a 83       	std	Y+2, r25	; 0x02
    4082:	89 83       	std	Y+1, r24	; 0x01
    4084:	6b 83       	std	Y+3, r22	; 0x03
		asm volatile("\n\t"
    4086:	29 81       	ldd	r18, Y+1	; 0x01
    4088:	3a 81       	ldd	r19, Y+2	; 0x02
    408a:	4b 81       	ldd	r20, Y+3	; 0x03
    408c:	f9 01       	movw	r30, r18

0000408e <skip_whitespaces_loop_1586>:
    408e:	97 df       	rcall	.-210    	; 0x3fbe <uart1_getc>
    4090:	81 32       	cpi	r24, 0x21	; 33
    4092:	e8 f3       	brcs	.-6      	; 0x408e <skip_whitespaces_loop_1586>
    4094:	81 93       	st	Z+, r24
    4096:	4a 95       	dec	r20

00004098 <loop_1586>:
    4098:	4a 95       	dec	r20
    409a:	61 f0       	breq	.+24     	; 0x40b4 <store_NULL_1586>

0000409c <wait_loop_1586>:
    409c:	90 df       	rcall	.-224    	; 0x3fbe <uart1_getc>
    409e:	88 23       	and	r24, r24
    40a0:	e9 f3       	breq	.-6      	; 0x409c <wait_loop_1586>
    40a2:	8d 30       	cpi	r24, 0x0D	; 13
    40a4:	21 f0       	breq	.+8      	; 0x40ae <exit_wait_loop_1586>
    40a6:	81 32       	cpi	r24, 0x21	; 33
    40a8:	28 f0       	brcs	.+10     	; 0x40b4 <store_NULL_1586>
    40aa:	81 93       	st	Z+, r24
    40ac:	f5 cf       	rjmp	.-22     	; 0x4098 <loop_1586>

000040ae <exit_wait_loop_1586>:
    40ae:	87 df       	rcall	.-242    	; 0x3fbe <uart1_getc>
    40b0:	88 23       	and	r24, r24
    40b2:	e9 f3       	breq	.-6      	; 0x40ae <exit_wait_loop_1586>

000040b4 <store_NULL_1586>:
    40b4:	10 82       	st	Z, r1
			[limit] "r" (bufferlimit)
			: // clobbers
			"r24",
			"r25","r26","r27" // uart_getc()
		);
	}
    40b6:	0f 90       	pop	r0
    40b8:	0f 90       	pop	r0
    40ba:	0f 90       	pop	r0
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
    40c0:	08 95       	ret

000040c2 <uart1_getint>:
#endif // USART_NO_ABI_BREAKING_PREMATURES

	int16_t uart1_getint(void)
	{
    40c2:	cf 93       	push	r28
    40c4:	df 93       	push	r29
    40c6:	cd b7       	in	r28, 0x3d	; 61
    40c8:	de b7       	in	r29, 0x3e	; 62
    40ca:	27 97       	sbiw	r28, 0x07	; 7
    40cc:	0f b6       	in	r0, 0x3f	; 63
    40ce:	f8 94       	cli
    40d0:	de bf       	out	0x3e, r29	; 62
    40d2:	0f be       	out	0x3f, r0	; 63
    40d4:	cd bf       	out	0x3d, r28	; 61
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[7]; // heading, 5 digit bytes, NULL
	#endif
	
		uart1_getlnToFirstWhiteSpace(u_tmp_buff, 7);
    40d6:	67 e0       	ldi	r22, 0x07	; 7
    40d8:	ce 01       	movw	r24, r28
    40da:	01 96       	adiw	r24, 0x01	; 1
    40dc:	0e 94 3a 20 	call	0x4074	; 0x4074 <uart1_getlnToFirstWhiteSpace>
		
		return atoi(u_tmp_buff);
    40e0:	ce 01       	movw	r24, r28
    40e2:	01 96       	adiw	r24, 0x01	; 1
    40e4:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <atoi>
	}
    40e8:	27 96       	adiw	r28, 0x07	; 7
    40ea:	0f b6       	in	r0, 0x3f	; 63
    40ec:	f8 94       	cli
    40ee:	de bf       	out	0x3e, r29	; 62
    40f0:	0f be       	out	0x3f, r0	; 63
    40f2:	cd bf       	out	0x3d, r28	; 61
    40f4:	df 91       	pop	r29
    40f6:	cf 91       	pop	r28
    40f8:	08 95       	ret

000040fa <uart1_getlong>:

	int32_t uart1_getlong(void)
	{
    40fa:	cf 93       	push	r28
    40fc:	df 93       	push	r29
    40fe:	cd b7       	in	r28, 0x3d	; 61
    4100:	de b7       	in	r29, 0x3e	; 62
    4102:	2c 97       	sbiw	r28, 0x0c	; 12
    4104:	0f b6       	in	r0, 0x3f	; 63
    4106:	f8 94       	cli
    4108:	de bf       	out	0x3e, r29	; 62
    410a:	0f be       	out	0x3f, r0	; 63
    410c:	cd bf       	out	0x3d, r28	; 61
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[12]; // heading, 10 digit bytes, NULL
	#endif
	
		uart1_getlnToFirstWhiteSpace(u_tmp_buff, 12);
    410e:	6c e0       	ldi	r22, 0x0C	; 12
    4110:	ce 01       	movw	r24, r28
    4112:	01 96       	adiw	r24, 0x01	; 1
    4114:	0e 94 3a 20 	call	0x4074	; 0x4074 <uart1_getlnToFirstWhiteSpace>
		
		return atol(u_tmp_buff);
    4118:	ce 01       	movw	r24, r28
    411a:	01 96       	adiw	r24, 0x01	; 1
    411c:	0e 94 08 29 	call	0x5210	; 0x5210 <atol>
    4120:	dc 01       	movw	r26, r24
    4122:	cb 01       	movw	r24, r22
	}
    4124:	bc 01       	movw	r22, r24
    4126:	cd 01       	movw	r24, r26
    4128:	2c 96       	adiw	r28, 0x0c	; 12
    412a:	0f b6       	in	r0, 0x3f	; 63
    412c:	f8 94       	cli
    412e:	de bf       	out	0x3e, r29	; 62
    4130:	0f be       	out	0x3f, r0	; 63
    4132:	cd bf       	out	0x3d, r28	; 61
    4134:	df 91       	pop	r29
    4136:	cf 91       	pop	r28
    4138:	08 95       	ret

0000413a <uart1_getfloat>:

	float uart1_getfloat(void)
	{
    413a:	cf 93       	push	r28
    413c:	df 93       	push	r29
    413e:	cd b7       	in	r28, 0x3d	; 61
    4140:	de b7       	in	r29, 0x3e	; 62
    4142:	a0 97       	sbiw	r28, 0x20	; 32
    4144:	0f b6       	in	r0, 0x3f	; 63
    4146:	f8 94       	cli
    4148:	de bf       	out	0x3e, r29	; 62
    414a:	0f be       	out	0x3f, r0	; 63
    414c:	cd bf       	out	0x3d, r28	; 61
	#ifndef USART_NO_LOCAL_BUFFERS
		char u_tmp_buff[32];
	#endif
	
		uart1_getlnToFirstWhiteSpace(u_tmp_buff, 32);
    414e:	60 e2       	ldi	r22, 0x20	; 32
    4150:	ce 01       	movw	r24, r28
    4152:	01 96       	adiw	r24, 0x01	; 1
    4154:	0e 94 3a 20 	call	0x4074	; 0x4074 <uart1_getlnToFirstWhiteSpace>
		
		return atof(u_tmp_buff);
    4158:	ce 01       	movw	r24, r28
    415a:	01 96       	adiw	r24, 0x01	; 1
    415c:	0e 94 e6 28 	call	0x51cc	; 0x51cc <atof>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
	}
    4164:	bc 01       	movw	r22, r24
    4166:	cd 01       	movw	r24, r26
    4168:	a0 96       	adiw	r28, 0x20	; 32
    416a:	0f b6       	in	r0, 0x3f	; 63
    416c:	f8 94       	cli
    416e:	de bf       	out	0x3e, r29	; 62
    4170:	0f be       	out	0x3f, r0	; 63
    4172:	cd bf       	out	0x3d, r28	; 61
    4174:	df 91       	pop	r29
    4176:	cf 91       	pop	r28
    4178:	08 95       	ret

0000417a <uart1_getData>:
		
		return tmp;
	}
#else // !USART_NO_ABI_BREAKING_PREMATURES
	int16_t uart1_getData(void)
	{
    417a:	1f 93       	push	r17
    417c:	cf 93       	push	r28
    417e:	df 93       	push	r29
    4180:	1f 92       	push	r1
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
		register uint8_t tmp_rx_Tail = rx1_Tail;
    4186:	10 91 04 02 	lds	r17, 0x0204
		uint8_t tmp;
		
		if(tmp_rx_Tail == rx1_Head) 
    418a:	80 91 4a 02 	lds	r24, 0x024A
    418e:	18 17       	cp	r17, r24
    4190:	19 f4       	brne	.+6      	; 0x4198 <uart1_getData+0x1e>
			return -1;
    4192:	8f ef       	ldi	r24, 0xFF	; 255
    4194:	9f ef       	ldi	r25, 0xFF	; 255
    4196:	11 c0       	rjmp	.+34     	; 0x41ba <uart1_getData+0x40>
		
		tmp_rx_Tail = (tmp_rx_Tail+1) & RX1_BUFFER_MASK;
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	81 0f       	add	r24, r17
    419c:	18 2f       	mov	r17, r24
    419e:	1f 71       	andi	r17, 0x1F	; 31
	
		asm volatile("\n\t"
    41a0:	81 2f       	mov	r24, r17
    41a2:	a8 2f       	mov	r26, r24
    41a4:	b0 e0       	ldi	r27, 0x00	; 0
    41a6:	a8 5d       	subi	r26, 0xD8	; 216
    41a8:	bd 4f       	sbci	r27, 0xFD	; 253
    41aa:	9c 91       	ld	r25, X
    41ac:	18 2f       	mov	r17, r24
    41ae:	99 83       	std	Y+1, r25	; 0x01
			: // inputs
			: // clobbers
			"r26","r27"
		);
		
		rx1_Tail = tmp_rx_Tail;
    41b0:	10 93 04 02 	sts	0x0204, r17
		if (___PORT(RTS1_IOPORTNAME) & (1<<RTS1_PIN))
			if (!(UCSR1A_REGISTER & (1<<RXC1_BIT)))
				___PORT(RTS1_IOPORTNAME) &= ~(1<<RTS1_PIN);
	#endif
		
		return tmp;
    41b4:	89 81       	ldd	r24, Y+1	; 0x01
    41b6:	88 2f       	mov	r24, r24
    41b8:	90 e0       	ldi	r25, 0x00	; 0
	}
    41ba:	0f 90       	pop	r0
    41bc:	df 91       	pop	r29
    41be:	cf 91       	pop	r28
    41c0:	1f 91       	pop	r17
    41c2:	08 95       	ret

000041c4 <uart1_LoadData>:
#endif // USART_NO_ABI_BREAKING_PREMATURES

	uint8_t uart1_LoadData(uint8_t *data)
	{
    41c4:	1f 93       	push	r17
    41c6:	cf 93       	push	r28
    41c8:	df 93       	push	r29
    41ca:	00 d0       	rcall	.+0      	; 0x41cc <uart1_LoadData+0x8>
    41cc:	cd b7       	in	r28, 0x3d	; 61
    41ce:	de b7       	in	r29, 0x3e	; 62
    41d0:	9a 83       	std	Y+2, r25	; 0x02
    41d2:	89 83       	std	Y+1, r24	; 0x01
		register uint8_t tmp_rx_Tail = rx1_Tail;
    41d4:	10 91 04 02 	lds	r17, 0x0204
		
		if(tmp_rx_Tail == rx1_Head) return BUFFER_EMPTY; // result = 0
    41d8:	80 91 4a 02 	lds	r24, 0x024A
    41dc:	18 17       	cp	r17, r24
    41de:	11 f4       	brne	.+4      	; 0x41e4 <uart1_LoadData+0x20>
    41e0:	80 e0       	ldi	r24, 0x00	; 0
    41e2:	11 c0       	rjmp	.+34     	; 0x4206 <uart1_LoadData+0x42>
		
		tmp_rx_Tail = (tmp_rx_Tail+1) & RX1_BUFFER_MASK;
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	81 0f       	add	r24, r17
    41e8:	18 2f       	mov	r17, r24
    41ea:	1f 71       	andi	r17, 0x1F	; 31
		*data = rx1_buffer[tmp_rx_Tail];
    41ec:	81 2f       	mov	r24, r17
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	88 5d       	subi	r24, 0xD8	; 216
    41f2:	9d 4f       	sbci	r25, 0xFD	; 253
    41f4:	fc 01       	movw	r30, r24
    41f6:	20 81       	ld	r18, Z
    41f8:	89 81       	ldd	r24, Y+1	; 0x01
    41fa:	9a 81       	ldd	r25, Y+2	; 0x02
    41fc:	fc 01       	movw	r30, r24
    41fe:	20 83       	st	Z, r18
		
		rx1_Tail = tmp_rx_Tail;
    4200:	10 93 04 02 	sts	0x0204, r17
		if (___PORT(RTS1_IOPORTNAME) & (1<<RTS1_PIN))
			if (!(UCSR1A_REGISTER & (1<<RXC1_BIT)))
				___PORT(RTS1_IOPORTNAME) &= ~(1<<RTS1_PIN);
	#endif
		
		return COMPLETED; // result = 1
    4204:	81 e0       	ldi	r24, 0x01	; 1
	}
    4206:	0f 90       	pop	r0
    4208:	0f 90       	pop	r0
    420a:	df 91       	pop	r29
    420c:	cf 91       	pop	r28
    420e:	1f 91       	pop	r17
    4210:	08 95       	ret

00004212 <uart1_peek>:
	//{
	//	return (rx1_Head - rx1_Tail) & RX1_BUFFER_MASK;
	//}
	
	uint8_t uart1_peek(void)
	{
    4212:	cf 93       	push	r28
    4214:	df 93       	push	r29
    4216:	cd b7       	in	r28, 0x3d	; 61
    4218:	de b7       	in	r29, 0x3e	; 62
		return rx1_buffer[(rx1_Tail+1) & RX1_BUFFER_MASK];
    421a:	80 91 04 02 	lds	r24, 0x0204
    421e:	88 2f       	mov	r24, r24
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	01 96       	adiw	r24, 0x01	; 1
    4224:	8f 71       	andi	r24, 0x1F	; 31
    4226:	99 27       	eor	r25, r25
    4228:	88 5d       	subi	r24, 0xD8	; 216
    422a:	9d 4f       	sbci	r25, 0xFD	; 253
    422c:	fc 01       	movw	r30, r24
    422e:	80 81       	ld	r24, Z
	}
    4230:	df 91       	pop	r29
    4232:	cf 91       	pop	r28
    4234:	08 95       	ret

00004236 <uart_putchar>:
#if defined(USE_USART1)||defined(USE_USART2)||defined(USE_USART3)

	#ifndef NO_USART_TX
		
		int uart_putchar(char data, FILE *stream)
		{
    4236:	cf 93       	push	r28
    4238:	df 93       	push	r29
    423a:	00 d0       	rcall	.+0      	; 0x423c <uart_putchar+0x6>
    423c:	1f 92       	push	r1
    423e:	cd b7       	in	r28, 0x3d	; 61
    4240:	de b7       	in	r29, 0x3e	; 62
    4242:	89 83       	std	Y+1, r24	; 0x01
    4244:	7b 83       	std	Y+3, r23	; 0x03
    4246:	6a 83       	std	Y+2, r22	; 0x02
			switch((uint16_t) stream -> udata)
    4248:	8a 81       	ldd	r24, Y+2	; 0x02
    424a:	9b 81       	ldd	r25, Y+3	; 0x03
    424c:	fc 01       	movw	r30, r24
    424e:	84 85       	ldd	r24, Z+12	; 0x0c
    4250:	95 85       	ldd	r25, Z+13	; 0x0d
    4252:	01 97       	sbiw	r24, 0x01	; 1
    4254:	51 f0       	breq	.+20     	; 0x426a <uart_putchar+0x34>
			{
				default:
			#ifndef NO_TX0_INTERRUPT
				case 0: 
					if (data == '\n') 
    4256:	89 81       	ldd	r24, Y+1	; 0x01
    4258:	8a 30       	cpi	r24, 0x0A	; 10
    425a:	19 f4       	brne	.+6      	; 0x4262 <uart_putchar+0x2c>
						uart0_putc('\r'); 
    425c:	8d e0       	ldi	r24, 0x0D	; 13
    425e:	0e 94 ab 19 	call	0x3356	; 0x3356 <uart0_putc>
					uart0_putc(data); break;
    4262:	89 81       	ldd	r24, Y+1	; 0x01
    4264:	0e 94 ab 19 	call	0x3356	; 0x3356 <uart0_putc>
    4268:	09 c0       	rjmp	.+18     	; 0x427c <uart_putchar+0x46>
			#endif
			#ifndef NO_TX1_INTERRUPT
				case 1: 
					if (data == '\n')
    426a:	89 81       	ldd	r24, Y+1	; 0x01
    426c:	8a 30       	cpi	r24, 0x0A	; 10
    426e:	19 f4       	brne	.+6      	; 0x4276 <uart_putchar+0x40>
						uart1_putc('\r');
    4270:	8d e0       	ldi	r24, 0x0D	; 13
    4272:	0e 94 27 1c 	call	0x384e	; 0x384e <uart1_putc>
					uart1_putc(data); break;
    4276:	89 81       	ldd	r24, Y+1	; 0x01
    4278:	0e 94 27 1c 	call	0x384e	; 0x384e <uart1_putc>
					if (data == '\n')
						uart3_putc('\r');
					uart3_putc(data); break;
			#endif
			}
			return 0;
    427c:	80 e0       	ldi	r24, 0x00	; 0
    427e:	90 e0       	ldi	r25, 0x00	; 0
		}
    4280:	0f 90       	pop	r0
    4282:	0f 90       	pop	r0
    4284:	0f 90       	pop	r0
    4286:	df 91       	pop	r29
    4288:	cf 91       	pop	r28
    428a:	08 95       	ret

0000428c <uart_getchar>:
	#endif // NO_USART_TX

	#ifndef NO_USART_RX
		
		int uart_getchar(FILE *stream)
		{
    428c:	cf 93       	push	r28
    428e:	df 93       	push	r29
    4290:	00 d0       	rcall	.+0      	; 0x4292 <uart_getchar+0x6>
    4292:	00 d0       	rcall	.+0      	; 0x4294 <uart_getchar+0x8>
    4294:	cd b7       	in	r28, 0x3d	; 61
    4296:	de b7       	in	r29, 0x3e	; 62
    4298:	9c 83       	std	Y+4, r25	; 0x04
    429a:	8b 83       	std	Y+3, r24	; 0x03
			int16_t tmp;
			
			switch((uint16_t) stream -> udata)
    429c:	8b 81       	ldd	r24, Y+3	; 0x03
    429e:	9c 81       	ldd	r25, Y+4	; 0x04
    42a0:	fc 01       	movw	r30, r24
    42a2:	84 85       	ldd	r24, Z+12	; 0x0c
    42a4:	95 85       	ldd	r25, Z+13	; 0x0d
    42a6:	01 97       	sbiw	r24, 0x01	; 1
    42a8:	81 f0       	breq	.+32     	; 0x42ca <uart_getchar+0x3e>
			{
				default:
			#ifndef NO_RX0_INTERRUPT
				case 0: 
					while ( (tmp = uart0_getData()) < 0 );
    42aa:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <uart0_getData>
    42ae:	9a 83       	std	Y+2, r25	; 0x02
    42b0:	89 83       	std	Y+1, r24	; 0x01
    42b2:	89 81       	ldd	r24, Y+1	; 0x01
    42b4:	9a 81       	ldd	r25, Y+2	; 0x02
    42b6:	99 23       	and	r25, r25
    42b8:	c4 f3       	brlt	.-16     	; 0x42aa <uart_getchar+0x1e>
						
				#ifdef RX_STDIO_GETCHAR_ECHO
					tmp = uart0_putc_((uint8_t)tmp);
    42ba:	89 81       	ldd	r24, Y+1	; 0x01
    42bc:	0e 94 ab 19 	call	0x3356	; 0x3356 <uart0_putc>
    42c0:	88 2f       	mov	r24, r24
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	9a 83       	std	Y+2, r25	; 0x02
    42c6:	89 83       	std	Y+1, r24	; 0x01
				#endif
					break;
    42c8:	10 c0       	rjmp	.+32     	; 0x42ea <uart_getchar+0x5e>
			#endif
			#ifndef NO_RX1_INTERRUPT
				case 1: 
					while ( (tmp = uart1_getData()) < 0 );
    42ca:	0e 94 bd 20 	call	0x417a	; 0x417a <uart1_getData>
    42ce:	9a 83       	std	Y+2, r25	; 0x02
    42d0:	89 83       	std	Y+1, r24	; 0x01
    42d2:	89 81       	ldd	r24, Y+1	; 0x01
    42d4:	9a 81       	ldd	r25, Y+2	; 0x02
    42d6:	99 23       	and	r25, r25
    42d8:	c4 f3       	brlt	.-16     	; 0x42ca <uart_getchar+0x3e>
						
				#ifdef RX_STDIO_GETCHAR_ECHO
					tmp = uart1_putc_((uint8_t)tmp);
    42da:	89 81       	ldd	r24, Y+1	; 0x01
    42dc:	0e 94 27 1c 	call	0x384e	; 0x384e <uart1_putc>
    42e0:	88 2f       	mov	r24, r24
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	9a 83       	std	Y+2, r25	; 0x02
    42e6:	89 83       	std	Y+1, r24	; 0x01
				#endif
					break;
    42e8:	00 00       	nop
				#endif
					break;
			#endif
			}
			
			return (uint8_t)tmp;
    42ea:	89 81       	ldd	r24, Y+1	; 0x01
    42ec:	88 2f       	mov	r24, r24
    42ee:	90 e0       	ldi	r25, 0x00	; 0
		}
    42f0:	0f 90       	pop	r0
    42f2:	0f 90       	pop	r0
    42f4:	0f 90       	pop	r0
    42f6:	0f 90       	pop	r0
    42f8:	df 91       	pop	r29
    42fa:	cf 91       	pop	r28
    42fc:	08 95       	ret

000042fe <__vector_22>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
    42fe:	0f 93       	push	r16
    4300:	0f b7       	in	r16, 0x3f	; 63
    4302:	ef 93       	push	r30
    4304:	ff 93       	push	r31
    4306:	e0 91 05 02 	lds	r30, 0x0205
    430a:	f0 91 27 02 	lds	r31, 0x0227
    430e:	e3 95       	inc	r30
    4310:	ef 71       	andi	r30, 0x1F	; 31
    4312:	ef 13       	cpse	r30, r31
    4314:	05 c0       	rjmp	.+10     	; 0x4320 <USART0_TX_CONTINUE>
    4316:	f0 91 c1 00 	lds	r31, 0x00C1
    431a:	ff 7d       	andi	r31, 0xDF	; 223
    431c:	f0 93 c1 00 	sts	0x00C1, r31

00004320 <USART0_TX_CONTINUE>:
    4320:	e0 93 05 02 	sts	0x0205, r30
    4324:	f0 e0       	ldi	r31, 0x00	; 0
    4326:	e4 5b       	subi	r30, 0xB4	; 180
    4328:	fd 4f       	sbci	r31, 0xFD	; 253
    432a:	e0 81       	ld	r30, Z
    432c:	e0 93 c6 00 	sts	0x00C6, r30

00004330 <USART0_TX_EXIT>:
    4330:	ff 91       	pop	r31
    4332:	ef 91       	pop	r30
    4334:	0f bf       	out	0x3f, r16	; 63
    4336:	0f 91       	pop	r16
    4338:	18 95       	reti

0000433a <__vector_21>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
    433a:	0f 93       	push	r16
    433c:	0f b7       	in	r16, 0x3f	; 63
    433e:	9f 93       	push	r25
    4340:	90 91 c6 00 	lds	r25, 0x00C6
    4344:	ef 93       	push	r30
    4346:	ff 93       	push	r31
    4348:	e0 91 48 02 	lds	r30, 0x0248
    434c:	f0 91 06 02 	lds	r31, 0x0206
    4350:	e3 95       	inc	r30
    4352:	ef 71       	andi	r30, 0x1F	; 31
    4354:	fe 17       	cp	r31, r30
    4356:	31 f0       	breq	.+12     	; 0x4364 <USART0_RX_EXIT>
    4358:	e0 93 48 02 	sts	0x0248, r30
    435c:	f0 e0       	ldi	r31, 0x00	; 0
    435e:	ec 51       	subi	r30, 0x1C	; 28
    4360:	fe 4f       	sbci	r31, 0xFE	; 254
    4362:	90 83       	st	Z, r25

00004364 <USART0_RX_EXIT>:
    4364:	ff 91       	pop	r31
    4366:	ef 91       	pop	r30
    4368:	9f 91       	pop	r25
    436a:	0f bf       	out	0x3f, r16	; 63
    436c:	0f 91       	pop	r16
    436e:	18 95       	reti

00004370 <__vector_33>:

#ifndef NO_TX1_INTERRUPT

	ISR(UDRE1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
    4370:	0f 93       	push	r16
    4372:	0f b7       	in	r16, 0x3f	; 63
    4374:	ef 93       	push	r30
    4376:	ff 93       	push	r31
    4378:	e0 91 49 02 	lds	r30, 0x0249
    437c:	f0 91 4b 02 	lds	r31, 0x024B
    4380:	e3 95       	inc	r30
    4382:	ef 71       	andi	r30, 0x1F	; 31
    4384:	ef 13       	cpse	r30, r31
    4386:	05 c0       	rjmp	.+10     	; 0x4392 <USART1_TX_CONTINUE>
    4388:	f0 91 c9 00 	lds	r31, 0x00C9
    438c:	ff 7d       	andi	r31, 0xDF	; 223
    438e:	f0 93 c9 00 	sts	0x00C9, r31

00004392 <USART1_TX_CONTINUE>:
    4392:	e0 93 49 02 	sts	0x0249, r30
    4396:	f0 e0       	ldi	r31, 0x00	; 0
    4398:	e9 5f       	subi	r30, 0xF9	; 249
    439a:	fd 4f       	sbci	r31, 0xFD	; 253
    439c:	e0 81       	ld	r30, Z
    439e:	e0 93 ce 00 	sts	0x00CE, r30

000043a2 <USART1_TX_EXIT>:
    43a2:	ff 91       	pop	r31
    43a4:	ef 91       	pop	r30
    43a6:	0f bf       	out	0x3f, r16	; 63
    43a8:	0f 91       	pop	r16
    43aa:	18 95       	reti

000043ac <__vector_32>:

#ifndef NO_RX1_INTERRUPT
	
	ISR(RX1_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
    43ac:	0f 93       	push	r16
    43ae:	0f b7       	in	r16, 0x3f	; 63
    43b0:	9f 93       	push	r25
    43b2:	90 91 ce 00 	lds	r25, 0x00CE
    43b6:	ef 93       	push	r30
    43b8:	ff 93       	push	r31
    43ba:	e0 91 4a 02 	lds	r30, 0x024A
    43be:	f0 91 04 02 	lds	r31, 0x0204
    43c2:	e3 95       	inc	r30
    43c4:	ef 71       	andi	r30, 0x1F	; 31
    43c6:	fe 17       	cp	r31, r30
    43c8:	31 f0       	breq	.+12     	; 0x43d6 <USART1_RX_EXIT>
    43ca:	e0 93 4a 02 	sts	0x024A, r30
    43ce:	f0 e0       	ldi	r31, 0x00	; 0
    43d0:	e8 5d       	subi	r30, 0xD8	; 216
    43d2:	fd 4f       	sbci	r31, 0xFD	; 253
    43d4:	90 83       	st	Z, r25

000043d6 <USART1_RX_EXIT>:
    43d6:	ff 91       	pop	r31
    43d8:	ef 91       	pop	r30
    43da:	9f 91       	pop	r25
    43dc:	0f bf       	out	0x3f, r16	; 63
    43de:	0f 91       	pop	r16
    43e0:	18 95       	reti

000043e2 <test_sensor>:
#include "sides.h"
#include "gpio.h"
#include "actuator.h"


char test_sensor(unsigned long start_time) {
    43e2:	cf 93       	push	r28
    43e4:	df 93       	push	r29
    43e6:	00 d0       	rcall	.+0      	; 0x43e8 <test_sensor+0x6>
    43e8:	00 d0       	rcall	.+0      	; 0x43ea <test_sensor+0x8>
    43ea:	cd b7       	in	r28, 0x3d	; 61
    43ec:	de b7       	in	r29, 0x3e	; 62
    43ee:	69 83       	std	Y+1, r22	; 0x01
    43f0:	7a 83       	std	Y+2, r23	; 0x02
    43f2:	8b 83       	std	Y+3, r24	; 0x03
    43f4:	9c 83       	std	Y+4, r25	; 0x04
	if(gpio_read_pin(0) == 1) {
    43f6:	80 e0       	ldi	r24, 0x00	; 0
    43f8:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <gpio_read_pin>
    43fc:	81 30       	cpi	r24, 0x01	; 1
    43fe:	29 f4       	brne	.+10     	; 0x440a <test_sensor+0x28>
		odometry_stop(HARD_STOP);
    4400:	83 e5       	ldi	r24, 0x53	; 83
    4402:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <odometry_stop>
		return 1;
    4406:	81 e0       	ldi	r24, 0x01	; 1
    4408:	01 c0       	rjmp	.+2      	; 0x440c <test_sensor+0x2a>
	}

	return 0;
    440a:	80 e0       	ldi	r24, 0x00	; 0
}
    440c:	0f 90       	pop	r0
    440e:	0f 90       	pop	r0
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	df 91       	pop	r29
    4416:	cf 91       	pop	r28
    4418:	08 95       	ret

0000441a <wait_while_detection_tactic_one>:

/*
 * 	Function: static void wait_while_detection_tactic_one(void)
 * 	Description: This will wait until the callback(sensor) is returning 1, so called detecting the enemy
 */
static void wait_while_detection_tactic_one(void) {
    441a:	cf 93       	push	r28
    441c:	df 93       	push	r29
    441e:	cd b7       	in	r28, 0x3d	; 61
    4420:	de b7       	in	r29, 0x3e	; 62
    4422:	6c 97       	sbiw	r28, 0x1c	; 28
    4424:	0f b6       	in	r0, 0x3f	; 63
    4426:	f8 94       	cli
    4428:	de bf       	out	0x3e, r29	; 62
    442a:	0f be       	out	0x3f, r0	; 63
    442c:	cd bf       	out	0x3d, r28	; 61
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	a8 e4       	ldi	r26, 0x48	; 72
    4434:	b3 e4       	ldi	r27, 0x43	; 67
    4436:	89 83       	std	Y+1, r24	; 0x01
    4438:	9a 83       	std	Y+2, r25	; 0x02
    443a:	ab 83       	std	Y+3, r26	; 0x03
    443c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    443e:	20 e0       	ldi	r18, 0x00	; 0
    4440:	30 e4       	ldi	r19, 0x40	; 64
    4442:	4c e1       	ldi	r20, 0x1C	; 28
    4444:	55 e4       	ldi	r21, 0x45	; 69
    4446:	69 81       	ldd	r22, Y+1	; 0x01
    4448:	7a 81       	ldd	r23, Y+2	; 0x02
    444a:	8b 81       	ldd	r24, Y+3	; 0x03
    444c:	9c 81       	ldd	r25, Y+4	; 0x04
    444e:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    4452:	dc 01       	movw	r26, r24
    4454:	cb 01       	movw	r24, r22
    4456:	8d 83       	std	Y+5, r24	; 0x05
    4458:	9e 83       	std	Y+6, r25	; 0x06
    445a:	af 83       	std	Y+7, r26	; 0x07
    445c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    445e:	20 e0       	ldi	r18, 0x00	; 0
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	40 e8       	ldi	r20, 0x80	; 128
    4464:	5f e3       	ldi	r21, 0x3F	; 63
    4466:	6d 81       	ldd	r22, Y+5	; 0x05
    4468:	7e 81       	ldd	r23, Y+6	; 0x06
    446a:	8f 81       	ldd	r24, Y+7	; 0x07
    446c:	98 85       	ldd	r25, Y+8	; 0x08
    446e:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    4472:	88 23       	and	r24, r24
    4474:	2c f4       	brge	.+10     	; 0x4480 <wait_while_detection_tactic_one+0x66>
		__ticks = 1;
    4476:	81 e0       	ldi	r24, 0x01	; 1
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	9a 87       	std	Y+10, r25	; 0x0a
    447c:	89 87       	std	Y+9, r24	; 0x09
    447e:	3f c0       	rjmp	.+126    	; 0x44fe <wait_while_detection_tactic_one+0xe4>
	else if (__tmp > 65535)
    4480:	20 e0       	ldi	r18, 0x00	; 0
    4482:	3f ef       	ldi	r19, 0xFF	; 255
    4484:	4f e7       	ldi	r20, 0x7F	; 127
    4486:	57 e4       	ldi	r21, 0x47	; 71
    4488:	6d 81       	ldd	r22, Y+5	; 0x05
    448a:	7e 81       	ldd	r23, Y+6	; 0x06
    448c:	8f 81       	ldd	r24, Y+7	; 0x07
    448e:	98 85       	ldd	r25, Y+8	; 0x08
    4490:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    4494:	18 16       	cp	r1, r24
    4496:	4c f5       	brge	.+82     	; 0x44ea <wait_while_detection_tactic_one+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4498:	20 e0       	ldi	r18, 0x00	; 0
    449a:	30 e0       	ldi	r19, 0x00	; 0
    449c:	40 e2       	ldi	r20, 0x20	; 32
    449e:	51 e4       	ldi	r21, 0x41	; 65
    44a0:	69 81       	ldd	r22, Y+1	; 0x01
    44a2:	7a 81       	ldd	r23, Y+2	; 0x02
    44a4:	8b 81       	ldd	r24, Y+3	; 0x03
    44a6:	9c 81       	ldd	r25, Y+4	; 0x04
    44a8:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    44ac:	dc 01       	movw	r26, r24
    44ae:	cb 01       	movw	r24, r22
    44b0:	bc 01       	movw	r22, r24
    44b2:	cd 01       	movw	r24, r26
    44b4:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    44b8:	dc 01       	movw	r26, r24
    44ba:	cb 01       	movw	r24, r22
    44bc:	9a 87       	std	Y+10, r25	; 0x0a
    44be:	89 87       	std	Y+9, r24	; 0x09
    44c0:	0f c0       	rjmp	.+30     	; 0x44e0 <wait_while_detection_tactic_one+0xc6>
    44c2:	8a ef       	ldi	r24, 0xFA	; 250
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	9c 87       	std	Y+12, r25	; 0x0c
    44c8:	8b 87       	std	Y+11, r24	; 0x0b
    44ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    44cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    44ce:	01 97       	sbiw	r24, 0x01	; 1
    44d0:	f1 f7       	brne	.-4      	; 0x44ce <wait_while_detection_tactic_one+0xb4>
    44d2:	9c 87       	std	Y+12, r25	; 0x0c
    44d4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d6:	89 85       	ldd	r24, Y+9	; 0x09
    44d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    44da:	01 97       	sbiw	r24, 0x01	; 1
    44dc:	9a 87       	std	Y+10, r25	; 0x0a
    44de:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e0:	89 85       	ldd	r24, Y+9	; 0x09
    44e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e4:	89 2b       	or	r24, r25
    44e6:	69 f7       	brne	.-38     	; 0x44c2 <wait_while_detection_tactic_one+0xa8>
    44e8:	14 c0       	rjmp	.+40     	; 0x4512 <wait_while_detection_tactic_one+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ea:	6d 81       	ldd	r22, Y+5	; 0x05
    44ec:	7e 81       	ldd	r23, Y+6	; 0x06
    44ee:	8f 81       	ldd	r24, Y+7	; 0x07
    44f0:	98 85       	ldd	r25, Y+8	; 0x08
    44f2:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    44f6:	dc 01       	movw	r26, r24
    44f8:	cb 01       	movw	r24, r22
    44fa:	9a 87       	std	Y+10, r25	; 0x0a
    44fc:	89 87       	std	Y+9, r24	; 0x09
    44fe:	89 85       	ldd	r24, Y+9	; 0x09
    4500:	9a 85       	ldd	r25, Y+10	; 0x0a
    4502:	9e 87       	std	Y+14, r25	; 0x0e
    4504:	8d 87       	std	Y+13, r24	; 0x0d
    4506:	8d 85       	ldd	r24, Y+13	; 0x0d
    4508:	9e 85       	ldd	r25, Y+14	; 0x0e
    450a:	01 97       	sbiw	r24, 0x01	; 1
    450c:	f1 f7       	brne	.-4      	; 0x450a <wait_while_detection_tactic_one+0xf0>
    450e:	9e 87       	std	Y+14, r25	; 0x0e
    4510:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(200);
	while(TACTIC_ONE_POSITION[current_position].callback(0) == 1)
    4512:	72 c0       	rjmp	.+228    	; 0x45f8 <wait_while_detection_tactic_one+0x1de>
    4514:	80 e0       	ldi	r24, 0x00	; 0
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	a0 e2       	ldi	r26, 0x20	; 32
    451a:	b1 e4       	ldi	r27, 0x41	; 65
    451c:	8f 87       	std	Y+15, r24	; 0x0f
    451e:	98 8b       	std	Y+16, r25	; 0x10
    4520:	a9 8b       	std	Y+17, r26	; 0x11
    4522:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	30 e4       	ldi	r19, 0x40	; 64
    4528:	4c e1       	ldi	r20, 0x1C	; 28
    452a:	55 e4       	ldi	r21, 0x45	; 69
    452c:	6f 85       	ldd	r22, Y+15	; 0x0f
    452e:	78 89       	ldd	r23, Y+16	; 0x10
    4530:	89 89       	ldd	r24, Y+17	; 0x11
    4532:	9a 89       	ldd	r25, Y+18	; 0x12
    4534:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	8b 8b       	std	Y+19, r24	; 0x13
    453e:	9c 8b       	std	Y+20, r25	; 0x14
    4540:	ad 8b       	std	Y+21, r26	; 0x15
    4542:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4544:	20 e0       	ldi	r18, 0x00	; 0
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	40 e8       	ldi	r20, 0x80	; 128
    454a:	5f e3       	ldi	r21, 0x3F	; 63
    454c:	6b 89       	ldd	r22, Y+19	; 0x13
    454e:	7c 89       	ldd	r23, Y+20	; 0x14
    4550:	8d 89       	ldd	r24, Y+21	; 0x15
    4552:	9e 89       	ldd	r25, Y+22	; 0x16
    4554:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    4558:	88 23       	and	r24, r24
    455a:	2c f4       	brge	.+10     	; 0x4566 <wait_while_detection_tactic_one+0x14c>
		__ticks = 1;
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	98 8f       	std	Y+24, r25	; 0x18
    4562:	8f 8b       	std	Y+23, r24	; 0x17
    4564:	3f c0       	rjmp	.+126    	; 0x45e4 <wait_while_detection_tactic_one+0x1ca>
	else if (__tmp > 65535)
    4566:	20 e0       	ldi	r18, 0x00	; 0
    4568:	3f ef       	ldi	r19, 0xFF	; 255
    456a:	4f e7       	ldi	r20, 0x7F	; 127
    456c:	57 e4       	ldi	r21, 0x47	; 71
    456e:	6b 89       	ldd	r22, Y+19	; 0x13
    4570:	7c 89       	ldd	r23, Y+20	; 0x14
    4572:	8d 89       	ldd	r24, Y+21	; 0x15
    4574:	9e 89       	ldd	r25, Y+22	; 0x16
    4576:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    457a:	18 16       	cp	r1, r24
    457c:	4c f5       	brge	.+82     	; 0x45d0 <wait_while_detection_tactic_one+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	40 e2       	ldi	r20, 0x20	; 32
    4584:	51 e4       	ldi	r21, 0x41	; 65
    4586:	6f 85       	ldd	r22, Y+15	; 0x0f
    4588:	78 89       	ldd	r23, Y+16	; 0x10
    458a:	89 89       	ldd	r24, Y+17	; 0x11
    458c:	9a 89       	ldd	r25, Y+18	; 0x12
    458e:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	bc 01       	movw	r22, r24
    4598:	cd 01       	movw	r24, r26
    459a:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    459e:	dc 01       	movw	r26, r24
    45a0:	cb 01       	movw	r24, r22
    45a2:	98 8f       	std	Y+24, r25	; 0x18
    45a4:	8f 8b       	std	Y+23, r24	; 0x17
    45a6:	0f c0       	rjmp	.+30     	; 0x45c6 <wait_while_detection_tactic_one+0x1ac>
    45a8:	8a ef       	ldi	r24, 0xFA	; 250
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	9a 8f       	std	Y+26, r25	; 0x1a
    45ae:	89 8f       	std	Y+25, r24	; 0x19
    45b0:	89 8d       	ldd	r24, Y+25	; 0x19
    45b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    45b4:	01 97       	sbiw	r24, 0x01	; 1
    45b6:	f1 f7       	brne	.-4      	; 0x45b4 <wait_while_detection_tactic_one+0x19a>
    45b8:	9a 8f       	std	Y+26, r25	; 0x1a
    45ba:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45bc:	8f 89       	ldd	r24, Y+23	; 0x17
    45be:	98 8d       	ldd	r25, Y+24	; 0x18
    45c0:	01 97       	sbiw	r24, 0x01	; 1
    45c2:	98 8f       	std	Y+24, r25	; 0x18
    45c4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c6:	8f 89       	ldd	r24, Y+23	; 0x17
    45c8:	98 8d       	ldd	r25, Y+24	; 0x18
    45ca:	89 2b       	or	r24, r25
    45cc:	69 f7       	brne	.-38     	; 0x45a8 <wait_while_detection_tactic_one+0x18e>
    45ce:	14 c0       	rjmp	.+40     	; 0x45f8 <wait_while_detection_tactic_one+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45d0:	6b 89       	ldd	r22, Y+19	; 0x13
    45d2:	7c 89       	ldd	r23, Y+20	; 0x14
    45d4:	8d 89       	ldd	r24, Y+21	; 0x15
    45d6:	9e 89       	ldd	r25, Y+22	; 0x16
    45d8:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	98 8f       	std	Y+24, r25	; 0x18
    45e2:	8f 8b       	std	Y+23, r24	; 0x17
    45e4:	8f 89       	ldd	r24, Y+23	; 0x17
    45e6:	98 8d       	ldd	r25, Y+24	; 0x18
    45e8:	9c 8f       	std	Y+28, r25	; 0x1c
    45ea:	8b 8f       	std	Y+27, r24	; 0x1b
    45ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	f1 f7       	brne	.-4      	; 0x45f0 <wait_while_detection_tactic_one+0x1d6>
    45f4:	9c 8f       	std	Y+28, r25	; 0x1c
    45f6:	8b 8f       	std	Y+27, r24	; 0x1b
    45f8:	80 91 df 01 	lds	r24, 0x01DF
    45fc:	28 2f       	mov	r18, r24
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	4b e0       	ldi	r20, 0x0B	; 11
    4602:	42 9f       	mul	r20, r18
    4604:	c0 01       	movw	r24, r0
    4606:	43 9f       	mul	r20, r19
    4608:	90 0d       	add	r25, r0
    460a:	11 24       	eor	r1, r1
    460c:	8c 58       	subi	r24, 0x8C	; 140
    460e:	9e 4f       	sbci	r25, 0xFE	; 254
    4610:	fc 01       	movw	r30, r24
    4612:	20 81       	ld	r18, Z
    4614:	31 81       	ldd	r19, Z+1	; 0x01
    4616:	60 e0       	ldi	r22, 0x00	; 0
    4618:	70 e0       	ldi	r23, 0x00	; 0
    461a:	cb 01       	movw	r24, r22
    461c:	f9 01       	movw	r30, r18
    461e:	09 95       	icall
    4620:	81 30       	cpi	r24, 0x01	; 1
    4622:	09 f4       	brne	.+2      	; 0x4626 <wait_while_detection_tactic_one+0x20c>
    4624:	77 cf       	rjmp	.-274    	; 0x4514 <wait_while_detection_tactic_one+0xfa>
		_delay_ms(10);
	next_position = current_position;
    4626:	80 91 df 01 	lds	r24, 0x01DF
    462a:	80 93 e0 01 	sts	0x01E0, r24
	active_state = TACTIC_ONE;
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	80 93 6a 01 	sts	0x016A, r24

}
    4634:	6c 96       	adiw	r28, 0x1c	; 28
    4636:	0f b6       	in	r0, 0x3f	; 63
    4638:	f8 94       	cli
    463a:	de bf       	out	0x3e, r29	; 62
    463c:	0f be       	out	0x3f, r0	; 63
    463e:	cd bf       	out	0x3d, r28	; 61
    4640:	df 91       	pop	r29
    4642:	cf 91       	pop	r28
    4644:	08 95       	ret

00004646 <darkside>:

void darkside(void) {
    4646:	cf 93       	push	r28
    4648:	df 93       	push	r29
    464a:	cd b7       	in	r28, 0x3d	; 61
    464c:	de b7       	in	r29, 0x3e	; 62
    464e:	a3 97       	sbiw	r28, 0x23	; 35
    4650:	0f b6       	in	r0, 0x3f	; 63
    4652:	f8 94       	cli
    4654:	de bf       	out	0x3e, r29	; 62
    4656:	0f be       	out	0x3f, r0	; 63
    4658:	cd bf       	out	0x3d, r28	; 61


	// setting the starting position
	struct odometry_position startingPosition; startingPosition.x = 0; startingPosition.y = 0; startingPosition.angle = 0;
    465a:	1e 8e       	std	Y+30, r1	; 0x1e
    465c:	1d 8e       	std	Y+29, r1	; 0x1d
    465e:	18 a2       	std	Y+32, r1	; 0x20
    4660:	1f 8e       	std	Y+31, r1	; 0x1f
    4662:	1a a2       	std	Y+34, r1	; 0x22
    4664:	19 a2       	std	Y+33, r1	; 0x21

	// sending the starting position to odometry
	odometry_set_position(&startingPosition);
    4666:	ce 01       	movw	r24, r28
    4668:	4d 96       	adiw	r24, 0x1d	; 29
    466a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <odometry_set_position>

	while(1) {
		switch(active_state) {
    466e:	80 91 6a 01 	lds	r24, 0x016A
    4672:	88 2f       	mov	r24, r24
    4674:	90 e0       	ldi	r25, 0x00	; 0
    4676:	81 30       	cpi	r24, 0x01	; 1
    4678:	91 05       	cpc	r25, r1
    467a:	09 f4       	brne	.+2      	; 0x467e <darkside+0x38>
    467c:	8f c0       	rjmp	.+286    	; 0x479c <darkside+0x156>
    467e:	83 35       	cpi	r24, 0x53	; 83
    4680:	91 05       	cpc	r25, r1
    4682:	91 f0       	breq	.+36     	; 0x46a8 <darkside+0x62>
    4684:	89 2b       	or	r24, r25
    4686:	09 f0       	breq	.+2      	; 0x468a <darkside+0x44>
    4688:	59 c1       	rjmp	.+690    	; 0x493c <darkside+0x2f6>
		case COLLISION:		// COLLISION
			if(current_position == 0) {
    468a:	80 91 df 01 	lds	r24, 0x01DF
    468e:	88 23       	and	r24, r24
    4690:	19 f4       	brne	.+6      	; 0x4698 <darkside+0x52>
				wait_while_detection_tactic_one();
    4692:	0e 94 0d 22 	call	0x441a	; 0x441a <wait_while_detection_tactic_one>
				break;
    4696:	52 c1       	rjmp	.+676    	; 0x493c <darkside+0x2f6>
			} else if(current_position == 1) {
    4698:	80 91 df 01 	lds	r24, 0x01DF
    469c:	81 30       	cpi	r24, 0x01	; 1
    469e:	19 f4       	brne	.+6      	; 0x46a6 <darkside+0x60>
				wait_while_detection_tactic_one();
    46a0:	0e 94 0d 22 	call	0x441a	; 0x441a <wait_while_detection_tactic_one>
				break;
    46a4:	4b c1       	rjmp	.+662    	; 0x493c <darkside+0x2f6>
			}

			break;
    46a6:	4a c1       	rjmp	.+660    	; 0x493c <darkside+0x2f6>
    46a8:	80 e0       	ldi	r24, 0x00	; 0
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	aa e7       	ldi	r26, 0x7A	; 122
    46ae:	b4 e4       	ldi	r27, 0x44	; 68
    46b0:	89 83       	std	Y+1, r24	; 0x01
    46b2:	9a 83       	std	Y+2, r25	; 0x02
    46b4:	ab 83       	std	Y+3, r26	; 0x03
    46b6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    46b8:	20 e0       	ldi	r18, 0x00	; 0
    46ba:	30 e4       	ldi	r19, 0x40	; 64
    46bc:	4c e1       	ldi	r20, 0x1C	; 28
    46be:	55 e4       	ldi	r21, 0x45	; 69
    46c0:	69 81       	ldd	r22, Y+1	; 0x01
    46c2:	7a 81       	ldd	r23, Y+2	; 0x02
    46c4:	8b 81       	ldd	r24, Y+3	; 0x03
    46c6:	9c 81       	ldd	r25, Y+4	; 0x04
    46c8:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    46cc:	dc 01       	movw	r26, r24
    46ce:	cb 01       	movw	r24, r22
    46d0:	8d 83       	std	Y+5, r24	; 0x05
    46d2:	9e 83       	std	Y+6, r25	; 0x06
    46d4:	af 83       	std	Y+7, r26	; 0x07
    46d6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    46d8:	20 e0       	ldi	r18, 0x00	; 0
    46da:	30 e0       	ldi	r19, 0x00	; 0
    46dc:	40 e8       	ldi	r20, 0x80	; 128
    46de:	5f e3       	ldi	r21, 0x3F	; 63
    46e0:	6d 81       	ldd	r22, Y+5	; 0x05
    46e2:	7e 81       	ldd	r23, Y+6	; 0x06
    46e4:	8f 81       	ldd	r24, Y+7	; 0x07
    46e6:	98 85       	ldd	r25, Y+8	; 0x08
    46e8:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    46ec:	88 23       	and	r24, r24
    46ee:	2c f4       	brge	.+10     	; 0x46fa <darkside+0xb4>
		__ticks = 1;
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	9a 87       	std	Y+10, r25	; 0x0a
    46f6:	89 87       	std	Y+9, r24	; 0x09
    46f8:	3f c0       	rjmp	.+126    	; 0x4778 <darkside+0x132>
	else if (__tmp > 65535)
    46fa:	20 e0       	ldi	r18, 0x00	; 0
    46fc:	3f ef       	ldi	r19, 0xFF	; 255
    46fe:	4f e7       	ldi	r20, 0x7F	; 127
    4700:	57 e4       	ldi	r21, 0x47	; 71
    4702:	6d 81       	ldd	r22, Y+5	; 0x05
    4704:	7e 81       	ldd	r23, Y+6	; 0x06
    4706:	8f 81       	ldd	r24, Y+7	; 0x07
    4708:	98 85       	ldd	r25, Y+8	; 0x08
    470a:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    470e:	18 16       	cp	r1, r24
    4710:	4c f5       	brge	.+82     	; 0x4764 <darkside+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	40 e2       	ldi	r20, 0x20	; 32
    4718:	51 e4       	ldi	r21, 0x41	; 65
    471a:	69 81       	ldd	r22, Y+1	; 0x01
    471c:	7a 81       	ldd	r23, Y+2	; 0x02
    471e:	8b 81       	ldd	r24, Y+3	; 0x03
    4720:	9c 81       	ldd	r25, Y+4	; 0x04
    4722:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    4726:	dc 01       	movw	r26, r24
    4728:	cb 01       	movw	r24, r22
    472a:	bc 01       	movw	r22, r24
    472c:	cd 01       	movw	r24, r26
    472e:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    4732:	dc 01       	movw	r26, r24
    4734:	cb 01       	movw	r24, r22
    4736:	9a 87       	std	Y+10, r25	; 0x0a
    4738:	89 87       	std	Y+9, r24	; 0x09
    473a:	0f c0       	rjmp	.+30     	; 0x475a <darkside+0x114>
    473c:	8a ef       	ldi	r24, 0xFA	; 250
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	9c 87       	std	Y+12, r25	; 0x0c
    4742:	8b 87       	std	Y+11, r24	; 0x0b
    4744:	8b 85       	ldd	r24, Y+11	; 0x0b
    4746:	9c 85       	ldd	r25, Y+12	; 0x0c
    4748:	01 97       	sbiw	r24, 0x01	; 1
    474a:	f1 f7       	brne	.-4      	; 0x4748 <darkside+0x102>
    474c:	9c 87       	std	Y+12, r25	; 0x0c
    474e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4750:	89 85       	ldd	r24, Y+9	; 0x09
    4752:	9a 85       	ldd	r25, Y+10	; 0x0a
    4754:	01 97       	sbiw	r24, 0x01	; 1
    4756:	9a 87       	std	Y+10, r25	; 0x0a
    4758:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    475a:	89 85       	ldd	r24, Y+9	; 0x09
    475c:	9a 85       	ldd	r25, Y+10	; 0x0a
    475e:	89 2b       	or	r24, r25
    4760:	69 f7       	brne	.-38     	; 0x473c <darkside+0xf6>
    4762:	14 c0       	rjmp	.+40     	; 0x478c <darkside+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4764:	6d 81       	ldd	r22, Y+5	; 0x05
    4766:	7e 81       	ldd	r23, Y+6	; 0x06
    4768:	8f 81       	ldd	r24, Y+7	; 0x07
    476a:	98 85       	ldd	r25, Y+8	; 0x08
    476c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    4770:	dc 01       	movw	r26, r24
    4772:	cb 01       	movw	r24, r22
    4774:	9a 87       	std	Y+10, r25	; 0x0a
    4776:	89 87       	std	Y+9, r24	; 0x09
    4778:	89 85       	ldd	r24, Y+9	; 0x09
    477a:	9a 85       	ldd	r25, Y+10	; 0x0a
    477c:	9e 87       	std	Y+14, r25	; 0x0e
    477e:	8d 87       	std	Y+13, r24	; 0x0d
    4780:	8d 85       	ldd	r24, Y+13	; 0x0d
    4782:	9e 85       	ldd	r25, Y+14	; 0x0e
    4784:	01 97       	sbiw	r24, 0x01	; 1
    4786:	f1 f7       	brne	.-4      	; 0x4784 <darkside+0x13e>
    4788:	9e 87       	std	Y+14, r25	; 0x0e
    478a:	8d 87       	std	Y+13, r24	; 0x0d
		case STUCK:			// STUCK
			_delay_ms(1000);
			active_state = TACTIC_ONE;
    478c:	81 e0       	ldi	r24, 0x01	; 1
    478e:	80 93 6a 01 	sts	0x016A, r24
			next_position = current_position;
    4792:	80 91 df 01 	lds	r24, 0x01DF
    4796:	80 93 e0 01 	sts	0x01E0, r24

			break;
    479a:	d0 c0       	rjmp	.+416    	; 0x493c <darkside+0x2f6>
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    479c:	80 91 e0 01 	lds	r24, 0x01E0
    47a0:	80 93 df 01 	sts	0x01DF, r24
    47a4:	c6 c0       	rjmp	.+396    	; 0x4932 <darkside+0x2ec>

				// send the gotoField and receive status
				odometry_status = odometry_move_to_position(&TACTIC_ONE_POSITION[current_position].point, TACTIC_ONE_POSITION[current_position].speed, TACTIC_ONE_POSITION[current_position].direction, TACTIC_ONE_POSITION[current_position].callback);
    47a6:	80 91 df 01 	lds	r24, 0x01DF
    47aa:	28 2f       	mov	r18, r24
    47ac:	30 e0       	ldi	r19, 0x00	; 0
    47ae:	4b e0       	ldi	r20, 0x0B	; 11
    47b0:	42 9f       	mul	r20, r18
    47b2:	c0 01       	movw	r24, r0
    47b4:	43 9f       	mul	r20, r19
    47b6:	90 0d       	add	r25, r0
    47b8:	11 24       	eor	r1, r1
    47ba:	8c 58       	subi	r24, 0x8C	; 140
    47bc:	9e 4f       	sbci	r25, 0xFE	; 254
    47be:	dc 01       	movw	r26, r24
    47c0:	4d 91       	ld	r20, X+
    47c2:	5c 91       	ld	r21, X
    47c4:	80 91 df 01 	lds	r24, 0x01DF
    47c8:	28 2f       	mov	r18, r24
    47ca:	30 e0       	ldi	r19, 0x00	; 0
    47cc:	6b e0       	ldi	r22, 0x0B	; 11
    47ce:	62 9f       	mul	r22, r18
    47d0:	c0 01       	movw	r24, r0
    47d2:	63 9f       	mul	r22, r19
    47d4:	90 0d       	add	r25, r0
    47d6:	11 24       	eor	r1, r1
    47d8:	8d 58       	subi	r24, 0x8D	; 141
    47da:	9e 4f       	sbci	r25, 0xFE	; 254
    47dc:	dc 01       	movw	r26, r24
    47de:	ec 91       	ld	r30, X
    47e0:	80 91 df 01 	lds	r24, 0x01DF
    47e4:	28 2f       	mov	r18, r24
    47e6:	30 e0       	ldi	r19, 0x00	; 0
    47e8:	6b e0       	ldi	r22, 0x0B	; 11
    47ea:	62 9f       	mul	r22, r18
    47ec:	c0 01       	movw	r24, r0
    47ee:	63 9f       	mul	r22, r19
    47f0:	90 0d       	add	r25, r0
    47f2:	11 24       	eor	r1, r1
    47f4:	8e 58       	subi	r24, 0x8E	; 142
    47f6:	9e 4f       	sbci	r25, 0xFE	; 254
    47f8:	dc 01       	movw	r26, r24
    47fa:	7c 91       	ld	r23, X
    47fc:	80 91 df 01 	lds	r24, 0x01DF
    4800:	28 2f       	mov	r18, r24
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	6b e0       	ldi	r22, 0x0B	; 11
    4806:	62 9f       	mul	r22, r18
    4808:	c0 01       	movw	r24, r0
    480a:	63 9f       	mul	r22, r19
    480c:	90 0d       	add	r25, r0
    480e:	11 24       	eor	r1, r1
    4810:	85 59       	subi	r24, 0x95	; 149
    4812:	9e 4f       	sbci	r25, 0xFE	; 254
    4814:	9a 01       	movw	r18, r20
    4816:	4e 2f       	mov	r20, r30
    4818:	67 2f       	mov	r22, r23
    481a:	0e 94 94 10 	call	0x2128	; 0x2128 <odometry_move_to_position>
    481e:	80 93 6c 02 	sts	0x026C, r24

				// if odometry fails set state to collision
				if(odometry_status == ODOMETRY_FAIL)
    4822:	80 91 6c 02 	lds	r24, 0x026C
    4826:	81 30       	cpi	r24, 0x01	; 1
    4828:	19 f4       	brne	.+6      	; 0x4830 <darkside+0x1ea>
				{
					active_state = COLLISION;
    482a:	10 92 6a 01 	sts	0x016A, r1
					break;
    482e:	86 c0       	rjmp	.+268    	; 0x493c <darkside+0x2f6>
				}
				else if(odometry_status == ODOMETRY_STUCK)
				{

				}
				if(current_position == 0) {
    4830:	80 91 df 01 	lds	r24, 0x01DF
    4834:	88 23       	and	r24, r24
    4836:	09 f0       	breq	.+2      	; 0x483a <darkside+0x1f4>
    4838:	72 c0       	rjmp	.+228    	; 0x491e <darkside+0x2d8>
    483a:	80 e0       	ldi	r24, 0x00	; 0
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	aa ef       	ldi	r26, 0xFA	; 250
    4840:	b4 e4       	ldi	r27, 0x44	; 68
    4842:	8f 87       	std	Y+15, r24	; 0x0f
    4844:	98 8b       	std	Y+16, r25	; 0x10
    4846:	a9 8b       	std	Y+17, r26	; 0x11
    4848:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    484a:	20 e0       	ldi	r18, 0x00	; 0
    484c:	30 e4       	ldi	r19, 0x40	; 64
    484e:	4c e1       	ldi	r20, 0x1C	; 28
    4850:	55 e4       	ldi	r21, 0x45	; 69
    4852:	6f 85       	ldd	r22, Y+15	; 0x0f
    4854:	78 89       	ldd	r23, Y+16	; 0x10
    4856:	89 89       	ldd	r24, Y+17	; 0x11
    4858:	9a 89       	ldd	r25, Y+18	; 0x12
    485a:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    485e:	dc 01       	movw	r26, r24
    4860:	cb 01       	movw	r24, r22
    4862:	8b 8b       	std	Y+19, r24	; 0x13
    4864:	9c 8b       	std	Y+20, r25	; 0x14
    4866:	ad 8b       	std	Y+21, r26	; 0x15
    4868:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    486a:	20 e0       	ldi	r18, 0x00	; 0
    486c:	30 e0       	ldi	r19, 0x00	; 0
    486e:	40 e8       	ldi	r20, 0x80	; 128
    4870:	5f e3       	ldi	r21, 0x3F	; 63
    4872:	6b 89       	ldd	r22, Y+19	; 0x13
    4874:	7c 89       	ldd	r23, Y+20	; 0x14
    4876:	8d 89       	ldd	r24, Y+21	; 0x15
    4878:	9e 89       	ldd	r25, Y+22	; 0x16
    487a:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    487e:	88 23       	and	r24, r24
    4880:	2c f4       	brge	.+10     	; 0x488c <darkside+0x246>
		__ticks = 1;
    4882:	81 e0       	ldi	r24, 0x01	; 1
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	98 8f       	std	Y+24, r25	; 0x18
    4888:	8f 8b       	std	Y+23, r24	; 0x17
    488a:	3f c0       	rjmp	.+126    	; 0x490a <darkside+0x2c4>
	else if (__tmp > 65535)
    488c:	20 e0       	ldi	r18, 0x00	; 0
    488e:	3f ef       	ldi	r19, 0xFF	; 255
    4890:	4f e7       	ldi	r20, 0x7F	; 127
    4892:	57 e4       	ldi	r21, 0x47	; 71
    4894:	6b 89       	ldd	r22, Y+19	; 0x13
    4896:	7c 89       	ldd	r23, Y+20	; 0x14
    4898:	8d 89       	ldd	r24, Y+21	; 0x15
    489a:	9e 89       	ldd	r25, Y+22	; 0x16
    489c:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    48a0:	18 16       	cp	r1, r24
    48a2:	4c f5       	brge	.+82     	; 0x48f6 <darkside+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48a4:	20 e0       	ldi	r18, 0x00	; 0
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	40 e2       	ldi	r20, 0x20	; 32
    48aa:	51 e4       	ldi	r21, 0x41	; 65
    48ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    48ae:	78 89       	ldd	r23, Y+16	; 0x10
    48b0:	89 89       	ldd	r24, Y+17	; 0x11
    48b2:	9a 89       	ldd	r25, Y+18	; 0x12
    48b4:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    48b8:	dc 01       	movw	r26, r24
    48ba:	cb 01       	movw	r24, r22
    48bc:	bc 01       	movw	r22, r24
    48be:	cd 01       	movw	r24, r26
    48c0:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    48c4:	dc 01       	movw	r26, r24
    48c6:	cb 01       	movw	r24, r22
    48c8:	98 8f       	std	Y+24, r25	; 0x18
    48ca:	8f 8b       	std	Y+23, r24	; 0x17
    48cc:	0f c0       	rjmp	.+30     	; 0x48ec <darkside+0x2a6>
    48ce:	8a ef       	ldi	r24, 0xFA	; 250
    48d0:	90 e0       	ldi	r25, 0x00	; 0
    48d2:	9a 8f       	std	Y+26, r25	; 0x1a
    48d4:	89 8f       	std	Y+25, r24	; 0x19
    48d6:	89 8d       	ldd	r24, Y+25	; 0x19
    48d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    48da:	01 97       	sbiw	r24, 0x01	; 1
    48dc:	f1 f7       	brne	.-4      	; 0x48da <darkside+0x294>
    48de:	9a 8f       	std	Y+26, r25	; 0x1a
    48e0:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48e2:	8f 89       	ldd	r24, Y+23	; 0x17
    48e4:	98 8d       	ldd	r25, Y+24	; 0x18
    48e6:	01 97       	sbiw	r24, 0x01	; 1
    48e8:	98 8f       	std	Y+24, r25	; 0x18
    48ea:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ec:	8f 89       	ldd	r24, Y+23	; 0x17
    48ee:	98 8d       	ldd	r25, Y+24	; 0x18
    48f0:	89 2b       	or	r24, r25
    48f2:	69 f7       	brne	.-38     	; 0x48ce <darkside+0x288>
    48f4:	14 c0       	rjmp	.+40     	; 0x491e <darkside+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48f6:	6b 89       	ldd	r22, Y+19	; 0x13
    48f8:	7c 89       	ldd	r23, Y+20	; 0x14
    48fa:	8d 89       	ldd	r24, Y+21	; 0x15
    48fc:	9e 89       	ldd	r25, Y+22	; 0x16
    48fe:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    4902:	dc 01       	movw	r26, r24
    4904:	cb 01       	movw	r24, r22
    4906:	98 8f       	std	Y+24, r25	; 0x18
    4908:	8f 8b       	std	Y+23, r24	; 0x17
    490a:	8f 89       	ldd	r24, Y+23	; 0x17
    490c:	98 8d       	ldd	r25, Y+24	; 0x18
    490e:	9c 8f       	std	Y+28, r25	; 0x1c
    4910:	8b 8f       	std	Y+27, r24	; 0x1b
    4912:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4914:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4916:	01 97       	sbiw	r24, 0x01	; 1
    4918:	f1 f7       	brne	.-4      	; 0x4916 <darkside+0x2d0>
    491a:	9c 8f       	std	Y+28, r25	; 0x1c
    491c:	8b 8f       	std	Y+27, r24	; 0x1b
					_delay_ms(2000);
				}
				// last position
				if(current_position == (TACTIC_ONE_POSITION_COUNT - 1))
    491e:	80 91 df 01 	lds	r24, 0x01DF
    4922:	81 30       	cpi	r24, 0x01	; 1
    4924:	09 f4       	brne	.+2      	; 0x4928 <darkside+0x2e2>
				{
					while(1);
    4926:	ff cf       	rjmp	.-2      	; 0x4926 <darkside+0x2e0>
			active_state = TACTIC_ONE;
			next_position = current_position;

			break;
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    4928:	80 91 df 01 	lds	r24, 0x01DF
    492c:	8f 5f       	subi	r24, 0xFF	; 255
    492e:	80 93 df 01 	sts	0x01DF, r24
    4932:	80 91 df 01 	lds	r24, 0x01DF
    4936:	82 30       	cpi	r24, 0x02	; 2
    4938:	08 f4       	brcc	.+2      	; 0x493c <darkside+0x2f6>
    493a:	35 cf       	rjmp	.-406    	; 0x47a6 <darkside+0x160>
				{
					while(1);
				}
			}//end of for
		}//end of switch
	}//end of while
    493c:	98 ce       	rjmp	.-720    	; 0x466e <darkside+0x28>

0000493e <main>:
#include "can.h"
#include <avr/interrupt.h>


int main()
{
    493e:	cf 93       	push	r28
    4940:	df 93       	push	r29
    4942:	cd b7       	in	r28, 0x3d	; 61
    4944:	de b7       	in	r29, 0x3e	; 62
    4946:	a9 97       	sbiw	r28, 0x29	; 41
    4948:	0f b6       	in	r0, 0x3f	; 63
    494a:	f8 94       	cli
    494c:	de bf       	out	0x3e, r29	; 62
    494e:	0f be       	out	0x3f, r0	; 63
    4950:	cd bf       	out	0x3d, r28	; 61


	system_init();
    4952:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <system_init>
    4956:	84 e0       	ldi	r24, 0x04	; 4
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	9a 83       	std	Y+2, r25	; 0x02
    495c:	89 83       	std	Y+1, r24	; 0x01
	{
	#ifdef USART1_RS485_MODE
		___DDR(RS485_CONTROL1_IOPORTNAME) |= (1<<RS485_CONTROL1_PIN); // default pin state is low
	#endif
		
		UBRR1L_REGISTER = (uint8_t) ubrr_value;
    495e:	8c ec       	ldi	r24, 0xCC	; 204
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	29 81       	ldd	r18, Y+1	; 0x01
    4964:	fc 01       	movw	r30, r24
    4966:	20 83       	st	Z, r18
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR1H_REGISTER = (ubrr_value>>8);
    4968:	8d ec       	ldi	r24, 0xCD	; 205
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	29 81       	ldd	r18, Y+1	; 0x01
    496e:	3a 81       	ldd	r19, Y+2	; 0x02
    4970:	23 2f       	mov	r18, r19
    4972:	33 27       	eor	r19, r19
    4974:	fc 01       	movw	r30, r24
    4976:	20 83       	st	Z, r18
		#endif
	#elif defined(USART1_MPCM_MODE)
		UCSR1A_REGISTER |= (1<<MPCM1_BIT);
	#endif
		
		UCSR1B_REGISTER = USART1_CONFIG_B;
    4978:	89 ec       	ldi	r24, 0xC9	; 201
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	28 e9       	ldi	r18, 0x98	; 152
    497e:	fc 01       	movw	r30, r24
    4980:	20 83       	st	Z, r18

	uart1_init(BAUD_CALC(115200));

	sei();
    4982:	78 94       	sei

	while(1) {

		uart1_puts("We are sending shit");
    4984:	81 e8       	ldi	r24, 0x81	; 129
    4986:	91 e0       	ldi	r25, 0x01	; 1
    4988:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart1_putstr>

		char buffer[25];

		uart1_gets(buffer, 25);
    498c:	ce 01       	movw	r24, r28
    498e:	41 96       	adiw	r24, 0x11	; 17
    4990:	69 e1       	ldi	r22, 0x19	; 25
    4992:	0e 94 00 20 	call	0x4000	; 0x4000 <uart1_gets>

		uart1_puts("We got: ");
    4996:	85 e9       	ldi	r24, 0x95	; 149
    4998:	91 e0       	ldi	r25, 0x01	; 1
    499a:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart1_putstr>

		uart1_putstr(buffer);
    499e:	ce 01       	movw	r24, r28
    49a0:	41 96       	adiw	r24, 0x11	; 17
    49a2:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <uart1_putstr>
    49a6:	80 e0       	ldi	r24, 0x00	; 0
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	aa e7       	ldi	r26, 0x7A	; 122
    49ac:	b4 e4       	ldi	r27, 0x44	; 68
    49ae:	8b 83       	std	Y+3, r24	; 0x03
    49b0:	9c 83       	std	Y+4, r25	; 0x04
    49b2:	ad 83       	std	Y+5, r26	; 0x05
    49b4:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    49b6:	20 e0       	ldi	r18, 0x00	; 0
    49b8:	30 e4       	ldi	r19, 0x40	; 64
    49ba:	4c e1       	ldi	r20, 0x1C	; 28
    49bc:	55 e4       	ldi	r21, 0x45	; 69
    49be:	6b 81       	ldd	r22, Y+3	; 0x03
    49c0:	7c 81       	ldd	r23, Y+4	; 0x04
    49c2:	8d 81       	ldd	r24, Y+5	; 0x05
    49c4:	9e 81       	ldd	r25, Y+6	; 0x06
    49c6:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    49ca:	dc 01       	movw	r26, r24
    49cc:	cb 01       	movw	r24, r22
    49ce:	8f 83       	std	Y+7, r24	; 0x07
    49d0:	98 87       	std	Y+8, r25	; 0x08
    49d2:	a9 87       	std	Y+9, r26	; 0x09
    49d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49d6:	20 e0       	ldi	r18, 0x00	; 0
    49d8:	30 e0       	ldi	r19, 0x00	; 0
    49da:	40 e8       	ldi	r20, 0x80	; 128
    49dc:	5f e3       	ldi	r21, 0x3F	; 63
    49de:	6f 81       	ldd	r22, Y+7	; 0x07
    49e0:	78 85       	ldd	r23, Y+8	; 0x08
    49e2:	89 85       	ldd	r24, Y+9	; 0x09
    49e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    49e6:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    49ea:	88 23       	and	r24, r24
    49ec:	2c f4       	brge	.+10     	; 0x49f8 <main+0xba>
		__ticks = 1;
    49ee:	81 e0       	ldi	r24, 0x01	; 1
    49f0:	90 e0       	ldi	r25, 0x00	; 0
    49f2:	9c 87       	std	Y+12, r25	; 0x0c
    49f4:	8b 87       	std	Y+11, r24	; 0x0b
    49f6:	3f c0       	rjmp	.+126    	; 0x4a76 <main+0x138>
	else if (__tmp > 65535)
    49f8:	20 e0       	ldi	r18, 0x00	; 0
    49fa:	3f ef       	ldi	r19, 0xFF	; 255
    49fc:	4f e7       	ldi	r20, 0x7F	; 127
    49fe:	57 e4       	ldi	r21, 0x47	; 71
    4a00:	6f 81       	ldd	r22, Y+7	; 0x07
    4a02:	78 85       	ldd	r23, Y+8	; 0x08
    4a04:	89 85       	ldd	r24, Y+9	; 0x09
    4a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a08:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__gesf2>
    4a0c:	18 16       	cp	r1, r24
    4a0e:	4c f5       	brge	.+82     	; 0x4a62 <main+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a10:	20 e0       	ldi	r18, 0x00	; 0
    4a12:	30 e0       	ldi	r19, 0x00	; 0
    4a14:	40 e2       	ldi	r20, 0x20	; 32
    4a16:	51 e4       	ldi	r21, 0x41	; 65
    4a18:	6b 81       	ldd	r22, Y+3	; 0x03
    4a1a:	7c 81       	ldd	r23, Y+4	; 0x04
    4a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    4a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    4a20:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    4a24:	dc 01       	movw	r26, r24
    4a26:	cb 01       	movw	r24, r22
    4a28:	bc 01       	movw	r22, r24
    4a2a:	cd 01       	movw	r24, r26
    4a2c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    4a30:	dc 01       	movw	r26, r24
    4a32:	cb 01       	movw	r24, r22
    4a34:	9c 87       	std	Y+12, r25	; 0x0c
    4a36:	8b 87       	std	Y+11, r24	; 0x0b
    4a38:	0f c0       	rjmp	.+30     	; 0x4a58 <main+0x11a>
    4a3a:	8a ef       	ldi	r24, 0xFA	; 250
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	9e 87       	std	Y+14, r25	; 0x0e
    4a40:	8d 87       	std	Y+13, r24	; 0x0d
    4a42:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a44:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a46:	01 97       	sbiw	r24, 0x01	; 1
    4a48:	f1 f7       	brne	.-4      	; 0x4a46 <main+0x108>
    4a4a:	9e 87       	std	Y+14, r25	; 0x0e
    4a4c:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a50:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a52:	01 97       	sbiw	r24, 0x01	; 1
    4a54:	9c 87       	std	Y+12, r25	; 0x0c
    4a56:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a58:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a5c:	89 2b       	or	r24, r25
    4a5e:	69 f7       	brne	.-38     	; 0x4a3a <main+0xfc>
    4a60:	14 c0       	rjmp	.+40     	; 0x4a8a <main+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a62:	6f 81       	ldd	r22, Y+7	; 0x07
    4a64:	78 85       	ldd	r23, Y+8	; 0x08
    4a66:	89 85       	ldd	r24, Y+9	; 0x09
    4a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a6a:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__fixunssfsi>
    4a6e:	dc 01       	movw	r26, r24
    4a70:	cb 01       	movw	r24, r22
    4a72:	9c 87       	std	Y+12, r25	; 0x0c
    4a74:	8b 87       	std	Y+11, r24	; 0x0b
    4a76:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a78:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a7a:	98 8b       	std	Y+16, r25	; 0x10
    4a7c:	8f 87       	std	Y+15, r24	; 0x0f
    4a7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a80:	98 89       	ldd	r25, Y+16	; 0x10
    4a82:	01 97       	sbiw	r24, 0x01	; 1
    4a84:	f1 f7       	brne	.-4      	; 0x4a82 <main+0x144>
    4a86:	98 8b       	std	Y+16, r25	; 0x10
    4a88:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1000);
	}
    4a8a:	7c cf       	rjmp	.-264    	; 0x4984 <main+0x46>

00004a8c <__subsf3>:
    4a8c:	50 58       	subi	r21, 0x80	; 128

00004a8e <__addsf3>:
    4a8e:	bb 27       	eor	r27, r27
    4a90:	aa 27       	eor	r26, r26
    4a92:	0e 94 5e 25 	call	0x4abc	; 0x4abc <__addsf3x>
    4a96:	0c 94 d1 26 	jmp	0x4da2	; 0x4da2 <__fp_round>
    4a9a:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__fp_pscA>
    4a9e:	38 f0       	brcs	.+14     	; 0x4aae <__addsf3+0x20>
    4aa0:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__fp_pscB>
    4aa4:	20 f0       	brcs	.+8      	; 0x4aae <__addsf3+0x20>
    4aa6:	39 f4       	brne	.+14     	; 0x4ab6 <__addsf3+0x28>
    4aa8:	9f 3f       	cpi	r25, 0xFF	; 255
    4aaa:	19 f4       	brne	.+6      	; 0x4ab2 <__addsf3+0x24>
    4aac:	26 f4       	brtc	.+8      	; 0x4ab6 <__addsf3+0x28>
    4aae:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__fp_nan>
    4ab2:	0e f4       	brtc	.+2      	; 0x4ab6 <__addsf3+0x28>
    4ab4:	e0 95       	com	r30
    4ab6:	e7 fb       	bst	r30, 7
    4ab8:	0c 94 ba 26 	jmp	0x4d74	; 0x4d74 <__fp_inf>

00004abc <__addsf3x>:
    4abc:	e9 2f       	mov	r30, r25
    4abe:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <__fp_split3>
    4ac2:	58 f3       	brcs	.-42     	; 0x4a9a <__addsf3+0xc>
    4ac4:	ba 17       	cp	r27, r26
    4ac6:	62 07       	cpc	r22, r18
    4ac8:	73 07       	cpc	r23, r19
    4aca:	84 07       	cpc	r24, r20
    4acc:	95 07       	cpc	r25, r21
    4ace:	20 f0       	brcs	.+8      	; 0x4ad8 <__addsf3x+0x1c>
    4ad0:	79 f4       	brne	.+30     	; 0x4af0 <__addsf3x+0x34>
    4ad2:	a6 f5       	brtc	.+104    	; 0x4b3c <__addsf3x+0x80>
    4ad4:	0c 94 04 27 	jmp	0x4e08	; 0x4e08 <__fp_zero>
    4ad8:	0e f4       	brtc	.+2      	; 0x4adc <__addsf3x+0x20>
    4ada:	e0 95       	com	r30
    4adc:	0b 2e       	mov	r0, r27
    4ade:	ba 2f       	mov	r27, r26
    4ae0:	a0 2d       	mov	r26, r0
    4ae2:	0b 01       	movw	r0, r22
    4ae4:	b9 01       	movw	r22, r18
    4ae6:	90 01       	movw	r18, r0
    4ae8:	0c 01       	movw	r0, r24
    4aea:	ca 01       	movw	r24, r20
    4aec:	a0 01       	movw	r20, r0
    4aee:	11 24       	eor	r1, r1
    4af0:	ff 27       	eor	r31, r31
    4af2:	59 1b       	sub	r21, r25
    4af4:	99 f0       	breq	.+38     	; 0x4b1c <__addsf3x+0x60>
    4af6:	59 3f       	cpi	r21, 0xF9	; 249
    4af8:	50 f4       	brcc	.+20     	; 0x4b0e <__addsf3x+0x52>
    4afa:	50 3e       	cpi	r21, 0xE0	; 224
    4afc:	68 f1       	brcs	.+90     	; 0x4b58 <__addsf3x+0x9c>
    4afe:	1a 16       	cp	r1, r26
    4b00:	f0 40       	sbci	r31, 0x00	; 0
    4b02:	a2 2f       	mov	r26, r18
    4b04:	23 2f       	mov	r18, r19
    4b06:	34 2f       	mov	r19, r20
    4b08:	44 27       	eor	r20, r20
    4b0a:	58 5f       	subi	r21, 0xF8	; 248
    4b0c:	f3 cf       	rjmp	.-26     	; 0x4af4 <__addsf3x+0x38>
    4b0e:	46 95       	lsr	r20
    4b10:	37 95       	ror	r19
    4b12:	27 95       	ror	r18
    4b14:	a7 95       	ror	r26
    4b16:	f0 40       	sbci	r31, 0x00	; 0
    4b18:	53 95       	inc	r21
    4b1a:	c9 f7       	brne	.-14     	; 0x4b0e <__addsf3x+0x52>
    4b1c:	7e f4       	brtc	.+30     	; 0x4b3c <__addsf3x+0x80>
    4b1e:	1f 16       	cp	r1, r31
    4b20:	ba 0b       	sbc	r27, r26
    4b22:	62 0b       	sbc	r22, r18
    4b24:	73 0b       	sbc	r23, r19
    4b26:	84 0b       	sbc	r24, r20
    4b28:	ba f0       	brmi	.+46     	; 0x4b58 <__addsf3x+0x9c>
    4b2a:	91 50       	subi	r25, 0x01	; 1
    4b2c:	a1 f0       	breq	.+40     	; 0x4b56 <__addsf3x+0x9a>
    4b2e:	ff 0f       	add	r31, r31
    4b30:	bb 1f       	adc	r27, r27
    4b32:	66 1f       	adc	r22, r22
    4b34:	77 1f       	adc	r23, r23
    4b36:	88 1f       	adc	r24, r24
    4b38:	c2 f7       	brpl	.-16     	; 0x4b2a <__addsf3x+0x6e>
    4b3a:	0e c0       	rjmp	.+28     	; 0x4b58 <__addsf3x+0x9c>
    4b3c:	ba 0f       	add	r27, r26
    4b3e:	62 1f       	adc	r22, r18
    4b40:	73 1f       	adc	r23, r19
    4b42:	84 1f       	adc	r24, r20
    4b44:	48 f4       	brcc	.+18     	; 0x4b58 <__addsf3x+0x9c>
    4b46:	87 95       	ror	r24
    4b48:	77 95       	ror	r23
    4b4a:	67 95       	ror	r22
    4b4c:	b7 95       	ror	r27
    4b4e:	f7 95       	ror	r31
    4b50:	9e 3f       	cpi	r25, 0xFE	; 254
    4b52:	08 f0       	brcs	.+2      	; 0x4b56 <__addsf3x+0x9a>
    4b54:	b0 cf       	rjmp	.-160    	; 0x4ab6 <__addsf3+0x28>
    4b56:	93 95       	inc	r25
    4b58:	88 0f       	add	r24, r24
    4b5a:	08 f0       	brcs	.+2      	; 0x4b5e <__addsf3x+0xa2>
    4b5c:	99 27       	eor	r25, r25
    4b5e:	ee 0f       	add	r30, r30
    4b60:	97 95       	ror	r25
    4b62:	87 95       	ror	r24
    4b64:	08 95       	ret

00004b66 <__cmpsf2>:
    4b66:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__fp_cmp>
    4b6a:	08 f4       	brcc	.+2      	; 0x4b6e <__cmpsf2+0x8>
    4b6c:	81 e0       	ldi	r24, 0x01	; 1
    4b6e:	08 95       	ret

00004b70 <__divsf3>:
    4b70:	0e 94 cc 25 	call	0x4b98	; 0x4b98 <__divsf3x>
    4b74:	0c 94 d1 26 	jmp	0x4da2	; 0x4da2 <__fp_round>
    4b78:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__fp_pscB>
    4b7c:	58 f0       	brcs	.+22     	; 0x4b94 <__divsf3+0x24>
    4b7e:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__fp_pscA>
    4b82:	40 f0       	brcs	.+16     	; 0x4b94 <__divsf3+0x24>
    4b84:	29 f4       	brne	.+10     	; 0x4b90 <__divsf3+0x20>
    4b86:	5f 3f       	cpi	r21, 0xFF	; 255
    4b88:	29 f0       	breq	.+10     	; 0x4b94 <__divsf3+0x24>
    4b8a:	0c 94 ba 26 	jmp	0x4d74	; 0x4d74 <__fp_inf>
    4b8e:	51 11       	cpse	r21, r1
    4b90:	0c 94 05 27 	jmp	0x4e0a	; 0x4e0a <__fp_szero>
    4b94:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__fp_nan>

00004b98 <__divsf3x>:
    4b98:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <__fp_split3>
    4b9c:	68 f3       	brcs	.-38     	; 0x4b78 <__divsf3+0x8>

00004b9e <__divsf3_pse>:
    4b9e:	99 23       	and	r25, r25
    4ba0:	b1 f3       	breq	.-20     	; 0x4b8e <__divsf3+0x1e>
    4ba2:	55 23       	and	r21, r21
    4ba4:	91 f3       	breq	.-28     	; 0x4b8a <__divsf3+0x1a>
    4ba6:	95 1b       	sub	r25, r21
    4ba8:	55 0b       	sbc	r21, r21
    4baa:	bb 27       	eor	r27, r27
    4bac:	aa 27       	eor	r26, r26
    4bae:	62 17       	cp	r22, r18
    4bb0:	73 07       	cpc	r23, r19
    4bb2:	84 07       	cpc	r24, r20
    4bb4:	38 f0       	brcs	.+14     	; 0x4bc4 <__divsf3_pse+0x26>
    4bb6:	9f 5f       	subi	r25, 0xFF	; 255
    4bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    4bba:	22 0f       	add	r18, r18
    4bbc:	33 1f       	adc	r19, r19
    4bbe:	44 1f       	adc	r20, r20
    4bc0:	aa 1f       	adc	r26, r26
    4bc2:	a9 f3       	breq	.-22     	; 0x4bae <__divsf3_pse+0x10>
    4bc4:	35 d0       	rcall	.+106    	; 0x4c30 <__divsf3_pse+0x92>
    4bc6:	0e 2e       	mov	r0, r30
    4bc8:	3a f0       	brmi	.+14     	; 0x4bd8 <__divsf3_pse+0x3a>
    4bca:	e0 e8       	ldi	r30, 0x80	; 128
    4bcc:	32 d0       	rcall	.+100    	; 0x4c32 <__divsf3_pse+0x94>
    4bce:	91 50       	subi	r25, 0x01	; 1
    4bd0:	50 40       	sbci	r21, 0x00	; 0
    4bd2:	e6 95       	lsr	r30
    4bd4:	00 1c       	adc	r0, r0
    4bd6:	ca f7       	brpl	.-14     	; 0x4bca <__divsf3_pse+0x2c>
    4bd8:	2b d0       	rcall	.+86     	; 0x4c30 <__divsf3_pse+0x92>
    4bda:	fe 2f       	mov	r31, r30
    4bdc:	29 d0       	rcall	.+82     	; 0x4c30 <__divsf3_pse+0x92>
    4bde:	66 0f       	add	r22, r22
    4be0:	77 1f       	adc	r23, r23
    4be2:	88 1f       	adc	r24, r24
    4be4:	bb 1f       	adc	r27, r27
    4be6:	26 17       	cp	r18, r22
    4be8:	37 07       	cpc	r19, r23
    4bea:	48 07       	cpc	r20, r24
    4bec:	ab 07       	cpc	r26, r27
    4bee:	b0 e8       	ldi	r27, 0x80	; 128
    4bf0:	09 f0       	breq	.+2      	; 0x4bf4 <__divsf3_pse+0x56>
    4bf2:	bb 0b       	sbc	r27, r27
    4bf4:	80 2d       	mov	r24, r0
    4bf6:	bf 01       	movw	r22, r30
    4bf8:	ff 27       	eor	r31, r31
    4bfa:	93 58       	subi	r25, 0x83	; 131
    4bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    4bfe:	3a f0       	brmi	.+14     	; 0x4c0e <__divsf3_pse+0x70>
    4c00:	9e 3f       	cpi	r25, 0xFE	; 254
    4c02:	51 05       	cpc	r21, r1
    4c04:	78 f0       	brcs	.+30     	; 0x4c24 <__divsf3_pse+0x86>
    4c06:	0c 94 ba 26 	jmp	0x4d74	; 0x4d74 <__fp_inf>
    4c0a:	0c 94 05 27 	jmp	0x4e0a	; 0x4e0a <__fp_szero>
    4c0e:	5f 3f       	cpi	r21, 0xFF	; 255
    4c10:	e4 f3       	brlt	.-8      	; 0x4c0a <__divsf3_pse+0x6c>
    4c12:	98 3e       	cpi	r25, 0xE8	; 232
    4c14:	d4 f3       	brlt	.-12     	; 0x4c0a <__divsf3_pse+0x6c>
    4c16:	86 95       	lsr	r24
    4c18:	77 95       	ror	r23
    4c1a:	67 95       	ror	r22
    4c1c:	b7 95       	ror	r27
    4c1e:	f7 95       	ror	r31
    4c20:	9f 5f       	subi	r25, 0xFF	; 255
    4c22:	c9 f7       	brne	.-14     	; 0x4c16 <__divsf3_pse+0x78>
    4c24:	88 0f       	add	r24, r24
    4c26:	91 1d       	adc	r25, r1
    4c28:	96 95       	lsr	r25
    4c2a:	87 95       	ror	r24
    4c2c:	97 f9       	bld	r25, 7
    4c2e:	08 95       	ret
    4c30:	e1 e0       	ldi	r30, 0x01	; 1
    4c32:	66 0f       	add	r22, r22
    4c34:	77 1f       	adc	r23, r23
    4c36:	88 1f       	adc	r24, r24
    4c38:	bb 1f       	adc	r27, r27
    4c3a:	62 17       	cp	r22, r18
    4c3c:	73 07       	cpc	r23, r19
    4c3e:	84 07       	cpc	r24, r20
    4c40:	ba 07       	cpc	r27, r26
    4c42:	20 f0       	brcs	.+8      	; 0x4c4c <__divsf3_pse+0xae>
    4c44:	62 1b       	sub	r22, r18
    4c46:	73 0b       	sbc	r23, r19
    4c48:	84 0b       	sbc	r24, r20
    4c4a:	ba 0b       	sbc	r27, r26
    4c4c:	ee 1f       	adc	r30, r30
    4c4e:	88 f7       	brcc	.-30     	; 0x4c32 <__divsf3_pse+0x94>
    4c50:	e0 95       	com	r30
    4c52:	08 95       	ret

00004c54 <__fixunssfsi>:
    4c54:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <__fp_splitA>
    4c58:	88 f0       	brcs	.+34     	; 0x4c7c <__fixunssfsi+0x28>
    4c5a:	9f 57       	subi	r25, 0x7F	; 127
    4c5c:	98 f0       	brcs	.+38     	; 0x4c84 <__fixunssfsi+0x30>
    4c5e:	b9 2f       	mov	r27, r25
    4c60:	99 27       	eor	r25, r25
    4c62:	b7 51       	subi	r27, 0x17	; 23
    4c64:	b0 f0       	brcs	.+44     	; 0x4c92 <__fixunssfsi+0x3e>
    4c66:	e1 f0       	breq	.+56     	; 0x4ca0 <__fixunssfsi+0x4c>
    4c68:	66 0f       	add	r22, r22
    4c6a:	77 1f       	adc	r23, r23
    4c6c:	88 1f       	adc	r24, r24
    4c6e:	99 1f       	adc	r25, r25
    4c70:	1a f0       	brmi	.+6      	; 0x4c78 <__fixunssfsi+0x24>
    4c72:	ba 95       	dec	r27
    4c74:	c9 f7       	brne	.-14     	; 0x4c68 <__fixunssfsi+0x14>
    4c76:	14 c0       	rjmp	.+40     	; 0x4ca0 <__fixunssfsi+0x4c>
    4c78:	b1 30       	cpi	r27, 0x01	; 1
    4c7a:	91 f0       	breq	.+36     	; 0x4ca0 <__fixunssfsi+0x4c>
    4c7c:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__fp_zero>
    4c80:	b1 e0       	ldi	r27, 0x01	; 1
    4c82:	08 95       	ret
    4c84:	0c 94 04 27 	jmp	0x4e08	; 0x4e08 <__fp_zero>
    4c88:	67 2f       	mov	r22, r23
    4c8a:	78 2f       	mov	r23, r24
    4c8c:	88 27       	eor	r24, r24
    4c8e:	b8 5f       	subi	r27, 0xF8	; 248
    4c90:	39 f0       	breq	.+14     	; 0x4ca0 <__fixunssfsi+0x4c>
    4c92:	b9 3f       	cpi	r27, 0xF9	; 249
    4c94:	cc f3       	brlt	.-14     	; 0x4c88 <__fixunssfsi+0x34>
    4c96:	86 95       	lsr	r24
    4c98:	77 95       	ror	r23
    4c9a:	67 95       	ror	r22
    4c9c:	b3 95       	inc	r27
    4c9e:	d9 f7       	brne	.-10     	; 0x4c96 <__fixunssfsi+0x42>
    4ca0:	3e f4       	brtc	.+14     	; 0x4cb0 <__fixunssfsi+0x5c>
    4ca2:	90 95       	com	r25
    4ca4:	80 95       	com	r24
    4ca6:	70 95       	com	r23
    4ca8:	61 95       	neg	r22
    4caa:	7f 4f       	sbci	r23, 0xFF	; 255
    4cac:	8f 4f       	sbci	r24, 0xFF	; 255
    4cae:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb0:	08 95       	ret

00004cb2 <__floatunsisf>:
    4cb2:	e8 94       	clt
    4cb4:	09 c0       	rjmp	.+18     	; 0x4cc8 <__floatsisf+0x12>

00004cb6 <__floatsisf>:
    4cb6:	97 fb       	bst	r25, 7
    4cb8:	3e f4       	brtc	.+14     	; 0x4cc8 <__floatsisf+0x12>
    4cba:	90 95       	com	r25
    4cbc:	80 95       	com	r24
    4cbe:	70 95       	com	r23
    4cc0:	61 95       	neg	r22
    4cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    4cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    4cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    4cc8:	99 23       	and	r25, r25
    4cca:	a9 f0       	breq	.+42     	; 0x4cf6 <__floatsisf+0x40>
    4ccc:	f9 2f       	mov	r31, r25
    4cce:	96 e9       	ldi	r25, 0x96	; 150
    4cd0:	bb 27       	eor	r27, r27
    4cd2:	93 95       	inc	r25
    4cd4:	f6 95       	lsr	r31
    4cd6:	87 95       	ror	r24
    4cd8:	77 95       	ror	r23
    4cda:	67 95       	ror	r22
    4cdc:	b7 95       	ror	r27
    4cde:	f1 11       	cpse	r31, r1
    4ce0:	f8 cf       	rjmp	.-16     	; 0x4cd2 <__floatsisf+0x1c>
    4ce2:	fa f4       	brpl	.+62     	; 0x4d22 <__floatsisf+0x6c>
    4ce4:	bb 0f       	add	r27, r27
    4ce6:	11 f4       	brne	.+4      	; 0x4cec <__floatsisf+0x36>
    4ce8:	60 ff       	sbrs	r22, 0
    4cea:	1b c0       	rjmp	.+54     	; 0x4d22 <__floatsisf+0x6c>
    4cec:	6f 5f       	subi	r22, 0xFF	; 255
    4cee:	7f 4f       	sbci	r23, 0xFF	; 255
    4cf0:	8f 4f       	sbci	r24, 0xFF	; 255
    4cf2:	9f 4f       	sbci	r25, 0xFF	; 255
    4cf4:	16 c0       	rjmp	.+44     	; 0x4d22 <__floatsisf+0x6c>
    4cf6:	88 23       	and	r24, r24
    4cf8:	11 f0       	breq	.+4      	; 0x4cfe <__floatsisf+0x48>
    4cfa:	96 e9       	ldi	r25, 0x96	; 150
    4cfc:	11 c0       	rjmp	.+34     	; 0x4d20 <__floatsisf+0x6a>
    4cfe:	77 23       	and	r23, r23
    4d00:	21 f0       	breq	.+8      	; 0x4d0a <__floatsisf+0x54>
    4d02:	9e e8       	ldi	r25, 0x8E	; 142
    4d04:	87 2f       	mov	r24, r23
    4d06:	76 2f       	mov	r23, r22
    4d08:	05 c0       	rjmp	.+10     	; 0x4d14 <__floatsisf+0x5e>
    4d0a:	66 23       	and	r22, r22
    4d0c:	71 f0       	breq	.+28     	; 0x4d2a <__floatsisf+0x74>
    4d0e:	96 e8       	ldi	r25, 0x86	; 134
    4d10:	86 2f       	mov	r24, r22
    4d12:	70 e0       	ldi	r23, 0x00	; 0
    4d14:	60 e0       	ldi	r22, 0x00	; 0
    4d16:	2a f0       	brmi	.+10     	; 0x4d22 <__floatsisf+0x6c>
    4d18:	9a 95       	dec	r25
    4d1a:	66 0f       	add	r22, r22
    4d1c:	77 1f       	adc	r23, r23
    4d1e:	88 1f       	adc	r24, r24
    4d20:	da f7       	brpl	.-10     	; 0x4d18 <__floatsisf+0x62>
    4d22:	88 0f       	add	r24, r24
    4d24:	96 95       	lsr	r25
    4d26:	87 95       	ror	r24
    4d28:	97 f9       	bld	r25, 7
    4d2a:	08 95       	ret

00004d2c <__fp_cmp>:
    4d2c:	99 0f       	add	r25, r25
    4d2e:	00 08       	sbc	r0, r0
    4d30:	55 0f       	add	r21, r21
    4d32:	aa 0b       	sbc	r26, r26
    4d34:	e0 e8       	ldi	r30, 0x80	; 128
    4d36:	fe ef       	ldi	r31, 0xFE	; 254
    4d38:	16 16       	cp	r1, r22
    4d3a:	17 06       	cpc	r1, r23
    4d3c:	e8 07       	cpc	r30, r24
    4d3e:	f9 07       	cpc	r31, r25
    4d40:	c0 f0       	brcs	.+48     	; 0x4d72 <__fp_cmp+0x46>
    4d42:	12 16       	cp	r1, r18
    4d44:	13 06       	cpc	r1, r19
    4d46:	e4 07       	cpc	r30, r20
    4d48:	f5 07       	cpc	r31, r21
    4d4a:	98 f0       	brcs	.+38     	; 0x4d72 <__fp_cmp+0x46>
    4d4c:	62 1b       	sub	r22, r18
    4d4e:	73 0b       	sbc	r23, r19
    4d50:	84 0b       	sbc	r24, r20
    4d52:	95 0b       	sbc	r25, r21
    4d54:	39 f4       	brne	.+14     	; 0x4d64 <__fp_cmp+0x38>
    4d56:	0a 26       	eor	r0, r26
    4d58:	61 f0       	breq	.+24     	; 0x4d72 <__fp_cmp+0x46>
    4d5a:	23 2b       	or	r18, r19
    4d5c:	24 2b       	or	r18, r20
    4d5e:	25 2b       	or	r18, r21
    4d60:	21 f4       	brne	.+8      	; 0x4d6a <__fp_cmp+0x3e>
    4d62:	08 95       	ret
    4d64:	0a 26       	eor	r0, r26
    4d66:	09 f4       	brne	.+2      	; 0x4d6a <__fp_cmp+0x3e>
    4d68:	a1 40       	sbci	r26, 0x01	; 1
    4d6a:	a6 95       	lsr	r26
    4d6c:	8f ef       	ldi	r24, 0xFF	; 255
    4d6e:	81 1d       	adc	r24, r1
    4d70:	81 1d       	adc	r24, r1
    4d72:	08 95       	ret

00004d74 <__fp_inf>:
    4d74:	97 f9       	bld	r25, 7
    4d76:	9f 67       	ori	r25, 0x7F	; 127
    4d78:	80 e8       	ldi	r24, 0x80	; 128
    4d7a:	70 e0       	ldi	r23, 0x00	; 0
    4d7c:	60 e0       	ldi	r22, 0x00	; 0
    4d7e:	08 95       	ret

00004d80 <__fp_nan>:
    4d80:	9f ef       	ldi	r25, 0xFF	; 255
    4d82:	80 ec       	ldi	r24, 0xC0	; 192
    4d84:	08 95       	ret

00004d86 <__fp_pscA>:
    4d86:	00 24       	eor	r0, r0
    4d88:	0a 94       	dec	r0
    4d8a:	16 16       	cp	r1, r22
    4d8c:	17 06       	cpc	r1, r23
    4d8e:	18 06       	cpc	r1, r24
    4d90:	09 06       	cpc	r0, r25
    4d92:	08 95       	ret

00004d94 <__fp_pscB>:
    4d94:	00 24       	eor	r0, r0
    4d96:	0a 94       	dec	r0
    4d98:	12 16       	cp	r1, r18
    4d9a:	13 06       	cpc	r1, r19
    4d9c:	14 06       	cpc	r1, r20
    4d9e:	05 06       	cpc	r0, r21
    4da0:	08 95       	ret

00004da2 <__fp_round>:
    4da2:	09 2e       	mov	r0, r25
    4da4:	03 94       	inc	r0
    4da6:	00 0c       	add	r0, r0
    4da8:	11 f4       	brne	.+4      	; 0x4dae <__fp_round+0xc>
    4daa:	88 23       	and	r24, r24
    4dac:	52 f0       	brmi	.+20     	; 0x4dc2 <__fp_round+0x20>
    4dae:	bb 0f       	add	r27, r27
    4db0:	40 f4       	brcc	.+16     	; 0x4dc2 <__fp_round+0x20>
    4db2:	bf 2b       	or	r27, r31
    4db4:	11 f4       	brne	.+4      	; 0x4dba <__fp_round+0x18>
    4db6:	60 ff       	sbrs	r22, 0
    4db8:	04 c0       	rjmp	.+8      	; 0x4dc2 <__fp_round+0x20>
    4dba:	6f 5f       	subi	r22, 0xFF	; 255
    4dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    4dbe:	8f 4f       	sbci	r24, 0xFF	; 255
    4dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    4dc2:	08 95       	ret

00004dc4 <__fp_split3>:
    4dc4:	57 fd       	sbrc	r21, 7
    4dc6:	90 58       	subi	r25, 0x80	; 128
    4dc8:	44 0f       	add	r20, r20
    4dca:	55 1f       	adc	r21, r21
    4dcc:	59 f0       	breq	.+22     	; 0x4de4 <__fp_splitA+0x10>
    4dce:	5f 3f       	cpi	r21, 0xFF	; 255
    4dd0:	71 f0       	breq	.+28     	; 0x4dee <__fp_splitA+0x1a>
    4dd2:	47 95       	ror	r20

00004dd4 <__fp_splitA>:
    4dd4:	88 0f       	add	r24, r24
    4dd6:	97 fb       	bst	r25, 7
    4dd8:	99 1f       	adc	r25, r25
    4dda:	61 f0       	breq	.+24     	; 0x4df4 <__fp_splitA+0x20>
    4ddc:	9f 3f       	cpi	r25, 0xFF	; 255
    4dde:	79 f0       	breq	.+30     	; 0x4dfe <__fp_splitA+0x2a>
    4de0:	87 95       	ror	r24
    4de2:	08 95       	ret
    4de4:	12 16       	cp	r1, r18
    4de6:	13 06       	cpc	r1, r19
    4de8:	14 06       	cpc	r1, r20
    4dea:	55 1f       	adc	r21, r21
    4dec:	f2 cf       	rjmp	.-28     	; 0x4dd2 <__fp_split3+0xe>
    4dee:	46 95       	lsr	r20
    4df0:	f1 df       	rcall	.-30     	; 0x4dd4 <__fp_splitA>
    4df2:	08 c0       	rjmp	.+16     	; 0x4e04 <__fp_splitA+0x30>
    4df4:	16 16       	cp	r1, r22
    4df6:	17 06       	cpc	r1, r23
    4df8:	18 06       	cpc	r1, r24
    4dfa:	99 1f       	adc	r25, r25
    4dfc:	f1 cf       	rjmp	.-30     	; 0x4de0 <__fp_splitA+0xc>
    4dfe:	86 95       	lsr	r24
    4e00:	71 05       	cpc	r23, r1
    4e02:	61 05       	cpc	r22, r1
    4e04:	08 94       	sec
    4e06:	08 95       	ret

00004e08 <__fp_zero>:
    4e08:	e8 94       	clt

00004e0a <__fp_szero>:
    4e0a:	bb 27       	eor	r27, r27
    4e0c:	66 27       	eor	r22, r22
    4e0e:	77 27       	eor	r23, r23
    4e10:	cb 01       	movw	r24, r22
    4e12:	97 f9       	bld	r25, 7
    4e14:	08 95       	ret

00004e16 <__gesf2>:
    4e16:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <__fp_cmp>
    4e1a:	08 f4       	brcc	.+2      	; 0x4e1e <__gesf2+0x8>
    4e1c:	8f ef       	ldi	r24, 0xFF	; 255
    4e1e:	08 95       	ret

00004e20 <__mulsf3>:
    4e20:	0e 94 23 27 	call	0x4e46	; 0x4e46 <__mulsf3x>
    4e24:	0c 94 d1 26 	jmp	0x4da2	; 0x4da2 <__fp_round>
    4e28:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__fp_pscA>
    4e2c:	38 f0       	brcs	.+14     	; 0x4e3c <__mulsf3+0x1c>
    4e2e:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <__fp_pscB>
    4e32:	20 f0       	brcs	.+8      	; 0x4e3c <__mulsf3+0x1c>
    4e34:	95 23       	and	r25, r21
    4e36:	11 f0       	breq	.+4      	; 0x4e3c <__mulsf3+0x1c>
    4e38:	0c 94 ba 26 	jmp	0x4d74	; 0x4d74 <__fp_inf>
    4e3c:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__fp_nan>
    4e40:	11 24       	eor	r1, r1
    4e42:	0c 94 05 27 	jmp	0x4e0a	; 0x4e0a <__fp_szero>

00004e46 <__mulsf3x>:
    4e46:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <__fp_split3>
    4e4a:	70 f3       	brcs	.-36     	; 0x4e28 <__mulsf3+0x8>

00004e4c <__mulsf3_pse>:
    4e4c:	95 9f       	mul	r25, r21
    4e4e:	c1 f3       	breq	.-16     	; 0x4e40 <__mulsf3+0x20>
    4e50:	95 0f       	add	r25, r21
    4e52:	50 e0       	ldi	r21, 0x00	; 0
    4e54:	55 1f       	adc	r21, r21
    4e56:	62 9f       	mul	r22, r18
    4e58:	f0 01       	movw	r30, r0
    4e5a:	72 9f       	mul	r23, r18
    4e5c:	bb 27       	eor	r27, r27
    4e5e:	f0 0d       	add	r31, r0
    4e60:	b1 1d       	adc	r27, r1
    4e62:	63 9f       	mul	r22, r19
    4e64:	aa 27       	eor	r26, r26
    4e66:	f0 0d       	add	r31, r0
    4e68:	b1 1d       	adc	r27, r1
    4e6a:	aa 1f       	adc	r26, r26
    4e6c:	64 9f       	mul	r22, r20
    4e6e:	66 27       	eor	r22, r22
    4e70:	b0 0d       	add	r27, r0
    4e72:	a1 1d       	adc	r26, r1
    4e74:	66 1f       	adc	r22, r22
    4e76:	82 9f       	mul	r24, r18
    4e78:	22 27       	eor	r18, r18
    4e7a:	b0 0d       	add	r27, r0
    4e7c:	a1 1d       	adc	r26, r1
    4e7e:	62 1f       	adc	r22, r18
    4e80:	73 9f       	mul	r23, r19
    4e82:	b0 0d       	add	r27, r0
    4e84:	a1 1d       	adc	r26, r1
    4e86:	62 1f       	adc	r22, r18
    4e88:	83 9f       	mul	r24, r19
    4e8a:	a0 0d       	add	r26, r0
    4e8c:	61 1d       	adc	r22, r1
    4e8e:	22 1f       	adc	r18, r18
    4e90:	74 9f       	mul	r23, r20
    4e92:	33 27       	eor	r19, r19
    4e94:	a0 0d       	add	r26, r0
    4e96:	61 1d       	adc	r22, r1
    4e98:	23 1f       	adc	r18, r19
    4e9a:	84 9f       	mul	r24, r20
    4e9c:	60 0d       	add	r22, r0
    4e9e:	21 1d       	adc	r18, r1
    4ea0:	82 2f       	mov	r24, r18
    4ea2:	76 2f       	mov	r23, r22
    4ea4:	6a 2f       	mov	r22, r26
    4ea6:	11 24       	eor	r1, r1
    4ea8:	9f 57       	subi	r25, 0x7F	; 127
    4eaa:	50 40       	sbci	r21, 0x00	; 0
    4eac:	9a f0       	brmi	.+38     	; 0x4ed4 <__mulsf3_pse+0x88>
    4eae:	f1 f0       	breq	.+60     	; 0x4eec <__mulsf3_pse+0xa0>
    4eb0:	88 23       	and	r24, r24
    4eb2:	4a f0       	brmi	.+18     	; 0x4ec6 <__mulsf3_pse+0x7a>
    4eb4:	ee 0f       	add	r30, r30
    4eb6:	ff 1f       	adc	r31, r31
    4eb8:	bb 1f       	adc	r27, r27
    4eba:	66 1f       	adc	r22, r22
    4ebc:	77 1f       	adc	r23, r23
    4ebe:	88 1f       	adc	r24, r24
    4ec0:	91 50       	subi	r25, 0x01	; 1
    4ec2:	50 40       	sbci	r21, 0x00	; 0
    4ec4:	a9 f7       	brne	.-22     	; 0x4eb0 <__mulsf3_pse+0x64>
    4ec6:	9e 3f       	cpi	r25, 0xFE	; 254
    4ec8:	51 05       	cpc	r21, r1
    4eca:	80 f0       	brcs	.+32     	; 0x4eec <__mulsf3_pse+0xa0>
    4ecc:	0c 94 ba 26 	jmp	0x4d74	; 0x4d74 <__fp_inf>
    4ed0:	0c 94 05 27 	jmp	0x4e0a	; 0x4e0a <__fp_szero>
    4ed4:	5f 3f       	cpi	r21, 0xFF	; 255
    4ed6:	e4 f3       	brlt	.-8      	; 0x4ed0 <__mulsf3_pse+0x84>
    4ed8:	98 3e       	cpi	r25, 0xE8	; 232
    4eda:	d4 f3       	brlt	.-12     	; 0x4ed0 <__mulsf3_pse+0x84>
    4edc:	86 95       	lsr	r24
    4ede:	77 95       	ror	r23
    4ee0:	67 95       	ror	r22
    4ee2:	b7 95       	ror	r27
    4ee4:	f7 95       	ror	r31
    4ee6:	e7 95       	ror	r30
    4ee8:	9f 5f       	subi	r25, 0xFF	; 255
    4eea:	c1 f7       	brne	.-16     	; 0x4edc <__mulsf3_pse+0x90>
    4eec:	fe 2b       	or	r31, r30
    4eee:	88 0f       	add	r24, r24
    4ef0:	91 1d       	adc	r25, r1
    4ef2:	96 95       	lsr	r25
    4ef4:	87 95       	ror	r24
    4ef6:	97 f9       	bld	r25, 7
    4ef8:	08 95       	ret

00004efa <calloc>:
    4efa:	0f 93       	push	r16
    4efc:	1f 93       	push	r17
    4efe:	cf 93       	push	r28
    4f00:	df 93       	push	r29
    4f02:	86 9f       	mul	r24, r22
    4f04:	80 01       	movw	r16, r0
    4f06:	87 9f       	mul	r24, r23
    4f08:	10 0d       	add	r17, r0
    4f0a:	96 9f       	mul	r25, r22
    4f0c:	10 0d       	add	r17, r0
    4f0e:	11 24       	eor	r1, r1
    4f10:	c8 01       	movw	r24, r16
    4f12:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <malloc>
    4f16:	ec 01       	movw	r28, r24
    4f18:	00 97       	sbiw	r24, 0x00	; 0
    4f1a:	29 f0       	breq	.+10     	; 0x4f26 <calloc+0x2c>
    4f1c:	a8 01       	movw	r20, r16
    4f1e:	60 e0       	ldi	r22, 0x00	; 0
    4f20:	70 e0       	ldi	r23, 0x00	; 0
    4f22:	0e 94 2f 29 	call	0x525e	; 0x525e <memset>
    4f26:	ce 01       	movw	r24, r28
    4f28:	df 91       	pop	r29
    4f2a:	cf 91       	pop	r28
    4f2c:	1f 91       	pop	r17
    4f2e:	0f 91       	pop	r16
    4f30:	08 95       	ret

00004f32 <dtostrf>:
    4f32:	ef 92       	push	r14
    4f34:	0f 93       	push	r16
    4f36:	1f 93       	push	r17
    4f38:	cf 93       	push	r28
    4f3a:	df 93       	push	r29
    4f3c:	e8 01       	movw	r28, r16
    4f3e:	47 fd       	sbrc	r20, 7
    4f40:	02 c0       	rjmp	.+4      	; 0x4f46 <dtostrf+0x14>
    4f42:	34 e0       	ldi	r19, 0x04	; 4
    4f44:	01 c0       	rjmp	.+2      	; 0x4f48 <dtostrf+0x16>
    4f46:	34 e1       	ldi	r19, 0x14	; 20
    4f48:	e4 2f       	mov	r30, r20
    4f4a:	44 0f       	add	r20, r20
    4f4c:	ff 0b       	sbc	r31, r31
    4f4e:	f7 ff       	sbrs	r31, 7
    4f50:	03 c0       	rjmp	.+6      	; 0x4f58 <dtostrf+0x26>
    4f52:	f1 95       	neg	r31
    4f54:	e1 95       	neg	r30
    4f56:	f1 09       	sbc	r31, r1
    4f58:	e3 2e       	mov	r14, r19
    4f5a:	02 2f       	mov	r16, r18
    4f5c:	2e 2f       	mov	r18, r30
    4f5e:	ae 01       	movw	r20, r28
    4f60:	0e 94 d5 29 	call	0x53aa	; 0x53aa <dtoa_prf>
    4f64:	ce 01       	movw	r24, r28
    4f66:	df 91       	pop	r29
    4f68:	cf 91       	pop	r28
    4f6a:	1f 91       	pop	r17
    4f6c:	0f 91       	pop	r16
    4f6e:	ef 90       	pop	r14
    4f70:	08 95       	ret

00004f72 <malloc>:
    4f72:	cf 93       	push	r28
    4f74:	df 93       	push	r29
    4f76:	82 30       	cpi	r24, 0x02	; 2
    4f78:	91 05       	cpc	r25, r1
    4f7a:	10 f4       	brcc	.+4      	; 0x4f80 <malloc+0xe>
    4f7c:	82 e0       	ldi	r24, 0x02	; 2
    4f7e:	90 e0       	ldi	r25, 0x00	; 0
    4f80:	e0 91 6f 02 	lds	r30, 0x026F
    4f84:	f0 91 70 02 	lds	r31, 0x0270
    4f88:	20 e0       	ldi	r18, 0x00	; 0
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	c0 e0       	ldi	r28, 0x00	; 0
    4f8e:	d0 e0       	ldi	r29, 0x00	; 0
    4f90:	30 97       	sbiw	r30, 0x00	; 0
    4f92:	11 f1       	breq	.+68     	; 0x4fd8 <malloc+0x66>
    4f94:	40 81       	ld	r20, Z
    4f96:	51 81       	ldd	r21, Z+1	; 0x01
    4f98:	48 17       	cp	r20, r24
    4f9a:	59 07       	cpc	r21, r25
    4f9c:	c0 f0       	brcs	.+48     	; 0x4fce <malloc+0x5c>
    4f9e:	48 17       	cp	r20, r24
    4fa0:	59 07       	cpc	r21, r25
    4fa2:	61 f4       	brne	.+24     	; 0x4fbc <malloc+0x4a>
    4fa4:	82 81       	ldd	r24, Z+2	; 0x02
    4fa6:	93 81       	ldd	r25, Z+3	; 0x03
    4fa8:	20 97       	sbiw	r28, 0x00	; 0
    4faa:	19 f0       	breq	.+6      	; 0x4fb2 <malloc+0x40>
    4fac:	9b 83       	std	Y+3, r25	; 0x03
    4fae:	8a 83       	std	Y+2, r24	; 0x02
    4fb0:	2b c0       	rjmp	.+86     	; 0x5008 <malloc+0x96>
    4fb2:	90 93 70 02 	sts	0x0270, r25
    4fb6:	80 93 6f 02 	sts	0x026F, r24
    4fba:	26 c0       	rjmp	.+76     	; 0x5008 <malloc+0x96>
    4fbc:	21 15       	cp	r18, r1
    4fbe:	31 05       	cpc	r19, r1
    4fc0:	19 f0       	breq	.+6      	; 0x4fc8 <malloc+0x56>
    4fc2:	42 17       	cp	r20, r18
    4fc4:	53 07       	cpc	r21, r19
    4fc6:	18 f4       	brcc	.+6      	; 0x4fce <malloc+0x5c>
    4fc8:	9a 01       	movw	r18, r20
    4fca:	be 01       	movw	r22, r28
    4fcc:	df 01       	movw	r26, r30
    4fce:	ef 01       	movw	r28, r30
    4fd0:	02 80       	ldd	r0, Z+2	; 0x02
    4fd2:	f3 81       	ldd	r31, Z+3	; 0x03
    4fd4:	e0 2d       	mov	r30, r0
    4fd6:	dc cf       	rjmp	.-72     	; 0x4f90 <malloc+0x1e>
    4fd8:	21 15       	cp	r18, r1
    4fda:	31 05       	cpc	r19, r1
    4fdc:	09 f1       	breq	.+66     	; 0x5020 <malloc+0xae>
    4fde:	28 1b       	sub	r18, r24
    4fe0:	39 0b       	sbc	r19, r25
    4fe2:	24 30       	cpi	r18, 0x04	; 4
    4fe4:	31 05       	cpc	r19, r1
    4fe6:	90 f4       	brcc	.+36     	; 0x500c <malloc+0x9a>
    4fe8:	12 96       	adiw	r26, 0x02	; 2
    4fea:	8d 91       	ld	r24, X+
    4fec:	9c 91       	ld	r25, X
    4fee:	13 97       	sbiw	r26, 0x03	; 3
    4ff0:	61 15       	cp	r22, r1
    4ff2:	71 05       	cpc	r23, r1
    4ff4:	21 f0       	breq	.+8      	; 0x4ffe <malloc+0x8c>
    4ff6:	fb 01       	movw	r30, r22
    4ff8:	93 83       	std	Z+3, r25	; 0x03
    4ffa:	82 83       	std	Z+2, r24	; 0x02
    4ffc:	04 c0       	rjmp	.+8      	; 0x5006 <malloc+0x94>
    4ffe:	90 93 70 02 	sts	0x0270, r25
    5002:	80 93 6f 02 	sts	0x026F, r24
    5006:	fd 01       	movw	r30, r26
    5008:	32 96       	adiw	r30, 0x02	; 2
    500a:	44 c0       	rjmp	.+136    	; 0x5094 <malloc+0x122>
    500c:	fd 01       	movw	r30, r26
    500e:	e2 0f       	add	r30, r18
    5010:	f3 1f       	adc	r31, r19
    5012:	81 93       	st	Z+, r24
    5014:	91 93       	st	Z+, r25
    5016:	22 50       	subi	r18, 0x02	; 2
    5018:	31 09       	sbc	r19, r1
    501a:	2d 93       	st	X+, r18
    501c:	3c 93       	st	X, r19
    501e:	3a c0       	rjmp	.+116    	; 0x5094 <malloc+0x122>
    5020:	20 91 6d 02 	lds	r18, 0x026D
    5024:	30 91 6e 02 	lds	r19, 0x026E
    5028:	23 2b       	or	r18, r19
    502a:	41 f4       	brne	.+16     	; 0x503c <malloc+0xca>
    502c:	20 91 02 01 	lds	r18, 0x0102
    5030:	30 91 03 01 	lds	r19, 0x0103
    5034:	30 93 6e 02 	sts	0x026E, r19
    5038:	20 93 6d 02 	sts	0x026D, r18
    503c:	20 91 00 01 	lds	r18, 0x0100
    5040:	30 91 01 01 	lds	r19, 0x0101
    5044:	21 15       	cp	r18, r1
    5046:	31 05       	cpc	r19, r1
    5048:	41 f4       	brne	.+16     	; 0x505a <malloc+0xe8>
    504a:	2d b7       	in	r18, 0x3d	; 61
    504c:	3e b7       	in	r19, 0x3e	; 62
    504e:	40 91 04 01 	lds	r20, 0x0104
    5052:	50 91 05 01 	lds	r21, 0x0105
    5056:	24 1b       	sub	r18, r20
    5058:	35 0b       	sbc	r19, r21
    505a:	e0 91 6d 02 	lds	r30, 0x026D
    505e:	f0 91 6e 02 	lds	r31, 0x026E
    5062:	e2 17       	cp	r30, r18
    5064:	f3 07       	cpc	r31, r19
    5066:	a0 f4       	brcc	.+40     	; 0x5090 <malloc+0x11e>
    5068:	2e 1b       	sub	r18, r30
    506a:	3f 0b       	sbc	r19, r31
    506c:	28 17       	cp	r18, r24
    506e:	39 07       	cpc	r19, r25
    5070:	78 f0       	brcs	.+30     	; 0x5090 <malloc+0x11e>
    5072:	ac 01       	movw	r20, r24
    5074:	4e 5f       	subi	r20, 0xFE	; 254
    5076:	5f 4f       	sbci	r21, 0xFF	; 255
    5078:	24 17       	cp	r18, r20
    507a:	35 07       	cpc	r19, r21
    507c:	48 f0       	brcs	.+18     	; 0x5090 <malloc+0x11e>
    507e:	4e 0f       	add	r20, r30
    5080:	5f 1f       	adc	r21, r31
    5082:	50 93 6e 02 	sts	0x026E, r21
    5086:	40 93 6d 02 	sts	0x026D, r20
    508a:	81 93       	st	Z+, r24
    508c:	91 93       	st	Z+, r25
    508e:	02 c0       	rjmp	.+4      	; 0x5094 <malloc+0x122>
    5090:	e0 e0       	ldi	r30, 0x00	; 0
    5092:	f0 e0       	ldi	r31, 0x00	; 0
    5094:	cf 01       	movw	r24, r30
    5096:	df 91       	pop	r29
    5098:	cf 91       	pop	r28
    509a:	08 95       	ret

0000509c <free>:
    509c:	0f 93       	push	r16
    509e:	1f 93       	push	r17
    50a0:	cf 93       	push	r28
    50a2:	df 93       	push	r29
    50a4:	00 97       	sbiw	r24, 0x00	; 0
    50a6:	09 f4       	brne	.+2      	; 0x50aa <free+0xe>
    50a8:	8c c0       	rjmp	.+280    	; 0x51c2 <free+0x126>
    50aa:	fc 01       	movw	r30, r24
    50ac:	32 97       	sbiw	r30, 0x02	; 2
    50ae:	13 82       	std	Z+3, r1	; 0x03
    50b0:	12 82       	std	Z+2, r1	; 0x02
    50b2:	00 91 6f 02 	lds	r16, 0x026F
    50b6:	10 91 70 02 	lds	r17, 0x0270
    50ba:	01 15       	cp	r16, r1
    50bc:	11 05       	cpc	r17, r1
    50be:	81 f4       	brne	.+32     	; 0x50e0 <free+0x44>
    50c0:	20 81       	ld	r18, Z
    50c2:	31 81       	ldd	r19, Z+1	; 0x01
    50c4:	82 0f       	add	r24, r18
    50c6:	93 1f       	adc	r25, r19
    50c8:	20 91 6d 02 	lds	r18, 0x026D
    50cc:	30 91 6e 02 	lds	r19, 0x026E
    50d0:	28 17       	cp	r18, r24
    50d2:	39 07       	cpc	r19, r25
    50d4:	79 f5       	brne	.+94     	; 0x5134 <free+0x98>
    50d6:	f0 93 6e 02 	sts	0x026E, r31
    50da:	e0 93 6d 02 	sts	0x026D, r30
    50de:	71 c0       	rjmp	.+226    	; 0x51c2 <free+0x126>
    50e0:	d8 01       	movw	r26, r16
    50e2:	40 e0       	ldi	r20, 0x00	; 0
    50e4:	50 e0       	ldi	r21, 0x00	; 0
    50e6:	ae 17       	cp	r26, r30
    50e8:	bf 07       	cpc	r27, r31
    50ea:	50 f4       	brcc	.+20     	; 0x5100 <free+0x64>
    50ec:	12 96       	adiw	r26, 0x02	; 2
    50ee:	2d 91       	ld	r18, X+
    50f0:	3c 91       	ld	r19, X
    50f2:	13 97       	sbiw	r26, 0x03	; 3
    50f4:	ad 01       	movw	r20, r26
    50f6:	21 15       	cp	r18, r1
    50f8:	31 05       	cpc	r19, r1
    50fa:	09 f1       	breq	.+66     	; 0x513e <free+0xa2>
    50fc:	d9 01       	movw	r26, r18
    50fe:	f3 cf       	rjmp	.-26     	; 0x50e6 <free+0x4a>
    5100:	9d 01       	movw	r18, r26
    5102:	da 01       	movw	r26, r20
    5104:	33 83       	std	Z+3, r19	; 0x03
    5106:	22 83       	std	Z+2, r18	; 0x02
    5108:	60 81       	ld	r22, Z
    510a:	71 81       	ldd	r23, Z+1	; 0x01
    510c:	86 0f       	add	r24, r22
    510e:	97 1f       	adc	r25, r23
    5110:	82 17       	cp	r24, r18
    5112:	93 07       	cpc	r25, r19
    5114:	69 f4       	brne	.+26     	; 0x5130 <free+0x94>
    5116:	ec 01       	movw	r28, r24
    5118:	28 81       	ld	r18, Y
    511a:	39 81       	ldd	r19, Y+1	; 0x01
    511c:	26 0f       	add	r18, r22
    511e:	37 1f       	adc	r19, r23
    5120:	2e 5f       	subi	r18, 0xFE	; 254
    5122:	3f 4f       	sbci	r19, 0xFF	; 255
    5124:	31 83       	std	Z+1, r19	; 0x01
    5126:	20 83       	st	Z, r18
    5128:	8a 81       	ldd	r24, Y+2	; 0x02
    512a:	9b 81       	ldd	r25, Y+3	; 0x03
    512c:	93 83       	std	Z+3, r25	; 0x03
    512e:	82 83       	std	Z+2, r24	; 0x02
    5130:	45 2b       	or	r20, r21
    5132:	29 f4       	brne	.+10     	; 0x513e <free+0xa2>
    5134:	f0 93 70 02 	sts	0x0270, r31
    5138:	e0 93 6f 02 	sts	0x026F, r30
    513c:	42 c0       	rjmp	.+132    	; 0x51c2 <free+0x126>
    513e:	13 96       	adiw	r26, 0x03	; 3
    5140:	fc 93       	st	X, r31
    5142:	ee 93       	st	-X, r30
    5144:	12 97       	sbiw	r26, 0x02	; 2
    5146:	ed 01       	movw	r28, r26
    5148:	49 91       	ld	r20, Y+
    514a:	59 91       	ld	r21, Y+
    514c:	9e 01       	movw	r18, r28
    514e:	24 0f       	add	r18, r20
    5150:	35 1f       	adc	r19, r21
    5152:	e2 17       	cp	r30, r18
    5154:	f3 07       	cpc	r31, r19
    5156:	71 f4       	brne	.+28     	; 0x5174 <free+0xd8>
    5158:	80 81       	ld	r24, Z
    515a:	91 81       	ldd	r25, Z+1	; 0x01
    515c:	84 0f       	add	r24, r20
    515e:	95 1f       	adc	r25, r21
    5160:	02 96       	adiw	r24, 0x02	; 2
    5162:	11 96       	adiw	r26, 0x01	; 1
    5164:	9c 93       	st	X, r25
    5166:	8e 93       	st	-X, r24
    5168:	82 81       	ldd	r24, Z+2	; 0x02
    516a:	93 81       	ldd	r25, Z+3	; 0x03
    516c:	13 96       	adiw	r26, 0x03	; 3
    516e:	9c 93       	st	X, r25
    5170:	8e 93       	st	-X, r24
    5172:	12 97       	sbiw	r26, 0x02	; 2
    5174:	e0 e0       	ldi	r30, 0x00	; 0
    5176:	f0 e0       	ldi	r31, 0x00	; 0
    5178:	d8 01       	movw	r26, r16
    517a:	12 96       	adiw	r26, 0x02	; 2
    517c:	8d 91       	ld	r24, X+
    517e:	9c 91       	ld	r25, X
    5180:	13 97       	sbiw	r26, 0x03	; 3
    5182:	00 97       	sbiw	r24, 0x00	; 0
    5184:	19 f0       	breq	.+6      	; 0x518c <free+0xf0>
    5186:	f8 01       	movw	r30, r16
    5188:	8c 01       	movw	r16, r24
    518a:	f6 cf       	rjmp	.-20     	; 0x5178 <free+0xdc>
    518c:	8d 91       	ld	r24, X+
    518e:	9c 91       	ld	r25, X
    5190:	98 01       	movw	r18, r16
    5192:	2e 5f       	subi	r18, 0xFE	; 254
    5194:	3f 4f       	sbci	r19, 0xFF	; 255
    5196:	82 0f       	add	r24, r18
    5198:	93 1f       	adc	r25, r19
    519a:	20 91 6d 02 	lds	r18, 0x026D
    519e:	30 91 6e 02 	lds	r19, 0x026E
    51a2:	28 17       	cp	r18, r24
    51a4:	39 07       	cpc	r19, r25
    51a6:	69 f4       	brne	.+26     	; 0x51c2 <free+0x126>
    51a8:	30 97       	sbiw	r30, 0x00	; 0
    51aa:	29 f4       	brne	.+10     	; 0x51b6 <free+0x11a>
    51ac:	10 92 70 02 	sts	0x0270, r1
    51b0:	10 92 6f 02 	sts	0x026F, r1
    51b4:	02 c0       	rjmp	.+4      	; 0x51ba <free+0x11e>
    51b6:	13 82       	std	Z+3, r1	; 0x03
    51b8:	12 82       	std	Z+2, r1	; 0x02
    51ba:	10 93 6e 02 	sts	0x026E, r17
    51be:	00 93 6d 02 	sts	0x026D, r16
    51c2:	df 91       	pop	r29
    51c4:	cf 91       	pop	r28
    51c6:	1f 91       	pop	r17
    51c8:	0f 91       	pop	r16
    51ca:	08 95       	ret

000051cc <atof>:
    51cc:	66 27       	eor	r22, r22
    51ce:	77 27       	eor	r23, r23
    51d0:	0c 94 63 2b 	jmp	0x56c6	; 0x56c6 <strtod>

000051d4 <atoi>:
    51d4:	fc 01       	movw	r30, r24
    51d6:	88 27       	eor	r24, r24
    51d8:	99 27       	eor	r25, r25
    51da:	e8 94       	clt
    51dc:	21 91       	ld	r18, Z+
    51de:	20 32       	cpi	r18, 0x20	; 32
    51e0:	e9 f3       	breq	.-6      	; 0x51dc <atoi+0x8>
    51e2:	29 30       	cpi	r18, 0x09	; 9
    51e4:	10 f0       	brcs	.+4      	; 0x51ea <atoi+0x16>
    51e6:	2e 30       	cpi	r18, 0x0E	; 14
    51e8:	c8 f3       	brcs	.-14     	; 0x51dc <atoi+0x8>
    51ea:	2b 32       	cpi	r18, 0x2B	; 43
    51ec:	41 f0       	breq	.+16     	; 0x51fe <atoi+0x2a>
    51ee:	2d 32       	cpi	r18, 0x2D	; 45
    51f0:	39 f4       	brne	.+14     	; 0x5200 <atoi+0x2c>
    51f2:	68 94       	set
    51f4:	04 c0       	rjmp	.+8      	; 0x51fe <atoi+0x2a>
    51f6:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__mulhi_const_10>
    51fa:	82 0f       	add	r24, r18
    51fc:	91 1d       	adc	r25, r1
    51fe:	21 91       	ld	r18, Z+
    5200:	20 53       	subi	r18, 0x30	; 48
    5202:	2a 30       	cpi	r18, 0x0A	; 10
    5204:	c0 f3       	brcs	.-16     	; 0x51f6 <atoi+0x22>
    5206:	1e f4       	brtc	.+6      	; 0x520e <atoi+0x3a>
    5208:	90 95       	com	r25
    520a:	81 95       	neg	r24
    520c:	9f 4f       	sbci	r25, 0xFF	; 255
    520e:	08 95       	ret

00005210 <atol>:
    5210:	1f 93       	push	r17
    5212:	fc 01       	movw	r30, r24
    5214:	99 27       	eor	r25, r25
    5216:	88 27       	eor	r24, r24
    5218:	bc 01       	movw	r22, r24
    521a:	e8 94       	clt
    521c:	11 91       	ld	r17, Z+
    521e:	10 32       	cpi	r17, 0x20	; 32
    5220:	e9 f3       	breq	.-6      	; 0x521c <atol+0xc>
    5222:	19 30       	cpi	r17, 0x09	; 9
    5224:	10 f0       	brcs	.+4      	; 0x522a <atol+0x1a>
    5226:	1e 30       	cpi	r17, 0x0E	; 14
    5228:	c8 f3       	brcs	.-14     	; 0x521c <atol+0xc>
    522a:	1b 32       	cpi	r17, 0x2B	; 43
    522c:	51 f0       	breq	.+20     	; 0x5242 <atol+0x32>
    522e:	1d 32       	cpi	r17, 0x2D	; 45
    5230:	49 f4       	brne	.+18     	; 0x5244 <atol+0x34>
    5232:	68 94       	set
    5234:	06 c0       	rjmp	.+12     	; 0x5242 <atol+0x32>
    5236:	0e 94 66 29 	call	0x52cc	; 0x52cc <__mulsi_const_10>
    523a:	61 0f       	add	r22, r17
    523c:	71 1d       	adc	r23, r1
    523e:	81 1d       	adc	r24, r1
    5240:	91 1d       	adc	r25, r1
    5242:	11 91       	ld	r17, Z+
    5244:	10 53       	subi	r17, 0x30	; 48
    5246:	1a 30       	cpi	r17, 0x0A	; 10
    5248:	b0 f3       	brcs	.-20     	; 0x5236 <atol+0x26>
    524a:	3e f4       	brtc	.+14     	; 0x525a <atol+0x4a>
    524c:	90 95       	com	r25
    524e:	80 95       	com	r24
    5250:	70 95       	com	r23
    5252:	61 95       	neg	r22
    5254:	7f 4f       	sbci	r23, 0xFF	; 255
    5256:	8f 4f       	sbci	r24, 0xFF	; 255
    5258:	9f 4f       	sbci	r25, 0xFF	; 255
    525a:	1f 91       	pop	r17
    525c:	08 95       	ret

0000525e <memset>:
    525e:	dc 01       	movw	r26, r24
    5260:	01 c0       	rjmp	.+2      	; 0x5264 <memset+0x6>
    5262:	6d 93       	st	X+, r22
    5264:	41 50       	subi	r20, 0x01	; 1
    5266:	50 40       	sbci	r21, 0x00	; 0
    5268:	e0 f7       	brcc	.-8      	; 0x5262 <memset+0x4>
    526a:	08 95       	ret

0000526c <itoa>:
    526c:	45 32       	cpi	r20, 0x25	; 37
    526e:	51 05       	cpc	r21, r1
    5270:	20 f4       	brcc	.+8      	; 0x527a <itoa+0xe>
    5272:	42 30       	cpi	r20, 0x02	; 2
    5274:	10 f0       	brcs	.+4      	; 0x527a <itoa+0xe>
    5276:	0c 94 41 29 	jmp	0x5282	; 0x5282 <__itoa_ncheck>
    527a:	fb 01       	movw	r30, r22
    527c:	10 82       	st	Z, r1
    527e:	cb 01       	movw	r24, r22
    5280:	08 95       	ret

00005282 <__itoa_ncheck>:
    5282:	bb 27       	eor	r27, r27
    5284:	4a 30       	cpi	r20, 0x0A	; 10
    5286:	31 f4       	brne	.+12     	; 0x5294 <__itoa_ncheck+0x12>
    5288:	99 23       	and	r25, r25
    528a:	22 f4       	brpl	.+8      	; 0x5294 <__itoa_ncheck+0x12>
    528c:	bd e2       	ldi	r27, 0x2D	; 45
    528e:	90 95       	com	r25
    5290:	81 95       	neg	r24
    5292:	9f 4f       	sbci	r25, 0xFF	; 255
    5294:	0c 94 bc 29 	jmp	0x5378	; 0x5378 <__utoa_common>

00005298 <ltoa>:
    5298:	25 32       	cpi	r18, 0x25	; 37
    529a:	31 05       	cpc	r19, r1
    529c:	20 f4       	brcc	.+8      	; 0x52a6 <ltoa+0xe>
    529e:	22 30       	cpi	r18, 0x02	; 2
    52a0:	10 f0       	brcs	.+4      	; 0x52a6 <ltoa+0xe>
    52a2:	0c 94 57 29 	jmp	0x52ae	; 0x52ae <__ltoa_ncheck>
    52a6:	fa 01       	movw	r30, r20
    52a8:	10 82       	st	Z, r1
    52aa:	ca 01       	movw	r24, r20
    52ac:	08 95       	ret

000052ae <__ltoa_ncheck>:
    52ae:	bb 27       	eor	r27, r27
    52b0:	2a 30       	cpi	r18, 0x0A	; 10
    52b2:	51 f4       	brne	.+20     	; 0x52c8 <__ltoa_ncheck+0x1a>
    52b4:	99 23       	and	r25, r25
    52b6:	42 f4       	brpl	.+16     	; 0x52c8 <__ltoa_ncheck+0x1a>
    52b8:	bd e2       	ldi	r27, 0x2D	; 45
    52ba:	90 95       	com	r25
    52bc:	80 95       	com	r24
    52be:	70 95       	com	r23
    52c0:	61 95       	neg	r22
    52c2:	7f 4f       	sbci	r23, 0xFF	; 255
    52c4:	8f 4f       	sbci	r24, 0xFF	; 255
    52c6:	9f 4f       	sbci	r25, 0xFF	; 255
    52c8:	0c 94 8f 29 	jmp	0x531e	; 0x531e <__ultoa_common>

000052cc <__mulsi_const_10>:
    52cc:	59 2f       	mov	r21, r25
    52ce:	48 2f       	mov	r20, r24
    52d0:	37 2f       	mov	r19, r23
    52d2:	26 2f       	mov	r18, r22
    52d4:	66 0f       	add	r22, r22
    52d6:	77 1f       	adc	r23, r23
    52d8:	88 1f       	adc	r24, r24
    52da:	99 1f       	adc	r25, r25
    52dc:	66 0f       	add	r22, r22
    52de:	77 1f       	adc	r23, r23
    52e0:	88 1f       	adc	r24, r24
    52e2:	99 1f       	adc	r25, r25
    52e4:	62 0f       	add	r22, r18
    52e6:	73 1f       	adc	r23, r19
    52e8:	84 1f       	adc	r24, r20
    52ea:	95 1f       	adc	r25, r21
    52ec:	66 0f       	add	r22, r22
    52ee:	77 1f       	adc	r23, r23
    52f0:	88 1f       	adc	r24, r24
    52f2:	99 1f       	adc	r25, r25
    52f4:	08 95       	ret

000052f6 <__mulhi_const_10>:
    52f6:	7a e0       	ldi	r23, 0x0A	; 10
    52f8:	97 9f       	mul	r25, r23
    52fa:	90 2d       	mov	r25, r0
    52fc:	87 9f       	mul	r24, r23
    52fe:	80 2d       	mov	r24, r0
    5300:	91 0d       	add	r25, r1
    5302:	11 24       	eor	r1, r1
    5304:	08 95       	ret

00005306 <ultoa>:
    5306:	25 32       	cpi	r18, 0x25	; 37
    5308:	31 05       	cpc	r19, r1
    530a:	20 f4       	brcc	.+8      	; 0x5314 <ultoa+0xe>
    530c:	22 30       	cpi	r18, 0x02	; 2
    530e:	10 f0       	brcs	.+4      	; 0x5314 <ultoa+0xe>
    5310:	0c 94 8e 29 	jmp	0x531c	; 0x531c <__ultoa_ncheck>
    5314:	fa 01       	movw	r30, r20
    5316:	10 82       	st	Z, r1
    5318:	ca 01       	movw	r24, r20
    531a:	08 95       	ret

0000531c <__ultoa_ncheck>:
    531c:	bb 27       	eor	r27, r27

0000531e <__ultoa_common>:
    531e:	fa 01       	movw	r30, r20
    5320:	a6 2f       	mov	r26, r22
    5322:	62 17       	cp	r22, r18
    5324:	71 05       	cpc	r23, r1
    5326:	81 05       	cpc	r24, r1
    5328:	91 05       	cpc	r25, r1
    532a:	33 0b       	sbc	r19, r19
    532c:	30 fb       	bst	r19, 0
    532e:	66 f0       	brts	.+24     	; 0x5348 <__ultoa_common+0x2a>
    5330:	aa 27       	eor	r26, r26
    5332:	66 0f       	add	r22, r22
    5334:	77 1f       	adc	r23, r23
    5336:	88 1f       	adc	r24, r24
    5338:	99 1f       	adc	r25, r25
    533a:	aa 1f       	adc	r26, r26
    533c:	a2 17       	cp	r26, r18
    533e:	10 f0       	brcs	.+4      	; 0x5344 <__ultoa_common+0x26>
    5340:	a2 1b       	sub	r26, r18
    5342:	63 95       	inc	r22
    5344:	38 50       	subi	r19, 0x08	; 8
    5346:	a9 f7       	brne	.-22     	; 0x5332 <__ultoa_common+0x14>
    5348:	a0 5d       	subi	r26, 0xD0	; 208
    534a:	aa 33       	cpi	r26, 0x3A	; 58
    534c:	08 f0       	brcs	.+2      	; 0x5350 <__ultoa_common+0x32>
    534e:	a9 5d       	subi	r26, 0xD9	; 217
    5350:	a1 93       	st	Z+, r26
    5352:	36 f7       	brtc	.-52     	; 0x5320 <__ultoa_common+0x2>
    5354:	b1 11       	cpse	r27, r1
    5356:	b1 93       	st	Z+, r27
    5358:	10 82       	st	Z, r1
    535a:	ca 01       	movw	r24, r20
    535c:	0c 94 cb 2d 	jmp	0x5b96	; 0x5b96 <strrev>

00005360 <utoa>:
    5360:	45 32       	cpi	r20, 0x25	; 37
    5362:	51 05       	cpc	r21, r1
    5364:	20 f4       	brcc	.+8      	; 0x536e <utoa+0xe>
    5366:	42 30       	cpi	r20, 0x02	; 2
    5368:	10 f0       	brcs	.+4      	; 0x536e <utoa+0xe>
    536a:	0c 94 bb 29 	jmp	0x5376	; 0x5376 <__utoa_ncheck>
    536e:	fb 01       	movw	r30, r22
    5370:	10 82       	st	Z, r1
    5372:	cb 01       	movw	r24, r22
    5374:	08 95       	ret

00005376 <__utoa_ncheck>:
    5376:	bb 27       	eor	r27, r27

00005378 <__utoa_common>:
    5378:	fb 01       	movw	r30, r22
    537a:	55 27       	eor	r21, r21
    537c:	aa 27       	eor	r26, r26
    537e:	88 0f       	add	r24, r24
    5380:	99 1f       	adc	r25, r25
    5382:	aa 1f       	adc	r26, r26
    5384:	a4 17       	cp	r26, r20
    5386:	10 f0       	brcs	.+4      	; 0x538c <__utoa_common+0x14>
    5388:	a4 1b       	sub	r26, r20
    538a:	83 95       	inc	r24
    538c:	50 51       	subi	r21, 0x10	; 16
    538e:	b9 f7       	brne	.-18     	; 0x537e <__utoa_common+0x6>
    5390:	a0 5d       	subi	r26, 0xD0	; 208
    5392:	aa 33       	cpi	r26, 0x3A	; 58
    5394:	08 f0       	brcs	.+2      	; 0x5398 <__utoa_common+0x20>
    5396:	a9 5d       	subi	r26, 0xD9	; 217
    5398:	a1 93       	st	Z+, r26
    539a:	00 97       	sbiw	r24, 0x00	; 0
    539c:	79 f7       	brne	.-34     	; 0x537c <__utoa_common+0x4>
    539e:	b1 11       	cpse	r27, r1
    53a0:	b1 93       	st	Z+, r27
    53a2:	11 92       	st	Z+, r1
    53a4:	cb 01       	movw	r24, r22
    53a6:	0c 94 cb 2d 	jmp	0x5b96	; 0x5b96 <strrev>

000053aa <dtoa_prf>:
    53aa:	4f 92       	push	r4
    53ac:	5f 92       	push	r5
    53ae:	6f 92       	push	r6
    53b0:	7f 92       	push	r7
    53b2:	9f 92       	push	r9
    53b4:	af 92       	push	r10
    53b6:	bf 92       	push	r11
    53b8:	cf 92       	push	r12
    53ba:	df 92       	push	r13
    53bc:	ef 92       	push	r14
    53be:	ff 92       	push	r15
    53c0:	0f 93       	push	r16
    53c2:	1f 93       	push	r17
    53c4:	cf 93       	push	r28
    53c6:	df 93       	push	r29
    53c8:	cd b7       	in	r28, 0x3d	; 61
    53ca:	de b7       	in	r29, 0x3e	; 62
    53cc:	29 97       	sbiw	r28, 0x09	; 9
    53ce:	0f b6       	in	r0, 0x3f	; 63
    53d0:	f8 94       	cli
    53d2:	de bf       	out	0x3e, r29	; 62
    53d4:	0f be       	out	0x3f, r0	; 63
    53d6:	cd bf       	out	0x3d, r28	; 61
    53d8:	6a 01       	movw	r12, r20
    53da:	12 2f       	mov	r17, r18
    53dc:	b0 2e       	mov	r11, r16
    53de:	2b e3       	ldi	r18, 0x3B	; 59
    53e0:	20 17       	cp	r18, r16
    53e2:	20 f0       	brcs	.+8      	; 0x53ec <dtoa_prf+0x42>
    53e4:	ff 24       	eor	r15, r15
    53e6:	f3 94       	inc	r15
    53e8:	f0 0e       	add	r15, r16
    53ea:	02 c0       	rjmp	.+4      	; 0x53f0 <dtoa_prf+0x46>
    53ec:	bc e3       	ldi	r27, 0x3C	; 60
    53ee:	fb 2e       	mov	r15, r27
    53f0:	0f 2d       	mov	r16, r15
    53f2:	27 e0       	ldi	r18, 0x07	; 7
    53f4:	ae 01       	movw	r20, r28
    53f6:	4f 5f       	subi	r20, 0xFF	; 255
    53f8:	5f 4f       	sbci	r21, 0xFF	; 255
    53fa:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <__ftoa_engine>
    53fe:	ac 01       	movw	r20, r24
    5400:	89 81       	ldd	r24, Y+1	; 0x01
    5402:	98 2f       	mov	r25, r24
    5404:	99 70       	andi	r25, 0x09	; 9
    5406:	91 30       	cpi	r25, 0x01	; 1
    5408:	31 f0       	breq	.+12     	; 0x5416 <dtoa_prf+0x6c>
    540a:	e1 fc       	sbrc	r14, 1
    540c:	06 c0       	rjmp	.+12     	; 0x541a <dtoa_prf+0x70>
    540e:	e0 fe       	sbrs	r14, 0
    5410:	06 c0       	rjmp	.+12     	; 0x541e <dtoa_prf+0x74>
    5412:	90 e2       	ldi	r25, 0x20	; 32
    5414:	05 c0       	rjmp	.+10     	; 0x5420 <dtoa_prf+0x76>
    5416:	9d e2       	ldi	r25, 0x2D	; 45
    5418:	03 c0       	rjmp	.+6      	; 0x5420 <dtoa_prf+0x76>
    541a:	9b e2       	ldi	r25, 0x2B	; 43
    541c:	01 c0       	rjmp	.+2      	; 0x5420 <dtoa_prf+0x76>
    541e:	90 e0       	ldi	r25, 0x00	; 0
    5420:	ee 2d       	mov	r30, r14
    5422:	e0 71       	andi	r30, 0x10	; 16
    5424:	83 ff       	sbrs	r24, 3
    5426:	3c c0       	rjmp	.+120    	; 0x54a0 <dtoa_prf+0xf6>
    5428:	91 11       	cpse	r25, r1
    542a:	02 c0       	rjmp	.+4      	; 0x5430 <dtoa_prf+0x86>
    542c:	83 e0       	ldi	r24, 0x03	; 3
    542e:	01 c0       	rjmp	.+2      	; 0x5432 <dtoa_prf+0x88>
    5430:	84 e0       	ldi	r24, 0x04	; 4
    5432:	81 17       	cp	r24, r17
    5434:	18 f4       	brcc	.+6      	; 0x543c <dtoa_prf+0x92>
    5436:	21 2f       	mov	r18, r17
    5438:	28 1b       	sub	r18, r24
    543a:	01 c0       	rjmp	.+2      	; 0x543e <dtoa_prf+0x94>
    543c:	20 e0       	ldi	r18, 0x00	; 0
    543e:	e1 11       	cpse	r30, r1
    5440:	0b c0       	rjmp	.+22     	; 0x5458 <dtoa_prf+0xae>
    5442:	f6 01       	movw	r30, r12
    5444:	82 2f       	mov	r24, r18
    5446:	30 e2       	ldi	r19, 0x20	; 32
    5448:	88 23       	and	r24, r24
    544a:	19 f0       	breq	.+6      	; 0x5452 <dtoa_prf+0xa8>
    544c:	31 93       	st	Z+, r19
    544e:	81 50       	subi	r24, 0x01	; 1
    5450:	fb cf       	rjmp	.-10     	; 0x5448 <dtoa_prf+0x9e>
    5452:	c2 0e       	add	r12, r18
    5454:	d1 1c       	adc	r13, r1
    5456:	20 e0       	ldi	r18, 0x00	; 0
    5458:	99 23       	and	r25, r25
    545a:	29 f0       	breq	.+10     	; 0x5466 <dtoa_prf+0xbc>
    545c:	d6 01       	movw	r26, r12
    545e:	9c 93       	st	X, r25
    5460:	f6 01       	movw	r30, r12
    5462:	31 96       	adiw	r30, 0x01	; 1
    5464:	6f 01       	movw	r12, r30
    5466:	c6 01       	movw	r24, r12
    5468:	03 96       	adiw	r24, 0x03	; 3
    546a:	e2 fe       	sbrs	r14, 2
    546c:	0a c0       	rjmp	.+20     	; 0x5482 <dtoa_prf+0xd8>
    546e:	3e e4       	ldi	r19, 0x4E	; 78
    5470:	d6 01       	movw	r26, r12
    5472:	3c 93       	st	X, r19
    5474:	41 e4       	ldi	r20, 0x41	; 65
    5476:	11 96       	adiw	r26, 0x01	; 1
    5478:	4c 93       	st	X, r20
    547a:	11 97       	sbiw	r26, 0x01	; 1
    547c:	12 96       	adiw	r26, 0x02	; 2
    547e:	3c 93       	st	X, r19
    5480:	06 c0       	rjmp	.+12     	; 0x548e <dtoa_prf+0xe4>
    5482:	3e e6       	ldi	r19, 0x6E	; 110
    5484:	f6 01       	movw	r30, r12
    5486:	30 83       	st	Z, r19
    5488:	41 e6       	ldi	r20, 0x61	; 97
    548a:	41 83       	std	Z+1, r20	; 0x01
    548c:	32 83       	std	Z+2, r19	; 0x02
    548e:	fc 01       	movw	r30, r24
    5490:	32 2f       	mov	r19, r18
    5492:	40 e2       	ldi	r20, 0x20	; 32
    5494:	33 23       	and	r19, r19
    5496:	09 f4       	brne	.+2      	; 0x549a <dtoa_prf+0xf0>
    5498:	42 c0       	rjmp	.+132    	; 0x551e <dtoa_prf+0x174>
    549a:	41 93       	st	Z+, r20
    549c:	31 50       	subi	r19, 0x01	; 1
    549e:	fa cf       	rjmp	.-12     	; 0x5494 <dtoa_prf+0xea>
    54a0:	82 ff       	sbrs	r24, 2
    54a2:	44 c0       	rjmp	.+136    	; 0x552c <dtoa_prf+0x182>
    54a4:	91 11       	cpse	r25, r1
    54a6:	02 c0       	rjmp	.+4      	; 0x54ac <dtoa_prf+0x102>
    54a8:	83 e0       	ldi	r24, 0x03	; 3
    54aa:	01 c0       	rjmp	.+2      	; 0x54ae <dtoa_prf+0x104>
    54ac:	84 e0       	ldi	r24, 0x04	; 4
    54ae:	81 17       	cp	r24, r17
    54b0:	18 f4       	brcc	.+6      	; 0x54b8 <dtoa_prf+0x10e>
    54b2:	21 2f       	mov	r18, r17
    54b4:	28 1b       	sub	r18, r24
    54b6:	01 c0       	rjmp	.+2      	; 0x54ba <dtoa_prf+0x110>
    54b8:	20 e0       	ldi	r18, 0x00	; 0
    54ba:	e1 11       	cpse	r30, r1
    54bc:	0b c0       	rjmp	.+22     	; 0x54d4 <dtoa_prf+0x12a>
    54be:	f6 01       	movw	r30, r12
    54c0:	82 2f       	mov	r24, r18
    54c2:	30 e2       	ldi	r19, 0x20	; 32
    54c4:	88 23       	and	r24, r24
    54c6:	19 f0       	breq	.+6      	; 0x54ce <dtoa_prf+0x124>
    54c8:	31 93       	st	Z+, r19
    54ca:	81 50       	subi	r24, 0x01	; 1
    54cc:	fb cf       	rjmp	.-10     	; 0x54c4 <dtoa_prf+0x11a>
    54ce:	c2 0e       	add	r12, r18
    54d0:	d1 1c       	adc	r13, r1
    54d2:	20 e0       	ldi	r18, 0x00	; 0
    54d4:	99 23       	and	r25, r25
    54d6:	29 f0       	breq	.+10     	; 0x54e2 <dtoa_prf+0x138>
    54d8:	d6 01       	movw	r26, r12
    54da:	9c 93       	st	X, r25
    54dc:	f6 01       	movw	r30, r12
    54de:	31 96       	adiw	r30, 0x01	; 1
    54e0:	6f 01       	movw	r12, r30
    54e2:	c6 01       	movw	r24, r12
    54e4:	03 96       	adiw	r24, 0x03	; 3
    54e6:	e2 fe       	sbrs	r14, 2
    54e8:	0b c0       	rjmp	.+22     	; 0x5500 <dtoa_prf+0x156>
    54ea:	39 e4       	ldi	r19, 0x49	; 73
    54ec:	d6 01       	movw	r26, r12
    54ee:	3c 93       	st	X, r19
    54f0:	3e e4       	ldi	r19, 0x4E	; 78
    54f2:	11 96       	adiw	r26, 0x01	; 1
    54f4:	3c 93       	st	X, r19
    54f6:	11 97       	sbiw	r26, 0x01	; 1
    54f8:	36 e4       	ldi	r19, 0x46	; 70
    54fa:	12 96       	adiw	r26, 0x02	; 2
    54fc:	3c 93       	st	X, r19
    54fe:	07 c0       	rjmp	.+14     	; 0x550e <dtoa_prf+0x164>
    5500:	39 e6       	ldi	r19, 0x69	; 105
    5502:	f6 01       	movw	r30, r12
    5504:	30 83       	st	Z, r19
    5506:	3e e6       	ldi	r19, 0x6E	; 110
    5508:	31 83       	std	Z+1, r19	; 0x01
    550a:	36 e6       	ldi	r19, 0x66	; 102
    550c:	32 83       	std	Z+2, r19	; 0x02
    550e:	fc 01       	movw	r30, r24
    5510:	32 2f       	mov	r19, r18
    5512:	40 e2       	ldi	r20, 0x20	; 32
    5514:	33 23       	and	r19, r19
    5516:	19 f0       	breq	.+6      	; 0x551e <dtoa_prf+0x174>
    5518:	41 93       	st	Z+, r20
    551a:	31 50       	subi	r19, 0x01	; 1
    551c:	fb cf       	rjmp	.-10     	; 0x5514 <dtoa_prf+0x16a>
    551e:	fc 01       	movw	r30, r24
    5520:	e2 0f       	add	r30, r18
    5522:	f1 1d       	adc	r31, r1
    5524:	10 82       	st	Z, r1
    5526:	8e ef       	ldi	r24, 0xFE	; 254
    5528:	9f ef       	ldi	r25, 0xFF	; 255
    552a:	b7 c0       	rjmp	.+366    	; 0x569a <dtoa_prf+0x2f0>
    552c:	f1 e0       	ldi	r31, 0x01	; 1
    552e:	91 11       	cpse	r25, r1
    5530:	01 c0       	rjmp	.+2      	; 0x5534 <dtoa_prf+0x18a>
    5532:	f0 e0       	ldi	r31, 0x00	; 0
    5534:	6f 2f       	mov	r22, r31
    5536:	70 e0       	ldi	r23, 0x00	; 0
    5538:	14 16       	cp	r1, r20
    553a:	15 06       	cpc	r1, r21
    553c:	24 f4       	brge	.+8      	; 0x5546 <dtoa_prf+0x19c>
    553e:	9a 01       	movw	r18, r20
    5540:	2f 5f       	subi	r18, 0xFF	; 255
    5542:	3f 4f       	sbci	r19, 0xFF	; 255
    5544:	02 c0       	rjmp	.+4      	; 0x554a <dtoa_prf+0x1a0>
    5546:	21 e0       	ldi	r18, 0x01	; 1
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	26 0f       	add	r18, r22
    554c:	37 1f       	adc	r19, r23
    554e:	bb 20       	and	r11, r11
    5550:	29 f0       	breq	.+10     	; 0x555c <dtoa_prf+0x1b2>
    5552:	6b 2d       	mov	r22, r11
    5554:	70 e0       	ldi	r23, 0x00	; 0
    5556:	6f 5f       	subi	r22, 0xFF	; 255
    5558:	7f 4f       	sbci	r23, 0xFF	; 255
    555a:	02 c0       	rjmp	.+4      	; 0x5560 <dtoa_prf+0x1b6>
    555c:	60 e0       	ldi	r22, 0x00	; 0
    555e:	70 e0       	ldi	r23, 0x00	; 0
    5560:	26 0f       	add	r18, r22
    5562:	37 1f       	adc	r19, r23
    5564:	61 2f       	mov	r22, r17
    5566:	70 e0       	ldi	r23, 0x00	; 0
    5568:	26 17       	cp	r18, r22
    556a:	37 07       	cpc	r19, r23
    556c:	1c f4       	brge	.+6      	; 0x5574 <dtoa_prf+0x1ca>
    556e:	12 1b       	sub	r17, r18
    5570:	21 2f       	mov	r18, r17
    5572:	01 c0       	rjmp	.+2      	; 0x5576 <dtoa_prf+0x1cc>
    5574:	20 e0       	ldi	r18, 0x00	; 0
    5576:	3e 2d       	mov	r19, r14
    5578:	38 71       	andi	r19, 0x18	; 24
    557a:	59 f4       	brne	.+22     	; 0x5592 <dtoa_prf+0x1e8>
    557c:	d6 01       	movw	r26, r12
    557e:	32 2f       	mov	r19, r18
    5580:	60 e2       	ldi	r22, 0x20	; 32
    5582:	33 23       	and	r19, r19
    5584:	19 f0       	breq	.+6      	; 0x558c <dtoa_prf+0x1e2>
    5586:	6d 93       	st	X+, r22
    5588:	31 50       	subi	r19, 0x01	; 1
    558a:	fb cf       	rjmp	.-10     	; 0x5582 <dtoa_prf+0x1d8>
    558c:	c2 0e       	add	r12, r18
    558e:	d1 1c       	adc	r13, r1
    5590:	20 e0       	ldi	r18, 0x00	; 0
    5592:	ff 23       	and	r31, r31
    5594:	31 f0       	breq	.+12     	; 0x55a2 <dtoa_prf+0x1f8>
    5596:	d6 01       	movw	r26, r12
    5598:	9c 93       	st	X, r25
    559a:	b6 01       	movw	r22, r12
    559c:	6f 5f       	subi	r22, 0xFF	; 255
    559e:	7f 4f       	sbci	r23, 0xFF	; 255
    55a0:	6b 01       	movw	r12, r22
    55a2:	e1 11       	cpse	r30, r1
    55a4:	0b c0       	rjmp	.+22     	; 0x55bc <dtoa_prf+0x212>
    55a6:	f6 01       	movw	r30, r12
    55a8:	92 2f       	mov	r25, r18
    55aa:	30 e3       	ldi	r19, 0x30	; 48
    55ac:	99 23       	and	r25, r25
    55ae:	19 f0       	breq	.+6      	; 0x55b6 <dtoa_prf+0x20c>
    55b0:	31 93       	st	Z+, r19
    55b2:	91 50       	subi	r25, 0x01	; 1
    55b4:	fb cf       	rjmp	.-10     	; 0x55ac <dtoa_prf+0x202>
    55b6:	c2 0e       	add	r12, r18
    55b8:	d1 1c       	adc	r13, r1
    55ba:	20 e0       	ldi	r18, 0x00	; 0
    55bc:	9f 2d       	mov	r25, r15
    55be:	94 0f       	add	r25, r20
    55c0:	3a 81       	ldd	r19, Y+2	; 0x02
    55c2:	78 2f       	mov	r23, r24
    55c4:	70 71       	andi	r23, 0x10	; 16
    55c6:	a7 2e       	mov	r10, r23
    55c8:	84 ff       	sbrs	r24, 4
    55ca:	03 c0       	rjmp	.+6      	; 0x55d2 <dtoa_prf+0x228>
    55cc:	31 33       	cpi	r19, 0x31	; 49
    55ce:	09 f4       	brne	.+2      	; 0x55d2 <dtoa_prf+0x228>
    55d0:	91 50       	subi	r25, 0x01	; 1
    55d2:	19 16       	cp	r1, r25
    55d4:	24 f4       	brge	.+8      	; 0x55de <dtoa_prf+0x234>
    55d6:	99 30       	cpi	r25, 0x09	; 9
    55d8:	18 f0       	brcs	.+6      	; 0x55e0 <dtoa_prf+0x236>
    55da:	98 e0       	ldi	r25, 0x08	; 8
    55dc:	01 c0       	rjmp	.+2      	; 0x55e0 <dtoa_prf+0x236>
    55de:	91 e0       	ldi	r25, 0x01	; 1
    55e0:	e4 2f       	mov	r30, r20
    55e2:	85 2f       	mov	r24, r21
    55e4:	57 ff       	sbrs	r21, 7
    55e6:	02 c0       	rjmp	.+4      	; 0x55ec <dtoa_prf+0x242>
    55e8:	e0 e0       	ldi	r30, 0x00	; 0
    55ea:	80 e0       	ldi	r24, 0x00	; 0
    55ec:	6e 2f       	mov	r22, r30
    55ee:	78 2f       	mov	r23, r24
    55f0:	e0 e0       	ldi	r30, 0x00	; 0
    55f2:	f0 e0       	ldi	r31, 0x00	; 0
    55f4:	ae e2       	ldi	r26, 0x2E	; 46
    55f6:	9a 2e       	mov	r9, r26
    55f8:	3a 01       	movw	r6, r20
    55fa:	69 1a       	sub	r6, r25
    55fc:	71 08       	sbc	r7, r1
    55fe:	2a 01       	movw	r4, r20
    5600:	46 1a       	sub	r4, r22
    5602:	57 0a       	sbc	r5, r23
    5604:	0b 2d       	mov	r16, r11
    5606:	10 e0       	ldi	r17, 0x00	; 0
    5608:	11 95       	neg	r17
    560a:	01 95       	neg	r16
    560c:	11 09       	sbc	r17, r1
    560e:	6f 3f       	cpi	r22, 0xFF	; 255
    5610:	8f ef       	ldi	r24, 0xFF	; 255
    5612:	78 07       	cpc	r23, r24
    5614:	29 f4       	brne	.+10     	; 0x5620 <dtoa_prf+0x276>
    5616:	d6 01       	movw	r26, r12
    5618:	9c 92       	st	X, r9
    561a:	c6 01       	movw	r24, r12
    561c:	01 96       	adiw	r24, 0x01	; 1
    561e:	6c 01       	movw	r12, r24
    5620:	46 17       	cp	r20, r22
    5622:	57 07       	cpc	r21, r23
    5624:	84 f0       	brlt	.+32     	; 0x5646 <dtoa_prf+0x29c>
    5626:	66 16       	cp	r6, r22
    5628:	77 06       	cpc	r7, r23
    562a:	6c f4       	brge	.+26     	; 0x5646 <dtoa_prf+0x29c>
    562c:	7f 01       	movw	r14, r30
    562e:	e4 0c       	add	r14, r4
    5630:	f5 1c       	adc	r15, r5
    5632:	a1 e0       	ldi	r26, 0x01	; 1
    5634:	b0 e0       	ldi	r27, 0x00	; 0
    5636:	ac 0f       	add	r26, r28
    5638:	bd 1f       	adc	r27, r29
    563a:	ea 0e       	add	r14, r26
    563c:	fb 1e       	adc	r15, r27
    563e:	d7 01       	movw	r26, r14
    5640:	11 96       	adiw	r26, 0x01	; 1
    5642:	bc 90       	ld	r11, X
    5644:	02 c0       	rjmp	.+4      	; 0x564a <dtoa_prf+0x2a0>
    5646:	90 e3       	ldi	r25, 0x30	; 48
    5648:	b9 2e       	mov	r11, r25
    564a:	61 50       	subi	r22, 0x01	; 1
    564c:	71 09       	sbc	r23, r1
    564e:	31 96       	adiw	r30, 0x01	; 1
    5650:	c6 01       	movw	r24, r12
    5652:	01 96       	adiw	r24, 0x01	; 1
    5654:	7c 01       	movw	r14, r24
    5656:	60 17       	cp	r22, r16
    5658:	71 07       	cpc	r23, r17
    565a:	24 f0       	brlt	.+8      	; 0x5664 <dtoa_prf+0x2ba>
    565c:	d6 01       	movw	r26, r12
    565e:	bc 92       	st	X, r11
    5660:	6c 01       	movw	r12, r24
    5662:	d5 cf       	rjmp	.-86     	; 0x560e <dtoa_prf+0x264>
    5664:	64 17       	cp	r22, r20
    5666:	75 07       	cpc	r23, r21
    5668:	41 f4       	brne	.+16     	; 0x567a <dtoa_prf+0x2d0>
    566a:	36 33       	cpi	r19, 0x36	; 54
    566c:	20 f4       	brcc	.+8      	; 0x5676 <dtoa_prf+0x2cc>
    566e:	35 33       	cpi	r19, 0x35	; 53
    5670:	21 f4       	brne	.+8      	; 0x567a <dtoa_prf+0x2d0>
    5672:	a1 10       	cpse	r10, r1
    5674:	02 c0       	rjmp	.+4      	; 0x567a <dtoa_prf+0x2d0>
    5676:	81 e3       	ldi	r24, 0x31	; 49
    5678:	b8 2e       	mov	r11, r24
    567a:	f6 01       	movw	r30, r12
    567c:	b0 82       	st	Z, r11
    567e:	f7 01       	movw	r30, r14
    5680:	82 2f       	mov	r24, r18
    5682:	90 e2       	ldi	r25, 0x20	; 32
    5684:	88 23       	and	r24, r24
    5686:	19 f0       	breq	.+6      	; 0x568e <dtoa_prf+0x2e4>
    5688:	91 93       	st	Z+, r25
    568a:	81 50       	subi	r24, 0x01	; 1
    568c:	fb cf       	rjmp	.-10     	; 0x5684 <dtoa_prf+0x2da>
    568e:	f7 01       	movw	r30, r14
    5690:	e2 0f       	add	r30, r18
    5692:	f1 1d       	adc	r31, r1
    5694:	10 82       	st	Z, r1
    5696:	80 e0       	ldi	r24, 0x00	; 0
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	29 96       	adiw	r28, 0x09	; 9
    569c:	0f b6       	in	r0, 0x3f	; 63
    569e:	f8 94       	cli
    56a0:	de bf       	out	0x3e, r29	; 62
    56a2:	0f be       	out	0x3f, r0	; 63
    56a4:	cd bf       	out	0x3d, r28	; 61
    56a6:	df 91       	pop	r29
    56a8:	cf 91       	pop	r28
    56aa:	1f 91       	pop	r17
    56ac:	0f 91       	pop	r16
    56ae:	ff 90       	pop	r15
    56b0:	ef 90       	pop	r14
    56b2:	df 90       	pop	r13
    56b4:	cf 90       	pop	r12
    56b6:	bf 90       	pop	r11
    56b8:	af 90       	pop	r10
    56ba:	9f 90       	pop	r9
    56bc:	7f 90       	pop	r7
    56be:	6f 90       	pop	r6
    56c0:	5f 90       	pop	r5
    56c2:	4f 90       	pop	r4
    56c4:	08 95       	ret

000056c6 <strtod>:
    56c6:	6f 92       	push	r6
    56c8:	7f 92       	push	r7
    56ca:	8f 92       	push	r8
    56cc:	9f 92       	push	r9
    56ce:	af 92       	push	r10
    56d0:	bf 92       	push	r11
    56d2:	cf 92       	push	r12
    56d4:	df 92       	push	r13
    56d6:	ef 92       	push	r14
    56d8:	ff 92       	push	r15
    56da:	0f 93       	push	r16
    56dc:	1f 93       	push	r17
    56de:	cf 93       	push	r28
    56e0:	df 93       	push	r29
    56e2:	ec 01       	movw	r28, r24
    56e4:	7b 01       	movw	r14, r22
    56e6:	61 15       	cp	r22, r1
    56e8:	71 05       	cpc	r23, r1
    56ea:	19 f0       	breq	.+6      	; 0x56f2 <strtod+0x2c>
    56ec:	db 01       	movw	r26, r22
    56ee:	8d 93       	st	X+, r24
    56f0:	9c 93       	st	X, r25
    56f2:	8e 01       	movw	r16, r28
    56f4:	0f 5f       	subi	r16, 0xFF	; 255
    56f6:	1f 4f       	sbci	r17, 0xFF	; 255
    56f8:	78 80       	ld	r7, Y
    56fa:	87 2d       	mov	r24, r7
    56fc:	90 e0       	ldi	r25, 0x00	; 0
    56fe:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <isspace>
    5702:	89 2b       	or	r24, r25
    5704:	11 f0       	breq	.+4      	; 0x570a <strtod+0x44>
    5706:	e8 01       	movw	r28, r16
    5708:	f4 cf       	rjmp	.-24     	; 0x56f2 <strtod+0x2c>
    570a:	bd e2       	ldi	r27, 0x2D	; 45
    570c:	7b 12       	cpse	r7, r27
    570e:	05 c0       	rjmp	.+10     	; 0x571a <strtod+0x54>
    5710:	0f 5f       	subi	r16, 0xFF	; 255
    5712:	1f 4f       	sbci	r17, 0xFF	; 255
    5714:	79 80       	ldd	r7, Y+1	; 0x01
    5716:	c1 e0       	ldi	r28, 0x01	; 1
    5718:	08 c0       	rjmp	.+16     	; 0x572a <strtod+0x64>
    571a:	eb e2       	ldi	r30, 0x2B	; 43
    571c:	7e 12       	cpse	r7, r30
    571e:	04 c0       	rjmp	.+8      	; 0x5728 <strtod+0x62>
    5720:	8e 01       	movw	r16, r28
    5722:	0e 5f       	subi	r16, 0xFE	; 254
    5724:	1f 4f       	sbci	r17, 0xFF	; 255
    5726:	79 80       	ldd	r7, Y+1	; 0x01
    5728:	c0 e0       	ldi	r28, 0x00	; 0
    572a:	68 01       	movw	r12, r16
    572c:	f1 e0       	ldi	r31, 0x01	; 1
    572e:	cf 1a       	sub	r12, r31
    5730:	d1 08       	sbc	r13, r1
    5732:	43 e0       	ldi	r20, 0x03	; 3
    5734:	50 e0       	ldi	r21, 0x00	; 0
    5736:	6c e9       	ldi	r22, 0x9C	; 156
    5738:	70 e0       	ldi	r23, 0x00	; 0
    573a:	c6 01       	movw	r24, r12
    573c:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <strncasecmp_P>
    5740:	89 2b       	or	r24, r25
    5742:	f1 f4       	brne	.+60     	; 0x5780 <strtod+0xba>
    5744:	68 01       	movw	r12, r16
    5746:	22 e0       	ldi	r18, 0x02	; 2
    5748:	c2 0e       	add	r12, r18
    574a:	d1 1c       	adc	r13, r1
    574c:	45 e0       	ldi	r20, 0x05	; 5
    574e:	50 e0       	ldi	r21, 0x00	; 0
    5750:	67 e9       	ldi	r22, 0x97	; 151
    5752:	70 e0       	ldi	r23, 0x00	; 0
    5754:	c6 01       	movw	r24, r12
    5756:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <strncasecmp_P>
    575a:	89 2b       	or	r24, r25
    575c:	21 f4       	brne	.+8      	; 0x5766 <strtod+0xa0>
    575e:	68 01       	movw	r12, r16
    5760:	87 e0       	ldi	r24, 0x07	; 7
    5762:	c8 0e       	add	r12, r24
    5764:	d1 1c       	adc	r13, r1
    5766:	e1 14       	cp	r14, r1
    5768:	f1 04       	cpc	r15, r1
    576a:	19 f0       	breq	.+6      	; 0x5772 <strtod+0xac>
    576c:	d7 01       	movw	r26, r14
    576e:	cd 92       	st	X+, r12
    5770:	dc 92       	st	X, r13
    5772:	c1 11       	cpse	r28, r1
    5774:	ff c0       	rjmp	.+510    	; 0x5974 <strtod+0x2ae>
    5776:	60 e0       	ldi	r22, 0x00	; 0
    5778:	70 e0       	ldi	r23, 0x00	; 0
    577a:	80 e8       	ldi	r24, 0x80	; 128
    577c:	9f e7       	ldi	r25, 0x7F	; 127
    577e:	03 c1       	rjmp	.+518    	; 0x5986 <strtod+0x2c0>
    5780:	43 e0       	ldi	r20, 0x03	; 3
    5782:	50 e0       	ldi	r21, 0x00	; 0
    5784:	64 e9       	ldi	r22, 0x94	; 148
    5786:	70 e0       	ldi	r23, 0x00	; 0
    5788:	c6 01       	movw	r24, r12
    578a:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <strncasecmp_P>
    578e:	89 2b       	or	r24, r25
    5790:	51 f4       	brne	.+20     	; 0x57a6 <strtod+0xe0>
    5792:	e1 14       	cp	r14, r1
    5794:	f1 04       	cpc	r15, r1
    5796:	09 f4       	brne	.+2      	; 0x579a <strtod+0xd4>
    5798:	f2 c0       	rjmp	.+484    	; 0x597e <strtod+0x2b8>
    579a:	0e 5f       	subi	r16, 0xFE	; 254
    579c:	1f 4f       	sbci	r17, 0xFF	; 255
    579e:	f7 01       	movw	r30, r14
    57a0:	11 83       	std	Z+1, r17	; 0x01
    57a2:	00 83       	st	Z, r16
    57a4:	ec c0       	rjmp	.+472    	; 0x597e <strtod+0x2b8>
    57a6:	68 01       	movw	r12, r16
    57a8:	60 e0       	ldi	r22, 0x00	; 0
    57aa:	70 e0       	ldi	r23, 0x00	; 0
    57ac:	cb 01       	movw	r24, r22
    57ae:	00 e0       	ldi	r16, 0x00	; 0
    57b0:	10 e0       	ldi	r17, 0x00	; 0
    57b2:	f6 01       	movw	r30, r12
    57b4:	d0 ed       	ldi	r29, 0xD0	; 208
    57b6:	d7 0d       	add	r29, r7
    57b8:	da 30       	cpi	r29, 0x0A	; 10
    57ba:	58 f5       	brcc	.+86     	; 0x5812 <strtod+0x14c>
    57bc:	2c 2f       	mov	r18, r28
    57be:	22 60       	ori	r18, 0x02	; 2
    57c0:	62 2e       	mov	r6, r18
    57c2:	2c 2f       	mov	r18, r28
    57c4:	28 70       	andi	r18, 0x08	; 8
    57c6:	c2 ff       	sbrs	r28, 2
    57c8:	05 c0       	rjmp	.+10     	; 0x57d4 <strtod+0x10e>
    57ca:	21 11       	cpse	r18, r1
    57cc:	28 c0       	rjmp	.+80     	; 0x581e <strtod+0x158>
    57ce:	0f 5f       	subi	r16, 0xFF	; 255
    57d0:	1f 4f       	sbci	r17, 0xFF	; 255
    57d2:	25 c0       	rjmp	.+74     	; 0x581e <strtod+0x158>
    57d4:	22 23       	and	r18, r18
    57d6:	11 f0       	breq	.+4      	; 0x57dc <strtod+0x116>
    57d8:	01 50       	subi	r16, 0x01	; 1
    57da:	11 09       	sbc	r17, r1
    57dc:	a5 e0       	ldi	r26, 0x05	; 5
    57de:	b0 e0       	ldi	r27, 0x00	; 0
    57e0:	9b 01       	movw	r18, r22
    57e2:	ac 01       	movw	r20, r24
    57e4:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__muluhisi3>
    57e8:	4b 01       	movw	r8, r22
    57ea:	5c 01       	movw	r10, r24
    57ec:	88 0c       	add	r8, r8
    57ee:	99 1c       	adc	r9, r9
    57f0:	aa 1c       	adc	r10, r10
    57f2:	bb 1c       	adc	r11, r11
    57f4:	c5 01       	movw	r24, r10
    57f6:	b4 01       	movw	r22, r8
    57f8:	6d 0f       	add	r22, r29
    57fa:	71 1d       	adc	r23, r1
    57fc:	81 1d       	adc	r24, r1
    57fe:	91 1d       	adc	r25, r1
    5800:	68 39       	cpi	r22, 0x98	; 152
    5802:	a9 e9       	ldi	r26, 0x99	; 153
    5804:	7a 07       	cpc	r23, r26
    5806:	8a 07       	cpc	r24, r26
    5808:	a9 e1       	ldi	r26, 0x19	; 25
    580a:	9a 07       	cpc	r25, r26
    580c:	40 f0       	brcs	.+16     	; 0x581e <strtod+0x158>
    580e:	c6 60       	ori	r28, 0x06	; 6
    5810:	05 c0       	rjmp	.+10     	; 0x581c <strtod+0x156>
    5812:	de 3f       	cpi	r29, 0xFE	; 254
    5814:	51 f4       	brne	.+20     	; 0x582a <strtod+0x164>
    5816:	c3 fd       	sbrc	r28, 3
    5818:	44 c0       	rjmp	.+136    	; 0x58a2 <strtod+0x1dc>
    581a:	c8 60       	ori	r28, 0x08	; 8
    581c:	6c 2e       	mov	r6, r28
    581e:	bf ef       	ldi	r27, 0xFF	; 255
    5820:	cb 1a       	sub	r12, r27
    5822:	db 0a       	sbc	r13, r27
    5824:	70 80       	ld	r7, Z
    5826:	c6 2d       	mov	r28, r6
    5828:	c4 cf       	rjmp	.-120    	; 0x57b2 <strtod+0xec>
    582a:	2d 2f       	mov	r18, r29
    582c:	2f 7d       	andi	r18, 0xDF	; 223
    582e:	25 31       	cpi	r18, 0x15	; 21
    5830:	c1 f5       	brne	.+112    	; 0x58a2 <strtod+0x1dc>
    5832:	40 81       	ld	r20, Z
    5834:	4d 32       	cpi	r20, 0x2D	; 45
    5836:	11 f4       	brne	.+4      	; 0x583c <strtod+0x176>
    5838:	c0 61       	ori	r28, 0x10	; 16
    583a:	06 c0       	rjmp	.+12     	; 0x5848 <strtod+0x182>
    583c:	4b 32       	cpi	r20, 0x2B	; 43
    583e:	21 f0       	breq	.+8      	; 0x5848 <strtod+0x182>
    5840:	31 96       	adiw	r30, 0x01	; 1
    5842:	21 e0       	ldi	r18, 0x01	; 1
    5844:	30 e0       	ldi	r19, 0x00	; 0
    5846:	06 c0       	rjmp	.+12     	; 0x5854 <strtod+0x18e>
    5848:	32 96       	adiw	r30, 0x02	; 2
    584a:	d6 01       	movw	r26, r12
    584c:	11 96       	adiw	r26, 0x01	; 1
    584e:	4c 91       	ld	r20, X
    5850:	22 e0       	ldi	r18, 0x02	; 2
    5852:	30 e0       	ldi	r19, 0x00	; 0
    5854:	a0 ed       	ldi	r26, 0xD0	; 208
    5856:	a4 0f       	add	r26, r20
    5858:	aa 30       	cpi	r26, 0x0A	; 10
    585a:	18 f0       	brcs	.+6      	; 0x5862 <strtod+0x19c>
    585c:	e2 1b       	sub	r30, r18
    585e:	f3 0b       	sbc	r31, r19
    5860:	20 c0       	rjmp	.+64     	; 0x58a2 <strtod+0x1dc>
    5862:	40 e0       	ldi	r20, 0x00	; 0
    5864:	50 e0       	ldi	r21, 0x00	; 0
    5866:	40 38       	cpi	r20, 0x80	; 128
    5868:	bc e0       	ldi	r27, 0x0C	; 12
    586a:	5b 07       	cpc	r21, r27
    586c:	5c f4       	brge	.+22     	; 0x5884 <strtod+0x1be>
    586e:	9a 01       	movw	r18, r20
    5870:	22 0f       	add	r18, r18
    5872:	33 1f       	adc	r19, r19
    5874:	22 0f       	add	r18, r18
    5876:	33 1f       	adc	r19, r19
    5878:	42 0f       	add	r20, r18
    587a:	53 1f       	adc	r21, r19
    587c:	44 0f       	add	r20, r20
    587e:	55 1f       	adc	r21, r21
    5880:	4a 0f       	add	r20, r26
    5882:	51 1d       	adc	r21, r1
    5884:	31 96       	adiw	r30, 0x01	; 1
    5886:	df 01       	movw	r26, r30
    5888:	11 97       	sbiw	r26, 0x01	; 1
    588a:	2c 91       	ld	r18, X
    588c:	a0 ed       	ldi	r26, 0xD0	; 208
    588e:	a2 0f       	add	r26, r18
    5890:	aa 30       	cpi	r26, 0x0A	; 10
    5892:	48 f3       	brcs	.-46     	; 0x5866 <strtod+0x1a0>
    5894:	c4 ff       	sbrs	r28, 4
    5896:	03 c0       	rjmp	.+6      	; 0x589e <strtod+0x1d8>
    5898:	51 95       	neg	r21
    589a:	41 95       	neg	r20
    589c:	51 09       	sbc	r21, r1
    589e:	04 0f       	add	r16, r20
    58a0:	15 1f       	adc	r17, r21
    58a2:	c1 ff       	sbrs	r28, 1
    58a4:	07 c0       	rjmp	.+14     	; 0x58b4 <strtod+0x1ee>
    58a6:	e1 14       	cp	r14, r1
    58a8:	f1 04       	cpc	r15, r1
    58aa:	21 f0       	breq	.+8      	; 0x58b4 <strtod+0x1ee>
    58ac:	31 97       	sbiw	r30, 0x01	; 1
    58ae:	d7 01       	movw	r26, r14
    58b0:	ed 93       	st	X+, r30
    58b2:	fc 93       	st	X, r31
    58b4:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <__floatunsisf>
    58b8:	c3 70       	andi	r28, 0x03	; 3
    58ba:	c3 30       	cpi	r28, 0x03	; 3
    58bc:	19 f0       	breq	.+6      	; 0x58c4 <strtod+0x1fe>
    58be:	6b 01       	movw	r12, r22
    58c0:	7c 01       	movw	r14, r24
    58c2:	06 c0       	rjmp	.+12     	; 0x58d0 <strtod+0x20a>
    58c4:	6b 01       	movw	r12, r22
    58c6:	7c 01       	movw	r14, r24
    58c8:	f7 fa       	bst	r15, 7
    58ca:	f0 94       	com	r15
    58cc:	f7 f8       	bld	r15, 7
    58ce:	f0 94       	com	r15
    58d0:	20 e0       	ldi	r18, 0x00	; 0
    58d2:	30 e0       	ldi	r19, 0x00	; 0
    58d4:	a9 01       	movw	r20, r18
    58d6:	c7 01       	movw	r24, r14
    58d8:	b6 01       	movw	r22, r12
    58da:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    58de:	88 23       	and	r24, r24
    58e0:	09 f4       	brne	.+2      	; 0x58e4 <strtod+0x21e>
    58e2:	45 c0       	rjmp	.+138    	; 0x596e <strtod+0x2a8>
    58e4:	17 ff       	sbrs	r17, 7
    58e6:	06 c0       	rjmp	.+12     	; 0x58f4 <strtod+0x22e>
    58e8:	11 95       	neg	r17
    58ea:	01 95       	neg	r16
    58ec:	11 09       	sbc	r17, r1
    58ee:	c3 eb       	ldi	r28, 0xB3	; 179
    58f0:	d0 e0       	ldi	r29, 0x00	; 0
    58f2:	02 c0       	rjmp	.+4      	; 0x58f8 <strtod+0x232>
    58f4:	cb ec       	ldi	r28, 0xCB	; 203
    58f6:	d0 e0       	ldi	r29, 0x00	; 0
    58f8:	5e 01       	movw	r10, r28
    58fa:	b8 e1       	ldi	r27, 0x18	; 24
    58fc:	ab 1a       	sub	r10, r27
    58fe:	b1 08       	sbc	r11, r1
    5900:	46 01       	movw	r8, r12
    5902:	be 2d       	mov	r27, r14
    5904:	af 2d       	mov	r26, r15
    5906:	90 e2       	ldi	r25, 0x20	; 32
    5908:	e9 2e       	mov	r14, r25
    590a:	f1 2c       	mov	r15, r1
    590c:	0e 15       	cp	r16, r14
    590e:	1f 05       	cpc	r17, r15
    5910:	84 f0       	brlt	.+32     	; 0x5932 <strtod+0x26c>
    5912:	fe 01       	movw	r30, r28
    5914:	25 91       	lpm	r18, Z+
    5916:	35 91       	lpm	r19, Z+
    5918:	45 91       	lpm	r20, Z+
    591a:	54 91       	lpm	r21, Z
    591c:	b4 01       	movw	r22, r8
    591e:	8b 2f       	mov	r24, r27
    5920:	9a 2f       	mov	r25, r26
    5922:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__mulsf3>
    5926:	4b 01       	movw	r8, r22
    5928:	b8 2f       	mov	r27, r24
    592a:	a9 2f       	mov	r26, r25
    592c:	0e 19       	sub	r16, r14
    592e:	1f 09       	sbc	r17, r15
    5930:	ed cf       	rjmp	.-38     	; 0x590c <strtod+0x246>
    5932:	24 97       	sbiw	r28, 0x04	; 4
    5934:	f5 94       	asr	r15
    5936:	e7 94       	ror	r14
    5938:	ca 15       	cp	r28, r10
    593a:	db 05       	cpc	r29, r11
    593c:	39 f7       	brne	.-50     	; 0x590c <strtod+0x246>
    593e:	64 01       	movw	r12, r8
    5940:	eb 2e       	mov	r14, r27
    5942:	fa 2e       	mov	r15, r26
    5944:	8e 2d       	mov	r24, r14
    5946:	88 0f       	add	r24, r24
    5948:	8f 2d       	mov	r24, r15
    594a:	88 1f       	adc	r24, r24
    594c:	8f 3f       	cpi	r24, 0xFF	; 255
    594e:	49 f0       	breq	.+18     	; 0x5962 <strtod+0x29c>
    5950:	20 e0       	ldi	r18, 0x00	; 0
    5952:	30 e0       	ldi	r19, 0x00	; 0
    5954:	a9 01       	movw	r20, r18
    5956:	c7 01       	movw	r24, r14
    5958:	b6 01       	movw	r22, r12
    595a:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <__cmpsf2>
    595e:	81 11       	cpse	r24, r1
    5960:	06 c0       	rjmp	.+12     	; 0x596e <strtod+0x2a8>
    5962:	82 e2       	ldi	r24, 0x22	; 34
    5964:	90 e0       	ldi	r25, 0x00	; 0
    5966:	90 93 72 02 	sts	0x0272, r25
    596a:	80 93 71 02 	sts	0x0271, r24
    596e:	c7 01       	movw	r24, r14
    5970:	b6 01       	movw	r22, r12
    5972:	09 c0       	rjmp	.+18     	; 0x5986 <strtod+0x2c0>
    5974:	60 e0       	ldi	r22, 0x00	; 0
    5976:	70 e0       	ldi	r23, 0x00	; 0
    5978:	80 e8       	ldi	r24, 0x80	; 128
    597a:	9f ef       	ldi	r25, 0xFF	; 255
    597c:	04 c0       	rjmp	.+8      	; 0x5986 <strtod+0x2c0>
    597e:	60 e0       	ldi	r22, 0x00	; 0
    5980:	70 e0       	ldi	r23, 0x00	; 0
    5982:	80 ec       	ldi	r24, 0xC0	; 192
    5984:	9f e7       	ldi	r25, 0x7F	; 127
    5986:	df 91       	pop	r29
    5988:	cf 91       	pop	r28
    598a:	1f 91       	pop	r17
    598c:	0f 91       	pop	r16
    598e:	ff 90       	pop	r15
    5990:	ef 90       	pop	r14
    5992:	df 90       	pop	r13
    5994:	cf 90       	pop	r12
    5996:	bf 90       	pop	r11
    5998:	af 90       	pop	r10
    599a:	9f 90       	pop	r9
    599c:	8f 90       	pop	r8
    599e:	7f 90       	pop	r7
    59a0:	6f 90       	pop	r6
    59a2:	08 95       	ret

000059a4 <__ftoa_engine>:
    59a4:	28 30       	cpi	r18, 0x08	; 8
    59a6:	08 f0       	brcs	.+2      	; 0x59aa <__ftoa_engine+0x6>
    59a8:	27 e0       	ldi	r18, 0x07	; 7
    59aa:	33 27       	eor	r19, r19
    59ac:	da 01       	movw	r26, r20
    59ae:	99 0f       	add	r25, r25
    59b0:	31 1d       	adc	r19, r1
    59b2:	87 fd       	sbrc	r24, 7
    59b4:	91 60       	ori	r25, 0x01	; 1
    59b6:	00 96       	adiw	r24, 0x00	; 0
    59b8:	61 05       	cpc	r22, r1
    59ba:	71 05       	cpc	r23, r1
    59bc:	39 f4       	brne	.+14     	; 0x59cc <__ftoa_engine+0x28>
    59be:	32 60       	ori	r19, 0x02	; 2
    59c0:	2e 5f       	subi	r18, 0xFE	; 254
    59c2:	3d 93       	st	X+, r19
    59c4:	30 e3       	ldi	r19, 0x30	; 48
    59c6:	2a 95       	dec	r18
    59c8:	e1 f7       	brne	.-8      	; 0x59c2 <__ftoa_engine+0x1e>
    59ca:	08 95       	ret
    59cc:	9f 3f       	cpi	r25, 0xFF	; 255
    59ce:	30 f0       	brcs	.+12     	; 0x59dc <__ftoa_engine+0x38>
    59d0:	80 38       	cpi	r24, 0x80	; 128
    59d2:	71 05       	cpc	r23, r1
    59d4:	61 05       	cpc	r22, r1
    59d6:	09 f0       	breq	.+2      	; 0x59da <__ftoa_engine+0x36>
    59d8:	3c 5f       	subi	r19, 0xFC	; 252
    59da:	3c 5f       	subi	r19, 0xFC	; 252
    59dc:	3d 93       	st	X+, r19
    59de:	91 30       	cpi	r25, 0x01	; 1
    59e0:	08 f0       	brcs	.+2      	; 0x59e4 <__ftoa_engine+0x40>
    59e2:	80 68       	ori	r24, 0x80	; 128
    59e4:	91 1d       	adc	r25, r1
    59e6:	df 93       	push	r29
    59e8:	cf 93       	push	r28
    59ea:	1f 93       	push	r17
    59ec:	0f 93       	push	r16
    59ee:	ff 92       	push	r15
    59f0:	ef 92       	push	r14
    59f2:	19 2f       	mov	r17, r25
    59f4:	98 7f       	andi	r25, 0xF8	; 248
    59f6:	96 95       	lsr	r25
    59f8:	e9 2f       	mov	r30, r25
    59fa:	96 95       	lsr	r25
    59fc:	96 95       	lsr	r25
    59fe:	e9 0f       	add	r30, r25
    5a00:	ff 27       	eor	r31, r31
    5a02:	e7 5d       	subi	r30, 0xD7	; 215
    5a04:	fe 4f       	sbci	r31, 0xFE	; 254
    5a06:	99 27       	eor	r25, r25
    5a08:	33 27       	eor	r19, r19
    5a0a:	ee 24       	eor	r14, r14
    5a0c:	ff 24       	eor	r15, r15
    5a0e:	a7 01       	movw	r20, r14
    5a10:	e7 01       	movw	r28, r14
    5a12:	05 90       	lpm	r0, Z+
    5a14:	08 94       	sec
    5a16:	07 94       	ror	r0
    5a18:	28 f4       	brcc	.+10     	; 0x5a24 <__ftoa_engine+0x80>
    5a1a:	36 0f       	add	r19, r22
    5a1c:	e7 1e       	adc	r14, r23
    5a1e:	f8 1e       	adc	r15, r24
    5a20:	49 1f       	adc	r20, r25
    5a22:	51 1d       	adc	r21, r1
    5a24:	66 0f       	add	r22, r22
    5a26:	77 1f       	adc	r23, r23
    5a28:	88 1f       	adc	r24, r24
    5a2a:	99 1f       	adc	r25, r25
    5a2c:	06 94       	lsr	r0
    5a2e:	a1 f7       	brne	.-24     	; 0x5a18 <__ftoa_engine+0x74>
    5a30:	05 90       	lpm	r0, Z+
    5a32:	07 94       	ror	r0
    5a34:	28 f4       	brcc	.+10     	; 0x5a40 <__ftoa_engine+0x9c>
    5a36:	e7 0e       	add	r14, r23
    5a38:	f8 1e       	adc	r15, r24
    5a3a:	49 1f       	adc	r20, r25
    5a3c:	56 1f       	adc	r21, r22
    5a3e:	c1 1d       	adc	r28, r1
    5a40:	77 0f       	add	r23, r23
    5a42:	88 1f       	adc	r24, r24
    5a44:	99 1f       	adc	r25, r25
    5a46:	66 1f       	adc	r22, r22
    5a48:	06 94       	lsr	r0
    5a4a:	a1 f7       	brne	.-24     	; 0x5a34 <__ftoa_engine+0x90>
    5a4c:	05 90       	lpm	r0, Z+
    5a4e:	07 94       	ror	r0
    5a50:	28 f4       	brcc	.+10     	; 0x5a5c <__ftoa_engine+0xb8>
    5a52:	f8 0e       	add	r15, r24
    5a54:	49 1f       	adc	r20, r25
    5a56:	56 1f       	adc	r21, r22
    5a58:	c7 1f       	adc	r28, r23
    5a5a:	d1 1d       	adc	r29, r1
    5a5c:	88 0f       	add	r24, r24
    5a5e:	99 1f       	adc	r25, r25
    5a60:	66 1f       	adc	r22, r22
    5a62:	77 1f       	adc	r23, r23
    5a64:	06 94       	lsr	r0
    5a66:	a1 f7       	brne	.-24     	; 0x5a50 <__ftoa_engine+0xac>
    5a68:	05 90       	lpm	r0, Z+
    5a6a:	07 94       	ror	r0
    5a6c:	20 f4       	brcc	.+8      	; 0x5a76 <__ftoa_engine+0xd2>
    5a6e:	49 0f       	add	r20, r25
    5a70:	56 1f       	adc	r21, r22
    5a72:	c7 1f       	adc	r28, r23
    5a74:	d8 1f       	adc	r29, r24
    5a76:	99 0f       	add	r25, r25
    5a78:	66 1f       	adc	r22, r22
    5a7a:	77 1f       	adc	r23, r23
    5a7c:	88 1f       	adc	r24, r24
    5a7e:	06 94       	lsr	r0
    5a80:	a9 f7       	brne	.-22     	; 0x5a6c <__ftoa_engine+0xc8>
    5a82:	84 91       	lpm	r24, Z
    5a84:	10 95       	com	r17
    5a86:	17 70       	andi	r17, 0x07	; 7
    5a88:	41 f0       	breq	.+16     	; 0x5a9a <__ftoa_engine+0xf6>
    5a8a:	d6 95       	lsr	r29
    5a8c:	c7 95       	ror	r28
    5a8e:	57 95       	ror	r21
    5a90:	47 95       	ror	r20
    5a92:	f7 94       	ror	r15
    5a94:	e7 94       	ror	r14
    5a96:	1a 95       	dec	r17
    5a98:	c1 f7       	brne	.-16     	; 0x5a8a <__ftoa_engine+0xe6>
    5a9a:	ef ec       	ldi	r30, 0xCF	; 207
    5a9c:	f0 e0       	ldi	r31, 0x00	; 0
    5a9e:	68 94       	set
    5aa0:	15 90       	lpm	r1, Z+
    5aa2:	15 91       	lpm	r17, Z+
    5aa4:	35 91       	lpm	r19, Z+
    5aa6:	65 91       	lpm	r22, Z+
    5aa8:	95 91       	lpm	r25, Z+
    5aaa:	05 90       	lpm	r0, Z+
    5aac:	7f e2       	ldi	r23, 0x2F	; 47
    5aae:	73 95       	inc	r23
    5ab0:	e1 18       	sub	r14, r1
    5ab2:	f1 0a       	sbc	r15, r17
    5ab4:	43 0b       	sbc	r20, r19
    5ab6:	56 0b       	sbc	r21, r22
    5ab8:	c9 0b       	sbc	r28, r25
    5aba:	d0 09       	sbc	r29, r0
    5abc:	c0 f7       	brcc	.-16     	; 0x5aae <__ftoa_engine+0x10a>
    5abe:	e1 0c       	add	r14, r1
    5ac0:	f1 1e       	adc	r15, r17
    5ac2:	43 1f       	adc	r20, r19
    5ac4:	56 1f       	adc	r21, r22
    5ac6:	c9 1f       	adc	r28, r25
    5ac8:	d0 1d       	adc	r29, r0
    5aca:	7e f4       	brtc	.+30     	; 0x5aea <__ftoa_engine+0x146>
    5acc:	70 33       	cpi	r23, 0x30	; 48
    5ace:	11 f4       	brne	.+4      	; 0x5ad4 <__ftoa_engine+0x130>
    5ad0:	8a 95       	dec	r24
    5ad2:	e6 cf       	rjmp	.-52     	; 0x5aa0 <__ftoa_engine+0xfc>
    5ad4:	e8 94       	clt
    5ad6:	01 50       	subi	r16, 0x01	; 1
    5ad8:	30 f0       	brcs	.+12     	; 0x5ae6 <__ftoa_engine+0x142>
    5ada:	08 0f       	add	r16, r24
    5adc:	0a f4       	brpl	.+2      	; 0x5ae0 <__ftoa_engine+0x13c>
    5ade:	00 27       	eor	r16, r16
    5ae0:	02 17       	cp	r16, r18
    5ae2:	08 f4       	brcc	.+2      	; 0x5ae6 <__ftoa_engine+0x142>
    5ae4:	20 2f       	mov	r18, r16
    5ae6:	23 95       	inc	r18
    5ae8:	02 2f       	mov	r16, r18
    5aea:	7a 33       	cpi	r23, 0x3A	; 58
    5aec:	28 f0       	brcs	.+10     	; 0x5af8 <__ftoa_engine+0x154>
    5aee:	79 e3       	ldi	r23, 0x39	; 57
    5af0:	7d 93       	st	X+, r23
    5af2:	2a 95       	dec	r18
    5af4:	e9 f7       	brne	.-6      	; 0x5af0 <__ftoa_engine+0x14c>
    5af6:	10 c0       	rjmp	.+32     	; 0x5b18 <__ftoa_engine+0x174>
    5af8:	7d 93       	st	X+, r23
    5afa:	2a 95       	dec	r18
    5afc:	89 f6       	brne	.-94     	; 0x5aa0 <__ftoa_engine+0xfc>
    5afe:	06 94       	lsr	r0
    5b00:	97 95       	ror	r25
    5b02:	67 95       	ror	r22
    5b04:	37 95       	ror	r19
    5b06:	17 95       	ror	r17
    5b08:	17 94       	ror	r1
    5b0a:	e1 18       	sub	r14, r1
    5b0c:	f1 0a       	sbc	r15, r17
    5b0e:	43 0b       	sbc	r20, r19
    5b10:	56 0b       	sbc	r21, r22
    5b12:	c9 0b       	sbc	r28, r25
    5b14:	d0 09       	sbc	r29, r0
    5b16:	98 f0       	brcs	.+38     	; 0x5b3e <__ftoa_engine+0x19a>
    5b18:	23 95       	inc	r18
    5b1a:	7e 91       	ld	r23, -X
    5b1c:	73 95       	inc	r23
    5b1e:	7a 33       	cpi	r23, 0x3A	; 58
    5b20:	08 f0       	brcs	.+2      	; 0x5b24 <__ftoa_engine+0x180>
    5b22:	70 e3       	ldi	r23, 0x30	; 48
    5b24:	7c 93       	st	X, r23
    5b26:	20 13       	cpse	r18, r16
    5b28:	b8 f7       	brcc	.-18     	; 0x5b18 <__ftoa_engine+0x174>
    5b2a:	7e 91       	ld	r23, -X
    5b2c:	70 61       	ori	r23, 0x10	; 16
    5b2e:	7d 93       	st	X+, r23
    5b30:	30 f0       	brcs	.+12     	; 0x5b3e <__ftoa_engine+0x19a>
    5b32:	83 95       	inc	r24
    5b34:	71 e3       	ldi	r23, 0x31	; 49
    5b36:	7d 93       	st	X+, r23
    5b38:	70 e3       	ldi	r23, 0x30	; 48
    5b3a:	2a 95       	dec	r18
    5b3c:	e1 f7       	brne	.-8      	; 0x5b36 <__ftoa_engine+0x192>
    5b3e:	11 24       	eor	r1, r1
    5b40:	ef 90       	pop	r14
    5b42:	ff 90       	pop	r15
    5b44:	0f 91       	pop	r16
    5b46:	1f 91       	pop	r17
    5b48:	cf 91       	pop	r28
    5b4a:	df 91       	pop	r29
    5b4c:	99 27       	eor	r25, r25
    5b4e:	87 fd       	sbrc	r24, 7
    5b50:	90 95       	com	r25
    5b52:	08 95       	ret

00005b54 <isspace>:
    5b54:	91 11       	cpse	r25, r1
    5b56:	0c 94 db 2d 	jmp	0x5bb6	; 0x5bb6 <__ctype_isfalse>
    5b5a:	80 32       	cpi	r24, 0x20	; 32
    5b5c:	19 f0       	breq	.+6      	; 0x5b64 <isspace+0x10>
    5b5e:	89 50       	subi	r24, 0x09	; 9
    5b60:	85 50       	subi	r24, 0x05	; 5
    5b62:	c8 f7       	brcc	.-14     	; 0x5b56 <isspace+0x2>
    5b64:	08 95       	ret

00005b66 <strncasecmp_P>:
    5b66:	fb 01       	movw	r30, r22
    5b68:	dc 01       	movw	r26, r24
    5b6a:	41 50       	subi	r20, 0x01	; 1
    5b6c:	50 40       	sbci	r21, 0x00	; 0
    5b6e:	88 f0       	brcs	.+34     	; 0x5b92 <strncasecmp_P+0x2c>
    5b70:	8d 91       	ld	r24, X+
    5b72:	81 34       	cpi	r24, 0x41	; 65
    5b74:	1c f0       	brlt	.+6      	; 0x5b7c <strncasecmp_P+0x16>
    5b76:	8b 35       	cpi	r24, 0x5B	; 91
    5b78:	0c f4       	brge	.+2      	; 0x5b7c <strncasecmp_P+0x16>
    5b7a:	80 5e       	subi	r24, 0xE0	; 224
    5b7c:	65 91       	lpm	r22, Z+
    5b7e:	61 34       	cpi	r22, 0x41	; 65
    5b80:	1c f0       	brlt	.+6      	; 0x5b88 <strncasecmp_P+0x22>
    5b82:	6b 35       	cpi	r22, 0x5B	; 91
    5b84:	0c f4       	brge	.+2      	; 0x5b88 <strncasecmp_P+0x22>
    5b86:	60 5e       	subi	r22, 0xE0	; 224
    5b88:	86 1b       	sub	r24, r22
    5b8a:	61 11       	cpse	r22, r1
    5b8c:	71 f3       	breq	.-36     	; 0x5b6a <strncasecmp_P+0x4>
    5b8e:	99 0b       	sbc	r25, r25
    5b90:	08 95       	ret
    5b92:	88 1b       	sub	r24, r24
    5b94:	fc cf       	rjmp	.-8      	; 0x5b8e <strncasecmp_P+0x28>

00005b96 <strrev>:
    5b96:	dc 01       	movw	r26, r24
    5b98:	fc 01       	movw	r30, r24
    5b9a:	67 2f       	mov	r22, r23
    5b9c:	71 91       	ld	r23, Z+
    5b9e:	77 23       	and	r23, r23
    5ba0:	e1 f7       	brne	.-8      	; 0x5b9a <strrev+0x4>
    5ba2:	32 97       	sbiw	r30, 0x02	; 2
    5ba4:	04 c0       	rjmp	.+8      	; 0x5bae <strrev+0x18>
    5ba6:	7c 91       	ld	r23, X
    5ba8:	6d 93       	st	X+, r22
    5baa:	70 83       	st	Z, r23
    5bac:	62 91       	ld	r22, -Z
    5bae:	ae 17       	cp	r26, r30
    5bb0:	bf 07       	cpc	r27, r31
    5bb2:	c8 f3       	brcs	.-14     	; 0x5ba6 <strrev+0x10>
    5bb4:	08 95       	ret

00005bb6 <__ctype_isfalse>:
    5bb6:	99 27       	eor	r25, r25
    5bb8:	88 27       	eor	r24, r24

00005bba <__ctype_istrue>:
    5bba:	08 95       	ret

00005bbc <__muluhisi3>:
    5bbc:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <__umulhisi3>
    5bc0:	a5 9f       	mul	r26, r21
    5bc2:	90 0d       	add	r25, r0
    5bc4:	b4 9f       	mul	r27, r20
    5bc6:	90 0d       	add	r25, r0
    5bc8:	a4 9f       	mul	r26, r20
    5bca:	80 0d       	add	r24, r0
    5bcc:	91 1d       	adc	r25, r1
    5bce:	11 24       	eor	r1, r1
    5bd0:	08 95       	ret

00005bd2 <__umulhisi3>:
    5bd2:	a2 9f       	mul	r26, r18
    5bd4:	b0 01       	movw	r22, r0
    5bd6:	b3 9f       	mul	r27, r19
    5bd8:	c0 01       	movw	r24, r0
    5bda:	a3 9f       	mul	r26, r19
    5bdc:	70 0d       	add	r23, r0
    5bde:	81 1d       	adc	r24, r1
    5be0:	11 24       	eor	r1, r1
    5be2:	91 1d       	adc	r25, r1
    5be4:	b2 9f       	mul	r27, r18
    5be6:	70 0d       	add	r23, r0
    5be8:	81 1d       	adc	r24, r1
    5bea:	11 24       	eor	r1, r1
    5bec:	91 1d       	adc	r25, r1
    5bee:	08 95       	ret

00005bf0 <_exit>:
    5bf0:	f8 94       	cli

00005bf2 <__stop_program>:
    5bf2:	ff cf       	rjmp	.-2      	; 0x5bf2 <__stop_program>
