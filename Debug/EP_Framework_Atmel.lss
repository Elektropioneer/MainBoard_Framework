
EP_Framework_Atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  0000480e  000048a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000480e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000155  0080012e  0080012e  000048d0  2**0
                  ALLOC
  3 .stab         00006624  00000000  00000000  000048d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002194  00000000  00000000  0000aef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000d09c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 ba 15 	jmp	0x2b74	; 0x2b74 <__vector_8>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__vector_23>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 06 1b 	jmp	0x360c	; 0x360c <__vector_32>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 c4 1a 	jmp	0x3588	; 0x3588 <__vector_34>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ee e0       	ldi	r30, 0x0E	; 14
      a8:	f8 e4       	ldi	r31, 0x48	; 72
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 32       	cpi	r26, 0x2E	; 46
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	ae e2       	ldi	r26, 0x2E	; 46
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a3 38       	cpi	r26, 0x83	; 131
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <main>
      ce:	0c 94 05 24 	jmp	0x480a	; 0x480a <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <send_arduino>:
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	00 d0       	rcall	.+0      	; 0xdc <send_arduino+0x6>
      dc:	1f 92       	push	r1
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	89 83       	std	Y+1, r24	; 0x01
      e4:	6a 83       	std	Y+2, r22	; 0x02
      e6:	4b 83       	std	Y+3, r20	; 0x03
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	0e 94 86 1b 	call	0x370c	; 0x370c <UART1_Write>
      ee:	8a 81       	ldd	r24, Y+2	; 0x02
      f0:	0e 94 86 1b 	call	0x370c	; 0x370c <UART1_Write>
      f4:	8b 81       	ldd	r24, Y+3	; 0x03
      f6:	0e 94 86 1b 	call	0x370c	; 0x370c <UART1_Write>
      fa:	88 e5       	ldi	r24, 0x58	; 88
      fc:	0e 94 86 1b 	call	0x370c	; 0x370c <UART1_Write>
     100:	0f 90       	pop	r0
     102:	0f 90       	pop	r0
     104:	0f 90       	pop	r0
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <get_arduino>:
 * 	Function: 	 unsigned char get_arduino(unsigned char type, unsigned char id)
 * 	Description: Gets status of the device
 * 	Parameters:	 unsigned char type - the type of device ('R', 'M', 'S')
 * 				 unsigned char id   - the id of the device 1-x
 */
unsigned char get_arduino(unsigned char type, unsigned char id) {
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	00 d0       	rcall	.+0      	; 0x112 <get_arduino+0x6>
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	89 83       	std	Y+1, r24	; 0x01
     118:	6a 83       	std	Y+2, r22	; 0x02

	send_arduino('G',type,(unsigned char)id);	// send the "get data protocol"
     11a:	4a 81       	ldd	r20, Y+2	; 0x02
     11c:	69 81       	ldd	r22, Y+1	; 0x01
     11e:	87 e4       	ldi	r24, 0x47	; 71
     120:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_arduino>
	UART1_Read();								// read (because it is sending 2x)
     124:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <UART1_Read>

	return UART1_Read();						// return the read
     128:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <UART1_Read>

}
     12c:	0f 90       	pop	r0
     12e:	0f 90       	pop	r0
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	08 95       	ret

00000136 <servo_move>:
 * 	Function: 	 void servo_move(unsigned char id, unsigned char data);
 * 	Description: Sending the angle of the id of the servo
 * 	Parameters:  unsigned char id   - the id of the servo
 * 				 unsigned char data - the angle of the servo
 */
void servo_move(unsigned char id, unsigned char data) { send_arduino('S', id, data); }
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	00 d0       	rcall	.+0      	; 0x13c <servo_move+0x6>
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
     140:	89 83       	std	Y+1, r24	; 0x01
     142:	6a 83       	std	Y+2, r22	; 0x02
     144:	4a 81       	ldd	r20, Y+2	; 0x02
     146:	69 81       	ldd	r22, Y+1	; 0x01
     148:	83 e5       	ldi	r24, 0x53	; 83
     14a:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_arduino>
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <ping_actuator>:

/*
 * 	Function: 	 void ping_actuator()
 * 	Description: this will ping the actuator and it will run until ping is good
 */
void ping_actuator() {
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62

	do {

		UART1_Write('P');
     160:	80 e5       	ldi	r24, 0x50	; 80
     162:	0e 94 86 1b 	call	0x370c	; 0x370c <UART1_Write>
		UART1_Write(0);
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	0e 94 86 1b 	call	0x370c	; 0x370c <UART1_Write>
		UART1_Write(0);
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	0e 94 86 1b 	call	0x370c	; 0x370c <UART1_Write>
		UART1_Write('X');
     172:	88 e5       	ldi	r24, 0x58	; 88
     174:	0e 94 86 1b 	call	0x370c	; 0x370c <UART1_Write>

	} while(UART1_Read() != 1);
     178:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <UART1_Read>
     17c:	81 30       	cpi	r24, 0x01	; 1
     17e:	81 f7       	brne	.-32     	; 0x160 <ping_actuator+0x8>
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <servo_init>:
 *	Function: 		void servo_init(unsigned int f_pwm)
 *	Parameters: 	unsigned int f_pwm
 *	Description: 	servo init
 */
void servo_init(unsigned int f_pwm)
{
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	00 d0       	rcall	.+0      	; 0x190 <servo_init+0xa>
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	9a 83       	std	Y+2, r25	; 0x02
     196:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     198:	8d e2       	ldi	r24, 0x2D	; 45
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	2d e2       	ldi	r18, 0x2D	; 45
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	20 81       	ld	r18, Z
     1a4:	28 63       	ori	r18, 0x38	; 56
     1a6:	fc 01       	movw	r30, r24
     1a8:	20 83       	st	Z, r18
	DDRB |= (1 << PINB7);										//OCR0A 8bit
     1aa:	84 e2       	ldi	r24, 0x24	; 36
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	24 e2       	ldi	r18, 0x24	; 36
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	f9 01       	movw	r30, r18
     1b4:	20 81       	ld	r18, Z
     1b6:	20 68       	ori	r18, 0x80	; 128
     1b8:	fc 01       	movw	r30, r24
     1ba:	20 83       	st	Z, r18

	TCNT3 = 0;
     1bc:	84 e9       	ldi	r24, 0x94	; 148
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	fc 01       	movw	r30, r24
     1c2:	11 82       	std	Z+1, r1	; 0x01
     1c4:	10 82       	st	Z, r1
	TCNT0 = 0;
     1c6:	86 e4       	ldi	r24, 0x46	; 70
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	fc 01       	movw	r30, r24
     1cc:	10 82       	st	Z, r1

	OCR3A = 0;
     1ce:	88 e9       	ldi	r24, 0x98	; 152
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	fc 01       	movw	r30, r24
     1d4:	11 82       	std	Z+1, r1	; 0x01
     1d6:	10 82       	st	Z, r1
	OCR3B = 0;
     1d8:	8a e9       	ldi	r24, 0x9A	; 154
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	fc 01       	movw	r30, r24
     1de:	11 82       	std	Z+1, r1	; 0x01
     1e0:	10 82       	st	Z, r1
	OCR3C = 0;
     1e2:	8c e9       	ldi	r24, 0x9C	; 156
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	fc 01       	movw	r30, r24
     1e8:	11 82       	std	Z+1, r1	; 0x01
     1ea:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     1ec:	80 e9       	ldi	r24, 0x90	; 144
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	2e eb       	ldi	r18, 0xBE	; 190
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; 		// PRESKALER = 8
     1f6:	81 e9       	ldi	r24, 0x91	; 145
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	2a e1       	ldi	r18, 0x1A	; 26
     1fc:	fc 01       	movw	r30, r24
     1fe:	20 83       	st	Z, r18

	//8bit timer
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     200:	84 e4       	ldi	r24, 0x44	; 68
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	2b e6       	ldi	r18, 0x6B	; 107
     206:	fc 01       	movw	r30, r24
     208:	20 83       	st	Z, r18

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     20a:	06 e9       	ldi	r16, 0x96	; 150
     20c:	10 e0       	ldi	r17, 0x00	; 0
     20e:	89 81       	ldd	r24, Y+1	; 0x01
     210:	9a 81       	ldd	r25, Y+2	; 0x02
     212:	cc 01       	movw	r24, r24
     214:	a0 e0       	ldi	r26, 0x00	; 0
     216:	b0 e0       	ldi	r27, 0x00	; 0
     218:	bc 01       	movw	r22, r24
     21a:	cd 01       	movw	r24, r26
     21c:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatunsisf>
     220:	dc 01       	movw	r26, r24
     222:	cb 01       	movw	r24, r22
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	51 e4       	ldi	r21, 0x41	; 65
     22c:	bc 01       	movw	r22, r24
     22e:	cd 01       	movw	r24, r26
     230:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
     234:	dc 01       	movw	r26, r24
     236:	cb 01       	movw	r24, r22
     238:	9c 01       	movw	r18, r24
     23a:	ad 01       	movw	r20, r26
     23c:	60 e8       	ldi	r22, 0x80	; 128
     23e:	76 e9       	ldi	r23, 0x96	; 150
     240:	88 e1       	ldi	r24, 0x18	; 24
     242:	9b e4       	ldi	r25, 0x4B	; 75
     244:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__divsf3>
     248:	dc 01       	movw	r26, r24
     24a:	cb 01       	movw	r24, r22
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	bc 01       	movw	r22, r24
     256:	cd 01       	movw	r24, r26
     258:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__addsf3>
     25c:	dc 01       	movw	r26, r24
     25e:	cb 01       	movw	r24, r22
     260:	bc 01       	movw	r22, r24
     262:	cd 01       	movw	r24, r26
     264:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     268:	dc 01       	movw	r26, r24
     26a:	cb 01       	movw	r24, r22
     26c:	f8 01       	movw	r30, r16
     26e:	91 83       	std	Z+1, r25	; 0x01
     270:	80 83       	st	Z, r24
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	08 95       	ret

00000280 <servo_set_duty_cycle_one>:
 *	Parameters: 	int16_t value - the pwm value
 *	Description: 	duty cycle for servos
 *	Pin:			PE3, PE4, PE5
 */
static void servo_set_duty_cycle_one(int16_t value)
{
     280:	cf 92       	push	r12
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	00 d0       	rcall	.+0      	; 0x28e <servo_set_duty_cycle_one+0xe>
     28e:	00 d0       	rcall	.+0      	; 0x290 <servo_set_duty_cycle_one+0x10>
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	9c 83       	std	Y+4, r25	; 0x04
     296:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     298:	86 e9       	ldi	r24, 0x96	; 150
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	fc 01       	movw	r30, r24
     29e:	80 81       	ld	r24, Z
     2a0:	91 81       	ldd	r25, Z+1	; 0x01
     2a2:	cc 01       	movw	r24, r24
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	bc 01       	movw	r22, r24
     2aa:	cd 01       	movw	r24, r26
     2ac:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatunsisf>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	4f e7       	ldi	r20, 0x7F	; 127
     2ba:	53 e4       	ldi	r21, 0x43	; 67
     2bc:	bc 01       	movw	r22, r24
     2be:	cd 01       	movw	r24, r26
     2c0:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__divsf3>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	6c 01       	movw	r12, r24
     2ca:	7d 01       	movw	r14, r26
     2cc:	8b 81       	ldd	r24, Y+3	; 0x03
     2ce:	9c 81       	ldd	r25, Y+4	; 0x04
     2d0:	09 2e       	mov	r0, r25
     2d2:	00 0c       	add	r0, r0
     2d4:	aa 0b       	sbc	r26, r26
     2d6:	bb 0b       	sbc	r27, r27
     2d8:	bc 01       	movw	r22, r24
     2da:	cd 01       	movw	r24, r26
     2dc:	0e 94 93 21 	call	0x4326	; 0x4326 <__floatsisf>
     2e0:	dc 01       	movw	r26, r24
     2e2:	cb 01       	movw	r24, r22
     2e4:	9c 01       	movw	r18, r24
     2e6:	ad 01       	movw	r20, r26
     2e8:	c7 01       	movw	r24, r14
     2ea:	b6 01       	movw	r22, r12
     2ec:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
     2f0:	dc 01       	movw	r26, r24
     2f2:	cb 01       	movw	r24, r22
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	5f e3       	ldi	r21, 0x3F	; 63
     2fc:	bc 01       	movw	r22, r24
     2fe:	cd 01       	movw	r24, r26
     300:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__addsf3>
     304:	dc 01       	movw	r26, r24
     306:	cb 01       	movw	r24, r22
     308:	bc 01       	movw	r22, r24
     30a:	cd 01       	movw	r24, r26
     30c:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     310:	dc 01       	movw	r26, r24
     312:	cb 01       	movw	r24, r22
     314:	9a 83       	std	Y+2, r25	; 0x02
     316:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     318:	89 e9       	ldi	r24, 0x99	; 153
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	29 81       	ldd	r18, Y+1	; 0x01
     31e:	3a 81       	ldd	r19, Y+2	; 0x02
     320:	23 2f       	mov	r18, r19
     322:	33 27       	eor	r19, r19
     324:	fc 01       	movw	r30, r24
     326:	20 83       	st	Z, r18
	OCR3AL = temp & 0xFF;
     328:	88 e9       	ldi	r24, 0x98	; 152
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	29 81       	ldd	r18, Y+1	; 0x01
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18
}
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	ff 90       	pop	r15
     340:	ef 90       	pop	r14
     342:	df 90       	pop	r13
     344:	cf 90       	pop	r12
     346:	08 95       	ret

00000348 <servo_set_duty_cycle_two>:
static void servo_set_duty_cycle_two(int16_t value)
{
     348:	cf 92       	push	r12
     34a:	df 92       	push	r13
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	00 d0       	rcall	.+0      	; 0x356 <servo_set_duty_cycle_two+0xe>
     356:	00 d0       	rcall	.+0      	; 0x358 <servo_set_duty_cycle_two+0x10>
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	9c 83       	std	Y+4, r25	; 0x04
     35e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     360:	86 e9       	ldi	r24, 0x96	; 150
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	fc 01       	movw	r30, r24
     366:	80 81       	ld	r24, Z
     368:	91 81       	ldd	r25, Z+1	; 0x01
     36a:	cc 01       	movw	r24, r24
     36c:	a0 e0       	ldi	r26, 0x00	; 0
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	bc 01       	movw	r22, r24
     372:	cd 01       	movw	r24, r26
     374:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatunsisf>
     378:	dc 01       	movw	r26, r24
     37a:	cb 01       	movw	r24, r22
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	4f e7       	ldi	r20, 0x7F	; 127
     382:	53 e4       	ldi	r21, 0x43	; 67
     384:	bc 01       	movw	r22, r24
     386:	cd 01       	movw	r24, r26
     388:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__divsf3>
     38c:	dc 01       	movw	r26, r24
     38e:	cb 01       	movw	r24, r22
     390:	6c 01       	movw	r12, r24
     392:	7d 01       	movw	r14, r26
     394:	8b 81       	ldd	r24, Y+3	; 0x03
     396:	9c 81       	ldd	r25, Y+4	; 0x04
     398:	09 2e       	mov	r0, r25
     39a:	00 0c       	add	r0, r0
     39c:	aa 0b       	sbc	r26, r26
     39e:	bb 0b       	sbc	r27, r27
     3a0:	bc 01       	movw	r22, r24
     3a2:	cd 01       	movw	r24, r26
     3a4:	0e 94 93 21 	call	0x4326	; 0x4326 <__floatsisf>
     3a8:	dc 01       	movw	r26, r24
     3aa:	cb 01       	movw	r24, r22
     3ac:	9c 01       	movw	r18, r24
     3ae:	ad 01       	movw	r20, r26
     3b0:	c7 01       	movw	r24, r14
     3b2:	b6 01       	movw	r22, r12
     3b4:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
     3b8:	dc 01       	movw	r26, r24
     3ba:	cb 01       	movw	r24, r22
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	40 e0       	ldi	r20, 0x00	; 0
     3c2:	5f e3       	ldi	r21, 0x3F	; 63
     3c4:	bc 01       	movw	r22, r24
     3c6:	cd 01       	movw	r24, r26
     3c8:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__addsf3>
     3cc:	dc 01       	movw	r26, r24
     3ce:	cb 01       	movw	r24, r22
     3d0:	bc 01       	movw	r22, r24
     3d2:	cd 01       	movw	r24, r26
     3d4:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     3d8:	dc 01       	movw	r26, r24
     3da:	cb 01       	movw	r24, r22
     3dc:	9a 83       	std	Y+2, r25	; 0x02
     3de:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     3e0:	8b e9       	ldi	r24, 0x9B	; 155
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	29 81       	ldd	r18, Y+1	; 0x01
     3e6:	3a 81       	ldd	r19, Y+2	; 0x02
     3e8:	23 2f       	mov	r18, r19
     3ea:	33 27       	eor	r19, r19
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
	OCR3BL = temp & 0xFF;
     3f0:	8a e9       	ldi	r24, 0x9A	; 154
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	29 81       	ldd	r18, Y+1	; 0x01
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 83       	st	Z, r18
}
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	df 90       	pop	r13
     40c:	cf 90       	pop	r12
     40e:	08 95       	ret

00000410 <servo_set_duty_cycle_three>:
static void servo_set_duty_cycle_three(int16_t value)
{
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	00 d0       	rcall	.+0      	; 0x41e <servo_set_duty_cycle_three+0xe>
     41e:	00 d0       	rcall	.+0      	; 0x420 <servo_set_duty_cycle_three+0x10>
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	9c 83       	std	Y+4, r25	; 0x04
     426:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     428:	86 e9       	ldi	r24, 0x96	; 150
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	fc 01       	movw	r30, r24
     42e:	80 81       	ld	r24, Z
     430:	91 81       	ldd	r25, Z+1	; 0x01
     432:	cc 01       	movw	r24, r24
     434:	a0 e0       	ldi	r26, 0x00	; 0
     436:	b0 e0       	ldi	r27, 0x00	; 0
     438:	bc 01       	movw	r22, r24
     43a:	cd 01       	movw	r24, r26
     43c:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatunsisf>
     440:	dc 01       	movw	r26, r24
     442:	cb 01       	movw	r24, r22
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	4f e7       	ldi	r20, 0x7F	; 127
     44a:	53 e4       	ldi	r21, 0x43	; 67
     44c:	bc 01       	movw	r22, r24
     44e:	cd 01       	movw	r24, r26
     450:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__divsf3>
     454:	dc 01       	movw	r26, r24
     456:	cb 01       	movw	r24, r22
     458:	6c 01       	movw	r12, r24
     45a:	7d 01       	movw	r14, r26
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	9c 81       	ldd	r25, Y+4	; 0x04
     460:	09 2e       	mov	r0, r25
     462:	00 0c       	add	r0, r0
     464:	aa 0b       	sbc	r26, r26
     466:	bb 0b       	sbc	r27, r27
     468:	bc 01       	movw	r22, r24
     46a:	cd 01       	movw	r24, r26
     46c:	0e 94 93 21 	call	0x4326	; 0x4326 <__floatsisf>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	9c 01       	movw	r18, r24
     476:	ad 01       	movw	r20, r26
     478:	c7 01       	movw	r24, r14
     47a:	b6 01       	movw	r22, r12
     47c:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	5f e3       	ldi	r21, 0x3F	; 63
     48c:	bc 01       	movw	r22, r24
     48e:	cd 01       	movw	r24, r26
     490:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__addsf3>
     494:	dc 01       	movw	r26, r24
     496:	cb 01       	movw	r24, r22
     498:	bc 01       	movw	r22, r24
     49a:	cd 01       	movw	r24, r26
     49c:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	9a 83       	std	Y+2, r25	; 0x02
     4a6:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     4a8:	8d e9       	ldi	r24, 0x9D	; 157
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	29 81       	ldd	r18, Y+1	; 0x01
     4ae:	3a 81       	ldd	r19, Y+2	; 0x02
     4b0:	23 2f       	mov	r18, r19
     4b2:	33 27       	eor	r19, r19
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
	OCR3CL = temp & 0xFF;
     4b8:	8c e9       	ldi	r24, 0x9C	; 156
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	29 81       	ldd	r18, Y+1	; 0x01
     4be:	fc 01       	movw	r30, r24
     4c0:	20 83       	st	Z, r18
}
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	ff 90       	pop	r15
     4d0:	ef 90       	pop	r14
     4d2:	df 90       	pop	r13
     4d4:	cf 90       	pop	r12
     4d6:	08 95       	ret

000004d8 <range_conv>:

/*
 * 	Function: 	 static int16_t range_conv(float angle)
 * 	Descritpion: this function converts 0-180 to int16_t value
 */
static int16_t range_conv(float angle) {
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	00 d0       	rcall	.+0      	; 0x4de <range_conv+0x6>
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <range_conv+0x8>
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	69 83       	std	Y+1, r22	; 0x01
     4e6:	7a 83       	std	Y+2, r23	; 0x02
     4e8:	8b 83       	std	Y+3, r24	; 0x03
     4ea:	9c 83       	std	Y+4, r25	; 0x04
	return ((65535 * angle) / 180) - 32768;
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	3f ef       	ldi	r19, 0xFF	; 255
     4f0:	4f e7       	ldi	r20, 0x7F	; 127
     4f2:	57 e4       	ldi	r21, 0x47	; 71
     4f4:	69 81       	ldd	r22, Y+1	; 0x01
     4f6:	7a 81       	ldd	r23, Y+2	; 0x02
     4f8:	8b 81       	ldd	r24, Y+3	; 0x03
     4fa:	9c 81       	ldd	r25, Y+4	; 0x04
     4fc:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
     500:	dc 01       	movw	r26, r24
     502:	cb 01       	movw	r24, r22
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	44 e3       	ldi	r20, 0x34	; 52
     50a:	53 e4       	ldi	r21, 0x43	; 67
     50c:	bc 01       	movw	r22, r24
     50e:	cd 01       	movw	r24, r26
     510:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__divsf3>
     514:	dc 01       	movw	r26, r24
     516:	cb 01       	movw	r24, r22
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	40 e0       	ldi	r20, 0x00	; 0
     51e:	57 e4       	ldi	r21, 0x47	; 71
     520:	bc 01       	movw	r22, r24
     522:	cd 01       	movw	r24, r26
     524:	0e 94 77 20 	call	0x40ee	; 0x40ee <__subsf3>
     528:	dc 01       	movw	r26, r24
     52a:	cb 01       	movw	r24, r22
     52c:	bc 01       	movw	r22, r24
     52e:	cd 01       	movw	r24, r26
     530:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__fixsfsi>
     534:	dc 01       	movw	r26, r24
     536:	cb 01       	movw	r24, r22
}
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <check_servo_range>:

static char check_servo_range(float angle) {
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	00 d0       	rcall	.+0      	; 0x54c <check_servo_range+0x6>
     54c:	00 d0       	rcall	.+0      	; 0x54e <check_servo_range+0x8>
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	69 83       	std	Y+1, r22	; 0x01
     554:	7a 83       	std	Y+2, r23	; 0x02
     556:	8b 83       	std	Y+3, r24	; 0x03
     558:	9c 83       	std	Y+4, r25	; 0x04
	if(angle >= 0.0 && angle <= 180.0)
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	a9 01       	movw	r20, r18
     560:	69 81       	ldd	r22, Y+1	; 0x01
     562:	7a 81       	ldd	r23, Y+2	; 0x02
     564:	8b 81       	ldd	r24, Y+3	; 0x03
     566:	9c 81       	ldd	r25, Y+4	; 0x04
     568:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
     56c:	88 23       	and	r24, r24
     56e:	74 f0       	brlt	.+28     	; 0x58c <check_servo_range+0x46>
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	44 e3       	ldi	r20, 0x34	; 52
     576:	53 e4       	ldi	r21, 0x43	; 67
     578:	69 81       	ldd	r22, Y+1	; 0x01
     57a:	7a 81       	ldd	r23, Y+2	; 0x02
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	9c 81       	ldd	r25, Y+4	; 0x04
     580:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
     584:	18 16       	cp	r1, r24
     586:	14 f0       	brlt	.+4      	; 0x58c <check_servo_range+0x46>
		return 1;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	01 c0       	rjmp	.+2      	; 0x58e <check_servo_range+0x48>
	else
		return 0;
     58c:	80 e0       	ldi	r24, 0x00	; 0
}
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <servo_set_angle_one>:

/*
 * 	Function: 	void servo_set_angle_one-two-three(uint8_t angle)
 * 	Descrition: the angle goes from 0.0 - 180.0
 */
void servo_set_angle_one(float angle) {
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <servo_set_angle_one+0x6>
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <servo_set_angle_one+0x8>
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	69 83       	std	Y+1, r22	; 0x01
     5aa:	7a 83       	std	Y+2, r23	; 0x02
     5ac:	8b 83       	std	Y+3, r24	; 0x03
     5ae:	9c 83       	std	Y+4, r25	; 0x04
	if(check_servo_range(angle))
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	9a 81       	ldd	r25, Y+2	; 0x02
     5b4:	ab 81       	ldd	r26, Y+3	; 0x03
     5b6:	bc 81       	ldd	r27, Y+4	; 0x04
     5b8:	bc 01       	movw	r22, r24
     5ba:	cd 01       	movw	r24, r26
     5bc:	0e 94 a3 02 	call	0x546	; 0x546 <check_servo_range>
     5c0:	88 23       	and	r24, r24
     5c2:	51 f0       	breq	.+20     	; 0x5d8 <servo_set_angle_one+0x3c>
		servo_set_duty_cycle_one(range_conv(angle));
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
     5c6:	9a 81       	ldd	r25, Y+2	; 0x02
     5c8:	ab 81       	ldd	r26, Y+3	; 0x03
     5ca:	bc 81       	ldd	r27, Y+4	; 0x04
     5cc:	bc 01       	movw	r22, r24
     5ce:	cd 01       	movw	r24, r26
     5d0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <range_conv>
     5d4:	0e 94 40 01 	call	0x280	; 0x280 <servo_set_duty_cycle_one>
}
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <servo_set_angle_two>:

void servo_set_angle_two(float angle) {
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <servo_set_angle_two+0x6>
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <servo_set_angle_two+0x8>
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	69 83       	std	Y+1, r22	; 0x01
     5f4:	7a 83       	std	Y+2, r23	; 0x02
     5f6:	8b 83       	std	Y+3, r24	; 0x03
     5f8:	9c 83       	std	Y+4, r25	; 0x04
	if(check_servo_range(angle))
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	9a 81       	ldd	r25, Y+2	; 0x02
     5fe:	ab 81       	ldd	r26, Y+3	; 0x03
     600:	bc 81       	ldd	r27, Y+4	; 0x04
     602:	bc 01       	movw	r22, r24
     604:	cd 01       	movw	r24, r26
     606:	0e 94 a3 02 	call	0x546	; 0x546 <check_servo_range>
     60a:	88 23       	and	r24, r24
     60c:	51 f0       	breq	.+20     	; 0x622 <servo_set_angle_two+0x3c>
		servo_set_duty_cycle_two(range_conv(angle));
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	9a 81       	ldd	r25, Y+2	; 0x02
     612:	ab 81       	ldd	r26, Y+3	; 0x03
     614:	bc 81       	ldd	r27, Y+4	; 0x04
     616:	bc 01       	movw	r22, r24
     618:	cd 01       	movw	r24, r26
     61a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <range_conv>
     61e:	0e 94 a4 01 	call	0x348	; 0x348 <servo_set_duty_cycle_two>
}
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <servo_set_angle_three>:

void servo_set_angle_three(float angle) {
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	00 d0       	rcall	.+0      	; 0x636 <servo_set_angle_three+0x6>
     636:	00 d0       	rcall	.+0      	; 0x638 <servo_set_angle_three+0x8>
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	69 83       	std	Y+1, r22	; 0x01
     63e:	7a 83       	std	Y+2, r23	; 0x02
     640:	8b 83       	std	Y+3, r24	; 0x03
     642:	9c 83       	std	Y+4, r25	; 0x04
	if(check_servo_range(angle))
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	ab 81       	ldd	r26, Y+3	; 0x03
     64a:	bc 81       	ldd	r27, Y+4	; 0x04
     64c:	bc 01       	movw	r22, r24
     64e:	cd 01       	movw	r24, r26
     650:	0e 94 a3 02 	call	0x546	; 0x546 <check_servo_range>
     654:	88 23       	and	r24, r24
     656:	51 f0       	breq	.+20     	; 0x66c <servo_set_angle_three+0x3c>
		servo_set_duty_cycle_three(range_conv(angle));
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	ab 81       	ldd	r26, Y+3	; 0x03
     65e:	bc 81       	ldd	r27, Y+4	; 0x04
     660:	bc 01       	movw	r22, r24
     662:	cd 01       	movw	r24, r26
     664:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <range_conv>
     668:	0e 94 08 02 	call	0x410	; 0x410 <servo_set_duty_cycle_three>
}
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <servo_set_angle_four>:

void servo_set_angle_four(float angle) {
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	00 d0       	rcall	.+0      	; 0x684 <servo_set_angle_four+0xa>
     684:	00 d0       	rcall	.+0      	; 0x686 <servo_set_angle_four+0xc>
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	69 83       	std	Y+1, r22	; 0x01
     68c:	7a 83       	std	Y+2, r23	; 0x02
     68e:	8b 83       	std	Y+3, r24	; 0x03
     690:	9c 83       	std	Y+4, r25	; 0x04
	if(check_servo_range(angle))
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	ab 81       	ldd	r26, Y+3	; 0x03
     698:	bc 81       	ldd	r27, Y+4	; 0x04
     69a:	bc 01       	movw	r22, r24
     69c:	cd 01       	movw	r24, r26
     69e:	0e 94 a3 02 	call	0x546	; 0x546 <check_servo_range>
     6a2:	88 23       	and	r24, r24
     6a4:	01 f1       	breq	.+64     	; 0x6e6 <servo_set_angle_four+0x6c>
		OCR0A = (int)((255 * angle) / 180);
     6a6:	07 e4       	ldi	r16, 0x47	; 71
     6a8:	10 e0       	ldi	r17, 0x00	; 0
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	4f e7       	ldi	r20, 0x7F	; 127
     6b0:	53 e4       	ldi	r21, 0x43	; 67
     6b2:	69 81       	ldd	r22, Y+1	; 0x01
     6b4:	7a 81       	ldd	r23, Y+2	; 0x02
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ba:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	44 e3       	ldi	r20, 0x34	; 52
     6c8:	53 e4       	ldi	r21, 0x43	; 67
     6ca:	bc 01       	movw	r22, r24
     6cc:	cd 01       	movw	r24, r26
     6ce:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__divsf3>
     6d2:	dc 01       	movw	r26, r24
     6d4:	cb 01       	movw	r24, r22
     6d6:	bc 01       	movw	r22, r24
     6d8:	cd 01       	movw	r24, r26
     6da:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <__fixsfsi>
     6de:	dc 01       	movw	r26, r24
     6e0:	cb 01       	movw	r24, r22
     6e2:	f8 01       	movw	r30, r16
     6e4:	80 83       	st	Z, r24
}
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	08 95       	ret

000006f8 <AX_UART_Init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "ax.h"

void AX_UART_Init(void)
{
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	2e 97       	sbiw	r28, 0x0e	; 14
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRD &= ~((1 << 2) | (1 << 3));
     70c:	8a e2       	ldi	r24, 0x2A	; 42
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	2a e2       	ldi	r18, 0x2A	; 42
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	f9 01       	movw	r30, r18
     716:	20 81       	ld	r18, Z
     718:	23 7f       	andi	r18, 0xF3	; 243
     71a:	fc 01       	movw	r30, r24
     71c:	20 83       	st	Z, r18
	//PORTE = 0;
	UCSR1A = 0;
     71e:	88 ec       	ldi	r24, 0xC8	; 200
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	fc 01       	movw	r30, r24
     724:	10 82       	st	Z, r1
	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
     726:	89 ec       	ldi	r24, 0xC9	; 201
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	28 e1       	ldi	r18, 0x18	; 24
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
     730:	8a ec       	ldi	r24, 0xCA	; 202
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	26 e0       	ldi	r18, 0x06	; 6
     736:	fc 01       	movw	r30, r24
     738:	20 83       	st	Z, r18

	UBRR1H = 0;
     73a:	8d ec       	ldi	r24, 0xCD	; 205
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	fc 01       	movw	r30, r24
     740:	10 82       	st	Z, r1
	UBRR1L = 5;
     742:	8c ec       	ldi	r24, 0xCC	; 204
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	25 e0       	ldi	r18, 0x05	; 5
     748:	fc 01       	movw	r30, r24
     74a:	20 83       	st	Z, r18
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	a8 ec       	ldi	r26, 0xC8	; 200
     752:	b2 e4       	ldi	r27, 0x42	; 66
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	9a 83       	std	Y+2, r25	; 0x02
     758:	ab 83       	std	Y+3, r26	; 0x03
     75a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e4       	ldi	r19, 0x40	; 64
     760:	4c e1       	ldi	r20, 0x1C	; 28
     762:	55 e4       	ldi	r21, 0x45	; 69
     764:	69 81       	ldd	r22, Y+1	; 0x01
     766:	7a 81       	ldd	r23, Y+2	; 0x02
     768:	8b 81       	ldd	r24, Y+3	; 0x03
     76a:	9c 81       	ldd	r25, Y+4	; 0x04
     76c:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
     770:	dc 01       	movw	r26, r24
     772:	cb 01       	movw	r24, r22
     774:	8d 83       	std	Y+5, r24	; 0x05
     776:	9e 83       	std	Y+6, r25	; 0x06
     778:	af 83       	std	Y+7, r26	; 0x07
     77a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	40 e8       	ldi	r20, 0x80	; 128
     782:	5f e3       	ldi	r21, 0x3F	; 63
     784:	6d 81       	ldd	r22, Y+5	; 0x05
     786:	7e 81       	ldd	r23, Y+6	; 0x06
     788:	8f 81       	ldd	r24, Y+7	; 0x07
     78a:	98 85       	ldd	r25, Y+8	; 0x08
     78c:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
     790:	88 23       	and	r24, r24
     792:	2c f4       	brge	.+10     	; 0x79e <AX_UART_Init+0xa6>
		__ticks = 1;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	9a 87       	std	Y+10, r25	; 0x0a
     79a:	89 87       	std	Y+9, r24	; 0x09
     79c:	3f c0       	rjmp	.+126    	; 0x81c <AX_UART_Init+0x124>
	else if (__tmp > 65535)
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	3f ef       	ldi	r19, 0xFF	; 255
     7a2:	4f e7       	ldi	r20, 0x7F	; 127
     7a4:	57 e4       	ldi	r21, 0x47	; 71
     7a6:	6d 81       	ldd	r22, Y+5	; 0x05
     7a8:	7e 81       	ldd	r23, Y+6	; 0x06
     7aa:	8f 81       	ldd	r24, Y+7	; 0x07
     7ac:	98 85       	ldd	r25, Y+8	; 0x08
     7ae:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
     7b2:	18 16       	cp	r1, r24
     7b4:	4c f5       	brge	.+82     	; 0x808 <AX_UART_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e2       	ldi	r20, 0x20	; 32
     7bc:	51 e4       	ldi	r21, 0x41	; 65
     7be:	69 81       	ldd	r22, Y+1	; 0x01
     7c0:	7a 81       	ldd	r23, Y+2	; 0x02
     7c2:	8b 81       	ldd	r24, Y+3	; 0x03
     7c4:	9c 81       	ldd	r25, Y+4	; 0x04
     7c6:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
     7ca:	dc 01       	movw	r26, r24
     7cc:	cb 01       	movw	r24, r22
     7ce:	bc 01       	movw	r22, r24
     7d0:	cd 01       	movw	r24, r26
     7d2:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     7d6:	dc 01       	movw	r26, r24
     7d8:	cb 01       	movw	r24, r22
     7da:	9a 87       	std	Y+10, r25	; 0x0a
     7dc:	89 87       	std	Y+9, r24	; 0x09
     7de:	0f c0       	rjmp	.+30     	; 0x7fe <AX_UART_Init+0x106>
     7e0:	8a ef       	ldi	r24, 0xFA	; 250
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	9c 87       	std	Y+12, r25	; 0x0c
     7e6:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7e8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7ea:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <AX_UART_Init+0xf4>
     7f0:	9c 87       	std	Y+12, r25	; 0x0c
     7f2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7f4:	89 85       	ldd	r24, Y+9	; 0x09
     7f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	9a 87       	std	Y+10, r25	; 0x0a
     7fc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7fe:	89 85       	ldd	r24, Y+9	; 0x09
     800:	9a 85       	ldd	r25, Y+10	; 0x0a
     802:	89 2b       	or	r24, r25
     804:	69 f7       	brne	.-38     	; 0x7e0 <AX_UART_Init+0xe8>
     806:	14 c0       	rjmp	.+40     	; 0x830 <AX_UART_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     808:	6d 81       	ldd	r22, Y+5	; 0x05
     80a:	7e 81       	ldd	r23, Y+6	; 0x06
     80c:	8f 81       	ldd	r24, Y+7	; 0x07
     80e:	98 85       	ldd	r25, Y+8	; 0x08
     810:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     814:	dc 01       	movw	r26, r24
     816:	cb 01       	movw	r24, r22
     818:	9a 87       	std	Y+10, r25	; 0x0a
     81a:	89 87       	std	Y+9, r24	; 0x09
     81c:	89 85       	ldd	r24, Y+9	; 0x09
     81e:	9a 85       	ldd	r25, Y+10	; 0x0a
     820:	9e 87       	std	Y+14, r25	; 0x0e
     822:	8d 87       	std	Y+13, r24	; 0x0d
     824:	8d 85       	ldd	r24, Y+13	; 0x0d
     826:	9e 85       	ldd	r25, Y+14	; 0x0e
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <AX_UART_Init+0x130>
     82c:	9e 87       	std	Y+14, r25	; 0x0e
     82e:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);
}
     830:	2e 96       	adiw	r28, 0x0e	; 14
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	1f 92       	push	r1
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1<<UDRE1)) );
     84e:	00 00       	nop
     850:	88 ec       	ldi	r24, 0xC8	; 200
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	fc 01       	movw	r30, r24
     856:	80 81       	ld	r24, Z
     858:	88 2f       	mov	r24, r24
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	80 72       	andi	r24, 0x20	; 32
     85e:	99 27       	eor	r25, r25
     860:	89 2b       	or	r24, r25
     862:	b1 f3       	breq	.-20     	; 0x850 <AX_SendChar+0xe>
	UDR1 = data;
     864:	8e ec       	ldi	r24, 0xCE	; 206
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	29 81       	ldd	r18, Y+1	; 0x01
     86a:	fc 01       	movw	r30, r24
     86c:	20 83       	st	Z, r18
}
     86e:	0f 90       	pop	r0
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <AX_ReadChar>:
unsigned char AX_ReadChar(void)
{
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
   //UART1_Write('I');
   while( !( UCSR1A & (1<< RXC1)) );
     87e:	00 00       	nop
     880:	88 ec       	ldi	r24, 0xC8	; 200
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	fc 01       	movw	r30, r24
     886:	80 81       	ld	r24, Z
     888:	88 23       	and	r24, r24
     88a:	d4 f7       	brge	.-12     	; 0x880 <AX_ReadChar+0xa>
   return UDR1;
     88c:	8e ec       	ldi	r24, 0xCE	; 206
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	fc 01       	movw	r30, r24
     892:	80 81       	ld	r24, Z
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <AX_ReadStatus>:
/*************************************************************************************************************************************************************************************
*															 Funkcije za upravljanje AX-12A servoima                                                                                                                                      *
*************************************************************************************************************************************************************************************/

void AX_ReadStatus(void)
{
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	27 97       	sbiw	r28, 0x07	; 7
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
	 unsigned char status[7] = {0,0,0,0,0,0};
     8ae:	27 e0       	ldi	r18, 0x07	; 7
     8b0:	ce 01       	movw	r24, r28
     8b2:	01 96       	adiw	r24, 0x01	; 1
     8b4:	fc 01       	movw	r30, r24
     8b6:	32 2f       	mov	r19, r18
     8b8:	11 92       	st	Z+, r1
     8ba:	3a 95       	dec	r19
     8bc:	e9 f7       	brne	.-6      	; 0x8b8 <AX_ReadStatus+0x1e>

	status[0] = AX_ReadChar();
     8be:	0e 94 3b 04 	call	0x876	; 0x876 <AX_ReadChar>
     8c2:	89 83       	std	Y+1, r24	; 0x01
	status[1] = AX_ReadChar();
     8c4:	0e 94 3b 04 	call	0x876	; 0x876 <AX_ReadChar>
     8c8:	8a 83       	std	Y+2, r24	; 0x02
	status[2] = AX_ReadChar();
     8ca:	0e 94 3b 04 	call	0x876	; 0x876 <AX_ReadChar>
     8ce:	8b 83       	std	Y+3, r24	; 0x03
	status[3] = AX_ReadChar();
     8d0:	0e 94 3b 04 	call	0x876	; 0x876 <AX_ReadChar>
     8d4:	8c 83       	std	Y+4, r24	; 0x04
	status[4] = AX_ReadChar();
     8d6:	0e 94 3b 04 	call	0x876	; 0x876 <AX_ReadChar>
     8da:	8d 83       	std	Y+5, r24	; 0x05
	status[5] = AX_ReadChar();
     8dc:	0e 94 3b 04 	call	0x876	; 0x876 <AX_ReadChar>
     8e0:	8e 83       	std	Y+6, r24	; 0x06
}
     8e2:	27 96       	adiw	r28, 0x07	; 7
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <AX_StopTransmitter>:

void AX_StopTransmitter(void)
{
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
	while( !(UCSR1A & (1<<TXC1)) );
     8fc:	00 00       	nop
     8fe:	88 ec       	ldi	r24, 0xC8	; 200
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	fc 01       	movw	r30, r24
     904:	80 81       	ld	r24, Z
     906:	88 2f       	mov	r24, r24
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	80 74       	andi	r24, 0x40	; 64
     90c:	99 27       	eor	r25, r25
     90e:	89 2b       	or	r24, r25
     910:	b1 f3       	breq	.-20     	; 0x8fe <AX_StopTransmitter+0xa>
	UCSR1B &= 0xF7;
     912:	89 ec       	ldi	r24, 0xC9	; 201
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	29 ec       	ldi	r18, 0xC9	; 201
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	f9 01       	movw	r30, r18
     91c:	20 81       	ld	r18, Z
     91e:	27 7f       	andi	r18, 0xF7	; 247
     920:	fc 01       	movw	r30, r24
     922:	20 83       	st	Z, r18
	UCSR1A |= 0x40;
     924:	88 ec       	ldi	r24, 0xC8	; 200
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	28 ec       	ldi	r18, 0xC8	; 200
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	f9 01       	movw	r30, r18
     92e:	20 81       	ld	r18, Z
     930:	20 64       	ori	r18, 0x40	; 64
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18
}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x08;
     944:	89 ec       	ldi	r24, 0xC9	; 201
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	29 ec       	ldi	r18, 0xC9	; 201
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	f9 01       	movw	r30, r18
     94e:	20 81       	ld	r18, Z
     950:	28 60       	ori	r18, 0x08	; 8
     952:	fc 01       	movw	r30, r24
     954:	20 83       	st	Z, r18
}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	08 95       	ret

0000095c <AX_StopReceiver>:

void AX_StopReceiver(void)
{
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
	UCSR1B &= 0xEF;
     964:	89 ec       	ldi	r24, 0xC9	; 201
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	29 ec       	ldi	r18, 0xC9	; 201
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	f9 01       	movw	r30, r18
     96e:	20 81       	ld	r18, Z
     970:	2f 7e       	andi	r18, 0xEF	; 239
     972:	fc 01       	movw	r30, r24
     974:	20 83       	st	Z, r18
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x10;
     984:	89 ec       	ldi	r24, 0xC9	; 201
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	29 ec       	ldi	r18, 0xC9	; 201
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	f9 01       	movw	r30, r18
     98e:	20 81       	ld	r18, Z
     990:	20 61       	ori	r18, 0x10	; 16
     992:	fc 01       	movw	r30, r24
     994:	20 83       	st	Z, r18
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	6a 97       	sbiw	r28, 0x1a	; 26
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
     9b0:	9e 8b       	std	Y+22, r25	; 0x16
     9b2:	8d 8b       	std	Y+21, r24	; 0x15
     9b4:	78 8f       	std	Y+24, r23	; 0x18
     9b6:	6f 8b       	std	Y+23, r22	; 0x17
     9b8:	49 8f       	std	Y+25, r20	; 0x19
     9ba:	2a 8f       	std	Y+26, r18	; 0x1a
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;

	angle = (unsigned int)(1023 *((double)angle/300.0));
     9bc:	8d 89       	ldd	r24, Y+21	; 0x15
     9be:	9e 89       	ldd	r25, Y+22	; 0x16
     9c0:	cc 01       	movw	r24, r24
     9c2:	a0 e0       	ldi	r26, 0x00	; 0
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	bc 01       	movw	r22, r24
     9c8:	cd 01       	movw	r24, r26
     9ca:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatunsisf>
     9ce:	dc 01       	movw	r26, r24
     9d0:	cb 01       	movw	r24, r22
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	46 e9       	ldi	r20, 0x96	; 150
     9d8:	53 e4       	ldi	r21, 0x43	; 67
     9da:	bc 01       	movw	r22, r24
     9dc:	cd 01       	movw	r24, r26
     9de:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__divsf3>
     9e2:	dc 01       	movw	r26, r24
     9e4:	cb 01       	movw	r24, r22
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 ec       	ldi	r19, 0xC0	; 192
     9ea:	4f e7       	ldi	r20, 0x7F	; 127
     9ec:	54 e4       	ldi	r21, 0x44	; 68
     9ee:	bc 01       	movw	r22, r24
     9f0:	cd 01       	movw	r24, r26
     9f2:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
     9f6:	dc 01       	movw	r26, r24
     9f8:	cb 01       	movw	r24, r22
     9fa:	bc 01       	movw	r22, r24
     9fc:	cd 01       	movw	r24, r26
     9fe:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     a02:	dc 01       	movw	r26, r24
     a04:	cb 01       	movw	r24, r22
     a06:	9e 8b       	std	Y+22, r25	; 0x16
     a08:	8d 8b       	std	Y+21, r24	; 0x15

	angle_H = (unsigned char)(angle >> 8);
     a0a:	8d 89       	ldd	r24, Y+21	; 0x15
     a0c:	9e 89       	ldd	r25, Y+22	; 0x16
     a0e:	89 2f       	mov	r24, r25
     a10:	99 27       	eor	r25, r25
     a12:	89 83       	std	Y+1, r24	; 0x01
	angle_L = (unsigned char)(angle & 0x00FF);
     a14:	8d 89       	ldd	r24, Y+21	; 0x15
     a16:	8a 83       	std	Y+2, r24	; 0x02

	speed |= (direction << 10);
     a18:	89 8d       	ldd	r24, Y+25	; 0x19
     a1a:	88 2f       	mov	r24, r24
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	98 2f       	mov	r25, r24
     a20:	88 27       	eor	r24, r24
     a22:	99 0f       	add	r25, r25
     a24:	99 0f       	add	r25, r25
     a26:	9c 01       	movw	r18, r24
     a28:	8f 89       	ldd	r24, Y+23	; 0x17
     a2a:	98 8d       	ldd	r25, Y+24	; 0x18
     a2c:	82 2b       	or	r24, r18
     a2e:	93 2b       	or	r25, r19
     a30:	98 8f       	std	Y+24, r25	; 0x18
     a32:	8f 8b       	std	Y+23, r24	; 0x17
	speed_H = (unsigned char)(speed >> 8);
     a34:	8f 89       	ldd	r24, Y+23	; 0x17
     a36:	98 8d       	ldd	r25, Y+24	; 0x18
     a38:	89 2f       	mov	r24, r25
     a3a:	99 27       	eor	r25, r25
     a3c:	8b 83       	std	Y+3, r24	; 0x03
	speed_L = (unsigned char)(speed & 0x00FF);
     a3e:	8f 89       	ldd	r24, Y+23	; 0x17
     a40:	8c 83       	std	Y+4, r24	; 0x04

	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
     a42:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a44:	88 2f       	mov	r24, r24
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	9c 01       	movw	r18, r24
     a4a:	28 5d       	subi	r18, 0xD8	; 216
     a4c:	3f 4f       	sbci	r19, 0xFF	; 255
     a4e:	8b 81       	ldd	r24, Y+3	; 0x03
     a50:	88 2f       	mov	r24, r24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	28 0f       	add	r18, r24
     a56:	39 1f       	adc	r19, r25
     a58:	8c 81       	ldd	r24, Y+4	; 0x04
     a5a:	88 2f       	mov	r24, r24
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	28 0f       	add	r18, r24
     a60:	39 1f       	adc	r19, r25
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	88 2f       	mov	r24, r24
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	28 0f       	add	r18, r24
     a6a:	39 1f       	adc	r19, r25
     a6c:	8a 81       	ldd	r24, Y+2	; 0x02
     a6e:	88 2f       	mov	r24, r24
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	82 0f       	add	r24, r18
     a74:	93 1f       	adc	r25, r19
     a76:	80 95       	com	r24
     a78:	90 95       	com	r25
     a7a:	9e 83       	std	Y+6, r25	; 0x06
     a7c:	8d 83       	std	Y+5, r24	; 0x05

	AX_StopReceiver();
     a7e:	0e 94 ae 04 	call	0x95c	; 0x95c <AX_StopReceiver>

	AX_SendChar(START);
     a82:	8f ef       	ldi	r24, 0xFF	; 255
     a84:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(START);
     a88:	8f ef       	ldi	r24, 0xFF	; 255
     a8a:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(id);
     a8e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a90:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(LENGTH);
     a94:	87 e0       	ldi	r24, 0x07	; 7
     a96:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(INSTR);
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(ADDRESS);
     aa0:	8e e1       	ldi	r24, 0x1E	; 30
     aa2:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(angle_L);
     aa6:	8a 81       	ldd	r24, Y+2	; 0x02
     aa8:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(angle_H);
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(speed_L);
     ab2:	8c 81       	ldd	r24, Y+4	; 0x04
     ab4:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(speed_H);
     ab8:	8b 81       	ldd	r24, Y+3	; 0x03
     aba:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(checksum);
     abe:	8d 81       	ldd	r24, Y+5	; 0x05
     ac0:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>

	AX_StopTransmitter();
     ac4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     ac8:	0e 94 be 04 	call	0x97c	; 0x97c <AX_ReleaseReceiver>
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	a8 e4       	ldi	r26, 0x48	; 72
     ad2:	b2 e4       	ldi	r27, 0x42	; 66
     ad4:	8f 83       	std	Y+7, r24	; 0x07
     ad6:	98 87       	std	Y+8, r25	; 0x08
     ad8:	a9 87       	std	Y+9, r26	; 0x09
     ada:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e4       	ldi	r19, 0x40	; 64
     ae0:	4c e1       	ldi	r20, 0x1C	; 28
     ae2:	55 e4       	ldi	r21, 0x45	; 69
     ae4:	6f 81       	ldd	r22, Y+7	; 0x07
     ae6:	78 85       	ldd	r23, Y+8	; 0x08
     ae8:	89 85       	ldd	r24, Y+9	; 0x09
     aea:	9a 85       	ldd	r25, Y+10	; 0x0a
     aec:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
     af0:	dc 01       	movw	r26, r24
     af2:	cb 01       	movw	r24, r22
     af4:	8b 87       	std	Y+11, r24	; 0x0b
     af6:	9c 87       	std	Y+12, r25	; 0x0c
     af8:	ad 87       	std	Y+13, r26	; 0x0d
     afa:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	40 e8       	ldi	r20, 0x80	; 128
     b02:	5f e3       	ldi	r21, 0x3F	; 63
     b04:	6b 85       	ldd	r22, Y+11	; 0x0b
     b06:	7c 85       	ldd	r23, Y+12	; 0x0c
     b08:	8d 85       	ldd	r24, Y+13	; 0x0d
     b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b0c:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
     b10:	88 23       	and	r24, r24
     b12:	2c f4       	brge	.+10     	; 0xb1e <AX_SetAngle+0x182>
		__ticks = 1;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	98 8b       	std	Y+16, r25	; 0x10
     b1a:	8f 87       	std	Y+15, r24	; 0x0f
     b1c:	3f c0       	rjmp	.+126    	; 0xb9c <AX_SetAngle+0x200>
	else if (__tmp > 65535)
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	3f ef       	ldi	r19, 0xFF	; 255
     b22:	4f e7       	ldi	r20, 0x7F	; 127
     b24:	57 e4       	ldi	r21, 0x47	; 71
     b26:	6b 85       	ldd	r22, Y+11	; 0x0b
     b28:	7c 85       	ldd	r23, Y+12	; 0x0c
     b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b2e:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
     b32:	18 16       	cp	r1, r24
     b34:	4c f5       	brge	.+82     	; 0xb88 <AX_SetAngle+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	40 e2       	ldi	r20, 0x20	; 32
     b3c:	51 e4       	ldi	r21, 0x41	; 65
     b3e:	6f 81       	ldd	r22, Y+7	; 0x07
     b40:	78 85       	ldd	r23, Y+8	; 0x08
     b42:	89 85       	ldd	r24, Y+9	; 0x09
     b44:	9a 85       	ldd	r25, Y+10	; 0x0a
     b46:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
     b4a:	dc 01       	movw	r26, r24
     b4c:	cb 01       	movw	r24, r22
     b4e:	bc 01       	movw	r22, r24
     b50:	cd 01       	movw	r24, r26
     b52:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     b56:	dc 01       	movw	r26, r24
     b58:	cb 01       	movw	r24, r22
     b5a:	98 8b       	std	Y+16, r25	; 0x10
     b5c:	8f 87       	std	Y+15, r24	; 0x0f
     b5e:	0f c0       	rjmp	.+30     	; 0xb7e <AX_SetAngle+0x1e2>
     b60:	8a ef       	ldi	r24, 0xFA	; 250
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	9a 8b       	std	Y+18, r25	; 0x12
     b66:	89 8b       	std	Y+17, r24	; 0x11
     b68:	89 89       	ldd	r24, Y+17	; 0x11
     b6a:	9a 89       	ldd	r25, Y+18	; 0x12
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <AX_SetAngle+0x1d0>
     b70:	9a 8b       	std	Y+18, r25	; 0x12
     b72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b74:	8f 85       	ldd	r24, Y+15	; 0x0f
     b76:	98 89       	ldd	r25, Y+16	; 0x10
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	98 8b       	std	Y+16, r25	; 0x10
     b7c:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b80:	98 89       	ldd	r25, Y+16	; 0x10
     b82:	89 2b       	or	r24, r25
     b84:	69 f7       	brne	.-38     	; 0xb60 <AX_SetAngle+0x1c4>
     b86:	14 c0       	rjmp	.+40     	; 0xbb0 <AX_SetAngle+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b88:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     b8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b90:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	98 8b       	std	Y+16, r25	; 0x10
     b9a:	8f 87       	std	Y+15, r24	; 0x0f
     b9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b9e:	98 89       	ldd	r25, Y+16	; 0x10
     ba0:	9c 8b       	std	Y+20, r25	; 0x14
     ba2:	8b 8b       	std	Y+19, r24	; 0x13
     ba4:	8b 89       	ldd	r24, Y+19	; 0x13
     ba6:	9c 89       	ldd	r25, Y+20	; 0x14
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <AX_SetAngle+0x20c>
     bac:	9c 8b       	std	Y+20, r25	; 0x14
     bae:	8b 8b       	std	Y+19, r24	; 0x13

	_delay_ms(50);

	AX_ReleaseTransmitter();
     bb0:	0e 94 9e 04 	call	0x93c	; 0x93c <AX_ReleaseTransmitter>
}
     bb4:	6a 96       	adiw	r28, 0x1a	; 26
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	de bf       	out	0x3e, r29	; 62
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	cd bf       	out	0x3d, r28	; 61
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <AX_EndlessTurn>:


void AX_EndlessTurn(void)
{
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	60 97       	sbiw	r28, 0x10	; 16
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61

	unsigned int checksum;

	checksum = ~(0x01 + 0x07 + 0x03 + 0x06 + (1023 & 0xFF) + (1023 >> 8) & 0xFF);
     bda:	8c ee       	ldi	r24, 0xEC	; 236
     bdc:	9f ef       	ldi	r25, 0xFF	; 255
     bde:	9a 83       	std	Y+2, r25	; 0x02
     be0:	89 83       	std	Y+1, r24	; 0x01

	AX_StopReceiver();
     be2:	0e 94 ae 04 	call	0x95c	; 0x95c <AX_StopReceiver>

	AX_SendChar(0xFF);
     be6:	8f ef       	ldi	r24, 0xFF	; 255
     be8:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(0xFF);
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(0x01);
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(0x07);
     bf8:	87 e0       	ldi	r24, 0x07	; 7
     bfa:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(0x03);
     bfe:	83 e0       	ldi	r24, 0x03	; 3
     c00:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(0x06);
     c04:	86 e0       	ldi	r24, 0x06	; 6
     c06:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(0x00);
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(0x00);
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(1023 & 0xFF);
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(1023 >> 8);
     c1c:	83 e0       	ldi	r24, 0x03	; 3
     c1e:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(checksum);
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>

	AX_StopTransmitter();
     c28:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     c2c:	0e 94 be 04 	call	0x97c	; 0x97c <AX_ReleaseReceiver>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a8 e4       	ldi	r26, 0x48	; 72
     c36:	b2 e4       	ldi	r27, 0x42	; 66
     c38:	8b 83       	std	Y+3, r24	; 0x03
     c3a:	9c 83       	std	Y+4, r25	; 0x04
     c3c:	ad 83       	std	Y+5, r26	; 0x05
     c3e:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e4       	ldi	r19, 0x40	; 64
     c44:	4c e1       	ldi	r20, 0x1C	; 28
     c46:	55 e4       	ldi	r21, 0x45	; 69
     c48:	6b 81       	ldd	r22, Y+3	; 0x03
     c4a:	7c 81       	ldd	r23, Y+4	; 0x04
     c4c:	8d 81       	ldd	r24, Y+5	; 0x05
     c4e:	9e 81       	ldd	r25, Y+6	; 0x06
     c50:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	8f 83       	std	Y+7, r24	; 0x07
     c5a:	98 87       	std	Y+8, r25	; 0x08
     c5c:	a9 87       	std	Y+9, r26	; 0x09
     c5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e8       	ldi	r20, 0x80	; 128
     c66:	5f e3       	ldi	r21, 0x3F	; 63
     c68:	6f 81       	ldd	r22, Y+7	; 0x07
     c6a:	78 85       	ldd	r23, Y+8	; 0x08
     c6c:	89 85       	ldd	r24, Y+9	; 0x09
     c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c70:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
     c74:	88 23       	and	r24, r24
     c76:	2c f4       	brge	.+10     	; 0xc82 <AX_EndlessTurn+0xbc>
		__ticks = 1;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	9c 87       	std	Y+12, r25	; 0x0c
     c7e:	8b 87       	std	Y+11, r24	; 0x0b
     c80:	3f c0       	rjmp	.+126    	; 0xd00 <AX_EndlessTurn+0x13a>
	else if (__tmp > 65535)
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	3f ef       	ldi	r19, 0xFF	; 255
     c86:	4f e7       	ldi	r20, 0x7F	; 127
     c88:	57 e4       	ldi	r21, 0x47	; 71
     c8a:	6f 81       	ldd	r22, Y+7	; 0x07
     c8c:	78 85       	ldd	r23, Y+8	; 0x08
     c8e:	89 85       	ldd	r24, Y+9	; 0x09
     c90:	9a 85       	ldd	r25, Y+10	; 0x0a
     c92:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
     c96:	18 16       	cp	r1, r24
     c98:	4c f5       	brge	.+82     	; 0xcec <AX_EndlessTurn+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	40 e2       	ldi	r20, 0x20	; 32
     ca0:	51 e4       	ldi	r21, 0x41	; 65
     ca2:	6b 81       	ldd	r22, Y+3	; 0x03
     ca4:	7c 81       	ldd	r23, Y+4	; 0x04
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
     ca8:	9e 81       	ldd	r25, Y+6	; 0x06
     caa:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
     cae:	dc 01       	movw	r26, r24
     cb0:	cb 01       	movw	r24, r22
     cb2:	bc 01       	movw	r22, r24
     cb4:	cd 01       	movw	r24, r26
     cb6:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	9c 87       	std	Y+12, r25	; 0x0c
     cc0:	8b 87       	std	Y+11, r24	; 0x0b
     cc2:	0f c0       	rjmp	.+30     	; 0xce2 <AX_EndlessTurn+0x11c>
     cc4:	8a ef       	ldi	r24, 0xFA	; 250
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	9e 87       	std	Y+14, r25	; 0x0e
     cca:	8d 87       	std	Y+13, r24	; 0x0d
     ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cce:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <AX_EndlessTurn+0x10a>
     cd4:	9e 87       	std	Y+14, r25	; 0x0e
     cd6:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd8:	8b 85       	ldd	r24, Y+11	; 0x0b
     cda:	9c 85       	ldd	r25, Y+12	; 0x0c
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	9c 87       	std	Y+12, r25	; 0x0c
     ce0:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ce2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ce4:	9c 85       	ldd	r25, Y+12	; 0x0c
     ce6:	89 2b       	or	r24, r25
     ce8:	69 f7       	brne	.-38     	; 0xcc4 <AX_EndlessTurn+0xfe>
     cea:	14 c0       	rjmp	.+40     	; 0xd14 <AX_EndlessTurn+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cec:	6f 81       	ldd	r22, Y+7	; 0x07
     cee:	78 85       	ldd	r23, Y+8	; 0x08
     cf0:	89 85       	ldd	r24, Y+9	; 0x09
     cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf4:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	9c 87       	std	Y+12, r25	; 0x0c
     cfe:	8b 87       	std	Y+11, r24	; 0x0b
     d00:	8b 85       	ldd	r24, Y+11	; 0x0b
     d02:	9c 85       	ldd	r25, Y+12	; 0x0c
     d04:	98 8b       	std	Y+16, r25	; 0x10
     d06:	8f 87       	std	Y+15, r24	; 0x0f
     d08:	8f 85       	ldd	r24, Y+15	; 0x0f
     d0a:	98 89       	ldd	r25, Y+16	; 0x10
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <AX_EndlessTurn+0x146>
     d10:	98 8b       	std	Y+16, r25	; 0x10
     d12:	8f 87       	std	Y+15, r24	; 0x0f

	//AX_ReadStatus();
	_delay_ms(50);

	AX_ReleaseTransmitter();
     d14:	0e 94 9e 04 	call	0x93c	; 0x93c <AX_ReleaseTransmitter>
}
     d18:	60 96       	adiw	r28, 0x10	; 16
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <AX_SetSpeed>:

void AX_SetSpeed(unsigned int direction, unsigned int speed)
{
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	28 97       	sbiw	r28, 0x08	; 8
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	9e 83       	std	Y+6, r25	; 0x06
     d40:	8d 83       	std	Y+5, r24	; 0x05
     d42:	78 87       	std	Y+8, r23	; 0x08
     d44:	6f 83       	std	Y+7, r22	; 0x07
	/*
		direction ---> TurnDirection -> 1 - ClockWise   0 - CounterClockWise
	*/

	unsigned int data = 0x0000;
     d46:	1a 82       	std	Y+2, r1	; 0x02
     d48:	19 82       	std	Y+1, r1	; 0x01
	unsigned int checksum = 0;
     d4a:	1c 82       	std	Y+4, r1	; 0x04
     d4c:	1b 82       	std	Y+3, r1	; 0x03

	data = speed;
     d4e:	8f 81       	ldd	r24, Y+7	; 0x07
     d50:	98 85       	ldd	r25, Y+8	; 0x08
     d52:	9a 83       	std	Y+2, r25	; 0x02
     d54:	89 83       	std	Y+1, r24	; 0x01
	data |= (direction << 10);
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	98 2f       	mov	r25, r24
     d5c:	88 27       	eor	r24, r24
     d5e:	99 0f       	add	r25, r25
     d60:	99 0f       	add	r25, r25
     d62:	29 81       	ldd	r18, Y+1	; 0x01
     d64:	3a 81       	ldd	r19, Y+2	; 0x02
     d66:	82 2b       	or	r24, r18
     d68:	93 2b       	or	r25, r19
     d6a:	9a 83       	std	Y+2, r25	; 0x02
     d6c:	89 83       	std	Y+1, r24	; 0x01


	checksum = ~(0x01 + 0x05 + 0x03 + 0x20 + data);
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	89 96       	adiw	r24, 0x29	; 41
     d74:	80 95       	com	r24
     d76:	90 95       	com	r25
     d78:	9c 83       	std	Y+4, r25	; 0x04
     d7a:	8b 83       	std	Y+3, r24	; 0x03

	AX_StopReceiver();
     d7c:	0e 94 ae 04 	call	0x95c	; 0x95c <AX_StopReceiver>

	AX_SendChar(0xFF);
     d80:	8f ef       	ldi	r24, 0xFF	; 255
     d82:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(0xFF);
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(0x01);
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(0x05);
     d92:	85 e0       	ldi	r24, 0x05	; 5
     d94:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(0x03);
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(0x20);
     d9e:	80 e2       	ldi	r24, 0x20	; 32
     da0:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(data);
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(data >> 8);
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	89 2f       	mov	r24, r25
     db0:	99 27       	eor	r25, r25
     db2:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>
	AX_SendChar(checksum);
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	0e 94 21 04 	call	0x842	; 0x842 <AX_SendChar>

	AX_StopTransmitter();
     dbc:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     dc0:	0e 94 be 04 	call	0x97c	; 0x97c <AX_ReleaseReceiver>

	AX_ReadStatus();
     dc4:	0e 94 4d 04 	call	0x89a	; 0x89a <AX_ReadStatus>

	AX_ReleaseTransmitter();
     dc8:	0e 94 9e 04 	call	0x93c	; 0x93c <AX_ReleaseTransmitter>
}
     dcc:	28 96       	adiw	r28, 0x08	; 8
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <__vector_18>:
static volatile unsigned char rxCounter[10];
//volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     dde:	1f 92       	push	r1
     de0:	0f 92       	push	r0
     de2:	00 90 5f 00 	lds	r0, 0x005F
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	00 90 5b 00 	lds	r0, 0x005B
     dee:	0f 92       	push	r0
     df0:	2f 93       	push	r18
     df2:	3f 93       	push	r19
     df4:	4f 93       	push	r20
     df6:	5f 93       	push	r21
     df8:	8f 93       	push	r24
     dfa:	9f 93       	push	r25
     dfc:	ef 93       	push	r30
     dfe:	ff 93       	push	r31
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	00 d0       	rcall	.+0      	; 0xe06 <__vector_18+0x28>
     e06:	00 d0       	rcall	.+0      	; 0xe08 <__vector_18+0x2a>
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     e0c:	8d ee       	ldi	r24, 0xED	; 237
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	fc 01       	movw	r30, r24
     e12:	80 81       	ld	r24, Z
     e14:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	a4 c0       	rjmp	.+328    	; 0xf62 <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
     e1a:	8d ee       	ldi	r24, 0xED	; 237
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	29 81       	ldd	r18, Y+1	; 0x01
     e20:	22 95       	swap	r18
     e22:	20 7f       	andi	r18, 0xF0	; 240
     e24:	fc 01       	movw	r30, r24
     e26:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     e28:	8e ee       	ldi	r24, 0xEE	; 238
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	fc 01       	movw	r30, r24
     e2e:	80 81       	ld	r24, Z
     e30:	82 95       	swap	r24
     e32:	86 95       	lsr	r24
     e34:	87 70       	andi	r24, 0x07	; 7
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	81 70       	andi	r24, 0x01	; 1
     e3c:	99 27       	eor	r25, r25
     e3e:	89 2b       	or	r24, r25
     e40:	09 f4       	brne	.+2      	; 0xe44 <__vector_18+0x66>
     e42:	70 c0       	rjmp	.+224    	; 0xf24 <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     e44:	8f ee       	ldi	r24, 0xEF	; 239
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	20 e8       	ldi	r18, 0x80	; 128
     e4a:	fc 01       	movw	r30, r24
     e4c:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     e4e:	8e ee       	ldi	r24, 0xEE	; 238
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	2e ee       	ldi	r18, 0xEE	; 238
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	f9 01       	movw	r30, r18
     e58:	20 81       	ld	r18, Z
     e5a:	2f 7d       	andi	r18, 0xDF	; 223
     e5c:	fc 01       	movw	r30, r24
     e5e:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     e60:	82 ef       	ldi	r24, 0xF2	; 242
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	fc 01       	movw	r30, r24
     e66:	80 81       	ld	r24, Z
     e68:	82 95       	swap	r24
     e6a:	86 95       	lsr	r24
     e6c:	87 70       	andi	r24, 0x07	; 7
     e6e:	28 2f       	mov	r18, r24
     e70:	83 ef       	ldi	r24, 0xF3	; 243
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	fc 01       	movw	r30, r24
     e76:	80 81       	ld	r24, Z
     e78:	88 2f       	mov	r24, r24
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	82 2b       	or	r24, r18
     e8a:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
     e8c:	1a 82       	std	Y+2, r1	; 0x02
     e8e:	26 c0       	rjmp	.+76     	; 0xedc <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	88 2f       	mov	r24, r24
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	81 50       	subi	r24, 0x01	; 1
     e98:	90 48       	sbci	r25, 0x80	; 128
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	82 5d       	subi	r24, 0xD2	; 210
     ea0:	9e 4f       	sbci	r25, 0xFE	; 254
     ea2:	fc 01       	movw	r30, r24
     ea4:	20 81       	ld	r18, Z
     ea6:	31 81       	ldd	r19, Z+1	; 0x01
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	8e 5b       	subi	r24, 0xBE	; 190
     eb2:	9e 4f       	sbci	r25, 0xFE	; 254
     eb4:	fc 01       	movw	r30, r24
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	84 0f       	add	r24, r20
     ec4:	95 1f       	adc	r25, r21
     ec6:	82 0f       	add	r24, r18
     ec8:	93 1f       	adc	r25, r19
     eca:	2a ef       	ldi	r18, 0xFA	; 250
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	f9 01       	movw	r30, r18
     ed0:	20 81       	ld	r18, Z
     ed2:	fc 01       	movw	r30, r24
     ed4:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	8f 5f       	subi	r24, 0xFF	; 255
     eda:	8a 83       	std	Y+2, r24	; 0x02
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	88 30       	cpi	r24, 0x08	; 8
     ee0:	b8 f2       	brcs	.-82     	; 0xe90 <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	8e 5b       	subi	r24, 0xBE	; 190
     eec:	9e 4f       	sbci	r25, 0xFE	; 254
     eee:	fc 01       	movw	r30, r24
     ef0:	20 81       	ld	r18, Z
     ef2:	2f 5f       	subi	r18, 0xFF	; 255
     ef4:	fc 01       	movw	r30, r24
     ef6:	20 83       	st	Z, r18
     ef8:	25 30       	cpi	r18, 0x05	; 5
     efa:	41 f4       	brne	.+16     	; 0xf0c <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	8e 5b       	subi	r24, 0xBE	; 190
     f06:	9e 4f       	sbci	r25, 0xFE	; 254
     f08:	fc 01       	movw	r30, r24
     f0a:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     f0c:	8c 81       	ldd	r24, Y+4	; 0x04
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	8a 5a       	subi	r24, 0xAA	; 170
     f16:	9e 4f       	sbci	r25, 0xFE	; 254
     f18:	fc 01       	movw	r30, r24
     f1a:	20 81       	ld	r18, Z
     f1c:	2f 5f       	subi	r18, 0xFF	; 255
     f1e:	fc 01       	movw	r30, r24
     f20:	20 83       	st	Z, r18

			break;
     f22:	23 c0       	rjmp	.+70     	; 0xf6a <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     f24:	8e ee       	ldi	r24, 0xEE	; 238
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	fc 01       	movw	r30, r24
     f2a:	80 81       	ld	r24, Z
     f2c:	82 95       	swap	r24
     f2e:	86 95       	lsr	r24
     f30:	86 95       	lsr	r24
     f32:	83 70       	andi	r24, 0x03	; 3
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	81 70       	andi	r24, 0x01	; 1
     f3a:	99 27       	eor	r25, r25
     f3c:	89 2b       	or	r24, r25
     f3e:	71 f0       	breq	.+28     	; 0xf5c <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
     f40:	8f ee       	ldi	r24, 0xEF	; 239
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	fc 01       	movw	r30, r24
     f46:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     f48:	8e ee       	ldi	r24, 0xEE	; 238
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	2e ee       	ldi	r18, 0xEE	; 238
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	f9 01       	movw	r30, r18
     f52:	20 81       	ld	r18, Z
     f54:	2f 7b       	andi	r18, 0xBF	; 191
     f56:	fc 01       	movw	r30, r24
     f58:	20 83       	st	Z, r18

			break;
     f5a:	07 c0       	rjmp	.+14     	; 0xf6a <__vector_18+0x18c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	8f 30       	cpi	r24, 0x0F	; 15
     f66:	08 f4       	brcc	.+2      	; 0xf6a <__vector_18+0x18c>
     f68:	58 cf       	rjmp	.-336    	; 0xe1a <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     f6a:	8d ee       	ldi	r24, 0xED	; 237
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	2b 81       	ldd	r18, Y+3	; 0x03
     f70:	fc 01       	movw	r30, r24
     f72:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // zato sto tako treba.
}
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	ff 91       	pop	r31
     f82:	ef 91       	pop	r30
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	5f 91       	pop	r21
     f8a:	4f 91       	pop	r20
     f8c:	3f 91       	pop	r19
     f8e:	2f 91       	pop	r18
     f90:	0f 90       	pop	r0
     f92:	00 92 5b 00 	sts	0x005B, r0
     f96:	0f 90       	pop	r0
     f98:	00 92 5f 00 	sts	0x005F, r0
     f9c:	0f 90       	pop	r0
     f9e:	1f 90       	pop	r1
     fa0:	18 95       	reti

00000fa2 <CAN_InitModule>:


static void CAN_InitModule(void)
{
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <CAN_InitModule+0x6>
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     fac:	88 ed       	ldi	r24, 0xD8	; 216
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	21 e0       	ldi	r18, 0x01	; 1
     fb2:	fc 01       	movw	r30, r24
     fb4:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     fb6:	19 82       	std	Y+1, r1	; 0x01
     fb8:	3e c0       	rjmp	.+124    	; 0x1036 <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
     fba:	8d ee       	ldi	r24, 0xED	; 237
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	29 81       	ldd	r18, Y+1	; 0x01
     fc0:	22 95       	swap	r18
     fc2:	20 7f       	andi	r18, 0xF0	; 240
     fc4:	fc 01       	movw	r30, r24
     fc6:	20 83       	st	Z, r18

		CANSTMOB = 0;
     fc8:	8e ee       	ldi	r24, 0xEE	; 238
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	fc 01       	movw	r30, r24
     fce:	10 82       	st	Z, r1
		CANCDMOB = 0;
     fd0:	8f ee       	ldi	r24, 0xEF	; 239
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	fc 01       	movw	r30, r24
     fd6:	10 82       	st	Z, r1

		CANIDT1 = 0;
     fd8:	83 ef       	ldi	r24, 0xF3	; 243
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	fc 01       	movw	r30, r24
     fde:	10 82       	st	Z, r1
		CANIDT2 = 0;
     fe0:	82 ef       	ldi	r24, 0xF2	; 242
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	fc 01       	movw	r30, r24
     fe6:	10 82       	st	Z, r1
		CANIDT3 = 0;
     fe8:	81 ef       	ldi	r24, 0xF1	; 241
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	fc 01       	movw	r30, r24
     fee:	10 82       	st	Z, r1
		CANIDT4 = 0;
     ff0:	80 ef       	ldi	r24, 0xF0	; 240
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	fc 01       	movw	r30, r24
     ff6:	10 82       	st	Z, r1
		CANIDM1 = 0;
     ff8:	87 ef       	ldi	r24, 0xF7	; 247
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	fc 01       	movw	r30, r24
     ffe:	10 82       	st	Z, r1
		CANIDM2 = 0;
    1000:	86 ef       	ldi	r24, 0xF6	; 246
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	fc 01       	movw	r30, r24
    1006:	10 82       	st	Z, r1
		CANIDM3 = 0;
    1008:	85 ef       	ldi	r24, 0xF5	; 245
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	fc 01       	movw	r30, r24
    100e:	10 82       	st	Z, r1
		CANIDM4 = 0;
    1010:	84 ef       	ldi	r24, 0xF4	; 244
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	fc 01       	movw	r30, r24
    1016:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    1018:	1a 82       	std	Y+2, r1	; 0x02
    101a:	07 c0       	rjmp	.+14     	; 0x102a <CAN_InitModule+0x88>
			CANMSG = 0;
    101c:	8a ef       	ldi	r24, 0xFA	; 250
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	fc 01       	movw	r30, r24
    1022:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	8f 5f       	subi	r24, 0xFF	; 255
    1028:	8a 83       	std	Y+2, r24	; 0x02
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	88 30       	cpi	r24, 0x08	; 8
    102e:	b0 f3       	brcs	.-20     	; 0x101c <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	8f 5f       	subi	r24, 0xFF	; 255
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	8f 30       	cpi	r24, 0x0F	; 15
    103a:	08 f4       	brcc	.+2      	; 0x103e <CAN_InitModule+0x9c>
    103c:	be cf       	rjmp	.-132    	; 0xfba <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
    103e:	88 ed       	ldi	r24, 0xD8	; 216
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	22 e0       	ldi	r18, 0x02	; 2
    1044:	fc 01       	movw	r30, r24
    1046:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
    1048:	82 ee       	ldi	r24, 0xE2	; 226
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	21 e0       	ldi	r18, 0x01	; 1
    104e:	fc 01       	movw	r30, r24
    1050:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
    1052:	83 ee       	ldi	r24, 0xE3	; 227
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	28 e0       	ldi	r18, 0x08	; 8
    1058:	fc 01       	movw	r30, r24
    105a:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
    105c:	84 ee       	ldi	r24, 0xE4	; 228
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	2e e5       	ldi	r18, 0x5E	; 94
    1062:	fc 01       	movw	r30, r24
    1064:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
    1066:	85 ee       	ldi	r24, 0xE5	; 229
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	fc 01       	movw	r30, r24
    106c:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
    106e:	8b ed       	ldi	r24, 0xDB	; 219
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	20 eb       	ldi	r18, 0xB0	; 176
    1074:	fc 01       	movw	r30, r24
    1076:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
    1078:	8f ed       	ldi	r24, 0xDF	; 223
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	2f e7       	ldi	r18, 0x7F	; 127
    107e:	fc 01       	movw	r30, r24
    1080:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
    1082:	8e ed       	ldi	r24, 0xDE	; 222
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	2f ef       	ldi	r18, 0xFF	; 255
    1088:	fc 01       	movw	r30, r24
    108a:	20 83       	st	Z, r18
	sei();
    108c:	78 94       	sei
}
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	00 d0       	rcall	.+0      	; 0x109e <CAN_InitRxMob+0x6>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <CAN_InitRxMob+0x8>
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	9c 83       	std	Y+4, r25	; 0x04
    10a6:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    10a8:	8d ee       	ldi	r24, 0xED	; 237
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	fc 01       	movw	r30, r24
    10ae:	80 81       	ld	r24, Z
    10b0:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    10b2:	00 00       	nop
    10b4:	89 ed       	ldi	r24, 0xD9	; 217
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	fc 01       	movw	r30, r24
    10ba:	80 81       	ld	r24, Z
    10bc:	82 95       	swap	r24
    10be:	8f 70       	andi	r24, 0x0F	; 15
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	81 70       	andi	r24, 0x01	; 1
    10c6:	99 27       	eor	r25, r25
    10c8:	89 2b       	or	r24, r25
    10ca:	a1 f7       	brne	.-24     	; 0x10b4 <CAN_InitRxMob+0x1c>
    10cc:	89 ed       	ldi	r24, 0xD9	; 217
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	fc 01       	movw	r30, r24
    10d2:	80 81       	ld	r24, Z
    10d4:	86 95       	lsr	r24
    10d6:	86 95       	lsr	r24
    10d8:	86 95       	lsr	r24
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	81 70       	andi	r24, 0x01	; 1
    10e0:	99 27       	eor	r25, r25
    10e2:	89 2b       	or	r24, r25
    10e4:	39 f7       	brne	.-50     	; 0x10b4 <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    10e6:	19 82       	std	Y+1, r1	; 0x01
    10e8:	49 c0       	rjmp	.+146    	; 0x117c <__stack+0x7d>
	{
		CANPAGE = ch << 4;
    10ea:	8d ee       	ldi	r24, 0xED	; 237
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	29 81       	ldd	r18, Y+1	; 0x01
    10f0:	22 95       	swap	r18
    10f2:	20 7f       	andi	r18, 0xF0	; 240
    10f4:	fc 01       	movw	r30, r24
    10f6:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
    10f8:	8f ee       	ldi	r24, 0xEF	; 239
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	fc 01       	movw	r30, r24
    10fe:	80 81       	ld	r24, Z
    1100:	82 95       	swap	r24
    1102:	86 95       	lsr	r24
    1104:	86 95       	lsr	r24
    1106:	83 70       	andi	r24, 0x03	; 3
    1108:	88 23       	and	r24, r24
    110a:	21 f0       	breq	.+8      	; 0x1114 <__stack+0x15>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	8f 5f       	subi	r24, 0xFF	; 255
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	34 c0       	rjmp	.+104    	; 0x117c <__stack+0x7d>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
    1114:	8f ee       	ldi	r24, 0xEF	; 239
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	2f e0       	ldi	r18, 0x0F	; 15
    111a:	fc 01       	movw	r30, r24
    111c:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
    111e:	83 ef       	ldi	r24, 0xF3	; 243
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	2b 81       	ldd	r18, Y+3	; 0x03
    1124:	3c 81       	ldd	r19, Y+4	; 0x04
    1126:	33 27       	eor	r19, r19
    1128:	36 95       	lsr	r19
    112a:	27 95       	ror	r18
    112c:	36 95       	lsr	r19
    112e:	27 95       	ror	r18
    1130:	36 95       	lsr	r19
    1132:	27 95       	ror	r18
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
    1138:	82 ef       	ldi	r24, 0xF2	; 242
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	2b 81       	ldd	r18, Y+3	; 0x03
    113e:	22 95       	swap	r18
    1140:	22 0f       	add	r18, r18
    1142:	20 7e       	andi	r18, 0xE0	; 224
    1144:	fc 01       	movw	r30, r24
    1146:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
    1148:	86 ef       	ldi	r24, 0xF6	; 246
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	20 ee       	ldi	r18, 0xE0	; 224
    114e:	fc 01       	movw	r30, r24
    1150:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
    1152:	87 ef       	ldi	r24, 0xF7	; 247
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	2f ef       	ldi	r18, 0xFF	; 255
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
    115c:	8f ee       	ldi	r24, 0xEF	; 239
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	2f ee       	ldi	r18, 0xEF	; 239
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	f9 01       	movw	r30, r18
    1166:	20 81       	ld	r18, Z
    1168:	20 68       	ori	r18, 0x80	; 128
    116a:	fc 01       	movw	r30, r24
    116c:	20 83       	st	Z, r18

		CANPAGE = tempPage;
    116e:	8d ee       	ldi	r24, 0xED	; 237
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	2a 81       	ldd	r18, Y+2	; 0x02
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18

		return 1;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	0a c0       	rjmp	.+20     	; 0x1190 <__stack+0x91>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	8f 30       	cpi	r24, 0x0F	; 15
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__stack+0x85>
    1182:	b3 cf       	rjmp	.-154    	; 0x10ea <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
    1184:	8d ee       	ldi	r24, 0xED	; 237
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	2a 81       	ldd	r18, Y+2	; 0x02
    118a:	fc 01       	movw	r30, r24
    118c:	20 83       	st	Z, r18

	return 0;
    118e:	80 e0       	ldi	r24, 0x00	; 0
}
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <CAN_Init+0xa>
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
    11ae:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    11b2:	19 82       	std	Y+1, r1	; 0x01
    11b4:	30 c0       	rjmp	.+96     	; 0x1216 <CAN_Init+0x78>
	{
		CAN_InitRxMob(i + 1);
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	0e 94 4c 08 	call	0x1098	; 0x1098 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	8c 01       	movw	r16, r24
    11ce:	02 5d       	subi	r16, 0xD2	; 210
    11d0:	1e 4f       	sbci	r17, 0xFE	; 254
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	85 e0       	ldi	r24, 0x05	; 5
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 b5 22 	call	0x456a	; 0x456a <calloc>
    11de:	f8 01       	movw	r30, r16
    11e0:	91 83       	std	Z+1, r25	; 0x01
    11e2:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	29 81       	ldd	r18, Y+1	; 0x01
    11ec:	22 2f       	mov	r18, r18
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	49 81       	ldd	r20, Y+1	; 0x01
    11f2:	44 2f       	mov	r20, r20
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	4a 5a       	subi	r20, 0xAA	; 170
    11fa:	5e 4f       	sbci	r21, 0xFE	; 254
    11fc:	fa 01       	movw	r30, r20
    11fe:	60 83       	st	Z, r22
    1200:	24 5b       	subi	r18, 0xB4	; 180
    1202:	3e 4f       	sbci	r19, 0xFE	; 254
    1204:	f9 01       	movw	r30, r18
    1206:	60 83       	st	Z, r22
    1208:	8e 5b       	subi	r24, 0xBE	; 190
    120a:	9e 4f       	sbci	r25, 0xFE	; 254
    120c:	fc 01       	movw	r30, r24
    120e:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	8f 5f       	subi	r24, 0xFF	; 255
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	99 81       	ldd	r25, Y+1	; 0x01
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	98 17       	cp	r25, r24
    121c:	60 f2       	brcs	.-104    	; 0x11b6 <CAN_Init+0x18>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	08 95       	ret

0000122c <CAN_CheckRX>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	1f 92       	push	r1
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	89 83       	std	Y+1, r24	; 0x01
	return rxCounter[nodeID - 1];
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	8a 5a       	subi	r24, 0xAA	; 170
    1242:	9e 4f       	sbci	r25, 0xFE	; 254
    1244:	fc 01       	movw	r30, r24
    1246:	80 81       	ld	r24, Z
}
    1248:	0f 90       	pop	r0
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	08 95       	ret

00001250 <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	00 d0       	rcall	.+0      	; 0x1256 <CAN_Read+0x6>
    1256:	00 d0       	rcall	.+0      	; 0x1258 <CAN_Read+0x8>
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	9b 83       	std	Y+3, r25	; 0x03
    125e:	8a 83       	std	Y+2, r24	; 0x02
    1260:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
    1262:	84 e3       	ldi	r24, 0x34	; 52
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	2f ef       	ldi	r18, 0xFF	; 255
    1268:	fc 01       	movw	r30, r24
    126a:	20 83       	st	Z, r18
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
    126c:	00 00       	nop
    126e:	8c 81       	ldd	r24, Y+4	; 0x04
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	8a 5a       	subi	r24, 0xAA	; 170
    1278:	9e 4f       	sbci	r25, 0xFE	; 254
    127a:	fc 01       	movw	r30, r24
    127c:	80 81       	ld	r24, Z
    127e:	88 23       	and	r24, r24
    1280:	b1 f3       	breq	.-20     	; 0x126e <CAN_Read+0x1e>

	for(i = 0; i < 8; ++i)
    1282:	19 82       	std	Y+1, r1	; 0x01
    1284:	2c c0       	rjmp	.+88     	; 0x12de <CAN_Read+0x8e>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	2a 81       	ldd	r18, Y+2	; 0x02
    128e:	3b 81       	ldd	r19, Y+3	; 0x03
    1290:	82 0f       	add	r24, r18
    1292:	93 1f       	adc	r25, r19
    1294:	2c 81       	ldd	r18, Y+4	; 0x04
    1296:	22 2f       	mov	r18, r18
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	21 50       	subi	r18, 0x01	; 1
    129c:	30 48       	sbci	r19, 0x80	; 128
    129e:	22 0f       	add	r18, r18
    12a0:	33 1f       	adc	r19, r19
    12a2:	22 5d       	subi	r18, 0xD2	; 210
    12a4:	3e 4f       	sbci	r19, 0xFE	; 254
    12a6:	f9 01       	movw	r30, r18
    12a8:	40 81       	ld	r20, Z
    12aa:	51 81       	ldd	r21, Z+1	; 0x01
    12ac:	2c 81       	ldd	r18, Y+4	; 0x04
    12ae:	22 2f       	mov	r18, r18
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	21 50       	subi	r18, 0x01	; 1
    12b4:	31 09       	sbc	r19, r1
    12b6:	24 5b       	subi	r18, 0xB4	; 180
    12b8:	3e 4f       	sbci	r19, 0xFE	; 254
    12ba:	f9 01       	movw	r30, r18
    12bc:	20 81       	ld	r18, Z
    12be:	62 2f       	mov	r22, r18
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	29 81       	ldd	r18, Y+1	; 0x01
    12c4:	22 2f       	mov	r18, r18
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	26 0f       	add	r18, r22
    12ca:	37 1f       	adc	r19, r23
    12cc:	24 0f       	add	r18, r20
    12ce:	35 1f       	adc	r19, r21
    12d0:	f9 01       	movw	r30, r18
    12d2:	20 81       	ld	r18, Z
    12d4:	fc 01       	movw	r30, r24
    12d6:	20 83       	st	Z, r18
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	8f 5f       	subi	r24, 0xFF	; 255
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	88 30       	cpi	r24, 0x08	; 8
    12e2:	88 f2       	brcs	.-94     	; 0x1286 <CAN_Read+0x36>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	88 2f       	mov	r24, r24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	84 5b       	subi	r24, 0xB4	; 180
    12ee:	9e 4f       	sbci	r25, 0xFE	; 254
    12f0:	fc 01       	movw	r30, r24
    12f2:	20 81       	ld	r18, Z
    12f4:	2f 5f       	subi	r18, 0xFF	; 255
    12f6:	fc 01       	movw	r30, r24
    12f8:	20 83       	st	Z, r18
    12fa:	25 30       	cpi	r18, 0x05	; 5
    12fc:	41 f4       	brne	.+16     	; 0x130e <CAN_Read+0xbe>
	*(rxRdIndex + sendingNodeID - 1) = 0;
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	88 2f       	mov	r24, r24
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	84 5b       	subi	r24, 0xB4	; 180
    1308:	9e 4f       	sbci	r25, 0xFE	; 254
    130a:	fc 01       	movw	r30, r24
    130c:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	9c 01       	movw	r18, r24
    1318:	2a 5a       	subi	r18, 0xAA	; 170
    131a:	3e 4f       	sbci	r19, 0xFE	; 254
    131c:	f9 01       	movw	r30, r18
    131e:	20 81       	ld	r18, Z
    1320:	21 50       	subi	r18, 0x01	; 1
    1322:	8a 5a       	subi	r24, 0xAA	; 170
    1324:	9e 4f       	sbci	r25, 0xFE	; 254
    1326:	fc 01       	movw	r30, r24
    1328:	20 83       	st	Z, r18

	return 0;
    132a:	80 e0       	ldi	r24, 0x00	; 0
}
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	08 95       	ret

0000133a <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	00 d0       	rcall	.+0      	; 0x1340 <CAN_Write+0x6>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <CAN_Write+0x8>
    1342:	00 d0       	rcall	.+0      	; 0x1344 <CAN_Write+0xa>
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	9d 83       	std	Y+5, r25	; 0x05
    134a:	8c 83       	std	Y+4, r24	; 0x04
    134c:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    134e:	00 00       	nop
    1350:	89 ed       	ldi	r24, 0xD9	; 217
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	fc 01       	movw	r30, r24
    1356:	80 81       	ld	r24, Z
    1358:	82 95       	swap	r24
    135a:	8f 70       	andi	r24, 0x0F	; 15
    135c:	88 2f       	mov	r24, r24
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	81 70       	andi	r24, 0x01	; 1
    1362:	99 27       	eor	r25, r25
    1364:	89 2b       	or	r24, r25
    1366:	a1 f7       	brne	.-24     	; 0x1350 <CAN_Write+0x16>
    1368:	89 ed       	ldi	r24, 0xD9	; 217
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	fc 01       	movw	r30, r24
    136e:	80 81       	ld	r24, Z
    1370:	86 95       	lsr	r24
    1372:	86 95       	lsr	r24
    1374:	86 95       	lsr	r24
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	81 70       	andi	r24, 0x01	; 1
    137c:	99 27       	eor	r25, r25
    137e:	89 2b       	or	r24, r25
    1380:	39 f7       	brne	.-50     	; 0x1350 <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    1382:	8d ee       	ldi	r24, 0xED	; 237
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	fc 01       	movw	r30, r24
    1388:	80 81       	ld	r24, Z
    138a:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
    138c:	1a 82       	std	Y+2, r1	; 0x02
    138e:	15 c0       	rjmp	.+42     	; 0x13ba <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
    1390:	8d ee       	ldi	r24, 0xED	; 237
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	2a 81       	ldd	r18, Y+2	; 0x02
    1396:	22 95       	swap	r18
    1398:	20 7f       	andi	r18, 0xF0	; 240
    139a:	fc 01       	movw	r30, r24
    139c:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
    139e:	8f ee       	ldi	r24, 0xEF	; 239
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	fc 01       	movw	r30, r24
    13a4:	80 81       	ld	r24, Z
    13a6:	82 95       	swap	r24
    13a8:	86 95       	lsr	r24
    13aa:	86 95       	lsr	r24
    13ac:	83 70       	andi	r24, 0x03	; 3
    13ae:	88 23       	and	r24, r24
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <CAN_Write+0x7a>
			break;
    13b2:	06 c0       	rjmp	.+12     	; 0x13c0 <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	8f 5f       	subi	r24, 0xFF	; 255
    13b8:	8a 83       	std	Y+2, r24	; 0x02
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	8f 30       	cpi	r24, 0x0F	; 15
    13be:	40 f3       	brcs	.-48     	; 0x1390 <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	8f 30       	cpi	r24, 0x0F	; 15
    13c4:	11 f4       	brne	.+4      	; 0x13ca <CAN_Write+0x90>
		return -1;
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	39 c0       	rjmp	.+114    	; 0x143c <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
    13ca:	82 ef       	ldi	r24, 0xF2	; 242
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	2e 81       	ldd	r18, Y+6	; 0x06
    13d0:	22 95       	swap	r18
    13d2:	22 0f       	add	r18, r18
    13d4:	20 7e       	andi	r18, 0xE0	; 224
    13d6:	fc 01       	movw	r30, r24
    13d8:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
    13da:	83 ef       	ldi	r24, 0xF3	; 243
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	2e 81       	ldd	r18, Y+6	; 0x06
    13e0:	26 95       	lsr	r18
    13e2:	26 95       	lsr	r18
    13e4:	26 95       	lsr	r18
    13e6:	fc 01       	movw	r30, r24
    13e8:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
    13ea:	8f ee       	ldi	r24, 0xEF	; 239
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	28 e0       	ldi	r18, 0x08	; 8
    13f0:	fc 01       	movw	r30, r24
    13f2:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    13f4:	19 82       	std	Y+1, r1	; 0x01
    13f6:	10 c0       	rjmp	.+32     	; 0x1418 <CAN_Write+0xde>
		CANMSG = data[i];
    13f8:	8a ef       	ldi	r24, 0xFA	; 250
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	29 81       	ldd	r18, Y+1	; 0x01
    13fe:	22 2f       	mov	r18, r18
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	4c 81       	ldd	r20, Y+4	; 0x04
    1404:	5d 81       	ldd	r21, Y+5	; 0x05
    1406:	24 0f       	add	r18, r20
    1408:	35 1f       	adc	r19, r21
    140a:	f9 01       	movw	r30, r18
    140c:	20 81       	ld	r18, Z
    140e:	fc 01       	movw	r30, r24
    1410:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	8f 5f       	subi	r24, 0xFF	; 255
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	88 30       	cpi	r24, 0x08	; 8
    141c:	68 f3       	brcs	.-38     	; 0x13f8 <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
    141e:	8f ee       	ldi	r24, 0xEF	; 239
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	2f ee       	ldi	r18, 0xEF	; 239
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	f9 01       	movw	r30, r18
    1428:	20 81       	ld	r18, Z
    142a:	20 64       	ori	r18, 0x40	; 64
    142c:	fc 01       	movw	r30, r24
    142e:	20 83       	st	Z, r18

	CANPAGE = tempPage;
    1430:	8d ee       	ldi	r24, 0xED	; 237
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	2b 81       	ldd	r18, Y+3	; 0x03
    1436:	fc 01       	movw	r30, r24
    1438:	20 83       	st	Z, r18

	return 0;
    143a:	80 e0       	ldi	r24, 0x00	; 0
}
    143c:	26 96       	adiw	r28, 0x06	; 6
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <debug_init>:
#include "debug.h"

//pin and the starting state of debug pins
uint8_t debug_pins[5] = {48,49,50,51,52};

void debug_init() {
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62


}
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	00 d0       	rcall	.+0      	; 0x1462 <__list_add+0x6>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <__list_add+0x8>
    1464:	00 d0       	rcall	.+0      	; 0x1466 <__list_add+0xa>
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	9a 83       	std	Y+2, r25	; 0x02
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	7c 83       	std	Y+4, r23	; 0x04
    1470:	6b 83       	std	Y+3, r22	; 0x03
    1472:	5e 83       	std	Y+6, r21	; 0x06
    1474:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	29 81       	ldd	r18, Y+1	; 0x01
    147c:	3a 81       	ldd	r19, Y+2	; 0x02
    147e:	fc 01       	movw	r30, r24
    1480:	31 83       	std	Z+1, r19	; 0x01
    1482:	20 83       	st	Z, r18
    new->next = next;
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	2d 81       	ldd	r18, Y+5	; 0x05
    148a:	3e 81       	ldd	r19, Y+6	; 0x06
    148c:	fc 01       	movw	r30, r24
    148e:	33 83       	std	Z+3, r19	; 0x03
    1490:	22 83       	std	Z+2, r18	; 0x02
    new->prev = prev;
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	2b 81       	ldd	r18, Y+3	; 0x03
    1498:	3c 81       	ldd	r19, Y+4	; 0x04
    149a:	fc 01       	movw	r30, r24
    149c:	31 83       	std	Z+1, r19	; 0x01
    149e:	20 83       	st	Z, r18
    prev->next = new;
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	29 81       	ldd	r18, Y+1	; 0x01
    14a6:	3a 81       	ldd	r19, Y+2	; 0x02
    14a8:	fc 01       	movw	r30, r24
    14aa:	33 83       	std	Z+3, r19	; 0x03
    14ac:	22 83       	std	Z+2, r18	; 0x02
}
    14ae:	26 96       	adiw	r28, 0x06	; 6
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	08 95       	ret

000014c0 <list_add>:

static inline void list_add(struct list_head* new, struct list_head* head)
{
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <list_add+0x6>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <list_add+0x8>
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	9a 83       	std	Y+2, r25	; 0x02
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	7c 83       	std	Y+4, r23	; 0x04
    14d2:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	fc 01       	movw	r30, r24
    14da:	42 81       	ldd	r20, Z+2	; 0x02
    14dc:	53 81       	ldd	r21, Z+3	; 0x03
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	9a 81       	ldd	r25, Y+2	; 0x02
    14e6:	b9 01       	movw	r22, r18
    14e8:	0e 94 2e 0a 	call	0x145c	; 0x145c <__list_add>
}
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	2b 97       	sbiw	r28, 0x0b	; 11
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	89 87       	std	Y+9, r24	; 0x09
    1510:	6a 87       	std	Y+10, r22	; 0x0a
    1512:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1514:	80 91 0d 01 	lds	r24, 0x010D
    1518:	90 91 0e 01 	lds	r25, 0x010E
    151c:	9c 83       	std	Y+4, r25	; 0x04
    151e:	8b 83       	std	Y+3, r24	; 0x03
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9c 81       	ldd	r25, Y+4	; 0x04
    1524:	05 97       	sbiw	r24, 0x05	; 5
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	15 c0       	rjmp	.+42     	; 0x1556 <gpio_register_pin+0x5c>
    {
        if(input->pin == pin)
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	fc 01       	movw	r30, r24
    1532:	90 81       	ld	r25, Z
    1534:	89 85       	ldd	r24, Y+9	; 0x09
    1536:	98 17       	cp	r25, r24
    1538:	11 f4       	brne	.+4      	; 0x153e <gpio_register_pin+0x44>
            return 1;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	bc c0       	rjmp	.+376    	; 0x16b6 <gpio_register_pin+0x1bc>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	fc 01       	movw	r30, r24
    1544:	87 81       	ldd	r24, Z+7	; 0x07
    1546:	90 85       	ldd	r25, Z+8	; 0x08
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	05 97       	sbiw	r24, 0x05	; 5
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	05 96       	adiw	r24, 0x05	; 5
    155c:	8b 50       	subi	r24, 0x0B	; 11
    155e:	91 40       	sbci	r25, 0x01	; 1
    1560:	29 f7       	brne	.-54     	; 0x152c <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    1562:	89 85       	ldd	r24, Y+9	; 0x09
    1564:	86 95       	lsr	r24
    1566:	86 95       	lsr	r24
    1568:	86 95       	lsr	r24
    156a:	8f 5f       	subi	r24, 0xFF	; 255
    156c:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t pin_reg = pin % 8;
    156e:	89 85       	ldd	r24, Y+9	; 0x09
    1570:	87 70       	andi	r24, 0x07	; 7
    1572:	88 87       	std	Y+8, r24	; 0x08
	if(direction == GPIO_DIRECTION_OUTPUT)
    1574:	8a 85       	ldd	r24, Y+10	; 0x0a
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	09 f0       	breq	.+2      	; 0x157c <gpio_register_pin+0x82>
    157a:	55 c0       	rjmp	.+170    	; 0x1626 <gpio_register_pin+0x12c>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    157c:	8f 81       	ldd	r24, Y+7	; 0x07
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9c 01       	movw	r18, r24
    1584:	21 50       	subi	r18, 0x01	; 1
    1586:	31 09       	sbc	r19, r1
    1588:	c9 01       	movw	r24, r18
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	82 0f       	add	r24, r18
    1590:	93 1f       	adc	r25, r19
    1592:	81 96       	adiw	r24, 0x21	; 33
    1594:	ac 01       	movw	r20, r24
    1596:	8f 81       	ldd	r24, Y+7	; 0x07
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9c 01       	movw	r18, r24
    159e:	21 50       	subi	r18, 0x01	; 1
    15a0:	31 09       	sbc	r19, r1
    15a2:	c9 01       	movw	r24, r18
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	82 0f       	add	r24, r18
    15aa:	93 1f       	adc	r25, r19
    15ac:	81 96       	adiw	r24, 0x21	; 33
    15ae:	fc 01       	movw	r30, r24
    15b0:	80 81       	ld	r24, Z
    15b2:	68 2f       	mov	r22, r24
    15b4:	88 85       	ldd	r24, Y+8	; 0x08
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <gpio_register_pin+0xca>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	2a 95       	dec	r18
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <gpio_register_pin+0xc6>
    15c8:	86 2b       	or	r24, r22
    15ca:	fa 01       	movw	r30, r20
    15cc:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    15ce:	8f 81       	ldd	r24, Y+7	; 0x07
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9c 01       	movw	r18, r24
    15d6:	21 50       	subi	r18, 0x01	; 1
    15d8:	31 09       	sbc	r19, r1
    15da:	c9 01       	movw	r24, r18
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	82 0f       	add	r24, r18
    15e2:	93 1f       	adc	r25, r19
    15e4:	82 96       	adiw	r24, 0x22	; 34
    15e6:	ac 01       	movw	r20, r24
    15e8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	9c 01       	movw	r18, r24
    15f0:	21 50       	subi	r18, 0x01	; 1
    15f2:	31 09       	sbc	r19, r1
    15f4:	c9 01       	movw	r24, r18
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	82 0f       	add	r24, r18
    15fc:	93 1f       	adc	r25, r19
    15fe:	82 96       	adiw	r24, 0x22	; 34
    1600:	fc 01       	movw	r30, r24
    1602:	80 81       	ld	r24, Z
    1604:	68 2f       	mov	r22, r24
    1606:	88 85       	ldd	r24, Y+8	; 0x08
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <gpio_register_pin+0x11c>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	2a 95       	dec	r18
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <gpio_register_pin+0x118>
    161a:	80 95       	com	r24
    161c:	86 23       	and	r24, r22
    161e:	fa 01       	movw	r30, r20
    1620:	80 83       	st	Z, r24
        return 0;
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	48 c0       	rjmp	.+144    	; 0x16b6 <gpio_register_pin+0x1bc>
	}
	else
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1626:	8f 81       	ldd	r24, Y+7	; 0x07
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9c 01       	movw	r18, r24
    162e:	21 50       	subi	r18, 0x01	; 1
    1630:	31 09       	sbc	r19, r1
    1632:	c9 01       	movw	r24, r18
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	82 0f       	add	r24, r18
    163a:	93 1f       	adc	r25, r19
    163c:	81 96       	adiw	r24, 0x21	; 33
    163e:	ac 01       	movw	r20, r24
    1640:	8f 81       	ldd	r24, Y+7	; 0x07
    1642:	88 2f       	mov	r24, r24
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	9c 01       	movw	r18, r24
    1648:	21 50       	subi	r18, 0x01	; 1
    164a:	31 09       	sbc	r19, r1
    164c:	c9 01       	movw	r24, r18
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	82 0f       	add	r24, r18
    1654:	93 1f       	adc	r25, r19
    1656:	81 96       	adiw	r24, 0x21	; 33
    1658:	fc 01       	movw	r30, r24
    165a:	80 81       	ld	r24, Z
    165c:	68 2f       	mov	r22, r24
    165e:	88 85       	ldd	r24, Y+8	; 0x08
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 c0       	rjmp	.+4      	; 0x166e <gpio_register_pin+0x174>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	2a 95       	dec	r18
    1670:	e2 f7       	brpl	.-8      	; 0x166a <gpio_register_pin+0x170>
    1672:	80 95       	com	r24
    1674:	86 23       	and	r24, r22
    1676:	fa 01       	movw	r30, r20
    1678:	80 83       	st	Z, r24

    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    167a:	89 e0       	ldi	r24, 0x09	; 9
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <malloc>
    1682:	9a 83       	std	Y+2, r25	; 0x02
    1684:	89 83       	std	Y+1, r24	; 0x01
    if(input == NULL)
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	89 2b       	or	r24, r25
    168c:	11 f4       	brne	.+4      	; 0x1692 <gpio_register_pin+0x198>
        return 1;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	12 c0       	rjmp	.+36     	; 0x16b6 <gpio_register_pin+0x1bc>

    input->pin       = pin;
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	29 85       	ldd	r18, Y+9	; 0x09
    1698:	fc 01       	movw	r30, r24
    169a:	20 83       	st	Z, r18
    input->pulled_up = pulled_up;
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	9a 81       	ldd	r25, Y+2	; 0x02
    16a0:	2b 85       	ldd	r18, Y+11	; 0x0b
    16a2:	fc 01       	movw	r30, r24
    16a4:	21 83       	std	Z+1, r18	; 0x01
    list_add(&input->list, &gpio_inputs);
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	05 96       	adiw	r24, 0x05	; 5
    16ac:	6b e0       	ldi	r22, 0x0B	; 11
    16ae:	71 e0       	ldi	r23, 0x01	; 1
    16b0:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <list_add>

    return 0;
    16b4:	80 e0       	ldi	r24, 0x00	; 0
}
    16b6:	2b 96       	adiw	r28, 0x0b	; 11
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	08 95       	ret

000016c8 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <gpio_write_pin+0x6>
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <gpio_write_pin+0x8>
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	8b 83       	std	Y+3, r24	; 0x03
    16d6:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	86 95       	lsr	r24
    16dc:	86 95       	lsr	r24
    16de:	86 95       	lsr	r24
    16e0:	8f 5f       	subi	r24, 0xFF	; 255
    16e2:	89 83       	std	Y+1, r24	; 0x01
	pin = pin % 8;
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	87 70       	andi	r24, 0x07	; 7
    16e8:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	88 2f       	mov	r24, r24
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9c 01       	movw	r18, r24
    16f2:	21 50       	subi	r18, 0x01	; 1
    16f4:	31 09       	sbc	r19, r1
    16f6:	c9 01       	movw	r24, r18
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	82 0f       	add	r24, r18
    16fe:	93 1f       	adc	r25, r19
    1700:	82 96       	adiw	r24, 0x22	; 34
    1702:	fc 01       	movw	r30, r24
    1704:	80 81       	ld	r24, Z
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	a2 81       	ldd	r26, Z+2	; 0x02
    170a:	b3 81       	ldd	r27, Z+3	; 0x03
    170c:	8a 83       	std	Y+2, r24	; 0x02
	if(value != 0)
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	88 23       	and	r24, r24
    1712:	31 f1       	breq	.+76     	; 0x1760 <gpio_write_pin+0x98>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	88 2f       	mov	r24, r24
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9c 01       	movw	r18, r24
    171c:	21 50       	subi	r18, 0x01	; 1
    171e:	31 09       	sbc	r19, r1
    1720:	c9 01       	movw	r24, r18
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	82 0f       	add	r24, r18
    1728:	93 1f       	adc	r25, r19
    172a:	82 96       	adiw	r24, 0x22	; 34
    172c:	ac 01       	movw	r20, r24
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	68 2f       	mov	r22, r24
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <gpio_write_pin+0x7c>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	6a 95       	dec	r22
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <gpio_write_pin+0x78>
    1748:	82 2b       	or	r24, r18
    174a:	93 2b       	or	r25, r19
    174c:	09 2e       	mov	r0, r25
    174e:	00 0c       	add	r0, r0
    1750:	aa 0b       	sbc	r26, r26
    1752:	bb 0b       	sbc	r27, r27
    1754:	fa 01       	movw	r30, r20
    1756:	80 83       	st	Z, r24
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	a2 83       	std	Z+2, r26	; 0x02
    175c:	b3 83       	std	Z+3, r27	; 0x03
    175e:	27 c0       	rjmp	.+78     	; 0x17ae <gpio_write_pin+0xe6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	88 2f       	mov	r24, r24
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	9c 01       	movw	r18, r24
    1768:	21 50       	subi	r18, 0x01	; 1
    176a:	31 09       	sbc	r19, r1
    176c:	c9 01       	movw	r24, r18
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	82 0f       	add	r24, r18
    1774:	93 1f       	adc	r25, r19
    1776:	82 96       	adiw	r24, 0x22	; 34
    1778:	ac 01       	movw	r20, r24
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	68 2f       	mov	r22, r24
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <gpio_write_pin+0xc8>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	6a 95       	dec	r22
    1792:	e2 f7       	brpl	.-8      	; 0x178c <gpio_write_pin+0xc4>
    1794:	80 95       	com	r24
    1796:	90 95       	com	r25
    1798:	82 23       	and	r24, r18
    179a:	93 23       	and	r25, r19
    179c:	09 2e       	mov	r0, r25
    179e:	00 0c       	add	r0, r0
    17a0:	aa 0b       	sbc	r26, r26
    17a2:	bb 0b       	sbc	r27, r27
    17a4:	fa 01       	movw	r30, r20
    17a6:	80 83       	st	Z, r24
    17a8:	91 83       	std	Z+1, r25	; 0x01
    17aa:	a2 83       	std	Z+2, r26	; 0x02
    17ac:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    17ae:	80 e0       	ldi	r24, 0x00	; 0
}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	08 95       	ret

000017be <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <__gpio_read_pin+0x6>
    17c4:	1f 92       	push	r1
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	86 95       	lsr	r24
    17d0:	86 95       	lsr	r24
    17d2:	86 95       	lsr	r24
    17d4:	8f 5f       	subi	r24, 0xFF	; 255
    17d6:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	87 70       	andi	r24, 0x07	; 7
    17dc:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	9c 01       	movw	r18, r24
    17e6:	21 50       	subi	r18, 0x01	; 1
    17e8:	31 09       	sbc	r19, r1
    17ea:	c9 01       	movw	r24, r18
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	82 0f       	add	r24, r18
    17f2:	93 1f       	adc	r25, r19
    17f4:	80 96       	adiw	r24, 0x20	; 32
    17f6:	fc 01       	movw	r30, r24
    17f8:	80 81       	ld	r24, Z
    17fa:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	88 2f       	mov	r24, r24
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	2b 81       	ldd	r18, Y+3	; 0x03
    1804:	22 2f       	mov	r18, r18
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	02 c0       	rjmp	.+4      	; 0x180e <__gpio_read_pin+0x50>
    180a:	95 95       	asr	r25
    180c:	87 95       	ror	r24
    180e:	2a 95       	dec	r18
    1810:	e2 f7       	brpl	.-8      	; 0x180a <__gpio_read_pin+0x4c>
    1812:	81 70       	andi	r24, 0x01	; 1
}
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	08 95       	ret

00001820 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	29 97       	sbiw	r28, 0x09	; 9
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1836:	80 91 0d 01 	lds	r24, 0x010D
    183a:	90 91 0e 01 	lds	r25, 0x010E
    183e:	9d 83       	std	Y+5, r25	; 0x05
    1840:	8c 83       	std	Y+4, r24	; 0x04
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	9d 81       	ldd	r25, Y+5	; 0x05
    1846:	05 97       	sbiw	r24, 0x05	; 5
    1848:	9a 83       	std	Y+2, r25	; 0x02
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	55 c0       	rjmp	.+170    	; 0x18f8 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	9a 81       	ldd	r25, Y+2	; 0x02
    1852:	fc 01       	movw	r30, r24
    1854:	90 81       	ld	r25, Z
    1856:	89 85       	ldd	r24, Y+9	; 0x09
    1858:	98 17       	cp	r25, r24
    185a:	09 f0       	breq	.+2      	; 0x185e <gpio_read_pin+0x3e>
    185c:	41 c0       	rjmp	.+130    	; 0x18e0 <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
    185e:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1860:	1f c0       	rjmp	.+62     	; 0x18a0 <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	29 81       	ldd	r18, Y+1	; 0x01
    186a:	3a 81       	ldd	r19, Y+2	; 0x02
    186c:	82 0f       	add	r24, r18
    186e:	93 1f       	adc	r25, r19
    1870:	02 96       	adiw	r24, 0x02	; 2
    1872:	fc 01       	movw	r30, r24
    1874:	40 81       	ld	r20, Z
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	29 81       	ldd	r18, Y+1	; 0x01
    1880:	3a 81       	ldd	r19, Y+2	; 0x02
    1882:	82 0f       	add	r24, r18
    1884:	93 1f       	adc	r25, r19
    1886:	02 96       	adiw	r24, 0x02	; 2
    1888:	fc 01       	movw	r30, r24
    188a:	80 81       	ld	r24, Z
    188c:	48 17       	cp	r20, r24
    188e:	29 f0       	breq	.+10     	; 0x189a <gpio_read_pin+0x7a>
                    return input->previous_state;
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	fc 01       	movw	r30, r24
    1896:	84 81       	ldd	r24, Z+4	; 0x04
    1898:	37 c0       	rjmp	.+110    	; 0x1908 <gpio_read_pin+0xe8>
                i++;
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	8f 5f       	subi	r24, 0xFF	; 255
    189e:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	88 23       	and	r24, r24
    18a4:	f1 f2       	breq	.-68     	; 0x1862 <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	fc 01       	movw	r30, r24
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	89 27       	eor	r24, r25
    18b2:	88 23       	and	r24, r24
    18b4:	29 f0       	breq	.+10     	; 0x18c0 <gpio_read_pin+0xa0>
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	fc 01       	movw	r30, r24
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	08 c0       	rjmp	.+16     	; 0x18d0 <gpio_read_pin+0xb0>
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	fc 01       	movw	r30, r24
    18c6:	92 81       	ldd	r25, Z+2	; 0x02
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	99 23       	and	r25, r25
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <gpio_read_pin+0xb0>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	9a 81       	ldd	r25, Y+2	; 0x02
    18d6:	28 85       	ldd	r18, Y+8	; 0x08
    18d8:	fc 01       	movw	r30, r24
    18da:	24 83       	std	Z+4, r18	; 0x04

            return state;
    18dc:	88 85       	ldd	r24, Y+8	; 0x08
    18de:	14 c0       	rjmp	.+40     	; 0x1908 <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	9a 81       	ldd	r25, Y+2	; 0x02
    18e4:	fc 01       	movw	r30, r24
    18e6:	87 81       	ldd	r24, Z+7	; 0x07
    18e8:	90 85       	ldd	r25, Z+8	; 0x08
    18ea:	9f 83       	std	Y+7, r25	; 0x07
    18ec:	8e 83       	std	Y+6, r24	; 0x06
    18ee:	8e 81       	ldd	r24, Y+6	; 0x06
    18f0:	9f 81       	ldd	r25, Y+7	; 0x07
    18f2:	05 97       	sbiw	r24, 0x05	; 5
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	05 96       	adiw	r24, 0x05	; 5
    18fe:	8b 50       	subi	r24, 0x0B	; 11
    1900:	91 40       	sbci	r25, 0x01	; 1
    1902:	09 f0       	breq	.+2      	; 0x1906 <gpio_read_pin+0xe6>
    1904:	a4 cf       	rjmp	.-184    	; 0x184e <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
}
    1908:	29 96       	adiw	r28, 0x09	; 9
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	08 95       	ret

0000191a <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	cf 93       	push	r28
    1920:	df 93       	push	r29
    1922:	00 d0       	rcall	.+0      	; 0x1924 <gpio_debouncer+0xa>
    1924:	00 d0       	rcall	.+0      	; 0x1926 <gpio_debouncer+0xc>
    1926:	00 d0       	rcall	.+0      	; 0x1928 <gpio_debouncer+0xe>
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    192c:	80 91 0d 01 	lds	r24, 0x010D
    1930:	90 91 0e 01 	lds	r25, 0x010E
    1934:	9c 83       	std	Y+4, r25	; 0x04
    1936:	8b 83       	std	Y+3, r24	; 0x03
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	05 97       	sbiw	r24, 0x05	; 5
    193e:	9a 83       	std	Y+2, r25	; 0x02
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	1e c0       	rjmp	.+60     	; 0x1980 <gpio_debouncer+0x66>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    1944:	00 91 62 01 	lds	r16, 0x0162
    1948:	10 91 63 01 	lds	r17, 0x0163
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	fc 01       	movw	r30, r24
    1952:	80 81       	ld	r24, Z
    1954:	0e 94 df 0b 	call	0x17be	; 0x17be <__gpio_read_pin>
    1958:	28 2f       	mov	r18, r24
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	80 0f       	add	r24, r16
    1960:	91 1f       	adc	r25, r17
    1962:	02 96       	adiw	r24, 0x02	; 2
    1964:	fc 01       	movw	r30, r24
    1966:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	fc 01       	movw	r30, r24
    196e:	87 81       	ldd	r24, Z+7	; 0x07
    1970:	90 85       	ldd	r25, Z+8	; 0x08
    1972:	9e 83       	std	Y+6, r25	; 0x06
    1974:	8d 83       	std	Y+5, r24	; 0x05
    1976:	8d 81       	ldd	r24, Y+5	; 0x05
    1978:	9e 81       	ldd	r25, Y+6	; 0x06
    197a:	05 97       	sbiw	r24, 0x05	; 5
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	05 96       	adiw	r24, 0x05	; 5
    1986:	8b 50       	subi	r24, 0x0B	; 11
    1988:	91 40       	sbci	r25, 0x01	; 1
    198a:	e1 f6       	brne	.-72     	; 0x1944 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    198c:	80 91 62 01 	lds	r24, 0x0162
    1990:	90 91 63 01 	lds	r25, 0x0163
    1994:	01 96       	adiw	r24, 0x01	; 1
    1996:	90 93 63 01 	sts	0x0163, r25
    199a:	80 93 62 01 	sts	0x0162, r24
    199e:	02 97       	sbiw	r24, 0x02	; 2
    19a0:	21 f4       	brne	.+8      	; 0x19aa <gpio_debouncer+0x90>
        count = 0;
    19a2:	10 92 63 01 	sts	0x0163, r1
    19a6:	10 92 62 01 	sts	0x0162, r1

}
    19aa:	26 96       	adiw	r28, 0x06	; 6
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	08 95       	ret

000019c0 <odometry_set_speed>:
 * 	void odometry_set_speed(uint8_t speed)
 *
 * 	Send odometry board the max speed
 */
void odometry_set_speed(uint8_t speed)
{
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	67 97       	sbiw	r28, 0x17	; 23
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    19d6:	80 91 64 01 	lds	r24, 0x0164
    19da:	9f 89       	ldd	r25, Y+23	; 0x17
    19dc:	98 17       	cp	r25, r24
    19de:	09 f4       	brne	.+2      	; 0x19e2 <odometry_set_speed+0x22>
    19e0:	82 c0       	rjmp	.+260    	; 0x1ae6 <odometry_set_speed+0x126>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    19e2:	86 e5       	ldi	r24, 0x56	; 86
    19e4:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    19e6:	8f 89       	ldd	r24, Y+23	; 0x17
    19e8:	88 8b       	std	Y+16, r24	; 0x10
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    19ea:	72 c0       	rjmp	.+228    	; 0x1ad0 <odometry_set_speed+0x110>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a8 e4       	ldi	r26, 0x48	; 72
    19f2:	b2 e4       	ldi	r27, 0x42	; 66
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	9a 83       	std	Y+2, r25	; 0x02
    19f8:	ab 83       	std	Y+3, r26	; 0x03
    19fa:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e4       	ldi	r19, 0x40	; 64
    1a00:	4c e1       	ldi	r20, 0x1C	; 28
    1a02:	55 e4       	ldi	r21, 0x45	; 69
    1a04:	69 81       	ldd	r22, Y+1	; 0x01
    1a06:	7a 81       	ldd	r23, Y+2	; 0x02
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0c:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	8d 83       	std	Y+5, r24	; 0x05
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	af 83       	std	Y+7, r26	; 0x07
    1a1a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5f e3       	ldi	r21, 0x3F	; 63
    1a24:	6d 81       	ldd	r22, Y+5	; 0x05
    1a26:	7e 81       	ldd	r23, Y+6	; 0x06
    1a28:	8f 81       	ldd	r24, Y+7	; 0x07
    1a2a:	98 85       	ldd	r25, Y+8	; 0x08
    1a2c:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	2c f4       	brge	.+10     	; 0x1a3e <odometry_set_speed+0x7e>
		__ticks = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9a 87       	std	Y+10, r25	; 0x0a
    1a3a:	89 87       	std	Y+9, r24	; 0x09
    1a3c:	3f c0       	rjmp	.+126    	; 0x1abc <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	3f ef       	ldi	r19, 0xFF	; 255
    1a42:	4f e7       	ldi	r20, 0x7F	; 127
    1a44:	57 e4       	ldi	r21, 0x47	; 71
    1a46:	6d 81       	ldd	r22, Y+5	; 0x05
    1a48:	7e 81       	ldd	r23, Y+6	; 0x06
    1a4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a4c:	98 85       	ldd	r25, Y+8	; 0x08
    1a4e:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	4c f5       	brge	.+82     	; 0x1aa8 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e2       	ldi	r20, 0x20	; 32
    1a5c:	51 e4       	ldi	r21, 0x41	; 65
    1a5e:	69 81       	ldd	r22, Y+1	; 0x01
    1a60:	7a 81       	ldd	r23, Y+2	; 0x02
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9a 87       	std	Y+10, r25	; 0x0a
    1a7c:	89 87       	std	Y+9, r24	; 0x09
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <odometry_set_speed+0xde>
    1a80:	8a ef       	ldi	r24, 0xFA	; 250
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9c 87       	std	Y+12, r25	; 0x0c
    1a86:	8b 87       	std	Y+11, r24	; 0x0b
    1a88:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <odometry_set_speed+0xcc>
    1a90:	9c 87       	std	Y+12, r25	; 0x0c
    1a92:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	89 85       	ldd	r24, Y+9	; 0x09
    1a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	9a 87       	std	Y+10, r25	; 0x0a
    1a9c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	89 2b       	or	r24, r25
    1aa4:	69 f7       	brne	.-38     	; 0x1a80 <odometry_set_speed+0xc0>
    1aa6:	14 c0       	rjmp	.+40     	; 0x1ad0 <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	6d 81       	ldd	r22, Y+5	; 0x05
    1aaa:	7e 81       	ldd	r23, Y+6	; 0x06
    1aac:	8f 81       	ldd	r24, Y+7	; 0x07
    1aae:	98 85       	ldd	r25, Y+8	; 0x08
    1ab0:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9a 87       	std	Y+10, r25	; 0x0a
    1aba:	89 87       	std	Y+9, r24	; 0x09
    1abc:	89 85       	ldd	r24, Y+9	; 0x09
    1abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac0:	9e 87       	std	Y+14, r25	; 0x0e
    1ac2:	8d 87       	std	Y+13, r24	; 0x0d
    1ac4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <odometry_set_speed+0x108>
    1acc:	9e 87       	std	Y+14, r25	; 0x0e
    1ace:	8d 87       	std	Y+13, r24	; 0x0d
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	0f 96       	adiw	r24, 0x0f	; 15
    1ad4:	63 ec       	ldi	r22, 0xC3	; 195
    1ad6:	0e 94 9d 09 	call	0x133a	; 0x133a <CAN_Write>
    1ada:	88 23       	and	r24, r24
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <odometry_set_speed+0x120>
    1ade:	86 cf       	rjmp	.-244    	; 0x19ec <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    1ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae2:	80 93 64 01 	sts	0x0164, r24
}
    1ae6:	67 96       	adiw	r28, 0x17	; 23
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	08 95       	ret

00001af8 <odometry_query_position>:
 * 	void odometry_query_position(void)
 *
 * 	Get the current position. Update it to position
 */
void odometry_query_position(void)
{
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	66 97       	sbiw	r28, 0x16	; 22
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1b0c:	80 e5       	ldi	r24, 0x50	; 80
    1b0e:	8f 87       	std	Y+15, r24	; 0x0f
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1b10:	72 c0       	rjmp	.+228    	; 0x1bf6 <odometry_query_position+0xfe>
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	a8 e4       	ldi	r26, 0x48	; 72
    1b18:	b2 e4       	ldi	r27, 0x42	; 66
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	ab 83       	std	Y+3, r26	; 0x03
    1b20:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e4       	ldi	r19, 0x40	; 64
    1b26:	4c e1       	ldi	r20, 0x1C	; 28
    1b28:	55 e4       	ldi	r21, 0x45	; 69
    1b2a:	69 81       	ldd	r22, Y+1	; 0x01
    1b2c:	7a 81       	ldd	r23, Y+2	; 0x02
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	af 83       	std	Y+7, r26	; 0x07
    1b40:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	5f e3       	ldi	r21, 0x3F	; 63
    1b4a:	6d 81       	ldd	r22, Y+5	; 0x05
    1b4c:	7e 81       	ldd	r23, Y+6	; 0x06
    1b4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b50:	98 85       	ldd	r25, Y+8	; 0x08
    1b52:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    1b56:	88 23       	and	r24, r24
    1b58:	2c f4       	brge	.+10     	; 0x1b64 <odometry_query_position+0x6c>
		__ticks = 1;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9a 87       	std	Y+10, r25	; 0x0a
    1b60:	89 87       	std	Y+9, r24	; 0x09
    1b62:	3f c0       	rjmp	.+126    	; 0x1be2 <odometry_query_position+0xea>
	else if (__tmp > 65535)
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	3f ef       	ldi	r19, 0xFF	; 255
    1b68:	4f e7       	ldi	r20, 0x7F	; 127
    1b6a:	57 e4       	ldi	r21, 0x47	; 71
    1b6c:	6d 81       	ldd	r22, Y+5	; 0x05
    1b6e:	7e 81       	ldd	r23, Y+6	; 0x06
    1b70:	8f 81       	ldd	r24, Y+7	; 0x07
    1b72:	98 85       	ldd	r25, Y+8	; 0x08
    1b74:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    1b78:	18 16       	cp	r1, r24
    1b7a:	4c f5       	brge	.+82     	; 0x1bce <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e2       	ldi	r20, 0x20	; 32
    1b82:	51 e4       	ldi	r21, 0x41	; 65
    1b84:	69 81       	ldd	r22, Y+1	; 0x01
    1b86:	7a 81       	ldd	r23, Y+2	; 0x02
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	bc 01       	movw	r22, r24
    1b96:	cd 01       	movw	r24, r26
    1b98:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	9a 87       	std	Y+10, r25	; 0x0a
    1ba2:	89 87       	std	Y+9, r24	; 0x09
    1ba4:	0f c0       	rjmp	.+30     	; 0x1bc4 <odometry_query_position+0xcc>
    1ba6:	8a ef       	ldi	r24, 0xFA	; 250
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	9c 87       	std	Y+12, r25	; 0x0c
    1bac:	8b 87       	std	Y+11, r24	; 0x0b
    1bae:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bb0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	f1 f7       	brne	.-4      	; 0x1bb2 <odometry_query_position+0xba>
    1bb6:	9c 87       	std	Y+12, r25	; 0x0c
    1bb8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bba:	89 85       	ldd	r24, Y+9	; 0x09
    1bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	9a 87       	std	Y+10, r25	; 0x0a
    1bc2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc4:	89 85       	ldd	r24, Y+9	; 0x09
    1bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc8:	89 2b       	or	r24, r25
    1bca:	69 f7       	brne	.-38     	; 0x1ba6 <odometry_query_position+0xae>
    1bcc:	14 c0       	rjmp	.+40     	; 0x1bf6 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bce:	6d 81       	ldd	r22, Y+5	; 0x05
    1bd0:	7e 81       	ldd	r23, Y+6	; 0x06
    1bd2:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd4:	98 85       	ldd	r25, Y+8	; 0x08
    1bd6:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9a 87       	std	Y+10, r25	; 0x0a
    1be0:	89 87       	std	Y+9, r24	; 0x09
    1be2:	89 85       	ldd	r24, Y+9	; 0x09
    1be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be6:	9e 87       	std	Y+14, r25	; 0x0e
    1be8:	8d 87       	std	Y+13, r24	; 0x0d
    1bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <odometry_query_position+0xf6>
    1bf2:	9e 87       	std	Y+14, r25	; 0x0e
    1bf4:	8d 87       	std	Y+13, r24	; 0x0d
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	0f 96       	adiw	r24, 0x0f	; 15
    1bfa:	63 ec       	ldi	r22, 0xC3	; 195
    1bfc:	0e 94 9d 09 	call	0x133a	; 0x133a <CAN_Write>
    1c00:	88 23       	and	r24, r24
    1c02:	09 f0       	breq	.+2      	; 0x1c06 <odometry_query_position+0x10e>
    1c04:	86 cf       	rjmp	.-244    	; 0x1b12 <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1c06:	ce 01       	movw	r24, r28
    1c08:	0f 96       	adiw	r24, 0x0f	; 15
    1c0a:	61 e0       	ldi	r22, 0x01	; 1
    1c0c:	0e 94 28 09 	call	0x1250	; 0x1250 <CAN_Read>

	position.state = buffer[0];
    1c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c12:	80 93 15 01 	sts	0x0115, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1c16:	88 89       	ldd	r24, Y+16	; 0x10
    1c18:	88 2f       	mov	r24, r24
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	38 2f       	mov	r19, r24
    1c1e:	22 27       	eor	r18, r18
    1c20:	89 89       	ldd	r24, Y+17	; 0x11
    1c22:	88 2f       	mov	r24, r24
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	82 2b       	or	r24, r18
    1c28:	93 2b       	or	r25, r19
    1c2a:	90 93 10 01 	sts	0x0110, r25
    1c2e:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1c32:	8a 89       	ldd	r24, Y+18	; 0x12
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	38 2f       	mov	r19, r24
    1c3a:	22 27       	eor	r18, r18
    1c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3e:	88 2f       	mov	r24, r24
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	82 2b       	or	r24, r18
    1c44:	93 2b       	or	r25, r19
    1c46:	90 93 12 01 	sts	0x0112, r25
    1c4a:	80 93 11 01 	sts	0x0111, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    1c4e:	8c 89       	ldd	r24, Y+20	; 0x14
    1c50:	88 2f       	mov	r24, r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	38 2f       	mov	r19, r24
    1c56:	22 27       	eor	r18, r18
    1c58:	8d 89       	ldd	r24, Y+21	; 0x15
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	82 2b       	or	r24, r18
    1c60:	93 2b       	or	r25, r19
    1c62:	90 93 14 01 	sts	0x0114, r25
    1c66:	80 93 13 01 	sts	0x0113, r24
}
    1c6a:	66 96       	adiw	r28, 0x16	; 22
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	08 95       	ret

00001c7c <odometry_wait_until_done>:
 * 	static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
 *
 * 	Callback function, execute function while odometry is moving
 */
static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <odometry_wait_until_done+0x6>
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <odometry_wait_until_done+0x8>
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <odometry_wait_until_done+0xa>
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	9e 83       	std	Y+6, r25	; 0x06
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    1c8e:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <system_get_system_time>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	9a 83       	std	Y+2, r25	; 0x02
    1c9a:	ab 83       	std	Y+3, r26	; 0x03
    1c9c:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    1c9e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <odometry_query_position>
		if(callback != NULL)
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	89 2b       	or	r24, r25
    1ca8:	71 f0       	breq	.+28     	; 0x1cc6 <odometry_wait_until_done+0x4a>
		{
			if(callback(time) == 1)
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	ab 81       	ldd	r26, Y+3	; 0x03
    1cb0:	bc 81       	ldd	r27, Y+4	; 0x04
    1cb2:	2d 81       	ldd	r18, Y+5	; 0x05
    1cb4:	3e 81       	ldd	r19, Y+6	; 0x06
    1cb6:	bc 01       	movw	r22, r24
    1cb8:	cd 01       	movw	r24, r26
    1cba:	f9 01       	movw	r30, r18
    1cbc:	09 95       	icall
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	11 f4       	brne	.+4      	; 0x1cc6 <odometry_wait_until_done+0x4a>
				return ODOMETRY_FAIL;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	09 c0       	rjmp	.+18     	; 0x1cd8 <odometry_wait_until_done+0x5c>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1cc6:	80 91 15 01 	lds	r24, 0x0115
    1cca:	8d 34       	cpi	r24, 0x4D	; 77
    1ccc:	41 f3       	breq	.-48     	; 0x1c9e <odometry_wait_until_done+0x22>
    1cce:	80 91 15 01 	lds	r24, 0x0115
    1cd2:	82 35       	cpi	r24, 0x52	; 82
    1cd4:	21 f3       	breq	.-56     	; 0x1c9e <odometry_wait_until_done+0x22>

	return ODOMETRY_SUCCESS;
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
}
    1cd8:	26 96       	adiw	r28, 0x06	; 6
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	08 95       	ret

00001cea <odometry_stop>:
 * 	void odometry_stop(int8_t type)
 *
 * 	Send stop to odometry
 */
void odometry_stop(int8_t type)
{
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	67 97       	sbiw	r28, 0x17	; 23
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    1d00:	8f 89       	ldd	r24, Y+23	; 0x17
    1d02:	8f 87       	std	Y+15, r24	; 0x0f

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1d04:	72 c0       	rjmp	.+228    	; 0x1dea <odometry_stop+0x100>
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	a8 e4       	ldi	r26, 0x48	; 72
    1d0c:	b2 e4       	ldi	r27, 0x42	; 66
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	ab 83       	std	Y+3, r26	; 0x03
    1d14:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e4       	ldi	r19, 0x40	; 64
    1d1a:	4c e1       	ldi	r20, 0x1C	; 28
    1d1c:	55 e4       	ldi	r21, 0x45	; 69
    1d1e:	69 81       	ldd	r22, Y+1	; 0x01
    1d20:	7a 81       	ldd	r23, Y+2	; 0x02
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	9c 81       	ldd	r25, Y+4	; 0x04
    1d26:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	af 83       	std	Y+7, r26	; 0x07
    1d34:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	6d 81       	ldd	r22, Y+5	; 0x05
    1d40:	7e 81       	ldd	r23, Y+6	; 0x06
    1d42:	8f 81       	ldd	r24, Y+7	; 0x07
    1d44:	98 85       	ldd	r25, Y+8	; 0x08
    1d46:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    1d4a:	88 23       	and	r24, r24
    1d4c:	2c f4       	brge	.+10     	; 0x1d58 <odometry_stop+0x6e>
		__ticks = 1;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9a 87       	std	Y+10, r25	; 0x0a
    1d54:	89 87       	std	Y+9, r24	; 0x09
    1d56:	3f c0       	rjmp	.+126    	; 0x1dd6 <odometry_stop+0xec>
	else if (__tmp > 65535)
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	6d 81       	ldd	r22, Y+5	; 0x05
    1d62:	7e 81       	ldd	r23, Y+6	; 0x06
    1d64:	8f 81       	ldd	r24, Y+7	; 0x07
    1d66:	98 85       	ldd	r25, Y+8	; 0x08
    1d68:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    1d6c:	18 16       	cp	r1, r24
    1d6e:	4c f5       	brge	.+82     	; 0x1dc2 <odometry_stop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e2       	ldi	r20, 0x20	; 32
    1d76:	51 e4       	ldi	r21, 0x41	; 65
    1d78:	69 81       	ldd	r22, Y+1	; 0x01
    1d7a:	7a 81       	ldd	r23, Y+2	; 0x02
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9a 87       	std	Y+10, r25	; 0x0a
    1d96:	89 87       	std	Y+9, r24	; 0x09
    1d98:	0f c0       	rjmp	.+30     	; 0x1db8 <odometry_stop+0xce>
    1d9a:	8a ef       	ldi	r24, 0xFA	; 250
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9c 87       	std	Y+12, r25	; 0x0c
    1da0:	8b 87       	std	Y+11, r24	; 0x0b
    1da2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1da4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <odometry_stop+0xbc>
    1daa:	9c 87       	std	Y+12, r25	; 0x0c
    1dac:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dae:	89 85       	ldd	r24, Y+9	; 0x09
    1db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	9a 87       	std	Y+10, r25	; 0x0a
    1db6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db8:	89 85       	ldd	r24, Y+9	; 0x09
    1dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbc:	89 2b       	or	r24, r25
    1dbe:	69 f7       	brne	.-38     	; 0x1d9a <odometry_stop+0xb0>
    1dc0:	14 c0       	rjmp	.+40     	; 0x1dea <odometry_stop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc2:	6d 81       	ldd	r22, Y+5	; 0x05
    1dc4:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc8:	98 85       	ldd	r25, Y+8	; 0x08
    1dca:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9a 87       	std	Y+10, r25	; 0x0a
    1dd4:	89 87       	std	Y+9, r24	; 0x09
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	9e 87       	std	Y+14, r25	; 0x0e
    1ddc:	8d 87       	std	Y+13, r24	; 0x0d
    1dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <odometry_stop+0xf8>
    1de6:	9e 87       	std	Y+14, r25	; 0x0e
    1de8:	8d 87       	std	Y+13, r24	; 0x0d
    1dea:	ce 01       	movw	r24, r28
    1dec:	0f 96       	adiw	r24, 0x0f	; 15
    1dee:	63 ec       	ldi	r22, 0xC3	; 195
    1df0:	0e 94 9d 09 	call	0x133a	; 0x133a <CAN_Write>
    1df4:	88 23       	and	r24, r24
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <odometry_stop+0x110>
    1df8:	86 cf       	rjmp	.-244    	; 0x1d06 <odometry_stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    1dfa:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    1dfe:	80 91 15 01 	lds	r24, 0x0115
    1e02:	8d 34       	cpi	r24, 0x4D	; 77
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <odometry_stop+0x11e>
    1e06:	7c cf       	rjmp	.-264    	; 0x1d00 <odometry_stop+0x16>
    1e08:	80 91 15 01 	lds	r24, 0x0115
    1e0c:	82 35       	cpi	r24, 0x52	; 82
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <odometry_stop+0x128>
    1e10:	77 cf       	rjmp	.-274    	; 0x1d00 <odometry_stop+0x16>
}
    1e12:	67 96       	adiw	r28, 0x17	; 23
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	df 91       	pop	r29
    1e20:	cf 91       	pop	r28
    1e22:	08 95       	ret

00001e24 <odometry_move_straight>:
 * 	uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move straight command to odometry
 */
uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	6b 97       	sbiw	r28, 0x1b	; 27
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	98 8f       	std	Y+24, r25	; 0x18
    1e3a:	8f 8b       	std	Y+23, r24	; 0x17
    1e3c:	69 8f       	std	Y+25, r22	; 0x19
    1e3e:	5b 8f       	std	Y+27, r21	; 0x1b
    1e40:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1e42:	89 8d       	ldd	r24, Y+25	; 0x19
    1e44:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <odometry_set_speed>
	buffer[0] = 'D';
    1e48:	84 e4       	ldi	r24, 0x44	; 68
    1e4a:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    1e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e50:	89 2f       	mov	r24, r25
    1e52:	99 0f       	add	r25, r25
    1e54:	99 0b       	sbc	r25, r25
    1e56:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    1e58:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5a:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1e5c:	72 c0       	rjmp	.+228    	; 0x1f42 <odometry_move_straight+0x11e>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a8 e4       	ldi	r26, 0x48	; 72
    1e64:	b2 e4       	ldi	r27, 0x42	; 66
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	9a 83       	std	Y+2, r25	; 0x02
    1e6a:	ab 83       	std	Y+3, r26	; 0x03
    1e6c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e4       	ldi	r19, 0x40	; 64
    1e72:	4c e1       	ldi	r20, 0x1C	; 28
    1e74:	55 e4       	ldi	r21, 0x45	; 69
    1e76:	69 81       	ldd	r22, Y+1	; 0x01
    1e78:	7a 81       	ldd	r23, Y+2	; 0x02
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	8d 83       	std	Y+5, r24	; 0x05
    1e88:	9e 83       	std	Y+6, r25	; 0x06
    1e8a:	af 83       	std	Y+7, r26	; 0x07
    1e8c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	6d 81       	ldd	r22, Y+5	; 0x05
    1e98:	7e 81       	ldd	r23, Y+6	; 0x06
    1e9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e9c:	98 85       	ldd	r25, Y+8	; 0x08
    1e9e:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    1ea2:	88 23       	and	r24, r24
    1ea4:	2c f4       	brge	.+10     	; 0x1eb0 <odometry_move_straight+0x8c>
		__ticks = 1;
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	9a 87       	std	Y+10, r25	; 0x0a
    1eac:	89 87       	std	Y+9, r24	; 0x09
    1eae:	3f c0       	rjmp	.+126    	; 0x1f2e <odometry_move_straight+0x10a>
	else if (__tmp > 65535)
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	6d 81       	ldd	r22, Y+5	; 0x05
    1eba:	7e 81       	ldd	r23, Y+6	; 0x06
    1ebc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ebe:	98 85       	ldd	r25, Y+8	; 0x08
    1ec0:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    1ec4:	18 16       	cp	r1, r24
    1ec6:	4c f5       	brge	.+82     	; 0x1f1a <odometry_move_straight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e2       	ldi	r20, 0x20	; 32
    1ece:	51 e4       	ldi	r21, 0x41	; 65
    1ed0:	69 81       	ldd	r22, Y+1	; 0x01
    1ed2:	7a 81       	ldd	r23, Y+2	; 0x02
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	bc 01       	movw	r22, r24
    1ee2:	cd 01       	movw	r24, r26
    1ee4:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9a 87       	std	Y+10, r25	; 0x0a
    1eee:	89 87       	std	Y+9, r24	; 0x09
    1ef0:	0f c0       	rjmp	.+30     	; 0x1f10 <odometry_move_straight+0xec>
    1ef2:	8a ef       	ldi	r24, 0xFA	; 250
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	9c 87       	std	Y+12, r25	; 0x0c
    1ef8:	8b 87       	std	Y+11, r24	; 0x0b
    1efa:	8b 85       	ldd	r24, Y+11	; 0x0b
    1efc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <odometry_move_straight+0xda>
    1f02:	9c 87       	std	Y+12, r25	; 0x0c
    1f04:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	9a 87       	std	Y+10, r25	; 0x0a
    1f0e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f10:	89 85       	ldd	r24, Y+9	; 0x09
    1f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f14:	89 2b       	or	r24, r25
    1f16:	69 f7       	brne	.-38     	; 0x1ef2 <odometry_move_straight+0xce>
    1f18:	14 c0       	rjmp	.+40     	; 0x1f42 <odometry_move_straight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1a:	6d 81       	ldd	r22, Y+5	; 0x05
    1f1c:	7e 81       	ldd	r23, Y+6	; 0x06
    1f1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f20:	98 85       	ldd	r25, Y+8	; 0x08
    1f22:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9a 87       	std	Y+10, r25	; 0x0a
    1f2c:	89 87       	std	Y+9, r24	; 0x09
    1f2e:	89 85       	ldd	r24, Y+9	; 0x09
    1f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f32:	9e 87       	std	Y+14, r25	; 0x0e
    1f34:	8d 87       	std	Y+13, r24	; 0x0d
    1f36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <odometry_move_straight+0x116>
    1f3e:	9e 87       	std	Y+14, r25	; 0x0e
    1f40:	8d 87       	std	Y+13, r24	; 0x0d
    1f42:	ce 01       	movw	r24, r28
    1f44:	0f 96       	adiw	r24, 0x0f	; 15
    1f46:	63 ec       	ldi	r22, 0xC3	; 195
    1f48:	0e 94 9d 09 	call	0x133a	; 0x133a <CAN_Write>
    1f4c:	88 23       	and	r24, r24
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <odometry_move_straight+0x12e>
    1f50:	86 cf       	rjmp	.-244    	; 0x1e5e <odometry_move_straight+0x3a>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1f52:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f54:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f56:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <odometry_wait_until_done>
}
    1f5a:	6b 96       	adiw	r28, 0x1b	; 27
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	08 95       	ret

00001f6c <odometry_move_to_position>:
 * 	uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move to position function to odometry
 */
uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, char (*callback)(uint32_t start_time))
{
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	6c 97       	sbiw	r28, 0x1c	; 28
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	98 8f       	std	Y+24, r25	; 0x18
    1f82:	8f 8b       	std	Y+23, r24	; 0x17
    1f84:	69 8f       	std	Y+25, r22	; 0x19
    1f86:	4a 8f       	std	Y+26, r20	; 0x1a
    1f88:	3c 8f       	std	Y+28, r19	; 0x1c
    1f8a:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1f8c:	89 8d       	ldd	r24, Y+25	; 0x19
    1f8e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <odometry_set_speed>

	buffer[0] = 'G';
    1f92:	87 e4       	ldi	r24, 0x47	; 71
    1f94:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    1f96:	8f 89       	ldd	r24, Y+23	; 0x17
    1f98:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	89 2f       	mov	r24, r25
    1fa2:	99 0f       	add	r25, r25
    1fa4:	99 0b       	sbc	r25, r25
    1fa6:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    1fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1faa:	98 8d       	ldd	r25, Y+24	; 0x18
    1fac:	fc 01       	movw	r30, r24
    1fae:	80 81       	ld	r24, Z
    1fb0:	91 81       	ldd	r25, Z+1	; 0x01
    1fb2:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    1fb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb8:	fc 01       	movw	r30, r24
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	89 2f       	mov	r24, r25
    1fc0:	99 0f       	add	r25, r25
    1fc2:	99 0b       	sbc	r25, r25
    1fc4:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    1fc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fca:	fc 01       	movw	r30, r24
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	93 81       	ldd	r25, Z+3	; 0x03
    1fd0:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    1fd2:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    1fd4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fd6:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1fd8:	72 c0       	rjmp	.+228    	; 0x20be <odometry_move_to_position+0x152>
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	a8 e4       	ldi	r26, 0x48	; 72
    1fe0:	b2 e4       	ldi	r27, 0x42	; 66
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	ab 83       	std	Y+3, r26	; 0x03
    1fe8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e4       	ldi	r19, 0x40	; 64
    1fee:	4c e1       	ldi	r20, 0x1C	; 28
    1ff0:	55 e4       	ldi	r21, 0x45	; 69
    1ff2:	69 81       	ldd	r22, Y+1	; 0x01
    1ff4:	7a 81       	ldd	r23, Y+2	; 0x02
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	8d 83       	std	Y+5, r24	; 0x05
    2004:	9e 83       	std	Y+6, r25	; 0x06
    2006:	af 83       	std	Y+7, r26	; 0x07
    2008:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e8       	ldi	r20, 0x80	; 128
    2010:	5f e3       	ldi	r21, 0x3F	; 63
    2012:	6d 81       	ldd	r22, Y+5	; 0x05
    2014:	7e 81       	ldd	r23, Y+6	; 0x06
    2016:	8f 81       	ldd	r24, Y+7	; 0x07
    2018:	98 85       	ldd	r25, Y+8	; 0x08
    201a:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    201e:	88 23       	and	r24, r24
    2020:	2c f4       	brge	.+10     	; 0x202c <odometry_move_to_position+0xc0>
		__ticks = 1;
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9a 87       	std	Y+10, r25	; 0x0a
    2028:	89 87       	std	Y+9, r24	; 0x09
    202a:	3f c0       	rjmp	.+126    	; 0x20aa <odometry_move_to_position+0x13e>
	else if (__tmp > 65535)
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	3f ef       	ldi	r19, 0xFF	; 255
    2030:	4f e7       	ldi	r20, 0x7F	; 127
    2032:	57 e4       	ldi	r21, 0x47	; 71
    2034:	6d 81       	ldd	r22, Y+5	; 0x05
    2036:	7e 81       	ldd	r23, Y+6	; 0x06
    2038:	8f 81       	ldd	r24, Y+7	; 0x07
    203a:	98 85       	ldd	r25, Y+8	; 0x08
    203c:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    2040:	18 16       	cp	r1, r24
    2042:	4c f5       	brge	.+82     	; 0x2096 <odometry_move_to_position+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e2       	ldi	r20, 0x20	; 32
    204a:	51 e4       	ldi	r21, 0x41	; 65
    204c:	69 81       	ldd	r22, Y+1	; 0x01
    204e:	7a 81       	ldd	r23, Y+2	; 0x02
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	bc 01       	movw	r22, r24
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9a 87       	std	Y+10, r25	; 0x0a
    206a:	89 87       	std	Y+9, r24	; 0x09
    206c:	0f c0       	rjmp	.+30     	; 0x208c <odometry_move_to_position+0x120>
    206e:	8a ef       	ldi	r24, 0xFA	; 250
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9c 87       	std	Y+12, r25	; 0x0c
    2074:	8b 87       	std	Y+11, r24	; 0x0b
    2076:	8b 85       	ldd	r24, Y+11	; 0x0b
    2078:	9c 85       	ldd	r25, Y+12	; 0x0c
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <odometry_move_to_position+0x10e>
    207e:	9c 87       	std	Y+12, r25	; 0x0c
    2080:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	9a 87       	std	Y+10, r25	; 0x0a
    208a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	89 2b       	or	r24, r25
    2092:	69 f7       	brne	.-38     	; 0x206e <odometry_move_to_position+0x102>
    2094:	14 c0       	rjmp	.+40     	; 0x20be <odometry_move_to_position+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2096:	6d 81       	ldd	r22, Y+5	; 0x05
    2098:	7e 81       	ldd	r23, Y+6	; 0x06
    209a:	8f 81       	ldd	r24, Y+7	; 0x07
    209c:	98 85       	ldd	r25, Y+8	; 0x08
    209e:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9a 87       	std	Y+10, r25	; 0x0a
    20a8:	89 87       	std	Y+9, r24	; 0x09
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ae:	9e 87       	std	Y+14, r25	; 0x0e
    20b0:	8d 87       	std	Y+13, r24	; 0x0d
    20b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <odometry_move_to_position+0x14a>
    20ba:	9e 87       	std	Y+14, r25	; 0x0e
    20bc:	8d 87       	std	Y+13, r24	; 0x0d
    20be:	ce 01       	movw	r24, r28
    20c0:	0f 96       	adiw	r24, 0x0f	; 15
    20c2:	63 ec       	ldi	r22, 0xC3	; 195
    20c4:	0e 94 9d 09 	call	0x133a	; 0x133a <CAN_Write>
    20c8:	88 23       	and	r24, r24
    20ca:	09 f0       	breq	.+2      	; 0x20ce <odometry_move_to_position+0x162>
    20cc:	86 cf       	rjmp	.-244    	; 0x1fda <odometry_move_to_position+0x6e>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    20ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20d2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <odometry_wait_until_done>
}
    20d6:	6c 96       	adiw	r28, 0x1c	; 28
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	de bf       	out	0x3e, r29	; 62
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	cd bf       	out	0x3d, r28	; 61
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	08 95       	ret

000020e8 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	68 97       	sbiw	r28, 0x18	; 24
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	de bf       	out	0x3e, r29	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	cd bf       	out	0x3d, r28	; 61
    20fc:	98 8f       	std	Y+24, r25	; 0x18
    20fe:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    2100:	89 e4       	ldi	r24, 0x49	; 73
    2102:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    2104:	8f 89       	ldd	r24, Y+23	; 0x17
    2106:	98 8d       	ldd	r25, Y+24	; 0x18
    2108:	fc 01       	movw	r30, r24
    210a:	80 81       	ld	r24, Z
    210c:	91 81       	ldd	r25, Z+1	; 0x01
    210e:	89 2f       	mov	r24, r25
    2110:	99 0f       	add	r25, r25
    2112:	99 0b       	sbc	r25, r25
    2114:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    2116:	8f 89       	ldd	r24, Y+23	; 0x17
    2118:	98 8d       	ldd	r25, Y+24	; 0x18
    211a:	fc 01       	movw	r30, r24
    211c:	80 81       	ld	r24, Z
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    2122:	8f 89       	ldd	r24, Y+23	; 0x17
    2124:	98 8d       	ldd	r25, Y+24	; 0x18
    2126:	fc 01       	movw	r30, r24
    2128:	82 81       	ldd	r24, Z+2	; 0x02
    212a:	93 81       	ldd	r25, Z+3	; 0x03
    212c:	89 2f       	mov	r24, r25
    212e:	99 0f       	add	r25, r25
    2130:	99 0b       	sbc	r25, r25
    2132:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    2134:	8f 89       	ldd	r24, Y+23	; 0x17
    2136:	98 8d       	ldd	r25, Y+24	; 0x18
    2138:	fc 01       	movw	r30, r24
    213a:	82 81       	ldd	r24, Z+2	; 0x02
    213c:	93 81       	ldd	r25, Z+3	; 0x03
    213e:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    2140:	8f 89       	ldd	r24, Y+23	; 0x17
    2142:	98 8d       	ldd	r25, Y+24	; 0x18
    2144:	fc 01       	movw	r30, r24
    2146:	84 81       	ldd	r24, Z+4	; 0x04
    2148:	95 81       	ldd	r25, Z+5	; 0x05
    214a:	89 2f       	mov	r24, r25
    214c:	99 0f       	add	r25, r25
    214e:	99 0b       	sbc	r25, r25
    2150:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    2152:	8f 89       	ldd	r24, Y+23	; 0x17
    2154:	98 8d       	ldd	r25, Y+24	; 0x18
    2156:	fc 01       	movw	r30, r24
    2158:	84 81       	ldd	r24, Z+4	; 0x04
    215a:	95 81       	ldd	r25, Z+5	; 0x05
    215c:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    215e:	8f 89       	ldd	r24, Y+23	; 0x17
    2160:	98 8d       	ldd	r25, Y+24	; 0x18
    2162:	fc 01       	movw	r30, r24
    2164:	80 81       	ld	r24, Z
    2166:	91 81       	ldd	r25, Z+1	; 0x01
    2168:	90 93 10 01 	sts	0x0110, r25
    216c:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = new_position->y;
    2170:	8f 89       	ldd	r24, Y+23	; 0x17
    2172:	98 8d       	ldd	r25, Y+24	; 0x18
    2174:	fc 01       	movw	r30, r24
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	90 93 12 01 	sts	0x0112, r25
    217e:	80 93 11 01 	sts	0x0111, r24
	position.angle = new_position->angle;
    2182:	8f 89       	ldd	r24, Y+23	; 0x17
    2184:	98 8d       	ldd	r25, Y+24	; 0x18
    2186:	fc 01       	movw	r30, r24
    2188:	84 81       	ldd	r24, Z+4	; 0x04
    218a:	95 81       	ldd	r25, Z+5	; 0x05
    218c:	90 93 14 01 	sts	0x0114, r25
    2190:	80 93 13 01 	sts	0x0113, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2194:	72 c0       	rjmp	.+228    	; 0x227a <odometry_set_position+0x192>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a8 e4       	ldi	r26, 0x48	; 72
    219c:	b2 e4       	ldi	r27, 0x42	; 66
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	9a 83       	std	Y+2, r25	; 0x02
    21a2:	ab 83       	std	Y+3, r26	; 0x03
    21a4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e4       	ldi	r19, 0x40	; 64
    21aa:	4c e1       	ldi	r20, 0x1C	; 28
    21ac:	55 e4       	ldi	r21, 0x45	; 69
    21ae:	69 81       	ldd	r22, Y+1	; 0x01
    21b0:	7a 81       	ldd	r23, Y+2	; 0x02
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	9c 81       	ldd	r25, Y+4	; 0x04
    21b6:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	8d 83       	std	Y+5, r24	; 0x05
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	af 83       	std	Y+7, r26	; 0x07
    21c4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e8       	ldi	r20, 0x80	; 128
    21cc:	5f e3       	ldi	r21, 0x3F	; 63
    21ce:	6d 81       	ldd	r22, Y+5	; 0x05
    21d0:	7e 81       	ldd	r23, Y+6	; 0x06
    21d2:	8f 81       	ldd	r24, Y+7	; 0x07
    21d4:	98 85       	ldd	r25, Y+8	; 0x08
    21d6:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    21da:	88 23       	and	r24, r24
    21dc:	2c f4       	brge	.+10     	; 0x21e8 <odometry_set_position+0x100>
		__ticks = 1;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9a 87       	std	Y+10, r25	; 0x0a
    21e4:	89 87       	std	Y+9, r24	; 0x09
    21e6:	3f c0       	rjmp	.+126    	; 0x2266 <odometry_set_position+0x17e>
	else if (__tmp > 65535)
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	57 e4       	ldi	r21, 0x47	; 71
    21f0:	6d 81       	ldd	r22, Y+5	; 0x05
    21f2:	7e 81       	ldd	r23, Y+6	; 0x06
    21f4:	8f 81       	ldd	r24, Y+7	; 0x07
    21f6:	98 85       	ldd	r25, Y+8	; 0x08
    21f8:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    21fc:	18 16       	cp	r1, r24
    21fe:	4c f5       	brge	.+82     	; 0x2252 <odometry_set_position+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e2       	ldi	r20, 0x20	; 32
    2206:	51 e4       	ldi	r21, 0x41	; 65
    2208:	69 81       	ldd	r22, Y+1	; 0x01
    220a:	7a 81       	ldd	r23, Y+2	; 0x02
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
    2210:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9a 87       	std	Y+10, r25	; 0x0a
    2226:	89 87       	std	Y+9, r24	; 0x09
    2228:	0f c0       	rjmp	.+30     	; 0x2248 <odometry_set_position+0x160>
    222a:	8a ef       	ldi	r24, 0xFA	; 250
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	9c 87       	std	Y+12, r25	; 0x0c
    2230:	8b 87       	std	Y+11, r24	; 0x0b
    2232:	8b 85       	ldd	r24, Y+11	; 0x0b
    2234:	9c 85       	ldd	r25, Y+12	; 0x0c
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <odometry_set_position+0x14e>
    223a:	9c 87       	std	Y+12, r25	; 0x0c
    223c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223e:	89 85       	ldd	r24, Y+9	; 0x09
    2240:	9a 85       	ldd	r25, Y+10	; 0x0a
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	9a 87       	std	Y+10, r25	; 0x0a
    2246:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2248:	89 85       	ldd	r24, Y+9	; 0x09
    224a:	9a 85       	ldd	r25, Y+10	; 0x0a
    224c:	89 2b       	or	r24, r25
    224e:	69 f7       	brne	.-38     	; 0x222a <odometry_set_position+0x142>
    2250:	14 c0       	rjmp	.+40     	; 0x227a <odometry_set_position+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2252:	6d 81       	ldd	r22, Y+5	; 0x05
    2254:	7e 81       	ldd	r23, Y+6	; 0x06
    2256:	8f 81       	ldd	r24, Y+7	; 0x07
    2258:	98 85       	ldd	r25, Y+8	; 0x08
    225a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9a 87       	std	Y+10, r25	; 0x0a
    2264:	89 87       	std	Y+9, r24	; 0x09
    2266:	89 85       	ldd	r24, Y+9	; 0x09
    2268:	9a 85       	ldd	r25, Y+10	; 0x0a
    226a:	9e 87       	std	Y+14, r25	; 0x0e
    226c:	8d 87       	std	Y+13, r24	; 0x0d
    226e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2270:	9e 85       	ldd	r25, Y+14	; 0x0e
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <odometry_set_position+0x18a>
    2276:	9e 87       	std	Y+14, r25	; 0x0e
    2278:	8d 87       	std	Y+13, r24	; 0x0d
    227a:	ce 01       	movw	r24, r28
    227c:	0f 96       	adiw	r24, 0x0f	; 15
    227e:	63 ec       	ldi	r22, 0xC3	; 195
    2280:	0e 94 9d 09 	call	0x133a	; 0x133a <CAN_Write>
    2284:	88 23       	and	r24, r24
    2286:	09 f0       	breq	.+2      	; 0x228a <odometry_set_position+0x1a2>
    2288:	86 cf       	rjmp	.-244    	; 0x2196 <odometry_set_position+0xae>
		_delay_ms(50);
}
    228a:	68 96       	adiw	r28, 0x18	; 24
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	08 95       	ret

0000229c <odometry_rotate_for>:
 * 	uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send rotate for command to odometry board
 */
uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	6b 97       	sbiw	r28, 0x1b	; 27
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	98 8f       	std	Y+24, r25	; 0x18
    22b2:	8f 8b       	std	Y+23, r24	; 0x17
    22b4:	69 8f       	std	Y+25, r22	; 0x19
    22b6:	5b 8f       	std	Y+27, r21	; 0x1b
    22b8:	4a 8f       	std	Y+26, r20	; 0x1a

	uint8_t buffer[8];
	odometry_set_speed(speed);
    22ba:	89 8d       	ldd	r24, Y+25	; 0x19
    22bc:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <odometry_set_speed>

	buffer[0] = 'T';
    22c0:	84 e5       	ldi	r24, 0x54	; 84
    22c2:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    22c4:	8f 89       	ldd	r24, Y+23	; 0x17
    22c6:	98 8d       	ldd	r25, Y+24	; 0x18
    22c8:	89 2f       	mov	r24, r25
    22ca:	99 27       	eor	r25, r25
    22cc:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    22ce:	8f 89       	ldd	r24, Y+23	; 0x17
    22d0:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    22d2:	72 c0       	rjmp	.+228    	; 0x23b8 <odometry_rotate_for+0x11c>
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	a8 e4       	ldi	r26, 0x48	; 72
    22da:	b2 e4       	ldi	r27, 0x42	; 66
    22dc:	89 83       	std	Y+1, r24	; 0x01
    22de:	9a 83       	std	Y+2, r25	; 0x02
    22e0:	ab 83       	std	Y+3, r26	; 0x03
    22e2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e4       	ldi	r19, 0x40	; 64
    22e8:	4c e1       	ldi	r20, 0x1C	; 28
    22ea:	55 e4       	ldi	r21, 0x45	; 69
    22ec:	69 81       	ldd	r22, Y+1	; 0x01
    22ee:	7a 81       	ldd	r23, Y+2	; 0x02
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	9c 81       	ldd	r25, Y+4	; 0x04
    22f4:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	8d 83       	std	Y+5, r24	; 0x05
    22fe:	9e 83       	std	Y+6, r25	; 0x06
    2300:	af 83       	std	Y+7, r26	; 0x07
    2302:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	6d 81       	ldd	r22, Y+5	; 0x05
    230e:	7e 81       	ldd	r23, Y+6	; 0x06
    2310:	8f 81       	ldd	r24, Y+7	; 0x07
    2312:	98 85       	ldd	r25, Y+8	; 0x08
    2314:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    2318:	88 23       	and	r24, r24
    231a:	2c f4       	brge	.+10     	; 0x2326 <odometry_rotate_for+0x8a>
		__ticks = 1;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9a 87       	std	Y+10, r25	; 0x0a
    2322:	89 87       	std	Y+9, r24	; 0x09
    2324:	3f c0       	rjmp	.+126    	; 0x23a4 <odometry_rotate_for+0x108>
	else if (__tmp > 65535)
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	3f ef       	ldi	r19, 0xFF	; 255
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	57 e4       	ldi	r21, 0x47	; 71
    232e:	6d 81       	ldd	r22, Y+5	; 0x05
    2330:	7e 81       	ldd	r23, Y+6	; 0x06
    2332:	8f 81       	ldd	r24, Y+7	; 0x07
    2334:	98 85       	ldd	r25, Y+8	; 0x08
    2336:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    233a:	18 16       	cp	r1, r24
    233c:	4c f5       	brge	.+82     	; 0x2390 <odometry_rotate_for+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	51 e4       	ldi	r21, 0x41	; 65
    2346:	69 81       	ldd	r22, Y+1	; 0x01
    2348:	7a 81       	ldd	r23, Y+2	; 0x02
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	bc 01       	movw	r22, r24
    2358:	cd 01       	movw	r24, r26
    235a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	9a 87       	std	Y+10, r25	; 0x0a
    2364:	89 87       	std	Y+9, r24	; 0x09
    2366:	0f c0       	rjmp	.+30     	; 0x2386 <odometry_rotate_for+0xea>
    2368:	8a ef       	ldi	r24, 0xFA	; 250
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	9c 87       	std	Y+12, r25	; 0x0c
    236e:	8b 87       	std	Y+11, r24	; 0x0b
    2370:	8b 85       	ldd	r24, Y+11	; 0x0b
    2372:	9c 85       	ldd	r25, Y+12	; 0x0c
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	f1 f7       	brne	.-4      	; 0x2374 <odometry_rotate_for+0xd8>
    2378:	9c 87       	std	Y+12, r25	; 0x0c
    237a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237c:	89 85       	ldd	r24, Y+9	; 0x09
    237e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	9a 87       	std	Y+10, r25	; 0x0a
    2384:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2386:	89 85       	ldd	r24, Y+9	; 0x09
    2388:	9a 85       	ldd	r25, Y+10	; 0x0a
    238a:	89 2b       	or	r24, r25
    238c:	69 f7       	brne	.-38     	; 0x2368 <odometry_rotate_for+0xcc>
    238e:	14 c0       	rjmp	.+40     	; 0x23b8 <odometry_rotate_for+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2390:	6d 81       	ldd	r22, Y+5	; 0x05
    2392:	7e 81       	ldd	r23, Y+6	; 0x06
    2394:	8f 81       	ldd	r24, Y+7	; 0x07
    2396:	98 85       	ldd	r25, Y+8	; 0x08
    2398:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	9a 87       	std	Y+10, r25	; 0x0a
    23a2:	89 87       	std	Y+9, r24	; 0x09
    23a4:	89 85       	ldd	r24, Y+9	; 0x09
    23a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a8:	9e 87       	std	Y+14, r25	; 0x0e
    23aa:	8d 87       	std	Y+13, r24	; 0x0d
    23ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	f1 f7       	brne	.-4      	; 0x23b0 <odometry_rotate_for+0x114>
    23b4:	9e 87       	std	Y+14, r25	; 0x0e
    23b6:	8d 87       	std	Y+13, r24	; 0x0d
    23b8:	ce 01       	movw	r24, r28
    23ba:	0f 96       	adiw	r24, 0x0f	; 15
    23bc:	63 ec       	ldi	r22, 0xC3	; 195
    23be:	0e 94 9d 09 	call	0x133a	; 0x133a <CAN_Write>
    23c2:	88 23       	and	r24, r24
    23c4:	09 f0       	breq	.+2      	; 0x23c8 <odometry_rotate_for+0x12c>
    23c6:	86 cf       	rjmp	.-244    	; 0x22d4 <odometry_rotate_for+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    23c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23cc:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <odometry_wait_until_done>

}
    23d0:	6b 96       	adiw	r28, 0x1b	; 27
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	08 95       	ret

000023e2 <odometry_set_angle>:
 * 	uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Set angle for odometry
 */
uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	6b 97       	sbiw	r28, 0x1b	; 27
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	98 8f       	std	Y+24, r25	; 0x18
    23f8:	8f 8b       	std	Y+23, r24	; 0x17
    23fa:	69 8f       	std	Y+25, r22	; 0x19
    23fc:	5b 8f       	std	Y+27, r21	; 0x1b
    23fe:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    2400:	89 8d       	ldd	r24, Y+25	; 0x19
    2402:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <odometry_set_speed>

	buffer[0] = 'A';
    2406:	81 e4       	ldi	r24, 0x41	; 65
    2408:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    240a:	8f 89       	ldd	r24, Y+23	; 0x17
    240c:	98 8d       	ldd	r25, Y+24	; 0x18
    240e:	89 2f       	mov	r24, r25
    2410:	99 27       	eor	r25, r25
    2412:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    2414:	8f 89       	ldd	r24, Y+23	; 0x17
    2416:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2418:	72 c0       	rjmp	.+228    	; 0x24fe <odometry_set_angle+0x11c>
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	a8 e4       	ldi	r26, 0x48	; 72
    2420:	b2 e4       	ldi	r27, 0x42	; 66
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	9a 83       	std	Y+2, r25	; 0x02
    2426:	ab 83       	std	Y+3, r26	; 0x03
    2428:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e4       	ldi	r19, 0x40	; 64
    242e:	4c e1       	ldi	r20, 0x1C	; 28
    2430:	55 e4       	ldi	r21, 0x45	; 69
    2432:	69 81       	ldd	r22, Y+1	; 0x01
    2434:	7a 81       	ldd	r23, Y+2	; 0x02
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	9c 81       	ldd	r25, Y+4	; 0x04
    243a:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	8d 83       	std	Y+5, r24	; 0x05
    2444:	9e 83       	std	Y+6, r25	; 0x06
    2446:	af 83       	std	Y+7, r26	; 0x07
    2448:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e8       	ldi	r20, 0x80	; 128
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	6d 81       	ldd	r22, Y+5	; 0x05
    2454:	7e 81       	ldd	r23, Y+6	; 0x06
    2456:	8f 81       	ldd	r24, Y+7	; 0x07
    2458:	98 85       	ldd	r25, Y+8	; 0x08
    245a:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    245e:	88 23       	and	r24, r24
    2460:	2c f4       	brge	.+10     	; 0x246c <odometry_set_angle+0x8a>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9a 87       	std	Y+10, r25	; 0x0a
    2468:	89 87       	std	Y+9, r24	; 0x09
    246a:	3f c0       	rjmp	.+126    	; 0x24ea <odometry_set_angle+0x108>
	else if (__tmp > 65535)
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	3f ef       	ldi	r19, 0xFF	; 255
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	57 e4       	ldi	r21, 0x47	; 71
    2474:	6d 81       	ldd	r22, Y+5	; 0x05
    2476:	7e 81       	ldd	r23, Y+6	; 0x06
    2478:	8f 81       	ldd	r24, Y+7	; 0x07
    247a:	98 85       	ldd	r25, Y+8	; 0x08
    247c:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    2480:	18 16       	cp	r1, r24
    2482:	4c f5       	brge	.+82     	; 0x24d6 <odometry_set_angle+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	69 81       	ldd	r22, Y+1	; 0x01
    248e:	7a 81       	ldd	r23, Y+2	; 0x02
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	bc 01       	movw	r22, r24
    249e:	cd 01       	movw	r24, r26
    24a0:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9a 87       	std	Y+10, r25	; 0x0a
    24aa:	89 87       	std	Y+9, r24	; 0x09
    24ac:	0f c0       	rjmp	.+30     	; 0x24cc <odometry_set_angle+0xea>
    24ae:	8a ef       	ldi	r24, 0xFA	; 250
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9c 87       	std	Y+12, r25	; 0x0c
    24b4:	8b 87       	std	Y+11, r24	; 0x0b
    24b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    24b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <odometry_set_angle+0xd8>
    24be:	9c 87       	std	Y+12, r25	; 0x0c
    24c0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c2:	89 85       	ldd	r24, Y+9	; 0x09
    24c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	9a 87       	std	Y+10, r25	; 0x0a
    24ca:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24cc:	89 85       	ldd	r24, Y+9	; 0x09
    24ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d0:	89 2b       	or	r24, r25
    24d2:	69 f7       	brne	.-38     	; 0x24ae <odometry_set_angle+0xcc>
    24d4:	14 c0       	rjmp	.+40     	; 0x24fe <odometry_set_angle+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d6:	6d 81       	ldd	r22, Y+5	; 0x05
    24d8:	7e 81       	ldd	r23, Y+6	; 0x06
    24da:	8f 81       	ldd	r24, Y+7	; 0x07
    24dc:	98 85       	ldd	r25, Y+8	; 0x08
    24de:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	9a 87       	std	Y+10, r25	; 0x0a
    24e8:	89 87       	std	Y+9, r24	; 0x09
    24ea:	89 85       	ldd	r24, Y+9	; 0x09
    24ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ee:	9e 87       	std	Y+14, r25	; 0x0e
    24f0:	8d 87       	std	Y+13, r24	; 0x0d
    24f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <odometry_set_angle+0x114>
    24fa:	9e 87       	std	Y+14, r25	; 0x0e
    24fc:	8d 87       	std	Y+13, r24	; 0x0d
    24fe:	ce 01       	movw	r24, r28
    2500:	0f 96       	adiw	r24, 0x0f	; 15
    2502:	63 ec       	ldi	r22, 0xC3	; 195
    2504:	0e 94 9d 09 	call	0x133a	; 0x133a <CAN_Write>
    2508:	88 23       	and	r24, r24
    250a:	09 f0       	breq	.+2      	; 0x250e <odometry_set_angle+0x12c>
    250c:	86 cf       	rjmp	.-244    	; 0x241a <odometry_set_angle+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    250e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2510:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2512:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <odometry_wait_until_done>
}
    2516:	6b 96       	adiw	r28, 0x1b	; 27
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	08 95       	ret

00002528 <odometry_kurva>:

uint8_t odometry_kurva(uint16_t x_pos, uint16_t y_pos, int8_t angle, uint8_t direction, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    2528:	ef 92       	push	r14
    252a:	ff 92       	push	r15
    252c:	0f 93       	push	r16
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	6f 97       	sbiw	r28, 0x1f	; 31
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	98 8f       	std	Y+24, r25	; 0x18
    2544:	8f 8b       	std	Y+23, r24	; 0x17
    2546:	7a 8f       	std	Y+26, r23	; 0x1a
    2548:	69 8f       	std	Y+25, r22	; 0x19
    254a:	4b 8f       	std	Y+27, r20	; 0x1b
    254c:	2c 8f       	std	Y+28, r18	; 0x1c
    254e:	0d 8f       	std	Y+29, r16	; 0x1d
    2550:	ff 8e       	std	Y+31, r15	; 0x1f
    2552:	ee 8e       	std	Y+30, r14	; 0x1e
	uint8_t buffer[8];

	odometry_set_speed(speed);
    2554:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2556:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <odometry_set_speed>

	buffer[0] = 'Q';
    255a:	81 e5       	ldi	r24, 0x51	; 81
    255c:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = x_pos >> 8;
    255e:	8f 89       	ldd	r24, Y+23	; 0x17
    2560:	98 8d       	ldd	r25, Y+24	; 0x18
    2562:	89 2f       	mov	r24, r25
    2564:	99 27       	eor	r25, r25
    2566:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = x_pos & 0xFF;
    2568:	8f 89       	ldd	r24, Y+23	; 0x17
    256a:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = y_pos >> 8;
    256c:	89 8d       	ldd	r24, Y+25	; 0x19
    256e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2570:	89 2f       	mov	r24, r25
    2572:	99 27       	eor	r25, r25
    2574:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = y_pos & 0xFF;
    2576:	89 8d       	ldd	r24, Y+25	; 0x19
    2578:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = angle >> 8;
    257a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    257c:	08 2e       	mov	r0, r24
    257e:	00 0c       	add	r0, r0
    2580:	99 0b       	sbc	r25, r25
    2582:	89 2f       	mov	r24, r25
    2584:	99 0f       	add	r25, r25
    2586:	99 0b       	sbc	r25, r25
    2588:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = angle & 0xFF;
    258a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    258c:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[7] = direction;
    258e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2590:	8e 8b       	std	Y+22, r24	; 0x16

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2592:	72 c0       	rjmp	.+228    	; 0x2678 <odometry_kurva+0x150>
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	a8 e4       	ldi	r26, 0x48	; 72
    259a:	b2 e4       	ldi	r27, 0x42	; 66
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	9a 83       	std	Y+2, r25	; 0x02
    25a0:	ab 83       	std	Y+3, r26	; 0x03
    25a2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e4       	ldi	r19, 0x40	; 64
    25a8:	4c e1       	ldi	r20, 0x1C	; 28
    25aa:	55 e4       	ldi	r21, 0x45	; 69
    25ac:	69 81       	ldd	r22, Y+1	; 0x01
    25ae:	7a 81       	ldd	r23, Y+2	; 0x02
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	9c 81       	ldd	r25, Y+4	; 0x04
    25b4:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	8d 83       	std	Y+5, r24	; 0x05
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	af 83       	std	Y+7, r26	; 0x07
    25c2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	6d 81       	ldd	r22, Y+5	; 0x05
    25ce:	7e 81       	ldd	r23, Y+6	; 0x06
    25d0:	8f 81       	ldd	r24, Y+7	; 0x07
    25d2:	98 85       	ldd	r25, Y+8	; 0x08
    25d4:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    25d8:	88 23       	and	r24, r24
    25da:	2c f4       	brge	.+10     	; 0x25e6 <odometry_kurva+0xbe>
		__ticks = 1;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	9a 87       	std	Y+10, r25	; 0x0a
    25e2:	89 87       	std	Y+9, r24	; 0x09
    25e4:	3f c0       	rjmp	.+126    	; 0x2664 <odometry_kurva+0x13c>
	else if (__tmp > 65535)
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	3f ef       	ldi	r19, 0xFF	; 255
    25ea:	4f e7       	ldi	r20, 0x7F	; 127
    25ec:	57 e4       	ldi	r21, 0x47	; 71
    25ee:	6d 81       	ldd	r22, Y+5	; 0x05
    25f0:	7e 81       	ldd	r23, Y+6	; 0x06
    25f2:	8f 81       	ldd	r24, Y+7	; 0x07
    25f4:	98 85       	ldd	r25, Y+8	; 0x08
    25f6:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    25fa:	18 16       	cp	r1, r24
    25fc:	4c f5       	brge	.+82     	; 0x2650 <odometry_kurva+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e2       	ldi	r20, 0x20	; 32
    2604:	51 e4       	ldi	r21, 0x41	; 65
    2606:	69 81       	ldd	r22, Y+1	; 0x01
    2608:	7a 81       	ldd	r23, Y+2	; 0x02
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	9c 81       	ldd	r25, Y+4	; 0x04
    260e:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	bc 01       	movw	r22, r24
    2618:	cd 01       	movw	r24, r26
    261a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	9a 87       	std	Y+10, r25	; 0x0a
    2624:	89 87       	std	Y+9, r24	; 0x09
    2626:	0f c0       	rjmp	.+30     	; 0x2646 <odometry_kurva+0x11e>
    2628:	8a ef       	ldi	r24, 0xFA	; 250
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	9c 87       	std	Y+12, r25	; 0x0c
    262e:	8b 87       	std	Y+11, r24	; 0x0b
    2630:	8b 85       	ldd	r24, Y+11	; 0x0b
    2632:	9c 85       	ldd	r25, Y+12	; 0x0c
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <odometry_kurva+0x10c>
    2638:	9c 87       	std	Y+12, r25	; 0x0c
    263a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	9a 87       	std	Y+10, r25	; 0x0a
    2644:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	89 2b       	or	r24, r25
    264c:	69 f7       	brne	.-38     	; 0x2628 <odometry_kurva+0x100>
    264e:	14 c0       	rjmp	.+40     	; 0x2678 <odometry_kurva+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2650:	6d 81       	ldd	r22, Y+5	; 0x05
    2652:	7e 81       	ldd	r23, Y+6	; 0x06
    2654:	8f 81       	ldd	r24, Y+7	; 0x07
    2656:	98 85       	ldd	r25, Y+8	; 0x08
    2658:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9a 87       	std	Y+10, r25	; 0x0a
    2662:	89 87       	std	Y+9, r24	; 0x09
    2664:	89 85       	ldd	r24, Y+9	; 0x09
    2666:	9a 85       	ldd	r25, Y+10	; 0x0a
    2668:	9e 87       	std	Y+14, r25	; 0x0e
    266a:	8d 87       	std	Y+13, r24	; 0x0d
    266c:	8d 85       	ldd	r24, Y+13	; 0x0d
    266e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <odometry_kurva+0x148>
    2674:	9e 87       	std	Y+14, r25	; 0x0e
    2676:	8d 87       	std	Y+13, r24	; 0x0d
    2678:	ce 01       	movw	r24, r28
    267a:	0f 96       	adiw	r24, 0x0f	; 15
    267c:	63 ec       	ldi	r22, 0xC3	; 195
    267e:	0e 94 9d 09 	call	0x133a	; 0x133a <CAN_Write>
    2682:	88 23       	and	r24, r24
    2684:	09 f0       	breq	.+2      	; 0x2688 <odometry_kurva+0x160>
    2686:	86 cf       	rjmp	.-244    	; 0x2594 <odometry_kurva+0x6c>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2688:	8e 8d       	ldd	r24, Y+30	; 0x1e
    268a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    268c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <odometry_wait_until_done>
}
    2690:	6f 96       	adiw	r28, 0x1f	; 31
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	0f 91       	pop	r16
    26a2:	ff 90       	pop	r15
    26a4:	ef 90       	pop	r14
    26a6:	08 95       	ret

000026a8 <odometry_match_end>:

void odometry_match_end()
{
    26a8:	cf 93       	push	r28
    26aa:	df 93       	push	r29
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	66 97       	sbiw	r28, 0x16	; 22
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];

	buffer[0] = 'K';
    26bc:	8b e4       	ldi	r24, 0x4B	; 75
    26be:	8f 87       	std	Y+15, r24	; 0x0f

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    26c0:	72 c0       	rjmp	.+228    	; 0x27a6 <odometry_match_end+0xfe>
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a8 e4       	ldi	r26, 0x48	; 72
    26c8:	b2 e4       	ldi	r27, 0x42	; 66
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	9a 83       	std	Y+2, r25	; 0x02
    26ce:	ab 83       	std	Y+3, r26	; 0x03
    26d0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e4       	ldi	r19, 0x40	; 64
    26d6:	4c e1       	ldi	r20, 0x1C	; 28
    26d8:	55 e4       	ldi	r21, 0x45	; 69
    26da:	69 81       	ldd	r22, Y+1	; 0x01
    26dc:	7a 81       	ldd	r23, Y+2	; 0x02
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	9c 81       	ldd	r25, Y+4	; 0x04
    26e2:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	8d 83       	std	Y+5, r24	; 0x05
    26ec:	9e 83       	std	Y+6, r25	; 0x06
    26ee:	af 83       	std	Y+7, r26	; 0x07
    26f0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e8       	ldi	r20, 0x80	; 128
    26f8:	5f e3       	ldi	r21, 0x3F	; 63
    26fa:	6d 81       	ldd	r22, Y+5	; 0x05
    26fc:	7e 81       	ldd	r23, Y+6	; 0x06
    26fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2700:	98 85       	ldd	r25, Y+8	; 0x08
    2702:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    2706:	88 23       	and	r24, r24
    2708:	2c f4       	brge	.+10     	; 0x2714 <odometry_match_end+0x6c>
		__ticks = 1;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	9a 87       	std	Y+10, r25	; 0x0a
    2710:	89 87       	std	Y+9, r24	; 0x09
    2712:	3f c0       	rjmp	.+126    	; 0x2792 <odometry_match_end+0xea>
	else if (__tmp > 65535)
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	3f ef       	ldi	r19, 0xFF	; 255
    2718:	4f e7       	ldi	r20, 0x7F	; 127
    271a:	57 e4       	ldi	r21, 0x47	; 71
    271c:	6d 81       	ldd	r22, Y+5	; 0x05
    271e:	7e 81       	ldd	r23, Y+6	; 0x06
    2720:	8f 81       	ldd	r24, Y+7	; 0x07
    2722:	98 85       	ldd	r25, Y+8	; 0x08
    2724:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    2728:	18 16       	cp	r1, r24
    272a:	4c f5       	brge	.+82     	; 0x277e <odometry_match_end+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e2       	ldi	r20, 0x20	; 32
    2732:	51 e4       	ldi	r21, 0x41	; 65
    2734:	69 81       	ldd	r22, Y+1	; 0x01
    2736:	7a 81       	ldd	r23, Y+2	; 0x02
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	9c 81       	ldd	r25, Y+4	; 0x04
    273c:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	bc 01       	movw	r22, r24
    2746:	cd 01       	movw	r24, r26
    2748:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	9a 87       	std	Y+10, r25	; 0x0a
    2752:	89 87       	std	Y+9, r24	; 0x09
    2754:	0f c0       	rjmp	.+30     	; 0x2774 <odometry_match_end+0xcc>
    2756:	8a ef       	ldi	r24, 0xFA	; 250
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9c 87       	std	Y+12, r25	; 0x0c
    275c:	8b 87       	std	Y+11, r24	; 0x0b
    275e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2760:	9c 85       	ldd	r25, Y+12	; 0x0c
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <odometry_match_end+0xba>
    2766:	9c 87       	std	Y+12, r25	; 0x0c
    2768:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276a:	89 85       	ldd	r24, Y+9	; 0x09
    276c:	9a 85       	ldd	r25, Y+10	; 0x0a
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	9a 87       	std	Y+10, r25	; 0x0a
    2772:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2774:	89 85       	ldd	r24, Y+9	; 0x09
    2776:	9a 85       	ldd	r25, Y+10	; 0x0a
    2778:	89 2b       	or	r24, r25
    277a:	69 f7       	brne	.-38     	; 0x2756 <odometry_match_end+0xae>
    277c:	14 c0       	rjmp	.+40     	; 0x27a6 <odometry_match_end+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277e:	6d 81       	ldd	r22, Y+5	; 0x05
    2780:	7e 81       	ldd	r23, Y+6	; 0x06
    2782:	8f 81       	ldd	r24, Y+7	; 0x07
    2784:	98 85       	ldd	r25, Y+8	; 0x08
    2786:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	9a 87       	std	Y+10, r25	; 0x0a
    2790:	89 87       	std	Y+9, r24	; 0x09
    2792:	89 85       	ldd	r24, Y+9	; 0x09
    2794:	9a 85       	ldd	r25, Y+10	; 0x0a
    2796:	9e 87       	std	Y+14, r25	; 0x0e
    2798:	8d 87       	std	Y+13, r24	; 0x0d
    279a:	8d 85       	ldd	r24, Y+13	; 0x0d
    279c:	9e 85       	ldd	r25, Y+14	; 0x0e
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	f1 f7       	brne	.-4      	; 0x279e <odometry_match_end+0xf6>
    27a2:	9e 87       	std	Y+14, r25	; 0x0e
    27a4:	8d 87       	std	Y+13, r24	; 0x0d
    27a6:	ce 01       	movw	r24, r28
    27a8:	0f 96       	adiw	r24, 0x0f	; 15
    27aa:	63 ec       	ldi	r22, 0xC3	; 195
    27ac:	0e 94 9d 09 	call	0x133a	; 0x133a <CAN_Write>
    27b0:	88 23       	and	r24, r24
    27b2:	09 f0       	breq	.+2      	; 0x27b6 <odometry_match_end+0x10e>
    27b4:	86 cf       	rjmp	.-244    	; 0x26c2 <odometry_match_end+0x1a>
			_delay_ms(50);

}
    27b6:	66 96       	adiw	r28, 0x16	; 22
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	de bf       	out	0x3e, r29	; 62
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	cd bf       	out	0x3d, r28	; 61
    27c2:	df 91       	pop	r29
    27c4:	cf 91       	pop	r28
    27c6:	08 95       	ret

000027c8 <getState>:

/*
 * 	Update position
 */
uint8_t getState(void)
{
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    27d0:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <odometry_query_position>
	return position.state;
    27d4:	80 91 15 01 	lds	r24, 0x0115
}
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	08 95       	ret

000027de <odometry_get_x>:

int16_t odometry_get_x(void)
{
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    27e6:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <odometry_query_position>
	return position.x;
    27ea:	80 91 0f 01 	lds	r24, 0x010F
    27ee:	90 91 10 01 	lds	r25, 0x0110
}
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	08 95       	ret

000027f8 <odometry_get_y>:

int16_t odometry_get_y(void)
{
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2800:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <odometry_query_position>
	return position.y;
    2804:	80 91 11 01 	lds	r24, 0x0111
    2808:	90 91 12 01 	lds	r25, 0x0112
}
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	08 95       	ret

00002812 <odometry_get_angle>:

int16_t odometry_get_angle(void)
{
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    281a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <odometry_query_position>
	return position.angle;
    281e:	80 91 13 01 	lds	r24, 0x0113
    2822:	90 91 14 01 	lds	r25, 0x0114
}
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	08 95       	ret

0000282c <timer_register_callback>:
 *	Function: 		void timer_register_callback(void (*callback)(void))
 *	Parameters: 	void (*callback)(void))
 *	Description: 	timer callbacks
 */
void timer_register_callback(void (*callback)(void))
{
    282c:	cf 93       	push	r28
    282e:	df 93       	push	r29
    2830:	00 d0       	rcall	.+0      	; 0x2832 <timer_register_callback+0x6>
    2832:	cd b7       	in	r28, 0x3d	; 61
    2834:	de b7       	in	r29, 0x3e	; 62
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	90 93 6b 01 	sts	0x016B, r25
    2842:	80 93 6a 01 	sts	0x016A, r24
}
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	08 95       	ret

00002850 <timer_init>:
 *	Function: 		void timer_init(unsigned int freq)
 *	Parameters: 	unsigned int freq - frequency of timer
 *	Description: 	setup timer
 */
void timer_init(unsigned int freq)
{
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	00 d0       	rcall	.+0      	; 0x285a <timer_init+0xa>
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    285e:	9a 83       	std	Y+2, r25	; 0x02
    2860:	89 83       	std	Y+1, r24	; 0x01

    TCCR1A = 0;
    2862:	80 e8       	ldi	r24, 0x80	; 128
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	fc 01       	movw	r30, r24
    2868:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    286a:	81 e8       	ldi	r24, 0x81	; 129
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	29 e0       	ldi	r18, 0x09	; 9
    2870:	fc 01       	movw	r30, r24
    2872:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    2874:	08 e8       	ldi	r16, 0x88	; 136
    2876:	10 e0       	ldi	r17, 0x00	; 0
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	9a 81       	ldd	r25, Y+2	; 0x02
    287c:	cc 01       	movw	r24, r24
    287e:	a0 e0       	ldi	r26, 0x00	; 0
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatunsisf>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	9c 01       	movw	r18, r24
    2890:	ad 01       	movw	r20, r26
    2892:	60 e8       	ldi	r22, 0x80	; 128
    2894:	76 e9       	ldi	r23, 0x96	; 150
    2896:	88 e1       	ldi	r24, 0x18	; 24
    2898:	9b e4       	ldi	r25, 0x4B	; 75
    289a:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__divsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e0       	ldi	r20, 0x00	; 0
    28a8:	5f e3       	ldi	r21, 0x3F	; 63
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__addsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	f8 01       	movw	r30, r16
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    28c8:	8f e6       	ldi	r24, 0x6F	; 111
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	22 e0       	ldi	r18, 0x02	; 2
    28ce:	fc 01       	movw	r30, r24
    28d0:	20 83       	st	Z, r18

	SREG |= 0x80;
    28d2:	8f e5       	ldi	r24, 0x5F	; 95
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	2f e5       	ldi	r18, 0x5F	; 95
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	f9 01       	movw	r30, r18
    28dc:	20 81       	ld	r18, Z
    28de:	20 68       	ori	r18, 0x80	; 128
    28e0:	fc 01       	movw	r30, r24
    28e2:	20 83       	st	Z, r18
}
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	1f 91       	pop	r17
    28ee:	0f 91       	pop	r16
    28f0:	08 95       	ret

000028f2 <__vector_12>:
/*
 *	Function: 		ISR(TIMER1_COMPA_vect)
 *	Description: 	ISR interrupt for timer
 */
ISR(TIMER1_COMPA_vect)
{
    28f2:	1f 92       	push	r1
    28f4:	0f 92       	push	r0
    28f6:	00 90 5f 00 	lds	r0, 0x005F
    28fa:	0f 92       	push	r0
    28fc:	11 24       	eor	r1, r1
    28fe:	00 90 5b 00 	lds	r0, 0x005B
    2902:	0f 92       	push	r0
    2904:	2f 93       	push	r18
    2906:	3f 93       	push	r19
    2908:	4f 93       	push	r20
    290a:	5f 93       	push	r21
    290c:	6f 93       	push	r22
    290e:	7f 93       	push	r23
    2910:	8f 93       	push	r24
    2912:	9f 93       	push	r25
    2914:	af 93       	push	r26
    2916:	bf 93       	push	r27
    2918:	ef 93       	push	r30
    291a:	ff 93       	push	r31
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	62 97       	sbiw	r28, 0x12	; 18
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	cd bf       	out	0x3d, r28	; 61
    if(timer_callback != NULL)
    292a:	80 91 6a 01 	lds	r24, 0x016A
    292e:	90 91 6b 01 	lds	r25, 0x016B
    2932:	89 2b       	or	r24, r25
    2934:	31 f0       	breq	.+12     	; 0x2942 <__vector_12+0x50>
        timer_callback();
    2936:	80 91 6a 01 	lds	r24, 0x016A
    293a:	90 91 6b 01 	lds	r25, 0x016B
    293e:	fc 01       	movw	r30, r24
    2940:	09 95       	icall
	if(sys_time >= 90000)					// if match end
    2942:	80 91 65 01 	lds	r24, 0x0165
    2946:	90 91 66 01 	lds	r25, 0x0166
    294a:	a0 91 67 01 	lds	r26, 0x0167
    294e:	b0 91 68 01 	lds	r27, 0x0168
    2952:	80 39       	cpi	r24, 0x90	; 144
    2954:	9f 45       	sbci	r25, 0x5F	; 95
    2956:	a1 40       	sbci	r26, 0x01	; 1
    2958:	b1 05       	cpc	r27, r1
    295a:	08 f4       	brcc	.+2      	; 0x295e <__vector_12+0x6c>
    295c:	84 c0       	rjmp	.+264    	; 0x2a66 <__vector_12+0x174>
	{
		if(system_get_match_started())		// if the match has started before
    295e:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <system_get_match_started>
    2962:	88 23       	and	r24, r24
    2964:	09 f4       	brne	.+2      	; 0x2968 <__vector_12+0x76>
    2966:	7f c0       	rjmp	.+254    	; 0x2a66 <__vector_12+0x174>
		{
			odometry_match_end();
    2968:	0e 94 54 13 	call	0x26a8	; 0x26a8 <odometry_match_end>
			while(1) {
				PORTG ^= 1 << 0;
    296c:	84 e3       	ldi	r24, 0x34	; 52
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	24 e3       	ldi	r18, 0x34	; 52
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	f9 01       	movw	r30, r18
    2976:	30 81       	ld	r19, Z
    2978:	21 e0       	ldi	r18, 0x01	; 1
    297a:	23 27       	eor	r18, r19
    297c:	fc 01       	movw	r30, r24
    297e:	20 83       	st	Z, r18
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	aa e7       	ldi	r26, 0x7A	; 122
    2986:	b4 e4       	ldi	r27, 0x44	; 68
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	9a 83       	std	Y+2, r25	; 0x02
    298c:	ab 83       	std	Y+3, r26	; 0x03
    298e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e4       	ldi	r19, 0x40	; 64
    2994:	4c e1       	ldi	r20, 0x1C	; 28
    2996:	55 e4       	ldi	r21, 0x45	; 69
    2998:	69 81       	ldd	r22, Y+1	; 0x01
    299a:	7a 81       	ldd	r23, Y+2	; 0x02
    299c:	8b 81       	ldd	r24, Y+3	; 0x03
    299e:	9c 81       	ldd	r25, Y+4	; 0x04
    29a0:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	8d 83       	std	Y+5, r24	; 0x05
    29aa:	9e 83       	std	Y+6, r25	; 0x06
    29ac:	af 83       	std	Y+7, r26	; 0x07
    29ae:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	6d 81       	ldd	r22, Y+5	; 0x05
    29ba:	7e 81       	ldd	r23, Y+6	; 0x06
    29bc:	8f 81       	ldd	r24, Y+7	; 0x07
    29be:	98 85       	ldd	r25, Y+8	; 0x08
    29c0:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    29c4:	88 23       	and	r24, r24
    29c6:	2c f4       	brge	.+10     	; 0x29d2 <__vector_12+0xe0>
		__ticks = 1;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	9a 87       	std	Y+10, r25	; 0x0a
    29ce:	89 87       	std	Y+9, r24	; 0x09
    29d0:	3f c0       	rjmp	.+126    	; 0x2a50 <__vector_12+0x15e>
	else if (__tmp > 65535)
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	3f ef       	ldi	r19, 0xFF	; 255
    29d6:	4f e7       	ldi	r20, 0x7F	; 127
    29d8:	57 e4       	ldi	r21, 0x47	; 71
    29da:	6d 81       	ldd	r22, Y+5	; 0x05
    29dc:	7e 81       	ldd	r23, Y+6	; 0x06
    29de:	8f 81       	ldd	r24, Y+7	; 0x07
    29e0:	98 85       	ldd	r25, Y+8	; 0x08
    29e2:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    29e6:	18 16       	cp	r1, r24
    29e8:	4c f5       	brge	.+82     	; 0x2a3c <__vector_12+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e2       	ldi	r20, 0x20	; 32
    29f0:	51 e4       	ldi	r21, 0x41	; 65
    29f2:	69 81       	ldd	r22, Y+1	; 0x01
    29f4:	7a 81       	ldd	r23, Y+2	; 0x02
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	9c 81       	ldd	r25, Y+4	; 0x04
    29fa:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	bc 01       	movw	r22, r24
    2a04:	cd 01       	movw	r24, r26
    2a06:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	9a 87       	std	Y+10, r25	; 0x0a
    2a10:	89 87       	std	Y+9, r24	; 0x09
    2a12:	0f c0       	rjmp	.+30     	; 0x2a32 <__vector_12+0x140>
    2a14:	8a ef       	ldi	r24, 0xFA	; 250
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	9c 87       	std	Y+12, r25	; 0x0c
    2a1a:	8b 87       	std	Y+11, r24	; 0x0b
    2a1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <__vector_12+0x12e>
    2a24:	9c 87       	std	Y+12, r25	; 0x0c
    2a26:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a28:	89 85       	ldd	r24, Y+9	; 0x09
    2a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	9a 87       	std	Y+10, r25	; 0x0a
    2a30:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a32:	89 85       	ldd	r24, Y+9	; 0x09
    2a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a36:	89 2b       	or	r24, r25
    2a38:	69 f7       	brne	.-38     	; 0x2a14 <__vector_12+0x122>
    2a3a:	14 c0       	rjmp	.+40     	; 0x2a64 <__vector_12+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3c:	6d 81       	ldd	r22, Y+5	; 0x05
    2a3e:	7e 81       	ldd	r23, Y+6	; 0x06
    2a40:	8f 81       	ldd	r24, Y+7	; 0x07
    2a42:	98 85       	ldd	r25, Y+8	; 0x08
    2a44:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	9a 87       	std	Y+10, r25	; 0x0a
    2a4e:	89 87       	std	Y+9, r24	; 0x09
    2a50:	89 85       	ldd	r24, Y+9	; 0x09
    2a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a54:	9e 87       	std	Y+14, r25	; 0x0e
    2a56:	8d 87       	std	Y+13, r24	; 0x0d
    2a58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <__vector_12+0x16a>
    2a60:	9e 87       	std	Y+14, r25	; 0x0e
    2a62:	8d 87       	std	Y+13, r24	; 0x0d
				_delay_ms(1000);
			}
    2a64:	83 cf       	rjmp	.-250    	; 0x296c <__vector_12+0x7a>
		}
	}

	// for testing if the timer is working
	if((sys_time % 1000) == 0 && !setup_complete) {
    2a66:	80 91 65 01 	lds	r24, 0x0165
    2a6a:	90 91 66 01 	lds	r25, 0x0166
    2a6e:	a0 91 67 01 	lds	r26, 0x0167
    2a72:	b0 91 68 01 	lds	r27, 0x0168
    2a76:	28 ee       	ldi	r18, 0xE8	; 232
    2a78:	33 e0       	ldi	r19, 0x03	; 3
    2a7a:	40 e0       	ldi	r20, 0x00	; 0
    2a7c:	50 e0       	ldi	r21, 0x00	; 0
    2a7e:	bc 01       	movw	r22, r24
    2a80:	cd 01       	movw	r24, r26
    2a82:	0e 94 55 20 	call	0x40aa	; 0x40aa <__udivmodsi4>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	89 2b       	or	r24, r25
    2a8c:	8a 2b       	or	r24, r26
    2a8e:	8b 2b       	or	r24, r27
    2a90:	71 f4       	brne	.+28     	; 0x2aae <__vector_12+0x1bc>
    2a92:	80 91 6f 01 	lds	r24, 0x016F
    2a96:	88 23       	and	r24, r24
    2a98:	51 f4       	brne	.+20     	; 0x2aae <__vector_12+0x1bc>

		PORTG ^= 1 << 0;
    2a9a:	84 e3       	ldi	r24, 0x34	; 52
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	24 e3       	ldi	r18, 0x34	; 52
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	f9 01       	movw	r30, r18
    2aa4:	30 81       	ld	r19, Z
    2aa6:	21 e0       	ldi	r18, 0x01	; 1
    2aa8:	23 27       	eor	r18, r19
    2aaa:	fc 01       	movw	r30, r24
    2aac:	20 83       	st	Z, r18
	}

	sys_time++;
    2aae:	80 91 65 01 	lds	r24, 0x0165
    2ab2:	90 91 66 01 	lds	r25, 0x0166
    2ab6:	a0 91 67 01 	lds	r26, 0x0167
    2aba:	b0 91 68 01 	lds	r27, 0x0168
    2abe:	01 96       	adiw	r24, 0x01	; 1
    2ac0:	a1 1d       	adc	r26, r1
    2ac2:	b1 1d       	adc	r27, r1
    2ac4:	80 93 65 01 	sts	0x0165, r24
    2ac8:	90 93 66 01 	sts	0x0166, r25
    2acc:	a0 93 67 01 	sts	0x0167, r26
    2ad0:	b0 93 68 01 	sts	0x0168, r27


}
    2ad4:	62 96       	adiw	r28, 0x12	; 18
    2ad6:	0f b6       	in	r0, 0x3f	; 63
    2ad8:	f8 94       	cli
    2ada:	de bf       	out	0x3e, r29	; 62
    2adc:	0f be       	out	0x3f, r0	; 63
    2ade:	cd bf       	out	0x3d, r28	; 61
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	ff 91       	pop	r31
    2ae6:	ef 91       	pop	r30
    2ae8:	bf 91       	pop	r27
    2aea:	af 91       	pop	r26
    2aec:	9f 91       	pop	r25
    2aee:	8f 91       	pop	r24
    2af0:	7f 91       	pop	r23
    2af2:	6f 91       	pop	r22
    2af4:	5f 91       	pop	r21
    2af6:	4f 91       	pop	r20
    2af8:	3f 91       	pop	r19
    2afa:	2f 91       	pop	r18
    2afc:	0f 90       	pop	r0
    2afe:	00 92 5b 00 	sts	0x005B, r0
    2b02:	0f 90       	pop	r0
    2b04:	00 92 5f 00 	sts	0x005F, r0
    2b08:	0f 90       	pop	r0
    2b0a:	1f 90       	pop	r1
    2b0c:	18 95       	reti

00002b0e <system_reset_system_time>:

void system_reset_system_time(void) 	{ 	sys_time = 0; 			}
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	10 92 65 01 	sts	0x0165, r1
    2b1a:	10 92 66 01 	sts	0x0166, r1
    2b1e:	10 92 67 01 	sts	0x0167, r1
    2b22:	10 92 68 01 	sts	0x0168, r1
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	08 95       	ret

00002b2c <system_set_match_started>:
void system_set_match_started(void) 	{ 	match_started = 1; 		}
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	80 93 69 01 	sts	0x0169, r24
    2b3a:	df 91       	pop	r29
    2b3c:	cf 91       	pop	r28
    2b3e:	08 95       	ret

00002b40 <system_get_system_time>:
uint32_t system_get_system_time(void) 	{ 	return sys_time; 		}
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
    2b48:	80 91 65 01 	lds	r24, 0x0165
    2b4c:	90 91 66 01 	lds	r25, 0x0166
    2b50:	a0 91 67 01 	lds	r26, 0x0167
    2b54:	b0 91 68 01 	lds	r27, 0x0168
    2b58:	bc 01       	movw	r22, r24
    2b5a:	cd 01       	movw	r24, r26
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	08 95       	ret

00002b62 <system_get_match_started>:
uint8_t system_get_match_started(void) 	{ 	return match_started; 	}
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
    2b6a:	80 91 69 01 	lds	r24, 0x0169
    2b6e:	df 91       	pop	r29
    2b70:	cf 91       	pop	r28
    2b72:	08 95       	ret

00002b74 <__vector_8>:


ISR(INT7_vect) {
    2b74:	1f 92       	push	r1
    2b76:	0f 92       	push	r0
    2b78:	00 90 5f 00 	lds	r0, 0x005F
    2b7c:	0f 92       	push	r0
    2b7e:	11 24       	eor	r1, r1
    2b80:	8f 93       	push	r24
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
	jumper_pulled = true;
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	80 93 6e 01 	sts	0x016E, r24
}
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	8f 91       	pop	r24
    2b96:	0f 90       	pop	r0
    2b98:	00 92 5f 00 	sts	0x005F, r0
    2b9c:	0f 90       	pop	r0
    2b9e:	1f 90       	pop	r1
    2ba0:	18 95       	reti

00002ba2 <system_setup_jumper>:

static void system_setup_jumper() {
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	2e 97       	sbiw	r28, 0x0e	; 14
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61

	DDRE &= ~(1 << PIN7);			// setup pin as input
    2bb6:	8d e2       	ldi	r24, 0x2D	; 45
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	2d e2       	ldi	r18, 0x2D	; 45
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	f9 01       	movw	r30, r18
    2bc0:	20 81       	ld	r18, Z
    2bc2:	2f 77       	andi	r18, 0x7F	; 127
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	20 83       	st	Z, r18

	PORTE |= (1 << PIN7);			// pullup
    2bc8:	8e e2       	ldi	r24, 0x2E	; 46
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	2e e2       	ldi	r18, 0x2E	; 46
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	f9 01       	movw	r30, r18
    2bd2:	20 81       	ld	r18, Z
    2bd4:	20 68       	ori	r18, 0x80	; 128
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	20 83       	st	Z, r18

	EICRB = (1 << ISC70);			// set on status change to triggure interrupt
    2bda:	8a e6       	ldi	r24, 0x6A	; 106
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	20 e4       	ldi	r18, 0x40	; 64
    2be0:	fc 01       	movw	r30, r24
    2be2:	20 83       	st	Z, r18

	EIMSK |= (1 << INT7);			// enable interrupt
    2be4:	8d e3       	ldi	r24, 0x3D	; 61
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	2d e3       	ldi	r18, 0x3D	; 61
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	f9 01       	movw	r30, r18
    2bee:	20 81       	ld	r18, Z
    2bf0:	20 68       	ori	r18, 0x80	; 128
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	20 83       	st	Z, r18
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	a8 ec       	ldi	r26, 0xC8	; 200
    2bfc:	b2 e4       	ldi	r27, 0x42	; 66
    2bfe:	89 83       	std	Y+1, r24	; 0x01
    2c00:	9a 83       	std	Y+2, r25	; 0x02
    2c02:	ab 83       	std	Y+3, r26	; 0x03
    2c04:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e4       	ldi	r19, 0x40	; 64
    2c0a:	4c e1       	ldi	r20, 0x1C	; 28
    2c0c:	55 e4       	ldi	r21, 0x45	; 69
    2c0e:	69 81       	ldd	r22, Y+1	; 0x01
    2c10:	7a 81       	ldd	r23, Y+2	; 0x02
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	9c 81       	ldd	r25, Y+4	; 0x04
    2c16:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	8d 83       	std	Y+5, r24	; 0x05
    2c20:	9e 83       	std	Y+6, r25	; 0x06
    2c22:	af 83       	std	Y+7, r26	; 0x07
    2c24:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e8       	ldi	r20, 0x80	; 128
    2c2c:	5f e3       	ldi	r21, 0x3F	; 63
    2c2e:	6d 81       	ldd	r22, Y+5	; 0x05
    2c30:	7e 81       	ldd	r23, Y+6	; 0x06
    2c32:	8f 81       	ldd	r24, Y+7	; 0x07
    2c34:	98 85       	ldd	r25, Y+8	; 0x08
    2c36:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    2c3a:	88 23       	and	r24, r24
    2c3c:	2c f4       	brge	.+10     	; 0x2c48 <system_setup_jumper+0xa6>
		__ticks = 1;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	9a 87       	std	Y+10, r25	; 0x0a
    2c44:	89 87       	std	Y+9, r24	; 0x09
    2c46:	3f c0       	rjmp	.+126    	; 0x2cc6 <system_setup_jumper+0x124>
	else if (__tmp > 65535)
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	3f ef       	ldi	r19, 0xFF	; 255
    2c4c:	4f e7       	ldi	r20, 0x7F	; 127
    2c4e:	57 e4       	ldi	r21, 0x47	; 71
    2c50:	6d 81       	ldd	r22, Y+5	; 0x05
    2c52:	7e 81       	ldd	r23, Y+6	; 0x06
    2c54:	8f 81       	ldd	r24, Y+7	; 0x07
    2c56:	98 85       	ldd	r25, Y+8	; 0x08
    2c58:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    2c5c:	18 16       	cp	r1, r24
    2c5e:	4c f5       	brge	.+82     	; 0x2cb2 <system_setup_jumper+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e2       	ldi	r20, 0x20	; 32
    2c66:	51 e4       	ldi	r21, 0x41	; 65
    2c68:	69 81       	ldd	r22, Y+1	; 0x01
    2c6a:	7a 81       	ldd	r23, Y+2	; 0x02
    2c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c70:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	bc 01       	movw	r22, r24
    2c7a:	cd 01       	movw	r24, r26
    2c7c:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	9a 87       	std	Y+10, r25	; 0x0a
    2c86:	89 87       	std	Y+9, r24	; 0x09
    2c88:	0f c0       	rjmp	.+30     	; 0x2ca8 <system_setup_jumper+0x106>
    2c8a:	8a ef       	ldi	r24, 0xFA	; 250
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	9c 87       	std	Y+12, r25	; 0x0c
    2c90:	8b 87       	std	Y+11, r24	; 0x0b
    2c92:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c94:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <system_setup_jumper+0xf4>
    2c9a:	9c 87       	std	Y+12, r25	; 0x0c
    2c9c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	9a 87       	std	Y+10, r25	; 0x0a
    2ca6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca8:	89 85       	ldd	r24, Y+9	; 0x09
    2caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cac:	89 2b       	or	r24, r25
    2cae:	69 f7       	brne	.-38     	; 0x2c8a <system_setup_jumper+0xe8>
    2cb0:	14 c0       	rjmp	.+40     	; 0x2cda <system_setup_jumper+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb2:	6d 81       	ldd	r22, Y+5	; 0x05
    2cb4:	7e 81       	ldd	r23, Y+6	; 0x06
    2cb6:	8f 81       	ldd	r24, Y+7	; 0x07
    2cb8:	98 85       	ldd	r25, Y+8	; 0x08
    2cba:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	9a 87       	std	Y+10, r25	; 0x0a
    2cc4:	89 87       	std	Y+9, r24	; 0x09
    2cc6:	89 85       	ldd	r24, Y+9	; 0x09
    2cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cca:	9e 87       	std	Y+14, r25	; 0x0e
    2ccc:	8d 87       	std	Y+13, r24	; 0x0d
    2cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <system_setup_jumper+0x130>
    2cd6:	9e 87       	std	Y+14, r25	; 0x0e
    2cd8:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);

	sei();							// enable global interrupts
    2cda:	78 94       	sei
}
    2cdc:	2e 96       	adiw	r28, 0x0e	; 14
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	08 95       	ret

00002cee <system_wait_for_jumper>:

static void system_wait_for_jumper() {
    2cee:	cf 93       	push	r28
    2cf0:	df 93       	push	r29
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	2e 97       	sbiw	r28, 0x0e	; 14
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	f8 94       	cli
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	cd bf       	out	0x3d, r28	; 61

	while(jumper_pulled == false)		// wait for jumper_pulled t be set true
    2d02:	72 c0       	rjmp	.+228    	; 0x2de8 <system_wait_for_jumper+0xfa>
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	a0 e2       	ldi	r26, 0x20	; 32
    2d0a:	b1 e4       	ldi	r27, 0x41	; 65
    2d0c:	89 83       	std	Y+1, r24	; 0x01
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
    2d10:	ab 83       	std	Y+3, r26	; 0x03
    2d12:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e4       	ldi	r19, 0x40	; 64
    2d18:	4c e1       	ldi	r20, 0x1C	; 28
    2d1a:	55 e4       	ldi	r21, 0x45	; 69
    2d1c:	69 81       	ldd	r22, Y+1	; 0x01
    2d1e:	7a 81       	ldd	r23, Y+2	; 0x02
    2d20:	8b 81       	ldd	r24, Y+3	; 0x03
    2d22:	9c 81       	ldd	r25, Y+4	; 0x04
    2d24:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	8d 83       	std	Y+5, r24	; 0x05
    2d2e:	9e 83       	std	Y+6, r25	; 0x06
    2d30:	af 83       	std	Y+7, r26	; 0x07
    2d32:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	40 e8       	ldi	r20, 0x80	; 128
    2d3a:	5f e3       	ldi	r21, 0x3F	; 63
    2d3c:	6d 81       	ldd	r22, Y+5	; 0x05
    2d3e:	7e 81       	ldd	r23, Y+6	; 0x06
    2d40:	8f 81       	ldd	r24, Y+7	; 0x07
    2d42:	98 85       	ldd	r25, Y+8	; 0x08
    2d44:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    2d48:	88 23       	and	r24, r24
    2d4a:	2c f4       	brge	.+10     	; 0x2d56 <system_wait_for_jumper+0x68>
		__ticks = 1;
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	9a 87       	std	Y+10, r25	; 0x0a
    2d52:	89 87       	std	Y+9, r24	; 0x09
    2d54:	3f c0       	rjmp	.+126    	; 0x2dd4 <system_wait_for_jumper+0xe6>
	else if (__tmp > 65535)
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	3f ef       	ldi	r19, 0xFF	; 255
    2d5a:	4f e7       	ldi	r20, 0x7F	; 127
    2d5c:	57 e4       	ldi	r21, 0x47	; 71
    2d5e:	6d 81       	ldd	r22, Y+5	; 0x05
    2d60:	7e 81       	ldd	r23, Y+6	; 0x06
    2d62:	8f 81       	ldd	r24, Y+7	; 0x07
    2d64:	98 85       	ldd	r25, Y+8	; 0x08
    2d66:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    2d6a:	18 16       	cp	r1, r24
    2d6c:	4c f5       	brge	.+82     	; 0x2dc0 <system_wait_for_jumper+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e2       	ldi	r20, 0x20	; 32
    2d74:	51 e4       	ldi	r21, 0x41	; 65
    2d76:	69 81       	ldd	r22, Y+1	; 0x01
    2d78:	7a 81       	ldd	r23, Y+2	; 0x02
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7e:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	bc 01       	movw	r22, r24
    2d88:	cd 01       	movw	r24, r26
    2d8a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	9a 87       	std	Y+10, r25	; 0x0a
    2d94:	89 87       	std	Y+9, r24	; 0x09
    2d96:	0f c0       	rjmp	.+30     	; 0x2db6 <system_wait_for_jumper+0xc8>
    2d98:	8a ef       	ldi	r24, 0xFA	; 250
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	9c 87       	std	Y+12, r25	; 0x0c
    2d9e:	8b 87       	std	Y+11, r24	; 0x0b
    2da0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2da2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	f1 f7       	brne	.-4      	; 0x2da4 <system_wait_for_jumper+0xb6>
    2da8:	9c 87       	std	Y+12, r25	; 0x0c
    2daa:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dac:	89 85       	ldd	r24, Y+9	; 0x09
    2dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	9a 87       	std	Y+10, r25	; 0x0a
    2db4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db6:	89 85       	ldd	r24, Y+9	; 0x09
    2db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dba:	89 2b       	or	r24, r25
    2dbc:	69 f7       	brne	.-38     	; 0x2d98 <system_wait_for_jumper+0xaa>
    2dbe:	14 c0       	rjmp	.+40     	; 0x2de8 <system_wait_for_jumper+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc0:	6d 81       	ldd	r22, Y+5	; 0x05
    2dc2:	7e 81       	ldd	r23, Y+6	; 0x06
    2dc4:	8f 81       	ldd	r24, Y+7	; 0x07
    2dc6:	98 85       	ldd	r25, Y+8	; 0x08
    2dc8:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	9a 87       	std	Y+10, r25	; 0x0a
    2dd2:	89 87       	std	Y+9, r24	; 0x09
    2dd4:	89 85       	ldd	r24, Y+9	; 0x09
    2dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd8:	9e 87       	std	Y+14, r25	; 0x0e
    2dda:	8d 87       	std	Y+13, r24	; 0x0d
    2ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de0:	01 97       	sbiw	r24, 0x01	; 1
    2de2:	f1 f7       	brne	.-4      	; 0x2de0 <system_wait_for_jumper+0xf2>
    2de4:	9e 87       	std	Y+14, r25	; 0x0e
    2de6:	8d 87       	std	Y+13, r24	; 0x0d
    2de8:	80 91 6e 01 	lds	r24, 0x016E
    2dec:	88 23       	and	r24, r24
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <system_wait_for_jumper+0x104>
    2df0:	89 cf       	rjmp	.-238    	; 0x2d04 <system_wait_for_jumper+0x16>
		_delay_ms(10);

}
    2df2:	2e 96       	adiw	r28, 0x0e	; 14
    2df4:	0f b6       	in	r0, 0x3f	; 63
    2df6:	f8 94       	cli
    2df8:	de bf       	out	0x3e, r29	; 62
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	cd bf       	out	0x3d, r28	; 61
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	08 95       	ret

00002e04 <system_init>:
 *	Function: 		void system_init(void)
 *	Parameters: 	void
 *	Description:	initing all the things
 */
void system_init(void)
{
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	aa 97       	sbiw	r28, 0x2a	; 42
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
	// sets debouncer
	timer_register_callback(gpio_debouncer);
    2e18:	8d e8       	ldi	r24, 0x8D	; 141
    2e1a:	9c e0       	ldi	r25, 0x0C	; 12
    2e1c:	0e 94 16 14 	call	0x282c	; 0x282c <timer_register_callback>
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	a8 ec       	ldi	r26, 0xC8	; 200
    2e26:	b2 e4       	ldi	r27, 0x42	; 66
    2e28:	89 83       	std	Y+1, r24	; 0x01
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	ab 83       	std	Y+3, r26	; 0x03
    2e2e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e4       	ldi	r19, 0x40	; 64
    2e34:	4c e1       	ldi	r20, 0x1C	; 28
    2e36:	55 e4       	ldi	r21, 0x45	; 69
    2e38:	69 81       	ldd	r22, Y+1	; 0x01
    2e3a:	7a 81       	ldd	r23, Y+2	; 0x02
    2e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e40:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	8d 83       	std	Y+5, r24	; 0x05
    2e4a:	9e 83       	std	Y+6, r25	; 0x06
    2e4c:	af 83       	std	Y+7, r26	; 0x07
    2e4e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 e8       	ldi	r20, 0x80	; 128
    2e56:	5f e3       	ldi	r21, 0x3F	; 63
    2e58:	6d 81       	ldd	r22, Y+5	; 0x05
    2e5a:	7e 81       	ldd	r23, Y+6	; 0x06
    2e5c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e5e:	98 85       	ldd	r25, Y+8	; 0x08
    2e60:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    2e64:	88 23       	and	r24, r24
    2e66:	2c f4       	brge	.+10     	; 0x2e72 <system_init+0x6e>
		__ticks = 1;
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	9a 87       	std	Y+10, r25	; 0x0a
    2e6e:	89 87       	std	Y+9, r24	; 0x09
    2e70:	3f c0       	rjmp	.+126    	; 0x2ef0 <system_init+0xec>
	else if (__tmp > 65535)
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	3f ef       	ldi	r19, 0xFF	; 255
    2e76:	4f e7       	ldi	r20, 0x7F	; 127
    2e78:	57 e4       	ldi	r21, 0x47	; 71
    2e7a:	6d 81       	ldd	r22, Y+5	; 0x05
    2e7c:	7e 81       	ldd	r23, Y+6	; 0x06
    2e7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e80:	98 85       	ldd	r25, Y+8	; 0x08
    2e82:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    2e86:	18 16       	cp	r1, r24
    2e88:	4c f5       	brge	.+82     	; 0x2edc <system_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e2       	ldi	r20, 0x20	; 32
    2e90:	51 e4       	ldi	r21, 0x41	; 65
    2e92:	69 81       	ldd	r22, Y+1	; 0x01
    2e94:	7a 81       	ldd	r23, Y+2	; 0x02
    2e96:	8b 81       	ldd	r24, Y+3	; 0x03
    2e98:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9a:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	bc 01       	movw	r22, r24
    2ea4:	cd 01       	movw	r24, r26
    2ea6:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	9a 87       	std	Y+10, r25	; 0x0a
    2eb0:	89 87       	std	Y+9, r24	; 0x09
    2eb2:	0f c0       	rjmp	.+30     	; 0x2ed2 <system_init+0xce>
    2eb4:	8a ef       	ldi	r24, 0xFA	; 250
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	9c 87       	std	Y+12, r25	; 0x0c
    2eba:	8b 87       	std	Y+11, r24	; 0x0b
    2ebc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ebe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	f1 f7       	brne	.-4      	; 0x2ec0 <system_init+0xbc>
    2ec4:	9c 87       	std	Y+12, r25	; 0x0c
    2ec6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec8:	89 85       	ldd	r24, Y+9	; 0x09
    2eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	9a 87       	std	Y+10, r25	; 0x0a
    2ed0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed2:	89 85       	ldd	r24, Y+9	; 0x09
    2ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed6:	89 2b       	or	r24, r25
    2ed8:	69 f7       	brne	.-38     	; 0x2eb4 <system_init+0xb0>
    2eda:	14 c0       	rjmp	.+40     	; 0x2f04 <system_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2edc:	6d 81       	ldd	r22, Y+5	; 0x05
    2ede:	7e 81       	ldd	r23, Y+6	; 0x06
    2ee0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ee2:	98 85       	ldd	r25, Y+8	; 0x08
    2ee4:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	9a 87       	std	Y+10, r25	; 0x0a
    2eee:	89 87       	std	Y+9, r24	; 0x09
    2ef0:	89 85       	ldd	r24, Y+9	; 0x09
    2ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef4:	9e 87       	std	Y+14, r25	; 0x0e
    2ef6:	8d 87       	std	Y+13, r24	; 0x0d
    2ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	f1 f7       	brne	.-4      	; 0x2efc <system_init+0xf8>
    2f00:	9e 87       	std	Y+14, r25	; 0x0e
    2f02:	8d 87       	std	Y+13, r24	; 0x0d


	_delay_ms(100);

	gpio_register_pin(0, GPIO_DIRECTION_INPUT, true);									// test detection
    2f04:	41 e0       	ldi	r20, 0x01	; 1
    2f06:	60 e0       	ldi	r22, 0x00	; 0
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <gpio_register_pin>
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	a8 ec       	ldi	r26, 0xC8	; 200
    2f14:	b2 e4       	ldi	r27, 0x42	; 66
    2f16:	8f 87       	std	Y+15, r24	; 0x0f
    2f18:	98 8b       	std	Y+16, r25	; 0x10
    2f1a:	a9 8b       	std	Y+17, r26	; 0x11
    2f1c:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e4       	ldi	r19, 0x40	; 64
    2f22:	4c e1       	ldi	r20, 0x1C	; 28
    2f24:	55 e4       	ldi	r21, 0x45	; 69
    2f26:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f28:	78 89       	ldd	r23, Y+16	; 0x10
    2f2a:	89 89       	ldd	r24, Y+17	; 0x11
    2f2c:	9a 89       	ldd	r25, Y+18	; 0x12
    2f2e:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	8b 8b       	std	Y+19, r24	; 0x13
    2f38:	9c 8b       	std	Y+20, r25	; 0x14
    2f3a:	ad 8b       	std	Y+21, r26	; 0x15
    2f3c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	40 e8       	ldi	r20, 0x80	; 128
    2f44:	5f e3       	ldi	r21, 0x3F	; 63
    2f46:	6b 89       	ldd	r22, Y+19	; 0x13
    2f48:	7c 89       	ldd	r23, Y+20	; 0x14
    2f4a:	8d 89       	ldd	r24, Y+21	; 0x15
    2f4c:	9e 89       	ldd	r25, Y+22	; 0x16
    2f4e:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    2f52:	88 23       	and	r24, r24
    2f54:	2c f4       	brge	.+10     	; 0x2f60 <system_init+0x15c>
		__ticks = 1;
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	98 8f       	std	Y+24, r25	; 0x18
    2f5c:	8f 8b       	std	Y+23, r24	; 0x17
    2f5e:	3f c0       	rjmp	.+126    	; 0x2fde <system_init+0x1da>
	else if (__tmp > 65535)
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	3f ef       	ldi	r19, 0xFF	; 255
    2f64:	4f e7       	ldi	r20, 0x7F	; 127
    2f66:	57 e4       	ldi	r21, 0x47	; 71
    2f68:	6b 89       	ldd	r22, Y+19	; 0x13
    2f6a:	7c 89       	ldd	r23, Y+20	; 0x14
    2f6c:	8d 89       	ldd	r24, Y+21	; 0x15
    2f6e:	9e 89       	ldd	r25, Y+22	; 0x16
    2f70:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    2f74:	18 16       	cp	r1, r24
    2f76:	4c f5       	brge	.+82     	; 0x2fca <system_init+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	40 e2       	ldi	r20, 0x20	; 32
    2f7e:	51 e4       	ldi	r21, 0x41	; 65
    2f80:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f82:	78 89       	ldd	r23, Y+16	; 0x10
    2f84:	89 89       	ldd	r24, Y+17	; 0x11
    2f86:	9a 89       	ldd	r25, Y+18	; 0x12
    2f88:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	bc 01       	movw	r22, r24
    2f92:	cd 01       	movw	r24, r26
    2f94:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	98 8f       	std	Y+24, r25	; 0x18
    2f9e:	8f 8b       	std	Y+23, r24	; 0x17
    2fa0:	0f c0       	rjmp	.+30     	; 0x2fc0 <system_init+0x1bc>
    2fa2:	8a ef       	ldi	r24, 0xFA	; 250
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	9a 8f       	std	Y+26, r25	; 0x1a
    2fa8:	89 8f       	std	Y+25, r24	; 0x19
    2faa:	89 8d       	ldd	r24, Y+25	; 0x19
    2fac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <system_init+0x1aa>
    2fb2:	9a 8f       	std	Y+26, r25	; 0x1a
    2fb4:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	98 8f       	std	Y+24, r25	; 0x18
    2fbe:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fc4:	89 2b       	or	r24, r25
    2fc6:	69 f7       	brne	.-38     	; 0x2fa2 <system_init+0x19e>
    2fc8:	14 c0       	rjmp	.+40     	; 0x2ff2 <system_init+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fca:	6b 89       	ldd	r22, Y+19	; 0x13
    2fcc:	7c 89       	ldd	r23, Y+20	; 0x14
    2fce:	8d 89       	ldd	r24, Y+21	; 0x15
    2fd0:	9e 89       	ldd	r25, Y+22	; 0x16
    2fd2:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	98 8f       	std	Y+24, r25	; 0x18
    2fdc:	8f 8b       	std	Y+23, r24	; 0x17
    2fde:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe2:	9c 8f       	std	Y+28, r25	; 0x1c
    2fe4:	8b 8f       	std	Y+27, r24	; 0x1b
    2fe6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fe8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <system_init+0x1e6>
    2fee:	9c 8f       	std	Y+28, r25	; 0x1c
    2ff0:	8b 8f       	std	Y+27, r24	; 0x1b

	// small delay
	_delay_ms(100);

	DDRG = 0x01;
    2ff2:	83 e3       	ldi	r24, 0x33	; 51
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	21 e0       	ldi	r18, 0x01	; 1
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	20 83       	st	Z, r18
	PORTG = 0x00;
    2ffc:	84 e3       	ldi	r24, 0x34	; 52
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	fc 01       	movw	r30, r24
    3002:	10 82       	st	Z, r1

	// initing
	timer_init(1000);
    3004:	88 ee       	ldi	r24, 0xE8	; 232
    3006:	93 e0       	ldi	r25, 0x03	; 3
    3008:	0e 94 28 14 	call	0x2850	; 0x2850 <timer_init>
	CAN_Init(1);
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	0e 94 cf 08 	call	0x119e	; 0x119e <CAN_Init>
	UART1_Init(UART1_BAUD, UART_ISR_OFF);
    3012:	40 e0       	ldi	r20, 0x00	; 0
    3014:	60 e8       	ldi	r22, 0x80	; 128
    3016:	75 e2       	ldi	r23, 0x25	; 37
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	0e 94 44 1a 	call	0x3488	; 0x3488 <UART1_Init>
	servo_init(PWM_FREQ);
    3020:	82 e3       	ldi	r24, 0x32	; 50
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	0e 94 c3 00 	call	0x186	; 0x186 <servo_init>
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	aa ef       	ldi	r26, 0xFA	; 250
    302e:	b3 e4       	ldi	r27, 0x43	; 67
    3030:	8d 8f       	std	Y+29, r24	; 0x1d
    3032:	9e 8f       	std	Y+30, r25	; 0x1e
    3034:	af 8f       	std	Y+31, r26	; 0x1f
    3036:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e4       	ldi	r19, 0x40	; 64
    303c:	4c e1       	ldi	r20, 0x1C	; 28
    303e:	55 e4       	ldi	r21, 0x45	; 69
    3040:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3042:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3044:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3046:	98 a1       	ldd	r25, Y+32	; 0x20
    3048:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	89 a3       	std	Y+33, r24	; 0x21
    3052:	9a a3       	std	Y+34, r25	; 0x22
    3054:	ab a3       	std	Y+35, r26	; 0x23
    3056:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e8       	ldi	r20, 0x80	; 128
    305e:	5f e3       	ldi	r21, 0x3F	; 63
    3060:	69 a1       	ldd	r22, Y+33	; 0x21
    3062:	7a a1       	ldd	r23, Y+34	; 0x22
    3064:	8b a1       	ldd	r24, Y+35	; 0x23
    3066:	9c a1       	ldd	r25, Y+36	; 0x24
    3068:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    306c:	88 23       	and	r24, r24
    306e:	2c f4       	brge	.+10     	; 0x307a <system_init+0x276>
		__ticks = 1;
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	9e a3       	std	Y+38, r25	; 0x26
    3076:	8d a3       	std	Y+37, r24	; 0x25
    3078:	3f c0       	rjmp	.+126    	; 0x30f8 <system_init+0x2f4>
	else if (__tmp > 65535)
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	3f ef       	ldi	r19, 0xFF	; 255
    307e:	4f e7       	ldi	r20, 0x7F	; 127
    3080:	57 e4       	ldi	r21, 0x47	; 71
    3082:	69 a1       	ldd	r22, Y+33	; 0x21
    3084:	7a a1       	ldd	r23, Y+34	; 0x22
    3086:	8b a1       	ldd	r24, Y+35	; 0x23
    3088:	9c a1       	ldd	r25, Y+36	; 0x24
    308a:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    308e:	18 16       	cp	r1, r24
    3090:	4c f5       	brge	.+82     	; 0x30e4 <system_init+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	40 e2       	ldi	r20, 0x20	; 32
    3098:	51 e4       	ldi	r21, 0x41	; 65
    309a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    309c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    309e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30a0:	98 a1       	ldd	r25, Y+32	; 0x20
    30a2:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	bc 01       	movw	r22, r24
    30ac:	cd 01       	movw	r24, r26
    30ae:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	9e a3       	std	Y+38, r25	; 0x26
    30b8:	8d a3       	std	Y+37, r24	; 0x25
    30ba:	0f c0       	rjmp	.+30     	; 0x30da <system_init+0x2d6>
    30bc:	8a ef       	ldi	r24, 0xFA	; 250
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	98 a7       	std	Y+40, r25	; 0x28
    30c2:	8f a3       	std	Y+39, r24	; 0x27
    30c4:	8f a1       	ldd	r24, Y+39	; 0x27
    30c6:	98 a5       	ldd	r25, Y+40	; 0x28
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	f1 f7       	brne	.-4      	; 0x30c8 <system_init+0x2c4>
    30cc:	98 a7       	std	Y+40, r25	; 0x28
    30ce:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d0:	8d a1       	ldd	r24, Y+37	; 0x25
    30d2:	9e a1       	ldd	r25, Y+38	; 0x26
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	9e a3       	std	Y+38, r25	; 0x26
    30d8:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30da:	8d a1       	ldd	r24, Y+37	; 0x25
    30dc:	9e a1       	ldd	r25, Y+38	; 0x26
    30de:	89 2b       	or	r24, r25
    30e0:	69 f7       	brne	.-38     	; 0x30bc <system_init+0x2b8>
    30e2:	14 c0       	rjmp	.+40     	; 0x310c <system_init+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e4:	69 a1       	ldd	r22, Y+33	; 0x21
    30e6:	7a a1       	ldd	r23, Y+34	; 0x22
    30e8:	8b a1       	ldd	r24, Y+35	; 0x23
    30ea:	9c a1       	ldd	r25, Y+36	; 0x24
    30ec:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	9e a3       	std	Y+38, r25	; 0x26
    30f6:	8d a3       	std	Y+37, r24	; 0x25
    30f8:	8d a1       	ldd	r24, Y+37	; 0x25
    30fa:	9e a1       	ldd	r25, Y+38	; 0x26
    30fc:	9a a7       	std	Y+42, r25	; 0x2a
    30fe:	89 a7       	std	Y+41, r24	; 0x29
    3100:	89 a5       	ldd	r24, Y+41	; 0x29
    3102:	9a a5       	ldd	r25, Y+42	; 0x2a
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <system_init+0x300>
    3108:	9a a7       	std	Y+42, r25	; 0x2a
    310a:	89 a7       	std	Y+41, r24	; 0x29

	_delay_ms(500);

	system_setup_jumper();
    310c:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <system_setup_jumper>
	//ping_actuator();

	//detection_setup();
	//debug_init();

	setup_complete = true;
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	80 93 6f 01 	sts	0x016F, r24

	PORTG = 0x01;
    3116:	84 e3       	ldi	r24, 0x34	; 52
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	21 e0       	ldi	r18, 0x01	; 1
    311c:	fc 01       	movw	r30, r24
    311e:	20 83       	st	Z, r18

	// waiting for jumper
	//system_wait_for_jumper();

	PORTG = 0x00;
    3120:	84 e3       	ldi	r24, 0x34	; 52
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	fc 01       	movw	r30, r24
    3126:	10 82       	st	Z, r1

	system_reset_system_time();															// reset system time
    3128:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <system_reset_system_time>
	system_set_match_started();															// match has started!
    312c:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <system_set_match_started>

}
    3130:	aa 96       	adiw	r28, 0x2a	; 42
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	f8 94       	cli
    3136:	de bf       	out	0x3e, r29	; 62
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	cd bf       	out	0x3d, r28	; 61
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	08 95       	ret

00003142 <UART0_Init>:
* Parameters        : unsigned int baud
					  char isrOnOff
* Return Value      : void
*********************************************************************************/
void UART0_Init(unsigned long baud, char isrOnOff)
{
    3142:	cf 93       	push	r28
    3144:	df 93       	push	r29
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	27 97       	sbiw	r28, 0x07	; 7
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	de bf       	out	0x3e, r29	; 62
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	cd bf       	out	0x3d, r28	; 61
    3156:	6b 83       	std	Y+3, r22	; 0x03
    3158:	7c 83       	std	Y+4, r23	; 0x04
    315a:	8d 83       	std	Y+5, r24	; 0x05
    315c:	9e 83       	std	Y+6, r25	; 0x06
    315e:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR0A = 0;
    3160:	80 ec       	ldi	r24, 0xC0	; 192
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	fc 01       	movw	r30, r24
    3166:	10 82       	st	Z, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    3168:	81 ec       	ldi	r24, 0xC1	; 193
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	28 e1       	ldi	r18, 0x18	; 24
    316e:	fc 01       	movw	r30, r24
    3170:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    3172:	82 ec       	ldi	r24, 0xC2	; 194
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	26 e0       	ldi	r18, 0x06	; 6
    3178:	fc 01       	movw	r30, r24
    317a:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    317c:	8f 81       	ldd	r24, Y+7	; 0x07
    317e:	81 30       	cpi	r24, 0x01	; 1
    3180:	91 f4       	brne	.+36     	; 0x31a6 <UART0_Init+0x64>
	{
		UCSR0B |= ((1 << RXCIE0) | (1 << TXCIE0));
    3182:	81 ec       	ldi	r24, 0xC1	; 193
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	21 ec       	ldi	r18, 0xC1	; 193
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	f9 01       	movw	r30, r18
    318c:	20 81       	ld	r18, Z
    318e:	20 6c       	ori	r18, 0xC0	; 192
    3190:	fc 01       	movw	r30, r24
    3192:	20 83       	st	Z, r18
		SREG |= 0x80;
    3194:	8f e5       	ldi	r24, 0x5F	; 95
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	2f e5       	ldi	r18, 0x5F	; 95
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	f9 01       	movw	r30, r18
    319e:	20 81       	ld	r18, Z
    31a0:	20 68       	ori	r18, 0x80	; 128
    31a2:	fc 01       	movw	r30, r24
    31a4:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    31a6:	6b 81       	ldd	r22, Y+3	; 0x03
    31a8:	7c 81       	ldd	r23, Y+4	; 0x04
    31aa:	8d 81       	ldd	r24, Y+5	; 0x05
    31ac:	9e 81       	ldd	r25, Y+6	; 0x06
    31ae:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatunsisf>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e8       	ldi	r20, 0x80	; 128
    31bc:	51 e4       	ldi	r21, 0x41	; 65
    31be:	bc 01       	movw	r22, r24
    31c0:	cd 01       	movw	r24, r26
    31c2:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	9c 01       	movw	r18, r24
    31cc:	ad 01       	movw	r20, r26
    31ce:	60 e8       	ldi	r22, 0x80	; 128
    31d0:	76 e9       	ldi	r23, 0x96	; 150
    31d2:	88 e1       	ldi	r24, 0x18	; 24
    31d4:	9b e4       	ldi	r25, 0x4B	; 75
    31d6:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__divsf3>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e8       	ldi	r20, 0x80	; 128
    31e4:	5f e3       	ldi	r21, 0x3F	; 63
    31e6:	bc 01       	movw	r22, r24
    31e8:	cd 01       	movw	r24, r26
    31ea:	0e 94 77 20 	call	0x40ee	; 0x40ee <__subsf3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	40 e0       	ldi	r20, 0x00	; 0
    31f8:	5f e3       	ldi	r21, 0x3F	; 63
    31fa:	bc 01       	movw	r22, r24
    31fc:	cd 01       	movw	r24, r26
    31fe:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__addsf3>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	bc 01       	movw	r22, r24
    3208:	cd 01       	movw	r24, r26
    320a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9a 83       	std	Y+2, r25	; 0x02
    3214:	89 83       	std	Y+1, r24	; 0x01

	UBRR0H = temp >> 8;
    3216:	85 ec       	ldi	r24, 0xC5	; 197
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	29 81       	ldd	r18, Y+1	; 0x01
    321c:	3a 81       	ldd	r19, Y+2	; 0x02
    321e:	23 2f       	mov	r18, r19
    3220:	33 27       	eor	r19, r19
    3222:	fc 01       	movw	r30, r24
    3224:	20 83       	st	Z, r18
	UBRR0L = temp;
    3226:	84 ec       	ldi	r24, 0xC4	; 196
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	29 81       	ldd	r18, Y+1	; 0x01
    322c:	fc 01       	movw	r30, r24
    322e:	20 83       	st	Z, r18
}
    3230:	27 96       	adiw	r28, 0x07	; 7
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	f8 94       	cli
    3236:	de bf       	out	0x3e, r29	; 62
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	cd bf       	out	0x3d, r28	; 61
    323c:	df 91       	pop	r29
    323e:	cf 91       	pop	r28
    3240:	08 95       	ret

00003242 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    3242:	1f 92       	push	r1
    3244:	0f 92       	push	r0
    3246:	00 90 5f 00 	lds	r0, 0x005F
    324a:	0f 92       	push	r0
    324c:	11 24       	eor	r1, r1
    324e:	00 90 5b 00 	lds	r0, 0x005B
    3252:	0f 92       	push	r0
    3254:	2f 93       	push	r18
    3256:	3f 93       	push	r19
    3258:	8f 93       	push	r24
    325a:	9f 93       	push	r25
    325c:	ef 93       	push	r30
    325e:	ff 93       	push	r31
    3260:	cf 93       	push	r28
    3262:	df 93       	push	r29
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    3268:	80 91 b1 01 	lds	r24, 0x01B1
    326c:	88 23       	and	r24, r24
    326e:	d1 f0       	breq	.+52     	; 0x32a4 <__vector_23+0x62>
	{
		tx0_counter--;
    3270:	80 91 b1 01 	lds	r24, 0x01B1
    3274:	81 50       	subi	r24, 0x01	; 1
    3276:	80 93 b1 01 	sts	0x01B1, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    327a:	86 ec       	ldi	r24, 0xC6	; 198
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	20 91 b2 01 	lds	r18, 0x01B2
    3282:	22 2f       	mov	r18, r18
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	20 59       	subi	r18, 0x90	; 144
    3288:	3e 4f       	sbci	r19, 0xFE	; 254
    328a:	f9 01       	movw	r30, r18
    328c:	20 81       	ld	r18, Z
    328e:	fc 01       	movw	r30, r24
    3290:	20 83       	st	Z, r18
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    3292:	80 91 b2 01 	lds	r24, 0x01B2
    3296:	8f 5f       	subi	r24, 0xFF	; 255
    3298:	80 93 b2 01 	sts	0x01B2, r24
    329c:	80 34       	cpi	r24, 0x40	; 64
    329e:	11 f4       	brne	.+4      	; 0x32a4 <__vector_23+0x62>
			tx0_rd_index = 0;
    32a0:	10 92 b2 01 	sts	0x01B2, r1
	}
}
    32a4:	df 91       	pop	r29
    32a6:	cf 91       	pop	r28
    32a8:	ff 91       	pop	r31
    32aa:	ef 91       	pop	r30
    32ac:	9f 91       	pop	r25
    32ae:	8f 91       	pop	r24
    32b0:	3f 91       	pop	r19
    32b2:	2f 91       	pop	r18
    32b4:	0f 90       	pop	r0
    32b6:	00 92 5b 00 	sts	0x005B, r0
    32ba:	0f 90       	pop	r0
    32bc:	00 92 5f 00 	sts	0x005F, r0
    32c0:	0f 90       	pop	r0
    32c2:	1f 90       	pop	r1
    32c4:	18 95       	reti

000032c6 <UART0_Write>:
/****************************************************************************************************************************************
Slanje podataka USART0 modulom
****************************************************************************************************************************************/

void UART0_Write(unsigned char data)
{
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	1f 92       	push	r1
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
    32d0:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR0B >> TXCIE0) & 0x01)
    32d2:	81 ec       	ldi	r24, 0xC1	; 193
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	fc 01       	movw	r30, r24
    32d8:	80 81       	ld	r24, Z
    32da:	82 95       	swap	r24
    32dc:	86 95       	lsr	r24
    32de:	86 95       	lsr	r24
    32e0:	83 70       	andi	r24, 0x03	; 3
    32e2:	88 2f       	mov	r24, r24
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	81 70       	andi	r24, 0x01	; 1
    32e8:	99 27       	eor	r25, r25
    32ea:	89 2b       	or	r24, r25
    32ec:	99 f1       	breq	.+102    	; 0x3354 <UART0_Write+0x8e>
	{
		while(tx0_counter == TX0_BUFFER_SIZE);
    32ee:	00 00       	nop
    32f0:	80 91 b1 01 	lds	r24, 0x01B1
    32f4:	80 34       	cpi	r24, 0x40	; 64
    32f6:	e1 f3       	breq	.-8      	; 0x32f0 <UART0_Write+0x2a>

		cli();
    32f8:	f8 94       	cli

		if(tx0_counter || (UCSR0A & 0x20) == 0)
    32fa:	80 91 b1 01 	lds	r24, 0x01B1
    32fe:	88 23       	and	r24, r24
    3300:	51 f4       	brne	.+20     	; 0x3316 <UART0_Write+0x50>
    3302:	80 ec       	ldi	r24, 0xC0	; 192
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	fc 01       	movw	r30, r24
    3308:	80 81       	ld	r24, Z
    330a:	88 2f       	mov	r24, r24
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	80 72       	andi	r24, 0x20	; 32
    3310:	99 27       	eor	r25, r25
    3312:	89 2b       	or	r24, r25
    3314:	c1 f4       	brne	.+48     	; 0x3346 <UART0_Write+0x80>
		{
			tx0_buffer[tx0_wr_index] = data;
    3316:	80 91 b0 01 	lds	r24, 0x01B0
    331a:	88 2f       	mov	r24, r24
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	80 59       	subi	r24, 0x90	; 144
    3320:	9e 4f       	sbci	r25, 0xFE	; 254
    3322:	29 81       	ldd	r18, Y+1	; 0x01
    3324:	fc 01       	movw	r30, r24
    3326:	20 83       	st	Z, r18
			if(++tx0_wr_index == TX0_BUFFER_SIZE)
    3328:	80 91 b0 01 	lds	r24, 0x01B0
    332c:	8f 5f       	subi	r24, 0xFF	; 255
    332e:	80 93 b0 01 	sts	0x01B0, r24
    3332:	80 34       	cpi	r24, 0x40	; 64
    3334:	11 f4       	brne	.+4      	; 0x333a <UART0_Write+0x74>
				tx0_wr_index = 0;
    3336:	10 92 b0 01 	sts	0x01B0, r1

			tx0_counter++;
    333a:	80 91 b1 01 	lds	r24, 0x01B1
    333e:	8f 5f       	subi	r24, 0xFF	; 255
    3340:	80 93 b1 01 	sts	0x01B1, r24
    3344:	05 c0       	rjmp	.+10     	; 0x3350 <UART0_Write+0x8a>
		}
		else
			UDR0 = data;
    3346:	86 ec       	ldi	r24, 0xC6	; 198
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	29 81       	ldd	r18, Y+1	; 0x01
    334c:	fc 01       	movw	r30, r24
    334e:	20 83       	st	Z, r18

		sei();
    3350:	78 94       	sei
    3352:	03 c0       	rjmp	.+6      	; 0x335a <UART0_Write+0x94>
	}
	else
		altUart0Write(data);
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <altUart0Write>
}
    335a:	0f 90       	pop	r0
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	08 95       	ret

00003362 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    3362:	1f 92       	push	r1
    3364:	0f 92       	push	r0
    3366:	00 90 5f 00 	lds	r0, 0x005F
    336a:	0f 92       	push	r0
    336c:	11 24       	eor	r1, r1
    336e:	00 90 5b 00 	lds	r0, 0x005B
    3372:	0f 92       	push	r0
    3374:	2f 93       	push	r18
    3376:	3f 93       	push	r19
    3378:	8f 93       	push	r24
    337a:	9f 93       	push	r25
    337c:	ef 93       	push	r30
    337e:	ff 93       	push	r31
    3380:	cf 93       	push	r28
    3382:	df 93       	push	r29
    3384:	1f 92       	push	r1
    3386:	cd b7       	in	r28, 0x3d	; 61
    3388:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    338a:	80 ec       	ldi	r24, 0xC0	; 192
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	fc 01       	movw	r30, r24
    3390:	80 81       	ld	r24, Z
    3392:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	88 2f       	mov	r24, r24
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	8c 71       	andi	r24, 0x1C	; 28
    339c:	99 27       	eor	r25, r25
    339e:	89 2b       	or	r24, r25
    33a0:	d1 f4       	brne	.+52     	; 0x33d6 <__vector_21+0x74>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    33a2:	80 91 f3 01 	lds	r24, 0x01F3
    33a6:	88 2f       	mov	r24, r24
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	26 ec       	ldi	r18, 0xC6	; 198
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	f9 01       	movw	r30, r18
    33b0:	20 81       	ld	r18, Z
    33b2:	8d 54       	subi	r24, 0x4D	; 77
    33b4:	9e 4f       	sbci	r25, 0xFE	; 254
    33b6:	fc 01       	movw	r30, r24
    33b8:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    33ba:	80 91 f3 01 	lds	r24, 0x01F3
    33be:	8f 5f       	subi	r24, 0xFF	; 255
    33c0:	80 93 f3 01 	sts	0x01F3, r24
    33c4:	80 34       	cpi	r24, 0x40	; 64
    33c6:	11 f4       	brne	.+4      	; 0x33cc <__vector_21+0x6a>
			rx0_wr_index = 0;
    33c8:	10 92 f3 01 	sts	0x01F3, r1

		rx0_counter++;
    33cc:	80 91 f4 01 	lds	r24, 0x01F4
    33d0:	8f 5f       	subi	r24, 0xFF	; 255
    33d2:	80 93 f4 01 	sts	0x01F4, r24
	}
}
    33d6:	0f 90       	pop	r0
    33d8:	df 91       	pop	r29
    33da:	cf 91       	pop	r28
    33dc:	ff 91       	pop	r31
    33de:	ef 91       	pop	r30
    33e0:	9f 91       	pop	r25
    33e2:	8f 91       	pop	r24
    33e4:	3f 91       	pop	r19
    33e6:	2f 91       	pop	r18
    33e8:	0f 90       	pop	r0
    33ea:	00 92 5b 00 	sts	0x005B, r0
    33ee:	0f 90       	pop	r0
    33f0:	00 92 5f 00 	sts	0x005F, r0
    33f4:	0f 90       	pop	r0
    33f6:	1f 90       	pop	r1
    33f8:	18 95       	reti

000033fa <UART0_Read>:
/****************************************************************************************************************************************
Primanje podataka USART0 modulom
****************************************************************************************************************************************/

unsigned char UART0_Read(void)
{
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	1f 92       	push	r1
    3400:	cd b7       	in	r28, 0x3d	; 61
    3402:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR0B >> RXCIE0) & 0x01)
    3404:	81 ec       	ldi	r24, 0xC1	; 193
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	fc 01       	movw	r30, r24
    340a:	80 81       	ld	r24, Z
    340c:	88 1f       	adc	r24, r24
    340e:	88 27       	eor	r24, r24
    3410:	88 1f       	adc	r24, r24
    3412:	88 2f       	mov	r24, r24
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	81 70       	andi	r24, 0x01	; 1
    3418:	99 27       	eor	r25, r25
    341a:	89 2b       	or	r24, r25
    341c:	e9 f0       	breq	.+58     	; 0x3458 <UART0_Read+0x5e>
	{
		while(rx0_counter == 0);
    341e:	00 00       	nop
    3420:	80 91 f4 01 	lds	r24, 0x01F4
    3424:	88 23       	and	r24, r24
    3426:	e1 f3       	breq	.-8      	; 0x3420 <UART0_Read+0x26>

		data = rx0_buffer[rx0_rd_index];
    3428:	80 91 f5 01 	lds	r24, 0x01F5
    342c:	88 2f       	mov	r24, r24
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	8d 54       	subi	r24, 0x4D	; 77
    3432:	9e 4f       	sbci	r25, 0xFE	; 254
    3434:	fc 01       	movw	r30, r24
    3436:	80 81       	ld	r24, Z
    3438:	89 83       	std	Y+1, r24	; 0x01

		if(++rx0_rd_index == RX0_BUFFER_SIZE)
    343a:	80 91 f5 01 	lds	r24, 0x01F5
    343e:	8f 5f       	subi	r24, 0xFF	; 255
    3440:	80 93 f5 01 	sts	0x01F5, r24
    3444:	80 34       	cpi	r24, 0x40	; 64
    3446:	11 f4       	brne	.+4      	; 0x344c <UART0_Read+0x52>
			rx0_rd_index = 0;
    3448:	10 92 f5 01 	sts	0x01F5, r1

		rx0_counter--;
    344c:	80 91 f4 01 	lds	r24, 0x01F4
    3450:	81 50       	subi	r24, 0x01	; 1
    3452:	80 93 f4 01 	sts	0x01F4, r24
    3456:	13 c0       	rjmp	.+38     	; 0x347e <UART0_Read+0x84>
	}
	else
	{
		while( !((UCSR0A >> RXC0) & 0x01));
    3458:	00 00       	nop
    345a:	80 ec       	ldi	r24, 0xC0	; 192
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	fc 01       	movw	r30, r24
    3460:	80 81       	ld	r24, Z
    3462:	88 1f       	adc	r24, r24
    3464:	88 27       	eor	r24, r24
    3466:	88 1f       	adc	r24, r24
    3468:	88 2f       	mov	r24, r24
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	81 70       	andi	r24, 0x01	; 1
    346e:	99 27       	eor	r25, r25
    3470:	89 2b       	or	r24, r25
    3472:	99 f3       	breq	.-26     	; 0x345a <UART0_Read+0x60>
		data = UDR0;
    3474:	86 ec       	ldi	r24, 0xC6	; 198
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	fc 01       	movw	r30, r24
    347a:	80 81       	ld	r24, Z
    347c:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    347e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3480:	0f 90       	pop	r0
    3482:	df 91       	pop	r29
    3484:	cf 91       	pop	r28
    3486:	08 95       	ret

00003488 <UART1_Init>:
-bez paritet
-9600baud
-asynchron
****************************************************************************************************************************************/
void UART1_Init(unsigned long baud, char isrOnOff)
{
    3488:	cf 93       	push	r28
    348a:	df 93       	push	r29
    348c:	cd b7       	in	r28, 0x3d	; 61
    348e:	de b7       	in	r29, 0x3e	; 62
    3490:	27 97       	sbiw	r28, 0x07	; 7
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	f8 94       	cli
    3496:	de bf       	out	0x3e, r29	; 62
    3498:	0f be       	out	0x3f, r0	; 63
    349a:	cd bf       	out	0x3d, r28	; 61
    349c:	6b 83       	std	Y+3, r22	; 0x03
    349e:	7c 83       	std	Y+4, r23	; 0x04
    34a0:	8d 83       	std	Y+5, r24	; 0x05
    34a2:	9e 83       	std	Y+6, r25	; 0x06
    34a4:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
    34a6:	88 ec       	ldi	r24, 0xC8	; 200
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	fc 01       	movw	r30, r24
    34ac:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
    34ae:	89 ec       	ldi	r24, 0xC9	; 201
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	28 e1       	ldi	r18, 0x18	; 24
    34b4:	fc 01       	movw	r30, r24
    34b6:	20 83       	st	Z, r18


	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); //sa 1stop bit
    34b8:	8a ec       	ldi	r24, 0xCA	; 202
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	26 e0       	ldi	r18, 0x06	; 6
    34be:	fc 01       	movw	r30, r24
    34c0:	20 83       	st	Z, r18


	if(isrOnOff == UART_ISR_ON)
    34c2:	8f 81       	ldd	r24, Y+7	; 0x07
    34c4:	81 30       	cpi	r24, 0x01	; 1
    34c6:	91 f4       	brne	.+36     	; 0x34ec <UART1_Init+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
    34c8:	89 ec       	ldi	r24, 0xC9	; 201
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	29 ec       	ldi	r18, 0xC9	; 201
    34ce:	30 e0       	ldi	r19, 0x00	; 0
    34d0:	f9 01       	movw	r30, r18
    34d2:	20 81       	ld	r18, Z
    34d4:	20 6c       	ori	r18, 0xC0	; 192
    34d6:	fc 01       	movw	r30, r24
    34d8:	20 83       	st	Z, r18
		SREG |= 0x80;
    34da:	8f e5       	ldi	r24, 0x5F	; 95
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	2f e5       	ldi	r18, 0x5F	; 95
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	f9 01       	movw	r30, r18
    34e4:	20 81       	ld	r18, Z
    34e6:	20 68       	ori	r18, 0x80	; 128
    34e8:	fc 01       	movw	r30, r24
    34ea:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    34ec:	6b 81       	ldd	r22, Y+3	; 0x03
    34ee:	7c 81       	ldd	r23, Y+4	; 0x04
    34f0:	8d 81       	ldd	r24, Y+5	; 0x05
    34f2:	9e 81       	ldd	r25, Y+6	; 0x06
    34f4:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatunsisf>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	40 e8       	ldi	r20, 0x80	; 128
    3502:	51 e4       	ldi	r21, 0x41	; 65
    3504:	bc 01       	movw	r22, r24
    3506:	cd 01       	movw	r24, r26
    3508:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	9c 01       	movw	r18, r24
    3512:	ad 01       	movw	r20, r26
    3514:	60 e8       	ldi	r22, 0x80	; 128
    3516:	76 e9       	ldi	r23, 0x96	; 150
    3518:	88 e1       	ldi	r24, 0x18	; 24
    351a:	9b e4       	ldi	r25, 0x4B	; 75
    351c:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <__divsf3>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e8       	ldi	r20, 0x80	; 128
    352a:	5f e3       	ldi	r21, 0x3F	; 63
    352c:	bc 01       	movw	r22, r24
    352e:	cd 01       	movw	r24, r26
    3530:	0e 94 77 20 	call	0x40ee	; 0x40ee <__subsf3>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	40 e0       	ldi	r20, 0x00	; 0
    353e:	5f e3       	ldi	r21, 0x3F	; 63
    3540:	bc 01       	movw	r22, r24
    3542:	cd 01       	movw	r24, r26
    3544:	0e 94 78 20 	call	0x40f0	; 0x40f0 <__addsf3>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	bc 01       	movw	r22, r24
    354e:	cd 01       	movw	r24, r26
    3550:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	9a 83       	std	Y+2, r25	; 0x02
    355a:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
    355c:	8d ec       	ldi	r24, 0xCD	; 205
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	29 81       	ldd	r18, Y+1	; 0x01
    3562:	3a 81       	ldd	r19, Y+2	; 0x02
    3564:	23 2f       	mov	r18, r19
    3566:	33 27       	eor	r19, r19
    3568:	fc 01       	movw	r30, r24
    356a:	20 83       	st	Z, r18
	UBRR1L = temp;
    356c:	8c ec       	ldi	r24, 0xCC	; 204
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	29 81       	ldd	r18, Y+1	; 0x01
    3572:	fc 01       	movw	r30, r24
    3574:	20 83       	st	Z, r18
}
    3576:	27 96       	adiw	r28, 0x07	; 7
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	df 91       	pop	r29
    3584:	cf 91       	pop	r28
    3586:	08 95       	ret

00003588 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    3588:	1f 92       	push	r1
    358a:	0f 92       	push	r0
    358c:	00 90 5f 00 	lds	r0, 0x005F
    3590:	0f 92       	push	r0
    3592:	11 24       	eor	r1, r1
    3594:	00 90 5b 00 	lds	r0, 0x005B
    3598:	0f 92       	push	r0
    359a:	2f 93       	push	r18
    359c:	3f 93       	push	r19
    359e:	8f 93       	push	r24
    35a0:	9f 93       	push	r25
    35a2:	ef 93       	push	r30
    35a4:	ff 93       	push	r31
    35a6:	cf 93       	push	r28
    35a8:	df 93       	push	r29
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    35ae:	80 91 37 02 	lds	r24, 0x0237
    35b2:	88 23       	and	r24, r24
    35b4:	d1 f0       	breq	.+52     	; 0x35ea <__vector_34+0x62>
	{
		tx1_counter--;
    35b6:	80 91 37 02 	lds	r24, 0x0237
    35ba:	81 50       	subi	r24, 0x01	; 1
    35bc:	80 93 37 02 	sts	0x0237, r24
		UDR1=tx1_buffer[tx1_rd_index];
    35c0:	8e ec       	ldi	r24, 0xCE	; 206
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	20 91 38 02 	lds	r18, 0x0238
    35c8:	22 2f       	mov	r18, r18
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	2a 50       	subi	r18, 0x0A	; 10
    35ce:	3e 4f       	sbci	r19, 0xFE	; 254
    35d0:	f9 01       	movw	r30, r18
    35d2:	20 81       	ld	r18, Z
    35d4:	fc 01       	movw	r30, r24
    35d6:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    35d8:	80 91 38 02 	lds	r24, 0x0238
    35dc:	8f 5f       	subi	r24, 0xFF	; 255
    35de:	80 93 38 02 	sts	0x0238, r24
    35e2:	80 34       	cpi	r24, 0x40	; 64
    35e4:	11 f4       	brne	.+4      	; 0x35ea <__vector_34+0x62>
			tx1_rd_index = 0;
    35e6:	10 92 38 02 	sts	0x0238, r1
	}
}
    35ea:	df 91       	pop	r29
    35ec:	cf 91       	pop	r28
    35ee:	ff 91       	pop	r31
    35f0:	ef 91       	pop	r30
    35f2:	9f 91       	pop	r25
    35f4:	8f 91       	pop	r24
    35f6:	3f 91       	pop	r19
    35f8:	2f 91       	pop	r18
    35fa:	0f 90       	pop	r0
    35fc:	00 92 5b 00 	sts	0x005B, r0
    3600:	0f 90       	pop	r0
    3602:	00 92 5f 00 	sts	0x005F, r0
    3606:	0f 90       	pop	r0
    3608:	1f 90       	pop	r1
    360a:	18 95       	reti

0000360c <__vector_32>:

ISR(USART1_RX_vect)
{
    360c:	1f 92       	push	r1
    360e:	0f 92       	push	r0
    3610:	00 90 5f 00 	lds	r0, 0x005F
    3614:	0f 92       	push	r0
    3616:	11 24       	eor	r1, r1
    3618:	00 90 5b 00 	lds	r0, 0x005B
    361c:	0f 92       	push	r0
    361e:	2f 93       	push	r18
    3620:	3f 93       	push	r19
    3622:	8f 93       	push	r24
    3624:	9f 93       	push	r25
    3626:	ef 93       	push	r30
    3628:	ff 93       	push	r31
    362a:	cf 93       	push	r28
    362c:	df 93       	push	r29
    362e:	1f 92       	push	r1
    3630:	cd b7       	in	r28, 0x3d	; 61
    3632:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    3634:	88 ec       	ldi	r24, 0xC8	; 200
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	fc 01       	movw	r30, r24
    363a:	80 81       	ld	r24, Z
    363c:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	88 2f       	mov	r24, r24
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	8c 71       	andi	r24, 0x1C	; 28
    3646:	99 27       	eor	r25, r25
    3648:	89 2b       	or	r24, r25
    364a:	d1 f4       	brne	.+52     	; 0x3680 <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    364c:	80 91 79 02 	lds	r24, 0x0279
    3650:	88 2f       	mov	r24, r24
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	2e ec       	ldi	r18, 0xCE	; 206
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	f9 01       	movw	r30, r18
    365a:	20 81       	ld	r18, Z
    365c:	87 5c       	subi	r24, 0xC7	; 199
    365e:	9d 4f       	sbci	r25, 0xFD	; 253
    3660:	fc 01       	movw	r30, r24
    3662:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    3664:	80 91 79 02 	lds	r24, 0x0279
    3668:	8f 5f       	subi	r24, 0xFF	; 255
    366a:	80 93 79 02 	sts	0x0279, r24
    366e:	80 34       	cpi	r24, 0x40	; 64
    3670:	11 f4       	brne	.+4      	; 0x3676 <__vector_32+0x6a>
		rx1_wr_index = 0;
    3672:	10 92 79 02 	sts	0x0279, r1

		rx1_counter++;
    3676:	80 91 7a 02 	lds	r24, 0x027A
    367a:	8f 5f       	subi	r24, 0xFF	; 255
    367c:	80 93 7a 02 	sts	0x027A, r24
	}
}
    3680:	0f 90       	pop	r0
    3682:	df 91       	pop	r29
    3684:	cf 91       	pop	r28
    3686:	ff 91       	pop	r31
    3688:	ef 91       	pop	r30
    368a:	9f 91       	pop	r25
    368c:	8f 91       	pop	r24
    368e:	3f 91       	pop	r19
    3690:	2f 91       	pop	r18
    3692:	0f 90       	pop	r0
    3694:	00 92 5b 00 	sts	0x005B, r0
    3698:	0f 90       	pop	r0
    369a:	00 92 5f 00 	sts	0x005F, r0
    369e:	0f 90       	pop	r0
    36a0:	1f 90       	pop	r1
    36a2:	18 95       	reti

000036a4 <altUart0Write>:

void altUart0Write(unsigned char data)
{
    36a4:	cf 93       	push	r28
    36a6:	df 93       	push	r29
    36a8:	1f 92       	push	r1
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
    36ae:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
    36b0:	00 00       	nop
    36b2:	80 ec       	ldi	r24, 0xC0	; 192
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	fc 01       	movw	r30, r24
    36b8:	80 81       	ld	r24, Z
    36ba:	88 2f       	mov	r24, r24
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	80 72       	andi	r24, 0x20	; 32
    36c0:	99 27       	eor	r25, r25
    36c2:	89 2b       	or	r24, r25
    36c4:	b1 f3       	breq	.-20     	; 0x36b2 <altUart0Write+0xe>

	UDR0 = data;
    36c6:	86 ec       	ldi	r24, 0xC6	; 198
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	29 81       	ldd	r18, Y+1	; 0x01
    36cc:	fc 01       	movw	r30, r24
    36ce:	20 83       	st	Z, r18
}
    36d0:	0f 90       	pop	r0
    36d2:	df 91       	pop	r29
    36d4:	cf 91       	pop	r28
    36d6:	08 95       	ret

000036d8 <altUart1Write>:

void altUart1Write(unsigned char data)
{
    36d8:	cf 93       	push	r28
    36da:	df 93       	push	r29
    36dc:	1f 92       	push	r1
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
    36e4:	00 00       	nop
    36e6:	88 ec       	ldi	r24, 0xC8	; 200
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	fc 01       	movw	r30, r24
    36ec:	80 81       	ld	r24, Z
    36ee:	88 2f       	mov	r24, r24
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	80 72       	andi	r24, 0x20	; 32
    36f4:	99 27       	eor	r25, r25
    36f6:	89 2b       	or	r24, r25
    36f8:	b1 f3       	breq	.-20     	; 0x36e6 <altUart1Write+0xe>
	UDR1 = data;
    36fa:	8e ec       	ldi	r24, 0xCE	; 206
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	29 81       	ldd	r18, Y+1	; 0x01
    3700:	fc 01       	movw	r30, r24
    3702:	20 83       	st	Z, r18
}
    3704:	0f 90       	pop	r0
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	08 95       	ret

0000370c <UART1_Write>:
Slanje podataka USART1 modulom
**
**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
    370c:	cf 93       	push	r28
    370e:	df 93       	push	r29
    3710:	1f 92       	push	r1
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
    3718:	89 ec       	ldi	r24, 0xC9	; 201
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	fc 01       	movw	r30, r24
    371e:	80 81       	ld	r24, Z
    3720:	82 95       	swap	r24
    3722:	86 95       	lsr	r24
    3724:	86 95       	lsr	r24
    3726:	83 70       	andi	r24, 0x03	; 3
    3728:	88 2f       	mov	r24, r24
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	81 70       	andi	r24, 0x01	; 1
    372e:	99 27       	eor	r25, r25
    3730:	89 2b       	or	r24, r25
    3732:	99 f1       	breq	.+102    	; 0x379a <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
    3734:	00 00       	nop
    3736:	80 91 37 02 	lds	r24, 0x0237
    373a:	80 34       	cpi	r24, 0x40	; 64
    373c:	e1 f3       	breq	.-8      	; 0x3736 <UART1_Write+0x2a>

		cli();
    373e:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
    3740:	80 91 37 02 	lds	r24, 0x0237
    3744:	88 23       	and	r24, r24
    3746:	51 f4       	brne	.+20     	; 0x375c <UART1_Write+0x50>
    3748:	88 ec       	ldi	r24, 0xC8	; 200
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	fc 01       	movw	r30, r24
    374e:	80 81       	ld	r24, Z
    3750:	88 2f       	mov	r24, r24
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	80 72       	andi	r24, 0x20	; 32
    3756:	99 27       	eor	r25, r25
    3758:	89 2b       	or	r24, r25
    375a:	c1 f4       	brne	.+48     	; 0x378c <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
    375c:	80 91 36 02 	lds	r24, 0x0236
    3760:	88 2f       	mov	r24, r24
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	8a 50       	subi	r24, 0x0A	; 10
    3766:	9e 4f       	sbci	r25, 0xFE	; 254
    3768:	29 81       	ldd	r18, Y+1	; 0x01
    376a:	fc 01       	movw	r30, r24
    376c:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
    376e:	80 91 36 02 	lds	r24, 0x0236
    3772:	8f 5f       	subi	r24, 0xFF	; 255
    3774:	80 93 36 02 	sts	0x0236, r24
    3778:	80 34       	cpi	r24, 0x40	; 64
    377a:	11 f4       	brne	.+4      	; 0x3780 <UART1_Write+0x74>
				tx1_wr_index = 0;
    377c:	10 92 36 02 	sts	0x0236, r1

			tx1_counter++;
    3780:	80 91 37 02 	lds	r24, 0x0237
    3784:	8f 5f       	subi	r24, 0xFF	; 255
    3786:	80 93 37 02 	sts	0x0237, r24
    378a:	05 c0       	rjmp	.+10     	; 0x3796 <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
    378c:	8e ec       	ldi	r24, 0xCE	; 206
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	29 81       	ldd	r18, Y+1	; 0x01
    3792:	fc 01       	movw	r30, r24
    3794:	20 83       	st	Z, r18

		sei();
    3796:	78 94       	sei
    3798:	03 c0       	rjmp	.+6      	; 0x37a0 <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <altUart1Write>
}
    37a0:	0f 90       	pop	r0
    37a2:	df 91       	pop	r29
    37a4:	cf 91       	pop	r28
    37a6:	08 95       	ret

000037a8 <UART1_Read>:

unsigned char UART1_Read(void)
{
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	1f 92       	push	r1
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
    37b2:	89 ec       	ldi	r24, 0xC9	; 201
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	fc 01       	movw	r30, r24
    37b8:	80 81       	ld	r24, Z
    37ba:	88 1f       	adc	r24, r24
    37bc:	88 27       	eor	r24, r24
    37be:	88 1f       	adc	r24, r24
    37c0:	88 2f       	mov	r24, r24
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	81 70       	andi	r24, 0x01	; 1
    37c6:	99 27       	eor	r25, r25
    37c8:	89 2b       	or	r24, r25
    37ca:	e9 f0       	breq	.+58     	; 0x3806 <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
    37cc:	00 00       	nop
    37ce:	80 91 7a 02 	lds	r24, 0x027A
    37d2:	88 23       	and	r24, r24
    37d4:	e1 f3       	breq	.-8      	; 0x37ce <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
    37d6:	80 91 7b 02 	lds	r24, 0x027B
    37da:	88 2f       	mov	r24, r24
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	87 5c       	subi	r24, 0xC7	; 199
    37e0:	9d 4f       	sbci	r25, 0xFD	; 253
    37e2:	fc 01       	movw	r30, r24
    37e4:	80 81       	ld	r24, Z
    37e6:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
    37e8:	80 91 7b 02 	lds	r24, 0x027B
    37ec:	8f 5f       	subi	r24, 0xFF	; 255
    37ee:	80 93 7b 02 	sts	0x027B, r24
    37f2:	80 34       	cpi	r24, 0x40	; 64
    37f4:	11 f4       	brne	.+4      	; 0x37fa <UART1_Read+0x52>
			rx1_rd_index = 0;
    37f6:	10 92 7b 02 	sts	0x027B, r1

		rx1_counter--;
    37fa:	80 91 7a 02 	lds	r24, 0x027A
    37fe:	81 50       	subi	r24, 0x01	; 1
    3800:	80 93 7a 02 	sts	0x027A, r24
    3804:	13 c0       	rjmp	.+38     	; 0x382c <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
    3806:	00 00       	nop
    3808:	88 ec       	ldi	r24, 0xC8	; 200
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	fc 01       	movw	r30, r24
    380e:	80 81       	ld	r24, Z
    3810:	88 1f       	adc	r24, r24
    3812:	88 27       	eor	r24, r24
    3814:	88 1f       	adc	r24, r24
    3816:	88 2f       	mov	r24, r24
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	81 70       	andi	r24, 0x01	; 1
    381c:	99 27       	eor	r25, r25
    381e:	89 2b       	or	r24, r25
    3820:	99 f3       	breq	.-26     	; 0x3808 <UART1_Read+0x60>
		data = UDR1;
    3822:	8e ec       	ldi	r24, 0xCE	; 206
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	fc 01       	movw	r30, r24
    3828:	80 81       	ld	r24, Z
    382a:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    382c:	89 81       	ldd	r24, Y+1	; 0x01
}
    382e:	0f 90       	pop	r0
    3830:	df 91       	pop	r29
    3832:	cf 91       	pop	r28
    3834:	08 95       	ret

00003836 <UART1_Buffer>:

void UART1_Buffer(uint8_t* str) {
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
    383a:	00 d0       	rcall	.+0      	; 0x383c <UART1_Buffer+0x6>
    383c:	cd b7       	in	r28, 0x3d	; 61
    383e:	de b7       	in	r29, 0x3e	; 62
    3840:	9a 83       	std	Y+2, r25	; 0x02
    3842:	89 83       	std	Y+1, r24	; 0x01
	while(*str) {
    3844:	0b c0       	rjmp	.+22     	; 0x385c <UART1_Buffer+0x26>
		altUart1Write(*str++);
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	9a 81       	ldd	r25, Y+2	; 0x02
    384a:	9c 01       	movw	r18, r24
    384c:	2f 5f       	subi	r18, 0xFF	; 255
    384e:	3f 4f       	sbci	r19, 0xFF	; 255
    3850:	3a 83       	std	Y+2, r19	; 0x02
    3852:	29 83       	std	Y+1, r18	; 0x01
    3854:	fc 01       	movw	r30, r24
    3856:	80 81       	ld	r24, Z
    3858:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <altUart1Write>

	return data;
}

void UART1_Buffer(uint8_t* str) {
	while(*str) {
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	9a 81       	ldd	r25, Y+2	; 0x02
    3860:	fc 01       	movw	r30, r24
    3862:	80 81       	ld	r24, Z
    3864:	88 23       	and	r24, r24
    3866:	79 f7       	brne	.-34     	; 0x3846 <UART1_Buffer+0x10>
		altUart1Write(*str++);
	}
}
    3868:	0f 90       	pop	r0
    386a:	0f 90       	pop	r0
    386c:	df 91       	pop	r29
    386e:	cf 91       	pop	r28
    3870:	08 95       	ret

00003872 <test_sensor>:
#include "actuator.h"

// if this is defined it will execute the coordinates for the "first desk" if commented it will move on to the "second desk"
#define first_desk

char test_sensor(unsigned long start_time) {
    3872:	cf 93       	push	r28
    3874:	df 93       	push	r29
    3876:	00 d0       	rcall	.+0      	; 0x3878 <test_sensor+0x6>
    3878:	00 d0       	rcall	.+0      	; 0x387a <test_sensor+0x8>
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
    387e:	69 83       	std	Y+1, r22	; 0x01
    3880:	7a 83       	std	Y+2, r23	; 0x02
    3882:	8b 83       	std	Y+3, r24	; 0x03
    3884:	9c 83       	std	Y+4, r25	; 0x04

	if(gpio_read_pin(0) == 1) {
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	0e 94 10 0c 	call	0x1820	; 0x1820 <gpio_read_pin>
    388c:	81 30       	cpi	r24, 0x01	; 1
    388e:	29 f4       	brne	.+10     	; 0x389a <test_sensor+0x28>
		odometry_stop(HARD_STOP);
    3890:	83 e5       	ldi	r24, 0x53	; 83
    3892:	0e 94 75 0e 	call	0x1cea	; 0x1cea <odometry_stop>
		return 1;
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	01 c0       	rjmp	.+2      	; 0x389c <test_sensor+0x2a>
	}

	return 0;
    389a:	80 e0       	ldi	r24, 0x00	; 0
}
    389c:	0f 90       	pop	r0
    389e:	0f 90       	pop	r0
    38a0:	0f 90       	pop	r0
    38a2:	0f 90       	pop	r0
    38a4:	df 91       	pop	r29
    38a6:	cf 91       	pop	r28
    38a8:	08 95       	ret

000038aa <wait_while_detection_tactic_one>:

/*
 * 	Function: 	 static void wait_while_detection_tactic_one(void)
 * 	Description: This will wait until the callback(sensor) is returning 1, so called detecting the enemy
 */
static void wait_while_detection_tactic_one(void) {
    38aa:	cf 93       	push	r28
    38ac:	df 93       	push	r29
    38ae:	cd b7       	in	r28, 0x3d	; 61
    38b0:	de b7       	in	r29, 0x3e	; 62
    38b2:	6c 97       	sbiw	r28, 0x1c	; 28
    38b4:	0f b6       	in	r0, 0x3f	; 63
    38b6:	f8 94       	cli
    38b8:	de bf       	out	0x3e, r29	; 62
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	cd bf       	out	0x3d, r28	; 61
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	a8 e4       	ldi	r26, 0x48	; 72
    38c4:	b3 e4       	ldi	r27, 0x43	; 67
    38c6:	89 83       	std	Y+1, r24	; 0x01
    38c8:	9a 83       	std	Y+2, r25	; 0x02
    38ca:	ab 83       	std	Y+3, r26	; 0x03
    38cc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e4       	ldi	r19, 0x40	; 64
    38d2:	4c e1       	ldi	r20, 0x1C	; 28
    38d4:	55 e4       	ldi	r21, 0x45	; 69
    38d6:	69 81       	ldd	r22, Y+1	; 0x01
    38d8:	7a 81       	ldd	r23, Y+2	; 0x02
    38da:	8b 81       	ldd	r24, Y+3	; 0x03
    38dc:	9c 81       	ldd	r25, Y+4	; 0x04
    38de:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	8d 83       	std	Y+5, r24	; 0x05
    38e8:	9e 83       	std	Y+6, r25	; 0x06
    38ea:	af 83       	std	Y+7, r26	; 0x07
    38ec:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	40 e8       	ldi	r20, 0x80	; 128
    38f4:	5f e3       	ldi	r21, 0x3F	; 63
    38f6:	6d 81       	ldd	r22, Y+5	; 0x05
    38f8:	7e 81       	ldd	r23, Y+6	; 0x06
    38fa:	8f 81       	ldd	r24, Y+7	; 0x07
    38fc:	98 85       	ldd	r25, Y+8	; 0x08
    38fe:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    3902:	88 23       	and	r24, r24
    3904:	2c f4       	brge	.+10     	; 0x3910 <wait_while_detection_tactic_one+0x66>
		__ticks = 1;
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	9a 87       	std	Y+10, r25	; 0x0a
    390c:	89 87       	std	Y+9, r24	; 0x09
    390e:	3f c0       	rjmp	.+126    	; 0x398e <wait_while_detection_tactic_one+0xe4>
	else if (__tmp > 65535)
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	3f ef       	ldi	r19, 0xFF	; 255
    3914:	4f e7       	ldi	r20, 0x7F	; 127
    3916:	57 e4       	ldi	r21, 0x47	; 71
    3918:	6d 81       	ldd	r22, Y+5	; 0x05
    391a:	7e 81       	ldd	r23, Y+6	; 0x06
    391c:	8f 81       	ldd	r24, Y+7	; 0x07
    391e:	98 85       	ldd	r25, Y+8	; 0x08
    3920:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    3924:	18 16       	cp	r1, r24
    3926:	4c f5       	brge	.+82     	; 0x397a <wait_while_detection_tactic_one+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	40 e2       	ldi	r20, 0x20	; 32
    392e:	51 e4       	ldi	r21, 0x41	; 65
    3930:	69 81       	ldd	r22, Y+1	; 0x01
    3932:	7a 81       	ldd	r23, Y+2	; 0x02
    3934:	8b 81       	ldd	r24, Y+3	; 0x03
    3936:	9c 81       	ldd	r25, Y+4	; 0x04
    3938:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	bc 01       	movw	r22, r24
    3942:	cd 01       	movw	r24, r26
    3944:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	9a 87       	std	Y+10, r25	; 0x0a
    394e:	89 87       	std	Y+9, r24	; 0x09
    3950:	0f c0       	rjmp	.+30     	; 0x3970 <wait_while_detection_tactic_one+0xc6>
    3952:	8a ef       	ldi	r24, 0xFA	; 250
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	9c 87       	std	Y+12, r25	; 0x0c
    3958:	8b 87       	std	Y+11, r24	; 0x0b
    395a:	8b 85       	ldd	r24, Y+11	; 0x0b
    395c:	9c 85       	ldd	r25, Y+12	; 0x0c
    395e:	01 97       	sbiw	r24, 0x01	; 1
    3960:	f1 f7       	brne	.-4      	; 0x395e <wait_while_detection_tactic_one+0xb4>
    3962:	9c 87       	std	Y+12, r25	; 0x0c
    3964:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3966:	89 85       	ldd	r24, Y+9	; 0x09
    3968:	9a 85       	ldd	r25, Y+10	; 0x0a
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	9a 87       	std	Y+10, r25	; 0x0a
    396e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3970:	89 85       	ldd	r24, Y+9	; 0x09
    3972:	9a 85       	ldd	r25, Y+10	; 0x0a
    3974:	89 2b       	or	r24, r25
    3976:	69 f7       	brne	.-38     	; 0x3952 <wait_while_detection_tactic_one+0xa8>
    3978:	14 c0       	rjmp	.+40     	; 0x39a2 <wait_while_detection_tactic_one+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    397a:	6d 81       	ldd	r22, Y+5	; 0x05
    397c:	7e 81       	ldd	r23, Y+6	; 0x06
    397e:	8f 81       	ldd	r24, Y+7	; 0x07
    3980:	98 85       	ldd	r25, Y+8	; 0x08
    3982:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	9a 87       	std	Y+10, r25	; 0x0a
    398c:	89 87       	std	Y+9, r24	; 0x09
    398e:	89 85       	ldd	r24, Y+9	; 0x09
    3990:	9a 85       	ldd	r25, Y+10	; 0x0a
    3992:	9e 87       	std	Y+14, r25	; 0x0e
    3994:	8d 87       	std	Y+13, r24	; 0x0d
    3996:	8d 85       	ldd	r24, Y+13	; 0x0d
    3998:	9e 85       	ldd	r25, Y+14	; 0x0e
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	f1 f7       	brne	.-4      	; 0x399a <wait_while_detection_tactic_one+0xf0>
    399e:	9e 87       	std	Y+14, r25	; 0x0e
    39a0:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(200);
	while(TACTIC_ONE_POSITION[current_position].callback(0) == 1)
    39a2:	72 c0       	rjmp	.+228    	; 0x3a88 <wait_while_detection_tactic_one+0x1de>
    39a4:	80 e0       	ldi	r24, 0x00	; 0
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	a0 e2       	ldi	r26, 0x20	; 32
    39aa:	b1 e4       	ldi	r27, 0x41	; 65
    39ac:	8f 87       	std	Y+15, r24	; 0x0f
    39ae:	98 8b       	std	Y+16, r25	; 0x10
    39b0:	a9 8b       	std	Y+17, r26	; 0x11
    39b2:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	30 e4       	ldi	r19, 0x40	; 64
    39b8:	4c e1       	ldi	r20, 0x1C	; 28
    39ba:	55 e4       	ldi	r21, 0x45	; 69
    39bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    39be:	78 89       	ldd	r23, Y+16	; 0x10
    39c0:	89 89       	ldd	r24, Y+17	; 0x11
    39c2:	9a 89       	ldd	r25, Y+18	; 0x12
    39c4:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	8b 8b       	std	Y+19, r24	; 0x13
    39ce:	9c 8b       	std	Y+20, r25	; 0x14
    39d0:	ad 8b       	std	Y+21, r26	; 0x15
    39d2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	40 e8       	ldi	r20, 0x80	; 128
    39da:	5f e3       	ldi	r21, 0x3F	; 63
    39dc:	6b 89       	ldd	r22, Y+19	; 0x13
    39de:	7c 89       	ldd	r23, Y+20	; 0x14
    39e0:	8d 89       	ldd	r24, Y+21	; 0x15
    39e2:	9e 89       	ldd	r25, Y+22	; 0x16
    39e4:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    39e8:	88 23       	and	r24, r24
    39ea:	2c f4       	brge	.+10     	; 0x39f6 <wait_while_detection_tactic_one+0x14c>
		__ticks = 1;
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	98 8f       	std	Y+24, r25	; 0x18
    39f2:	8f 8b       	std	Y+23, r24	; 0x17
    39f4:	3f c0       	rjmp	.+126    	; 0x3a74 <wait_while_detection_tactic_one+0x1ca>
	else if (__tmp > 65535)
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	3f ef       	ldi	r19, 0xFF	; 255
    39fa:	4f e7       	ldi	r20, 0x7F	; 127
    39fc:	57 e4       	ldi	r21, 0x47	; 71
    39fe:	6b 89       	ldd	r22, Y+19	; 0x13
    3a00:	7c 89       	ldd	r23, Y+20	; 0x14
    3a02:	8d 89       	ldd	r24, Y+21	; 0x15
    3a04:	9e 89       	ldd	r25, Y+22	; 0x16
    3a06:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    3a0a:	18 16       	cp	r1, r24
    3a0c:	4c f5       	brge	.+82     	; 0x3a60 <wait_while_detection_tactic_one+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	40 e2       	ldi	r20, 0x20	; 32
    3a14:	51 e4       	ldi	r21, 0x41	; 65
    3a16:	6f 85       	ldd	r22, Y+15	; 0x0f
    3a18:	78 89       	ldd	r23, Y+16	; 0x10
    3a1a:	89 89       	ldd	r24, Y+17	; 0x11
    3a1c:	9a 89       	ldd	r25, Y+18	; 0x12
    3a1e:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    3a22:	dc 01       	movw	r26, r24
    3a24:	cb 01       	movw	r24, r22
    3a26:	bc 01       	movw	r22, r24
    3a28:	cd 01       	movw	r24, r26
    3a2a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    3a2e:	dc 01       	movw	r26, r24
    3a30:	cb 01       	movw	r24, r22
    3a32:	98 8f       	std	Y+24, r25	; 0x18
    3a34:	8f 8b       	std	Y+23, r24	; 0x17
    3a36:	0f c0       	rjmp	.+30     	; 0x3a56 <wait_while_detection_tactic_one+0x1ac>
    3a38:	8a ef       	ldi	r24, 0xFA	; 250
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	9a 8f       	std	Y+26, r25	; 0x1a
    3a3e:	89 8f       	std	Y+25, r24	; 0x19
    3a40:	89 8d       	ldd	r24, Y+25	; 0x19
    3a42:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3a44:	01 97       	sbiw	r24, 0x01	; 1
    3a46:	f1 f7       	brne	.-4      	; 0x3a44 <wait_while_detection_tactic_one+0x19a>
    3a48:	9a 8f       	std	Y+26, r25	; 0x1a
    3a4a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a50:	01 97       	sbiw	r24, 0x01	; 1
    3a52:	98 8f       	std	Y+24, r25	; 0x18
    3a54:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a56:	8f 89       	ldd	r24, Y+23	; 0x17
    3a58:	98 8d       	ldd	r25, Y+24	; 0x18
    3a5a:	89 2b       	or	r24, r25
    3a5c:	69 f7       	brne	.-38     	; 0x3a38 <wait_while_detection_tactic_one+0x18e>
    3a5e:	14 c0       	rjmp	.+40     	; 0x3a88 <wait_while_detection_tactic_one+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a60:	6b 89       	ldd	r22, Y+19	; 0x13
    3a62:	7c 89       	ldd	r23, Y+20	; 0x14
    3a64:	8d 89       	ldd	r24, Y+21	; 0x15
    3a66:	9e 89       	ldd	r25, Y+22	; 0x16
    3a68:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	98 8f       	std	Y+24, r25	; 0x18
    3a72:	8f 8b       	std	Y+23, r24	; 0x17
    3a74:	8f 89       	ldd	r24, Y+23	; 0x17
    3a76:	98 8d       	ldd	r25, Y+24	; 0x18
    3a78:	9c 8f       	std	Y+28, r25	; 0x1c
    3a7a:	8b 8f       	std	Y+27, r24	; 0x1b
    3a7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a80:	01 97       	sbiw	r24, 0x01	; 1
    3a82:	f1 f7       	brne	.-4      	; 0x3a80 <wait_while_detection_tactic_one+0x1d6>
    3a84:	9c 8f       	std	Y+28, r25	; 0x1c
    3a86:	8b 8f       	std	Y+27, r24	; 0x1b
    3a88:	80 91 7c 02 	lds	r24, 0x027C
    3a8c:	28 2f       	mov	r18, r24
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	4b e0       	ldi	r20, 0x0B	; 11
    3a92:	42 9f       	mul	r20, r18
    3a94:	c0 01       	movw	r24, r0
    3a96:	43 9f       	mul	r20, r19
    3a98:	90 0d       	add	r25, r0
    3a9a:	11 24       	eor	r1, r1
    3a9c:	80 5e       	subi	r24, 0xE0	; 224
    3a9e:	9e 4f       	sbci	r25, 0xFE	; 254
    3aa0:	fc 01       	movw	r30, r24
    3aa2:	20 81       	ld	r18, Z
    3aa4:	31 81       	ldd	r19, Z+1	; 0x01
    3aa6:	60 e0       	ldi	r22, 0x00	; 0
    3aa8:	70 e0       	ldi	r23, 0x00	; 0
    3aaa:	cb 01       	movw	r24, r22
    3aac:	f9 01       	movw	r30, r18
    3aae:	09 95       	icall
    3ab0:	81 30       	cpi	r24, 0x01	; 1
    3ab2:	09 f4       	brne	.+2      	; 0x3ab6 <wait_while_detection_tactic_one+0x20c>
    3ab4:	77 cf       	rjmp	.-274    	; 0x39a4 <wait_while_detection_tactic_one+0xfa>
		_delay_ms(10);
	next_position = current_position;
    3ab6:	80 91 7c 02 	lds	r24, 0x027C
    3aba:	80 93 7d 02 	sts	0x027D, r24
	active_state = TACTIC_ONE;
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	80 93 16 01 	sts	0x0116, r24

}
    3ac4:	6c 96       	adiw	r28, 0x1c	; 28
    3ac6:	0f b6       	in	r0, 0x3f	; 63
    3ac8:	f8 94       	cli
    3aca:	de bf       	out	0x3e, r29	; 62
    3acc:	0f be       	out	0x3f, r0	; 63
    3ace:	cd bf       	out	0x3d, r28	; 61
    3ad0:	df 91       	pop	r29
    3ad2:	cf 91       	pop	r28
    3ad4:	08 95       	ret

00003ad6 <darkside>:

void darkside(void) {
    3ad6:	cf 93       	push	r28
    3ad8:	df 93       	push	r29
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
    3ade:	a3 97       	sbiw	r28, 0x23	; 35
    3ae0:	0f b6       	in	r0, 0x3f	; 63
    3ae2:	f8 94       	cli
    3ae4:	de bf       	out	0x3e, r29	; 62
    3ae6:	0f be       	out	0x3f, r0	; 63
    3ae8:	cd bf       	out	0x3d, r28	; 61


	// setting the starting position
	struct odometry_position startingPosition; startingPosition.x = 0; startingPosition.y = 0; startingPosition.angle = 0;
    3aea:	1e 8e       	std	Y+30, r1	; 0x1e
    3aec:	1d 8e       	std	Y+29, r1	; 0x1d
    3aee:	18 a2       	std	Y+32, r1	; 0x20
    3af0:	1f 8e       	std	Y+31, r1	; 0x1f
    3af2:	1a a2       	std	Y+34, r1	; 0x22
    3af4:	19 a2       	std	Y+33, r1	; 0x21

	// sending the starting position to odometry
	odometry_set_position(&startingPosition);
    3af6:	ce 01       	movw	r24, r28
    3af8:	4d 96       	adiw	r24, 0x1d	; 29
    3afa:	0e 94 74 10 	call	0x20e8	; 0x20e8 <odometry_set_position>

	while(1) {
		switch(active_state) {
    3afe:	80 91 16 01 	lds	r24, 0x0116
    3b02:	88 2f       	mov	r24, r24
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	81 30       	cpi	r24, 0x01	; 1
    3b08:	91 05       	cpc	r25, r1
    3b0a:	09 f4       	brne	.+2      	; 0x3b0e <darkside+0x38>
    3b0c:	8f c0       	rjmp	.+286    	; 0x3c2c <darkside+0x156>
    3b0e:	83 35       	cpi	r24, 0x53	; 83
    3b10:	91 05       	cpc	r25, r1
    3b12:	91 f0       	breq	.+36     	; 0x3b38 <darkside+0x62>
    3b14:	89 2b       	or	r24, r25
    3b16:	09 f0       	breq	.+2      	; 0x3b1a <darkside+0x44>
    3b18:	59 c1       	rjmp	.+690    	; 0x3dcc <darkside+0x2f6>
		case COLLISION:		// COLLISION ! DON'T FORGET BREAK !
			if(current_position == 0) {
    3b1a:	80 91 7c 02 	lds	r24, 0x027C
    3b1e:	88 23       	and	r24, r24
    3b20:	19 f4       	brne	.+6      	; 0x3b28 <darkside+0x52>
				wait_while_detection_tactic_one();
    3b22:	0e 94 55 1c 	call	0x38aa	; 0x38aa <wait_while_detection_tactic_one>
				break;
    3b26:	52 c1       	rjmp	.+676    	; 0x3dcc <darkside+0x2f6>
			} else if(current_position == 1) {
    3b28:	80 91 7c 02 	lds	r24, 0x027C
    3b2c:	81 30       	cpi	r24, 0x01	; 1
    3b2e:	19 f4       	brne	.+6      	; 0x3b36 <darkside+0x60>
				wait_while_detection_tactic_one();
    3b30:	0e 94 55 1c 	call	0x38aa	; 0x38aa <wait_while_detection_tactic_one>
				break;
    3b34:	4b c1       	rjmp	.+662    	; 0x3dcc <darkside+0x2f6>
			}

			break;
    3b36:	4a c1       	rjmp	.+660    	; 0x3dcc <darkside+0x2f6>
    3b38:	80 e0       	ldi	r24, 0x00	; 0
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	aa e7       	ldi	r26, 0x7A	; 122
    3b3e:	b4 e4       	ldi	r27, 0x44	; 68
    3b40:	89 83       	std	Y+1, r24	; 0x01
    3b42:	9a 83       	std	Y+2, r25	; 0x02
    3b44:	ab 83       	std	Y+3, r26	; 0x03
    3b46:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	30 e4       	ldi	r19, 0x40	; 64
    3b4c:	4c e1       	ldi	r20, 0x1C	; 28
    3b4e:	55 e4       	ldi	r21, 0x45	; 69
    3b50:	69 81       	ldd	r22, Y+1	; 0x01
    3b52:	7a 81       	ldd	r23, Y+2	; 0x02
    3b54:	8b 81       	ldd	r24, Y+3	; 0x03
    3b56:	9c 81       	ldd	r25, Y+4	; 0x04
    3b58:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	8d 83       	std	Y+5, r24	; 0x05
    3b62:	9e 83       	std	Y+6, r25	; 0x06
    3b64:	af 83       	std	Y+7, r26	; 0x07
    3b66:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3b68:	20 e0       	ldi	r18, 0x00	; 0
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	40 e8       	ldi	r20, 0x80	; 128
    3b6e:	5f e3       	ldi	r21, 0x3F	; 63
    3b70:	6d 81       	ldd	r22, Y+5	; 0x05
    3b72:	7e 81       	ldd	r23, Y+6	; 0x06
    3b74:	8f 81       	ldd	r24, Y+7	; 0x07
    3b76:	98 85       	ldd	r25, Y+8	; 0x08
    3b78:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    3b7c:	88 23       	and	r24, r24
    3b7e:	2c f4       	brge	.+10     	; 0x3b8a <darkside+0xb4>
		__ticks = 1;
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	9a 87       	std	Y+10, r25	; 0x0a
    3b86:	89 87       	std	Y+9, r24	; 0x09
    3b88:	3f c0       	rjmp	.+126    	; 0x3c08 <darkside+0x132>
	else if (__tmp > 65535)
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	3f ef       	ldi	r19, 0xFF	; 255
    3b8e:	4f e7       	ldi	r20, 0x7F	; 127
    3b90:	57 e4       	ldi	r21, 0x47	; 71
    3b92:	6d 81       	ldd	r22, Y+5	; 0x05
    3b94:	7e 81       	ldd	r23, Y+6	; 0x06
    3b96:	8f 81       	ldd	r24, Y+7	; 0x07
    3b98:	98 85       	ldd	r25, Y+8	; 0x08
    3b9a:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    3b9e:	18 16       	cp	r1, r24
    3ba0:	4c f5       	brge	.+82     	; 0x3bf4 <darkside+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	40 e2       	ldi	r20, 0x20	; 32
    3ba8:	51 e4       	ldi	r21, 0x41	; 65
    3baa:	69 81       	ldd	r22, Y+1	; 0x01
    3bac:	7a 81       	ldd	r23, Y+2	; 0x02
    3bae:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb2:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	bc 01       	movw	r22, r24
    3bbc:	cd 01       	movw	r24, r26
    3bbe:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	9a 87       	std	Y+10, r25	; 0x0a
    3bc8:	89 87       	std	Y+9, r24	; 0x09
    3bca:	0f c0       	rjmp	.+30     	; 0x3bea <darkside+0x114>
    3bcc:	8a ef       	ldi	r24, 0xFA	; 250
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	9c 87       	std	Y+12, r25	; 0x0c
    3bd2:	8b 87       	std	Y+11, r24	; 0x0b
    3bd4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3bd6:	9c 85       	ldd	r25, Y+12	; 0x0c
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	f1 f7       	brne	.-4      	; 0x3bd8 <darkside+0x102>
    3bdc:	9c 87       	std	Y+12, r25	; 0x0c
    3bde:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3be0:	89 85       	ldd	r24, Y+9	; 0x09
    3be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be4:	01 97       	sbiw	r24, 0x01	; 1
    3be6:	9a 87       	std	Y+10, r25	; 0x0a
    3be8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bea:	89 85       	ldd	r24, Y+9	; 0x09
    3bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bee:	89 2b       	or	r24, r25
    3bf0:	69 f7       	brne	.-38     	; 0x3bcc <darkside+0xf6>
    3bf2:	14 c0       	rjmp	.+40     	; 0x3c1c <darkside+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf4:	6d 81       	ldd	r22, Y+5	; 0x05
    3bf6:	7e 81       	ldd	r23, Y+6	; 0x06
    3bf8:	8f 81       	ldd	r24, Y+7	; 0x07
    3bfa:	98 85       	ldd	r25, Y+8	; 0x08
    3bfc:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    3c00:	dc 01       	movw	r26, r24
    3c02:	cb 01       	movw	r24, r22
    3c04:	9a 87       	std	Y+10, r25	; 0x0a
    3c06:	89 87       	std	Y+9, r24	; 0x09
    3c08:	89 85       	ldd	r24, Y+9	; 0x09
    3c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c0c:	9e 87       	std	Y+14, r25	; 0x0e
    3c0e:	8d 87       	std	Y+13, r24	; 0x0d
    3c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c14:	01 97       	sbiw	r24, 0x01	; 1
    3c16:	f1 f7       	brne	.-4      	; 0x3c14 <darkside+0x13e>
    3c18:	9e 87       	std	Y+14, r25	; 0x0e
    3c1a:	8d 87       	std	Y+13, r24	; 0x0d
		case STUCK:			// STUCK
			_delay_ms(1000);
			active_state = TACTIC_ONE;
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	80 93 16 01 	sts	0x0116, r24
			next_position = current_position;
    3c22:	80 91 7c 02 	lds	r24, 0x027C
    3c26:	80 93 7d 02 	sts	0x027D, r24

			break;
    3c2a:	d0 c0       	rjmp	.+416    	; 0x3dcc <darkside+0x2f6>
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    3c2c:	80 91 7d 02 	lds	r24, 0x027D
    3c30:	80 93 7c 02 	sts	0x027C, r24
    3c34:	c6 c0       	rjmp	.+396    	; 0x3dc2 <darkside+0x2ec>

				// send the gotoField and receive status
				odometry_status = odometry_move_to_position(&TACTIC_ONE_POSITION[current_position].point, TACTIC_ONE_POSITION[current_position].speed, TACTIC_ONE_POSITION[current_position].direction, TACTIC_ONE_POSITION[current_position].callback);
    3c36:	80 91 7c 02 	lds	r24, 0x027C
    3c3a:	28 2f       	mov	r18, r24
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	4b e0       	ldi	r20, 0x0B	; 11
    3c40:	42 9f       	mul	r20, r18
    3c42:	c0 01       	movw	r24, r0
    3c44:	43 9f       	mul	r20, r19
    3c46:	90 0d       	add	r25, r0
    3c48:	11 24       	eor	r1, r1
    3c4a:	80 5e       	subi	r24, 0xE0	; 224
    3c4c:	9e 4f       	sbci	r25, 0xFE	; 254
    3c4e:	dc 01       	movw	r26, r24
    3c50:	4d 91       	ld	r20, X+
    3c52:	5c 91       	ld	r21, X
    3c54:	80 91 7c 02 	lds	r24, 0x027C
    3c58:	28 2f       	mov	r18, r24
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	6b e0       	ldi	r22, 0x0B	; 11
    3c5e:	62 9f       	mul	r22, r18
    3c60:	c0 01       	movw	r24, r0
    3c62:	63 9f       	mul	r22, r19
    3c64:	90 0d       	add	r25, r0
    3c66:	11 24       	eor	r1, r1
    3c68:	81 5e       	subi	r24, 0xE1	; 225
    3c6a:	9e 4f       	sbci	r25, 0xFE	; 254
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	ec 91       	ld	r30, X
    3c70:	80 91 7c 02 	lds	r24, 0x027C
    3c74:	28 2f       	mov	r18, r24
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	6b e0       	ldi	r22, 0x0B	; 11
    3c7a:	62 9f       	mul	r22, r18
    3c7c:	c0 01       	movw	r24, r0
    3c7e:	63 9f       	mul	r22, r19
    3c80:	90 0d       	add	r25, r0
    3c82:	11 24       	eor	r1, r1
    3c84:	82 5e       	subi	r24, 0xE2	; 226
    3c86:	9e 4f       	sbci	r25, 0xFE	; 254
    3c88:	dc 01       	movw	r26, r24
    3c8a:	7c 91       	ld	r23, X
    3c8c:	80 91 7c 02 	lds	r24, 0x027C
    3c90:	28 2f       	mov	r18, r24
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	6b e0       	ldi	r22, 0x0B	; 11
    3c96:	62 9f       	mul	r22, r18
    3c98:	c0 01       	movw	r24, r0
    3c9a:	63 9f       	mul	r22, r19
    3c9c:	90 0d       	add	r25, r0
    3c9e:	11 24       	eor	r1, r1
    3ca0:	89 5e       	subi	r24, 0xE9	; 233
    3ca2:	9e 4f       	sbci	r25, 0xFE	; 254
    3ca4:	9a 01       	movw	r18, r20
    3ca6:	4e 2f       	mov	r20, r30
    3ca8:	67 2f       	mov	r22, r23
    3caa:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <odometry_move_to_position>
    3cae:	80 93 7e 02 	sts	0x027E, r24

				// if odometry fails set state to collision
				if(odometry_status == ODOMETRY_FAIL)
    3cb2:	80 91 7e 02 	lds	r24, 0x027E
    3cb6:	81 30       	cpi	r24, 0x01	; 1
    3cb8:	19 f4       	brne	.+6      	; 0x3cc0 <darkside+0x1ea>
				{
					active_state = COLLISION;
    3cba:	10 92 16 01 	sts	0x0116, r1
					break;
    3cbe:	86 c0       	rjmp	.+268    	; 0x3dcc <darkside+0x2f6>
				}
				else if(odometry_status == ODOMETRY_STUCK)
				{

				}
				if(current_position == 0) {
    3cc0:	80 91 7c 02 	lds	r24, 0x027C
    3cc4:	88 23       	and	r24, r24
    3cc6:	09 f0       	breq	.+2      	; 0x3cca <darkside+0x1f4>
    3cc8:	72 c0       	rjmp	.+228    	; 0x3dae <darkside+0x2d8>
    3cca:	80 e0       	ldi	r24, 0x00	; 0
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	aa ef       	ldi	r26, 0xFA	; 250
    3cd0:	b4 e4       	ldi	r27, 0x44	; 68
    3cd2:	8f 87       	std	Y+15, r24	; 0x0f
    3cd4:	98 8b       	std	Y+16, r25	; 0x10
    3cd6:	a9 8b       	std	Y+17, r26	; 0x11
    3cd8:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	30 e4       	ldi	r19, 0x40	; 64
    3cde:	4c e1       	ldi	r20, 0x1C	; 28
    3ce0:	55 e4       	ldi	r21, 0x45	; 69
    3ce2:	6f 85       	ldd	r22, Y+15	; 0x0f
    3ce4:	78 89       	ldd	r23, Y+16	; 0x10
    3ce6:	89 89       	ldd	r24, Y+17	; 0x11
    3ce8:	9a 89       	ldd	r25, Y+18	; 0x12
    3cea:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	8b 8b       	std	Y+19, r24	; 0x13
    3cf4:	9c 8b       	std	Y+20, r25	; 0x14
    3cf6:	ad 8b       	std	Y+21, r26	; 0x15
    3cf8:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	40 e8       	ldi	r20, 0x80	; 128
    3d00:	5f e3       	ldi	r21, 0x3F	; 63
    3d02:	6b 89       	ldd	r22, Y+19	; 0x13
    3d04:	7c 89       	ldd	r23, Y+20	; 0x14
    3d06:	8d 89       	ldd	r24, Y+21	; 0x15
    3d08:	9e 89       	ldd	r25, Y+22	; 0x16
    3d0a:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    3d0e:	88 23       	and	r24, r24
    3d10:	2c f4       	brge	.+10     	; 0x3d1c <darkside+0x246>
		__ticks = 1;
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	98 8f       	std	Y+24, r25	; 0x18
    3d18:	8f 8b       	std	Y+23, r24	; 0x17
    3d1a:	3f c0       	rjmp	.+126    	; 0x3d9a <darkside+0x2c4>
	else if (__tmp > 65535)
    3d1c:	20 e0       	ldi	r18, 0x00	; 0
    3d1e:	3f ef       	ldi	r19, 0xFF	; 255
    3d20:	4f e7       	ldi	r20, 0x7F	; 127
    3d22:	57 e4       	ldi	r21, 0x47	; 71
    3d24:	6b 89       	ldd	r22, Y+19	; 0x13
    3d26:	7c 89       	ldd	r23, Y+20	; 0x14
    3d28:	8d 89       	ldd	r24, Y+21	; 0x15
    3d2a:	9e 89       	ldd	r25, Y+22	; 0x16
    3d2c:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    3d30:	18 16       	cp	r1, r24
    3d32:	4c f5       	brge	.+82     	; 0x3d86 <darkside+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d34:	20 e0       	ldi	r18, 0x00	; 0
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	40 e2       	ldi	r20, 0x20	; 32
    3d3a:	51 e4       	ldi	r21, 0x41	; 65
    3d3c:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d3e:	78 89       	ldd	r23, Y+16	; 0x10
    3d40:	89 89       	ldd	r24, Y+17	; 0x11
    3d42:	9a 89       	ldd	r25, Y+18	; 0x12
    3d44:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	bc 01       	movw	r22, r24
    3d4e:	cd 01       	movw	r24, r26
    3d50:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	98 8f       	std	Y+24, r25	; 0x18
    3d5a:	8f 8b       	std	Y+23, r24	; 0x17
    3d5c:	0f c0       	rjmp	.+30     	; 0x3d7c <darkside+0x2a6>
    3d5e:	8a ef       	ldi	r24, 0xFA	; 250
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	9a 8f       	std	Y+26, r25	; 0x1a
    3d64:	89 8f       	std	Y+25, r24	; 0x19
    3d66:	89 8d       	ldd	r24, Y+25	; 0x19
    3d68:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d6a:	01 97       	sbiw	r24, 0x01	; 1
    3d6c:	f1 f7       	brne	.-4      	; 0x3d6a <darkside+0x294>
    3d6e:	9a 8f       	std	Y+26, r25	; 0x1a
    3d70:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d72:	8f 89       	ldd	r24, Y+23	; 0x17
    3d74:	98 8d       	ldd	r25, Y+24	; 0x18
    3d76:	01 97       	sbiw	r24, 0x01	; 1
    3d78:	98 8f       	std	Y+24, r25	; 0x18
    3d7a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d80:	89 2b       	or	r24, r25
    3d82:	69 f7       	brne	.-38     	; 0x3d5e <darkside+0x288>
    3d84:	14 c0       	rjmp	.+40     	; 0x3dae <darkside+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d86:	6b 89       	ldd	r22, Y+19	; 0x13
    3d88:	7c 89       	ldd	r23, Y+20	; 0x14
    3d8a:	8d 89       	ldd	r24, Y+21	; 0x15
    3d8c:	9e 89       	ldd	r25, Y+22	; 0x16
    3d8e:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    3d92:	dc 01       	movw	r26, r24
    3d94:	cb 01       	movw	r24, r22
    3d96:	98 8f       	std	Y+24, r25	; 0x18
    3d98:	8f 8b       	std	Y+23, r24	; 0x17
    3d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    3d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    3d9e:	9c 8f       	std	Y+28, r25	; 0x1c
    3da0:	8b 8f       	std	Y+27, r24	; 0x1b
    3da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	f1 f7       	brne	.-4      	; 0x3da6 <darkside+0x2d0>
    3daa:	9c 8f       	std	Y+28, r25	; 0x1c
    3dac:	8b 8f       	std	Y+27, r24	; 0x1b
					_delay_ms(2000);
				}
				// last position
				if(current_position == (TACTIC_ONE_POSITION_COUNT - 1))
    3dae:	80 91 7c 02 	lds	r24, 0x027C
    3db2:	81 30       	cpi	r24, 0x01	; 1
    3db4:	09 f4       	brne	.+2      	; 0x3db8 <darkside+0x2e2>
				{
					while(1);
    3db6:	ff cf       	rjmp	.-2      	; 0x3db6 <darkside+0x2e0>
			active_state = TACTIC_ONE;
			next_position = current_position;

			break;
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    3db8:	80 91 7c 02 	lds	r24, 0x027C
    3dbc:	8f 5f       	subi	r24, 0xFF	; 255
    3dbe:	80 93 7c 02 	sts	0x027C, r24
    3dc2:	80 91 7c 02 	lds	r24, 0x027C
    3dc6:	82 30       	cpi	r24, 0x02	; 2
    3dc8:	08 f4       	brcc	.+2      	; 0x3dcc <darkside+0x2f6>
    3dca:	35 cf       	rjmp	.-406    	; 0x3c36 <darkside+0x160>
				{
					while(1);
				}
			}//end of for
		}//end of switch
	}//end of while
    3dcc:	98 ce       	rjmp	.-720    	; 0x3afe <darkside+0x28>

00003dce <main>:
#include "debug.h"
#include "can.h"
#include <avr/interrupt.h>

int main()
{
    3dce:	cf 93       	push	r28
    3dd0:	df 93       	push	r29
    3dd2:	cd b7       	in	r28, 0x3d	; 61
    3dd4:	de b7       	in	r29, 0x3e	; 62
    3dd6:	aa 97       	sbiw	r28, 0x2a	; 42
    3dd8:	0f b6       	in	r0, 0x3f	; 63
    3dda:	f8 94       	cli
    3ddc:	de bf       	out	0x3e, r29	; 62
    3dde:	0f be       	out	0x3f, r0	; 63
    3de0:	cd bf       	out	0x3d, r28	; 61

	system_init();
    3de2:	0e 94 02 17 	call	0x2e04	; 0x2e04 <system_init>
    3de6:	80 e0       	ldi	r24, 0x00	; 0
    3de8:	90 e8       	ldi	r25, 0x80	; 128
    3dea:	ab e3       	ldi	r26, 0x3B	; 59
    3dec:	b5 e4       	ldi	r27, 0x45	; 69
    3dee:	89 83       	std	Y+1, r24	; 0x01
    3df0:	9a 83       	std	Y+2, r25	; 0x02
    3df2:	ab 83       	std	Y+3, r26	; 0x03
    3df4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 e4       	ldi	r19, 0x40	; 64
    3dfa:	4c e1       	ldi	r20, 0x1C	; 28
    3dfc:	55 e4       	ldi	r21, 0x45	; 69
    3dfe:	69 81       	ldd	r22, Y+1	; 0x01
    3e00:	7a 81       	ldd	r23, Y+2	; 0x02
    3e02:	8b 81       	ldd	r24, Y+3	; 0x03
    3e04:	9c 81       	ldd	r25, Y+4	; 0x04
    3e06:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	cb 01       	movw	r24, r22
    3e0e:	8d 83       	std	Y+5, r24	; 0x05
    3e10:	9e 83       	std	Y+6, r25	; 0x06
    3e12:	af 83       	std	Y+7, r26	; 0x07
    3e14:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3e16:	20 e0       	ldi	r18, 0x00	; 0
    3e18:	30 e0       	ldi	r19, 0x00	; 0
    3e1a:	40 e8       	ldi	r20, 0x80	; 128
    3e1c:	5f e3       	ldi	r21, 0x3F	; 63
    3e1e:	6d 81       	ldd	r22, Y+5	; 0x05
    3e20:	7e 81       	ldd	r23, Y+6	; 0x06
    3e22:	8f 81       	ldd	r24, Y+7	; 0x07
    3e24:	98 85       	ldd	r25, Y+8	; 0x08
    3e26:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    3e2a:	88 23       	and	r24, r24
    3e2c:	2c f4       	brge	.+10     	; 0x3e38 <main+0x6a>
		__ticks = 1;
    3e2e:	81 e0       	ldi	r24, 0x01	; 1
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	9a 87       	std	Y+10, r25	; 0x0a
    3e34:	89 87       	std	Y+9, r24	; 0x09
    3e36:	3f c0       	rjmp	.+126    	; 0x3eb6 <main+0xe8>
	else if (__tmp > 65535)
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	3f ef       	ldi	r19, 0xFF	; 255
    3e3c:	4f e7       	ldi	r20, 0x7F	; 127
    3e3e:	57 e4       	ldi	r21, 0x47	; 71
    3e40:	6d 81       	ldd	r22, Y+5	; 0x05
    3e42:	7e 81       	ldd	r23, Y+6	; 0x06
    3e44:	8f 81       	ldd	r24, Y+7	; 0x07
    3e46:	98 85       	ldd	r25, Y+8	; 0x08
    3e48:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    3e4c:	18 16       	cp	r1, r24
    3e4e:	4c f5       	brge	.+82     	; 0x3ea2 <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e50:	20 e0       	ldi	r18, 0x00	; 0
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	40 e2       	ldi	r20, 0x20	; 32
    3e56:	51 e4       	ldi	r21, 0x41	; 65
    3e58:	69 81       	ldd	r22, Y+1	; 0x01
    3e5a:	7a 81       	ldd	r23, Y+2	; 0x02
    3e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e60:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	bc 01       	movw	r22, r24
    3e6a:	cd 01       	movw	r24, r26
    3e6c:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	9a 87       	std	Y+10, r25	; 0x0a
    3e76:	89 87       	std	Y+9, r24	; 0x09
    3e78:	0f c0       	rjmp	.+30     	; 0x3e98 <main+0xca>
    3e7a:	8a ef       	ldi	r24, 0xFA	; 250
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	9c 87       	std	Y+12, r25	; 0x0c
    3e80:	8b 87       	std	Y+11, r24	; 0x0b
    3e82:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e84:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e86:	01 97       	sbiw	r24, 0x01	; 1
    3e88:	f1 f7       	brne	.-4      	; 0x3e86 <main+0xb8>
    3e8a:	9c 87       	std	Y+12, r25	; 0x0c
    3e8c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e8e:	89 85       	ldd	r24, Y+9	; 0x09
    3e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e92:	01 97       	sbiw	r24, 0x01	; 1
    3e94:	9a 87       	std	Y+10, r25	; 0x0a
    3e96:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e98:	89 85       	ldd	r24, Y+9	; 0x09
    3e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e9c:	89 2b       	or	r24, r25
    3e9e:	69 f7       	brne	.-38     	; 0x3e7a <main+0xac>
    3ea0:	14 c0       	rjmp	.+40     	; 0x3eca <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea2:	6d 81       	ldd	r22, Y+5	; 0x05
    3ea4:	7e 81       	ldd	r23, Y+6	; 0x06
    3ea6:	8f 81       	ldd	r24, Y+7	; 0x07
    3ea8:	98 85       	ldd	r25, Y+8	; 0x08
    3eaa:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	9a 87       	std	Y+10, r25	; 0x0a
    3eb4:	89 87       	std	Y+9, r24	; 0x09
    3eb6:	89 85       	ldd	r24, Y+9	; 0x09
    3eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eba:	9e 87       	std	Y+14, r25	; 0x0e
    3ebc:	8d 87       	std	Y+13, r24	; 0x0d
    3ebe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ec0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ec2:	01 97       	sbiw	r24, 0x01	; 1
    3ec4:	f1 f7       	brne	.-4      	; 0x3ec2 <main+0xf4>
    3ec6:	9e 87       	std	Y+14, r25	; 0x0e
    3ec8:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(3000);

	while(1) {
		servo_set_angle_four(0);
    3eca:	60 e0       	ldi	r22, 0x00	; 0
    3ecc:	70 e0       	ldi	r23, 0x00	; 0
    3ece:	cb 01       	movw	r24, r22
    3ed0:	0e 94 3d 03 	call	0x67a	; 0x67a <servo_set_angle_four>
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	aa e7       	ldi	r26, 0x7A	; 122
    3eda:	b4 e4       	ldi	r27, 0x44	; 68
    3edc:	8f 87       	std	Y+15, r24	; 0x0f
    3ede:	98 8b       	std	Y+16, r25	; 0x10
    3ee0:	a9 8b       	std	Y+17, r26	; 0x11
    3ee2:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	30 e4       	ldi	r19, 0x40	; 64
    3ee8:	4c e1       	ldi	r20, 0x1C	; 28
    3eea:	55 e4       	ldi	r21, 0x45	; 69
    3eec:	6f 85       	ldd	r22, Y+15	; 0x0f
    3eee:	78 89       	ldd	r23, Y+16	; 0x10
    3ef0:	89 89       	ldd	r24, Y+17	; 0x11
    3ef2:	9a 89       	ldd	r25, Y+18	; 0x12
    3ef4:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	8b 8b       	std	Y+19, r24	; 0x13
    3efe:	9c 8b       	std	Y+20, r25	; 0x14
    3f00:	ad 8b       	std	Y+21, r26	; 0x15
    3f02:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	40 e8       	ldi	r20, 0x80	; 128
    3f0a:	5f e3       	ldi	r21, 0x3F	; 63
    3f0c:	6b 89       	ldd	r22, Y+19	; 0x13
    3f0e:	7c 89       	ldd	r23, Y+20	; 0x14
    3f10:	8d 89       	ldd	r24, Y+21	; 0x15
    3f12:	9e 89       	ldd	r25, Y+22	; 0x16
    3f14:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    3f18:	88 23       	and	r24, r24
    3f1a:	2c f4       	brge	.+10     	; 0x3f26 <main+0x158>
		__ticks = 1;
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	98 8f       	std	Y+24, r25	; 0x18
    3f22:	8f 8b       	std	Y+23, r24	; 0x17
    3f24:	3f c0       	rjmp	.+126    	; 0x3fa4 <main+0x1d6>
	else if (__tmp > 65535)
    3f26:	20 e0       	ldi	r18, 0x00	; 0
    3f28:	3f ef       	ldi	r19, 0xFF	; 255
    3f2a:	4f e7       	ldi	r20, 0x7F	; 127
    3f2c:	57 e4       	ldi	r21, 0x47	; 71
    3f2e:	6b 89       	ldd	r22, Y+19	; 0x13
    3f30:	7c 89       	ldd	r23, Y+20	; 0x14
    3f32:	8d 89       	ldd	r24, Y+21	; 0x15
    3f34:	9e 89       	ldd	r25, Y+22	; 0x16
    3f36:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    3f3a:	18 16       	cp	r1, r24
    3f3c:	4c f5       	brge	.+82     	; 0x3f90 <main+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f3e:	20 e0       	ldi	r18, 0x00	; 0
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	40 e2       	ldi	r20, 0x20	; 32
    3f44:	51 e4       	ldi	r21, 0x41	; 65
    3f46:	6f 85       	ldd	r22, Y+15	; 0x0f
    3f48:	78 89       	ldd	r23, Y+16	; 0x10
    3f4a:	89 89       	ldd	r24, Y+17	; 0x11
    3f4c:	9a 89       	ldd	r25, Y+18	; 0x12
    3f4e:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    3f52:	dc 01       	movw	r26, r24
    3f54:	cb 01       	movw	r24, r22
    3f56:	bc 01       	movw	r22, r24
    3f58:	cd 01       	movw	r24, r26
    3f5a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    3f5e:	dc 01       	movw	r26, r24
    3f60:	cb 01       	movw	r24, r22
    3f62:	98 8f       	std	Y+24, r25	; 0x18
    3f64:	8f 8b       	std	Y+23, r24	; 0x17
    3f66:	0f c0       	rjmp	.+30     	; 0x3f86 <main+0x1b8>
    3f68:	8a ef       	ldi	r24, 0xFA	; 250
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	9a 8f       	std	Y+26, r25	; 0x1a
    3f6e:	89 8f       	std	Y+25, r24	; 0x19
    3f70:	89 8d       	ldd	r24, Y+25	; 0x19
    3f72:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f74:	01 97       	sbiw	r24, 0x01	; 1
    3f76:	f1 f7       	brne	.-4      	; 0x3f74 <main+0x1a6>
    3f78:	9a 8f       	std	Y+26, r25	; 0x1a
    3f7a:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    3f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    3f80:	01 97       	sbiw	r24, 0x01	; 1
    3f82:	98 8f       	std	Y+24, r25	; 0x18
    3f84:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f86:	8f 89       	ldd	r24, Y+23	; 0x17
    3f88:	98 8d       	ldd	r25, Y+24	; 0x18
    3f8a:	89 2b       	or	r24, r25
    3f8c:	69 f7       	brne	.-38     	; 0x3f68 <main+0x19a>
    3f8e:	14 c0       	rjmp	.+40     	; 0x3fb8 <main+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f90:	6b 89       	ldd	r22, Y+19	; 0x13
    3f92:	7c 89       	ldd	r23, Y+20	; 0x14
    3f94:	8d 89       	ldd	r24, Y+21	; 0x15
    3f96:	9e 89       	ldd	r25, Y+22	; 0x16
    3f98:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	98 8f       	std	Y+24, r25	; 0x18
    3fa2:	8f 8b       	std	Y+23, r24	; 0x17
    3fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    3fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    3fa8:	9c 8f       	std	Y+28, r25	; 0x1c
    3faa:	8b 8f       	std	Y+27, r24	; 0x1b
    3fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fb0:	01 97       	sbiw	r24, 0x01	; 1
    3fb2:	f1 f7       	brne	.-4      	; 0x3fb0 <main+0x1e2>
    3fb4:	9c 8f       	std	Y+28, r25	; 0x1c
    3fb6:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1000);
		servo_set_angle_four(180);
    3fb8:	60 e0       	ldi	r22, 0x00	; 0
    3fba:	70 e0       	ldi	r23, 0x00	; 0
    3fbc:	84 e3       	ldi	r24, 0x34	; 52
    3fbe:	93 e4       	ldi	r25, 0x43	; 67
    3fc0:	0e 94 3d 03 	call	0x67a	; 0x67a <servo_set_angle_four>
    3fc4:	80 e0       	ldi	r24, 0x00	; 0
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	aa e7       	ldi	r26, 0x7A	; 122
    3fca:	b4 e4       	ldi	r27, 0x44	; 68
    3fcc:	8d 8f       	std	Y+29, r24	; 0x1d
    3fce:	9e 8f       	std	Y+30, r25	; 0x1e
    3fd0:	af 8f       	std	Y+31, r26	; 0x1f
    3fd2:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	30 e4       	ldi	r19, 0x40	; 64
    3fd8:	4c e1       	ldi	r20, 0x1C	; 28
    3fda:	55 e4       	ldi	r21, 0x45	; 69
    3fdc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3fde:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3fe0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fe2:	98 a1       	ldd	r25, Y+32	; 0x20
    3fe4:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    3fe8:	dc 01       	movw	r26, r24
    3fea:	cb 01       	movw	r24, r22
    3fec:	89 a3       	std	Y+33, r24	; 0x21
    3fee:	9a a3       	std	Y+34, r25	; 0x22
    3ff0:	ab a3       	std	Y+35, r26	; 0x23
    3ff2:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	40 e8       	ldi	r20, 0x80	; 128
    3ffa:	5f e3       	ldi	r21, 0x3F	; 63
    3ffc:	69 a1       	ldd	r22, Y+33	; 0x21
    3ffe:	7a a1       	ldd	r23, Y+34	; 0x22
    4000:	8b a1       	ldd	r24, Y+35	; 0x23
    4002:	9c a1       	ldd	r25, Y+36	; 0x24
    4004:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__cmpsf2>
    4008:	88 23       	and	r24, r24
    400a:	2c f4       	brge	.+10     	; 0x4016 <main+0x248>
		__ticks = 1;
    400c:	81 e0       	ldi	r24, 0x01	; 1
    400e:	90 e0       	ldi	r25, 0x00	; 0
    4010:	9e a3       	std	Y+38, r25	; 0x26
    4012:	8d a3       	std	Y+37, r24	; 0x25
    4014:	3f c0       	rjmp	.+126    	; 0x4094 <main+0x2c6>
	else if (__tmp > 65535)
    4016:	20 e0       	ldi	r18, 0x00	; 0
    4018:	3f ef       	ldi	r19, 0xFF	; 255
    401a:	4f e7       	ldi	r20, 0x7F	; 127
    401c:	57 e4       	ldi	r21, 0x47	; 71
    401e:	69 a1       	ldd	r22, Y+33	; 0x21
    4020:	7a a1       	ldd	r23, Y+34	; 0x22
    4022:	8b a1       	ldd	r24, Y+35	; 0x23
    4024:	9c a1       	ldd	r25, Y+36	; 0x24
    4026:	0e 94 43 22 	call	0x4486	; 0x4486 <__gesf2>
    402a:	18 16       	cp	r1, r24
    402c:	4c f5       	brge	.+82     	; 0x4080 <main+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	40 e2       	ldi	r20, 0x20	; 32
    4034:	51 e4       	ldi	r21, 0x41	; 65
    4036:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4038:	7e 8d       	ldd	r23, Y+30	; 0x1e
    403a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    403c:	98 a1       	ldd	r25, Y+32	; 0x20
    403e:	0e 94 48 22 	call	0x4490	; 0x4490 <__mulsf3>
    4042:	dc 01       	movw	r26, r24
    4044:	cb 01       	movw	r24, r22
    4046:	bc 01       	movw	r22, r24
    4048:	cd 01       	movw	r24, r26
    404a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    404e:	dc 01       	movw	r26, r24
    4050:	cb 01       	movw	r24, r22
    4052:	9e a3       	std	Y+38, r25	; 0x26
    4054:	8d a3       	std	Y+37, r24	; 0x25
    4056:	0f c0       	rjmp	.+30     	; 0x4076 <main+0x2a8>
    4058:	8a ef       	ldi	r24, 0xFA	; 250
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	98 a7       	std	Y+40, r25	; 0x28
    405e:	8f a3       	std	Y+39, r24	; 0x27
    4060:	8f a1       	ldd	r24, Y+39	; 0x27
    4062:	98 a5       	ldd	r25, Y+40	; 0x28
    4064:	01 97       	sbiw	r24, 0x01	; 1
    4066:	f1 f7       	brne	.-4      	; 0x4064 <main+0x296>
    4068:	98 a7       	std	Y+40, r25	; 0x28
    406a:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    406c:	8d a1       	ldd	r24, Y+37	; 0x25
    406e:	9e a1       	ldd	r25, Y+38	; 0x26
    4070:	01 97       	sbiw	r24, 0x01	; 1
    4072:	9e a3       	std	Y+38, r25	; 0x26
    4074:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4076:	8d a1       	ldd	r24, Y+37	; 0x25
    4078:	9e a1       	ldd	r25, Y+38	; 0x26
    407a:	89 2b       	or	r24, r25
    407c:	69 f7       	brne	.-38     	; 0x4058 <main+0x28a>
    407e:	14 c0       	rjmp	.+40     	; 0x40a8 <main+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4080:	69 a1       	ldd	r22, Y+33	; 0x21
    4082:	7a a1       	ldd	r23, Y+34	; 0x22
    4084:	8b a1       	ldd	r24, Y+35	; 0x23
    4086:	9c a1       	ldd	r25, Y+36	; 0x24
    4088:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	9e a3       	std	Y+38, r25	; 0x26
    4092:	8d a3       	std	Y+37, r24	; 0x25
    4094:	8d a1       	ldd	r24, Y+37	; 0x25
    4096:	9e a1       	ldd	r25, Y+38	; 0x26
    4098:	9a a7       	std	Y+42, r25	; 0x2a
    409a:	89 a7       	std	Y+41, r24	; 0x29
    409c:	89 a5       	ldd	r24, Y+41	; 0x29
    409e:	9a a5       	ldd	r25, Y+42	; 0x2a
    40a0:	01 97       	sbiw	r24, 0x01	; 1
    40a2:	f1 f7       	brne	.-4      	; 0x40a0 <main+0x2d2>
    40a4:	9a a7       	std	Y+42, r25	; 0x2a
    40a6:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(1000);
	}
    40a8:	10 cf       	rjmp	.-480    	; 0x3eca <main+0xfc>

000040aa <__udivmodsi4>:
    40aa:	a1 e2       	ldi	r26, 0x21	; 33
    40ac:	1a 2e       	mov	r1, r26
    40ae:	aa 1b       	sub	r26, r26
    40b0:	bb 1b       	sub	r27, r27
    40b2:	fd 01       	movw	r30, r26
    40b4:	0d c0       	rjmp	.+26     	; 0x40d0 <__udivmodsi4_ep>

000040b6 <__udivmodsi4_loop>:
    40b6:	aa 1f       	adc	r26, r26
    40b8:	bb 1f       	adc	r27, r27
    40ba:	ee 1f       	adc	r30, r30
    40bc:	ff 1f       	adc	r31, r31
    40be:	a2 17       	cp	r26, r18
    40c0:	b3 07       	cpc	r27, r19
    40c2:	e4 07       	cpc	r30, r20
    40c4:	f5 07       	cpc	r31, r21
    40c6:	20 f0       	brcs	.+8      	; 0x40d0 <__udivmodsi4_ep>
    40c8:	a2 1b       	sub	r26, r18
    40ca:	b3 0b       	sbc	r27, r19
    40cc:	e4 0b       	sbc	r30, r20
    40ce:	f5 0b       	sbc	r31, r21

000040d0 <__udivmodsi4_ep>:
    40d0:	66 1f       	adc	r22, r22
    40d2:	77 1f       	adc	r23, r23
    40d4:	88 1f       	adc	r24, r24
    40d6:	99 1f       	adc	r25, r25
    40d8:	1a 94       	dec	r1
    40da:	69 f7       	brne	.-38     	; 0x40b6 <__udivmodsi4_loop>
    40dc:	60 95       	com	r22
    40de:	70 95       	com	r23
    40e0:	80 95       	com	r24
    40e2:	90 95       	com	r25
    40e4:	9b 01       	movw	r18, r22
    40e6:	ac 01       	movw	r20, r24
    40e8:	bd 01       	movw	r22, r26
    40ea:	cf 01       	movw	r24, r30
    40ec:	08 95       	ret

000040ee <__subsf3>:
    40ee:	50 58       	subi	r21, 0x80	; 128

000040f0 <__addsf3>:
    40f0:	bb 27       	eor	r27, r27
    40f2:	aa 27       	eor	r26, r26
    40f4:	0e 94 8f 20 	call	0x411e	; 0x411e <__addsf3x>
    40f8:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__fp_round>
    40fc:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fp_pscA>
    4100:	38 f0       	brcs	.+14     	; 0x4110 <__addsf3+0x20>
    4102:	0e 94 02 22 	call	0x4404	; 0x4404 <__fp_pscB>
    4106:	20 f0       	brcs	.+8      	; 0x4110 <__addsf3+0x20>
    4108:	39 f4       	brne	.+14     	; 0x4118 <__addsf3+0x28>
    410a:	9f 3f       	cpi	r25, 0xFF	; 255
    410c:	19 f4       	brne	.+6      	; 0x4114 <__addsf3+0x24>
    410e:	26 f4       	brtc	.+8      	; 0x4118 <__addsf3+0x28>
    4110:	0c 94 f8 21 	jmp	0x43f0	; 0x43f0 <__fp_nan>
    4114:	0e f4       	brtc	.+2      	; 0x4118 <__addsf3+0x28>
    4116:	e0 95       	com	r30
    4118:	e7 fb       	bst	r30, 7
    411a:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__fp_inf>

0000411e <__addsf3x>:
    411e:	e9 2f       	mov	r30, r25
    4120:	0e 94 1a 22 	call	0x4434	; 0x4434 <__fp_split3>
    4124:	58 f3       	brcs	.-42     	; 0x40fc <__addsf3+0xc>
    4126:	ba 17       	cp	r27, r26
    4128:	62 07       	cpc	r22, r18
    412a:	73 07       	cpc	r23, r19
    412c:	84 07       	cpc	r24, r20
    412e:	95 07       	cpc	r25, r21
    4130:	20 f0       	brcs	.+8      	; 0x413a <__addsf3x+0x1c>
    4132:	79 f4       	brne	.+30     	; 0x4152 <__addsf3x+0x34>
    4134:	a6 f5       	brtc	.+104    	; 0x419e <__addsf3x+0x80>
    4136:	0c 94 3c 22 	jmp	0x4478	; 0x4478 <__fp_zero>
    413a:	0e f4       	brtc	.+2      	; 0x413e <__addsf3x+0x20>
    413c:	e0 95       	com	r30
    413e:	0b 2e       	mov	r0, r27
    4140:	ba 2f       	mov	r27, r26
    4142:	a0 2d       	mov	r26, r0
    4144:	0b 01       	movw	r0, r22
    4146:	b9 01       	movw	r22, r18
    4148:	90 01       	movw	r18, r0
    414a:	0c 01       	movw	r0, r24
    414c:	ca 01       	movw	r24, r20
    414e:	a0 01       	movw	r20, r0
    4150:	11 24       	eor	r1, r1
    4152:	ff 27       	eor	r31, r31
    4154:	59 1b       	sub	r21, r25
    4156:	99 f0       	breq	.+38     	; 0x417e <__addsf3x+0x60>
    4158:	59 3f       	cpi	r21, 0xF9	; 249
    415a:	50 f4       	brcc	.+20     	; 0x4170 <__addsf3x+0x52>
    415c:	50 3e       	cpi	r21, 0xE0	; 224
    415e:	68 f1       	brcs	.+90     	; 0x41ba <__addsf3x+0x9c>
    4160:	1a 16       	cp	r1, r26
    4162:	f0 40       	sbci	r31, 0x00	; 0
    4164:	a2 2f       	mov	r26, r18
    4166:	23 2f       	mov	r18, r19
    4168:	34 2f       	mov	r19, r20
    416a:	44 27       	eor	r20, r20
    416c:	58 5f       	subi	r21, 0xF8	; 248
    416e:	f3 cf       	rjmp	.-26     	; 0x4156 <__addsf3x+0x38>
    4170:	46 95       	lsr	r20
    4172:	37 95       	ror	r19
    4174:	27 95       	ror	r18
    4176:	a7 95       	ror	r26
    4178:	f0 40       	sbci	r31, 0x00	; 0
    417a:	53 95       	inc	r21
    417c:	c9 f7       	brne	.-14     	; 0x4170 <__addsf3x+0x52>
    417e:	7e f4       	brtc	.+30     	; 0x419e <__addsf3x+0x80>
    4180:	1f 16       	cp	r1, r31
    4182:	ba 0b       	sbc	r27, r26
    4184:	62 0b       	sbc	r22, r18
    4186:	73 0b       	sbc	r23, r19
    4188:	84 0b       	sbc	r24, r20
    418a:	ba f0       	brmi	.+46     	; 0x41ba <__addsf3x+0x9c>
    418c:	91 50       	subi	r25, 0x01	; 1
    418e:	a1 f0       	breq	.+40     	; 0x41b8 <__addsf3x+0x9a>
    4190:	ff 0f       	add	r31, r31
    4192:	bb 1f       	adc	r27, r27
    4194:	66 1f       	adc	r22, r22
    4196:	77 1f       	adc	r23, r23
    4198:	88 1f       	adc	r24, r24
    419a:	c2 f7       	brpl	.-16     	; 0x418c <__addsf3x+0x6e>
    419c:	0e c0       	rjmp	.+28     	; 0x41ba <__addsf3x+0x9c>
    419e:	ba 0f       	add	r27, r26
    41a0:	62 1f       	adc	r22, r18
    41a2:	73 1f       	adc	r23, r19
    41a4:	84 1f       	adc	r24, r20
    41a6:	48 f4       	brcc	.+18     	; 0x41ba <__addsf3x+0x9c>
    41a8:	87 95       	ror	r24
    41aa:	77 95       	ror	r23
    41ac:	67 95       	ror	r22
    41ae:	b7 95       	ror	r27
    41b0:	f7 95       	ror	r31
    41b2:	9e 3f       	cpi	r25, 0xFE	; 254
    41b4:	08 f0       	brcs	.+2      	; 0x41b8 <__addsf3x+0x9a>
    41b6:	b0 cf       	rjmp	.-160    	; 0x4118 <__addsf3+0x28>
    41b8:	93 95       	inc	r25
    41ba:	88 0f       	add	r24, r24
    41bc:	08 f0       	brcs	.+2      	; 0x41c0 <__addsf3x+0xa2>
    41be:	99 27       	eor	r25, r25
    41c0:	ee 0f       	add	r30, r30
    41c2:	97 95       	ror	r25
    41c4:	87 95       	ror	r24
    41c6:	08 95       	ret

000041c8 <__cmpsf2>:
    41c8:	0e 94 ce 21 	call	0x439c	; 0x439c <__fp_cmp>
    41cc:	08 f4       	brcc	.+2      	; 0x41d0 <__cmpsf2+0x8>
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	08 95       	ret

000041d2 <__divsf3>:
    41d2:	0e 94 fd 20 	call	0x41fa	; 0x41fa <__divsf3x>
    41d6:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__fp_round>
    41da:	0e 94 02 22 	call	0x4404	; 0x4404 <__fp_pscB>
    41de:	58 f0       	brcs	.+22     	; 0x41f6 <__divsf3+0x24>
    41e0:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fp_pscA>
    41e4:	40 f0       	brcs	.+16     	; 0x41f6 <__divsf3+0x24>
    41e6:	29 f4       	brne	.+10     	; 0x41f2 <__divsf3+0x20>
    41e8:	5f 3f       	cpi	r21, 0xFF	; 255
    41ea:	29 f0       	breq	.+10     	; 0x41f6 <__divsf3+0x24>
    41ec:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__fp_inf>
    41f0:	51 11       	cpse	r21, r1
    41f2:	0c 94 3d 22 	jmp	0x447a	; 0x447a <__fp_szero>
    41f6:	0c 94 f8 21 	jmp	0x43f0	; 0x43f0 <__fp_nan>

000041fa <__divsf3x>:
    41fa:	0e 94 1a 22 	call	0x4434	; 0x4434 <__fp_split3>
    41fe:	68 f3       	brcs	.-38     	; 0x41da <__divsf3+0x8>

00004200 <__divsf3_pse>:
    4200:	99 23       	and	r25, r25
    4202:	b1 f3       	breq	.-20     	; 0x41f0 <__divsf3+0x1e>
    4204:	55 23       	and	r21, r21
    4206:	91 f3       	breq	.-28     	; 0x41ec <__divsf3+0x1a>
    4208:	95 1b       	sub	r25, r21
    420a:	55 0b       	sbc	r21, r21
    420c:	bb 27       	eor	r27, r27
    420e:	aa 27       	eor	r26, r26
    4210:	62 17       	cp	r22, r18
    4212:	73 07       	cpc	r23, r19
    4214:	84 07       	cpc	r24, r20
    4216:	38 f0       	brcs	.+14     	; 0x4226 <__divsf3_pse+0x26>
    4218:	9f 5f       	subi	r25, 0xFF	; 255
    421a:	5f 4f       	sbci	r21, 0xFF	; 255
    421c:	22 0f       	add	r18, r18
    421e:	33 1f       	adc	r19, r19
    4220:	44 1f       	adc	r20, r20
    4222:	aa 1f       	adc	r26, r26
    4224:	a9 f3       	breq	.-22     	; 0x4210 <__divsf3_pse+0x10>
    4226:	35 d0       	rcall	.+106    	; 0x4292 <__divsf3_pse+0x92>
    4228:	0e 2e       	mov	r0, r30
    422a:	3a f0       	brmi	.+14     	; 0x423a <__divsf3_pse+0x3a>
    422c:	e0 e8       	ldi	r30, 0x80	; 128
    422e:	32 d0       	rcall	.+100    	; 0x4294 <__divsf3_pse+0x94>
    4230:	91 50       	subi	r25, 0x01	; 1
    4232:	50 40       	sbci	r21, 0x00	; 0
    4234:	e6 95       	lsr	r30
    4236:	00 1c       	adc	r0, r0
    4238:	ca f7       	brpl	.-14     	; 0x422c <__divsf3_pse+0x2c>
    423a:	2b d0       	rcall	.+86     	; 0x4292 <__divsf3_pse+0x92>
    423c:	fe 2f       	mov	r31, r30
    423e:	29 d0       	rcall	.+82     	; 0x4292 <__divsf3_pse+0x92>
    4240:	66 0f       	add	r22, r22
    4242:	77 1f       	adc	r23, r23
    4244:	88 1f       	adc	r24, r24
    4246:	bb 1f       	adc	r27, r27
    4248:	26 17       	cp	r18, r22
    424a:	37 07       	cpc	r19, r23
    424c:	48 07       	cpc	r20, r24
    424e:	ab 07       	cpc	r26, r27
    4250:	b0 e8       	ldi	r27, 0x80	; 128
    4252:	09 f0       	breq	.+2      	; 0x4256 <__divsf3_pse+0x56>
    4254:	bb 0b       	sbc	r27, r27
    4256:	80 2d       	mov	r24, r0
    4258:	bf 01       	movw	r22, r30
    425a:	ff 27       	eor	r31, r31
    425c:	93 58       	subi	r25, 0x83	; 131
    425e:	5f 4f       	sbci	r21, 0xFF	; 255
    4260:	3a f0       	brmi	.+14     	; 0x4270 <__divsf3_pse+0x70>
    4262:	9e 3f       	cpi	r25, 0xFE	; 254
    4264:	51 05       	cpc	r21, r1
    4266:	78 f0       	brcs	.+30     	; 0x4286 <__divsf3_pse+0x86>
    4268:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__fp_inf>
    426c:	0c 94 3d 22 	jmp	0x447a	; 0x447a <__fp_szero>
    4270:	5f 3f       	cpi	r21, 0xFF	; 255
    4272:	e4 f3       	brlt	.-8      	; 0x426c <__divsf3_pse+0x6c>
    4274:	98 3e       	cpi	r25, 0xE8	; 232
    4276:	d4 f3       	brlt	.-12     	; 0x426c <__divsf3_pse+0x6c>
    4278:	86 95       	lsr	r24
    427a:	77 95       	ror	r23
    427c:	67 95       	ror	r22
    427e:	b7 95       	ror	r27
    4280:	f7 95       	ror	r31
    4282:	9f 5f       	subi	r25, 0xFF	; 255
    4284:	c9 f7       	brne	.-14     	; 0x4278 <__divsf3_pse+0x78>
    4286:	88 0f       	add	r24, r24
    4288:	91 1d       	adc	r25, r1
    428a:	96 95       	lsr	r25
    428c:	87 95       	ror	r24
    428e:	97 f9       	bld	r25, 7
    4290:	08 95       	ret
    4292:	e1 e0       	ldi	r30, 0x01	; 1
    4294:	66 0f       	add	r22, r22
    4296:	77 1f       	adc	r23, r23
    4298:	88 1f       	adc	r24, r24
    429a:	bb 1f       	adc	r27, r27
    429c:	62 17       	cp	r22, r18
    429e:	73 07       	cpc	r23, r19
    42a0:	84 07       	cpc	r24, r20
    42a2:	ba 07       	cpc	r27, r26
    42a4:	20 f0       	brcs	.+8      	; 0x42ae <__divsf3_pse+0xae>
    42a6:	62 1b       	sub	r22, r18
    42a8:	73 0b       	sbc	r23, r19
    42aa:	84 0b       	sbc	r24, r20
    42ac:	ba 0b       	sbc	r27, r26
    42ae:	ee 1f       	adc	r30, r30
    42b0:	88 f7       	brcc	.-30     	; 0x4294 <__divsf3_pse+0x94>
    42b2:	e0 95       	com	r30
    42b4:	08 95       	ret

000042b6 <__fixsfsi>:
    42b6:	0e 94 62 21 	call	0x42c4	; 0x42c4 <__fixunssfsi>
    42ba:	68 94       	set
    42bc:	b1 11       	cpse	r27, r1
    42be:	0c 94 3d 22 	jmp	0x447a	; 0x447a <__fp_szero>
    42c2:	08 95       	ret

000042c4 <__fixunssfsi>:
    42c4:	0e 94 22 22 	call	0x4444	; 0x4444 <__fp_splitA>
    42c8:	88 f0       	brcs	.+34     	; 0x42ec <__fixunssfsi+0x28>
    42ca:	9f 57       	subi	r25, 0x7F	; 127
    42cc:	98 f0       	brcs	.+38     	; 0x42f4 <__fixunssfsi+0x30>
    42ce:	b9 2f       	mov	r27, r25
    42d0:	99 27       	eor	r25, r25
    42d2:	b7 51       	subi	r27, 0x17	; 23
    42d4:	b0 f0       	brcs	.+44     	; 0x4302 <__fixunssfsi+0x3e>
    42d6:	e1 f0       	breq	.+56     	; 0x4310 <__fixunssfsi+0x4c>
    42d8:	66 0f       	add	r22, r22
    42da:	77 1f       	adc	r23, r23
    42dc:	88 1f       	adc	r24, r24
    42de:	99 1f       	adc	r25, r25
    42e0:	1a f0       	brmi	.+6      	; 0x42e8 <__fixunssfsi+0x24>
    42e2:	ba 95       	dec	r27
    42e4:	c9 f7       	brne	.-14     	; 0x42d8 <__fixunssfsi+0x14>
    42e6:	14 c0       	rjmp	.+40     	; 0x4310 <__fixunssfsi+0x4c>
    42e8:	b1 30       	cpi	r27, 0x01	; 1
    42ea:	91 f0       	breq	.+36     	; 0x4310 <__fixunssfsi+0x4c>
    42ec:	0e 94 3c 22 	call	0x4478	; 0x4478 <__fp_zero>
    42f0:	b1 e0       	ldi	r27, 0x01	; 1
    42f2:	08 95       	ret
    42f4:	0c 94 3c 22 	jmp	0x4478	; 0x4478 <__fp_zero>
    42f8:	67 2f       	mov	r22, r23
    42fa:	78 2f       	mov	r23, r24
    42fc:	88 27       	eor	r24, r24
    42fe:	b8 5f       	subi	r27, 0xF8	; 248
    4300:	39 f0       	breq	.+14     	; 0x4310 <__fixunssfsi+0x4c>
    4302:	b9 3f       	cpi	r27, 0xF9	; 249
    4304:	cc f3       	brlt	.-14     	; 0x42f8 <__fixunssfsi+0x34>
    4306:	86 95       	lsr	r24
    4308:	77 95       	ror	r23
    430a:	67 95       	ror	r22
    430c:	b3 95       	inc	r27
    430e:	d9 f7       	brne	.-10     	; 0x4306 <__fixunssfsi+0x42>
    4310:	3e f4       	brtc	.+14     	; 0x4320 <__fixunssfsi+0x5c>
    4312:	90 95       	com	r25
    4314:	80 95       	com	r24
    4316:	70 95       	com	r23
    4318:	61 95       	neg	r22
    431a:	7f 4f       	sbci	r23, 0xFF	; 255
    431c:	8f 4f       	sbci	r24, 0xFF	; 255
    431e:	9f 4f       	sbci	r25, 0xFF	; 255
    4320:	08 95       	ret

00004322 <__floatunsisf>:
    4322:	e8 94       	clt
    4324:	09 c0       	rjmp	.+18     	; 0x4338 <__floatsisf+0x12>

00004326 <__floatsisf>:
    4326:	97 fb       	bst	r25, 7
    4328:	3e f4       	brtc	.+14     	; 0x4338 <__floatsisf+0x12>
    432a:	90 95       	com	r25
    432c:	80 95       	com	r24
    432e:	70 95       	com	r23
    4330:	61 95       	neg	r22
    4332:	7f 4f       	sbci	r23, 0xFF	; 255
    4334:	8f 4f       	sbci	r24, 0xFF	; 255
    4336:	9f 4f       	sbci	r25, 0xFF	; 255
    4338:	99 23       	and	r25, r25
    433a:	a9 f0       	breq	.+42     	; 0x4366 <__floatsisf+0x40>
    433c:	f9 2f       	mov	r31, r25
    433e:	96 e9       	ldi	r25, 0x96	; 150
    4340:	bb 27       	eor	r27, r27
    4342:	93 95       	inc	r25
    4344:	f6 95       	lsr	r31
    4346:	87 95       	ror	r24
    4348:	77 95       	ror	r23
    434a:	67 95       	ror	r22
    434c:	b7 95       	ror	r27
    434e:	f1 11       	cpse	r31, r1
    4350:	f8 cf       	rjmp	.-16     	; 0x4342 <__floatsisf+0x1c>
    4352:	fa f4       	brpl	.+62     	; 0x4392 <__floatsisf+0x6c>
    4354:	bb 0f       	add	r27, r27
    4356:	11 f4       	brne	.+4      	; 0x435c <__floatsisf+0x36>
    4358:	60 ff       	sbrs	r22, 0
    435a:	1b c0       	rjmp	.+54     	; 0x4392 <__floatsisf+0x6c>
    435c:	6f 5f       	subi	r22, 0xFF	; 255
    435e:	7f 4f       	sbci	r23, 0xFF	; 255
    4360:	8f 4f       	sbci	r24, 0xFF	; 255
    4362:	9f 4f       	sbci	r25, 0xFF	; 255
    4364:	16 c0       	rjmp	.+44     	; 0x4392 <__floatsisf+0x6c>
    4366:	88 23       	and	r24, r24
    4368:	11 f0       	breq	.+4      	; 0x436e <__floatsisf+0x48>
    436a:	96 e9       	ldi	r25, 0x96	; 150
    436c:	11 c0       	rjmp	.+34     	; 0x4390 <__floatsisf+0x6a>
    436e:	77 23       	and	r23, r23
    4370:	21 f0       	breq	.+8      	; 0x437a <__floatsisf+0x54>
    4372:	9e e8       	ldi	r25, 0x8E	; 142
    4374:	87 2f       	mov	r24, r23
    4376:	76 2f       	mov	r23, r22
    4378:	05 c0       	rjmp	.+10     	; 0x4384 <__floatsisf+0x5e>
    437a:	66 23       	and	r22, r22
    437c:	71 f0       	breq	.+28     	; 0x439a <__floatsisf+0x74>
    437e:	96 e8       	ldi	r25, 0x86	; 134
    4380:	86 2f       	mov	r24, r22
    4382:	70 e0       	ldi	r23, 0x00	; 0
    4384:	60 e0       	ldi	r22, 0x00	; 0
    4386:	2a f0       	brmi	.+10     	; 0x4392 <__floatsisf+0x6c>
    4388:	9a 95       	dec	r25
    438a:	66 0f       	add	r22, r22
    438c:	77 1f       	adc	r23, r23
    438e:	88 1f       	adc	r24, r24
    4390:	da f7       	brpl	.-10     	; 0x4388 <__floatsisf+0x62>
    4392:	88 0f       	add	r24, r24
    4394:	96 95       	lsr	r25
    4396:	87 95       	ror	r24
    4398:	97 f9       	bld	r25, 7
    439a:	08 95       	ret

0000439c <__fp_cmp>:
    439c:	99 0f       	add	r25, r25
    439e:	00 08       	sbc	r0, r0
    43a0:	55 0f       	add	r21, r21
    43a2:	aa 0b       	sbc	r26, r26
    43a4:	e0 e8       	ldi	r30, 0x80	; 128
    43a6:	fe ef       	ldi	r31, 0xFE	; 254
    43a8:	16 16       	cp	r1, r22
    43aa:	17 06       	cpc	r1, r23
    43ac:	e8 07       	cpc	r30, r24
    43ae:	f9 07       	cpc	r31, r25
    43b0:	c0 f0       	brcs	.+48     	; 0x43e2 <__fp_cmp+0x46>
    43b2:	12 16       	cp	r1, r18
    43b4:	13 06       	cpc	r1, r19
    43b6:	e4 07       	cpc	r30, r20
    43b8:	f5 07       	cpc	r31, r21
    43ba:	98 f0       	brcs	.+38     	; 0x43e2 <__fp_cmp+0x46>
    43bc:	62 1b       	sub	r22, r18
    43be:	73 0b       	sbc	r23, r19
    43c0:	84 0b       	sbc	r24, r20
    43c2:	95 0b       	sbc	r25, r21
    43c4:	39 f4       	brne	.+14     	; 0x43d4 <__fp_cmp+0x38>
    43c6:	0a 26       	eor	r0, r26
    43c8:	61 f0       	breq	.+24     	; 0x43e2 <__fp_cmp+0x46>
    43ca:	23 2b       	or	r18, r19
    43cc:	24 2b       	or	r18, r20
    43ce:	25 2b       	or	r18, r21
    43d0:	21 f4       	brne	.+8      	; 0x43da <__fp_cmp+0x3e>
    43d2:	08 95       	ret
    43d4:	0a 26       	eor	r0, r26
    43d6:	09 f4       	brne	.+2      	; 0x43da <__fp_cmp+0x3e>
    43d8:	a1 40       	sbci	r26, 0x01	; 1
    43da:	a6 95       	lsr	r26
    43dc:	8f ef       	ldi	r24, 0xFF	; 255
    43de:	81 1d       	adc	r24, r1
    43e0:	81 1d       	adc	r24, r1
    43e2:	08 95       	ret

000043e4 <__fp_inf>:
    43e4:	97 f9       	bld	r25, 7
    43e6:	9f 67       	ori	r25, 0x7F	; 127
    43e8:	80 e8       	ldi	r24, 0x80	; 128
    43ea:	70 e0       	ldi	r23, 0x00	; 0
    43ec:	60 e0       	ldi	r22, 0x00	; 0
    43ee:	08 95       	ret

000043f0 <__fp_nan>:
    43f0:	9f ef       	ldi	r25, 0xFF	; 255
    43f2:	80 ec       	ldi	r24, 0xC0	; 192
    43f4:	08 95       	ret

000043f6 <__fp_pscA>:
    43f6:	00 24       	eor	r0, r0
    43f8:	0a 94       	dec	r0
    43fa:	16 16       	cp	r1, r22
    43fc:	17 06       	cpc	r1, r23
    43fe:	18 06       	cpc	r1, r24
    4400:	09 06       	cpc	r0, r25
    4402:	08 95       	ret

00004404 <__fp_pscB>:
    4404:	00 24       	eor	r0, r0
    4406:	0a 94       	dec	r0
    4408:	12 16       	cp	r1, r18
    440a:	13 06       	cpc	r1, r19
    440c:	14 06       	cpc	r1, r20
    440e:	05 06       	cpc	r0, r21
    4410:	08 95       	ret

00004412 <__fp_round>:
    4412:	09 2e       	mov	r0, r25
    4414:	03 94       	inc	r0
    4416:	00 0c       	add	r0, r0
    4418:	11 f4       	brne	.+4      	; 0x441e <__fp_round+0xc>
    441a:	88 23       	and	r24, r24
    441c:	52 f0       	brmi	.+20     	; 0x4432 <__fp_round+0x20>
    441e:	bb 0f       	add	r27, r27
    4420:	40 f4       	brcc	.+16     	; 0x4432 <__fp_round+0x20>
    4422:	bf 2b       	or	r27, r31
    4424:	11 f4       	brne	.+4      	; 0x442a <__fp_round+0x18>
    4426:	60 ff       	sbrs	r22, 0
    4428:	04 c0       	rjmp	.+8      	; 0x4432 <__fp_round+0x20>
    442a:	6f 5f       	subi	r22, 0xFF	; 255
    442c:	7f 4f       	sbci	r23, 0xFF	; 255
    442e:	8f 4f       	sbci	r24, 0xFF	; 255
    4430:	9f 4f       	sbci	r25, 0xFF	; 255
    4432:	08 95       	ret

00004434 <__fp_split3>:
    4434:	57 fd       	sbrc	r21, 7
    4436:	90 58       	subi	r25, 0x80	; 128
    4438:	44 0f       	add	r20, r20
    443a:	55 1f       	adc	r21, r21
    443c:	59 f0       	breq	.+22     	; 0x4454 <__fp_splitA+0x10>
    443e:	5f 3f       	cpi	r21, 0xFF	; 255
    4440:	71 f0       	breq	.+28     	; 0x445e <__fp_splitA+0x1a>
    4442:	47 95       	ror	r20

00004444 <__fp_splitA>:
    4444:	88 0f       	add	r24, r24
    4446:	97 fb       	bst	r25, 7
    4448:	99 1f       	adc	r25, r25
    444a:	61 f0       	breq	.+24     	; 0x4464 <__fp_splitA+0x20>
    444c:	9f 3f       	cpi	r25, 0xFF	; 255
    444e:	79 f0       	breq	.+30     	; 0x446e <__fp_splitA+0x2a>
    4450:	87 95       	ror	r24
    4452:	08 95       	ret
    4454:	12 16       	cp	r1, r18
    4456:	13 06       	cpc	r1, r19
    4458:	14 06       	cpc	r1, r20
    445a:	55 1f       	adc	r21, r21
    445c:	f2 cf       	rjmp	.-28     	; 0x4442 <__fp_split3+0xe>
    445e:	46 95       	lsr	r20
    4460:	f1 df       	rcall	.-30     	; 0x4444 <__fp_splitA>
    4462:	08 c0       	rjmp	.+16     	; 0x4474 <__fp_splitA+0x30>
    4464:	16 16       	cp	r1, r22
    4466:	17 06       	cpc	r1, r23
    4468:	18 06       	cpc	r1, r24
    446a:	99 1f       	adc	r25, r25
    446c:	f1 cf       	rjmp	.-30     	; 0x4450 <__fp_splitA+0xc>
    446e:	86 95       	lsr	r24
    4470:	71 05       	cpc	r23, r1
    4472:	61 05       	cpc	r22, r1
    4474:	08 94       	sec
    4476:	08 95       	ret

00004478 <__fp_zero>:
    4478:	e8 94       	clt

0000447a <__fp_szero>:
    447a:	bb 27       	eor	r27, r27
    447c:	66 27       	eor	r22, r22
    447e:	77 27       	eor	r23, r23
    4480:	cb 01       	movw	r24, r22
    4482:	97 f9       	bld	r25, 7
    4484:	08 95       	ret

00004486 <__gesf2>:
    4486:	0e 94 ce 21 	call	0x439c	; 0x439c <__fp_cmp>
    448a:	08 f4       	brcc	.+2      	; 0x448e <__gesf2+0x8>
    448c:	8f ef       	ldi	r24, 0xFF	; 255
    448e:	08 95       	ret

00004490 <__mulsf3>:
    4490:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <__mulsf3x>
    4494:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__fp_round>
    4498:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__fp_pscA>
    449c:	38 f0       	brcs	.+14     	; 0x44ac <__mulsf3+0x1c>
    449e:	0e 94 02 22 	call	0x4404	; 0x4404 <__fp_pscB>
    44a2:	20 f0       	brcs	.+8      	; 0x44ac <__mulsf3+0x1c>
    44a4:	95 23       	and	r25, r21
    44a6:	11 f0       	breq	.+4      	; 0x44ac <__mulsf3+0x1c>
    44a8:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__fp_inf>
    44ac:	0c 94 f8 21 	jmp	0x43f0	; 0x43f0 <__fp_nan>
    44b0:	11 24       	eor	r1, r1
    44b2:	0c 94 3d 22 	jmp	0x447a	; 0x447a <__fp_szero>

000044b6 <__mulsf3x>:
    44b6:	0e 94 1a 22 	call	0x4434	; 0x4434 <__fp_split3>
    44ba:	70 f3       	brcs	.-36     	; 0x4498 <__mulsf3+0x8>

000044bc <__mulsf3_pse>:
    44bc:	95 9f       	mul	r25, r21
    44be:	c1 f3       	breq	.-16     	; 0x44b0 <__mulsf3+0x20>
    44c0:	95 0f       	add	r25, r21
    44c2:	50 e0       	ldi	r21, 0x00	; 0
    44c4:	55 1f       	adc	r21, r21
    44c6:	62 9f       	mul	r22, r18
    44c8:	f0 01       	movw	r30, r0
    44ca:	72 9f       	mul	r23, r18
    44cc:	bb 27       	eor	r27, r27
    44ce:	f0 0d       	add	r31, r0
    44d0:	b1 1d       	adc	r27, r1
    44d2:	63 9f       	mul	r22, r19
    44d4:	aa 27       	eor	r26, r26
    44d6:	f0 0d       	add	r31, r0
    44d8:	b1 1d       	adc	r27, r1
    44da:	aa 1f       	adc	r26, r26
    44dc:	64 9f       	mul	r22, r20
    44de:	66 27       	eor	r22, r22
    44e0:	b0 0d       	add	r27, r0
    44e2:	a1 1d       	adc	r26, r1
    44e4:	66 1f       	adc	r22, r22
    44e6:	82 9f       	mul	r24, r18
    44e8:	22 27       	eor	r18, r18
    44ea:	b0 0d       	add	r27, r0
    44ec:	a1 1d       	adc	r26, r1
    44ee:	62 1f       	adc	r22, r18
    44f0:	73 9f       	mul	r23, r19
    44f2:	b0 0d       	add	r27, r0
    44f4:	a1 1d       	adc	r26, r1
    44f6:	62 1f       	adc	r22, r18
    44f8:	83 9f       	mul	r24, r19
    44fa:	a0 0d       	add	r26, r0
    44fc:	61 1d       	adc	r22, r1
    44fe:	22 1f       	adc	r18, r18
    4500:	74 9f       	mul	r23, r20
    4502:	33 27       	eor	r19, r19
    4504:	a0 0d       	add	r26, r0
    4506:	61 1d       	adc	r22, r1
    4508:	23 1f       	adc	r18, r19
    450a:	84 9f       	mul	r24, r20
    450c:	60 0d       	add	r22, r0
    450e:	21 1d       	adc	r18, r1
    4510:	82 2f       	mov	r24, r18
    4512:	76 2f       	mov	r23, r22
    4514:	6a 2f       	mov	r22, r26
    4516:	11 24       	eor	r1, r1
    4518:	9f 57       	subi	r25, 0x7F	; 127
    451a:	50 40       	sbci	r21, 0x00	; 0
    451c:	9a f0       	brmi	.+38     	; 0x4544 <__mulsf3_pse+0x88>
    451e:	f1 f0       	breq	.+60     	; 0x455c <__mulsf3_pse+0xa0>
    4520:	88 23       	and	r24, r24
    4522:	4a f0       	brmi	.+18     	; 0x4536 <__mulsf3_pse+0x7a>
    4524:	ee 0f       	add	r30, r30
    4526:	ff 1f       	adc	r31, r31
    4528:	bb 1f       	adc	r27, r27
    452a:	66 1f       	adc	r22, r22
    452c:	77 1f       	adc	r23, r23
    452e:	88 1f       	adc	r24, r24
    4530:	91 50       	subi	r25, 0x01	; 1
    4532:	50 40       	sbci	r21, 0x00	; 0
    4534:	a9 f7       	brne	.-22     	; 0x4520 <__mulsf3_pse+0x64>
    4536:	9e 3f       	cpi	r25, 0xFE	; 254
    4538:	51 05       	cpc	r21, r1
    453a:	80 f0       	brcs	.+32     	; 0x455c <__mulsf3_pse+0xa0>
    453c:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__fp_inf>
    4540:	0c 94 3d 22 	jmp	0x447a	; 0x447a <__fp_szero>
    4544:	5f 3f       	cpi	r21, 0xFF	; 255
    4546:	e4 f3       	brlt	.-8      	; 0x4540 <__mulsf3_pse+0x84>
    4548:	98 3e       	cpi	r25, 0xE8	; 232
    454a:	d4 f3       	brlt	.-12     	; 0x4540 <__mulsf3_pse+0x84>
    454c:	86 95       	lsr	r24
    454e:	77 95       	ror	r23
    4550:	67 95       	ror	r22
    4552:	b7 95       	ror	r27
    4554:	f7 95       	ror	r31
    4556:	e7 95       	ror	r30
    4558:	9f 5f       	subi	r25, 0xFF	; 255
    455a:	c1 f7       	brne	.-16     	; 0x454c <__mulsf3_pse+0x90>
    455c:	fe 2b       	or	r31, r30
    455e:	88 0f       	add	r24, r24
    4560:	91 1d       	adc	r25, r1
    4562:	96 95       	lsr	r25
    4564:	87 95       	ror	r24
    4566:	97 f9       	bld	r25, 7
    4568:	08 95       	ret

0000456a <calloc>:
    456a:	0f 93       	push	r16
    456c:	1f 93       	push	r17
    456e:	cf 93       	push	r28
    4570:	df 93       	push	r29
    4572:	86 9f       	mul	r24, r22
    4574:	80 01       	movw	r16, r0
    4576:	87 9f       	mul	r24, r23
    4578:	10 0d       	add	r17, r0
    457a:	96 9f       	mul	r25, r22
    457c:	10 0d       	add	r17, r0
    457e:	11 24       	eor	r1, r1
    4580:	c8 01       	movw	r24, r16
    4582:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <malloc>
    4586:	ec 01       	movw	r28, r24
    4588:	00 97       	sbiw	r24, 0x00	; 0
    458a:	29 f0       	breq	.+10     	; 0x4596 <calloc+0x2c>
    458c:	a8 01       	movw	r20, r16
    458e:	60 e0       	ldi	r22, 0x00	; 0
    4590:	70 e0       	ldi	r23, 0x00	; 0
    4592:	0e 94 fe 23 	call	0x47fc	; 0x47fc <memset>
    4596:	ce 01       	movw	r24, r28
    4598:	df 91       	pop	r29
    459a:	cf 91       	pop	r28
    459c:	1f 91       	pop	r17
    459e:	0f 91       	pop	r16
    45a0:	08 95       	ret

000045a2 <malloc>:
    45a2:	cf 93       	push	r28
    45a4:	df 93       	push	r29
    45a6:	82 30       	cpi	r24, 0x02	; 2
    45a8:	91 05       	cpc	r25, r1
    45aa:	10 f4       	brcc	.+4      	; 0x45b0 <malloc+0xe>
    45ac:	82 e0       	ldi	r24, 0x02	; 2
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	e0 91 81 02 	lds	r30, 0x0281
    45b4:	f0 91 82 02 	lds	r31, 0x0282
    45b8:	20 e0       	ldi	r18, 0x00	; 0
    45ba:	30 e0       	ldi	r19, 0x00	; 0
    45bc:	c0 e0       	ldi	r28, 0x00	; 0
    45be:	d0 e0       	ldi	r29, 0x00	; 0
    45c0:	30 97       	sbiw	r30, 0x00	; 0
    45c2:	11 f1       	breq	.+68     	; 0x4608 <malloc+0x66>
    45c4:	40 81       	ld	r20, Z
    45c6:	51 81       	ldd	r21, Z+1	; 0x01
    45c8:	48 17       	cp	r20, r24
    45ca:	59 07       	cpc	r21, r25
    45cc:	c0 f0       	brcs	.+48     	; 0x45fe <malloc+0x5c>
    45ce:	48 17       	cp	r20, r24
    45d0:	59 07       	cpc	r21, r25
    45d2:	61 f4       	brne	.+24     	; 0x45ec <malloc+0x4a>
    45d4:	82 81       	ldd	r24, Z+2	; 0x02
    45d6:	93 81       	ldd	r25, Z+3	; 0x03
    45d8:	20 97       	sbiw	r28, 0x00	; 0
    45da:	19 f0       	breq	.+6      	; 0x45e2 <malloc+0x40>
    45dc:	9b 83       	std	Y+3, r25	; 0x03
    45de:	8a 83       	std	Y+2, r24	; 0x02
    45e0:	2b c0       	rjmp	.+86     	; 0x4638 <malloc+0x96>
    45e2:	90 93 82 02 	sts	0x0282, r25
    45e6:	80 93 81 02 	sts	0x0281, r24
    45ea:	26 c0       	rjmp	.+76     	; 0x4638 <malloc+0x96>
    45ec:	21 15       	cp	r18, r1
    45ee:	31 05       	cpc	r19, r1
    45f0:	19 f0       	breq	.+6      	; 0x45f8 <malloc+0x56>
    45f2:	42 17       	cp	r20, r18
    45f4:	53 07       	cpc	r21, r19
    45f6:	18 f4       	brcc	.+6      	; 0x45fe <malloc+0x5c>
    45f8:	9a 01       	movw	r18, r20
    45fa:	be 01       	movw	r22, r28
    45fc:	df 01       	movw	r26, r30
    45fe:	ef 01       	movw	r28, r30
    4600:	02 80       	ldd	r0, Z+2	; 0x02
    4602:	f3 81       	ldd	r31, Z+3	; 0x03
    4604:	e0 2d       	mov	r30, r0
    4606:	dc cf       	rjmp	.-72     	; 0x45c0 <malloc+0x1e>
    4608:	21 15       	cp	r18, r1
    460a:	31 05       	cpc	r19, r1
    460c:	09 f1       	breq	.+66     	; 0x4650 <malloc+0xae>
    460e:	28 1b       	sub	r18, r24
    4610:	39 0b       	sbc	r19, r25
    4612:	24 30       	cpi	r18, 0x04	; 4
    4614:	31 05       	cpc	r19, r1
    4616:	90 f4       	brcc	.+36     	; 0x463c <malloc+0x9a>
    4618:	12 96       	adiw	r26, 0x02	; 2
    461a:	8d 91       	ld	r24, X+
    461c:	9c 91       	ld	r25, X
    461e:	13 97       	sbiw	r26, 0x03	; 3
    4620:	61 15       	cp	r22, r1
    4622:	71 05       	cpc	r23, r1
    4624:	21 f0       	breq	.+8      	; 0x462e <malloc+0x8c>
    4626:	fb 01       	movw	r30, r22
    4628:	93 83       	std	Z+3, r25	; 0x03
    462a:	82 83       	std	Z+2, r24	; 0x02
    462c:	04 c0       	rjmp	.+8      	; 0x4636 <malloc+0x94>
    462e:	90 93 82 02 	sts	0x0282, r25
    4632:	80 93 81 02 	sts	0x0281, r24
    4636:	fd 01       	movw	r30, r26
    4638:	32 96       	adiw	r30, 0x02	; 2
    463a:	44 c0       	rjmp	.+136    	; 0x46c4 <malloc+0x122>
    463c:	fd 01       	movw	r30, r26
    463e:	e2 0f       	add	r30, r18
    4640:	f3 1f       	adc	r31, r19
    4642:	81 93       	st	Z+, r24
    4644:	91 93       	st	Z+, r25
    4646:	22 50       	subi	r18, 0x02	; 2
    4648:	31 09       	sbc	r19, r1
    464a:	2d 93       	st	X+, r18
    464c:	3c 93       	st	X, r19
    464e:	3a c0       	rjmp	.+116    	; 0x46c4 <malloc+0x122>
    4650:	20 91 7f 02 	lds	r18, 0x027F
    4654:	30 91 80 02 	lds	r19, 0x0280
    4658:	23 2b       	or	r18, r19
    465a:	41 f4       	brne	.+16     	; 0x466c <malloc+0xca>
    465c:	20 91 02 01 	lds	r18, 0x0102
    4660:	30 91 03 01 	lds	r19, 0x0103
    4664:	30 93 80 02 	sts	0x0280, r19
    4668:	20 93 7f 02 	sts	0x027F, r18
    466c:	20 91 00 01 	lds	r18, 0x0100
    4670:	30 91 01 01 	lds	r19, 0x0101
    4674:	21 15       	cp	r18, r1
    4676:	31 05       	cpc	r19, r1
    4678:	41 f4       	brne	.+16     	; 0x468a <malloc+0xe8>
    467a:	2d b7       	in	r18, 0x3d	; 61
    467c:	3e b7       	in	r19, 0x3e	; 62
    467e:	40 91 04 01 	lds	r20, 0x0104
    4682:	50 91 05 01 	lds	r21, 0x0105
    4686:	24 1b       	sub	r18, r20
    4688:	35 0b       	sbc	r19, r21
    468a:	e0 91 7f 02 	lds	r30, 0x027F
    468e:	f0 91 80 02 	lds	r31, 0x0280
    4692:	e2 17       	cp	r30, r18
    4694:	f3 07       	cpc	r31, r19
    4696:	a0 f4       	brcc	.+40     	; 0x46c0 <malloc+0x11e>
    4698:	2e 1b       	sub	r18, r30
    469a:	3f 0b       	sbc	r19, r31
    469c:	28 17       	cp	r18, r24
    469e:	39 07       	cpc	r19, r25
    46a0:	78 f0       	brcs	.+30     	; 0x46c0 <malloc+0x11e>
    46a2:	ac 01       	movw	r20, r24
    46a4:	4e 5f       	subi	r20, 0xFE	; 254
    46a6:	5f 4f       	sbci	r21, 0xFF	; 255
    46a8:	24 17       	cp	r18, r20
    46aa:	35 07       	cpc	r19, r21
    46ac:	48 f0       	brcs	.+18     	; 0x46c0 <malloc+0x11e>
    46ae:	4e 0f       	add	r20, r30
    46b0:	5f 1f       	adc	r21, r31
    46b2:	50 93 80 02 	sts	0x0280, r21
    46b6:	40 93 7f 02 	sts	0x027F, r20
    46ba:	81 93       	st	Z+, r24
    46bc:	91 93       	st	Z+, r25
    46be:	02 c0       	rjmp	.+4      	; 0x46c4 <malloc+0x122>
    46c0:	e0 e0       	ldi	r30, 0x00	; 0
    46c2:	f0 e0       	ldi	r31, 0x00	; 0
    46c4:	cf 01       	movw	r24, r30
    46c6:	df 91       	pop	r29
    46c8:	cf 91       	pop	r28
    46ca:	08 95       	ret

000046cc <free>:
    46cc:	0f 93       	push	r16
    46ce:	1f 93       	push	r17
    46d0:	cf 93       	push	r28
    46d2:	df 93       	push	r29
    46d4:	00 97       	sbiw	r24, 0x00	; 0
    46d6:	09 f4       	brne	.+2      	; 0x46da <free+0xe>
    46d8:	8c c0       	rjmp	.+280    	; 0x47f2 <free+0x126>
    46da:	fc 01       	movw	r30, r24
    46dc:	32 97       	sbiw	r30, 0x02	; 2
    46de:	13 82       	std	Z+3, r1	; 0x03
    46e0:	12 82       	std	Z+2, r1	; 0x02
    46e2:	00 91 81 02 	lds	r16, 0x0281
    46e6:	10 91 82 02 	lds	r17, 0x0282
    46ea:	01 15       	cp	r16, r1
    46ec:	11 05       	cpc	r17, r1
    46ee:	81 f4       	brne	.+32     	; 0x4710 <free+0x44>
    46f0:	20 81       	ld	r18, Z
    46f2:	31 81       	ldd	r19, Z+1	; 0x01
    46f4:	82 0f       	add	r24, r18
    46f6:	93 1f       	adc	r25, r19
    46f8:	20 91 7f 02 	lds	r18, 0x027F
    46fc:	30 91 80 02 	lds	r19, 0x0280
    4700:	28 17       	cp	r18, r24
    4702:	39 07       	cpc	r19, r25
    4704:	79 f5       	brne	.+94     	; 0x4764 <free+0x98>
    4706:	f0 93 80 02 	sts	0x0280, r31
    470a:	e0 93 7f 02 	sts	0x027F, r30
    470e:	71 c0       	rjmp	.+226    	; 0x47f2 <free+0x126>
    4710:	d8 01       	movw	r26, r16
    4712:	40 e0       	ldi	r20, 0x00	; 0
    4714:	50 e0       	ldi	r21, 0x00	; 0
    4716:	ae 17       	cp	r26, r30
    4718:	bf 07       	cpc	r27, r31
    471a:	50 f4       	brcc	.+20     	; 0x4730 <free+0x64>
    471c:	12 96       	adiw	r26, 0x02	; 2
    471e:	2d 91       	ld	r18, X+
    4720:	3c 91       	ld	r19, X
    4722:	13 97       	sbiw	r26, 0x03	; 3
    4724:	ad 01       	movw	r20, r26
    4726:	21 15       	cp	r18, r1
    4728:	31 05       	cpc	r19, r1
    472a:	09 f1       	breq	.+66     	; 0x476e <free+0xa2>
    472c:	d9 01       	movw	r26, r18
    472e:	f3 cf       	rjmp	.-26     	; 0x4716 <free+0x4a>
    4730:	9d 01       	movw	r18, r26
    4732:	da 01       	movw	r26, r20
    4734:	33 83       	std	Z+3, r19	; 0x03
    4736:	22 83       	std	Z+2, r18	; 0x02
    4738:	60 81       	ld	r22, Z
    473a:	71 81       	ldd	r23, Z+1	; 0x01
    473c:	86 0f       	add	r24, r22
    473e:	97 1f       	adc	r25, r23
    4740:	82 17       	cp	r24, r18
    4742:	93 07       	cpc	r25, r19
    4744:	69 f4       	brne	.+26     	; 0x4760 <free+0x94>
    4746:	ec 01       	movw	r28, r24
    4748:	28 81       	ld	r18, Y
    474a:	39 81       	ldd	r19, Y+1	; 0x01
    474c:	26 0f       	add	r18, r22
    474e:	37 1f       	adc	r19, r23
    4750:	2e 5f       	subi	r18, 0xFE	; 254
    4752:	3f 4f       	sbci	r19, 0xFF	; 255
    4754:	31 83       	std	Z+1, r19	; 0x01
    4756:	20 83       	st	Z, r18
    4758:	8a 81       	ldd	r24, Y+2	; 0x02
    475a:	9b 81       	ldd	r25, Y+3	; 0x03
    475c:	93 83       	std	Z+3, r25	; 0x03
    475e:	82 83       	std	Z+2, r24	; 0x02
    4760:	45 2b       	or	r20, r21
    4762:	29 f4       	brne	.+10     	; 0x476e <free+0xa2>
    4764:	f0 93 82 02 	sts	0x0282, r31
    4768:	e0 93 81 02 	sts	0x0281, r30
    476c:	42 c0       	rjmp	.+132    	; 0x47f2 <free+0x126>
    476e:	13 96       	adiw	r26, 0x03	; 3
    4770:	fc 93       	st	X, r31
    4772:	ee 93       	st	-X, r30
    4774:	12 97       	sbiw	r26, 0x02	; 2
    4776:	ed 01       	movw	r28, r26
    4778:	49 91       	ld	r20, Y+
    477a:	59 91       	ld	r21, Y+
    477c:	9e 01       	movw	r18, r28
    477e:	24 0f       	add	r18, r20
    4780:	35 1f       	adc	r19, r21
    4782:	e2 17       	cp	r30, r18
    4784:	f3 07       	cpc	r31, r19
    4786:	71 f4       	brne	.+28     	; 0x47a4 <free+0xd8>
    4788:	80 81       	ld	r24, Z
    478a:	91 81       	ldd	r25, Z+1	; 0x01
    478c:	84 0f       	add	r24, r20
    478e:	95 1f       	adc	r25, r21
    4790:	02 96       	adiw	r24, 0x02	; 2
    4792:	11 96       	adiw	r26, 0x01	; 1
    4794:	9c 93       	st	X, r25
    4796:	8e 93       	st	-X, r24
    4798:	82 81       	ldd	r24, Z+2	; 0x02
    479a:	93 81       	ldd	r25, Z+3	; 0x03
    479c:	13 96       	adiw	r26, 0x03	; 3
    479e:	9c 93       	st	X, r25
    47a0:	8e 93       	st	-X, r24
    47a2:	12 97       	sbiw	r26, 0x02	; 2
    47a4:	e0 e0       	ldi	r30, 0x00	; 0
    47a6:	f0 e0       	ldi	r31, 0x00	; 0
    47a8:	d8 01       	movw	r26, r16
    47aa:	12 96       	adiw	r26, 0x02	; 2
    47ac:	8d 91       	ld	r24, X+
    47ae:	9c 91       	ld	r25, X
    47b0:	13 97       	sbiw	r26, 0x03	; 3
    47b2:	00 97       	sbiw	r24, 0x00	; 0
    47b4:	19 f0       	breq	.+6      	; 0x47bc <free+0xf0>
    47b6:	f8 01       	movw	r30, r16
    47b8:	8c 01       	movw	r16, r24
    47ba:	f6 cf       	rjmp	.-20     	; 0x47a8 <free+0xdc>
    47bc:	8d 91       	ld	r24, X+
    47be:	9c 91       	ld	r25, X
    47c0:	98 01       	movw	r18, r16
    47c2:	2e 5f       	subi	r18, 0xFE	; 254
    47c4:	3f 4f       	sbci	r19, 0xFF	; 255
    47c6:	82 0f       	add	r24, r18
    47c8:	93 1f       	adc	r25, r19
    47ca:	20 91 7f 02 	lds	r18, 0x027F
    47ce:	30 91 80 02 	lds	r19, 0x0280
    47d2:	28 17       	cp	r18, r24
    47d4:	39 07       	cpc	r19, r25
    47d6:	69 f4       	brne	.+26     	; 0x47f2 <free+0x126>
    47d8:	30 97       	sbiw	r30, 0x00	; 0
    47da:	29 f4       	brne	.+10     	; 0x47e6 <free+0x11a>
    47dc:	10 92 82 02 	sts	0x0282, r1
    47e0:	10 92 81 02 	sts	0x0281, r1
    47e4:	02 c0       	rjmp	.+4      	; 0x47ea <free+0x11e>
    47e6:	13 82       	std	Z+3, r1	; 0x03
    47e8:	12 82       	std	Z+2, r1	; 0x02
    47ea:	10 93 80 02 	sts	0x0280, r17
    47ee:	00 93 7f 02 	sts	0x027F, r16
    47f2:	df 91       	pop	r29
    47f4:	cf 91       	pop	r28
    47f6:	1f 91       	pop	r17
    47f8:	0f 91       	pop	r16
    47fa:	08 95       	ret

000047fc <memset>:
    47fc:	dc 01       	movw	r26, r24
    47fe:	01 c0       	rjmp	.+2      	; 0x4802 <memset+0x6>
    4800:	6d 93       	st	X+, r22
    4802:	41 50       	subi	r20, 0x01	; 1
    4804:	50 40       	sbci	r21, 0x00	; 0
    4806:	e0 f7       	brcc	.-8      	; 0x4800 <memset+0x4>
    4808:	08 95       	ret

0000480a <_exit>:
    480a:	f8 94       	cli

0000480c <__stop_program>:
    480c:	ff cf       	rjmp	.-2      	; 0x480c <__stop_program>
