
EP_Framework_Atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00003f8e  00004022  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000156  0080012e  0080012e  00004050  2**0
                  ALLOC
  3 .stab         00006294  00000000  00000000  00004050  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002283  00000000  00000000  0000a2e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000c567  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000c578  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 1e 18 	jmp	0x303c	; 0x303c <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__vector_23>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <__vector_32>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__vector_34>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ee e8       	ldi	r30, 0x8E	; 142
      a8:	ff e3       	ldi	r31, 0x3F	; 63
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 32       	cpi	r26, 0x2E	; 46
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	ae e2       	ldi	r26, 0x2E	; 46
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a4 38       	cpi	r26, 0x84	; 132
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 28 1c 	call	0x3850	; 0x3850 <main>
      ce:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <act_servo>:
#include "usart.h"
#include "can.h"

//angle -> 0-180

void act_servo(Servo_Act* servo_, uint8_t angle_) {
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
      de:	69 97       	sbiw	r28, 0x19	; 25
      e0:	0f b6       	in	r0, 0x3f	; 63
      e2:	f8 94       	cli
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	0f be       	out	0x3f, r0	; 63
      e8:	cd bf       	out	0x3d, r28	; 61
      ea:	98 8f       	std	Y+24, r25	; 0x18
      ec:	8f 8b       	std	Y+23, r24	; 0x17
      ee:	69 8f       	std	Y+25, r22	; 0x19

	uint8_t buf[8];

	if(servo_->ID == DATTACHED) {
      f0:	8f 89       	ldd	r24, Y+23	; 0x17
      f2:	98 8d       	ldd	r25, Y+24	; 0x18
      f4:	fc 01       	movw	r30, r24
      f6:	80 81       	ld	r24, Z
      f8:	88 23       	and	r24, r24
      fa:	21 f4       	brne	.+8      	; 0x104 <act_servo+0x2e>
		attach_servo(servo_);
      fc:	8f 89       	ldd	r24, Y+23	; 0x17
      fe:	98 8d       	ldd	r25, Y+24	; 0x18
     100:	0e 94 48 01 	call	0x290	; 0x290 <attach_servo>
	}

	buf[0] = 'S'; 			// servo
     104:	83 e5       	ldi	r24, 0x53	; 83
     106:	8f 87       	std	Y+15, r24	; 0x0f
	buf[1] = servo_->ID; 	// the ID
     108:	8f 89       	ldd	r24, Y+23	; 0x17
     10a:	98 8d       	ldd	r25, Y+24	; 0x18
     10c:	fc 01       	movw	r30, r24
     10e:	80 81       	ld	r24, Z
     110:	88 8b       	std	Y+16, r24	; 0x10
	buf[2] = 'C';			// give heads up (control)
     112:	83 e4       	ldi	r24, 0x43	; 67
     114:	89 8b       	std	Y+17, r24	; 0x11
	buf[3] = angle_;		// angle
     116:	89 8d       	ldd	r24, Y+25	; 0x19
     118:	8a 8b       	std	Y+18, r24	; 0x12

	while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     11a:	72 c0       	rjmp	.+228    	; 0x200 <act_servo+0x12a>
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	a8 e4       	ldi	r26, 0x48	; 72
     122:	b2 e4       	ldi	r27, 0x42	; 66
     124:	89 83       	std	Y+1, r24	; 0x01
     126:	9a 83       	std	Y+2, r25	; 0x02
     128:	ab 83       	std	Y+3, r26	; 0x03
     12a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e4       	ldi	r19, 0x40	; 64
     130:	4c e1       	ldi	r20, 0x1C	; 28
     132:	55 e4       	ldi	r21, 0x45	; 69
     134:	69 81       	ldd	r22, Y+1	; 0x01
     136:	7a 81       	ldd	r23, Y+2	; 0x02
     138:	8b 81       	ldd	r24, Y+3	; 0x03
     13a:	9c 81       	ldd	r25, Y+4	; 0x04
     13c:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     140:	dc 01       	movw	r26, r24
     142:	cb 01       	movw	r24, r22
     144:	8d 83       	std	Y+5, r24	; 0x05
     146:	9e 83       	std	Y+6, r25	; 0x06
     148:	af 83       	std	Y+7, r26	; 0x07
     14a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	40 e8       	ldi	r20, 0x80	; 128
     152:	5f e3       	ldi	r21, 0x3F	; 63
     154:	6d 81       	ldd	r22, Y+5	; 0x05
     156:	7e 81       	ldd	r23, Y+6	; 0x06
     158:	8f 81       	ldd	r24, Y+7	; 0x07
     15a:	98 85       	ldd	r25, Y+8	; 0x08
     15c:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
     160:	88 23       	and	r24, r24
     162:	2c f4       	brge	.+10     	; 0x16e <act_servo+0x98>
		__ticks = 1;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	9a 87       	std	Y+10, r25	; 0x0a
     16a:	89 87       	std	Y+9, r24	; 0x09
     16c:	3f c0       	rjmp	.+126    	; 0x1ec <act_servo+0x116>
	else if (__tmp > 65535)
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	3f ef       	ldi	r19, 0xFF	; 255
     172:	4f e7       	ldi	r20, 0x7F	; 127
     174:	57 e4       	ldi	r21, 0x47	; 71
     176:	6d 81       	ldd	r22, Y+5	; 0x05
     178:	7e 81       	ldd	r23, Y+6	; 0x06
     17a:	8f 81       	ldd	r24, Y+7	; 0x07
     17c:	98 85       	ldd	r25, Y+8	; 0x08
     17e:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
     182:	18 16       	cp	r1, r24
     184:	4c f5       	brge	.+82     	; 0x1d8 <act_servo+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	40 e2       	ldi	r20, 0x20	; 32
     18c:	51 e4       	ldi	r21, 0x41	; 65
     18e:	69 81       	ldd	r22, Y+1	; 0x01
     190:	7a 81       	ldd	r23, Y+2	; 0x02
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	9c 81       	ldd	r25, Y+4	; 0x04
     196:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     19a:	dc 01       	movw	r26, r24
     19c:	cb 01       	movw	r24, r22
     19e:	bc 01       	movw	r22, r24
     1a0:	cd 01       	movw	r24, r26
     1a2:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     1a6:	dc 01       	movw	r26, r24
     1a8:	cb 01       	movw	r24, r22
     1aa:	9a 87       	std	Y+10, r25	; 0x0a
     1ac:	89 87       	std	Y+9, r24	; 0x09
     1ae:	0f c0       	rjmp	.+30     	; 0x1ce <act_servo+0xf8>
     1b0:	8a ef       	ldi	r24, 0xFA	; 250
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	9c 87       	std	Y+12, r25	; 0x0c
     1b6:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     1ba:	9c 85       	ldd	r25, Y+12	; 0x0c
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	f1 f7       	brne	.-4      	; 0x1bc <act_servo+0xe6>
     1c0:	9c 87       	std	Y+12, r25	; 0x0c
     1c2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1c4:	89 85       	ldd	r24, Y+9	; 0x09
     1c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	9a 87       	std	Y+10, r25	; 0x0a
     1cc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ce:	89 85       	ldd	r24, Y+9	; 0x09
     1d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     1d2:	89 2b       	or	r24, r25
     1d4:	69 f7       	brne	.-38     	; 0x1b0 <act_servo+0xda>
     1d6:	14 c0       	rjmp	.+40     	; 0x200 <act_servo+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1d8:	6d 81       	ldd	r22, Y+5	; 0x05
     1da:	7e 81       	ldd	r23, Y+6	; 0x06
     1dc:	8f 81       	ldd	r24, Y+7	; 0x07
     1de:	98 85       	ldd	r25, Y+8	; 0x08
     1e0:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     1e4:	dc 01       	movw	r26, r24
     1e6:	cb 01       	movw	r24, r22
     1e8:	9a 87       	std	Y+10, r25	; 0x0a
     1ea:	89 87       	std	Y+9, r24	; 0x09
     1ec:	89 85       	ldd	r24, Y+9	; 0x09
     1ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     1f0:	9e 87       	std	Y+14, r25	; 0x0e
     1f2:	8d 87       	std	Y+13, r24	; 0x0d
     1f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     1f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <act_servo+0x122>
     1fc:	9e 87       	std	Y+14, r25	; 0x0e
     1fe:	8d 87       	std	Y+13, r24	; 0x0d
     200:	ce 01       	movw	r24, r28
     202:	0f 96       	adiw	r24, 0x0f	; 15
     204:	64 ed       	ldi	r22, 0xD4	; 212
     206:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     20a:	88 23       	and	r24, r24
     20c:	09 f0       	breq	.+2      	; 0x210 <act_servo+0x13a>
     20e:	86 cf       	rjmp	.-244    	; 0x11c <act_servo+0x46>
			_delay_ms(50);

	servo_->angle = angle_;
     210:	8f 89       	ldd	r24, Y+23	; 0x17
     212:	98 8d       	ldd	r25, Y+24	; 0x18
     214:	29 8d       	ldd	r18, Y+25	; 0x19
     216:	fc 01       	movw	r30, r24
     218:	21 83       	std	Z+1, r18	; 0x01

}
     21a:	69 96       	adiw	r28, 0x19	; 25
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	f8 94       	cli
     220:	de bf       	out	0x3e, r29	; 62
     222:	0f be       	out	0x3f, r0	; 63
     224:	cd bf       	out	0x3d, r28	; 61
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <setup_servo>:
	void setup_servo(Servo_Act* servo_, uint8_t ID_, uint8_t angle_, unsigned send) {
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	00 d0       	rcall	.+0      	; 0x232 <setup_servo+0x6>
     232:	00 d0       	rcall	.+0      	; 0x234 <setup_servo+0x8>
     234:	00 d0       	rcall	.+0      	; 0x236 <setup_servo+0xa>
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	9a 83       	std	Y+2, r25	; 0x02
     23c:	89 83       	std	Y+1, r24	; 0x01
     23e:	6b 83       	std	Y+3, r22	; 0x03
     240:	4c 83       	std	Y+4, r20	; 0x04
     242:	3e 83       	std	Y+6, r19	; 0x06
     244:	2d 83       	std	Y+5, r18	; 0x05

		servo_->ID 		= ID_;
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	9a 81       	ldd	r25, Y+2	; 0x02
     24a:	2b 81       	ldd	r18, Y+3	; 0x03
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18
		servo_->angle 	= angle_;
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	9a 81       	ldd	r25, Y+2	; 0x02
     254:	2c 81       	ldd	r18, Y+4	; 0x04
     256:	fc 01       	movw	r30, r24
     258:	21 83       	std	Z+1, r18	; 0x01

		if(send) {
     25a:	8d 81       	ldd	r24, Y+5	; 0x05
     25c:	9e 81       	ldd	r25, Y+6	; 0x06
     25e:	89 2b       	or	r24, r25
     260:	51 f0       	breq	.+20     	; 0x276 <setup_servo+0x4a>
			attach_servo(servo_);
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	0e 94 48 01 	call	0x290	; 0x290 <attach_servo>
			act_servo(servo_, angle_);
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	9a 81       	ldd	r25, Y+2	; 0x02
     26e:	6c 81       	ldd	r22, Y+4	; 0x04
     270:	0e 94 6b 00 	call	0xd6	; 0xd6 <act_servo>
     274:	04 c0       	rjmp	.+8      	; 0x27e <setup_servo+0x52>
		} else {
			detach_servo(servo_);
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	9a 81       	ldd	r25, Y+2	; 0x02
     27a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <detach_servo>
		}

	}
     27e:	26 96       	adiw	r28, 0x06	; 6
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	f8 94       	cli
     284:	de bf       	out	0x3e, r29	; 62
     286:	0f be       	out	0x3f, r0	; 63
     288:	cd bf       	out	0x3d, r28	; 61
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	08 95       	ret

00000290 <attach_servo>:

	void attach_servo(Servo_Act* servo_) {
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	68 97       	sbiw	r28, 0x18	; 24
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	98 8f       	std	Y+24, r25	; 0x18
     2a6:	8f 8b       	std	Y+23, r24	; 0x17

		uint8_t buf[8];

		buf[0] = 'S'; 			// servo
     2a8:	83 e5       	ldi	r24, 0x53	; 83
     2aa:	8f 87       	std	Y+15, r24	; 0x0f
		buf[1] = servo_->ID; 	// the ID
     2ac:	8f 89       	ldd	r24, Y+23	; 0x17
     2ae:	98 8d       	ldd	r25, Y+24	; 0x18
     2b0:	fc 01       	movw	r30, r24
     2b2:	80 81       	ld	r24, Z
     2b4:	88 8b       	std	Y+16, r24	; 0x10
		buf[2] = 'S';			// give heads up (status)
     2b6:	83 e5       	ldi	r24, 0x53	; 83
     2b8:	89 8b       	std	Y+17, r24	; 0x11
		buf[3] = 'A';			// attach
     2ba:	81 e4       	ldi	r24, 0x41	; 65
     2bc:	8a 8b       	std	Y+18, r24	; 0x12

		while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     2be:	72 c0       	rjmp	.+228    	; 0x3a4 <attach_servo+0x114>
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	a8 e4       	ldi	r26, 0x48	; 72
     2c6:	b2 e4       	ldi	r27, 0x42	; 66
     2c8:	89 83       	std	Y+1, r24	; 0x01
     2ca:	9a 83       	std	Y+2, r25	; 0x02
     2cc:	ab 83       	std	Y+3, r26	; 0x03
     2ce:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e4       	ldi	r19, 0x40	; 64
     2d4:	4c e1       	ldi	r20, 0x1C	; 28
     2d6:	55 e4       	ldi	r21, 0x45	; 69
     2d8:	69 81       	ldd	r22, Y+1	; 0x01
     2da:	7a 81       	ldd	r23, Y+2	; 0x02
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	9c 81       	ldd	r25, Y+4	; 0x04
     2e0:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     2e4:	dc 01       	movw	r26, r24
     2e6:	cb 01       	movw	r24, r22
     2e8:	8d 83       	std	Y+5, r24	; 0x05
     2ea:	9e 83       	std	Y+6, r25	; 0x06
     2ec:	af 83       	std	Y+7, r26	; 0x07
     2ee:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 e8       	ldi	r20, 0x80	; 128
     2f6:	5f e3       	ldi	r21, 0x3F	; 63
     2f8:	6d 81       	ldd	r22, Y+5	; 0x05
     2fa:	7e 81       	ldd	r23, Y+6	; 0x06
     2fc:	8f 81       	ldd	r24, Y+7	; 0x07
     2fe:	98 85       	ldd	r25, Y+8	; 0x08
     300:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
     304:	88 23       	and	r24, r24
     306:	2c f4       	brge	.+10     	; 0x312 <attach_servo+0x82>
		__ticks = 1;
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	9a 87       	std	Y+10, r25	; 0x0a
     30e:	89 87       	std	Y+9, r24	; 0x09
     310:	3f c0       	rjmp	.+126    	; 0x390 <attach_servo+0x100>
	else if (__tmp > 65535)
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	3f ef       	ldi	r19, 0xFF	; 255
     316:	4f e7       	ldi	r20, 0x7F	; 127
     318:	57 e4       	ldi	r21, 0x47	; 71
     31a:	6d 81       	ldd	r22, Y+5	; 0x05
     31c:	7e 81       	ldd	r23, Y+6	; 0x06
     31e:	8f 81       	ldd	r24, Y+7	; 0x07
     320:	98 85       	ldd	r25, Y+8	; 0x08
     322:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
     326:	18 16       	cp	r1, r24
     328:	4c f5       	brge	.+82     	; 0x37c <attach_servo+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	40 e2       	ldi	r20, 0x20	; 32
     330:	51 e4       	ldi	r21, 0x41	; 65
     332:	69 81       	ldd	r22, Y+1	; 0x01
     334:	7a 81       	ldd	r23, Y+2	; 0x02
     336:	8b 81       	ldd	r24, Y+3	; 0x03
     338:	9c 81       	ldd	r25, Y+4	; 0x04
     33a:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     33e:	dc 01       	movw	r26, r24
     340:	cb 01       	movw	r24, r22
     342:	bc 01       	movw	r22, r24
     344:	cd 01       	movw	r24, r26
     346:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     34a:	dc 01       	movw	r26, r24
     34c:	cb 01       	movw	r24, r22
     34e:	9a 87       	std	Y+10, r25	; 0x0a
     350:	89 87       	std	Y+9, r24	; 0x09
     352:	0f c0       	rjmp	.+30     	; 0x372 <attach_servo+0xe2>
     354:	8a ef       	ldi	r24, 0xFA	; 250
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	9c 87       	std	Y+12, r25	; 0x0c
     35a:	8b 87       	std	Y+11, r24	; 0x0b
     35c:	8b 85       	ldd	r24, Y+11	; 0x0b
     35e:	9c 85       	ldd	r25, Y+12	; 0x0c
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	f1 f7       	brne	.-4      	; 0x360 <attach_servo+0xd0>
     364:	9c 87       	std	Y+12, r25	; 0x0c
     366:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     368:	89 85       	ldd	r24, Y+9	; 0x09
     36a:	9a 85       	ldd	r25, Y+10	; 0x0a
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	9a 87       	std	Y+10, r25	; 0x0a
     370:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     372:	89 85       	ldd	r24, Y+9	; 0x09
     374:	9a 85       	ldd	r25, Y+10	; 0x0a
     376:	89 2b       	or	r24, r25
     378:	69 f7       	brne	.-38     	; 0x354 <attach_servo+0xc4>
     37a:	14 c0       	rjmp	.+40     	; 0x3a4 <attach_servo+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     37c:	6d 81       	ldd	r22, Y+5	; 0x05
     37e:	7e 81       	ldd	r23, Y+6	; 0x06
     380:	8f 81       	ldd	r24, Y+7	; 0x07
     382:	98 85       	ldd	r25, Y+8	; 0x08
     384:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	9a 87       	std	Y+10, r25	; 0x0a
     38e:	89 87       	std	Y+9, r24	; 0x09
     390:	89 85       	ldd	r24, Y+9	; 0x09
     392:	9a 85       	ldd	r25, Y+10	; 0x0a
     394:	9e 87       	std	Y+14, r25	; 0x0e
     396:	8d 87       	std	Y+13, r24	; 0x0d
     398:	8d 85       	ldd	r24, Y+13	; 0x0d
     39a:	9e 85       	ldd	r25, Y+14	; 0x0e
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <attach_servo+0x10c>
     3a0:	9e 87       	std	Y+14, r25	; 0x0e
     3a2:	8d 87       	std	Y+13, r24	; 0x0d
     3a4:	ce 01       	movw	r24, r28
     3a6:	0f 96       	adiw	r24, 0x0f	; 15
     3a8:	64 ed       	ldi	r22, 0xD4	; 212
     3aa:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     3ae:	88 23       	and	r24, r24
     3b0:	09 f0       	breq	.+2      	; 0x3b4 <attach_servo+0x124>
     3b2:	86 cf       	rjmp	.-244    	; 0x2c0 <attach_servo+0x30>
					_delay_ms(50);

		servo_->status = ATTACHED;
     3b4:	8f 89       	ldd	r24, Y+23	; 0x17
     3b6:	98 8d       	ldd	r25, Y+24	; 0x18
     3b8:	21 e0       	ldi	r18, 0x01	; 1
     3ba:	fc 01       	movw	r30, r24
     3bc:	22 83       	std	Z+2, r18	; 0x02

	}
     3be:	68 96       	adiw	r28, 0x18	; 24
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <detach_servo>:

	void detach_servo(Servo_Act* servo_) {
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	68 97       	sbiw	r28, 0x18	; 24
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	98 8f       	std	Y+24, r25	; 0x18
     3e6:	8f 8b       	std	Y+23, r24	; 0x17

		uint8_t buf[8];

		buf[0] = 'S'; 			// servo
     3e8:	83 e5       	ldi	r24, 0x53	; 83
     3ea:	8f 87       	std	Y+15, r24	; 0x0f
		buf[1] = servo_->ID; 	// the ID
     3ec:	8f 89       	ldd	r24, Y+23	; 0x17
     3ee:	98 8d       	ldd	r25, Y+24	; 0x18
     3f0:	fc 01       	movw	r30, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	88 8b       	std	Y+16, r24	; 0x10
		buf[2] = 'S';			// give heads up (status)
     3f6:	83 e5       	ldi	r24, 0x53	; 83
     3f8:	89 8b       	std	Y+17, r24	; 0x11
		buf[3] = 'D';			// deattach
     3fa:	84 e4       	ldi	r24, 0x44	; 68
     3fc:	8a 8b       	std	Y+18, r24	; 0x12

		while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     3fe:	72 c0       	rjmp	.+228    	; 0x4e4 <detach_servo+0x114>
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	a8 e4       	ldi	r26, 0x48	; 72
     406:	b2 e4       	ldi	r27, 0x42	; 66
     408:	89 83       	std	Y+1, r24	; 0x01
     40a:	9a 83       	std	Y+2, r25	; 0x02
     40c:	ab 83       	std	Y+3, r26	; 0x03
     40e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e4       	ldi	r19, 0x40	; 64
     414:	4c e1       	ldi	r20, 0x1C	; 28
     416:	55 e4       	ldi	r21, 0x45	; 69
     418:	69 81       	ldd	r22, Y+1	; 0x01
     41a:	7a 81       	ldd	r23, Y+2	; 0x02
     41c:	8b 81       	ldd	r24, Y+3	; 0x03
     41e:	9c 81       	ldd	r25, Y+4	; 0x04
     420:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	8d 83       	std	Y+5, r24	; 0x05
     42a:	9e 83       	std	Y+6, r25	; 0x06
     42c:	af 83       	std	Y+7, r26	; 0x07
     42e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	40 e8       	ldi	r20, 0x80	; 128
     436:	5f e3       	ldi	r21, 0x3F	; 63
     438:	6d 81       	ldd	r22, Y+5	; 0x05
     43a:	7e 81       	ldd	r23, Y+6	; 0x06
     43c:	8f 81       	ldd	r24, Y+7	; 0x07
     43e:	98 85       	ldd	r25, Y+8	; 0x08
     440:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
     444:	88 23       	and	r24, r24
     446:	2c f4       	brge	.+10     	; 0x452 <detach_servo+0x82>
		__ticks = 1;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	9a 87       	std	Y+10, r25	; 0x0a
     44e:	89 87       	std	Y+9, r24	; 0x09
     450:	3f c0       	rjmp	.+126    	; 0x4d0 <detach_servo+0x100>
	else if (__tmp > 65535)
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	3f ef       	ldi	r19, 0xFF	; 255
     456:	4f e7       	ldi	r20, 0x7F	; 127
     458:	57 e4       	ldi	r21, 0x47	; 71
     45a:	6d 81       	ldd	r22, Y+5	; 0x05
     45c:	7e 81       	ldd	r23, Y+6	; 0x06
     45e:	8f 81       	ldd	r24, Y+7	; 0x07
     460:	98 85       	ldd	r25, Y+8	; 0x08
     462:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
     466:	18 16       	cp	r1, r24
     468:	4c f5       	brge	.+82     	; 0x4bc <detach_servo+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	40 e2       	ldi	r20, 0x20	; 32
     470:	51 e4       	ldi	r21, 0x41	; 65
     472:	69 81       	ldd	r22, Y+1	; 0x01
     474:	7a 81       	ldd	r23, Y+2	; 0x02
     476:	8b 81       	ldd	r24, Y+3	; 0x03
     478:	9c 81       	ldd	r25, Y+4	; 0x04
     47a:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     47e:	dc 01       	movw	r26, r24
     480:	cb 01       	movw	r24, r22
     482:	bc 01       	movw	r22, r24
     484:	cd 01       	movw	r24, r26
     486:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     48a:	dc 01       	movw	r26, r24
     48c:	cb 01       	movw	r24, r22
     48e:	9a 87       	std	Y+10, r25	; 0x0a
     490:	89 87       	std	Y+9, r24	; 0x09
     492:	0f c0       	rjmp	.+30     	; 0x4b2 <detach_servo+0xe2>
     494:	8a ef       	ldi	r24, 0xFA	; 250
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	9c 87       	std	Y+12, r25	; 0x0c
     49a:	8b 87       	std	Y+11, r24	; 0x0b
     49c:	8b 85       	ldd	r24, Y+11	; 0x0b
     49e:	9c 85       	ldd	r25, Y+12	; 0x0c
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <detach_servo+0xd0>
     4a4:	9c 87       	std	Y+12, r25	; 0x0c
     4a6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a8:	89 85       	ldd	r24, Y+9	; 0x09
     4aa:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ac:	01 97       	sbiw	r24, 0x01	; 1
     4ae:	9a 87       	std	Y+10, r25	; 0x0a
     4b0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4b2:	89 85       	ldd	r24, Y+9	; 0x09
     4b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b6:	89 2b       	or	r24, r25
     4b8:	69 f7       	brne	.-38     	; 0x494 <detach_servo+0xc4>
     4ba:	14 c0       	rjmp	.+40     	; 0x4e4 <detach_servo+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4bc:	6d 81       	ldd	r22, Y+5	; 0x05
     4be:	7e 81       	ldd	r23, Y+6	; 0x06
     4c0:	8f 81       	ldd	r24, Y+7	; 0x07
     4c2:	98 85       	ldd	r25, Y+8	; 0x08
     4c4:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     4c8:	dc 01       	movw	r26, r24
     4ca:	cb 01       	movw	r24, r22
     4cc:	9a 87       	std	Y+10, r25	; 0x0a
     4ce:	89 87       	std	Y+9, r24	; 0x09
     4d0:	89 85       	ldd	r24, Y+9	; 0x09
     4d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4d4:	9e 87       	std	Y+14, r25	; 0x0e
     4d6:	8d 87       	std	Y+13, r24	; 0x0d
     4d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     4da:	9e 85       	ldd	r25, Y+14	; 0x0e
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <detach_servo+0x10c>
     4e0:	9e 87       	std	Y+14, r25	; 0x0e
     4e2:	8d 87       	std	Y+13, r24	; 0x0d
     4e4:	ce 01       	movw	r24, r28
     4e6:	0f 96       	adiw	r24, 0x0f	; 15
     4e8:	64 ed       	ldi	r22, 0xD4	; 212
     4ea:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     4ee:	88 23       	and	r24, r24
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <detach_servo+0x124>
     4f2:	86 cf       	rjmp	.-244    	; 0x400 <detach_servo+0x30>
					_delay_ms(50);

		servo_->status = DATTACHED;
     4f4:	8f 89       	ldd	r24, Y+23	; 0x17
     4f6:	98 8d       	ldd	r25, Y+24	; 0x18
     4f8:	fc 01       	movw	r30, r24
     4fa:	12 82       	std	Z+2, r1	; 0x02
	}
     4fc:	68 96       	adiw	r28, 0x18	; 24
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <act_relay>:

void act_relay(Relay_Act* relay_info) {
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	68 97       	sbiw	r28, 0x18	; 24
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
     522:	98 8f       	std	Y+24, r25	; 0x18
     524:	8f 8b       	std	Y+23, r24	; 0x17

	//relay_info.status = WAITING;

	uint8_t buf[8];

	buf[0] = 'R';
     526:	82 e5       	ldi	r24, 0x52	; 82
     528:	8f 87       	std	Y+15, r24	; 0x0f
	buf[1] = relay_info->ID;
     52a:	8f 89       	ldd	r24, Y+23	; 0x17
     52c:	98 8d       	ldd	r25, Y+24	; 0x18
     52e:	fc 01       	movw	r30, r24
     530:	80 81       	ld	r24, Z
     532:	88 8b       	std	Y+16, r24	; 0x10
	buf[2] = relay_info->state;
     534:	8f 89       	ldd	r24, Y+23	; 0x17
     536:	98 8d       	ldd	r25, Y+24	; 0x18
     538:	fc 01       	movw	r30, r24
     53a:	81 81       	ldd	r24, Z+1	; 0x01
     53c:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     53e:	72 c0       	rjmp	.+228    	; 0x624 <act_relay+0x116>
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	a8 e4       	ldi	r26, 0x48	; 72
     546:	b2 e4       	ldi	r27, 0x42	; 66
     548:	89 83       	std	Y+1, r24	; 0x01
     54a:	9a 83       	std	Y+2, r25	; 0x02
     54c:	ab 83       	std	Y+3, r26	; 0x03
     54e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e4       	ldi	r19, 0x40	; 64
     554:	4c e1       	ldi	r20, 0x1C	; 28
     556:	55 e4       	ldi	r21, 0x45	; 69
     558:	69 81       	ldd	r22, Y+1	; 0x01
     55a:	7a 81       	ldd	r23, Y+2	; 0x02
     55c:	8b 81       	ldd	r24, Y+3	; 0x03
     55e:	9c 81       	ldd	r25, Y+4	; 0x04
     560:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     564:	dc 01       	movw	r26, r24
     566:	cb 01       	movw	r24, r22
     568:	8d 83       	std	Y+5, r24	; 0x05
     56a:	9e 83       	std	Y+6, r25	; 0x06
     56c:	af 83       	std	Y+7, r26	; 0x07
     56e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e8       	ldi	r20, 0x80	; 128
     576:	5f e3       	ldi	r21, 0x3F	; 63
     578:	6d 81       	ldd	r22, Y+5	; 0x05
     57a:	7e 81       	ldd	r23, Y+6	; 0x06
     57c:	8f 81       	ldd	r24, Y+7	; 0x07
     57e:	98 85       	ldd	r25, Y+8	; 0x08
     580:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
     584:	88 23       	and	r24, r24
     586:	2c f4       	brge	.+10     	; 0x592 <act_relay+0x84>
		__ticks = 1;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	9a 87       	std	Y+10, r25	; 0x0a
     58e:	89 87       	std	Y+9, r24	; 0x09
     590:	3f c0       	rjmp	.+126    	; 0x610 <act_relay+0x102>
	else if (__tmp > 65535)
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	3f ef       	ldi	r19, 0xFF	; 255
     596:	4f e7       	ldi	r20, 0x7F	; 127
     598:	57 e4       	ldi	r21, 0x47	; 71
     59a:	6d 81       	ldd	r22, Y+5	; 0x05
     59c:	7e 81       	ldd	r23, Y+6	; 0x06
     59e:	8f 81       	ldd	r24, Y+7	; 0x07
     5a0:	98 85       	ldd	r25, Y+8	; 0x08
     5a2:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
     5a6:	18 16       	cp	r1, r24
     5a8:	4c f5       	brge	.+82     	; 0x5fc <act_relay+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	40 e2       	ldi	r20, 0x20	; 32
     5b0:	51 e4       	ldi	r21, 0x41	; 65
     5b2:	69 81       	ldd	r22, Y+1	; 0x01
     5b4:	7a 81       	ldd	r23, Y+2	; 0x02
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ba:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	bc 01       	movw	r22, r24
     5c4:	cd 01       	movw	r24, r26
     5c6:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     5ca:	dc 01       	movw	r26, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	9a 87       	std	Y+10, r25	; 0x0a
     5d0:	89 87       	std	Y+9, r24	; 0x09
     5d2:	0f c0       	rjmp	.+30     	; 0x5f2 <act_relay+0xe4>
     5d4:	8a ef       	ldi	r24, 0xFA	; 250
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	9c 87       	std	Y+12, r25	; 0x0c
     5da:	8b 87       	std	Y+11, r24	; 0x0b
     5dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     5de:	9c 85       	ldd	r25, Y+12	; 0x0c
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <act_relay+0xd2>
     5e4:	9c 87       	std	Y+12, r25	; 0x0c
     5e6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e8:	89 85       	ldd	r24, Y+9	; 0x09
     5ea:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	9a 87       	std	Y+10, r25	; 0x0a
     5f0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f2:	89 85       	ldd	r24, Y+9	; 0x09
     5f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5f6:	89 2b       	or	r24, r25
     5f8:	69 f7       	brne	.-38     	; 0x5d4 <act_relay+0xc6>
     5fa:	14 c0       	rjmp	.+40     	; 0x624 <act_relay+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5fc:	6d 81       	ldd	r22, Y+5	; 0x05
     5fe:	7e 81       	ldd	r23, Y+6	; 0x06
     600:	8f 81       	ldd	r24, Y+7	; 0x07
     602:	98 85       	ldd	r25, Y+8	; 0x08
     604:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	9a 87       	std	Y+10, r25	; 0x0a
     60e:	89 87       	std	Y+9, r24	; 0x09
     610:	89 85       	ldd	r24, Y+9	; 0x09
     612:	9a 85       	ldd	r25, Y+10	; 0x0a
     614:	9e 87       	std	Y+14, r25	; 0x0e
     616:	8d 87       	std	Y+13, r24	; 0x0d
     618:	8d 85       	ldd	r24, Y+13	; 0x0d
     61a:	9e 85       	ldd	r25, Y+14	; 0x0e
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	f1 f7       	brne	.-4      	; 0x61c <act_relay+0x10e>
     620:	9e 87       	std	Y+14, r25	; 0x0e
     622:	8d 87       	std	Y+13, r24	; 0x0d
     624:	ce 01       	movw	r24, r28
     626:	0f 96       	adiw	r24, 0x0f	; 15
     628:	64 ed       	ldi	r22, 0xD4	; 212
     62a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     62e:	88 23       	and	r24, r24
     630:	09 f0       	breq	.+2      	; 0x634 <act_relay+0x126>
     632:	86 cf       	rjmp	.-244    	; 0x540 <act_relay+0x32>
				_delay_ms(50);

}
     634:	68 96       	adiw	r28, 0x18	; 24
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <act_mosfet>:

void act_mosfet(Mosfet_Act* mosfet_info) {
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	68 97       	sbiw	r28, 0x18	; 24
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	98 8f       	std	Y+24, r25	; 0x18
     65c:	8f 8b       	std	Y+23, r24	; 0x17

	uint8_t buf[8];

	buf[0] = 'M';
     65e:	8d e4       	ldi	r24, 0x4D	; 77
     660:	8f 87       	std	Y+15, r24	; 0x0f
	buf[1] = mosfet_info->ID;
     662:	8f 89       	ldd	r24, Y+23	; 0x17
     664:	98 8d       	ldd	r25, Y+24	; 0x18
     666:	fc 01       	movw	r30, r24
     668:	80 81       	ld	r24, Z
     66a:	88 8b       	std	Y+16, r24	; 0x10
	buf[2] = mosfet_info->state;
     66c:	8f 89       	ldd	r24, Y+23	; 0x17
     66e:	98 8d       	ldd	r25, Y+24	; 0x18
     670:	fc 01       	movw	r30, r24
     672:	81 81       	ldd	r24, Z+1	; 0x01
     674:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buf, ARDUINO_TX_INDENTIFICATOR))
     676:	72 c0       	rjmp	.+228    	; 0x75c <act_mosfet+0x116>
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	a8 e4       	ldi	r26, 0x48	; 72
     67e:	b2 e4       	ldi	r27, 0x42	; 66
     680:	89 83       	std	Y+1, r24	; 0x01
     682:	9a 83       	std	Y+2, r25	; 0x02
     684:	ab 83       	std	Y+3, r26	; 0x03
     686:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e4       	ldi	r19, 0x40	; 64
     68c:	4c e1       	ldi	r20, 0x1C	; 28
     68e:	55 e4       	ldi	r21, 0x45	; 69
     690:	69 81       	ldd	r22, Y+1	; 0x01
     692:	7a 81       	ldd	r23, Y+2	; 0x02
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	8d 83       	std	Y+5, r24	; 0x05
     6a2:	9e 83       	std	Y+6, r25	; 0x06
     6a4:	af 83       	std	Y+7, r26	; 0x07
     6a6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e8       	ldi	r20, 0x80	; 128
     6ae:	5f e3       	ldi	r21, 0x3F	; 63
     6b0:	6d 81       	ldd	r22, Y+5	; 0x05
     6b2:	7e 81       	ldd	r23, Y+6	; 0x06
     6b4:	8f 81       	ldd	r24, Y+7	; 0x07
     6b6:	98 85       	ldd	r25, Y+8	; 0x08
     6b8:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
     6bc:	88 23       	and	r24, r24
     6be:	2c f4       	brge	.+10     	; 0x6ca <act_mosfet+0x84>
		__ticks = 1;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	9a 87       	std	Y+10, r25	; 0x0a
     6c6:	89 87       	std	Y+9, r24	; 0x09
     6c8:	3f c0       	rjmp	.+126    	; 0x748 <act_mosfet+0x102>
	else if (__tmp > 65535)
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	3f ef       	ldi	r19, 0xFF	; 255
     6ce:	4f e7       	ldi	r20, 0x7F	; 127
     6d0:	57 e4       	ldi	r21, 0x47	; 71
     6d2:	6d 81       	ldd	r22, Y+5	; 0x05
     6d4:	7e 81       	ldd	r23, Y+6	; 0x06
     6d6:	8f 81       	ldd	r24, Y+7	; 0x07
     6d8:	98 85       	ldd	r25, Y+8	; 0x08
     6da:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
     6de:	18 16       	cp	r1, r24
     6e0:	4c f5       	brge	.+82     	; 0x734 <act_mosfet+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e2       	ldi	r20, 0x20	; 32
     6e8:	51 e4       	ldi	r21, 0x41	; 65
     6ea:	69 81       	ldd	r22, Y+1	; 0x01
     6ec:	7a 81       	ldd	r23, Y+2	; 0x02
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	9c 81       	ldd	r25, Y+4	; 0x04
     6f2:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     6f6:	dc 01       	movw	r26, r24
     6f8:	cb 01       	movw	r24, r22
     6fa:	bc 01       	movw	r22, r24
     6fc:	cd 01       	movw	r24, r26
     6fe:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     702:	dc 01       	movw	r26, r24
     704:	cb 01       	movw	r24, r22
     706:	9a 87       	std	Y+10, r25	; 0x0a
     708:	89 87       	std	Y+9, r24	; 0x09
     70a:	0f c0       	rjmp	.+30     	; 0x72a <act_mosfet+0xe4>
     70c:	8a ef       	ldi	r24, 0xFA	; 250
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	9c 87       	std	Y+12, r25	; 0x0c
     712:	8b 87       	std	Y+11, r24	; 0x0b
     714:	8b 85       	ldd	r24, Y+11	; 0x0b
     716:	9c 85       	ldd	r25, Y+12	; 0x0c
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <act_mosfet+0xd2>
     71c:	9c 87       	std	Y+12, r25	; 0x0c
     71e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     720:	89 85       	ldd	r24, Y+9	; 0x09
     722:	9a 85       	ldd	r25, Y+10	; 0x0a
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	9a 87       	std	Y+10, r25	; 0x0a
     728:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     72a:	89 85       	ldd	r24, Y+9	; 0x09
     72c:	9a 85       	ldd	r25, Y+10	; 0x0a
     72e:	89 2b       	or	r24, r25
     730:	69 f7       	brne	.-38     	; 0x70c <act_mosfet+0xc6>
     732:	14 c0       	rjmp	.+40     	; 0x75c <act_mosfet+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     734:	6d 81       	ldd	r22, Y+5	; 0x05
     736:	7e 81       	ldd	r23, Y+6	; 0x06
     738:	8f 81       	ldd	r24, Y+7	; 0x07
     73a:	98 85       	ldd	r25, Y+8	; 0x08
     73c:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     740:	dc 01       	movw	r26, r24
     742:	cb 01       	movw	r24, r22
     744:	9a 87       	std	Y+10, r25	; 0x0a
     746:	89 87       	std	Y+9, r24	; 0x09
     748:	89 85       	ldd	r24, Y+9	; 0x09
     74a:	9a 85       	ldd	r25, Y+10	; 0x0a
     74c:	9e 87       	std	Y+14, r25	; 0x0e
     74e:	8d 87       	std	Y+13, r24	; 0x0d
     750:	8d 85       	ldd	r24, Y+13	; 0x0d
     752:	9e 85       	ldd	r25, Y+14	; 0x0e
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	f1 f7       	brne	.-4      	; 0x754 <act_mosfet+0x10e>
     758:	9e 87       	std	Y+14, r25	; 0x0e
     75a:	8d 87       	std	Y+13, r24	; 0x0d
     75c:	ce 01       	movw	r24, r28
     75e:	0f 96       	adiw	r24, 0x0f	; 15
     760:	64 ed       	ldi	r22, 0xD4	; 212
     762:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
     766:	88 23       	and	r24, r24
     768:	09 f0       	breq	.+2      	; 0x76c <act_mosfet+0x126>
     76a:	86 cf       	rjmp	.-244    	; 0x678 <act_mosfet+0x32>
				_delay_ms(50);

}
     76c:	68 96       	adiw	r28, 0x18	; 24
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <AX_UART_Init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "ax.h"

void AX_UART_Init(void)
{
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	2e 97       	sbiw	r28, 0x0e	; 14
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRD &= ~((1 << 2) | (1 << 3));
     792:	8a e2       	ldi	r24, 0x2A	; 42
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	2a e2       	ldi	r18, 0x2A	; 42
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	f9 01       	movw	r30, r18
     79c:	20 81       	ld	r18, Z
     79e:	23 7f       	andi	r18, 0xF3	; 243
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 83       	st	Z, r18
	//PORTE = 0;
	UCSR1A = 0;
     7a4:	88 ec       	ldi	r24, 0xC8	; 200
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	fc 01       	movw	r30, r24
     7aa:	10 82       	st	Z, r1
	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
     7ac:	89 ec       	ldi	r24, 0xC9	; 201
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	28 e1       	ldi	r18, 0x18	; 24
     7b2:	fc 01       	movw	r30, r24
     7b4:	20 83       	st	Z, r18
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
     7b6:	8a ec       	ldi	r24, 0xCA	; 202
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	26 e0       	ldi	r18, 0x06	; 6
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18

	UBRR1H = 0;
     7c0:	8d ec       	ldi	r24, 0xCD	; 205
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	fc 01       	movw	r30, r24
     7c6:	10 82       	st	Z, r1
	UBRR1L = 5;
     7c8:	8c ec       	ldi	r24, 0xCC	; 204
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	25 e0       	ldi	r18, 0x05	; 5
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 83       	st	Z, r18
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	a8 ec       	ldi	r26, 0xC8	; 200
     7d8:	b2 e4       	ldi	r27, 0x42	; 66
     7da:	89 83       	std	Y+1, r24	; 0x01
     7dc:	9a 83       	std	Y+2, r25	; 0x02
     7de:	ab 83       	std	Y+3, r26	; 0x03
     7e0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e4       	ldi	r19, 0x40	; 64
     7e6:	4c e1       	ldi	r20, 0x1C	; 28
     7e8:	55 e4       	ldi	r21, 0x45	; 69
     7ea:	69 81       	ldd	r22, Y+1	; 0x01
     7ec:	7a 81       	ldd	r23, Y+2	; 0x02
     7ee:	8b 81       	ldd	r24, Y+3	; 0x03
     7f0:	9c 81       	ldd	r25, Y+4	; 0x04
     7f2:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     7f6:	dc 01       	movw	r26, r24
     7f8:	cb 01       	movw	r24, r22
     7fa:	8d 83       	std	Y+5, r24	; 0x05
     7fc:	9e 83       	std	Y+6, r25	; 0x06
     7fe:	af 83       	std	Y+7, r26	; 0x07
     800:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 e8       	ldi	r20, 0x80	; 128
     808:	5f e3       	ldi	r21, 0x3F	; 63
     80a:	6d 81       	ldd	r22, Y+5	; 0x05
     80c:	7e 81       	ldd	r23, Y+6	; 0x06
     80e:	8f 81       	ldd	r24, Y+7	; 0x07
     810:	98 85       	ldd	r25, Y+8	; 0x08
     812:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
     816:	88 23       	and	r24, r24
     818:	2c f4       	brge	.+10     	; 0x824 <AX_UART_Init+0xa6>
		__ticks = 1;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	9a 87       	std	Y+10, r25	; 0x0a
     820:	89 87       	std	Y+9, r24	; 0x09
     822:	3f c0       	rjmp	.+126    	; 0x8a2 <AX_UART_Init+0x124>
	else if (__tmp > 65535)
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	3f ef       	ldi	r19, 0xFF	; 255
     828:	4f e7       	ldi	r20, 0x7F	; 127
     82a:	57 e4       	ldi	r21, 0x47	; 71
     82c:	6d 81       	ldd	r22, Y+5	; 0x05
     82e:	7e 81       	ldd	r23, Y+6	; 0x06
     830:	8f 81       	ldd	r24, Y+7	; 0x07
     832:	98 85       	ldd	r25, Y+8	; 0x08
     834:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
     838:	18 16       	cp	r1, r24
     83a:	4c f5       	brge	.+82     	; 0x88e <AX_UART_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e2       	ldi	r20, 0x20	; 32
     842:	51 e4       	ldi	r21, 0x41	; 65
     844:	69 81       	ldd	r22, Y+1	; 0x01
     846:	7a 81       	ldd	r23, Y+2	; 0x02
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	bc 01       	movw	r22, r24
     856:	cd 01       	movw	r24, r26
     858:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     85c:	dc 01       	movw	r26, r24
     85e:	cb 01       	movw	r24, r22
     860:	9a 87       	std	Y+10, r25	; 0x0a
     862:	89 87       	std	Y+9, r24	; 0x09
     864:	0f c0       	rjmp	.+30     	; 0x884 <AX_UART_Init+0x106>
     866:	8a ef       	ldi	r24, 0xFA	; 250
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	9c 87       	std	Y+12, r25	; 0x0c
     86c:	8b 87       	std	Y+11, r24	; 0x0b
     86e:	8b 85       	ldd	r24, Y+11	; 0x0b
     870:	9c 85       	ldd	r25, Y+12	; 0x0c
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	f1 f7       	brne	.-4      	; 0x872 <AX_UART_Init+0xf4>
     876:	9c 87       	std	Y+12, r25	; 0x0c
     878:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	9a 85       	ldd	r25, Y+10	; 0x0a
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	9a 87       	std	Y+10, r25	; 0x0a
     882:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     884:	89 85       	ldd	r24, Y+9	; 0x09
     886:	9a 85       	ldd	r25, Y+10	; 0x0a
     888:	89 2b       	or	r24, r25
     88a:	69 f7       	brne	.-38     	; 0x866 <AX_UART_Init+0xe8>
     88c:	14 c0       	rjmp	.+40     	; 0x8b6 <AX_UART_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     88e:	6d 81       	ldd	r22, Y+5	; 0x05
     890:	7e 81       	ldd	r23, Y+6	; 0x06
     892:	8f 81       	ldd	r24, Y+7	; 0x07
     894:	98 85       	ldd	r25, Y+8	; 0x08
     896:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     89a:	dc 01       	movw	r26, r24
     89c:	cb 01       	movw	r24, r22
     89e:	9a 87       	std	Y+10, r25	; 0x0a
     8a0:	89 87       	std	Y+9, r24	; 0x09
     8a2:	89 85       	ldd	r24, Y+9	; 0x09
     8a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a6:	9e 87       	std	Y+14, r25	; 0x0e
     8a8:	8d 87       	std	Y+13, r24	; 0x0d
     8aa:	8d 85       	ldd	r24, Y+13	; 0x0d
     8ac:	9e 85       	ldd	r25, Y+14	; 0x0e
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <AX_UART_Init+0x130>
     8b2:	9e 87       	std	Y+14, r25	; 0x0e
     8b4:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);
}
     8b6:	2e 96       	adiw	r28, 0x0e	; 14
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	1f 92       	push	r1
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1<<UDRE1)) );
     8d4:	00 00       	nop
     8d6:	88 ec       	ldi	r24, 0xC8	; 200
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	fc 01       	movw	r30, r24
     8dc:	80 81       	ld	r24, Z
     8de:	88 2f       	mov	r24, r24
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	80 72       	andi	r24, 0x20	; 32
     8e4:	99 27       	eor	r25, r25
     8e6:	89 2b       	or	r24, r25
     8e8:	b1 f3       	breq	.-20     	; 0x8d6 <AX_SendChar+0xe>
	UDR1 = data;
     8ea:	8e ec       	ldi	r24, 0xCE	; 206
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	29 81       	ldd	r18, Y+1	; 0x01
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
}
     8f4:	0f 90       	pop	r0
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <AX_ReadChar>:
unsigned char AX_ReadChar(void)
{
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
   //UART1_Write('I');
   while( !( UCSR1A & (1<< RXC1)) );
     904:	00 00       	nop
     906:	88 ec       	ldi	r24, 0xC8	; 200
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	fc 01       	movw	r30, r24
     90c:	80 81       	ld	r24, Z
     90e:	88 23       	and	r24, r24
     910:	d4 f7       	brge	.-12     	; 0x906 <AX_ReadChar+0xa>
   return UDR1;
     912:	8e ec       	ldi	r24, 0xCE	; 206
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	fc 01       	movw	r30, r24
     918:	80 81       	ld	r24, Z
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <AX_ReadStatus>:
/*************************************************************************************************************************************************************************************
*															 Funkcije za upravljanje AX-12A servoima                                                                                                                                      *
*************************************************************************************************************************************************************************************/

void AX_ReadStatus(void)
{
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
     928:	27 97       	sbiw	r28, 0x07	; 7
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	de bf       	out	0x3e, r29	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	cd bf       	out	0x3d, r28	; 61
	 unsigned char status[7] = {0,0,0,0,0,0};
     934:	27 e0       	ldi	r18, 0x07	; 7
     936:	ce 01       	movw	r24, r28
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	fc 01       	movw	r30, r24
     93c:	32 2f       	mov	r19, r18
     93e:	11 92       	st	Z+, r1
     940:	3a 95       	dec	r19
     942:	e9 f7       	brne	.-6      	; 0x93e <AX_ReadStatus+0x1e>

	status[0] = AX_ReadChar();
     944:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     948:	89 83       	std	Y+1, r24	; 0x01
	status[1] = AX_ReadChar();
     94a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     94e:	8a 83       	std	Y+2, r24	; 0x02
	status[2] = AX_ReadChar();
     950:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     954:	8b 83       	std	Y+3, r24	; 0x03
	status[3] = AX_ReadChar();
     956:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     95a:	8c 83       	std	Y+4, r24	; 0x04
	status[4] = AX_ReadChar();
     95c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     960:	8d 83       	std	Y+5, r24	; 0x05
	status[5] = AX_ReadChar();
     962:	0e 94 7e 04 	call	0x8fc	; 0x8fc <AX_ReadChar>
     966:	8e 83       	std	Y+6, r24	; 0x06
}
     968:	27 96       	adiw	r28, 0x07	; 7
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <AX_StopTransmitter>:

void AX_StopTransmitter(void)
{
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
	while( !(UCSR1A & (1<<TXC1)) );
     982:	00 00       	nop
     984:	88 ec       	ldi	r24, 0xC8	; 200
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	fc 01       	movw	r30, r24
     98a:	80 81       	ld	r24, Z
     98c:	88 2f       	mov	r24, r24
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	80 74       	andi	r24, 0x40	; 64
     992:	99 27       	eor	r25, r25
     994:	89 2b       	or	r24, r25
     996:	b1 f3       	breq	.-20     	; 0x984 <AX_StopTransmitter+0xa>
	UCSR1B &= 0xF7;
     998:	89 ec       	ldi	r24, 0xC9	; 201
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	29 ec       	ldi	r18, 0xC9	; 201
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	f9 01       	movw	r30, r18
     9a2:	20 81       	ld	r18, Z
     9a4:	27 7f       	andi	r18, 0xF7	; 247
     9a6:	fc 01       	movw	r30, r24
     9a8:	20 83       	st	Z, r18
	UCSR1A |= 0x40;
     9aa:	88 ec       	ldi	r24, 0xC8	; 200
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	28 ec       	ldi	r18, 0xC8	; 200
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	f9 01       	movw	r30, r18
     9b4:	20 81       	ld	r18, Z
     9b6:	20 64       	ori	r18, 0x40	; 64
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x08;
     9ca:	89 ec       	ldi	r24, 0xC9	; 201
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	29 ec       	ldi	r18, 0xC9	; 201
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	f9 01       	movw	r30, r18
     9d4:	20 81       	ld	r18, Z
     9d6:	28 60       	ori	r18, 0x08	; 8
     9d8:	fc 01       	movw	r30, r24
     9da:	20 83       	st	Z, r18
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <AX_StopReceiver>:

void AX_StopReceiver(void)
{
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
	UCSR1B &= 0xEF;
     9ea:	89 ec       	ldi	r24, 0xC9	; 201
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	29 ec       	ldi	r18, 0xC9	; 201
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	f9 01       	movw	r30, r18
     9f4:	20 81       	ld	r18, Z
     9f6:	2f 7e       	andi	r18, 0xEF	; 239
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18
}
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	08 95       	ret

00000a02 <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x10;
     a0a:	89 ec       	ldi	r24, 0xC9	; 201
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	29 ec       	ldi	r18, 0xC9	; 201
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	f9 01       	movw	r30, r18
     a14:	20 81       	ld	r18, Z
     a16:	20 61       	ori	r18, 0x10	; 16
     a18:	fc 01       	movw	r30, r24
     a1a:	20 83       	st	Z, r18
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	08 95       	ret

00000a22 <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
     a2a:	6a 97       	sbiw	r28, 0x1a	; 26
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	cd bf       	out	0x3d, r28	; 61
     a36:	9e 8b       	std	Y+22, r25	; 0x16
     a38:	8d 8b       	std	Y+21, r24	; 0x15
     a3a:	78 8f       	std	Y+24, r23	; 0x18
     a3c:	6f 8b       	std	Y+23, r22	; 0x17
     a3e:	49 8f       	std	Y+25, r20	; 0x19
     a40:	2a 8f       	std	Y+26, r18	; 0x1a
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;

	angle = (unsigned int)(1023 *((double)angle/300.0));
     a42:	8d 89       	ldd	r24, Y+21	; 0x15
     a44:	9e 89       	ldd	r25, Y+22	; 0x16
     a46:	cc 01       	movw	r24, r24
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	bc 01       	movw	r22, r24
     a4e:	cd 01       	movw	r24, r26
     a50:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__floatunsisf>
     a54:	dc 01       	movw	r26, r24
     a56:	cb 01       	movw	r24, r22
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	46 e9       	ldi	r20, 0x96	; 150
     a5e:	53 e4       	ldi	r21, 0x43	; 67
     a60:	bc 01       	movw	r22, r24
     a62:	cd 01       	movw	r24, r26
     a64:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__divsf3>
     a68:	dc 01       	movw	r26, r24
     a6a:	cb 01       	movw	r24, r22
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 ec       	ldi	r19, 0xC0	; 192
     a70:	4f e7       	ldi	r20, 0x7F	; 127
     a72:	54 e4       	ldi	r21, 0x44	; 68
     a74:	bc 01       	movw	r22, r24
     a76:	cd 01       	movw	r24, r26
     a78:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     a7c:	dc 01       	movw	r26, r24
     a7e:	cb 01       	movw	r24, r22
     a80:	bc 01       	movw	r22, r24
     a82:	cd 01       	movw	r24, r26
     a84:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     a88:	dc 01       	movw	r26, r24
     a8a:	cb 01       	movw	r24, r22
     a8c:	9e 8b       	std	Y+22, r25	; 0x16
     a8e:	8d 8b       	std	Y+21, r24	; 0x15

	angle_H = (unsigned char)(angle >> 8);
     a90:	8d 89       	ldd	r24, Y+21	; 0x15
     a92:	9e 89       	ldd	r25, Y+22	; 0x16
     a94:	89 2f       	mov	r24, r25
     a96:	99 27       	eor	r25, r25
     a98:	89 83       	std	Y+1, r24	; 0x01
	angle_L = (unsigned char)(angle & 0x00FF);
     a9a:	8d 89       	ldd	r24, Y+21	; 0x15
     a9c:	8a 83       	std	Y+2, r24	; 0x02

	speed |= (direction << 10);
     a9e:	89 8d       	ldd	r24, Y+25	; 0x19
     aa0:	88 2f       	mov	r24, r24
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	98 2f       	mov	r25, r24
     aa6:	88 27       	eor	r24, r24
     aa8:	99 0f       	add	r25, r25
     aaa:	99 0f       	add	r25, r25
     aac:	9c 01       	movw	r18, r24
     aae:	8f 89       	ldd	r24, Y+23	; 0x17
     ab0:	98 8d       	ldd	r25, Y+24	; 0x18
     ab2:	82 2b       	or	r24, r18
     ab4:	93 2b       	or	r25, r19
     ab6:	98 8f       	std	Y+24, r25	; 0x18
     ab8:	8f 8b       	std	Y+23, r24	; 0x17
	speed_H = (unsigned char)(speed >> 8);
     aba:	8f 89       	ldd	r24, Y+23	; 0x17
     abc:	98 8d       	ldd	r25, Y+24	; 0x18
     abe:	89 2f       	mov	r24, r25
     ac0:	99 27       	eor	r25, r25
     ac2:	8b 83       	std	Y+3, r24	; 0x03
	speed_L = (unsigned char)(speed & 0x00FF);
     ac4:	8f 89       	ldd	r24, Y+23	; 0x17
     ac6:	8c 83       	std	Y+4, r24	; 0x04

	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
     ac8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     aca:	88 2f       	mov	r24, r24
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	9c 01       	movw	r18, r24
     ad0:	28 5d       	subi	r18, 0xD8	; 216
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	88 2f       	mov	r24, r24
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	28 0f       	add	r18, r24
     adc:	39 1f       	adc	r19, r25
     ade:	8c 81       	ldd	r24, Y+4	; 0x04
     ae0:	88 2f       	mov	r24, r24
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	28 0f       	add	r18, r24
     ae6:	39 1f       	adc	r19, r25
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	88 2f       	mov	r24, r24
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	28 0f       	add	r18, r24
     af0:	39 1f       	adc	r19, r25
     af2:	8a 81       	ldd	r24, Y+2	; 0x02
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	82 0f       	add	r24, r18
     afa:	93 1f       	adc	r25, r19
     afc:	80 95       	com	r24
     afe:	90 95       	com	r25
     b00:	9e 83       	std	Y+6, r25	; 0x06
     b02:	8d 83       	std	Y+5, r24	; 0x05

	AX_StopReceiver();
     b04:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <AX_StopReceiver>

	AX_SendChar(START);
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(START);
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(id);
     b14:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b16:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(LENGTH);
     b1a:	87 e0       	ldi	r24, 0x07	; 7
     b1c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(INSTR);
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(ADDRESS);
     b26:	8e e1       	ldi	r24, 0x1E	; 30
     b28:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(angle_L);
     b2c:	8a 81       	ldd	r24, Y+2	; 0x02
     b2e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(angle_H);
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(speed_L);
     b38:	8c 81       	ldd	r24, Y+4	; 0x04
     b3a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(speed_H);
     b3e:	8b 81       	ldd	r24, Y+3	; 0x03
     b40:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(checksum);
     b44:	8d 81       	ldd	r24, Y+5	; 0x05
     b46:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>

	AX_StopTransmitter();
     b4a:	0e 94 bd 04 	call	0x97a	; 0x97a <AX_StopTransmitter>
	AX_ReleaseReceiver();
     b4e:	0e 94 01 05 	call	0xa02	; 0xa02 <AX_ReleaseReceiver>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a8 e4       	ldi	r26, 0x48	; 72
     b58:	b2 e4       	ldi	r27, 0x42	; 66
     b5a:	8f 83       	std	Y+7, r24	; 0x07
     b5c:	98 87       	std	Y+8, r25	; 0x08
     b5e:	a9 87       	std	Y+9, r26	; 0x09
     b60:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e4       	ldi	r19, 0x40	; 64
     b66:	4c e1       	ldi	r20, 0x1C	; 28
     b68:	55 e4       	ldi	r21, 0x45	; 69
     b6a:	6f 81       	ldd	r22, Y+7	; 0x07
     b6c:	78 85       	ldd	r23, Y+8	; 0x08
     b6e:	89 85       	ldd	r24, Y+9	; 0x09
     b70:	9a 85       	ldd	r25, Y+10	; 0x0a
     b72:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     b76:	dc 01       	movw	r26, r24
     b78:	cb 01       	movw	r24, r22
     b7a:	8b 87       	std	Y+11, r24	; 0x0b
     b7c:	9c 87       	std	Y+12, r25	; 0x0c
     b7e:	ad 87       	std	Y+13, r26	; 0x0d
     b80:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	40 e8       	ldi	r20, 0x80	; 128
     b88:	5f e3       	ldi	r21, 0x3F	; 63
     b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b90:	9e 85       	ldd	r25, Y+14	; 0x0e
     b92:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
     b96:	88 23       	and	r24, r24
     b98:	2c f4       	brge	.+10     	; 0xba4 <AX_SetAngle+0x182>
		__ticks = 1;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	98 8b       	std	Y+16, r25	; 0x10
     ba0:	8f 87       	std	Y+15, r24	; 0x0f
     ba2:	3f c0       	rjmp	.+126    	; 0xc22 <AX_SetAngle+0x200>
	else if (__tmp > 65535)
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	3f ef       	ldi	r19, 0xFF	; 255
     ba8:	4f e7       	ldi	r20, 0x7F	; 127
     baa:	57 e4       	ldi	r21, 0x47	; 71
     bac:	6b 85       	ldd	r22, Y+11	; 0x0b
     bae:	7c 85       	ldd	r23, Y+12	; 0x0c
     bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bb4:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
     bb8:	18 16       	cp	r1, r24
     bba:	4c f5       	brge	.+82     	; 0xc0e <AX_SetAngle+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e2       	ldi	r20, 0x20	; 32
     bc2:	51 e4       	ldi	r21, 0x41	; 65
     bc4:	6f 81       	ldd	r22, Y+7	; 0x07
     bc6:	78 85       	ldd	r23, Y+8	; 0x08
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	bc 01       	movw	r22, r24
     bd6:	cd 01       	movw	r24, r26
     bd8:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	98 8b       	std	Y+16, r25	; 0x10
     be2:	8f 87       	std	Y+15, r24	; 0x0f
     be4:	0f c0       	rjmp	.+30     	; 0xc04 <AX_SetAngle+0x1e2>
     be6:	8a ef       	ldi	r24, 0xFA	; 250
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	9a 8b       	std	Y+18, r25	; 0x12
     bec:	89 8b       	std	Y+17, r24	; 0x11
     bee:	89 89       	ldd	r24, Y+17	; 0x11
     bf0:	9a 89       	ldd	r25, Y+18	; 0x12
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <AX_SetAngle+0x1d0>
     bf6:	9a 8b       	std	Y+18, r25	; 0x12
     bf8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
     bfc:	98 89       	ldd	r25, Y+16	; 0x10
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	98 8b       	std	Y+16, r25	; 0x10
     c02:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c04:	8f 85       	ldd	r24, Y+15	; 0x0f
     c06:	98 89       	ldd	r25, Y+16	; 0x10
     c08:	89 2b       	or	r24, r25
     c0a:	69 f7       	brne	.-38     	; 0xbe6 <AX_SetAngle+0x1c4>
     c0c:	14 c0       	rjmp	.+40     	; 0xc36 <AX_SetAngle+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c10:	7c 85       	ldd	r23, Y+12	; 0x0c
     c12:	8d 85       	ldd	r24, Y+13	; 0x0d
     c14:	9e 85       	ldd	r25, Y+14	; 0x0e
     c16:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	98 8b       	std	Y+16, r25	; 0x10
     c20:	8f 87       	std	Y+15, r24	; 0x0f
     c22:	8f 85       	ldd	r24, Y+15	; 0x0f
     c24:	98 89       	ldd	r25, Y+16	; 0x10
     c26:	9c 8b       	std	Y+20, r25	; 0x14
     c28:	8b 8b       	std	Y+19, r24	; 0x13
     c2a:	8b 89       	ldd	r24, Y+19	; 0x13
     c2c:	9c 89       	ldd	r25, Y+20	; 0x14
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <AX_SetAngle+0x20c>
     c32:	9c 8b       	std	Y+20, r25	; 0x14
     c34:	8b 8b       	std	Y+19, r24	; 0x13

	_delay_ms(50);

	AX_ReleaseTransmitter();
     c36:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <AX_ReleaseTransmitter>
}
     c3a:	6a 96       	adiw	r28, 0x1a	; 26
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	f8 94       	cli
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	cd bf       	out	0x3d, r28	; 61
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <AX_EndlessTurn>:


void AX_EndlessTurn(void)
{
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	60 97       	sbiw	r28, 0x10	; 16
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61

	unsigned int checksum;

	checksum = ~(0x01 + 0x07 + 0x03 + 0x06 + (1023 & 0xFF) + (1023 >> 8) & 0xFF);
     c60:	8c ee       	ldi	r24, 0xEC	; 236
     c62:	9f ef       	ldi	r25, 0xFF	; 255
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01

	AX_StopReceiver();
     c68:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <AX_StopReceiver>

	AX_SendChar(0xFF);
     c6c:	8f ef       	ldi	r24, 0xFF	; 255
     c6e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0xFF);
     c72:	8f ef       	ldi	r24, 0xFF	; 255
     c74:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x01);
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x07);
     c7e:	87 e0       	ldi	r24, 0x07	; 7
     c80:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x03);
     c84:	83 e0       	ldi	r24, 0x03	; 3
     c86:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x06);
     c8a:	86 e0       	ldi	r24, 0x06	; 6
     c8c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x00);
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x00);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(1023 & 0xFF);
     c9c:	8f ef       	ldi	r24, 0xFF	; 255
     c9e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(1023 >> 8);
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(checksum);
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>

	AX_StopTransmitter();
     cae:	0e 94 bd 04 	call	0x97a	; 0x97a <AX_StopTransmitter>
	AX_ReleaseReceiver();
     cb2:	0e 94 01 05 	call	0xa02	; 0xa02 <AX_ReleaseReceiver>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a8 e4       	ldi	r26, 0x48	; 72
     cbc:	b2 e4       	ldi	r27, 0x42	; 66
     cbe:	8b 83       	std	Y+3, r24	; 0x03
     cc0:	9c 83       	std	Y+4, r25	; 0x04
     cc2:	ad 83       	std	Y+5, r26	; 0x05
     cc4:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e4       	ldi	r19, 0x40	; 64
     cca:	4c e1       	ldi	r20, 0x1C	; 28
     ccc:	55 e4       	ldi	r21, 0x45	; 69
     cce:	6b 81       	ldd	r22, Y+3	; 0x03
     cd0:	7c 81       	ldd	r23, Y+4	; 0x04
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	8f 83       	std	Y+7, r24	; 0x07
     ce0:	98 87       	std	Y+8, r25	; 0x08
     ce2:	a9 87       	std	Y+9, r26	; 0x09
     ce4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
     cfa:	88 23       	and	r24, r24
     cfc:	2c f4       	brge	.+10     	; 0xd08 <AX_EndlessTurn+0xbc>
		__ticks = 1;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	9c 87       	std	Y+12, r25	; 0x0c
     d04:	8b 87       	std	Y+11, r24	; 0x0b
     d06:	3f c0       	rjmp	.+126    	; 0xd86 <AX_EndlessTurn+0x13a>
	else if (__tmp > 65535)
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
     d1c:	18 16       	cp	r1, r24
     d1e:	4c f5       	brge	.+82     	; 0xd72 <AX_EndlessTurn+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	6b 81       	ldd	r22, Y+3	; 0x03
     d2a:	7c 81       	ldd	r23, Y+4	; 0x04
     d2c:	8d 81       	ldd	r24, Y+5	; 0x05
     d2e:	9e 81       	ldd	r25, Y+6	; 0x06
     d30:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	bc 01       	movw	r22, r24
     d3a:	cd 01       	movw	r24, r26
     d3c:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	9c 87       	std	Y+12, r25	; 0x0c
     d46:	8b 87       	std	Y+11, r24	; 0x0b
     d48:	0f c0       	rjmp	.+30     	; 0xd68 <AX_EndlessTurn+0x11c>
     d4a:	8a ef       	ldi	r24, 0xFA	; 250
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	9e 87       	std	Y+14, r25	; 0x0e
     d50:	8d 87       	std	Y+13, r24	; 0x0d
     d52:	8d 85       	ldd	r24, Y+13	; 0x0d
     d54:	9e 85       	ldd	r25, Y+14	; 0x0e
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	f1 f7       	brne	.-4      	; 0xd56 <AX_EndlessTurn+0x10a>
     d5a:	9e 87       	std	Y+14, r25	; 0x0e
     d5c:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d60:	9c 85       	ldd	r25, Y+12	; 0x0c
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	9c 87       	std	Y+12, r25	; 0x0c
     d66:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d68:	8b 85       	ldd	r24, Y+11	; 0x0b
     d6a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d6c:	89 2b       	or	r24, r25
     d6e:	69 f7       	brne	.-38     	; 0xd4a <AX_EndlessTurn+0xfe>
     d70:	14 c0       	rjmp	.+40     	; 0xd9a <AX_EndlessTurn+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d72:	6f 81       	ldd	r22, Y+7	; 0x07
     d74:	78 85       	ldd	r23, Y+8	; 0x08
     d76:	89 85       	ldd	r24, Y+9	; 0x09
     d78:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7a:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	9c 87       	std	Y+12, r25	; 0x0c
     d84:	8b 87       	std	Y+11, r24	; 0x0b
     d86:	8b 85       	ldd	r24, Y+11	; 0x0b
     d88:	9c 85       	ldd	r25, Y+12	; 0x0c
     d8a:	98 8b       	std	Y+16, r25	; 0x10
     d8c:	8f 87       	std	Y+15, r24	; 0x0f
     d8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d90:	98 89       	ldd	r25, Y+16	; 0x10
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <AX_EndlessTurn+0x146>
     d96:	98 8b       	std	Y+16, r25	; 0x10
     d98:	8f 87       	std	Y+15, r24	; 0x0f

	//AX_ReadStatus();
	_delay_ms(50);

	AX_ReleaseTransmitter();
     d9a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <AX_ReleaseTransmitter>
}
     d9e:	60 96       	adiw	r28, 0x10	; 16
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <AX_SetSpeed>:

void AX_SetSpeed(unsigned int direction, unsigned int speed)
{
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	28 97       	sbiw	r28, 0x08	; 8
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	8d 83       	std	Y+5, r24	; 0x05
     dc8:	78 87       	std	Y+8, r23	; 0x08
     dca:	6f 83       	std	Y+7, r22	; 0x07
	/*
		direction ---> TurnDirection -> 1 - ClockWise   0 - CounterClockWise
	*/

	unsigned int data = 0x0000;
     dcc:	1a 82       	std	Y+2, r1	; 0x02
     dce:	19 82       	std	Y+1, r1	; 0x01
	unsigned int checksum = 0;
     dd0:	1c 82       	std	Y+4, r1	; 0x04
     dd2:	1b 82       	std	Y+3, r1	; 0x03

	data = speed;
     dd4:	8f 81       	ldd	r24, Y+7	; 0x07
     dd6:	98 85       	ldd	r25, Y+8	; 0x08
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	89 83       	std	Y+1, r24	; 0x01
	data |= (direction << 10);
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	98 2f       	mov	r25, r24
     de2:	88 27       	eor	r24, r24
     de4:	99 0f       	add	r25, r25
     de6:	99 0f       	add	r25, r25
     de8:	29 81       	ldd	r18, Y+1	; 0x01
     dea:	3a 81       	ldd	r19, Y+2	; 0x02
     dec:	82 2b       	or	r24, r18
     dee:	93 2b       	or	r25, r19
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 83       	std	Y+1, r24	; 0x01


	checksum = ~(0x01 + 0x05 + 0x03 + 0x20 + data);
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	9a 81       	ldd	r25, Y+2	; 0x02
     df8:	89 96       	adiw	r24, 0x29	; 41
     dfa:	80 95       	com	r24
     dfc:	90 95       	com	r25
     dfe:	9c 83       	std	Y+4, r25	; 0x04
     e00:	8b 83       	std	Y+3, r24	; 0x03

	AX_StopReceiver();
     e02:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <AX_StopReceiver>

	AX_SendChar(0xFF);
     e06:	8f ef       	ldi	r24, 0xFF	; 255
     e08:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0xFF);
     e0c:	8f ef       	ldi	r24, 0xFF	; 255
     e0e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x01);
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x05);
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x03);
     e1e:	83 e0       	ldi	r24, 0x03	; 3
     e20:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(0x20);
     e24:	80 e2       	ldi	r24, 0x20	; 32
     e26:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(data);
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(data >> 8);
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	89 2f       	mov	r24, r25
     e36:	99 27       	eor	r25, r25
     e38:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>
	AX_SendChar(checksum);
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <AX_SendChar>

	AX_StopTransmitter();
     e42:	0e 94 bd 04 	call	0x97a	; 0x97a <AX_StopTransmitter>
	AX_ReleaseReceiver();
     e46:	0e 94 01 05 	call	0xa02	; 0xa02 <AX_ReleaseReceiver>

	AX_ReadStatus();
     e4a:	0e 94 90 04 	call	0x920	; 0x920 <AX_ReadStatus>

	AX_ReleaseTransmitter();
     e4e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <AX_ReleaseTransmitter>
}
     e52:	28 96       	adiw	r28, 0x08	; 8
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <__vector_18>:
static volatile unsigned char rxCounter[10];
//volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	00 90 5f 00 	lds	r0, 0x005F
     e6c:	0f 92       	push	r0
     e6e:	11 24       	eor	r1, r1
     e70:	00 90 5b 00 	lds	r0, 0x005B
     e74:	0f 92       	push	r0
     e76:	2f 93       	push	r18
     e78:	3f 93       	push	r19
     e7a:	4f 93       	push	r20
     e7c:	5f 93       	push	r21
     e7e:	8f 93       	push	r24
     e80:	9f 93       	push	r25
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <__vector_18+0x28>
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <__vector_18+0x2a>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     e92:	8d ee       	ldi	r24, 0xED	; 237
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	fc 01       	movw	r30, r24
     e98:	80 81       	ld	r24, Z
     e9a:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     e9c:	19 82       	std	Y+1, r1	; 0x01
     e9e:	a4 c0       	rjmp	.+328    	; 0xfe8 <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
     ea0:	8d ee       	ldi	r24, 0xED	; 237
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	29 81       	ldd	r18, Y+1	; 0x01
     ea6:	22 95       	swap	r18
     ea8:	20 7f       	andi	r18, 0xF0	; 240
     eaa:	fc 01       	movw	r30, r24
     eac:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     eae:	8e ee       	ldi	r24, 0xEE	; 238
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	fc 01       	movw	r30, r24
     eb4:	80 81       	ld	r24, Z
     eb6:	82 95       	swap	r24
     eb8:	86 95       	lsr	r24
     eba:	87 70       	andi	r24, 0x07	; 7
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	81 70       	andi	r24, 0x01	; 1
     ec2:	99 27       	eor	r25, r25
     ec4:	89 2b       	or	r24, r25
     ec6:	09 f4       	brne	.+2      	; 0xeca <__vector_18+0x66>
     ec8:	70 c0       	rjmp	.+224    	; 0xfaa <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     eca:	8f ee       	ldi	r24, 0xEF	; 239
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	20 e8       	ldi	r18, 0x80	; 128
     ed0:	fc 01       	movw	r30, r24
     ed2:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     ed4:	8e ee       	ldi	r24, 0xEE	; 238
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	2e ee       	ldi	r18, 0xEE	; 238
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	f9 01       	movw	r30, r18
     ede:	20 81       	ld	r18, Z
     ee0:	2f 7d       	andi	r18, 0xDF	; 223
     ee2:	fc 01       	movw	r30, r24
     ee4:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     ee6:	82 ef       	ldi	r24, 0xF2	; 242
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	fc 01       	movw	r30, r24
     eec:	80 81       	ld	r24, Z
     eee:	82 95       	swap	r24
     ef0:	86 95       	lsr	r24
     ef2:	87 70       	andi	r24, 0x07	; 7
     ef4:	28 2f       	mov	r18, r24
     ef6:	83 ef       	ldi	r24, 0xF3	; 243
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	fc 01       	movw	r30, r24
     efc:	80 81       	ld	r24, Z
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	82 2b       	or	r24, r18
     f10:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
     f12:	1a 82       	std	Y+2, r1	; 0x02
     f14:	26 c0       	rjmp	.+76     	; 0xf62 <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	81 50       	subi	r24, 0x01	; 1
     f1e:	90 48       	sbci	r25, 0x80	; 128
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	82 5d       	subi	r24, 0xD2	; 210
     f26:	9e 4f       	sbci	r25, 0xFE	; 254
     f28:	fc 01       	movw	r30, r24
     f2a:	20 81       	ld	r18, Z
     f2c:	31 81       	ldd	r19, Z+1	; 0x01
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	8e 5b       	subi	r24, 0xBE	; 190
     f38:	9e 4f       	sbci	r25, 0xFE	; 254
     f3a:	fc 01       	movw	r30, r24
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	84 0f       	add	r24, r20
     f4a:	95 1f       	adc	r25, r21
     f4c:	82 0f       	add	r24, r18
     f4e:	93 1f       	adc	r25, r19
     f50:	2a ef       	ldi	r18, 0xFA	; 250
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	f9 01       	movw	r30, r18
     f56:	20 81       	ld	r18, Z
     f58:	fc 01       	movw	r30, r24
     f5a:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	8a 83       	std	Y+2, r24	; 0x02
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	88 30       	cpi	r24, 0x08	; 8
     f66:	b8 f2       	brcs	.-82     	; 0xf16 <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	88 2f       	mov	r24, r24
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	8e 5b       	subi	r24, 0xBE	; 190
     f72:	9e 4f       	sbci	r25, 0xFE	; 254
     f74:	fc 01       	movw	r30, r24
     f76:	20 81       	ld	r18, Z
     f78:	2f 5f       	subi	r18, 0xFF	; 255
     f7a:	fc 01       	movw	r30, r24
     f7c:	20 83       	st	Z, r18
     f7e:	25 30       	cpi	r18, 0x05	; 5
     f80:	41 f4       	brne	.+16     	; 0xf92 <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	8e 5b       	subi	r24, 0xBE	; 190
     f8c:	9e 4f       	sbci	r25, 0xFE	; 254
     f8e:	fc 01       	movw	r30, r24
     f90:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	8a 5a       	subi	r24, 0xAA	; 170
     f9c:	9e 4f       	sbci	r25, 0xFE	; 254
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 81       	ld	r18, Z
     fa2:	2f 5f       	subi	r18, 0xFF	; 255
     fa4:	fc 01       	movw	r30, r24
     fa6:	20 83       	st	Z, r18

			break;
     fa8:	23 c0       	rjmp	.+70     	; 0xff0 <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     faa:	8e ee       	ldi	r24, 0xEE	; 238
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	fc 01       	movw	r30, r24
     fb0:	80 81       	ld	r24, Z
     fb2:	82 95       	swap	r24
     fb4:	86 95       	lsr	r24
     fb6:	86 95       	lsr	r24
     fb8:	83 70       	andi	r24, 0x03	; 3
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	81 70       	andi	r24, 0x01	; 1
     fc0:	99 27       	eor	r25, r25
     fc2:	89 2b       	or	r24, r25
     fc4:	71 f0       	breq	.+28     	; 0xfe2 <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
     fc6:	8f ee       	ldi	r24, 0xEF	; 239
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	fc 01       	movw	r30, r24
     fcc:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     fce:	8e ee       	ldi	r24, 0xEE	; 238
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	2e ee       	ldi	r18, 0xEE	; 238
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	f9 01       	movw	r30, r18
     fd8:	20 81       	ld	r18, Z
     fda:	2f 7b       	andi	r18, 0xBF	; 191
     fdc:	fc 01       	movw	r30, r24
     fde:	20 83       	st	Z, r18

			break;
     fe0:	07 c0       	rjmp	.+14     	; 0xff0 <__vector_18+0x18c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	8f 5f       	subi	r24, 0xFF	; 255
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	8f 30       	cpi	r24, 0x0F	; 15
     fec:	08 f4       	brcc	.+2      	; 0xff0 <__vector_18+0x18c>
     fee:	58 cf       	rjmp	.-336    	; 0xea0 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     ff0:	8d ee       	ldi	r24, 0xED	; 237
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	2b 81       	ldd	r18, Y+3	; 0x03
     ff6:	fc 01       	movw	r30, r24
     ff8:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // zato sto tako treba.
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	ff 91       	pop	r31
    1008:	ef 91       	pop	r30
    100a:	9f 91       	pop	r25
    100c:	8f 91       	pop	r24
    100e:	5f 91       	pop	r21
    1010:	4f 91       	pop	r20
    1012:	3f 91       	pop	r19
    1014:	2f 91       	pop	r18
    1016:	0f 90       	pop	r0
    1018:	00 92 5b 00 	sts	0x005B, r0
    101c:	0f 90       	pop	r0
    101e:	00 92 5f 00 	sts	0x005F, r0
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <CAN_InitModule>:


static void CAN_InitModule(void)
{
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	00 d0       	rcall	.+0      	; 0x102e <CAN_InitModule+0x6>
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
    1032:	88 ed       	ldi	r24, 0xD8	; 216
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	21 e0       	ldi	r18, 0x01	; 1
    1038:	fc 01       	movw	r30, r24
    103a:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    103c:	19 82       	std	Y+1, r1	; 0x01
    103e:	3e c0       	rjmp	.+124    	; 0x10bc <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
    1040:	8d ee       	ldi	r24, 0xED	; 237
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	29 81       	ldd	r18, Y+1	; 0x01
    1046:	22 95       	swap	r18
    1048:	20 7f       	andi	r18, 0xF0	; 240
    104a:	fc 01       	movw	r30, r24
    104c:	20 83       	st	Z, r18

		CANSTMOB = 0;
    104e:	8e ee       	ldi	r24, 0xEE	; 238
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	fc 01       	movw	r30, r24
    1054:	10 82       	st	Z, r1
		CANCDMOB = 0;
    1056:	8f ee       	ldi	r24, 0xEF	; 239
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	fc 01       	movw	r30, r24
    105c:	10 82       	st	Z, r1

		CANIDT1 = 0;
    105e:	83 ef       	ldi	r24, 0xF3	; 243
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	fc 01       	movw	r30, r24
    1064:	10 82       	st	Z, r1
		CANIDT2 = 0;
    1066:	82 ef       	ldi	r24, 0xF2	; 242
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	fc 01       	movw	r30, r24
    106c:	10 82       	st	Z, r1
		CANIDT3 = 0;
    106e:	81 ef       	ldi	r24, 0xF1	; 241
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	fc 01       	movw	r30, r24
    1074:	10 82       	st	Z, r1
		CANIDT4 = 0;
    1076:	80 ef       	ldi	r24, 0xF0	; 240
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	fc 01       	movw	r30, r24
    107c:	10 82       	st	Z, r1
		CANIDM1 = 0;
    107e:	87 ef       	ldi	r24, 0xF7	; 247
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	fc 01       	movw	r30, r24
    1084:	10 82       	st	Z, r1
		CANIDM2 = 0;
    1086:	86 ef       	ldi	r24, 0xF6	; 246
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	fc 01       	movw	r30, r24
    108c:	10 82       	st	Z, r1
		CANIDM3 = 0;
    108e:	85 ef       	ldi	r24, 0xF5	; 245
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	fc 01       	movw	r30, r24
    1094:	10 82       	st	Z, r1
		CANIDM4 = 0;
    1096:	84 ef       	ldi	r24, 0xF4	; 244
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	fc 01       	movw	r30, r24
    109c:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    109e:	1a 82       	std	Y+2, r1	; 0x02
    10a0:	07 c0       	rjmp	.+14     	; 0x10b0 <CAN_InitModule+0x88>
			CANMSG = 0;
    10a2:	8a ef       	ldi	r24, 0xFA	; 250
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	fc 01       	movw	r30, r24
    10a8:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	8f 5f       	subi	r24, 0xFF	; 255
    10ae:	8a 83       	std	Y+2, r24	; 0x02
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	88 30       	cpi	r24, 0x08	; 8
    10b4:	b0 f3       	brcs	.-20     	; 0x10a2 <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	8f 5f       	subi	r24, 0xFF	; 255
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	8f 30       	cpi	r24, 0x0F	; 15
    10c0:	08 f4       	brcc	.+2      	; 0x10c4 <CAN_InitModule+0x9c>
    10c2:	be cf       	rjmp	.-132    	; 0x1040 <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
    10c4:	88 ed       	ldi	r24, 0xD8	; 216
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	22 e0       	ldi	r18, 0x02	; 2
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
    10ce:	82 ee       	ldi	r24, 0xE2	; 226
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	fc 01       	movw	r30, r24
    10d6:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
    10d8:	83 ee       	ldi	r24, 0xE3	; 227
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	28 e0       	ldi	r18, 0x08	; 8
    10de:	fc 01       	movw	r30, r24
    10e0:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
    10e2:	84 ee       	ldi	r24, 0xE4	; 228
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	2e e5       	ldi	r18, 0x5E	; 94
    10e8:	fc 01       	movw	r30, r24
    10ea:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
    10ec:	85 ee       	ldi	r24, 0xE5	; 229
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	fc 01       	movw	r30, r24
    10f2:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
    10f4:	8b ed       	ldi	r24, 0xDB	; 219
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	20 eb       	ldi	r18, 0xB0	; 176
    10fa:	fc 01       	movw	r30, r24
    10fc:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
    10fe:	8f ed       	ldi	r24, 0xDF	; 223
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	2f e7       	ldi	r18, 0x7F	; 127
    1104:	fc 01       	movw	r30, r24
    1106:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
    1108:	8e ed       	ldi	r24, 0xDE	; 222
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	2f ef       	ldi	r18, 0xFF	; 255
    110e:	fc 01       	movw	r30, r24
    1110:	20 83       	st	Z, r18
	sei();
    1112:	78 94       	sei
}
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	00 d0       	rcall	.+0      	; 0x1124 <CAN_InitRxMob+0x6>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <CAN_InitRxMob+0x8>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	9c 83       	std	Y+4, r25	; 0x04
    112c:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    112e:	8d ee       	ldi	r24, 0xED	; 237
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	fc 01       	movw	r30, r24
    1134:	80 81       	ld	r24, Z
    1136:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    1138:	00 00       	nop
    113a:	89 ed       	ldi	r24, 0xD9	; 217
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	fc 01       	movw	r30, r24
    1140:	80 81       	ld	r24, Z
    1142:	82 95       	swap	r24
    1144:	8f 70       	andi	r24, 0x0F	; 15
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	81 70       	andi	r24, 0x01	; 1
    114c:	99 27       	eor	r25, r25
    114e:	89 2b       	or	r24, r25
    1150:	a1 f7       	brne	.-24     	; 0x113a <CAN_InitRxMob+0x1c>
    1152:	89 ed       	ldi	r24, 0xD9	; 217
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	fc 01       	movw	r30, r24
    1158:	80 81       	ld	r24, Z
    115a:	86 95       	lsr	r24
    115c:	86 95       	lsr	r24
    115e:	86 95       	lsr	r24
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	81 70       	andi	r24, 0x01	; 1
    1166:	99 27       	eor	r25, r25
    1168:	89 2b       	or	r24, r25
    116a:	39 f7       	brne	.-50     	; 0x113a <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    116c:	19 82       	std	Y+1, r1	; 0x01
    116e:	49 c0       	rjmp	.+146    	; 0x1202 <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
    1170:	8d ee       	ldi	r24, 0xED	; 237
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	29 81       	ldd	r18, Y+1	; 0x01
    1176:	22 95       	swap	r18
    1178:	20 7f       	andi	r18, 0xF0	; 240
    117a:	fc 01       	movw	r30, r24
    117c:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
    117e:	8f ee       	ldi	r24, 0xEF	; 239
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	fc 01       	movw	r30, r24
    1184:	80 81       	ld	r24, Z
    1186:	82 95       	swap	r24
    1188:	86 95       	lsr	r24
    118a:	86 95       	lsr	r24
    118c:	83 70       	andi	r24, 0x03	; 3
    118e:	88 23       	and	r24, r24
    1190:	21 f0       	breq	.+8      	; 0x119a <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	34 c0       	rjmp	.+104    	; 0x1202 <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
    119a:	8f ee       	ldi	r24, 0xEF	; 239
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	2f e0       	ldi	r18, 0x0F	; 15
    11a0:	fc 01       	movw	r30, r24
    11a2:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
    11a4:	83 ef       	ldi	r24, 0xF3	; 243
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	33 27       	eor	r19, r19
    11ae:	36 95       	lsr	r19
    11b0:	27 95       	ror	r18
    11b2:	36 95       	lsr	r19
    11b4:	27 95       	ror	r18
    11b6:	36 95       	lsr	r19
    11b8:	27 95       	ror	r18
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
    11be:	82 ef       	ldi	r24, 0xF2	; 242
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	2b 81       	ldd	r18, Y+3	; 0x03
    11c4:	22 95       	swap	r18
    11c6:	22 0f       	add	r18, r18
    11c8:	20 7e       	andi	r18, 0xE0	; 224
    11ca:	fc 01       	movw	r30, r24
    11cc:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
    11ce:	86 ef       	ldi	r24, 0xF6	; 246
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	20 ee       	ldi	r18, 0xE0	; 224
    11d4:	fc 01       	movw	r30, r24
    11d6:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
    11d8:	87 ef       	ldi	r24, 0xF7	; 247
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	2f ef       	ldi	r18, 0xFF	; 255
    11de:	fc 01       	movw	r30, r24
    11e0:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
    11e2:	8f ee       	ldi	r24, 0xEF	; 239
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	2f ee       	ldi	r18, 0xEF	; 239
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	f9 01       	movw	r30, r18
    11ec:	20 81       	ld	r18, Z
    11ee:	20 68       	ori	r18, 0x80	; 128
    11f0:	fc 01       	movw	r30, r24
    11f2:	20 83       	st	Z, r18

		CANPAGE = tempPage;
    11f4:	8d ee       	ldi	r24, 0xED	; 237
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	2a 81       	ldd	r18, Y+2	; 0x02
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 83       	st	Z, r18

		return 1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	0a c0       	rjmp	.+20     	; 0x1216 <CAN_InitRxMob+0xf8>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	8f 30       	cpi	r24, 0x0F	; 15
    1206:	08 f4       	brcc	.+2      	; 0x120a <CAN_InitRxMob+0xec>
    1208:	b3 cf       	rjmp	.-154    	; 0x1170 <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
    120a:	8d ee       	ldi	r24, 0xED	; 237
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	2a 81       	ldd	r18, Y+2	; 0x02
    1210:	fc 01       	movw	r30, r24
    1212:	20 83       	st	Z, r18

	return 0;
    1214:	80 e0       	ldi	r24, 0x00	; 0
}
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	00 d0       	rcall	.+0      	; 0x122e <CAN_Init+0xa>
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
    1234:	0e 94 14 08 	call	0x1028	; 0x1028 <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    1238:	19 82       	std	Y+1, r1	; 0x01
    123a:	30 c0       	rjmp	.+96     	; 0x129c <CAN_Init+0x78>
	{
		CAN_InitRxMob(i + 1);
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	0e 94 8f 08 	call	0x111e	; 0x111e <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	8c 01       	movw	r16, r24
    1254:	02 5d       	subi	r16, 0xD2	; 210
    1256:	1e 4f       	sbci	r17, 0xFE	; 254
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	85 e0       	ldi	r24, 0x05	; 5
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 75 1e 	call	0x3cea	; 0x3cea <calloc>
    1264:	f8 01       	movw	r30, r16
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	29 81       	ldd	r18, Y+1	; 0x01
    1272:	22 2f       	mov	r18, r18
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	49 81       	ldd	r20, Y+1	; 0x01
    1278:	44 2f       	mov	r20, r20
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	4a 5a       	subi	r20, 0xAA	; 170
    1280:	5e 4f       	sbci	r21, 0xFE	; 254
    1282:	fa 01       	movw	r30, r20
    1284:	60 83       	st	Z, r22
    1286:	24 5b       	subi	r18, 0xB4	; 180
    1288:	3e 4f       	sbci	r19, 0xFE	; 254
    128a:	f9 01       	movw	r30, r18
    128c:	60 83       	st	Z, r22
    128e:	8e 5b       	subi	r24, 0xBE	; 190
    1290:	9e 4f       	sbci	r25, 0xFE	; 254
    1292:	fc 01       	movw	r30, r24
    1294:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	99 81       	ldd	r25, Y+1	; 0x01
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	98 17       	cp	r25, r24
    12a2:	60 f2       	brcs	.-104    	; 0x123c <CAN_Init+0x18>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	08 95       	ret

000012b2 <CAN_CheckRX>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	1f 92       	push	r1
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	89 83       	std	Y+1, r24	; 0x01
	return rxCounter[nodeID - 1];
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	8a 5a       	subi	r24, 0xAA	; 170
    12c8:	9e 4f       	sbci	r25, 0xFE	; 254
    12ca:	fc 01       	movw	r30, r24
    12cc:	80 81       	ld	r24, Z
}
    12ce:	0f 90       	pop	r0
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	08 95       	ret

000012d6 <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	00 d0       	rcall	.+0      	; 0x12dc <CAN_Read+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <CAN_Read+0x8>
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	9b 83       	std	Y+3, r25	; 0x03
    12e4:	8a 83       	std	Y+2, r24	; 0x02
    12e6:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
    12e8:	84 e3       	ldi	r24, 0x34	; 52
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	2f ef       	ldi	r18, 0xFF	; 255
    12ee:	fc 01       	movw	r30, r24
    12f0:	20 83       	st	Z, r18
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
    12f2:	00 00       	nop
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	8a 5a       	subi	r24, 0xAA	; 170
    12fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1300:	fc 01       	movw	r30, r24
    1302:	80 81       	ld	r24, Z
    1304:	88 23       	and	r24, r24
    1306:	b1 f3       	breq	.-20     	; 0x12f4 <CAN_Read+0x1e>

	for(i = 0; i < 8; ++i)
    1308:	19 82       	std	Y+1, r1	; 0x01
    130a:	2c c0       	rjmp	.+88     	; 0x1364 <CAN_Read+0x8e>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	2a 81       	ldd	r18, Y+2	; 0x02
    1314:	3b 81       	ldd	r19, Y+3	; 0x03
    1316:	82 0f       	add	r24, r18
    1318:	93 1f       	adc	r25, r19
    131a:	2c 81       	ldd	r18, Y+4	; 0x04
    131c:	22 2f       	mov	r18, r18
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	21 50       	subi	r18, 0x01	; 1
    1322:	30 48       	sbci	r19, 0x80	; 128
    1324:	22 0f       	add	r18, r18
    1326:	33 1f       	adc	r19, r19
    1328:	22 5d       	subi	r18, 0xD2	; 210
    132a:	3e 4f       	sbci	r19, 0xFE	; 254
    132c:	f9 01       	movw	r30, r18
    132e:	40 81       	ld	r20, Z
    1330:	51 81       	ldd	r21, Z+1	; 0x01
    1332:	2c 81       	ldd	r18, Y+4	; 0x04
    1334:	22 2f       	mov	r18, r18
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	21 50       	subi	r18, 0x01	; 1
    133a:	31 09       	sbc	r19, r1
    133c:	24 5b       	subi	r18, 0xB4	; 180
    133e:	3e 4f       	sbci	r19, 0xFE	; 254
    1340:	f9 01       	movw	r30, r18
    1342:	20 81       	ld	r18, Z
    1344:	62 2f       	mov	r22, r18
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	29 81       	ldd	r18, Y+1	; 0x01
    134a:	22 2f       	mov	r18, r18
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	26 0f       	add	r18, r22
    1350:	37 1f       	adc	r19, r23
    1352:	24 0f       	add	r18, r20
    1354:	35 1f       	adc	r19, r21
    1356:	f9 01       	movw	r30, r18
    1358:	20 81       	ld	r18, Z
    135a:	fc 01       	movw	r30, r24
    135c:	20 83       	st	Z, r18
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	8f 5f       	subi	r24, 0xFF	; 255
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	88 30       	cpi	r24, 0x08	; 8
    1368:	88 f2       	brcs	.-94     	; 0x130c <CAN_Read+0x36>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	84 5b       	subi	r24, 0xB4	; 180
    1374:	9e 4f       	sbci	r25, 0xFE	; 254
    1376:	fc 01       	movw	r30, r24
    1378:	20 81       	ld	r18, Z
    137a:	2f 5f       	subi	r18, 0xFF	; 255
    137c:	fc 01       	movw	r30, r24
    137e:	20 83       	st	Z, r18
    1380:	25 30       	cpi	r18, 0x05	; 5
    1382:	41 f4       	brne	.+16     	; 0x1394 <CAN_Read+0xbe>
	*(rxRdIndex + sendingNodeID - 1) = 0;
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	88 2f       	mov	r24, r24
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	84 5b       	subi	r24, 0xB4	; 180
    138e:	9e 4f       	sbci	r25, 0xFE	; 254
    1390:	fc 01       	movw	r30, r24
    1392:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	9c 01       	movw	r18, r24
    139e:	2a 5a       	subi	r18, 0xAA	; 170
    13a0:	3e 4f       	sbci	r19, 0xFE	; 254
    13a2:	f9 01       	movw	r30, r18
    13a4:	20 81       	ld	r18, Z
    13a6:	21 50       	subi	r18, 0x01	; 1
    13a8:	8a 5a       	subi	r24, 0xAA	; 170
    13aa:	9e 4f       	sbci	r25, 0xFE	; 254
    13ac:	fc 01       	movw	r30, r24
    13ae:	20 83       	st	Z, r18

	return 0;
    13b0:	80 e0       	ldi	r24, 0x00	; 0
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <CAN_Write+0x6>
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <CAN_Write+0x8>
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <CAN_Write+0xa>
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	9d 83       	std	Y+5, r25	; 0x05
    13d0:	8c 83       	std	Y+4, r24	; 0x04
    13d2:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
    13d4:	00 00       	nop
    13d6:	89 ed       	ldi	r24, 0xD9	; 217
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	fc 01       	movw	r30, r24
    13dc:	80 81       	ld	r24, Z
    13de:	82 95       	swap	r24
    13e0:	8f 70       	andi	r24, 0x0F	; 15
    13e2:	88 2f       	mov	r24, r24
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	81 70       	andi	r24, 0x01	; 1
    13e8:	99 27       	eor	r25, r25
    13ea:	89 2b       	or	r24, r25
    13ec:	a1 f7       	brne	.-24     	; 0x13d6 <CAN_Write+0x16>
    13ee:	89 ed       	ldi	r24, 0xD9	; 217
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	fc 01       	movw	r30, r24
    13f4:	80 81       	ld	r24, Z
    13f6:	86 95       	lsr	r24
    13f8:	86 95       	lsr	r24
    13fa:	86 95       	lsr	r24
    13fc:	88 2f       	mov	r24, r24
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	81 70       	andi	r24, 0x01	; 1
    1402:	99 27       	eor	r25, r25
    1404:	89 2b       	or	r24, r25
    1406:	39 f7       	brne	.-50     	; 0x13d6 <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
    1408:	8d ee       	ldi	r24, 0xED	; 237
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	fc 01       	movw	r30, r24
    140e:	80 81       	ld	r24, Z
    1410:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
    1412:	1a 82       	std	Y+2, r1	; 0x02
    1414:	15 c0       	rjmp	.+42     	; 0x1440 <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
    1416:	8d ee       	ldi	r24, 0xED	; 237
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	2a 81       	ldd	r18, Y+2	; 0x02
    141c:	22 95       	swap	r18
    141e:	20 7f       	andi	r18, 0xF0	; 240
    1420:	fc 01       	movw	r30, r24
    1422:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
    1424:	8f ee       	ldi	r24, 0xEF	; 239
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	fc 01       	movw	r30, r24
    142a:	80 81       	ld	r24, Z
    142c:	82 95       	swap	r24
    142e:	86 95       	lsr	r24
    1430:	86 95       	lsr	r24
    1432:	83 70       	andi	r24, 0x03	; 3
    1434:	88 23       	and	r24, r24
    1436:	09 f4       	brne	.+2      	; 0x143a <CAN_Write+0x7a>
			break;
    1438:	06 c0       	rjmp	.+12     	; 0x1446 <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	8f 5f       	subi	r24, 0xFF	; 255
    143e:	8a 83       	std	Y+2, r24	; 0x02
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	8f 30       	cpi	r24, 0x0F	; 15
    1444:	40 f3       	brcs	.-48     	; 0x1416 <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	8f 30       	cpi	r24, 0x0F	; 15
    144a:	11 f4       	brne	.+4      	; 0x1450 <CAN_Write+0x90>
		return -1;
    144c:	8f ef       	ldi	r24, 0xFF	; 255
    144e:	39 c0       	rjmp	.+114    	; 0x14c2 <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
    1450:	82 ef       	ldi	r24, 0xF2	; 242
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	2e 81       	ldd	r18, Y+6	; 0x06
    1456:	22 95       	swap	r18
    1458:	22 0f       	add	r18, r18
    145a:	20 7e       	andi	r18, 0xE0	; 224
    145c:	fc 01       	movw	r30, r24
    145e:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
    1460:	83 ef       	ldi	r24, 0xF3	; 243
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	2e 81       	ldd	r18, Y+6	; 0x06
    1466:	26 95       	lsr	r18
    1468:	26 95       	lsr	r18
    146a:	26 95       	lsr	r18
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
    1470:	8f ee       	ldi	r24, 0xEF	; 239
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	28 e0       	ldi	r18, 0x08	; 8
    1476:	fc 01       	movw	r30, r24
    1478:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    147a:	19 82       	std	Y+1, r1	; 0x01
    147c:	10 c0       	rjmp	.+32     	; 0x149e <CAN_Write+0xde>
		CANMSG = data[i];
    147e:	8a ef       	ldi	r24, 0xFA	; 250
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	29 81       	ldd	r18, Y+1	; 0x01
    1484:	22 2f       	mov	r18, r18
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	4c 81       	ldd	r20, Y+4	; 0x04
    148a:	5d 81       	ldd	r21, Y+5	; 0x05
    148c:	24 0f       	add	r18, r20
    148e:	35 1f       	adc	r19, r21
    1490:	f9 01       	movw	r30, r18
    1492:	20 81       	ld	r18, Z
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	88 30       	cpi	r24, 0x08	; 8
    14a2:	68 f3       	brcs	.-38     	; 0x147e <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
    14a4:	8f ee       	ldi	r24, 0xEF	; 239
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	2f ee       	ldi	r18, 0xEF	; 239
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	f9 01       	movw	r30, r18
    14ae:	20 81       	ld	r18, Z
    14b0:	20 64       	ori	r18, 0x40	; 64
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18

	CANPAGE = tempPage;
    14b6:	8d ee       	ldi	r24, 0xED	; 237
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	2b 81       	ldd	r18, Y+3	; 0x03
    14bc:	fc 01       	movw	r30, r24
    14be:	20 83       	st	Z, r18

	return 0;
    14c0:	80 e0       	ldi	r24, 0x00	; 0
}
    14c2:	26 96       	adiw	r28, 0x06	; 6
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <debug_init>:
#include "debug.h"

//pin and the starting state of debug pins
uint8_t debug_pins[5] = {48,49,50,51,52};

void debug_init() {
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	00 d0       	rcall	.+0      	; 0x14da <debug_init+0x6>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <debug_init+0x8>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62

	// total divided by one element -> number of elements (row)
	int num_of_elements = ((int) (sizeof (debug_pins) / sizeof (debug_pins)[0]));
    14e0:	85 e0       	ldi	r24, 0x05	; 5
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	9c 83       	std	Y+4, r25	; 0x04
    14e6:	8b 83       	std	Y+3, r24	; 0x03

	for(int i=0; i < num_of_elements; i++) {
    14e8:	1a 82       	std	Y+2, r1	; 0x02
    14ea:	19 82       	std	Y+1, r1	; 0x01
    14ec:	18 c0       	rjmp	.+48     	; 0x151e <debug_init+0x4a>
		gpio_register_pin(debug_pins[i], GPIO_DIRECTION_OUTPUT, false);				// register pin as output and no pull up
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	8a 5f       	subi	r24, 0xFA	; 250
    14f4:	9e 4f       	sbci	r25, 0xFE	; 254
    14f6:	fc 01       	movw	r30, r24
    14f8:	80 81       	ld	r24, Z
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <gpio_register_pin>
		gpio_write_pin(debug_pins[i], OFF);								// set the "starting" value
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	8a 5f       	subi	r24, 0xFA	; 250
    1508:	9e 4f       	sbci	r25, 0xFE	; 254
    150a:	fc 01       	movw	r30, r24
    150c:	80 81       	ld	r24, Z
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <gpio_write_pin>
void debug_init() {

	// total divided by one element -> number of elements (row)
	int num_of_elements = ((int) (sizeof (debug_pins) / sizeof (debug_pins)[0]));

	for(int i=0; i < num_of_elements; i++) {
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	9a 83       	std	Y+2, r25	; 0x02
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	29 81       	ldd	r18, Y+1	; 0x01
    1520:	3a 81       	ldd	r19, Y+2	; 0x02
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	28 17       	cp	r18, r24
    1528:	39 07       	cpc	r19, r25
    152a:	0c f3       	brlt	.-62     	; 0x14ee <debug_init+0x1a>
		gpio_register_pin(debug_pins[i], GPIO_DIRECTION_OUTPUT, false);				// register pin as output and no pull up
		gpio_write_pin(debug_pins[i], OFF);								// set the "starting" value
	}
}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	08 95       	ret

0000153a <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	00 d0       	rcall	.+0      	; 0x1540 <__list_add+0x6>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <__list_add+0x8>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <__list_add+0xa>
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	7c 83       	std	Y+4, r23	; 0x04
    154e:	6b 83       	std	Y+3, r22	; 0x03
    1550:	5e 83       	std	Y+6, r21	; 0x06
    1552:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	9e 81       	ldd	r25, Y+6	; 0x06
    1558:	29 81       	ldd	r18, Y+1	; 0x01
    155a:	3a 81       	ldd	r19, Y+2	; 0x02
    155c:	fc 01       	movw	r30, r24
    155e:	31 83       	std	Z+1, r19	; 0x01
    1560:	20 83       	st	Z, r18
    new->next = next;
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	9a 81       	ldd	r25, Y+2	; 0x02
    1566:	2d 81       	ldd	r18, Y+5	; 0x05
    1568:	3e 81       	ldd	r19, Y+6	; 0x06
    156a:	fc 01       	movw	r30, r24
    156c:	33 83       	std	Z+3, r19	; 0x03
    156e:	22 83       	std	Z+2, r18	; 0x02
    new->prev = prev;
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	9a 81       	ldd	r25, Y+2	; 0x02
    1574:	2b 81       	ldd	r18, Y+3	; 0x03
    1576:	3c 81       	ldd	r19, Y+4	; 0x04
    1578:	fc 01       	movw	r30, r24
    157a:	31 83       	std	Z+1, r19	; 0x01
    157c:	20 83       	st	Z, r18
    prev->next = new;
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	29 81       	ldd	r18, Y+1	; 0x01
    1584:	3a 81       	ldd	r19, Y+2	; 0x02
    1586:	fc 01       	movw	r30, r24
    1588:	33 83       	std	Z+3, r19	; 0x03
    158a:	22 83       	std	Z+2, r18	; 0x02
}
    158c:	26 96       	adiw	r28, 0x06	; 6
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <list_add>:

static inline void list_add(struct list_head* new, struct list_head* head)
{
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <list_add+0x6>
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <list_add+0x8>
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	7c 83       	std	Y+4, r23	; 0x04
    15b0:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	9c 81       	ldd	r25, Y+4	; 0x04
    15b6:	fc 01       	movw	r30, r24
    15b8:	42 81       	ldd	r20, Z+2	; 0x02
    15ba:	53 81       	ldd	r21, Z+3	; 0x03
    15bc:	2b 81       	ldd	r18, Y+3	; 0x03
    15be:	3c 81       	ldd	r19, Y+4	; 0x04
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	b9 01       	movw	r22, r18
    15c6:	0e 94 9d 0a 	call	0x153a	; 0x153a <__list_add>
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	08 95       	ret

000015d8 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	2b 97       	sbiw	r28, 0x0b	; 11
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	cd bf       	out	0x3d, r28	; 61
    15ec:	89 87       	std	Y+9, r24	; 0x09
    15ee:	6a 87       	std	Y+10, r22	; 0x0a
    15f0:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    15f2:	80 91 0d 01 	lds	r24, 0x010D
    15f6:	90 91 0e 01 	lds	r25, 0x010E
    15fa:	9c 83       	std	Y+4, r25	; 0x04
    15fc:	8b 83       	std	Y+3, r24	; 0x03
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	06 97       	sbiw	r24, 0x06	; 6
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	15 c0       	rjmp	.+42     	; 0x1634 <gpio_register_pin+0x5c>
    {
        if(input->pin == pin)
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	9a 81       	ldd	r25, Y+2	; 0x02
    160e:	fc 01       	movw	r30, r24
    1610:	90 81       	ld	r25, Z
    1612:	89 85       	ldd	r24, Y+9	; 0x09
    1614:	98 17       	cp	r25, r24
    1616:	11 f4       	brne	.+4      	; 0x161c <gpio_register_pin+0x44>
            return 1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	e5 c0       	rjmp	.+458    	; 0x17e6 <gpio_register_pin+0x20e>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	fc 01       	movw	r30, r24
    1622:	80 85       	ldd	r24, Z+8	; 0x08
    1624:	91 85       	ldd	r25, Z+9	; 0x09
    1626:	9e 83       	std	Y+6, r25	; 0x06
    1628:	8d 83       	std	Y+5, r24	; 0x05
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	06 97       	sbiw	r24, 0x06	; 6
    1630:	9a 83       	std	Y+2, r25	; 0x02
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	06 96       	adiw	r24, 0x06	; 6
    163a:	8b 50       	subi	r24, 0x0B	; 11
    163c:	91 40       	sbci	r25, 0x01	; 1
    163e:	29 f7       	brne	.-54     	; 0x160a <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    1640:	89 85       	ldd	r24, Y+9	; 0x09
    1642:	86 95       	lsr	r24
    1644:	86 95       	lsr	r24
    1646:	86 95       	lsr	r24
    1648:	8f 5f       	subi	r24, 0xFF	; 255
    164a:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t pin_reg = pin % 8;
    164c:	89 85       	ldd	r24, Y+9	; 0x09
    164e:	87 70       	andi	r24, 0x07	; 7
    1650:	88 87       	std	Y+8, r24	; 0x08

	if(direction == GPIO_DIRECTION_OUTPUT)
    1652:	8a 85       	ldd	r24, Y+10	; 0x0a
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	09 f0       	breq	.+2      	; 0x165a <gpio_register_pin+0x82>
    1658:	55 c0       	rjmp	.+170    	; 0x1704 <gpio_register_pin+0x12c>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    165a:	8f 81       	ldd	r24, Y+7	; 0x07
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9c 01       	movw	r18, r24
    1662:	21 50       	subi	r18, 0x01	; 1
    1664:	31 09       	sbc	r19, r1
    1666:	c9 01       	movw	r24, r18
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	82 0f       	add	r24, r18
    166e:	93 1f       	adc	r25, r19
    1670:	81 96       	adiw	r24, 0x21	; 33
    1672:	ac 01       	movw	r20, r24
    1674:	8f 81       	ldd	r24, Y+7	; 0x07
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	9c 01       	movw	r18, r24
    167c:	21 50       	subi	r18, 0x01	; 1
    167e:	31 09       	sbc	r19, r1
    1680:	c9 01       	movw	r24, r18
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	82 0f       	add	r24, r18
    1688:	93 1f       	adc	r25, r19
    168a:	81 96       	adiw	r24, 0x21	; 33
    168c:	fc 01       	movw	r30, r24
    168e:	80 81       	ld	r24, Z
    1690:	68 2f       	mov	r22, r24
    1692:	88 85       	ldd	r24, Y+8	; 0x08
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <gpio_register_pin+0xca>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	2a 95       	dec	r18
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <gpio_register_pin+0xc6>
    16a6:	86 2b       	or	r24, r22
    16a8:	fa 01       	movw	r30, r20
    16aa:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    16ac:	8f 81       	ldd	r24, Y+7	; 0x07
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9c 01       	movw	r18, r24
    16b4:	21 50       	subi	r18, 0x01	; 1
    16b6:	31 09       	sbc	r19, r1
    16b8:	c9 01       	movw	r24, r18
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	82 0f       	add	r24, r18
    16c0:	93 1f       	adc	r25, r19
    16c2:	82 96       	adiw	r24, 0x22	; 34
    16c4:	ac 01       	movw	r20, r24
    16c6:	8f 81       	ldd	r24, Y+7	; 0x07
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9c 01       	movw	r18, r24
    16ce:	21 50       	subi	r18, 0x01	; 1
    16d0:	31 09       	sbc	r19, r1
    16d2:	c9 01       	movw	r24, r18
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	82 0f       	add	r24, r18
    16da:	93 1f       	adc	r25, r19
    16dc:	82 96       	adiw	r24, 0x22	; 34
    16de:	fc 01       	movw	r30, r24
    16e0:	80 81       	ld	r24, Z
    16e2:	68 2f       	mov	r22, r24
    16e4:	88 85       	ldd	r24, Y+8	; 0x08
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <gpio_register_pin+0x11c>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	2a 95       	dec	r18
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <gpio_register_pin+0x118>
    16f8:	80 95       	com	r24
    16fa:	86 23       	and	r24, r22
    16fc:	fa 01       	movw	r30, r20
    16fe:	80 83       	st	Z, r24
        return 0;
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	71 c0       	rjmp	.+226    	; 0x17e6 <gpio_register_pin+0x20e>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1704:	8f 81       	ldd	r24, Y+7	; 0x07
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9c 01       	movw	r18, r24
    170c:	21 50       	subi	r18, 0x01	; 1
    170e:	31 09       	sbc	r19, r1
    1710:	c9 01       	movw	r24, r18
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	82 0f       	add	r24, r18
    1718:	93 1f       	adc	r25, r19
    171a:	81 96       	adiw	r24, 0x21	; 33
    171c:	ac 01       	movw	r20, r24
    171e:	8f 81       	ldd	r24, Y+7	; 0x07
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9c 01       	movw	r18, r24
    1726:	21 50       	subi	r18, 0x01	; 1
    1728:	31 09       	sbc	r19, r1
    172a:	c9 01       	movw	r24, r18
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	82 0f       	add	r24, r18
    1732:	93 1f       	adc	r25, r19
    1734:	81 96       	adiw	r24, 0x21	; 33
    1736:	fc 01       	movw	r30, r24
    1738:	80 81       	ld	r24, Z
    173a:	68 2f       	mov	r22, r24
    173c:	88 85       	ldd	r24, Y+8	; 0x08
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 c0       	rjmp	.+4      	; 0x174c <gpio_register_pin+0x174>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	2a 95       	dec	r18
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <gpio_register_pin+0x170>
    1750:	80 95       	com	r24
    1752:	86 23       	and	r24, r22
    1754:	fa 01       	movw	r30, r20
    1756:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    1758:	8f 81       	ldd	r24, Y+7	; 0x07
    175a:	88 2f       	mov	r24, r24
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	9c 01       	movw	r18, r24
    1760:	21 50       	subi	r18, 0x01	; 1
    1762:	31 09       	sbc	r19, r1
    1764:	c9 01       	movw	r24, r18
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	82 0f       	add	r24, r18
    176c:	93 1f       	adc	r25, r19
    176e:	82 96       	adiw	r24, 0x22	; 34
    1770:	ac 01       	movw	r20, r24
    1772:	8f 81       	ldd	r24, Y+7	; 0x07
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9c 01       	movw	r18, r24
    177a:	21 50       	subi	r18, 0x01	; 1
    177c:	31 09       	sbc	r19, r1
    177e:	c9 01       	movw	r24, r18
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	82 0f       	add	r24, r18
    1786:	93 1f       	adc	r25, r19
    1788:	82 96       	adiw	r24, 0x22	; 34
    178a:	fc 01       	movw	r30, r24
    178c:	80 81       	ld	r24, Z
    178e:	68 2f       	mov	r22, r24
    1790:	88 85       	ldd	r24, Y+8	; 0x08
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <gpio_register_pin+0x1c8>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	2a 95       	dec	r18
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <gpio_register_pin+0x1c4>
    17a4:	86 2b       	or	r24, r22
    17a6:	fa 01       	movw	r30, r20
    17a8:	80 83       	st	Z, r24
	}

	input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    17aa:	8a e0       	ldi	r24, 0x0A	; 10
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <malloc>
    17b2:	9a 83       	std	Y+2, r25	; 0x02
    17b4:	89 83       	std	Y+1, r24	; 0x01

    if(input == NULL)
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ba:	89 2b       	or	r24, r25
    17bc:	11 f4       	brne	.+4      	; 0x17c2 <gpio_register_pin+0x1ea>
        return 1;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	12 c0       	rjmp	.+36     	; 0x17e6 <gpio_register_pin+0x20e>

    input->pin       = pin;
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	29 85       	ldd	r18, Y+9	; 0x09
    17c8:	fc 01       	movw	r30, r24
    17ca:	20 83       	st	Z, r18
    input->pulled_up = pulled_up;
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	9a 81       	ldd	r25, Y+2	; 0x02
    17d0:	2b 85       	ldd	r18, Y+11	; 0x0b
    17d2:	fc 01       	movw	r30, r24
    17d4:	21 83       	std	Z+1, r18	; 0x01
    list_add(&input->list, &gpio_inputs);
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	06 96       	adiw	r24, 0x06	; 6
    17dc:	6b e0       	ldi	r22, 0x0B	; 11
    17de:	71 e0       	ldi	r23, 0x01	; 1
    17e0:	0e 94 cf 0a 	call	0x159e	; 0x159e <list_add>

    return 0;
    17e4:	80 e0       	ldi	r24, 0x00	; 0
}
    17e6:	2b 96       	adiw	r28, 0x0b	; 11
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	08 95       	ret

000017f8 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <gpio_write_pin+0x6>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <gpio_write_pin+0x8>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	8b 83       	std	Y+3, r24	; 0x03
    1806:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	86 95       	lsr	r24
    180c:	86 95       	lsr	r24
    180e:	86 95       	lsr	r24
    1810:	8f 5f       	subi	r24, 0xFF	; 255
    1812:	89 83       	std	Y+1, r24	; 0x01
	pin = pin % 8;
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	87 70       	andi	r24, 0x07	; 7
    1818:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9c 01       	movw	r18, r24
    1822:	21 50       	subi	r18, 0x01	; 1
    1824:	31 09       	sbc	r19, r1
    1826:	c9 01       	movw	r24, r18
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	82 0f       	add	r24, r18
    182e:	93 1f       	adc	r25, r19
    1830:	82 96       	adiw	r24, 0x22	; 34
    1832:	fc 01       	movw	r30, r24
    1834:	80 81       	ld	r24, Z
    1836:	91 81       	ldd	r25, Z+1	; 0x01
    1838:	a2 81       	ldd	r26, Z+2	; 0x02
    183a:	b3 81       	ldd	r27, Z+3	; 0x03
    183c:	8a 83       	std	Y+2, r24	; 0x02
	if(value != 0)
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	88 23       	and	r24, r24
    1842:	31 f1       	breq	.+76     	; 0x1890 <gpio_write_pin+0x98>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	88 2f       	mov	r24, r24
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	9c 01       	movw	r18, r24
    184c:	21 50       	subi	r18, 0x01	; 1
    184e:	31 09       	sbc	r19, r1
    1850:	c9 01       	movw	r24, r18
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	82 0f       	add	r24, r18
    1858:	93 1f       	adc	r25, r19
    185a:	82 96       	adiw	r24, 0x22	; 34
    185c:	ac 01       	movw	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	68 2f       	mov	r22, r24
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <gpio_write_pin+0x7c>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	6a 95       	dec	r22
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <gpio_write_pin+0x78>
    1878:	82 2b       	or	r24, r18
    187a:	93 2b       	or	r25, r19
    187c:	09 2e       	mov	r0, r25
    187e:	00 0c       	add	r0, r0
    1880:	aa 0b       	sbc	r26, r26
    1882:	bb 0b       	sbc	r27, r27
    1884:	fa 01       	movw	r30, r20
    1886:	80 83       	st	Z, r24
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	a2 83       	std	Z+2, r26	; 0x02
    188c:	b3 83       	std	Z+3, r27	; 0x03
    188e:	27 c0       	rjmp	.+78     	; 0x18de <gpio_write_pin+0xe6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	88 2f       	mov	r24, r24
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9c 01       	movw	r18, r24
    1898:	21 50       	subi	r18, 0x01	; 1
    189a:	31 09       	sbc	r19, r1
    189c:	c9 01       	movw	r24, r18
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	82 0f       	add	r24, r18
    18a4:	93 1f       	adc	r25, r19
    18a6:	82 96       	adiw	r24, 0x22	; 34
    18a8:	ac 01       	movw	r20, r24
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	68 2f       	mov	r22, r24
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <gpio_write_pin+0xc8>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	6a 95       	dec	r22
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <gpio_write_pin+0xc4>
    18c4:	80 95       	com	r24
    18c6:	90 95       	com	r25
    18c8:	82 23       	and	r24, r18
    18ca:	93 23       	and	r25, r19
    18cc:	09 2e       	mov	r0, r25
    18ce:	00 0c       	add	r0, r0
    18d0:	aa 0b       	sbc	r26, r26
    18d2:	bb 0b       	sbc	r27, r27
    18d4:	fa 01       	movw	r30, r20
    18d6:	80 83       	st	Z, r24
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	a2 83       	std	Z+2, r26	; 0x02
    18dc:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    18de:	80 e0       	ldi	r24, 0x00	; 0
}
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	08 95       	ret

000018ee <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <__gpio_read_pin+0x6>
    18f4:	1f 92       	push	r1
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	86 95       	lsr	r24
    1900:	86 95       	lsr	r24
    1902:	86 95       	lsr	r24
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	87 70       	andi	r24, 0x07	; 7
    190c:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	9c 01       	movw	r18, r24
    1916:	21 50       	subi	r18, 0x01	; 1
    1918:	31 09       	sbc	r19, r1
    191a:	c9 01       	movw	r24, r18
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	82 0f       	add	r24, r18
    1922:	93 1f       	adc	r25, r19
    1924:	80 96       	adiw	r24, 0x20	; 32
    1926:	fc 01       	movw	r30, r24
    1928:	80 81       	ld	r24, Z
    192a:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	2b 81       	ldd	r18, Y+3	; 0x03
    1934:	22 2f       	mov	r18, r18
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	02 c0       	rjmp	.+4      	; 0x193e <__gpio_read_pin+0x50>
    193a:	95 95       	asr	r25
    193c:	87 95       	ror	r24
    193e:	2a 95       	dec	r18
    1940:	e2 f7       	brpl	.-8      	; 0x193a <__gpio_read_pin+0x4c>
    1942:	81 70       	andi	r24, 0x01	; 1
}
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	08 95       	ret

00001950 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	29 97       	sbiw	r28, 0x09	; 9
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1966:	80 91 0d 01 	lds	r24, 0x010D
    196a:	90 91 0e 01 	lds	r25, 0x010E
    196e:	9d 83       	std	Y+5, r25	; 0x05
    1970:	8c 83       	std	Y+4, r24	; 0x04
    1972:	8c 81       	ldd	r24, Y+4	; 0x04
    1974:	9d 81       	ldd	r25, Y+5	; 0x05
    1976:	06 97       	sbiw	r24, 0x06	; 6
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	55 c0       	rjmp	.+170    	; 0x1a28 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	fc 01       	movw	r30, r24
    1984:	90 81       	ld	r25, Z
    1986:	89 85       	ldd	r24, Y+9	; 0x09
    1988:	98 17       	cp	r25, r24
    198a:	09 f0       	breq	.+2      	; 0x198e <gpio_read_pin+0x3e>
    198c:	41 c0       	rjmp	.+130    	; 0x1a10 <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
    198e:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1990:	1f c0       	rjmp	.+62     	; 0x19d0 <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	88 2f       	mov	r24, r24
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	29 81       	ldd	r18, Y+1	; 0x01
    199a:	3a 81       	ldd	r19, Y+2	; 0x02
    199c:	82 0f       	add	r24, r18
    199e:	93 1f       	adc	r25, r19
    19a0:	02 96       	adiw	r24, 0x02	; 2
    19a2:	fc 01       	movw	r30, r24
    19a4:	40 81       	ld	r20, Z
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	88 2f       	mov	r24, r24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	01 96       	adiw	r24, 0x01	; 1
    19ae:	29 81       	ldd	r18, Y+1	; 0x01
    19b0:	3a 81       	ldd	r19, Y+2	; 0x02
    19b2:	82 0f       	add	r24, r18
    19b4:	93 1f       	adc	r25, r19
    19b6:	02 96       	adiw	r24, 0x02	; 2
    19b8:	fc 01       	movw	r30, r24
    19ba:	80 81       	ld	r24, Z
    19bc:	48 17       	cp	r20, r24
    19be:	29 f0       	breq	.+10     	; 0x19ca <gpio_read_pin+0x7a>
                    return input->previous_state;
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	9a 81       	ldd	r25, Y+2	; 0x02
    19c4:	fc 01       	movw	r30, r24
    19c6:	85 81       	ldd	r24, Z+5	; 0x05
    19c8:	37 c0       	rjmp	.+110    	; 0x1a38 <gpio_read_pin+0xe8>
                i++;
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	8f 5f       	subi	r24, 0xFF	; 255
    19ce:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	82 30       	cpi	r24, 0x02	; 2
    19d4:	f0 f2       	brcs	.-68     	; 0x1992 <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	fc 01       	movw	r30, r24
    19dc:	91 81       	ldd	r25, Z+1	; 0x01
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	89 27       	eor	r24, r25
    19e2:	88 23       	and	r24, r24
    19e4:	29 f0       	breq	.+10     	; 0x19f0 <gpio_read_pin+0xa0>
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ea:	fc 01       	movw	r30, r24
    19ec:	82 81       	ldd	r24, Z+2	; 0x02
    19ee:	08 c0       	rjmp	.+16     	; 0x1a00 <gpio_read_pin+0xb0>
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	9a 81       	ldd	r25, Y+2	; 0x02
    19f4:	fc 01       	movw	r30, r24
    19f6:	92 81       	ldd	r25, Z+2	; 0x02
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	99 23       	and	r25, r25
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <gpio_read_pin+0xb0>
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	9a 81       	ldd	r25, Y+2	; 0x02
    1a06:	28 85       	ldd	r18, Y+8	; 0x08
    1a08:	fc 01       	movw	r30, r24
    1a0a:	25 83       	std	Z+5, r18	; 0x05

            return state;
    1a0c:	88 85       	ldd	r24, Y+8	; 0x08
    1a0e:	14 c0       	rjmp	.+40     	; 0x1a38 <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	9a 81       	ldd	r25, Y+2	; 0x02
    1a14:	fc 01       	movw	r30, r24
    1a16:	80 85       	ldd	r24, Z+8	; 0x08
    1a18:	91 85       	ldd	r25, Z+9	; 0x09
    1a1a:	9f 83       	std	Y+7, r25	; 0x07
    1a1c:	8e 83       	std	Y+6, r24	; 0x06
    1a1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a20:	9f 81       	ldd	r25, Y+7	; 0x07
    1a22:	06 97       	sbiw	r24, 0x06	; 6
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a2c:	06 96       	adiw	r24, 0x06	; 6
    1a2e:	8b 50       	subi	r24, 0x0B	; 11
    1a30:	91 40       	sbci	r25, 0x01	; 1
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <gpio_read_pin+0xe6>
    1a34:	a4 cf       	rjmp	.-184    	; 0x197e <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
}
    1a38:	29 96       	adiw	r28, 0x09	; 9
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	08 95       	ret

00001a4a <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <gpio_debouncer+0xa>
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <gpio_debouncer+0xc>
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <gpio_debouncer+0xe>
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1a5c:	80 91 0d 01 	lds	r24, 0x010D
    1a60:	90 91 0e 01 	lds	r25, 0x010E
    1a64:	9c 83       	std	Y+4, r25	; 0x04
    1a66:	8b 83       	std	Y+3, r24	; 0x03
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	06 97       	sbiw	r24, 0x06	; 6
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	1e c0       	rjmp	.+60     	; 0x1ab0 <gpio_debouncer+0x66>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    1a74:	00 91 62 01 	lds	r16, 0x0162
    1a78:	10 91 63 01 	lds	r17, 0x0163
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	fc 01       	movw	r30, r24
    1a82:	80 81       	ld	r24, Z
    1a84:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__gpio_read_pin>
    1a88:	28 2f       	mov	r18, r24
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	80 0f       	add	r24, r16
    1a90:	91 1f       	adc	r25, r17
    1a92:	02 96       	adiw	r24, 0x02	; 2
    1a94:	fc 01       	movw	r30, r24
    1a96:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	80 85       	ldd	r24, Z+8	; 0x08
    1aa0:	91 85       	ldd	r25, Z+9	; 0x09
    1aa2:	9e 83       	std	Y+6, r25	; 0x06
    1aa4:	8d 83       	std	Y+5, r24	; 0x05
    1aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aaa:	06 97       	sbiw	r24, 0x06	; 6
    1aac:	9a 83       	std	Y+2, r25	; 0x02
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	06 96       	adiw	r24, 0x06	; 6
    1ab6:	8b 50       	subi	r24, 0x0B	; 11
    1ab8:	91 40       	sbci	r25, 0x01	; 1
    1aba:	e1 f6       	brne	.-72     	; 0x1a74 <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1abc:	80 91 62 01 	lds	r24, 0x0162
    1ac0:	90 91 63 01 	lds	r25, 0x0163
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	90 93 63 01 	sts	0x0163, r25
    1aca:	80 93 62 01 	sts	0x0162, r24
    1ace:	03 97       	sbiw	r24, 0x03	; 3
    1ad0:	21 f4       	brne	.+8      	; 0x1ada <gpio_debouncer+0x90>
        count = 0;
    1ad2:	10 92 63 01 	sts	0x0163, r1
    1ad6:	10 92 62 01 	sts	0x0162, r1

}
    1ada:	26 96       	adiw	r28, 0x06	; 6
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	08 95       	ret

00001af0 <odometry_set_speed>:
 * 	void odometry_set_speed(uint8_t speed)
 *
 * 	Send odometry board the max speed
 */
void odometry_set_speed(uint8_t speed)
{
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	67 97       	sbiw	r28, 0x17	; 23
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    1b06:	80 91 64 01 	lds	r24, 0x0164
    1b0a:	9f 89       	ldd	r25, Y+23	; 0x17
    1b0c:	98 17       	cp	r25, r24
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <odometry_set_speed+0x22>
    1b10:	82 c0       	rjmp	.+260    	; 0x1c16 <odometry_set_speed+0x126>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    1b12:	86 e5       	ldi	r24, 0x56	; 86
    1b14:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1b16:	8f 89       	ldd	r24, Y+23	; 0x17
    1b18:	88 8b       	std	Y+16, r24	; 0x10
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1b1a:	72 c0       	rjmp	.+228    	; 0x1c00 <odometry_set_speed+0x110>
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a8 e4       	ldi	r26, 0x48	; 72
    1b22:	b2 e4       	ldi	r27, 0x42	; 66
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	ab 83       	std	Y+3, r26	; 0x03
    1b2a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e4       	ldi	r19, 0x40	; 64
    1b30:	4c e1       	ldi	r20, 0x1C	; 28
    1b32:	55 e4       	ldi	r21, 0x45	; 69
    1b34:	69 81       	ldd	r22, Y+1	; 0x01
    1b36:	7a 81       	ldd	r23, Y+2	; 0x02
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	9e 83       	std	Y+6, r25	; 0x06
    1b48:	af 83       	std	Y+7, r26	; 0x07
    1b4a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	6d 81       	ldd	r22, Y+5	; 0x05
    1b56:	7e 81       	ldd	r23, Y+6	; 0x06
    1b58:	8f 81       	ldd	r24, Y+7	; 0x07
    1b5a:	98 85       	ldd	r25, Y+8	; 0x08
    1b5c:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
    1b60:	88 23       	and	r24, r24
    1b62:	2c f4       	brge	.+10     	; 0x1b6e <odometry_set_speed+0x7e>
		__ticks = 1;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	9a 87       	std	Y+10, r25	; 0x0a
    1b6a:	89 87       	std	Y+9, r24	; 0x09
    1b6c:	3f c0       	rjmp	.+126    	; 0x1bec <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	3f ef       	ldi	r19, 0xFF	; 255
    1b72:	4f e7       	ldi	r20, 0x7F	; 127
    1b74:	57 e4       	ldi	r21, 0x47	; 71
    1b76:	6d 81       	ldd	r22, Y+5	; 0x05
    1b78:	7e 81       	ldd	r23, Y+6	; 0x06
    1b7a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b7c:	98 85       	ldd	r25, Y+8	; 0x08
    1b7e:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	4c f5       	brge	.+82     	; 0x1bd8 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e2       	ldi	r20, 0x20	; 32
    1b8c:	51 e4       	ldi	r21, 0x41	; 65
    1b8e:	69 81       	ldd	r22, Y+1	; 0x01
    1b90:	7a 81       	ldd	r23, Y+2	; 0x02
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9a 87       	std	Y+10, r25	; 0x0a
    1bac:	89 87       	std	Y+9, r24	; 0x09
    1bae:	0f c0       	rjmp	.+30     	; 0x1bce <odometry_set_speed+0xde>
    1bb0:	8a ef       	ldi	r24, 0xFA	; 250
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9c 87       	std	Y+12, r25	; 0x0c
    1bb6:	8b 87       	std	Y+11, r24	; 0x0b
    1bb8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bba:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <odometry_set_speed+0xcc>
    1bc0:	9c 87       	std	Y+12, r25	; 0x0c
    1bc2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc4:	89 85       	ldd	r24, Y+9	; 0x09
    1bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	9a 87       	std	Y+10, r25	; 0x0a
    1bcc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bce:	89 85       	ldd	r24, Y+9	; 0x09
    1bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd2:	89 2b       	or	r24, r25
    1bd4:	69 f7       	brne	.-38     	; 0x1bb0 <odometry_set_speed+0xc0>
    1bd6:	14 c0       	rjmp	.+40     	; 0x1c00 <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd8:	6d 81       	ldd	r22, Y+5	; 0x05
    1bda:	7e 81       	ldd	r23, Y+6	; 0x06
    1bdc:	8f 81       	ldd	r24, Y+7	; 0x07
    1bde:	98 85       	ldd	r25, Y+8	; 0x08
    1be0:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9a 87       	std	Y+10, r25	; 0x0a
    1bea:	89 87       	std	Y+9, r24	; 0x09
    1bec:	89 85       	ldd	r24, Y+9	; 0x09
    1bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf0:	9e 87       	std	Y+14, r25	; 0x0e
    1bf2:	8d 87       	std	Y+13, r24	; 0x0d
    1bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <odometry_set_speed+0x108>
    1bfc:	9e 87       	std	Y+14, r25	; 0x0e
    1bfe:	8d 87       	std	Y+13, r24	; 0x0d
    1c00:	ce 01       	movw	r24, r28
    1c02:	0f 96       	adiw	r24, 0x0f	; 15
    1c04:	63 ec       	ldi	r22, 0xC3	; 195
    1c06:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    1c0a:	88 23       	and	r24, r24
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <odometry_set_speed+0x120>
    1c0e:	86 cf       	rjmp	.-244    	; 0x1b1c <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    1c10:	8f 89       	ldd	r24, Y+23	; 0x17
    1c12:	80 93 64 01 	sts	0x0164, r24
}
    1c16:	67 96       	adiw	r28, 0x17	; 23
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	08 95       	ret

00001c28 <odometry_query_position>:
 * 	void odometry_query_position(void)
 *
 * 	Get the current position. Update it to position
 */
void odometry_query_position(void)
{
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	66 97       	sbiw	r28, 0x16	; 22
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1c3c:	80 e5       	ldi	r24, 0x50	; 80
    1c3e:	8f 87       	std	Y+15, r24	; 0x0f
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1c40:	72 c0       	rjmp	.+228    	; 0x1d26 <odometry_query_position+0xfe>
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a8 e4       	ldi	r26, 0x48	; 72
    1c48:	b2 e4       	ldi	r27, 0x42	; 66
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	9a 83       	std	Y+2, r25	; 0x02
    1c4e:	ab 83       	std	Y+3, r26	; 0x03
    1c50:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e4       	ldi	r19, 0x40	; 64
    1c56:	4c e1       	ldi	r20, 0x1C	; 28
    1c58:	55 e4       	ldi	r21, 0x45	; 69
    1c5a:	69 81       	ldd	r22, Y+1	; 0x01
    1c5c:	7a 81       	ldd	r23, Y+2	; 0x02
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	9c 81       	ldd	r25, Y+4	; 0x04
    1c62:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	9e 83       	std	Y+6, r25	; 0x06
    1c6e:	af 83       	std	Y+7, r26	; 0x07
    1c70:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	6d 81       	ldd	r22, Y+5	; 0x05
    1c7c:	7e 81       	ldd	r23, Y+6	; 0x06
    1c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c80:	98 85       	ldd	r25, Y+8	; 0x08
    1c82:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
    1c86:	88 23       	and	r24, r24
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <odometry_query_position+0x6c>
		__ticks = 1;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9a 87       	std	Y+10, r25	; 0x0a
    1c90:	89 87       	std	Y+9, r24	; 0x09
    1c92:	3f c0       	rjmp	.+126    	; 0x1d12 <odometry_query_position+0xea>
	else if (__tmp > 65535)
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c9e:	7e 81       	ldd	r23, Y+6	; 0x06
    1ca0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca2:	98 85       	ldd	r25, Y+8	; 0x08
    1ca4:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
    1ca8:	18 16       	cp	r1, r24
    1caa:	4c f5       	brge	.+82     	; 0x1cfe <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	69 81       	ldd	r22, Y+1	; 0x01
    1cb6:	7a 81       	ldd	r23, Y+2	; 0x02
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	cd 01       	movw	r24, r26
    1cc8:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	9a 87       	std	Y+10, r25	; 0x0a
    1cd2:	89 87       	std	Y+9, r24	; 0x09
    1cd4:	0f c0       	rjmp	.+30     	; 0x1cf4 <odometry_query_position+0xcc>
    1cd6:	8a ef       	ldi	r24, 0xFA	; 250
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	9c 87       	std	Y+12, r25	; 0x0c
    1cdc:	8b 87       	std	Y+11, r24	; 0x0b
    1cde:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ce0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <odometry_query_position+0xba>
    1ce6:	9c 87       	std	Y+12, r25	; 0x0c
    1ce8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cea:	89 85       	ldd	r24, Y+9	; 0x09
    1cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	9a 87       	std	Y+10, r25	; 0x0a
    1cf2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf4:	89 85       	ldd	r24, Y+9	; 0x09
    1cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf8:	89 2b       	or	r24, r25
    1cfa:	69 f7       	brne	.-38     	; 0x1cd6 <odometry_query_position+0xae>
    1cfc:	14 c0       	rjmp	.+40     	; 0x1d26 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfe:	6d 81       	ldd	r22, Y+5	; 0x05
    1d00:	7e 81       	ldd	r23, Y+6	; 0x06
    1d02:	8f 81       	ldd	r24, Y+7	; 0x07
    1d04:	98 85       	ldd	r25, Y+8	; 0x08
    1d06:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9a 87       	std	Y+10, r25	; 0x0a
    1d10:	89 87       	std	Y+9, r24	; 0x09
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	9e 87       	std	Y+14, r25	; 0x0e
    1d18:	8d 87       	std	Y+13, r24	; 0x0d
    1d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <odometry_query_position+0xf6>
    1d22:	9e 87       	std	Y+14, r25	; 0x0e
    1d24:	8d 87       	std	Y+13, r24	; 0x0d
    1d26:	ce 01       	movw	r24, r28
    1d28:	0f 96       	adiw	r24, 0x0f	; 15
    1d2a:	63 ec       	ldi	r22, 0xC3	; 195
    1d2c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    1d30:	88 23       	and	r24, r24
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <odometry_query_position+0x10e>
    1d34:	86 cf       	rjmp	.-244    	; 0x1c42 <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1d36:	ce 01       	movw	r24, r28
    1d38:	0f 96       	adiw	r24, 0x0f	; 15
    1d3a:	61 e0       	ldi	r22, 0x01	; 1
    1d3c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <CAN_Read>

	position.state = buffer[0];
    1d40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d42:	80 93 15 01 	sts	0x0115, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1d46:	88 89       	ldd	r24, Y+16	; 0x10
    1d48:	88 2f       	mov	r24, r24
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	38 2f       	mov	r19, r24
    1d4e:	22 27       	eor	r18, r18
    1d50:	89 89       	ldd	r24, Y+17	; 0x11
    1d52:	88 2f       	mov	r24, r24
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	82 2b       	or	r24, r18
    1d58:	93 2b       	or	r25, r19
    1d5a:	90 93 10 01 	sts	0x0110, r25
    1d5e:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    1d62:	8a 89       	ldd	r24, Y+18	; 0x12
    1d64:	88 2f       	mov	r24, r24
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	38 2f       	mov	r19, r24
    1d6a:	22 27       	eor	r18, r18
    1d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6e:	88 2f       	mov	r24, r24
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	82 2b       	or	r24, r18
    1d74:	93 2b       	or	r25, r19
    1d76:	90 93 12 01 	sts	0x0112, r25
    1d7a:	80 93 11 01 	sts	0x0111, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    1d7e:	8c 89       	ldd	r24, Y+20	; 0x14
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	38 2f       	mov	r19, r24
    1d86:	22 27       	eor	r18, r18
    1d88:	8d 89       	ldd	r24, Y+21	; 0x15
    1d8a:	88 2f       	mov	r24, r24
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	82 2b       	or	r24, r18
    1d90:	93 2b       	or	r25, r19
    1d92:	90 93 14 01 	sts	0x0114, r25
    1d96:	80 93 13 01 	sts	0x0113, r24
}
    1d9a:	66 96       	adiw	r28, 0x16	; 22
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	08 95       	ret

00001dac <odometry_wait_until_done>:
 * 	static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
 *
 * 	Callback function, execute function while odometry is moving
 */
static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	00 d0       	rcall	.+0      	; 0x1db2 <odometry_wait_until_done+0x6>
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <odometry_wait_until_done+0x8>
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <odometry_wait_until_done+0xa>
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    1dbe:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <system_get_system_time>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	9a 83       	std	Y+2, r25	; 0x02
    1dca:	ab 83       	std	Y+3, r26	; 0x03
    1dcc:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    1dce:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <odometry_query_position>
		if(callback != NULL)
    1dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd6:	89 2b       	or	r24, r25
    1dd8:	71 f0       	breq	.+28     	; 0x1df6 <odometry_wait_until_done+0x4a>
		{
			if(callback(time) == 1)
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	ab 81       	ldd	r26, Y+3	; 0x03
    1de0:	bc 81       	ldd	r27, Y+4	; 0x04
    1de2:	2d 81       	ldd	r18, Y+5	; 0x05
    1de4:	3e 81       	ldd	r19, Y+6	; 0x06
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	f9 01       	movw	r30, r18
    1dec:	09 95       	icall
    1dee:	81 30       	cpi	r24, 0x01	; 1
    1df0:	11 f4       	brne	.+4      	; 0x1df6 <odometry_wait_until_done+0x4a>
				return ODOMETRY_FAIL;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	09 c0       	rjmp	.+18     	; 0x1e08 <odometry_wait_until_done+0x5c>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    1df6:	80 91 15 01 	lds	r24, 0x0115
    1dfa:	8d 34       	cpi	r24, 0x4D	; 77
    1dfc:	41 f3       	breq	.-48     	; 0x1dce <odometry_wait_until_done+0x22>
    1dfe:	80 91 15 01 	lds	r24, 0x0115
    1e02:	82 35       	cpi	r24, 0x52	; 82
    1e04:	21 f3       	breq	.-56     	; 0x1dce <odometry_wait_until_done+0x22>

	return ODOMETRY_SUCCESS;
    1e06:	80 e0       	ldi	r24, 0x00	; 0
}
    1e08:	26 96       	adiw	r28, 0x06	; 6
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	08 95       	ret

00001e1a <odometry_stop>:
 * 	void odometry_stop(int8_t type)
 *
 * 	Send stop to odometry
 */
void odometry_stop(int8_t type)
{
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	67 97       	sbiw	r28, 0x17	; 23
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    1e30:	8f 89       	ldd	r24, Y+23	; 0x17
    1e32:	8f 87       	std	Y+15, r24	; 0x0f

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1e34:	72 c0       	rjmp	.+228    	; 0x1f1a <odometry_stop+0x100>
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a8 e4       	ldi	r26, 0x48	; 72
    1e3c:	b2 e4       	ldi	r27, 0x42	; 66
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	ab 83       	std	Y+3, r26	; 0x03
    1e44:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e4       	ldi	r19, 0x40	; 64
    1e4a:	4c e1       	ldi	r20, 0x1C	; 28
    1e4c:	55 e4       	ldi	r21, 0x45	; 69
    1e4e:	69 81       	ldd	r22, Y+1	; 0x01
    1e50:	7a 81       	ldd	r23, Y+2	; 0x02
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	af 83       	std	Y+7, r26	; 0x07
    1e64:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e8       	ldi	r20, 0x80	; 128
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	6d 81       	ldd	r22, Y+5	; 0x05
    1e70:	7e 81       	ldd	r23, Y+6	; 0x06
    1e72:	8f 81       	ldd	r24, Y+7	; 0x07
    1e74:	98 85       	ldd	r25, Y+8	; 0x08
    1e76:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
    1e7a:	88 23       	and	r24, r24
    1e7c:	2c f4       	brge	.+10     	; 0x1e88 <odometry_stop+0x6e>
		__ticks = 1;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9a 87       	std	Y+10, r25	; 0x0a
    1e84:	89 87       	std	Y+9, r24	; 0x09
    1e86:	3f c0       	rjmp	.+126    	; 0x1f06 <odometry_stop+0xec>
	else if (__tmp > 65535)
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	57 e4       	ldi	r21, 0x47	; 71
    1e90:	6d 81       	ldd	r22, Y+5	; 0x05
    1e92:	7e 81       	ldd	r23, Y+6	; 0x06
    1e94:	8f 81       	ldd	r24, Y+7	; 0x07
    1e96:	98 85       	ldd	r25, Y+8	; 0x08
    1e98:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
    1e9c:	18 16       	cp	r1, r24
    1e9e:	4c f5       	brge	.+82     	; 0x1ef2 <odometry_stop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e2       	ldi	r20, 0x20	; 32
    1ea6:	51 e4       	ldi	r21, 0x41	; 65
    1ea8:	69 81       	ldd	r22, Y+1	; 0x01
    1eaa:	7a 81       	ldd	r23, Y+2	; 0x02
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	bc 01       	movw	r22, r24
    1eba:	cd 01       	movw	r24, r26
    1ebc:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	9a 87       	std	Y+10, r25	; 0x0a
    1ec6:	89 87       	std	Y+9, r24	; 0x09
    1ec8:	0f c0       	rjmp	.+30     	; 0x1ee8 <odometry_stop+0xce>
    1eca:	8a ef       	ldi	r24, 0xFA	; 250
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	9c 87       	std	Y+12, r25	; 0x0c
    1ed0:	8b 87       	std	Y+11, r24	; 0x0b
    1ed2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ed4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <odometry_stop+0xbc>
    1eda:	9c 87       	std	Y+12, r25	; 0x0c
    1edc:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ede:	89 85       	ldd	r24, Y+9	; 0x09
    1ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	9a 87       	std	Y+10, r25	; 0x0a
    1ee6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee8:	89 85       	ldd	r24, Y+9	; 0x09
    1eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eec:	89 2b       	or	r24, r25
    1eee:	69 f7       	brne	.-38     	; 0x1eca <odometry_stop+0xb0>
    1ef0:	14 c0       	rjmp	.+40     	; 0x1f1a <odometry_stop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ef4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ef6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef8:	98 85       	ldd	r25, Y+8	; 0x08
    1efa:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9a 87       	std	Y+10, r25	; 0x0a
    1f04:	89 87       	std	Y+9, r24	; 0x09
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	9e 87       	std	Y+14, r25	; 0x0e
    1f0c:	8d 87       	std	Y+13, r24	; 0x0d
    1f0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <odometry_stop+0xf8>
    1f16:	9e 87       	std	Y+14, r25	; 0x0e
    1f18:	8d 87       	std	Y+13, r24	; 0x0d
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	0f 96       	adiw	r24, 0x0f	; 15
    1f1e:	63 ec       	ldi	r22, 0xC3	; 195
    1f20:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    1f24:	88 23       	and	r24, r24
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <odometry_stop+0x110>
    1f28:	86 cf       	rjmp	.-244    	; 0x1e36 <odometry_stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    1f2a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    1f2e:	80 91 15 01 	lds	r24, 0x0115
    1f32:	8d 34       	cpi	r24, 0x4D	; 77
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <odometry_stop+0x11e>
    1f36:	7c cf       	rjmp	.-264    	; 0x1e30 <odometry_stop+0x16>
    1f38:	80 91 15 01 	lds	r24, 0x0115
    1f3c:	82 35       	cpi	r24, 0x52	; 82
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <odometry_stop+0x128>
    1f40:	77 cf       	rjmp	.-274    	; 0x1e30 <odometry_stop+0x16>
}
    1f42:	67 96       	adiw	r28, 0x17	; 23
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	08 95       	ret

00001f54 <odometry_move_straight>:
 * 	uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move straight command to odometry
 */
uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	6b 97       	sbiw	r28, 0x1b	; 27
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	98 8f       	std	Y+24, r25	; 0x18
    1f6a:	8f 8b       	std	Y+23, r24	; 0x17
    1f6c:	69 8f       	std	Y+25, r22	; 0x19
    1f6e:	5b 8f       	std	Y+27, r21	; 0x1b
    1f70:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1f72:	89 8d       	ldd	r24, Y+25	; 0x19
    1f74:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <odometry_set_speed>
	buffer[0] = 'D';
    1f78:	84 e4       	ldi	r24, 0x44	; 68
    1f7a:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    1f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f80:	89 2f       	mov	r24, r25
    1f82:	99 0f       	add	r25, r25
    1f84:	99 0b       	sbc	r25, r25
    1f86:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    1f88:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8a:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1f8c:	72 c0       	rjmp	.+228    	; 0x2072 <odometry_move_straight+0x11e>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a8 e4       	ldi	r26, 0x48	; 72
    1f94:	b2 e4       	ldi	r27, 0x42	; 66
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	9a 83       	std	Y+2, r25	; 0x02
    1f9a:	ab 83       	std	Y+3, r26	; 0x03
    1f9c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e4       	ldi	r19, 0x40	; 64
    1fa2:	4c e1       	ldi	r20, 0x1C	; 28
    1fa4:	55 e4       	ldi	r21, 0x45	; 69
    1fa6:	69 81       	ldd	r22, Y+1	; 0x01
    1fa8:	7a 81       	ldd	r23, Y+2	; 0x02
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	8d 83       	std	Y+5, r24	; 0x05
    1fb8:	9e 83       	std	Y+6, r25	; 0x06
    1fba:	af 83       	std	Y+7, r26	; 0x07
    1fbc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e8       	ldi	r20, 0x80	; 128
    1fc4:	5f e3       	ldi	r21, 0x3F	; 63
    1fc6:	6d 81       	ldd	r22, Y+5	; 0x05
    1fc8:	7e 81       	ldd	r23, Y+6	; 0x06
    1fca:	8f 81       	ldd	r24, Y+7	; 0x07
    1fcc:	98 85       	ldd	r25, Y+8	; 0x08
    1fce:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	2c f4       	brge	.+10     	; 0x1fe0 <odometry_move_straight+0x8c>
		__ticks = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	9a 87       	std	Y+10, r25	; 0x0a
    1fdc:	89 87       	std	Y+9, r24	; 0x09
    1fde:	3f c0       	rjmp	.+126    	; 0x205e <odometry_move_straight+0x10a>
	else if (__tmp > 65535)
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	3f ef       	ldi	r19, 0xFF	; 255
    1fe4:	4f e7       	ldi	r20, 0x7F	; 127
    1fe6:	57 e4       	ldi	r21, 0x47	; 71
    1fe8:	6d 81       	ldd	r22, Y+5	; 0x05
    1fea:	7e 81       	ldd	r23, Y+6	; 0x06
    1fec:	8f 81       	ldd	r24, Y+7	; 0x07
    1fee:	98 85       	ldd	r25, Y+8	; 0x08
    1ff0:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
    1ff4:	18 16       	cp	r1, r24
    1ff6:	4c f5       	brge	.+82     	; 0x204a <odometry_move_straight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e2       	ldi	r20, 0x20	; 32
    1ffe:	51 e4       	ldi	r21, 0x41	; 65
    2000:	69 81       	ldd	r22, Y+1	; 0x01
    2002:	7a 81       	ldd	r23, Y+2	; 0x02
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	9a 87       	std	Y+10, r25	; 0x0a
    201e:	89 87       	std	Y+9, r24	; 0x09
    2020:	0f c0       	rjmp	.+30     	; 0x2040 <odometry_move_straight+0xec>
    2022:	8a ef       	ldi	r24, 0xFA	; 250
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	9c 87       	std	Y+12, r25	; 0x0c
    2028:	8b 87       	std	Y+11, r24	; 0x0b
    202a:	8b 85       	ldd	r24, Y+11	; 0x0b
    202c:	9c 85       	ldd	r25, Y+12	; 0x0c
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <odometry_move_straight+0xda>
    2032:	9c 87       	std	Y+12, r25	; 0x0c
    2034:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2036:	89 85       	ldd	r24, Y+9	; 0x09
    2038:	9a 85       	ldd	r25, Y+10	; 0x0a
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	9a 87       	std	Y+10, r25	; 0x0a
    203e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2040:	89 85       	ldd	r24, Y+9	; 0x09
    2042:	9a 85       	ldd	r25, Y+10	; 0x0a
    2044:	89 2b       	or	r24, r25
    2046:	69 f7       	brne	.-38     	; 0x2022 <odometry_move_straight+0xce>
    2048:	14 c0       	rjmp	.+40     	; 0x2072 <odometry_move_straight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204a:	6d 81       	ldd	r22, Y+5	; 0x05
    204c:	7e 81       	ldd	r23, Y+6	; 0x06
    204e:	8f 81       	ldd	r24, Y+7	; 0x07
    2050:	98 85       	ldd	r25, Y+8	; 0x08
    2052:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9a 87       	std	Y+10, r25	; 0x0a
    205c:	89 87       	std	Y+9, r24	; 0x09
    205e:	89 85       	ldd	r24, Y+9	; 0x09
    2060:	9a 85       	ldd	r25, Y+10	; 0x0a
    2062:	9e 87       	std	Y+14, r25	; 0x0e
    2064:	8d 87       	std	Y+13, r24	; 0x0d
    2066:	8d 85       	ldd	r24, Y+13	; 0x0d
    2068:	9e 85       	ldd	r25, Y+14	; 0x0e
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <odometry_move_straight+0x116>
    206e:	9e 87       	std	Y+14, r25	; 0x0e
    2070:	8d 87       	std	Y+13, r24	; 0x0d
    2072:	ce 01       	movw	r24, r28
    2074:	0f 96       	adiw	r24, 0x0f	; 15
    2076:	63 ec       	ldi	r22, 0xC3	; 195
    2078:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    207c:	88 23       	and	r24, r24
    207e:	09 f0       	breq	.+2      	; 0x2082 <odometry_move_straight+0x12e>
    2080:	86 cf       	rjmp	.-244    	; 0x1f8e <odometry_move_straight+0x3a>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    2082:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2084:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2086:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <odometry_wait_until_done>
}
    208a:	6b 96       	adiw	r28, 0x1b	; 27
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	08 95       	ret

0000209c <odometry_move_to_position>:
 * 	uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move to position function to odometry
 */
uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
{
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	6c 97       	sbiw	r28, 0x1c	; 28
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	98 8f       	std	Y+24, r25	; 0x18
    20b2:	8f 8b       	std	Y+23, r24	; 0x17
    20b4:	69 8f       	std	Y+25, r22	; 0x19
    20b6:	4a 8f       	std	Y+26, r20	; 0x1a
    20b8:	3c 8f       	std	Y+28, r19	; 0x1c
    20ba:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    20bc:	89 8d       	ldd	r24, Y+25	; 0x19
    20be:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <odometry_set_speed>

	buffer[0] = 'G';
    20c2:	87 e4       	ldi	r24, 0x47	; 71
    20c4:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    20c6:	8f 89       	ldd	r24, Y+23	; 0x17
    20c8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ca:	fc 01       	movw	r30, r24
    20cc:	80 81       	ld	r24, Z
    20ce:	91 81       	ldd	r25, Z+1	; 0x01
    20d0:	89 2f       	mov	r24, r25
    20d2:	99 0f       	add	r25, r25
    20d4:	99 0b       	sbc	r25, r25
    20d6:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    20d8:	8f 89       	ldd	r24, Y+23	; 0x17
    20da:	98 8d       	ldd	r25, Y+24	; 0x18
    20dc:	fc 01       	movw	r30, r24
    20de:	80 81       	ld	r24, Z
    20e0:	91 81       	ldd	r25, Z+1	; 0x01
    20e2:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    20e4:	8f 89       	ldd	r24, Y+23	; 0x17
    20e6:	98 8d       	ldd	r25, Y+24	; 0x18
    20e8:	fc 01       	movw	r30, r24
    20ea:	82 81       	ldd	r24, Z+2	; 0x02
    20ec:	93 81       	ldd	r25, Z+3	; 0x03
    20ee:	89 2f       	mov	r24, r25
    20f0:	99 0f       	add	r25, r25
    20f2:	99 0b       	sbc	r25, r25
    20f4:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    20f6:	8f 89       	ldd	r24, Y+23	; 0x17
    20f8:	98 8d       	ldd	r25, Y+24	; 0x18
    20fa:	fc 01       	movw	r30, r24
    20fc:	82 81       	ldd	r24, Z+2	; 0x02
    20fe:	93 81       	ldd	r25, Z+3	; 0x03
    2100:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    2102:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    2104:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2106:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2108:	72 c0       	rjmp	.+228    	; 0x21ee <odometry_move_to_position+0x152>
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	a8 e4       	ldi	r26, 0x48	; 72
    2110:	b2 e4       	ldi	r27, 0x42	; 66
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	ab 83       	std	Y+3, r26	; 0x03
    2118:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e4       	ldi	r19, 0x40	; 64
    211e:	4c e1       	ldi	r20, 0x1C	; 28
    2120:	55 e4       	ldi	r21, 0x45	; 69
    2122:	69 81       	ldd	r22, Y+1	; 0x01
    2124:	7a 81       	ldd	r23, Y+2	; 0x02
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	8d 83       	std	Y+5, r24	; 0x05
    2134:	9e 83       	std	Y+6, r25	; 0x06
    2136:	af 83       	std	Y+7, r26	; 0x07
    2138:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e8       	ldi	r20, 0x80	; 128
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	6d 81       	ldd	r22, Y+5	; 0x05
    2144:	7e 81       	ldd	r23, Y+6	; 0x06
    2146:	8f 81       	ldd	r24, Y+7	; 0x07
    2148:	98 85       	ldd	r25, Y+8	; 0x08
    214a:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
    214e:	88 23       	and	r24, r24
    2150:	2c f4       	brge	.+10     	; 0x215c <odometry_move_to_position+0xc0>
		__ticks = 1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9a 87       	std	Y+10, r25	; 0x0a
    2158:	89 87       	std	Y+9, r24	; 0x09
    215a:	3f c0       	rjmp	.+126    	; 0x21da <odometry_move_to_position+0x13e>
	else if (__tmp > 65535)
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	3f ef       	ldi	r19, 0xFF	; 255
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	57 e4       	ldi	r21, 0x47	; 71
    2164:	6d 81       	ldd	r22, Y+5	; 0x05
    2166:	7e 81       	ldd	r23, Y+6	; 0x06
    2168:	8f 81       	ldd	r24, Y+7	; 0x07
    216a:	98 85       	ldd	r25, Y+8	; 0x08
    216c:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
    2170:	18 16       	cp	r1, r24
    2172:	4c f5       	brge	.+82     	; 0x21c6 <odometry_move_to_position+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	69 81       	ldd	r22, Y+1	; 0x01
    217e:	7a 81       	ldd	r23, Y+2	; 0x02
    2180:	8b 81       	ldd	r24, Y+3	; 0x03
    2182:	9c 81       	ldd	r25, Y+4	; 0x04
    2184:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	bc 01       	movw	r22, r24
    218e:	cd 01       	movw	r24, r26
    2190:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	9a 87       	std	Y+10, r25	; 0x0a
    219a:	89 87       	std	Y+9, r24	; 0x09
    219c:	0f c0       	rjmp	.+30     	; 0x21bc <odometry_move_to_position+0x120>
    219e:	8a ef       	ldi	r24, 0xFA	; 250
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	9c 87       	std	Y+12, r25	; 0x0c
    21a4:	8b 87       	std	Y+11, r24	; 0x0b
    21a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    21a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <odometry_move_to_position+0x10e>
    21ae:	9c 87       	std	Y+12, r25	; 0x0c
    21b0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b2:	89 85       	ldd	r24, Y+9	; 0x09
    21b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	9a 87       	std	Y+10, r25	; 0x0a
    21ba:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21bc:	89 85       	ldd	r24, Y+9	; 0x09
    21be:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c0:	89 2b       	or	r24, r25
    21c2:	69 f7       	brne	.-38     	; 0x219e <odometry_move_to_position+0x102>
    21c4:	14 c0       	rjmp	.+40     	; 0x21ee <odometry_move_to_position+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c6:	6d 81       	ldd	r22, Y+5	; 0x05
    21c8:	7e 81       	ldd	r23, Y+6	; 0x06
    21ca:	8f 81       	ldd	r24, Y+7	; 0x07
    21cc:	98 85       	ldd	r25, Y+8	; 0x08
    21ce:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9a 87       	std	Y+10, r25	; 0x0a
    21d8:	89 87       	std	Y+9, r24	; 0x09
    21da:	89 85       	ldd	r24, Y+9	; 0x09
    21dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21de:	9e 87       	std	Y+14, r25	; 0x0e
    21e0:	8d 87       	std	Y+13, r24	; 0x0d
    21e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <odometry_move_to_position+0x14a>
    21ea:	9e 87       	std	Y+14, r25	; 0x0e
    21ec:	8d 87       	std	Y+13, r24	; 0x0d
    21ee:	ce 01       	movw	r24, r28
    21f0:	0f 96       	adiw	r24, 0x0f	; 15
    21f2:	63 ec       	ldi	r22, 0xC3	; 195
    21f4:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    21f8:	88 23       	and	r24, r24
    21fa:	09 f0       	breq	.+2      	; 0x21fe <odometry_move_to_position+0x162>
    21fc:	86 cf       	rjmp	.-244    	; 0x210a <odometry_move_to_position+0x6e>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    21fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2200:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2202:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <odometry_wait_until_done>
}
    2206:	6c 96       	adiw	r28, 0x1c	; 28
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	08 95       	ret

00002218 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	68 97       	sbiw	r28, 0x18	; 24
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	de bf       	out	0x3e, r29	; 62
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	98 8f       	std	Y+24, r25	; 0x18
    222e:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    2230:	89 e4       	ldi	r24, 0x49	; 73
    2232:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    2234:	8f 89       	ldd	r24, Y+23	; 0x17
    2236:	98 8d       	ldd	r25, Y+24	; 0x18
    2238:	fc 01       	movw	r30, r24
    223a:	80 81       	ld	r24, Z
    223c:	91 81       	ldd	r25, Z+1	; 0x01
    223e:	89 2f       	mov	r24, r25
    2240:	99 0f       	add	r25, r25
    2242:	99 0b       	sbc	r25, r25
    2244:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    2246:	8f 89       	ldd	r24, Y+23	; 0x17
    2248:	98 8d       	ldd	r25, Y+24	; 0x18
    224a:	fc 01       	movw	r30, r24
    224c:	80 81       	ld	r24, Z
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    2252:	8f 89       	ldd	r24, Y+23	; 0x17
    2254:	98 8d       	ldd	r25, Y+24	; 0x18
    2256:	fc 01       	movw	r30, r24
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	89 2f       	mov	r24, r25
    225e:	99 0f       	add	r25, r25
    2260:	99 0b       	sbc	r25, r25
    2262:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    2264:	8f 89       	ldd	r24, Y+23	; 0x17
    2266:	98 8d       	ldd	r25, Y+24	; 0x18
    2268:	fc 01       	movw	r30, r24
    226a:	82 81       	ldd	r24, Z+2	; 0x02
    226c:	93 81       	ldd	r25, Z+3	; 0x03
    226e:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    2270:	8f 89       	ldd	r24, Y+23	; 0x17
    2272:	98 8d       	ldd	r25, Y+24	; 0x18
    2274:	fc 01       	movw	r30, r24
    2276:	84 81       	ldd	r24, Z+4	; 0x04
    2278:	95 81       	ldd	r25, Z+5	; 0x05
    227a:	89 2f       	mov	r24, r25
    227c:	99 0f       	add	r25, r25
    227e:	99 0b       	sbc	r25, r25
    2280:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    2282:	8f 89       	ldd	r24, Y+23	; 0x17
    2284:	98 8d       	ldd	r25, Y+24	; 0x18
    2286:	fc 01       	movw	r30, r24
    2288:	84 81       	ldd	r24, Z+4	; 0x04
    228a:	95 81       	ldd	r25, Z+5	; 0x05
    228c:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    228e:	8f 89       	ldd	r24, Y+23	; 0x17
    2290:	98 8d       	ldd	r25, Y+24	; 0x18
    2292:	fc 01       	movw	r30, r24
    2294:	80 81       	ld	r24, Z
    2296:	91 81       	ldd	r25, Z+1	; 0x01
    2298:	90 93 10 01 	sts	0x0110, r25
    229c:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = new_position->y;
    22a0:	8f 89       	ldd	r24, Y+23	; 0x17
    22a2:	98 8d       	ldd	r25, Y+24	; 0x18
    22a4:	fc 01       	movw	r30, r24
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	93 81       	ldd	r25, Z+3	; 0x03
    22aa:	90 93 12 01 	sts	0x0112, r25
    22ae:	80 93 11 01 	sts	0x0111, r24
	position.angle = new_position->angle;
    22b2:	8f 89       	ldd	r24, Y+23	; 0x17
    22b4:	98 8d       	ldd	r25, Y+24	; 0x18
    22b6:	fc 01       	movw	r30, r24
    22b8:	84 81       	ldd	r24, Z+4	; 0x04
    22ba:	95 81       	ldd	r25, Z+5	; 0x05
    22bc:	90 93 14 01 	sts	0x0114, r25
    22c0:	80 93 13 01 	sts	0x0113, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    22c4:	72 c0       	rjmp	.+228    	; 0x23aa <odometry_set_position+0x192>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	a8 e4       	ldi	r26, 0x48	; 72
    22cc:	b2 e4       	ldi	r27, 0x42	; 66
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	ab 83       	std	Y+3, r26	; 0x03
    22d4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e4       	ldi	r19, 0x40	; 64
    22da:	4c e1       	ldi	r20, 0x1C	; 28
    22dc:	55 e4       	ldi	r21, 0x45	; 69
    22de:	69 81       	ldd	r22, Y+1	; 0x01
    22e0:	7a 81       	ldd	r23, Y+2	; 0x02
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	9c 81       	ldd	r25, Y+4	; 0x04
    22e6:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	8d 83       	std	Y+5, r24	; 0x05
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	af 83       	std	Y+7, r26	; 0x07
    22f4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e8       	ldi	r20, 0x80	; 128
    22fc:	5f e3       	ldi	r21, 0x3F	; 63
    22fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2300:	7e 81       	ldd	r23, Y+6	; 0x06
    2302:	8f 81       	ldd	r24, Y+7	; 0x07
    2304:	98 85       	ldd	r25, Y+8	; 0x08
    2306:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
    230a:	88 23       	and	r24, r24
    230c:	2c f4       	brge	.+10     	; 0x2318 <odometry_set_position+0x100>
		__ticks = 1;
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	9a 87       	std	Y+10, r25	; 0x0a
    2314:	89 87       	std	Y+9, r24	; 0x09
    2316:	3f c0       	rjmp	.+126    	; 0x2396 <odometry_set_position+0x17e>
	else if (__tmp > 65535)
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	3f ef       	ldi	r19, 0xFF	; 255
    231c:	4f e7       	ldi	r20, 0x7F	; 127
    231e:	57 e4       	ldi	r21, 0x47	; 71
    2320:	6d 81       	ldd	r22, Y+5	; 0x05
    2322:	7e 81       	ldd	r23, Y+6	; 0x06
    2324:	8f 81       	ldd	r24, Y+7	; 0x07
    2326:	98 85       	ldd	r25, Y+8	; 0x08
    2328:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
    232c:	18 16       	cp	r1, r24
    232e:	4c f5       	brge	.+82     	; 0x2382 <odometry_set_position+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e2       	ldi	r20, 0x20	; 32
    2336:	51 e4       	ldi	r21, 0x41	; 65
    2338:	69 81       	ldd	r22, Y+1	; 0x01
    233a:	7a 81       	ldd	r23, Y+2	; 0x02
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	9c 81       	ldd	r25, Y+4	; 0x04
    2340:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	bc 01       	movw	r22, r24
    234a:	cd 01       	movw	r24, r26
    234c:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9a 87       	std	Y+10, r25	; 0x0a
    2356:	89 87       	std	Y+9, r24	; 0x09
    2358:	0f c0       	rjmp	.+30     	; 0x2378 <odometry_set_position+0x160>
    235a:	8a ef       	ldi	r24, 0xFA	; 250
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9c 87       	std	Y+12, r25	; 0x0c
    2360:	8b 87       	std	Y+11, r24	; 0x0b
    2362:	8b 85       	ldd	r24, Y+11	; 0x0b
    2364:	9c 85       	ldd	r25, Y+12	; 0x0c
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <odometry_set_position+0x14e>
    236a:	9c 87       	std	Y+12, r25	; 0x0c
    236c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	9a 87       	std	Y+10, r25	; 0x0a
    2376:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2378:	89 85       	ldd	r24, Y+9	; 0x09
    237a:	9a 85       	ldd	r25, Y+10	; 0x0a
    237c:	89 2b       	or	r24, r25
    237e:	69 f7       	brne	.-38     	; 0x235a <odometry_set_position+0x142>
    2380:	14 c0       	rjmp	.+40     	; 0x23aa <odometry_set_position+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2382:	6d 81       	ldd	r22, Y+5	; 0x05
    2384:	7e 81       	ldd	r23, Y+6	; 0x06
    2386:	8f 81       	ldd	r24, Y+7	; 0x07
    2388:	98 85       	ldd	r25, Y+8	; 0x08
    238a:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	9a 87       	std	Y+10, r25	; 0x0a
    2394:	89 87       	std	Y+9, r24	; 0x09
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	9e 87       	std	Y+14, r25	; 0x0e
    239c:	8d 87       	std	Y+13, r24	; 0x0d
    239e:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <odometry_set_position+0x18a>
    23a6:	9e 87       	std	Y+14, r25	; 0x0e
    23a8:	8d 87       	std	Y+13, r24	; 0x0d
    23aa:	ce 01       	movw	r24, r28
    23ac:	0f 96       	adiw	r24, 0x0f	; 15
    23ae:	63 ec       	ldi	r22, 0xC3	; 195
    23b0:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    23b4:	88 23       	and	r24, r24
    23b6:	09 f0       	breq	.+2      	; 0x23ba <odometry_set_position+0x1a2>
    23b8:	86 cf       	rjmp	.-244    	; 0x22c6 <odometry_set_position+0xae>
		_delay_ms(50);
}
    23ba:	68 96       	adiw	r28, 0x18	; 24
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	08 95       	ret

000023cc <odometry_rotate_for>:
 * 	uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send rotate for command to odometry board
 */
uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	6b 97       	sbiw	r28, 0x1b	; 27
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	98 8f       	std	Y+24, r25	; 0x18
    23e2:	8f 8b       	std	Y+23, r24	; 0x17
    23e4:	69 8f       	std	Y+25, r22	; 0x19
    23e6:	5b 8f       	std	Y+27, r21	; 0x1b
    23e8:	4a 8f       	std	Y+26, r20	; 0x1a

	uint8_t buffer[8];
	odometry_set_speed(speed);
    23ea:	89 8d       	ldd	r24, Y+25	; 0x19
    23ec:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <odometry_set_speed>

	buffer[0] = 'T';
    23f0:	84 e5       	ldi	r24, 0x54	; 84
    23f2:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    23f4:	8f 89       	ldd	r24, Y+23	; 0x17
    23f6:	98 8d       	ldd	r25, Y+24	; 0x18
    23f8:	89 2f       	mov	r24, r25
    23fa:	99 27       	eor	r25, r25
    23fc:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    23fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2400:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2402:	72 c0       	rjmp	.+228    	; 0x24e8 <odometry_rotate_for+0x11c>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a8 e4       	ldi	r26, 0x48	; 72
    240a:	b2 e4       	ldi	r27, 0x42	; 66
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	9a 83       	std	Y+2, r25	; 0x02
    2410:	ab 83       	std	Y+3, r26	; 0x03
    2412:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e4       	ldi	r19, 0x40	; 64
    2418:	4c e1       	ldi	r20, 0x1C	; 28
    241a:	55 e4       	ldi	r21, 0x45	; 69
    241c:	69 81       	ldd	r22, Y+1	; 0x01
    241e:	7a 81       	ldd	r23, Y+2	; 0x02
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	8d 83       	std	Y+5, r24	; 0x05
    242e:	9e 83       	std	Y+6, r25	; 0x06
    2430:	af 83       	std	Y+7, r26	; 0x07
    2432:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e8       	ldi	r20, 0x80	; 128
    243a:	5f e3       	ldi	r21, 0x3F	; 63
    243c:	6d 81       	ldd	r22, Y+5	; 0x05
    243e:	7e 81       	ldd	r23, Y+6	; 0x06
    2440:	8f 81       	ldd	r24, Y+7	; 0x07
    2442:	98 85       	ldd	r25, Y+8	; 0x08
    2444:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
    2448:	88 23       	and	r24, r24
    244a:	2c f4       	brge	.+10     	; 0x2456 <odometry_rotate_for+0x8a>
		__ticks = 1;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9a 87       	std	Y+10, r25	; 0x0a
    2452:	89 87       	std	Y+9, r24	; 0x09
    2454:	3f c0       	rjmp	.+126    	; 0x24d4 <odometry_rotate_for+0x108>
	else if (__tmp > 65535)
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	3f ef       	ldi	r19, 0xFF	; 255
    245a:	4f e7       	ldi	r20, 0x7F	; 127
    245c:	57 e4       	ldi	r21, 0x47	; 71
    245e:	6d 81       	ldd	r22, Y+5	; 0x05
    2460:	7e 81       	ldd	r23, Y+6	; 0x06
    2462:	8f 81       	ldd	r24, Y+7	; 0x07
    2464:	98 85       	ldd	r25, Y+8	; 0x08
    2466:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
    246a:	18 16       	cp	r1, r24
    246c:	4c f5       	brge	.+82     	; 0x24c0 <odometry_rotate_for+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	51 e4       	ldi	r21, 0x41	; 65
    2476:	69 81       	ldd	r22, Y+1	; 0x01
    2478:	7a 81       	ldd	r23, Y+2	; 0x02
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	bc 01       	movw	r22, r24
    2488:	cd 01       	movw	r24, r26
    248a:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	9a 87       	std	Y+10, r25	; 0x0a
    2494:	89 87       	std	Y+9, r24	; 0x09
    2496:	0f c0       	rjmp	.+30     	; 0x24b6 <odometry_rotate_for+0xea>
    2498:	8a ef       	ldi	r24, 0xFA	; 250
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9c 87       	std	Y+12, r25	; 0x0c
    249e:	8b 87       	std	Y+11, r24	; 0x0b
    24a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    24a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <odometry_rotate_for+0xd8>
    24a8:	9c 87       	std	Y+12, r25	; 0x0c
    24aa:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ac:	89 85       	ldd	r24, Y+9	; 0x09
    24ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	9a 87       	std	Y+10, r25	; 0x0a
    24b4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	89 2b       	or	r24, r25
    24bc:	69 f7       	brne	.-38     	; 0x2498 <odometry_rotate_for+0xcc>
    24be:	14 c0       	rjmp	.+40     	; 0x24e8 <odometry_rotate_for+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c0:	6d 81       	ldd	r22, Y+5	; 0x05
    24c2:	7e 81       	ldd	r23, Y+6	; 0x06
    24c4:	8f 81       	ldd	r24, Y+7	; 0x07
    24c6:	98 85       	ldd	r25, Y+8	; 0x08
    24c8:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9a 87       	std	Y+10, r25	; 0x0a
    24d2:	89 87       	std	Y+9, r24	; 0x09
    24d4:	89 85       	ldd	r24, Y+9	; 0x09
    24d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d8:	9e 87       	std	Y+14, r25	; 0x0e
    24da:	8d 87       	std	Y+13, r24	; 0x0d
    24dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24de:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <odometry_rotate_for+0x114>
    24e4:	9e 87       	std	Y+14, r25	; 0x0e
    24e6:	8d 87       	std	Y+13, r24	; 0x0d
    24e8:	ce 01       	movw	r24, r28
    24ea:	0f 96       	adiw	r24, 0x0f	; 15
    24ec:	63 ec       	ldi	r22, 0xC3	; 195
    24ee:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    24f2:	88 23       	and	r24, r24
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <odometry_rotate_for+0x12c>
    24f6:	86 cf       	rjmp	.-244    	; 0x2404 <odometry_rotate_for+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    24f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    24fc:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <odometry_wait_until_done>

}
    2500:	6b 96       	adiw	r28, 0x1b	; 27
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	08 95       	ret

00002512 <odometry_set_angle>:
 * 	uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Set angle for odometry
 */
uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	6b 97       	sbiw	r28, 0x1b	; 27
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	98 8f       	std	Y+24, r25	; 0x18
    2528:	8f 8b       	std	Y+23, r24	; 0x17
    252a:	69 8f       	std	Y+25, r22	; 0x19
    252c:	5b 8f       	std	Y+27, r21	; 0x1b
    252e:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    2530:	89 8d       	ldd	r24, Y+25	; 0x19
    2532:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <odometry_set_speed>

	buffer[0] = 'A';
    2536:	81 e4       	ldi	r24, 0x41	; 65
    2538:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    253a:	8f 89       	ldd	r24, Y+23	; 0x17
    253c:	98 8d       	ldd	r25, Y+24	; 0x18
    253e:	89 2f       	mov	r24, r25
    2540:	99 27       	eor	r25, r25
    2542:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    2544:	8f 89       	ldd	r24, Y+23	; 0x17
    2546:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    2548:	72 c0       	rjmp	.+228    	; 0x262e <odometry_set_angle+0x11c>
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	a8 e4       	ldi	r26, 0x48	; 72
    2550:	b2 e4       	ldi	r27, 0x42	; 66
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	9a 83       	std	Y+2, r25	; 0x02
    2556:	ab 83       	std	Y+3, r26	; 0x03
    2558:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e4       	ldi	r19, 0x40	; 64
    255e:	4c e1       	ldi	r20, 0x1C	; 28
    2560:	55 e4       	ldi	r21, 0x45	; 69
    2562:	69 81       	ldd	r22, Y+1	; 0x01
    2564:	7a 81       	ldd	r23, Y+2	; 0x02
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	9c 81       	ldd	r25, Y+4	; 0x04
    256a:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	8d 83       	std	Y+5, r24	; 0x05
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	af 83       	std	Y+7, r26	; 0x07
    2578:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e8       	ldi	r20, 0x80	; 128
    2580:	5f e3       	ldi	r21, 0x3F	; 63
    2582:	6d 81       	ldd	r22, Y+5	; 0x05
    2584:	7e 81       	ldd	r23, Y+6	; 0x06
    2586:	8f 81       	ldd	r24, Y+7	; 0x07
    2588:	98 85       	ldd	r25, Y+8	; 0x08
    258a:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
    258e:	88 23       	and	r24, r24
    2590:	2c f4       	brge	.+10     	; 0x259c <odometry_set_angle+0x8a>
		__ticks = 1;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9a 87       	std	Y+10, r25	; 0x0a
    2598:	89 87       	std	Y+9, r24	; 0x09
    259a:	3f c0       	rjmp	.+126    	; 0x261a <odometry_set_angle+0x108>
	else if (__tmp > 65535)
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	3f ef       	ldi	r19, 0xFF	; 255
    25a0:	4f e7       	ldi	r20, 0x7F	; 127
    25a2:	57 e4       	ldi	r21, 0x47	; 71
    25a4:	6d 81       	ldd	r22, Y+5	; 0x05
    25a6:	7e 81       	ldd	r23, Y+6	; 0x06
    25a8:	8f 81       	ldd	r24, Y+7	; 0x07
    25aa:	98 85       	ldd	r25, Y+8	; 0x08
    25ac:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
    25b0:	18 16       	cp	r1, r24
    25b2:	4c f5       	brge	.+82     	; 0x2606 <odometry_set_angle+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e2       	ldi	r20, 0x20	; 32
    25ba:	51 e4       	ldi	r21, 0x41	; 65
    25bc:	69 81       	ldd	r22, Y+1	; 0x01
    25be:	7a 81       	ldd	r23, Y+2	; 0x02
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	bc 01       	movw	r22, r24
    25ce:	cd 01       	movw	r24, r26
    25d0:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9a 87       	std	Y+10, r25	; 0x0a
    25da:	89 87       	std	Y+9, r24	; 0x09
    25dc:	0f c0       	rjmp	.+30     	; 0x25fc <odometry_set_angle+0xea>
    25de:	8a ef       	ldi	r24, 0xFA	; 250
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	9c 87       	std	Y+12, r25	; 0x0c
    25e4:	8b 87       	std	Y+11, r24	; 0x0b
    25e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    25e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <odometry_set_angle+0xd8>
    25ee:	9c 87       	std	Y+12, r25	; 0x0c
    25f0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f2:	89 85       	ldd	r24, Y+9	; 0x09
    25f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	9a 87       	std	Y+10, r25	; 0x0a
    25fa:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fc:	89 85       	ldd	r24, Y+9	; 0x09
    25fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2600:	89 2b       	or	r24, r25
    2602:	69 f7       	brne	.-38     	; 0x25de <odometry_set_angle+0xcc>
    2604:	14 c0       	rjmp	.+40     	; 0x262e <odometry_set_angle+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2606:	6d 81       	ldd	r22, Y+5	; 0x05
    2608:	7e 81       	ldd	r23, Y+6	; 0x06
    260a:	8f 81       	ldd	r24, Y+7	; 0x07
    260c:	98 85       	ldd	r25, Y+8	; 0x08
    260e:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9a 87       	std	Y+10, r25	; 0x0a
    2618:	89 87       	std	Y+9, r24	; 0x09
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	9e 87       	std	Y+14, r25	; 0x0e
    2620:	8d 87       	std	Y+13, r24	; 0x0d
    2622:	8d 85       	ldd	r24, Y+13	; 0x0d
    2624:	9e 85       	ldd	r25, Y+14	; 0x0e
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <odometry_set_angle+0x114>
    262a:	9e 87       	std	Y+14, r25	; 0x0e
    262c:	8d 87       	std	Y+13, r24	; 0x0d
    262e:	ce 01       	movw	r24, r28
    2630:	0f 96       	adiw	r24, 0x0f	; 15
    2632:	63 ec       	ldi	r22, 0xC3	; 195
    2634:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    2638:	88 23       	and	r24, r24
    263a:	09 f0       	breq	.+2      	; 0x263e <odometry_set_angle+0x12c>
    263c:	86 cf       	rjmp	.-244    	; 0x254a <odometry_set_angle+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    263e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2640:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2642:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <odometry_wait_until_done>
}
    2646:	6b 96       	adiw	r28, 0x1b	; 27
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <odometry_kurva>:

uint8_t odometry_kurva(uint16_t x_pos, uint16_t y_pos, int8_t angle, uint8_t direction, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    2658:	ef 92       	push	r14
    265a:	ff 92       	push	r15
    265c:	0f 93       	push	r16
    265e:	cf 93       	push	r28
    2660:	df 93       	push	r29
    2662:	cd b7       	in	r28, 0x3d	; 61
    2664:	de b7       	in	r29, 0x3e	; 62
    2666:	6f 97       	sbiw	r28, 0x1f	; 31
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	cd bf       	out	0x3d, r28	; 61
    2672:	98 8f       	std	Y+24, r25	; 0x18
    2674:	8f 8b       	std	Y+23, r24	; 0x17
    2676:	7a 8f       	std	Y+26, r23	; 0x1a
    2678:	69 8f       	std	Y+25, r22	; 0x19
    267a:	4b 8f       	std	Y+27, r20	; 0x1b
    267c:	2c 8f       	std	Y+28, r18	; 0x1c
    267e:	0d 8f       	std	Y+29, r16	; 0x1d
    2680:	ff 8e       	std	Y+31, r15	; 0x1f
    2682:	ee 8e       	std	Y+30, r14	; 0x1e
	uint8_t buffer[8];

	odometry_set_speed(speed);
    2684:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2686:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <odometry_set_speed>

	buffer[0] = 'Q';
    268a:	81 e5       	ldi	r24, 0x51	; 81
    268c:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = x_pos >> 8;
    268e:	8f 89       	ldd	r24, Y+23	; 0x17
    2690:	98 8d       	ldd	r25, Y+24	; 0x18
    2692:	89 2f       	mov	r24, r25
    2694:	99 27       	eor	r25, r25
    2696:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = x_pos & 0xFF;
    2698:	8f 89       	ldd	r24, Y+23	; 0x17
    269a:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = y_pos >> 8;
    269c:	89 8d       	ldd	r24, Y+25	; 0x19
    269e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26a0:	89 2f       	mov	r24, r25
    26a2:	99 27       	eor	r25, r25
    26a4:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = y_pos & 0xFF;
    26a6:	89 8d       	ldd	r24, Y+25	; 0x19
    26a8:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = angle >> 8;
    26aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ac:	08 2e       	mov	r0, r24
    26ae:	00 0c       	add	r0, r0
    26b0:	99 0b       	sbc	r25, r25
    26b2:	89 2f       	mov	r24, r25
    26b4:	99 0f       	add	r25, r25
    26b6:	99 0b       	sbc	r25, r25
    26b8:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = angle & 0xFF;
    26ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26bc:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[7] = direction;
    26be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26c0:	8e 8b       	std	Y+22, r24	; 0x16

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    26c2:	72 c0       	rjmp	.+228    	; 0x27a8 <odometry_kurva+0x150>
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a8 e4       	ldi	r26, 0x48	; 72
    26ca:	b2 e4       	ldi	r27, 0x42	; 66
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	9a 83       	std	Y+2, r25	; 0x02
    26d0:	ab 83       	std	Y+3, r26	; 0x03
    26d2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e4       	ldi	r19, 0x40	; 64
    26d8:	4c e1       	ldi	r20, 0x1C	; 28
    26da:	55 e4       	ldi	r21, 0x45	; 69
    26dc:	69 81       	ldd	r22, Y+1	; 0x01
    26de:	7a 81       	ldd	r23, Y+2	; 0x02
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	9c 81       	ldd	r25, Y+4	; 0x04
    26e4:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8d 83       	std	Y+5, r24	; 0x05
    26ee:	9e 83       	std	Y+6, r25	; 0x06
    26f0:	af 83       	std	Y+7, r26	; 0x07
    26f2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e8       	ldi	r20, 0x80	; 128
    26fa:	5f e3       	ldi	r21, 0x3F	; 63
    26fc:	6d 81       	ldd	r22, Y+5	; 0x05
    26fe:	7e 81       	ldd	r23, Y+6	; 0x06
    2700:	8f 81       	ldd	r24, Y+7	; 0x07
    2702:	98 85       	ldd	r25, Y+8	; 0x08
    2704:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
    2708:	88 23       	and	r24, r24
    270a:	2c f4       	brge	.+10     	; 0x2716 <odometry_kurva+0xbe>
		__ticks = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9a 87       	std	Y+10, r25	; 0x0a
    2712:	89 87       	std	Y+9, r24	; 0x09
    2714:	3f c0       	rjmp	.+126    	; 0x2794 <odometry_kurva+0x13c>
	else if (__tmp > 65535)
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	3f ef       	ldi	r19, 0xFF	; 255
    271a:	4f e7       	ldi	r20, 0x7F	; 127
    271c:	57 e4       	ldi	r21, 0x47	; 71
    271e:	6d 81       	ldd	r22, Y+5	; 0x05
    2720:	7e 81       	ldd	r23, Y+6	; 0x06
    2722:	8f 81       	ldd	r24, Y+7	; 0x07
    2724:	98 85       	ldd	r25, Y+8	; 0x08
    2726:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
    272a:	18 16       	cp	r1, r24
    272c:	4c f5       	brge	.+82     	; 0x2780 <odometry_kurva+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e2       	ldi	r20, 0x20	; 32
    2734:	51 e4       	ldi	r21, 0x41	; 65
    2736:	69 81       	ldd	r22, Y+1	; 0x01
    2738:	7a 81       	ldd	r23, Y+2	; 0x02
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	9c 81       	ldd	r25, Y+4	; 0x04
    273e:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	bc 01       	movw	r22, r24
    2748:	cd 01       	movw	r24, r26
    274a:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9a 87       	std	Y+10, r25	; 0x0a
    2754:	89 87       	std	Y+9, r24	; 0x09
    2756:	0f c0       	rjmp	.+30     	; 0x2776 <odometry_kurva+0x11e>
    2758:	8a ef       	ldi	r24, 0xFA	; 250
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9c 87       	std	Y+12, r25	; 0x0c
    275e:	8b 87       	std	Y+11, r24	; 0x0b
    2760:	8b 85       	ldd	r24, Y+11	; 0x0b
    2762:	9c 85       	ldd	r25, Y+12	; 0x0c
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <odometry_kurva+0x10c>
    2768:	9c 87       	std	Y+12, r25	; 0x0c
    276a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276c:	89 85       	ldd	r24, Y+9	; 0x09
    276e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	9a 87       	std	Y+10, r25	; 0x0a
    2774:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2776:	89 85       	ldd	r24, Y+9	; 0x09
    2778:	9a 85       	ldd	r25, Y+10	; 0x0a
    277a:	89 2b       	or	r24, r25
    277c:	69 f7       	brne	.-38     	; 0x2758 <odometry_kurva+0x100>
    277e:	14 c0       	rjmp	.+40     	; 0x27a8 <odometry_kurva+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2780:	6d 81       	ldd	r22, Y+5	; 0x05
    2782:	7e 81       	ldd	r23, Y+6	; 0x06
    2784:	8f 81       	ldd	r24, Y+7	; 0x07
    2786:	98 85       	ldd	r25, Y+8	; 0x08
    2788:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9a 87       	std	Y+10, r25	; 0x0a
    2792:	89 87       	std	Y+9, r24	; 0x09
    2794:	89 85       	ldd	r24, Y+9	; 0x09
    2796:	9a 85       	ldd	r25, Y+10	; 0x0a
    2798:	9e 87       	std	Y+14, r25	; 0x0e
    279a:	8d 87       	std	Y+13, r24	; 0x0d
    279c:	8d 85       	ldd	r24, Y+13	; 0x0d
    279e:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <odometry_kurva+0x148>
    27a4:	9e 87       	std	Y+14, r25	; 0x0e
    27a6:	8d 87       	std	Y+13, r24	; 0x0d
    27a8:	ce 01       	movw	r24, r28
    27aa:	0f 96       	adiw	r24, 0x0f	; 15
    27ac:	63 ec       	ldi	r22, 0xC3	; 195
    27ae:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    27b2:	88 23       	and	r24, r24
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <odometry_kurva+0x160>
    27b6:	86 cf       	rjmp	.-244    	; 0x26c4 <odometry_kurva+0x6c>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    27b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27bc:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <odometry_wait_until_done>
}
    27c0:	6f 96       	adiw	r28, 0x1f	; 31
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	0f 91       	pop	r16
    27d2:	ff 90       	pop	r15
    27d4:	ef 90       	pop	r14
    27d6:	08 95       	ret

000027d8 <odometry_match_end>:

void odometry_match_end(void)
{
    27d8:	cf 93       	push	r28
    27da:	df 93       	push	r29
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	66 97       	sbiw	r28, 0x16	; 22
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];

	buffer[0] = 'K';
    27ec:	8b e4       	ldi	r24, 0x4B	; 75
    27ee:	8f 87       	std	Y+15, r24	; 0x0f

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    27f0:	72 c0       	rjmp	.+228    	; 0x28d6 <odometry_match_end+0xfe>
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	a8 e4       	ldi	r26, 0x48	; 72
    27f8:	b2 e4       	ldi	r27, 0x42	; 66
    27fa:	89 83       	std	Y+1, r24	; 0x01
    27fc:	9a 83       	std	Y+2, r25	; 0x02
    27fe:	ab 83       	std	Y+3, r26	; 0x03
    2800:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e4       	ldi	r19, 0x40	; 64
    2806:	4c e1       	ldi	r20, 0x1C	; 28
    2808:	55 e4       	ldi	r21, 0x45	; 69
    280a:	69 81       	ldd	r22, Y+1	; 0x01
    280c:	7a 81       	ldd	r23, Y+2	; 0x02
    280e:	8b 81       	ldd	r24, Y+3	; 0x03
    2810:	9c 81       	ldd	r25, Y+4	; 0x04
    2812:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	8d 83       	std	Y+5, r24	; 0x05
    281c:	9e 83       	std	Y+6, r25	; 0x06
    281e:	af 83       	std	Y+7, r26	; 0x07
    2820:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e8       	ldi	r20, 0x80	; 128
    2828:	5f e3       	ldi	r21, 0x3F	; 63
    282a:	6d 81       	ldd	r22, Y+5	; 0x05
    282c:	7e 81       	ldd	r23, Y+6	; 0x06
    282e:	8f 81       	ldd	r24, Y+7	; 0x07
    2830:	98 85       	ldd	r25, Y+8	; 0x08
    2832:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
    2836:	88 23       	and	r24, r24
    2838:	2c f4       	brge	.+10     	; 0x2844 <odometry_match_end+0x6c>
		__ticks = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9a 87       	std	Y+10, r25	; 0x0a
    2840:	89 87       	std	Y+9, r24	; 0x09
    2842:	3f c0       	rjmp	.+126    	; 0x28c2 <odometry_match_end+0xea>
	else if (__tmp > 65535)
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	3f ef       	ldi	r19, 0xFF	; 255
    2848:	4f e7       	ldi	r20, 0x7F	; 127
    284a:	57 e4       	ldi	r21, 0x47	; 71
    284c:	6d 81       	ldd	r22, Y+5	; 0x05
    284e:	7e 81       	ldd	r23, Y+6	; 0x06
    2850:	8f 81       	ldd	r24, Y+7	; 0x07
    2852:	98 85       	ldd	r25, Y+8	; 0x08
    2854:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
    2858:	18 16       	cp	r1, r24
    285a:	4c f5       	brge	.+82     	; 0x28ae <odometry_match_end+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e2       	ldi	r20, 0x20	; 32
    2862:	51 e4       	ldi	r21, 0x41	; 65
    2864:	69 81       	ldd	r22, Y+1	; 0x01
    2866:	7a 81       	ldd	r23, Y+2	; 0x02
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	9c 81       	ldd	r25, Y+4	; 0x04
    286c:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9a 87       	std	Y+10, r25	; 0x0a
    2882:	89 87       	std	Y+9, r24	; 0x09
    2884:	0f c0       	rjmp	.+30     	; 0x28a4 <odometry_match_end+0xcc>
    2886:	8a ef       	ldi	r24, 0xFA	; 250
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	9c 87       	std	Y+12, r25	; 0x0c
    288c:	8b 87       	std	Y+11, r24	; 0x0b
    288e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2890:	9c 85       	ldd	r25, Y+12	; 0x0c
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <odometry_match_end+0xba>
    2896:	9c 87       	std	Y+12, r25	; 0x0c
    2898:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289a:	89 85       	ldd	r24, Y+9	; 0x09
    289c:	9a 85       	ldd	r25, Y+10	; 0x0a
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	9a 87       	std	Y+10, r25	; 0x0a
    28a2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a4:	89 85       	ldd	r24, Y+9	; 0x09
    28a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a8:	89 2b       	or	r24, r25
    28aa:	69 f7       	brne	.-38     	; 0x2886 <odometry_match_end+0xae>
    28ac:	14 c0       	rjmp	.+40     	; 0x28d6 <odometry_match_end+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ae:	6d 81       	ldd	r22, Y+5	; 0x05
    28b0:	7e 81       	ldd	r23, Y+6	; 0x06
    28b2:	8f 81       	ldd	r24, Y+7	; 0x07
    28b4:	98 85       	ldd	r25, Y+8	; 0x08
    28b6:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9a 87       	std	Y+10, r25	; 0x0a
    28c0:	89 87       	std	Y+9, r24	; 0x09
    28c2:	89 85       	ldd	r24, Y+9	; 0x09
    28c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c6:	9e 87       	std	Y+14, r25	; 0x0e
    28c8:	8d 87       	std	Y+13, r24	; 0x0d
    28ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    28cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <odometry_match_end+0xf6>
    28d2:	9e 87       	std	Y+14, r25	; 0x0e
    28d4:	8d 87       	std	Y+13, r24	; 0x0d
    28d6:	ce 01       	movw	r24, r28
    28d8:	0f 96       	adiw	r24, 0x0f	; 15
    28da:	63 ec       	ldi	r22, 0xC3	; 195
    28dc:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CAN_Write>
    28e0:	88 23       	and	r24, r24
    28e2:	09 f0       	breq	.+2      	; 0x28e6 <odometry_match_end+0x10e>
    28e4:	86 cf       	rjmp	.-244    	; 0x27f2 <odometry_match_end+0x1a>
			_delay_ms(50);

}
    28e6:	66 96       	adiw	r28, 0x16	; 22
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
    28f6:	08 95       	ret

000028f8 <getState>:

/*
 * 	Update position
 */
uint8_t getState(void)
{
    28f8:	cf 93       	push	r28
    28fa:	df 93       	push	r29
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2900:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <odometry_query_position>
	return position.state;
    2904:	80 91 15 01 	lds	r24, 0x0115
}
    2908:	df 91       	pop	r29
    290a:	cf 91       	pop	r28
    290c:	08 95       	ret

0000290e <odometry_get_x>:

int16_t odometry_get_x(void)
{
    290e:	cf 93       	push	r28
    2910:	df 93       	push	r29
    2912:	cd b7       	in	r28, 0x3d	; 61
    2914:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2916:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <odometry_query_position>
	return position.x;
    291a:	80 91 0f 01 	lds	r24, 0x010F
    291e:	90 91 10 01 	lds	r25, 0x0110
}
    2922:	df 91       	pop	r29
    2924:	cf 91       	pop	r28
    2926:	08 95       	ret

00002928 <odometry_get_y>:

int16_t odometry_get_y(void)
{
    2928:	cf 93       	push	r28
    292a:	df 93       	push	r29
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2930:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <odometry_query_position>
	return position.y;
    2934:	80 91 11 01 	lds	r24, 0x0111
    2938:	90 91 12 01 	lds	r25, 0x0112
}
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	08 95       	ret

00002942 <odometry_get_angle>:

int16_t odometry_get_angle(void)
{
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    294a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <odometry_query_position>
	return position.angle;
    294e:	80 91 13 01 	lds	r24, 0x0113
    2952:	90 91 14 01 	lds	r25, 0x0114
}
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	08 95       	ret

0000295c <detection_setup>:
		{4,false}, 	// PA4
		{5,false}	// PA5
};


void detection_setup(void) {
    295c:	cf 93       	push	r28
    295e:	df 93       	push	r29
    2960:	00 d0       	rcall	.+0      	; 0x2962 <detection_setup+0x6>
    2962:	00 d0       	rcall	.+0      	; 0x2964 <detection_setup+0x8>
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62

	// get the number of elements in the array 4-6
	int num_of_elements = ((int) (sizeof (detection_pins) / sizeof (detection_pins)[0]));
    2968:	86 e0       	ldi	r24, 0x06	; 6
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9c 83       	std	Y+4, r25	; 0x04
    296e:	8b 83       	std	Y+3, r24	; 0x03

	for(int i=0; i < (num_of_elements); i++) {
    2970:	1a 82       	std	Y+2, r1	; 0x02
    2972:	19 82       	std	Y+1, r1	; 0x01
    2974:	1d c0       	rjmp	.+58     	; 0x29b0 <detection_setup+0x54>
		gpio_register_pin(detection_pins[i][0], GPIO_DIRECTION_INPUT, detection_pins[i][1]); // register the pin as input
    2976:	89 81       	ldd	r24, Y+1	; 0x01
    2978:	9a 81       	ldd	r25, Y+2	; 0x02
    297a:	88 0f       	add	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	89 5e       	subi	r24, 0xE9	; 233
    2980:	9e 4f       	sbci	r25, 0xFE	; 254
    2982:	fc 01       	movw	r30, r24
    2984:	80 81       	ld	r24, Z
    2986:	21 e0       	ldi	r18, 0x01	; 1
    2988:	88 23       	and	r24, r24
    298a:	09 f4       	brne	.+2      	; 0x298e <detection_setup+0x32>
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	9a 81       	ldd	r25, Y+2	; 0x02
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	8a 5e       	subi	r24, 0xEA	; 234
    2998:	9e 4f       	sbci	r25, 0xFE	; 254
    299a:	fc 01       	movw	r30, r24
    299c:	80 81       	ld	r24, Z
    299e:	42 2f       	mov	r20, r18
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <gpio_register_pin>
void detection_setup(void) {

	// get the number of elements in the array 4-6
	int num_of_elements = ((int) (sizeof (detection_pins) / sizeof (detection_pins)[0]));

	for(int i=0; i < (num_of_elements); i++) {
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
    29aa:	01 96       	adiw	r24, 0x01	; 1
    29ac:	9a 83       	std	Y+2, r25	; 0x02
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	29 81       	ldd	r18, Y+1	; 0x01
    29b2:	3a 81       	ldd	r19, Y+2	; 0x02
    29b4:	8b 81       	ldd	r24, Y+3	; 0x03
    29b6:	9c 81       	ldd	r25, Y+4	; 0x04
    29b8:	28 17       	cp	r18, r24
    29ba:	39 07       	cpc	r19, r25
    29bc:	e4 f2       	brlt	.-72     	; 0x2976 <detection_setup+0x1a>
		gpio_register_pin(detection_pins[i][0], GPIO_DIRECTION_INPUT, detection_pins[i][1]); // register the pin as input
	}

}
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	08 95       	ret

000029cc <detection_get>:

uint8_t detection_get(uint8_t sensor_num) {
    29cc:	cf 93       	push	r28
    29ce:	df 93       	push	r29
    29d0:	1f 92       	push	r1
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	89 83       	std	Y+1, r24	; 0x01
	return gpio_read_pin(sensor_num);
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
    29da:	0e 94 a8 0c 	call	0x1950	; 0x1950 <gpio_read_pin>
}
    29de:	0f 90       	pop	r0
    29e0:	df 91       	pop	r29
    29e2:	cf 91       	pop	r28
    29e4:	08 95       	ret

000029e6 <timer_register_callback>:
 *	Function: 		void timer_register_callback(void (*callback)(void))
 *	Parameters: 	void (*callback)(void))
 *	Description: 	timer callbacks
 */
void timer_register_callback(void (*callback)(void))
{
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <timer_register_callback+0x6>
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    29f0:	9a 83       	std	Y+2, r25	; 0x02
    29f2:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	9a 81       	ldd	r25, Y+2	; 0x02
    29f8:	90 93 6b 01 	sts	0x016B, r25
    29fc:	80 93 6a 01 	sts	0x016A, r24
}
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	08 95       	ret

00002a0a <timer_init>:
 *	Function: 		void timer_init(unsigned int freq)
 *	Parameters: 	unsigned int freq - frequency of timer
 *	Description: 	setup timer
 */
void timer_init(unsigned int freq)
{
    2a0a:	0f 93       	push	r16
    2a0c:	1f 93       	push	r17
    2a0e:	cf 93       	push	r28
    2a10:	df 93       	push	r29
    2a12:	00 d0       	rcall	.+0      	; 0x2a14 <timer_init+0xa>
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01

    TCCR1A = 0;
    2a1c:	80 e8       	ldi	r24, 0x80	; 128
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	fc 01       	movw	r30, r24
    2a22:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    2a24:	81 e8       	ldi	r24, 0x81	; 129
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	29 e0       	ldi	r18, 0x09	; 9
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    2a2e:	08 e8       	ldi	r16, 0x88	; 136
    2a30:	10 e0       	ldi	r17, 0x00	; 0
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	9a 81       	ldd	r25, Y+2	; 0x02
    2a36:	cc 01       	movw	r24, r24
    2a38:	a0 e0       	ldi	r26, 0x00	; 0
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	bc 01       	movw	r22, r24
    2a3e:	cd 01       	movw	r24, r26
    2a40:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__floatunsisf>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	9c 01       	movw	r18, r24
    2a4a:	ad 01       	movw	r20, r26
    2a4c:	60 e8       	ldi	r22, 0x80	; 128
    2a4e:	76 e9       	ldi	r23, 0x96	; 150
    2a50:	88 e1       	ldi	r24, 0x18	; 24
    2a52:	9b e4       	ldi	r25, 0x4B	; 75
    2a54:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__divsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e0       	ldi	r20, 0x00	; 0
    2a62:	5f e3       	ldi	r21, 0x3F	; 63
    2a64:	bc 01       	movw	r22, r24
    2a66:	cd 01       	movw	r24, r26
    2a68:	0e 94 3f 1c 	call	0x387e	; 0x387e <__addsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	f8 01       	movw	r30, r16
    2a7e:	91 83       	std	Z+1, r25	; 0x01
    2a80:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2a82:	8f e6       	ldi	r24, 0x6F	; 111
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	22 e0       	ldi	r18, 0x02	; 2
    2a88:	fc 01       	movw	r30, r24
    2a8a:	20 83       	st	Z, r18

	SREG |= 0x80;
    2a8c:	8f e5       	ldi	r24, 0x5F	; 95
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	2f e5       	ldi	r18, 0x5F	; 95
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	f9 01       	movw	r30, r18
    2a96:	20 81       	ld	r18, Z
    2a98:	20 68       	ori	r18, 0x80	; 128
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	20 83       	st	Z, r18
}
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	1f 91       	pop	r17
    2aa8:	0f 91       	pop	r16
    2aaa:	08 95       	ret

00002aac <__vector_12>:
/*
 *	Function: 		ISR(TIMER1_COMPA_vect)
 *	Description: 	ISR interrupt for timer
 */
ISR(TIMER1_COMPA_vect)
{
    2aac:	1f 92       	push	r1
    2aae:	0f 92       	push	r0
    2ab0:	00 90 5f 00 	lds	r0, 0x005F
    2ab4:	0f 92       	push	r0
    2ab6:	11 24       	eor	r1, r1
    2ab8:	00 90 5b 00 	lds	r0, 0x005B
    2abc:	0f 92       	push	r0
    2abe:	2f 93       	push	r18
    2ac0:	3f 93       	push	r19
    2ac2:	4f 93       	push	r20
    2ac4:	5f 93       	push	r21
    2ac6:	6f 93       	push	r22
    2ac8:	7f 93       	push	r23
    2aca:	8f 93       	push	r24
    2acc:	9f 93       	push	r25
    2ace:	af 93       	push	r26
    2ad0:	bf 93       	push	r27
    2ad2:	ef 93       	push	r30
    2ad4:	ff 93       	push	r31
    2ad6:	cf 93       	push	r28
    2ad8:	df 93       	push	r29
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    2ade:	80 91 6a 01 	lds	r24, 0x016A
    2ae2:	90 91 6b 01 	lds	r25, 0x016B
    2ae6:	89 2b       	or	r24, r25
    2ae8:	31 f0       	breq	.+12     	; 0x2af6 <__vector_12+0x4a>
        timer_callback();
    2aea:	80 91 6a 01 	lds	r24, 0x016A
    2aee:	90 91 6b 01 	lds	r25, 0x016B
    2af2:	fc 01       	movw	r30, r24
    2af4:	09 95       	icall
	if(sys_time >= 90000)					// if match end
    2af6:	80 91 65 01 	lds	r24, 0x0165
    2afa:	90 91 66 01 	lds	r25, 0x0166
    2afe:	a0 91 67 01 	lds	r26, 0x0167
    2b02:	b0 91 68 01 	lds	r27, 0x0168
    2b06:	80 39       	cpi	r24, 0x90	; 144
    2b08:	9f 45       	sbci	r25, 0x5F	; 95
    2b0a:	a1 40       	sbci	r26, 0x01	; 1
    2b0c:	b1 05       	cpc	r27, r1
    2b0e:	28 f0       	brcs	.+10     	; 0x2b1a <__vector_12+0x6e>
	{
		if(system_get_match_started())		// if the match has started before
    2b10:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <system_get_match_started>
    2b14:	88 23       	and	r24, r24
    2b16:	09 f0       	breq	.+2      	; 0x2b1a <__vector_12+0x6e>
		{
			//odometry_match_end();			// turn off pwm (as the rules say)
			while(1);
    2b18:	ff cf       	rjmp	.-2      	; 0x2b18 <__vector_12+0x6c>
		}
	}

	sys_time++;
    2b1a:	80 91 65 01 	lds	r24, 0x0165
    2b1e:	90 91 66 01 	lds	r25, 0x0166
    2b22:	a0 91 67 01 	lds	r26, 0x0167
    2b26:	b0 91 68 01 	lds	r27, 0x0168
    2b2a:	01 96       	adiw	r24, 0x01	; 1
    2b2c:	a1 1d       	adc	r26, r1
    2b2e:	b1 1d       	adc	r27, r1
    2b30:	80 93 65 01 	sts	0x0165, r24
    2b34:	90 93 66 01 	sts	0x0166, r25
    2b38:	a0 93 67 01 	sts	0x0167, r26
    2b3c:	b0 93 68 01 	sts	0x0168, r27


}
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	ff 91       	pop	r31
    2b46:	ef 91       	pop	r30
    2b48:	bf 91       	pop	r27
    2b4a:	af 91       	pop	r26
    2b4c:	9f 91       	pop	r25
    2b4e:	8f 91       	pop	r24
    2b50:	7f 91       	pop	r23
    2b52:	6f 91       	pop	r22
    2b54:	5f 91       	pop	r21
    2b56:	4f 91       	pop	r20
    2b58:	3f 91       	pop	r19
    2b5a:	2f 91       	pop	r18
    2b5c:	0f 90       	pop	r0
    2b5e:	00 92 5b 00 	sts	0x005B, r0
    2b62:	0f 90       	pop	r0
    2b64:	00 92 5f 00 	sts	0x005F, r0
    2b68:	0f 90       	pop	r0
    2b6a:	1f 90       	pop	r1
    2b6c:	18 95       	reti

00002b6e <system_reset_system_time>:

void system_reset_system_time(void) 	{ 	sys_time = 0; 			}
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	10 92 65 01 	sts	0x0165, r1
    2b7a:	10 92 66 01 	sts	0x0166, r1
    2b7e:	10 92 67 01 	sts	0x0167, r1
    2b82:	10 92 68 01 	sts	0x0168, r1
    2b86:	df 91       	pop	r29
    2b88:	cf 91       	pop	r28
    2b8a:	08 95       	ret

00002b8c <system_set_match_started>:
void system_set_match_started(void) 	{ 	match_started = 1; 		}
    2b8c:	cf 93       	push	r28
    2b8e:	df 93       	push	r29
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	80 93 69 01 	sts	0x0169, r24
    2b9a:	df 91       	pop	r29
    2b9c:	cf 91       	pop	r28
    2b9e:	08 95       	ret

00002ba0 <system_get_system_time>:
uint32_t system_get_system_time(void) 	{ 	return sys_time; 		}
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
    2ba8:	80 91 65 01 	lds	r24, 0x0165
    2bac:	90 91 66 01 	lds	r25, 0x0166
    2bb0:	a0 91 67 01 	lds	r26, 0x0167
    2bb4:	b0 91 68 01 	lds	r27, 0x0168
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	df 91       	pop	r29
    2bbe:	cf 91       	pop	r28
    2bc0:	08 95       	ret

00002bc2 <system_get_match_started>:
uint8_t system_get_match_started(void) 	{ 	return match_started; 	}
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	80 91 69 01 	lds	r24, 0x0169
    2bce:	df 91       	pop	r29
    2bd0:	cf 91       	pop	r28
    2bd2:	08 95       	ret

00002bd4 <check_jumper>:

void check_jumper(uint8_t pin) {
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	2f 97       	sbiw	r28, 0x0f	; 15
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	8f 87       	std	Y+15, r24	; 0x0f

	gpio_register_pin(pin, GPIO_DIRECTION_INPUT, false);								// registering pin as input
    2bea:	40 e0       	ldi	r20, 0x00	; 0
    2bec:	60 e0       	ldi	r22, 0x00	; 0
    2bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <gpio_register_pin>

	// waiting for jumper
	while(gpio_read_pin(pin)){
    2bf4:	72 c0       	rjmp	.+228    	; 0x2cda <check_jumper+0x106>
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	a8 e4       	ldi	r26, 0x48	; 72
    2bfc:	b2 e4       	ldi	r27, 0x42	; 66
    2bfe:	89 83       	std	Y+1, r24	; 0x01
    2c00:	9a 83       	std	Y+2, r25	; 0x02
    2c02:	ab 83       	std	Y+3, r26	; 0x03
    2c04:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e4       	ldi	r19, 0x40	; 64
    2c0a:	4c e1       	ldi	r20, 0x1C	; 28
    2c0c:	55 e4       	ldi	r21, 0x45	; 69
    2c0e:	69 81       	ldd	r22, Y+1	; 0x01
    2c10:	7a 81       	ldd	r23, Y+2	; 0x02
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	9c 81       	ldd	r25, Y+4	; 0x04
    2c16:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	8d 83       	std	Y+5, r24	; 0x05
    2c20:	9e 83       	std	Y+6, r25	; 0x06
    2c22:	af 83       	std	Y+7, r26	; 0x07
    2c24:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e8       	ldi	r20, 0x80	; 128
    2c2c:	5f e3       	ldi	r21, 0x3F	; 63
    2c2e:	6d 81       	ldd	r22, Y+5	; 0x05
    2c30:	7e 81       	ldd	r23, Y+6	; 0x06
    2c32:	8f 81       	ldd	r24, Y+7	; 0x07
    2c34:	98 85       	ldd	r25, Y+8	; 0x08
    2c36:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
    2c3a:	88 23       	and	r24, r24
    2c3c:	2c f4       	brge	.+10     	; 0x2c48 <check_jumper+0x74>
		__ticks = 1;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	9a 87       	std	Y+10, r25	; 0x0a
    2c44:	89 87       	std	Y+9, r24	; 0x09
    2c46:	3f c0       	rjmp	.+126    	; 0x2cc6 <check_jumper+0xf2>
	else if (__tmp > 65535)
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	3f ef       	ldi	r19, 0xFF	; 255
    2c4c:	4f e7       	ldi	r20, 0x7F	; 127
    2c4e:	57 e4       	ldi	r21, 0x47	; 71
    2c50:	6d 81       	ldd	r22, Y+5	; 0x05
    2c52:	7e 81       	ldd	r23, Y+6	; 0x06
    2c54:	8f 81       	ldd	r24, Y+7	; 0x07
    2c56:	98 85       	ldd	r25, Y+8	; 0x08
    2c58:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
    2c5c:	18 16       	cp	r1, r24
    2c5e:	4c f5       	brge	.+82     	; 0x2cb2 <check_jumper+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e2       	ldi	r20, 0x20	; 32
    2c66:	51 e4       	ldi	r21, 0x41	; 65
    2c68:	69 81       	ldd	r22, Y+1	; 0x01
    2c6a:	7a 81       	ldd	r23, Y+2	; 0x02
    2c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c70:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	bc 01       	movw	r22, r24
    2c7a:	cd 01       	movw	r24, r26
    2c7c:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	9a 87       	std	Y+10, r25	; 0x0a
    2c86:	89 87       	std	Y+9, r24	; 0x09
    2c88:	0f c0       	rjmp	.+30     	; 0x2ca8 <check_jumper+0xd4>
    2c8a:	8a ef       	ldi	r24, 0xFA	; 250
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	9c 87       	std	Y+12, r25	; 0x0c
    2c90:	8b 87       	std	Y+11, r24	; 0x0b
    2c92:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c94:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <check_jumper+0xc2>
    2c9a:	9c 87       	std	Y+12, r25	; 0x0c
    2c9c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	9a 87       	std	Y+10, r25	; 0x0a
    2ca6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca8:	89 85       	ldd	r24, Y+9	; 0x09
    2caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cac:	89 2b       	or	r24, r25
    2cae:	69 f7       	brne	.-38     	; 0x2c8a <check_jumper+0xb6>
    2cb0:	14 c0       	rjmp	.+40     	; 0x2cda <check_jumper+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb2:	6d 81       	ldd	r22, Y+5	; 0x05
    2cb4:	7e 81       	ldd	r23, Y+6	; 0x06
    2cb6:	8f 81       	ldd	r24, Y+7	; 0x07
    2cb8:	98 85       	ldd	r25, Y+8	; 0x08
    2cba:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	9a 87       	std	Y+10, r25	; 0x0a
    2cc4:	89 87       	std	Y+9, r24	; 0x09
    2cc6:	89 85       	ldd	r24, Y+9	; 0x09
    2cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cca:	9e 87       	std	Y+14, r25	; 0x0e
    2ccc:	8d 87       	std	Y+13, r24	; 0x0d
    2cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <check_jumper+0xfe>
    2cd6:	9e 87       	std	Y+14, r25	; 0x0e
    2cd8:	8d 87       	std	Y+13, r24	; 0x0d
    2cda:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cdc:	0e 94 a8 0c 	call	0x1950	; 0x1950 <gpio_read_pin>
    2ce0:	88 23       	and	r24, r24
    2ce2:	09 f0       	breq	.+2      	; 0x2ce6 <check_jumper+0x112>
    2ce4:	88 cf       	rjmp	.-240    	; 0x2bf6 <check_jumper+0x22>
		_delay_ms(50);
		//debug_switch(0);
	}

	//debug_set(0, ON);
}
    2ce6:	2f 96       	adiw	r28, 0x0f	; 15
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	df 91       	pop	r29
    2cf4:	cf 91       	pop	r28
    2cf6:	08 95       	ret

00002cf8 <system_init>:
 *	Function: 		void system_init(void)
 *	Parameters: 	void
 *	Description:	initing all the things
 */
void system_init(void)
{
    2cf8:	cf 93       	push	r28
    2cfa:	df 93       	push	r29
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	2e 97       	sbiw	r28, 0x0e	; 14
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd bf       	out	0x3d, r28	; 61
	// sets debouncer
	timer_register_callback(gpio_debouncer);
    2d0c:	85 e2       	ldi	r24, 0x25	; 37
    2d0e:	9d e0       	ldi	r25, 0x0D	; 13
    2d10:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <timer_register_callback>
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	a8 ec       	ldi	r26, 0xC8	; 200
    2d1a:	b2 e4       	ldi	r27, 0x42	; 66
    2d1c:	89 83       	std	Y+1, r24	; 0x01
    2d1e:	9a 83       	std	Y+2, r25	; 0x02
    2d20:	ab 83       	std	Y+3, r26	; 0x03
    2d22:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e4       	ldi	r19, 0x40	; 64
    2d28:	4c e1       	ldi	r20, 0x1C	; 28
    2d2a:	55 e4       	ldi	r21, 0x45	; 69
    2d2c:	69 81       	ldd	r22, Y+1	; 0x01
    2d2e:	7a 81       	ldd	r23, Y+2	; 0x02
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	9c 81       	ldd	r25, Y+4	; 0x04
    2d34:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	8d 83       	std	Y+5, r24	; 0x05
    2d3e:	9e 83       	std	Y+6, r25	; 0x06
    2d40:	af 83       	std	Y+7, r26	; 0x07
    2d42:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e8       	ldi	r20, 0x80	; 128
    2d4a:	5f e3       	ldi	r21, 0x3F	; 63
    2d4c:	6d 81       	ldd	r22, Y+5	; 0x05
    2d4e:	7e 81       	ldd	r23, Y+6	; 0x06
    2d50:	8f 81       	ldd	r24, Y+7	; 0x07
    2d52:	98 85       	ldd	r25, Y+8	; 0x08
    2d54:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
    2d58:	88 23       	and	r24, r24
    2d5a:	2c f4       	brge	.+10     	; 0x2d66 <system_init+0x6e>
		__ticks = 1;
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	9a 87       	std	Y+10, r25	; 0x0a
    2d62:	89 87       	std	Y+9, r24	; 0x09
    2d64:	3f c0       	rjmp	.+126    	; 0x2de4 <system_init+0xec>
	else if (__tmp > 65535)
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	3f ef       	ldi	r19, 0xFF	; 255
    2d6a:	4f e7       	ldi	r20, 0x7F	; 127
    2d6c:	57 e4       	ldi	r21, 0x47	; 71
    2d6e:	6d 81       	ldd	r22, Y+5	; 0x05
    2d70:	7e 81       	ldd	r23, Y+6	; 0x06
    2d72:	8f 81       	ldd	r24, Y+7	; 0x07
    2d74:	98 85       	ldd	r25, Y+8	; 0x08
    2d76:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
    2d7a:	18 16       	cp	r1, r24
    2d7c:	4c f5       	brge	.+82     	; 0x2dd0 <system_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e2       	ldi	r20, 0x20	; 32
    2d84:	51 e4       	ldi	r21, 0x41	; 65
    2d86:	69 81       	ldd	r22, Y+1	; 0x01
    2d88:	7a 81       	ldd	r23, Y+2	; 0x02
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8e:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	bc 01       	movw	r22, r24
    2d98:	cd 01       	movw	r24, r26
    2d9a:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	9a 87       	std	Y+10, r25	; 0x0a
    2da4:	89 87       	std	Y+9, r24	; 0x09
    2da6:	0f c0       	rjmp	.+30     	; 0x2dc6 <system_init+0xce>
    2da8:	8a ef       	ldi	r24, 0xFA	; 250
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	9c 87       	std	Y+12, r25	; 0x0c
    2dae:	8b 87       	std	Y+11, r24	; 0x0b
    2db0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2db2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	f1 f7       	brne	.-4      	; 0x2db4 <system_init+0xbc>
    2db8:	9c 87       	std	Y+12, r25	; 0x0c
    2dba:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dbc:	89 85       	ldd	r24, Y+9	; 0x09
    2dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	9a 87       	std	Y+10, r25	; 0x0a
    2dc4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc6:	89 85       	ldd	r24, Y+9	; 0x09
    2dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dca:	89 2b       	or	r24, r25
    2dcc:	69 f7       	brne	.-38     	; 0x2da8 <system_init+0xb0>
    2dce:	14 c0       	rjmp	.+40     	; 0x2df8 <system_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd0:	6d 81       	ldd	r22, Y+5	; 0x05
    2dd2:	7e 81       	ldd	r23, Y+6	; 0x06
    2dd4:	8f 81       	ldd	r24, Y+7	; 0x07
    2dd6:	98 85       	ldd	r25, Y+8	; 0x08
    2dd8:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	9a 87       	std	Y+10, r25	; 0x0a
    2de2:	89 87       	std	Y+9, r24	; 0x09
    2de4:	89 85       	ldd	r24, Y+9	; 0x09
    2de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de8:	9e 87       	std	Y+14, r25	; 0x0e
    2dea:	8d 87       	std	Y+13, r24	; 0x0d
    2dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <system_init+0xf8>
    2df4:	9e 87       	std	Y+14, r25	; 0x0e
    2df6:	8d 87       	std	Y+13, r24	; 0x0d

	// small delay
	_delay_ms(100);

	CAN_Init(1);
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	0e 94 12 09 	call	0x1224	; 0x1224 <CAN_Init>
	//detection_setup();
	debug_init();
    2dfe:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <debug_init>

	//check_jumper(PIN_JUMPER);

	system_reset_system_time();															// reset system time
    2e02:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <system_reset_system_time>
	system_set_match_started();															// match has started!
    2e06:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <system_set_match_started>

}
    2e0a:	2e 96       	adiw	r28, 0x0e	; 14
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	de bf       	out	0x3e, r29	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	cd bf       	out	0x3d, r28	; 61
    2e16:	df 91       	pop	r29
    2e18:	cf 91       	pop	r28
    2e1a:	08 95       	ret

00002e1c <UART0_Init>:
* Parameters        : unsigned int baud
					  char isrOnOff
* Return Value      : void
*********************************************************************************/
void UART0_Init(unsigned long baud, char isrOnOff)
{
    2e1c:	cf 93       	push	r28
    2e1e:	df 93       	push	r29
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
    2e24:	27 97       	sbiw	r28, 0x07	; 7
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	f8 94       	cli
    2e2a:	de bf       	out	0x3e, r29	; 62
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	cd bf       	out	0x3d, r28	; 61
    2e30:	6b 83       	std	Y+3, r22	; 0x03
    2e32:	7c 83       	std	Y+4, r23	; 0x04
    2e34:	8d 83       	std	Y+5, r24	; 0x05
    2e36:	9e 83       	std	Y+6, r25	; 0x06
    2e38:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR0A = 0;
    2e3a:	80 ec       	ldi	r24, 0xC0	; 192
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	fc 01       	movw	r30, r24
    2e40:	10 82       	st	Z, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    2e42:	81 ec       	ldi	r24, 0xC1	; 193
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	28 e1       	ldi	r18, 0x18	; 24
    2e48:	fc 01       	movw	r30, r24
    2e4a:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    2e4c:	82 ec       	ldi	r24, 0xC2	; 194
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	26 e0       	ldi	r18, 0x06	; 6
    2e52:	fc 01       	movw	r30, r24
    2e54:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    2e56:	8f 81       	ldd	r24, Y+7	; 0x07
    2e58:	81 30       	cpi	r24, 0x01	; 1
    2e5a:	91 f4       	brne	.+36     	; 0x2e80 <UART0_Init+0x64>
	{
		UCSR0B |= ((1 << RXCIE0) | (1 << TXCIE0));
    2e5c:	81 ec       	ldi	r24, 0xC1	; 193
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	21 ec       	ldi	r18, 0xC1	; 193
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	f9 01       	movw	r30, r18
    2e66:	20 81       	ld	r18, Z
    2e68:	20 6c       	ori	r18, 0xC0	; 192
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	20 83       	st	Z, r18
		SREG |= 0x80;
    2e6e:	8f e5       	ldi	r24, 0x5F	; 95
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	2f e5       	ldi	r18, 0x5F	; 95
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	f9 01       	movw	r30, r18
    2e78:	20 81       	ld	r18, Z
    2e7a:	20 68       	ori	r18, 0x80	; 128
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    2e80:	6b 81       	ldd	r22, Y+3	; 0x03
    2e82:	7c 81       	ldd	r23, Y+4	; 0x04
    2e84:	8d 81       	ldd	r24, Y+5	; 0x05
    2e86:	9e 81       	ldd	r25, Y+6	; 0x06
    2e88:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__floatunsisf>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e8       	ldi	r20, 0x80	; 128
    2e96:	51 e4       	ldi	r21, 0x41	; 65
    2e98:	bc 01       	movw	r22, r24
    2e9a:	cd 01       	movw	r24, r26
    2e9c:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	9c 01       	movw	r18, r24
    2ea6:	ad 01       	movw	r20, r26
    2ea8:	60 e8       	ldi	r22, 0x80	; 128
    2eaa:	76 e9       	ldi	r23, 0x96	; 150
    2eac:	88 e1       	ldi	r24, 0x18	; 24
    2eae:	9b e4       	ldi	r25, 0x4B	; 75
    2eb0:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__divsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e8       	ldi	r20, 0x80	; 128
    2ebe:	5f e3       	ldi	r21, 0x3F	; 63
    2ec0:	bc 01       	movw	r22, r24
    2ec2:	cd 01       	movw	r24, r26
    2ec4:	0e 94 3e 1c 	call	0x387c	; 0x387c <__subsf3>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e0       	ldi	r20, 0x00	; 0
    2ed2:	5f e3       	ldi	r21, 0x3F	; 63
    2ed4:	bc 01       	movw	r22, r24
    2ed6:	cd 01       	movw	r24, r26
    2ed8:	0e 94 3f 1c 	call	0x387e	; 0x387e <__addsf3>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	cd 01       	movw	r24, r26
    2ee4:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	9a 83       	std	Y+2, r25	; 0x02
    2eee:	89 83       	std	Y+1, r24	; 0x01

	UBRR0H = temp >> 8;
    2ef0:	85 ec       	ldi	r24, 0xC5	; 197
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	29 81       	ldd	r18, Y+1	; 0x01
    2ef6:	3a 81       	ldd	r19, Y+2	; 0x02
    2ef8:	23 2f       	mov	r18, r19
    2efa:	33 27       	eor	r19, r19
    2efc:	fc 01       	movw	r30, r24
    2efe:	20 83       	st	Z, r18
	UBRR0L = temp;
    2f00:	84 ec       	ldi	r24, 0xC4	; 196
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	29 81       	ldd	r18, Y+1	; 0x01
    2f06:	fc 01       	movw	r30, r24
    2f08:	20 83       	st	Z, r18
}
    2f0a:	27 96       	adiw	r28, 0x07	; 7
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	de bf       	out	0x3e, r29	; 62
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	08 95       	ret

00002f1c <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    2f1c:	1f 92       	push	r1
    2f1e:	0f 92       	push	r0
    2f20:	00 90 5f 00 	lds	r0, 0x005F
    2f24:	0f 92       	push	r0
    2f26:	11 24       	eor	r1, r1
    2f28:	00 90 5b 00 	lds	r0, 0x005B
    2f2c:	0f 92       	push	r0
    2f2e:	2f 93       	push	r18
    2f30:	3f 93       	push	r19
    2f32:	8f 93       	push	r24
    2f34:	9f 93       	push	r25
    2f36:	ef 93       	push	r30
    2f38:	ff 93       	push	r31
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    2f42:	80 91 af 01 	lds	r24, 0x01AF
    2f46:	88 23       	and	r24, r24
    2f48:	d1 f0       	breq	.+52     	; 0x2f7e <__vector_23+0x62>
	{
		tx0_counter--;
    2f4a:	80 91 af 01 	lds	r24, 0x01AF
    2f4e:	81 50       	subi	r24, 0x01	; 1
    2f50:	80 93 af 01 	sts	0x01AF, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    2f54:	86 ec       	ldi	r24, 0xC6	; 198
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	20 91 b0 01 	lds	r18, 0x01B0
    2f5c:	22 2f       	mov	r18, r18
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	22 59       	subi	r18, 0x92	; 146
    2f62:	3e 4f       	sbci	r19, 0xFE	; 254
    2f64:	f9 01       	movw	r30, r18
    2f66:	20 81       	ld	r18, Z
    2f68:	fc 01       	movw	r30, r24
    2f6a:	20 83       	st	Z, r18
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    2f6c:	80 91 b0 01 	lds	r24, 0x01B0
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
    2f72:	80 93 b0 01 	sts	0x01B0, r24
    2f76:	80 34       	cpi	r24, 0x40	; 64
    2f78:	11 f4       	brne	.+4      	; 0x2f7e <__vector_23+0x62>
			tx0_rd_index = 0;
    2f7a:	10 92 b0 01 	sts	0x01B0, r1
	}
}
    2f7e:	df 91       	pop	r29
    2f80:	cf 91       	pop	r28
    2f82:	ff 91       	pop	r31
    2f84:	ef 91       	pop	r30
    2f86:	9f 91       	pop	r25
    2f88:	8f 91       	pop	r24
    2f8a:	3f 91       	pop	r19
    2f8c:	2f 91       	pop	r18
    2f8e:	0f 90       	pop	r0
    2f90:	00 92 5b 00 	sts	0x005B, r0
    2f94:	0f 90       	pop	r0
    2f96:	00 92 5f 00 	sts	0x005F, r0
    2f9a:	0f 90       	pop	r0
    2f9c:	1f 90       	pop	r1
    2f9e:	18 95       	reti

00002fa0 <UART0_Write>:
/****************************************************************************************************************************************
Slanje podataka USART0 modulom
****************************************************************************************************************************************/

void UART0_Write(unsigned char data)
{
    2fa0:	cf 93       	push	r28
    2fa2:	df 93       	push	r29
    2fa4:	1f 92       	push	r1
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
    2faa:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR0B >> TXCIE0) & 0x01)
    2fac:	81 ec       	ldi	r24, 0xC1	; 193
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	fc 01       	movw	r30, r24
    2fb2:	80 81       	ld	r24, Z
    2fb4:	82 95       	swap	r24
    2fb6:	86 95       	lsr	r24
    2fb8:	86 95       	lsr	r24
    2fba:	83 70       	andi	r24, 0x03	; 3
    2fbc:	88 2f       	mov	r24, r24
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	81 70       	andi	r24, 0x01	; 1
    2fc2:	99 27       	eor	r25, r25
    2fc4:	89 2b       	or	r24, r25
    2fc6:	99 f1       	breq	.+102    	; 0x302e <UART0_Write+0x8e>
	{
		while(tx0_counter == TX0_BUFFER_SIZE);
    2fc8:	00 00       	nop
    2fca:	80 91 af 01 	lds	r24, 0x01AF
    2fce:	80 34       	cpi	r24, 0x40	; 64
    2fd0:	e1 f3       	breq	.-8      	; 0x2fca <UART0_Write+0x2a>

		cli();
    2fd2:	f8 94       	cli

		if(tx0_counter || (UCSR0A & 0x20) == 0)
    2fd4:	80 91 af 01 	lds	r24, 0x01AF
    2fd8:	88 23       	and	r24, r24
    2fda:	51 f4       	brne	.+20     	; 0x2ff0 <UART0_Write+0x50>
    2fdc:	80 ec       	ldi	r24, 0xC0	; 192
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	fc 01       	movw	r30, r24
    2fe2:	80 81       	ld	r24, Z
    2fe4:	88 2f       	mov	r24, r24
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	80 72       	andi	r24, 0x20	; 32
    2fea:	99 27       	eor	r25, r25
    2fec:	89 2b       	or	r24, r25
    2fee:	c1 f4       	brne	.+48     	; 0x3020 <UART0_Write+0x80>
		{
			tx0_buffer[tx0_wr_index] = data;
    2ff0:	80 91 ae 01 	lds	r24, 0x01AE
    2ff4:	88 2f       	mov	r24, r24
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	82 59       	subi	r24, 0x92	; 146
    2ffa:	9e 4f       	sbci	r25, 0xFE	; 254
    2ffc:	29 81       	ldd	r18, Y+1	; 0x01
    2ffe:	fc 01       	movw	r30, r24
    3000:	20 83       	st	Z, r18
			if(++tx0_wr_index == TX0_BUFFER_SIZE)
    3002:	80 91 ae 01 	lds	r24, 0x01AE
    3006:	8f 5f       	subi	r24, 0xFF	; 255
    3008:	80 93 ae 01 	sts	0x01AE, r24
    300c:	80 34       	cpi	r24, 0x40	; 64
    300e:	11 f4       	brne	.+4      	; 0x3014 <UART0_Write+0x74>
				tx0_wr_index = 0;
    3010:	10 92 ae 01 	sts	0x01AE, r1

			tx0_counter++;
    3014:	80 91 af 01 	lds	r24, 0x01AF
    3018:	8f 5f       	subi	r24, 0xFF	; 255
    301a:	80 93 af 01 	sts	0x01AF, r24
    301e:	05 c0       	rjmp	.+10     	; 0x302a <UART0_Write+0x8a>
		}
		else
			UDR0 = data;
    3020:	86 ec       	ldi	r24, 0xC6	; 198
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	29 81       	ldd	r18, Y+1	; 0x01
    3026:	fc 01       	movw	r30, r24
    3028:	20 83       	st	Z, r18

		sei();
    302a:	78 94       	sei
    302c:	03 c0       	rjmp	.+6      	; 0x3034 <UART0_Write+0x94>
	}
	else
		altUart0Write(data);
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	0e 94 bf 19 	call	0x337e	; 0x337e <altUart0Write>
}
    3034:	0f 90       	pop	r0
    3036:	df 91       	pop	r29
    3038:	cf 91       	pop	r28
    303a:	08 95       	ret

0000303c <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    303c:	1f 92       	push	r1
    303e:	0f 92       	push	r0
    3040:	00 90 5f 00 	lds	r0, 0x005F
    3044:	0f 92       	push	r0
    3046:	11 24       	eor	r1, r1
    3048:	00 90 5b 00 	lds	r0, 0x005B
    304c:	0f 92       	push	r0
    304e:	2f 93       	push	r18
    3050:	3f 93       	push	r19
    3052:	8f 93       	push	r24
    3054:	9f 93       	push	r25
    3056:	ef 93       	push	r30
    3058:	ff 93       	push	r31
    305a:	cf 93       	push	r28
    305c:	df 93       	push	r29
    305e:	1f 92       	push	r1
    3060:	cd b7       	in	r28, 0x3d	; 61
    3062:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    3064:	80 ec       	ldi	r24, 0xC0	; 192
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	fc 01       	movw	r30, r24
    306a:	80 81       	ld	r24, Z
    306c:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	88 2f       	mov	r24, r24
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	8c 71       	andi	r24, 0x1C	; 28
    3076:	99 27       	eor	r25, r25
    3078:	89 2b       	or	r24, r25
    307a:	d1 f4       	brne	.+52     	; 0x30b0 <__vector_21+0x74>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    307c:	80 91 f1 01 	lds	r24, 0x01F1
    3080:	88 2f       	mov	r24, r24
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	26 ec       	ldi	r18, 0xC6	; 198
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	f9 01       	movw	r30, r18
    308a:	20 81       	ld	r18, Z
    308c:	8f 54       	subi	r24, 0x4F	; 79
    308e:	9e 4f       	sbci	r25, 0xFE	; 254
    3090:	fc 01       	movw	r30, r24
    3092:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    3094:	80 91 f1 01 	lds	r24, 0x01F1
    3098:	8f 5f       	subi	r24, 0xFF	; 255
    309a:	80 93 f1 01 	sts	0x01F1, r24
    309e:	80 34       	cpi	r24, 0x40	; 64
    30a0:	11 f4       	brne	.+4      	; 0x30a6 <__vector_21+0x6a>
			rx0_wr_index = 0;
    30a2:	10 92 f1 01 	sts	0x01F1, r1

		rx0_counter++;
    30a6:	80 91 f2 01 	lds	r24, 0x01F2
    30aa:	8f 5f       	subi	r24, 0xFF	; 255
    30ac:	80 93 f2 01 	sts	0x01F2, r24
	}
}
    30b0:	0f 90       	pop	r0
    30b2:	df 91       	pop	r29
    30b4:	cf 91       	pop	r28
    30b6:	ff 91       	pop	r31
    30b8:	ef 91       	pop	r30
    30ba:	9f 91       	pop	r25
    30bc:	8f 91       	pop	r24
    30be:	3f 91       	pop	r19
    30c0:	2f 91       	pop	r18
    30c2:	0f 90       	pop	r0
    30c4:	00 92 5b 00 	sts	0x005B, r0
    30c8:	0f 90       	pop	r0
    30ca:	00 92 5f 00 	sts	0x005F, r0
    30ce:	0f 90       	pop	r0
    30d0:	1f 90       	pop	r1
    30d2:	18 95       	reti

000030d4 <UART0_Read>:
/****************************************************************************************************************************************
Primanje podataka USART0 modulom
****************************************************************************************************************************************/

unsigned char UART0_Read(void)
{
    30d4:	cf 93       	push	r28
    30d6:	df 93       	push	r29
    30d8:	1f 92       	push	r1
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR0B >> RXCIE0) & 0x01)
    30de:	81 ec       	ldi	r24, 0xC1	; 193
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	fc 01       	movw	r30, r24
    30e4:	80 81       	ld	r24, Z
    30e6:	88 1f       	adc	r24, r24
    30e8:	88 27       	eor	r24, r24
    30ea:	88 1f       	adc	r24, r24
    30ec:	88 2f       	mov	r24, r24
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	81 70       	andi	r24, 0x01	; 1
    30f2:	99 27       	eor	r25, r25
    30f4:	89 2b       	or	r24, r25
    30f6:	e9 f0       	breq	.+58     	; 0x3132 <UART0_Read+0x5e>
	{
		while(rx0_counter == 0);
    30f8:	00 00       	nop
    30fa:	80 91 f2 01 	lds	r24, 0x01F2
    30fe:	88 23       	and	r24, r24
    3100:	e1 f3       	breq	.-8      	; 0x30fa <UART0_Read+0x26>

		data = rx0_buffer[rx0_rd_index];
    3102:	80 91 f3 01 	lds	r24, 0x01F3
    3106:	88 2f       	mov	r24, r24
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	8f 54       	subi	r24, 0x4F	; 79
    310c:	9e 4f       	sbci	r25, 0xFE	; 254
    310e:	fc 01       	movw	r30, r24
    3110:	80 81       	ld	r24, Z
    3112:	89 83       	std	Y+1, r24	; 0x01

		if(++rx0_rd_index == RX0_BUFFER_SIZE)
    3114:	80 91 f3 01 	lds	r24, 0x01F3
    3118:	8f 5f       	subi	r24, 0xFF	; 255
    311a:	80 93 f3 01 	sts	0x01F3, r24
    311e:	80 34       	cpi	r24, 0x40	; 64
    3120:	11 f4       	brne	.+4      	; 0x3126 <UART0_Read+0x52>
			rx0_rd_index = 0;
    3122:	10 92 f3 01 	sts	0x01F3, r1

		rx0_counter--;
    3126:	80 91 f2 01 	lds	r24, 0x01F2
    312a:	81 50       	subi	r24, 0x01	; 1
    312c:	80 93 f2 01 	sts	0x01F2, r24
    3130:	13 c0       	rjmp	.+38     	; 0x3158 <UART0_Read+0x84>
	}
	else
	{
		while( !((UCSR0A >> RXC0) & 0x01));
    3132:	00 00       	nop
    3134:	80 ec       	ldi	r24, 0xC0	; 192
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	fc 01       	movw	r30, r24
    313a:	80 81       	ld	r24, Z
    313c:	88 1f       	adc	r24, r24
    313e:	88 27       	eor	r24, r24
    3140:	88 1f       	adc	r24, r24
    3142:	88 2f       	mov	r24, r24
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	81 70       	andi	r24, 0x01	; 1
    3148:	99 27       	eor	r25, r25
    314a:	89 2b       	or	r24, r25
    314c:	99 f3       	breq	.-26     	; 0x3134 <UART0_Read+0x60>
		data = UDR0;
    314e:	86 ec       	ldi	r24, 0xC6	; 198
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	fc 01       	movw	r30, r24
    3154:	80 81       	ld	r24, Z
    3156:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    3158:	89 81       	ldd	r24, Y+1	; 0x01
}
    315a:	0f 90       	pop	r0
    315c:	df 91       	pop	r29
    315e:	cf 91       	pop	r28
    3160:	08 95       	ret

00003162 <UART1_Init>:
-bez paritet
-9600baud
-asynchron
****************************************************************************************************************************************/
void UART1_Init(unsigned long baud, char isrOnOff)
{
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	27 97       	sbiw	r28, 0x07	; 7
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	6b 83       	std	Y+3, r22	; 0x03
    3178:	7c 83       	std	Y+4, r23	; 0x04
    317a:	8d 83       	std	Y+5, r24	; 0x05
    317c:	9e 83       	std	Y+6, r25	; 0x06
    317e:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
    3180:	88 ec       	ldi	r24, 0xC8	; 200
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	fc 01       	movw	r30, r24
    3186:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
    3188:	89 ec       	ldi	r24, 0xC9	; 201
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	28 e1       	ldi	r18, 0x18	; 24
    318e:	fc 01       	movw	r30, r24
    3190:	20 83       	st	Z, r18

	// comment or uncomment define in usart.h
	#ifdef ARDUINO_COMMUNICATION
		UCSR1C = (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1); // sa 2 stop bit
    3192:	8a ec       	ldi	r24, 0xCA	; 202
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	2e e0       	ldi	r18, 0x0E	; 14
    3198:	fc 01       	movw	r30, r24
    319a:	20 83       	st	Z, r18
	#else
		//UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); sa 1stop bit
	#endif


	if(isrOnOff == UART_ISR_ON)
    319c:	8f 81       	ldd	r24, Y+7	; 0x07
    319e:	81 30       	cpi	r24, 0x01	; 1
    31a0:	91 f4       	brne	.+36     	; 0x31c6 <UART1_Init+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
    31a2:	89 ec       	ldi	r24, 0xC9	; 201
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	29 ec       	ldi	r18, 0xC9	; 201
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	f9 01       	movw	r30, r18
    31ac:	20 81       	ld	r18, Z
    31ae:	20 6c       	ori	r18, 0xC0	; 192
    31b0:	fc 01       	movw	r30, r24
    31b2:	20 83       	st	Z, r18
		SREG |= 0x80;
    31b4:	8f e5       	ldi	r24, 0x5F	; 95
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	2f e5       	ldi	r18, 0x5F	; 95
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	f9 01       	movw	r30, r18
    31be:	20 81       	ld	r18, Z
    31c0:	20 68       	ori	r18, 0x80	; 128
    31c2:	fc 01       	movw	r30, r24
    31c4:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    31c6:	6b 81       	ldd	r22, Y+3	; 0x03
    31c8:	7c 81       	ldd	r23, Y+4	; 0x04
    31ca:	8d 81       	ldd	r24, Y+5	; 0x05
    31cc:	9e 81       	ldd	r25, Y+6	; 0x06
    31ce:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__floatunsisf>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	40 e8       	ldi	r20, 0x80	; 128
    31dc:	51 e4       	ldi	r21, 0x41	; 65
    31de:	bc 01       	movw	r22, r24
    31e0:	cd 01       	movw	r24, r26
    31e2:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	9c 01       	movw	r18, r24
    31ec:	ad 01       	movw	r20, r26
    31ee:	60 e8       	ldi	r22, 0x80	; 128
    31f0:	76 e9       	ldi	r23, 0x96	; 150
    31f2:	88 e1       	ldi	r24, 0x18	; 24
    31f4:	9b e4       	ldi	r25, 0x4B	; 75
    31f6:	0e 94 b0 1c 	call	0x3960	; 0x3960 <__divsf3>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	40 e8       	ldi	r20, 0x80	; 128
    3204:	5f e3       	ldi	r21, 0x3F	; 63
    3206:	bc 01       	movw	r22, r24
    3208:	cd 01       	movw	r24, r26
    320a:	0e 94 3e 1c 	call	0x387c	; 0x387c <__subsf3>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	40 e0       	ldi	r20, 0x00	; 0
    3218:	5f e3       	ldi	r21, 0x3F	; 63
    321a:	bc 01       	movw	r22, r24
    321c:	cd 01       	movw	r24, r26
    321e:	0e 94 3f 1c 	call	0x387e	; 0x387e <__addsf3>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	9a 83       	std	Y+2, r25	; 0x02
    3234:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
    3236:	8d ec       	ldi	r24, 0xCD	; 205
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	29 81       	ldd	r18, Y+1	; 0x01
    323c:	3a 81       	ldd	r19, Y+2	; 0x02
    323e:	23 2f       	mov	r18, r19
    3240:	33 27       	eor	r19, r19
    3242:	fc 01       	movw	r30, r24
    3244:	20 83       	st	Z, r18
	UBRR1L = temp;
    3246:	8c ec       	ldi	r24, 0xCC	; 204
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	29 81       	ldd	r18, Y+1	; 0x01
    324c:	fc 01       	movw	r30, r24
    324e:	20 83       	st	Z, r18
}
    3250:	27 96       	adiw	r28, 0x07	; 7
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	f8 94       	cli
    3256:	de bf       	out	0x3e, r29	; 62
    3258:	0f be       	out	0x3f, r0	; 63
    325a:	cd bf       	out	0x3d, r28	; 61
    325c:	df 91       	pop	r29
    325e:	cf 91       	pop	r28
    3260:	08 95       	ret

00003262 <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    3262:	1f 92       	push	r1
    3264:	0f 92       	push	r0
    3266:	00 90 5f 00 	lds	r0, 0x005F
    326a:	0f 92       	push	r0
    326c:	11 24       	eor	r1, r1
    326e:	00 90 5b 00 	lds	r0, 0x005B
    3272:	0f 92       	push	r0
    3274:	2f 93       	push	r18
    3276:	3f 93       	push	r19
    3278:	8f 93       	push	r24
    327a:	9f 93       	push	r25
    327c:	ef 93       	push	r30
    327e:	ff 93       	push	r31
    3280:	cf 93       	push	r28
    3282:	df 93       	push	r29
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    3288:	80 91 35 02 	lds	r24, 0x0235
    328c:	88 23       	and	r24, r24
    328e:	d1 f0       	breq	.+52     	; 0x32c4 <__vector_34+0x62>
	{
		tx1_counter--;
    3290:	80 91 35 02 	lds	r24, 0x0235
    3294:	81 50       	subi	r24, 0x01	; 1
    3296:	80 93 35 02 	sts	0x0235, r24
		UDR1=tx1_buffer[tx1_rd_index];
    329a:	8e ec       	ldi	r24, 0xCE	; 206
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	20 91 36 02 	lds	r18, 0x0236
    32a2:	22 2f       	mov	r18, r18
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	2c 50       	subi	r18, 0x0C	; 12
    32a8:	3e 4f       	sbci	r19, 0xFE	; 254
    32aa:	f9 01       	movw	r30, r18
    32ac:	20 81       	ld	r18, Z
    32ae:	fc 01       	movw	r30, r24
    32b0:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    32b2:	80 91 36 02 	lds	r24, 0x0236
    32b6:	8f 5f       	subi	r24, 0xFF	; 255
    32b8:	80 93 36 02 	sts	0x0236, r24
    32bc:	80 34       	cpi	r24, 0x40	; 64
    32be:	11 f4       	brne	.+4      	; 0x32c4 <__vector_34+0x62>
			tx1_rd_index = 0;
    32c0:	10 92 36 02 	sts	0x0236, r1
	}
}
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	ff 91       	pop	r31
    32ca:	ef 91       	pop	r30
    32cc:	9f 91       	pop	r25
    32ce:	8f 91       	pop	r24
    32d0:	3f 91       	pop	r19
    32d2:	2f 91       	pop	r18
    32d4:	0f 90       	pop	r0
    32d6:	00 92 5b 00 	sts	0x005B, r0
    32da:	0f 90       	pop	r0
    32dc:	00 92 5f 00 	sts	0x005F, r0
    32e0:	0f 90       	pop	r0
    32e2:	1f 90       	pop	r1
    32e4:	18 95       	reti

000032e6 <__vector_32>:

ISR(USART1_RX_vect)
{
    32e6:	1f 92       	push	r1
    32e8:	0f 92       	push	r0
    32ea:	00 90 5f 00 	lds	r0, 0x005F
    32ee:	0f 92       	push	r0
    32f0:	11 24       	eor	r1, r1
    32f2:	00 90 5b 00 	lds	r0, 0x005B
    32f6:	0f 92       	push	r0
    32f8:	2f 93       	push	r18
    32fa:	3f 93       	push	r19
    32fc:	8f 93       	push	r24
    32fe:	9f 93       	push	r25
    3300:	ef 93       	push	r30
    3302:	ff 93       	push	r31
    3304:	cf 93       	push	r28
    3306:	df 93       	push	r29
    3308:	1f 92       	push	r1
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    330e:	88 ec       	ldi	r24, 0xC8	; 200
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	fc 01       	movw	r30, r24
    3314:	80 81       	ld	r24, Z
    3316:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	88 2f       	mov	r24, r24
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	8c 71       	andi	r24, 0x1C	; 28
    3320:	99 27       	eor	r25, r25
    3322:	89 2b       	or	r24, r25
    3324:	d1 f4       	brne	.+52     	; 0x335a <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    3326:	80 91 77 02 	lds	r24, 0x0277
    332a:	88 2f       	mov	r24, r24
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	2e ec       	ldi	r18, 0xCE	; 206
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	f9 01       	movw	r30, r18
    3334:	20 81       	ld	r18, Z
    3336:	89 5c       	subi	r24, 0xC9	; 201
    3338:	9d 4f       	sbci	r25, 0xFD	; 253
    333a:	fc 01       	movw	r30, r24
    333c:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    333e:	80 91 77 02 	lds	r24, 0x0277
    3342:	8f 5f       	subi	r24, 0xFF	; 255
    3344:	80 93 77 02 	sts	0x0277, r24
    3348:	80 34       	cpi	r24, 0x40	; 64
    334a:	11 f4       	brne	.+4      	; 0x3350 <__vector_32+0x6a>
		rx1_wr_index = 0;
    334c:	10 92 77 02 	sts	0x0277, r1

		rx1_counter++;
    3350:	80 91 78 02 	lds	r24, 0x0278
    3354:	8f 5f       	subi	r24, 0xFF	; 255
    3356:	80 93 78 02 	sts	0x0278, r24
	}
}
    335a:	0f 90       	pop	r0
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	ff 91       	pop	r31
    3362:	ef 91       	pop	r30
    3364:	9f 91       	pop	r25
    3366:	8f 91       	pop	r24
    3368:	3f 91       	pop	r19
    336a:	2f 91       	pop	r18
    336c:	0f 90       	pop	r0
    336e:	00 92 5b 00 	sts	0x005B, r0
    3372:	0f 90       	pop	r0
    3374:	00 92 5f 00 	sts	0x005F, r0
    3378:	0f 90       	pop	r0
    337a:	1f 90       	pop	r1
    337c:	18 95       	reti

0000337e <altUart0Write>:

void altUart0Write(unsigned char data)
{
    337e:	cf 93       	push	r28
    3380:	df 93       	push	r29
    3382:	1f 92       	push	r1
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
    338a:	00 00       	nop
    338c:	80 ec       	ldi	r24, 0xC0	; 192
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	fc 01       	movw	r30, r24
    3392:	80 81       	ld	r24, Z
    3394:	88 2f       	mov	r24, r24
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	80 72       	andi	r24, 0x20	; 32
    339a:	99 27       	eor	r25, r25
    339c:	89 2b       	or	r24, r25
    339e:	b1 f3       	breq	.-20     	; 0x338c <altUart0Write+0xe>

	UDR0 = data;
    33a0:	86 ec       	ldi	r24, 0xC6	; 198
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	29 81       	ldd	r18, Y+1	; 0x01
    33a6:	fc 01       	movw	r30, r24
    33a8:	20 83       	st	Z, r18
}
    33aa:	0f 90       	pop	r0
    33ac:	df 91       	pop	r29
    33ae:	cf 91       	pop	r28
    33b0:	08 95       	ret

000033b2 <altUart1Write>:

void altUart1Write(unsigned char data)
{
    33b2:	cf 93       	push	r28
    33b4:	df 93       	push	r29
    33b6:	1f 92       	push	r1
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    33bc:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
    33be:	00 00       	nop
    33c0:	88 ec       	ldi	r24, 0xC8	; 200
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	fc 01       	movw	r30, r24
    33c6:	80 81       	ld	r24, Z
    33c8:	88 2f       	mov	r24, r24
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	80 72       	andi	r24, 0x20	; 32
    33ce:	99 27       	eor	r25, r25
    33d0:	89 2b       	or	r24, r25
    33d2:	b1 f3       	breq	.-20     	; 0x33c0 <altUart1Write+0xe>
	UDR1 = data;
    33d4:	8e ec       	ldi	r24, 0xCE	; 206
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	29 81       	ldd	r18, Y+1	; 0x01
    33da:	fc 01       	movw	r30, r24
    33dc:	20 83       	st	Z, r18
}
    33de:	0f 90       	pop	r0
    33e0:	df 91       	pop	r29
    33e2:	cf 91       	pop	r28
    33e4:	08 95       	ret

000033e6 <UART1_Write>:
Slanje podataka USART1 modulom
**
**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
    33e6:	cf 93       	push	r28
    33e8:	df 93       	push	r29
    33ea:	1f 92       	push	r1
    33ec:	cd b7       	in	r28, 0x3d	; 61
    33ee:	de b7       	in	r29, 0x3e	; 62
    33f0:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
    33f2:	89 ec       	ldi	r24, 0xC9	; 201
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	fc 01       	movw	r30, r24
    33f8:	80 81       	ld	r24, Z
    33fa:	82 95       	swap	r24
    33fc:	86 95       	lsr	r24
    33fe:	86 95       	lsr	r24
    3400:	83 70       	andi	r24, 0x03	; 3
    3402:	88 2f       	mov	r24, r24
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	81 70       	andi	r24, 0x01	; 1
    3408:	99 27       	eor	r25, r25
    340a:	89 2b       	or	r24, r25
    340c:	99 f1       	breq	.+102    	; 0x3474 <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
    340e:	00 00       	nop
    3410:	80 91 35 02 	lds	r24, 0x0235
    3414:	80 34       	cpi	r24, 0x40	; 64
    3416:	e1 f3       	breq	.-8      	; 0x3410 <UART1_Write+0x2a>

		cli();
    3418:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
    341a:	80 91 35 02 	lds	r24, 0x0235
    341e:	88 23       	and	r24, r24
    3420:	51 f4       	brne	.+20     	; 0x3436 <UART1_Write+0x50>
    3422:	88 ec       	ldi	r24, 0xC8	; 200
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	fc 01       	movw	r30, r24
    3428:	80 81       	ld	r24, Z
    342a:	88 2f       	mov	r24, r24
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	80 72       	andi	r24, 0x20	; 32
    3430:	99 27       	eor	r25, r25
    3432:	89 2b       	or	r24, r25
    3434:	c1 f4       	brne	.+48     	; 0x3466 <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
    3436:	80 91 34 02 	lds	r24, 0x0234
    343a:	88 2f       	mov	r24, r24
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	8c 50       	subi	r24, 0x0C	; 12
    3440:	9e 4f       	sbci	r25, 0xFE	; 254
    3442:	29 81       	ldd	r18, Y+1	; 0x01
    3444:	fc 01       	movw	r30, r24
    3446:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
    3448:	80 91 34 02 	lds	r24, 0x0234
    344c:	8f 5f       	subi	r24, 0xFF	; 255
    344e:	80 93 34 02 	sts	0x0234, r24
    3452:	80 34       	cpi	r24, 0x40	; 64
    3454:	11 f4       	brne	.+4      	; 0x345a <UART1_Write+0x74>
				tx1_wr_index = 0;
    3456:	10 92 34 02 	sts	0x0234, r1

			tx1_counter++;
    345a:	80 91 35 02 	lds	r24, 0x0235
    345e:	8f 5f       	subi	r24, 0xFF	; 255
    3460:	80 93 35 02 	sts	0x0235, r24
    3464:	05 c0       	rjmp	.+10     	; 0x3470 <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
    3466:	8e ec       	ldi	r24, 0xCE	; 206
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	29 81       	ldd	r18, Y+1	; 0x01
    346c:	fc 01       	movw	r30, r24
    346e:	20 83       	st	Z, r18

		sei();
    3470:	78 94       	sei
    3472:	03 c0       	rjmp	.+6      	; 0x347a <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
    3474:	89 81       	ldd	r24, Y+1	; 0x01
    3476:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <altUart1Write>
}
    347a:	0f 90       	pop	r0
    347c:	df 91       	pop	r29
    347e:	cf 91       	pop	r28
    3480:	08 95       	ret

00003482 <UART1_Read>:

unsigned char UART1_Read(void)
{
    3482:	cf 93       	push	r28
    3484:	df 93       	push	r29
    3486:	1f 92       	push	r1
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
    348c:	89 ec       	ldi	r24, 0xC9	; 201
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	fc 01       	movw	r30, r24
    3492:	80 81       	ld	r24, Z
    3494:	88 1f       	adc	r24, r24
    3496:	88 27       	eor	r24, r24
    3498:	88 1f       	adc	r24, r24
    349a:	88 2f       	mov	r24, r24
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	81 70       	andi	r24, 0x01	; 1
    34a0:	99 27       	eor	r25, r25
    34a2:	89 2b       	or	r24, r25
    34a4:	e9 f0       	breq	.+58     	; 0x34e0 <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
    34a6:	00 00       	nop
    34a8:	80 91 78 02 	lds	r24, 0x0278
    34ac:	88 23       	and	r24, r24
    34ae:	e1 f3       	breq	.-8      	; 0x34a8 <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
    34b0:	80 91 79 02 	lds	r24, 0x0279
    34b4:	88 2f       	mov	r24, r24
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	89 5c       	subi	r24, 0xC9	; 201
    34ba:	9d 4f       	sbci	r25, 0xFD	; 253
    34bc:	fc 01       	movw	r30, r24
    34be:	80 81       	ld	r24, Z
    34c0:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
    34c2:	80 91 79 02 	lds	r24, 0x0279
    34c6:	8f 5f       	subi	r24, 0xFF	; 255
    34c8:	80 93 79 02 	sts	0x0279, r24
    34cc:	80 34       	cpi	r24, 0x40	; 64
    34ce:	11 f4       	brne	.+4      	; 0x34d4 <UART1_Read+0x52>
			rx1_rd_index = 0;
    34d0:	10 92 79 02 	sts	0x0279, r1

		rx1_counter--;
    34d4:	80 91 78 02 	lds	r24, 0x0278
    34d8:	81 50       	subi	r24, 0x01	; 1
    34da:	80 93 78 02 	sts	0x0278, r24
    34de:	13 c0       	rjmp	.+38     	; 0x3506 <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
    34e0:	00 00       	nop
    34e2:	88 ec       	ldi	r24, 0xC8	; 200
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	fc 01       	movw	r30, r24
    34e8:	80 81       	ld	r24, Z
    34ea:	88 1f       	adc	r24, r24
    34ec:	88 27       	eor	r24, r24
    34ee:	88 1f       	adc	r24, r24
    34f0:	88 2f       	mov	r24, r24
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	81 70       	andi	r24, 0x01	; 1
    34f6:	99 27       	eor	r25, r25
    34f8:	89 2b       	or	r24, r25
    34fa:	99 f3       	breq	.-26     	; 0x34e2 <UART1_Read+0x60>
		data = UDR1;
    34fc:	8e ec       	ldi	r24, 0xCE	; 206
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	fc 01       	movw	r30, r24
    3502:	80 81       	ld	r24, Z
    3504:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    3506:	89 81       	ldd	r24, Y+1	; 0x01
}
    3508:	0f 90       	pop	r0
    350a:	df 91       	pop	r29
    350c:	cf 91       	pop	r28
    350e:	08 95       	ret

00003510 <UART1_Buffer>:

void UART1_Buffer(uint8_t* str) {
    3510:	cf 93       	push	r28
    3512:	df 93       	push	r29
    3514:	00 d0       	rcall	.+0      	; 0x3516 <UART1_Buffer+0x6>
    3516:	cd b7       	in	r28, 0x3d	; 61
    3518:	de b7       	in	r29, 0x3e	; 62
    351a:	9a 83       	std	Y+2, r25	; 0x02
    351c:	89 83       	std	Y+1, r24	; 0x01
	while(*str) {
    351e:	0b c0       	rjmp	.+22     	; 0x3536 <UART1_Buffer+0x26>
		altUart1Write(*str++);
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	9a 81       	ldd	r25, Y+2	; 0x02
    3524:	9c 01       	movw	r18, r24
    3526:	2f 5f       	subi	r18, 0xFF	; 255
    3528:	3f 4f       	sbci	r19, 0xFF	; 255
    352a:	3a 83       	std	Y+2, r19	; 0x02
    352c:	29 83       	std	Y+1, r18	; 0x01
    352e:	fc 01       	movw	r30, r24
    3530:	80 81       	ld	r24, Z
    3532:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <altUart1Write>

	return data;
}

void UART1_Buffer(uint8_t* str) {
	while(*str) {
    3536:	89 81       	ldd	r24, Y+1	; 0x01
    3538:	9a 81       	ldd	r25, Y+2	; 0x02
    353a:	fc 01       	movw	r30, r24
    353c:	80 81       	ld	r24, Z
    353e:	88 23       	and	r24, r24
    3540:	79 f7       	brne	.-34     	; 0x3520 <UART1_Buffer+0x10>
		altUart1Write(*str++);
	}
}
    3542:	0f 90       	pop	r0
    3544:	0f 90       	pop	r0
    3546:	df 91       	pop	r29
    3548:	cf 91       	pop	r28
    354a:	08 95       	ret

0000354c <wait_while_detection_tactic_one>:

/*
 * 	Function: static void wait_while_detection_tactic_one(void)
 * 	Description: This will wait until the callback(sensor) is returning 1, so called detecting the enemy
 */
static void wait_while_detection_tactic_one(void) {
    354c:	cf 93       	push	r28
    354e:	df 93       	push	r29
    3550:	cd b7       	in	r28, 0x3d	; 61
    3552:	de b7       	in	r29, 0x3e	; 62
    3554:	2e 97       	sbiw	r28, 0x0e	; 14
    3556:	0f b6       	in	r0, 0x3f	; 63
    3558:	f8 94       	cli
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	0f be       	out	0x3f, r0	; 63
    355e:	cd bf       	out	0x3d, r28	; 61

	while(TACTIC_ONE_POSITION[current_position].callback(0) == 1)
    3560:	72 c0       	rjmp	.+228    	; 0x3646 <wait_while_detection_tactic_one+0xfa>
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	a8 ec       	ldi	r26, 0xC8	; 200
    3568:	b2 e4       	ldi	r27, 0x42	; 66
    356a:	89 83       	std	Y+1, r24	; 0x01
    356c:	9a 83       	std	Y+2, r25	; 0x02
    356e:	ab 83       	std	Y+3, r26	; 0x03
    3570:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	30 e4       	ldi	r19, 0x40	; 64
    3576:	4c e1       	ldi	r20, 0x1C	; 28
    3578:	55 e4       	ldi	r21, 0x45	; 69
    357a:	69 81       	ldd	r22, Y+1	; 0x01
    357c:	7a 81       	ldd	r23, Y+2	; 0x02
    357e:	8b 81       	ldd	r24, Y+3	; 0x03
    3580:	9c 81       	ldd	r25, Y+4	; 0x04
    3582:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	8d 83       	std	Y+5, r24	; 0x05
    358c:	9e 83       	std	Y+6, r25	; 0x06
    358e:	af 83       	std	Y+7, r26	; 0x07
    3590:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	40 e8       	ldi	r20, 0x80	; 128
    3598:	5f e3       	ldi	r21, 0x3F	; 63
    359a:	6d 81       	ldd	r22, Y+5	; 0x05
    359c:	7e 81       	ldd	r23, Y+6	; 0x06
    359e:	8f 81       	ldd	r24, Y+7	; 0x07
    35a0:	98 85       	ldd	r25, Y+8	; 0x08
    35a2:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
    35a6:	88 23       	and	r24, r24
    35a8:	2c f4       	brge	.+10     	; 0x35b4 <wait_while_detection_tactic_one+0x68>
		__ticks = 1;
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	9a 87       	std	Y+10, r25	; 0x0a
    35b0:	89 87       	std	Y+9, r24	; 0x09
    35b2:	3f c0       	rjmp	.+126    	; 0x3632 <wait_while_detection_tactic_one+0xe6>
	else if (__tmp > 65535)
    35b4:	20 e0       	ldi	r18, 0x00	; 0
    35b6:	3f ef       	ldi	r19, 0xFF	; 255
    35b8:	4f e7       	ldi	r20, 0x7F	; 127
    35ba:	57 e4       	ldi	r21, 0x47	; 71
    35bc:	6d 81       	ldd	r22, Y+5	; 0x05
    35be:	7e 81       	ldd	r23, Y+6	; 0x06
    35c0:	8f 81       	ldd	r24, Y+7	; 0x07
    35c2:	98 85       	ldd	r25, Y+8	; 0x08
    35c4:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
    35c8:	18 16       	cp	r1, r24
    35ca:	4c f5       	brge	.+82     	; 0x361e <wait_while_detection_tactic_one+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	40 e2       	ldi	r20, 0x20	; 32
    35d2:	51 e4       	ldi	r21, 0x41	; 65
    35d4:	69 81       	ldd	r22, Y+1	; 0x01
    35d6:	7a 81       	ldd	r23, Y+2	; 0x02
    35d8:	8b 81       	ldd	r24, Y+3	; 0x03
    35da:	9c 81       	ldd	r25, Y+4	; 0x04
    35dc:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	bc 01       	movw	r22, r24
    35e6:	cd 01       	movw	r24, r26
    35e8:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	9a 87       	std	Y+10, r25	; 0x0a
    35f2:	89 87       	std	Y+9, r24	; 0x09
    35f4:	0f c0       	rjmp	.+30     	; 0x3614 <wait_while_detection_tactic_one+0xc8>
    35f6:	8a ef       	ldi	r24, 0xFA	; 250
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	9c 87       	std	Y+12, r25	; 0x0c
    35fc:	8b 87       	std	Y+11, r24	; 0x0b
    35fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    3600:	9c 85       	ldd	r25, Y+12	; 0x0c
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <wait_while_detection_tactic_one+0xb6>
    3606:	9c 87       	std	Y+12, r25	; 0x0c
    3608:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    360a:	89 85       	ldd	r24, Y+9	; 0x09
    360c:	9a 85       	ldd	r25, Y+10	; 0x0a
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	9a 87       	std	Y+10, r25	; 0x0a
    3612:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3614:	89 85       	ldd	r24, Y+9	; 0x09
    3616:	9a 85       	ldd	r25, Y+10	; 0x0a
    3618:	89 2b       	or	r24, r25
    361a:	69 f7       	brne	.-38     	; 0x35f6 <wait_while_detection_tactic_one+0xaa>
    361c:	14 c0       	rjmp	.+40     	; 0x3646 <wait_while_detection_tactic_one+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    361e:	6d 81       	ldd	r22, Y+5	; 0x05
    3620:	7e 81       	ldd	r23, Y+6	; 0x06
    3622:	8f 81       	ldd	r24, Y+7	; 0x07
    3624:	98 85       	ldd	r25, Y+8	; 0x08
    3626:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	9a 87       	std	Y+10, r25	; 0x0a
    3630:	89 87       	std	Y+9, r24	; 0x09
    3632:	89 85       	ldd	r24, Y+9	; 0x09
    3634:	9a 85       	ldd	r25, Y+10	; 0x0a
    3636:	9e 87       	std	Y+14, r25	; 0x0e
    3638:	8d 87       	std	Y+13, r24	; 0x0d
    363a:	8d 85       	ldd	r24, Y+13	; 0x0d
    363c:	9e 85       	ldd	r25, Y+14	; 0x0e
    363e:	01 97       	sbiw	r24, 0x01	; 1
    3640:	f1 f7       	brne	.-4      	; 0x363e <wait_while_detection_tactic_one+0xf2>
    3642:	9e 87       	std	Y+14, r25	; 0x0e
    3644:	8d 87       	std	Y+13, r24	; 0x0d
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	60 e0       	ldi	r22, 0x00	; 0
    364c:	70 e0       	ldi	r23, 0x00	; 0
    364e:	cb 01       	movw	r24, r22
    3650:	f9 01       	movw	r30, r18
    3652:	09 95       	icall
    3654:	81 30       	cpi	r24, 0x01	; 1
    3656:	09 f4       	brne	.+2      	; 0x365a <wait_while_detection_tactic_one+0x10e>
    3658:	84 cf       	rjmp	.-248    	; 0x3562 <wait_while_detection_tactic_one+0x16>
		_delay_ms(100);
	next_position = current_position;
    365a:	80 91 7a 02 	lds	r24, 0x027A
    365e:	80 93 7b 02 	sts	0x027B, r24
	active_state = TACTIC_ONE;
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	80 93 22 01 	sts	0x0122, r24

}
    3668:	2e 96       	adiw	r28, 0x0e	; 14
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	df 91       	pop	r29
    3676:	cf 91       	pop	r28
    3678:	08 95       	ret

0000367a <darkside>:

void darkside(void) {
    367a:	cf 93       	push	r28
    367c:	df 93       	push	r29
    367e:	cd b7       	in	r28, 0x3d	; 61
    3680:	de b7       	in	r29, 0x3e	; 62
    3682:	65 97       	sbiw	r28, 0x15	; 21
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	f8 94       	cli
    3688:	de bf       	out	0x3e, r29	; 62
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	cd bf       	out	0x3d, r28	; 61


	// setting the starting position
	struct odometry_position startingPosition; startingPosition.x = 30; startingPosition.y = 0; startingPosition.angle = 0;
    368e:	8e e1       	ldi	r24, 0x1E	; 30
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	98 8b       	std	Y+16, r25	; 0x10
    3694:	8f 87       	std	Y+15, r24	; 0x0f
    3696:	1a 8a       	std	Y+18, r1	; 0x12
    3698:	19 8a       	std	Y+17, r1	; 0x11
    369a:	1c 8a       	std	Y+20, r1	; 0x14
    369c:	1b 8a       	std	Y+19, r1	; 0x13

	// sending the starting position to odometry
	odometry_set_position(&startingPosition);
    369e:	ce 01       	movw	r24, r28
    36a0:	0f 96       	adiw	r24, 0x0f	; 15
    36a2:	0e 94 0c 11 	call	0x2218	; 0x2218 <odometry_set_position>
		}
	}
	while(1);*/

	while(1) {
		switch(active_state) {
    36a6:	80 91 22 01 	lds	r24, 0x0122
    36aa:	88 2f       	mov	r24, r24
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	81 30       	cpi	r24, 0x01	; 1
    36b0:	91 05       	cpc	r25, r1
    36b2:	09 f4       	brne	.+2      	; 0x36b6 <darkside+0x3c>
    36b4:	7e c0       	rjmp	.+252    	; 0x37b2 <darkside+0x138>
    36b6:	83 35       	cpi	r24, 0x53	; 83
    36b8:	91 05       	cpc	r25, r1
    36ba:	09 f0       	breq	.+2      	; 0x36be <darkside+0x44>
    36bc:	c7 c0       	rjmp	.+398    	; 0x384c <darkside+0x1d2>
    36be:	80 e0       	ldi	r24, 0x00	; 0
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	aa e7       	ldi	r26, 0x7A	; 122
    36c4:	b4 e4       	ldi	r27, 0x44	; 68
    36c6:	89 83       	std	Y+1, r24	; 0x01
    36c8:	9a 83       	std	Y+2, r25	; 0x02
    36ca:	ab 83       	std	Y+3, r26	; 0x03
    36cc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	30 e4       	ldi	r19, 0x40	; 64
    36d2:	4c e1       	ldi	r20, 0x1C	; 28
    36d4:	55 e4       	ldi	r21, 0x45	; 69
    36d6:	69 81       	ldd	r22, Y+1	; 0x01
    36d8:	7a 81       	ldd	r23, Y+2	; 0x02
    36da:	8b 81       	ldd	r24, Y+3	; 0x03
    36dc:	9c 81       	ldd	r25, Y+4	; 0x04
    36de:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	8d 83       	std	Y+5, r24	; 0x05
    36e8:	9e 83       	std	Y+6, r25	; 0x06
    36ea:	af 83       	std	Y+7, r26	; 0x07
    36ec:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    36ee:	20 e0       	ldi	r18, 0x00	; 0
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	40 e8       	ldi	r20, 0x80	; 128
    36f4:	5f e3       	ldi	r21, 0x3F	; 63
    36f6:	6d 81       	ldd	r22, Y+5	; 0x05
    36f8:	7e 81       	ldd	r23, Y+6	; 0x06
    36fa:	8f 81       	ldd	r24, Y+7	; 0x07
    36fc:	98 85       	ldd	r25, Y+8	; 0x08
    36fe:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__cmpsf2>
    3702:	88 23       	and	r24, r24
    3704:	2c f4       	brge	.+10     	; 0x3710 <darkside+0x96>
		__ticks = 1;
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	9a 87       	std	Y+10, r25	; 0x0a
    370c:	89 87       	std	Y+9, r24	; 0x09
    370e:	3f c0       	rjmp	.+126    	; 0x378e <darkside+0x114>
	else if (__tmp > 65535)
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	3f ef       	ldi	r19, 0xFF	; 255
    3714:	4f e7       	ldi	r20, 0x7F	; 127
    3716:	57 e4       	ldi	r21, 0x47	; 71
    3718:	6d 81       	ldd	r22, Y+5	; 0x05
    371a:	7e 81       	ldd	r23, Y+6	; 0x06
    371c:	8f 81       	ldd	r24, Y+7	; 0x07
    371e:	98 85       	ldd	r25, Y+8	; 0x08
    3720:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <__gesf2>
    3724:	18 16       	cp	r1, r24
    3726:	4c f5       	brge	.+82     	; 0x377a <darkside+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	40 e2       	ldi	r20, 0x20	; 32
    372e:	51 e4       	ldi	r21, 0x41	; 65
    3730:	69 81       	ldd	r22, Y+1	; 0x01
    3732:	7a 81       	ldd	r23, Y+2	; 0x02
    3734:	8b 81       	ldd	r24, Y+3	; 0x03
    3736:	9c 81       	ldd	r25, Y+4	; 0x04
    3738:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulsf3>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	bc 01       	movw	r22, r24
    3742:	cd 01       	movw	r24, r26
    3744:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	9a 87       	std	Y+10, r25	; 0x0a
    374e:	89 87       	std	Y+9, r24	; 0x09
    3750:	0f c0       	rjmp	.+30     	; 0x3770 <darkside+0xf6>
    3752:	8a ef       	ldi	r24, 0xFA	; 250
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	9c 87       	std	Y+12, r25	; 0x0c
    3758:	8b 87       	std	Y+11, r24	; 0x0b
    375a:	8b 85       	ldd	r24, Y+11	; 0x0b
    375c:	9c 85       	ldd	r25, Y+12	; 0x0c
    375e:	01 97       	sbiw	r24, 0x01	; 1
    3760:	f1 f7       	brne	.-4      	; 0x375e <darkside+0xe4>
    3762:	9c 87       	std	Y+12, r25	; 0x0c
    3764:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3766:	89 85       	ldd	r24, Y+9	; 0x09
    3768:	9a 85       	ldd	r25, Y+10	; 0x0a
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	9a 87       	std	Y+10, r25	; 0x0a
    376e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3770:	89 85       	ldd	r24, Y+9	; 0x09
    3772:	9a 85       	ldd	r25, Y+10	; 0x0a
    3774:	89 2b       	or	r24, r25
    3776:	69 f7       	brne	.-38     	; 0x3752 <darkside+0xd8>
    3778:	14 c0       	rjmp	.+40     	; 0x37a2 <darkside+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    377a:	6d 81       	ldd	r22, Y+5	; 0x05
    377c:	7e 81       	ldd	r23, Y+6	; 0x06
    377e:	8f 81       	ldd	r24, Y+7	; 0x07
    3780:	98 85       	ldd	r25, Y+8	; 0x08
    3782:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__fixunssfsi>
    3786:	dc 01       	movw	r26, r24
    3788:	cb 01       	movw	r24, r22
    378a:	9a 87       	std	Y+10, r25	; 0x0a
    378c:	89 87       	std	Y+9, r24	; 0x09
    378e:	89 85       	ldd	r24, Y+9	; 0x09
    3790:	9a 85       	ldd	r25, Y+10	; 0x0a
    3792:	9e 87       	std	Y+14, r25	; 0x0e
    3794:	8d 87       	std	Y+13, r24	; 0x0d
    3796:	8d 85       	ldd	r24, Y+13	; 0x0d
    3798:	9e 85       	ldd	r25, Y+14	; 0x0e
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	f1 f7       	brne	.-4      	; 0x379a <darkside+0x120>
    379e:	9e 87       	std	Y+14, r25	; 0x0e
    37a0:	8d 87       	std	Y+13, r24	; 0x0d
		case COLLISION:		// COLLISION
			break;
		case STUCK:			// STUCK
			_delay_ms(1000);
			active_state = TACTIC_ONE;
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	80 93 22 01 	sts	0x0122, r24
			next_position = current_position;
    37a8:	80 91 7a 02 	lds	r24, 0x027A
    37ac:	80 93 7b 02 	sts	0x027B, r24

			break;
    37b0:	4e c0       	rjmp	.+156    	; 0x384e <darkside+0x1d4>
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    37b2:	80 91 7b 02 	lds	r24, 0x027B
    37b6:	80 93 7a 02 	sts	0x027A, r24
    37ba:	42 c0       	rjmp	.+132    	; 0x3840 <darkside+0x1c6>

				// send the gotoField and receive status
				odometry_status = odometry_move_to_position(&TACTIC_ONE_POSITION[current_position].point, TACTIC_ONE_POSITION[current_position].speed, TACTIC_ONE_POSITION[current_position].direction, TACTIC_ONE_POSITION[current_position].callback);
    37bc:	40 e0       	ldi	r20, 0x00	; 0
    37be:	50 e0       	ldi	r21, 0x00	; 0
    37c0:	80 91 7a 02 	lds	r24, 0x027A
    37c4:	28 2f       	mov	r18, r24
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	6b e0       	ldi	r22, 0x0B	; 11
    37ca:	62 9f       	mul	r22, r18
    37cc:	c0 01       	movw	r24, r0
    37ce:	63 9f       	mul	r22, r19
    37d0:	90 0d       	add	r25, r0
    37d2:	11 24       	eor	r1, r1
    37d4:	85 5d       	subi	r24, 0xD5	; 213
    37d6:	9e 4f       	sbci	r25, 0xFE	; 254
    37d8:	dc 01       	movw	r26, r24
    37da:	ec 91       	ld	r30, X
    37dc:	80 91 7a 02 	lds	r24, 0x027A
    37e0:	28 2f       	mov	r18, r24
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	6b e0       	ldi	r22, 0x0B	; 11
    37e6:	62 9f       	mul	r22, r18
    37e8:	c0 01       	movw	r24, r0
    37ea:	63 9f       	mul	r22, r19
    37ec:	90 0d       	add	r25, r0
    37ee:	11 24       	eor	r1, r1
    37f0:	86 5d       	subi	r24, 0xD6	; 214
    37f2:	9e 4f       	sbci	r25, 0xFE	; 254
    37f4:	dc 01       	movw	r26, r24
    37f6:	7c 91       	ld	r23, X
    37f8:	80 91 7a 02 	lds	r24, 0x027A
    37fc:	28 2f       	mov	r18, r24
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	6b e0       	ldi	r22, 0x0B	; 11
    3802:	62 9f       	mul	r22, r18
    3804:	c0 01       	movw	r24, r0
    3806:	63 9f       	mul	r22, r19
    3808:	90 0d       	add	r25, r0
    380a:	11 24       	eor	r1, r1
    380c:	8d 5d       	subi	r24, 0xDD	; 221
    380e:	9e 4f       	sbci	r25, 0xFE	; 254
    3810:	9a 01       	movw	r18, r20
    3812:	4e 2f       	mov	r20, r30
    3814:	67 2f       	mov	r22, r23
    3816:	0e 94 4e 10 	call	0x209c	; 0x209c <odometry_move_to_position>
    381a:	80 93 7f 02 	sts	0x027F, r24

				// if odometry fails set state to collision
				if(odometry_status == ODOMETRY_FAIL)
    381e:	80 91 7f 02 	lds	r24, 0x027F
    3822:	81 30       	cpi	r24, 0x01	; 1
    3824:	19 f4       	brne	.+6      	; 0x382c <darkside+0x1b2>
				{
					active_state = COLLISION;
    3826:	10 92 22 01 	sts	0x0122, r1
					break;
    382a:	11 c0       	rjmp	.+34     	; 0x384e <darkside+0x1d4>
				{

				}

				// last position
				if(current_position == (TACTIC_ONE_POSITION_COUNT - 1))
    382c:	80 91 7a 02 	lds	r24, 0x027A
    3830:	88 23       	and	r24, r24
    3832:	09 f4       	brne	.+2      	; 0x3836 <darkside+0x1bc>
				{
					while(1);
    3834:	ff cf       	rjmp	.-2      	; 0x3834 <darkside+0x1ba>
			active_state = TACTIC_ONE;
			next_position = current_position;

			break;
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    3836:	80 91 7a 02 	lds	r24, 0x027A
    383a:	8f 5f       	subi	r24, 0xFF	; 255
    383c:	80 93 7a 02 	sts	0x027A, r24
    3840:	80 91 7a 02 	lds	r24, 0x027A
    3844:	88 23       	and	r24, r24
    3846:	09 f4       	brne	.+2      	; 0x384a <darkside+0x1d0>
    3848:	b9 cf       	rjmp	.-142    	; 0x37bc <darkside+0x142>
    384a:	01 c0       	rjmp	.+2      	; 0x384e <darkside+0x1d4>
	while(1);*/

	while(1) {
		switch(active_state) {
		case COLLISION:		// COLLISION
			break;
    384c:	00 00       	nop
				{
					while(1);
				}
			}//end of for
		}//end of switch
	}//end of while
    384e:	2b cf       	rjmp	.-426    	; 0x36a6 <darkside+0x2c>

00003850 <main>:
#include "sides.h"
#include "sensors.h"
#include "debug.h"

int main()
{
    3850:	cf 93       	push	r28
    3852:	df 93       	push	r29
    3854:	cd b7       	in	r28, 0x3d	; 61
    3856:	de b7       	in	r29, 0x3e	; 62

	system_init();
    3858:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <system_init>

	while(1) {
		gpio_write_pin(debug_pins[0], ON);
    385c:	80 91 06 01 	lds	r24, 0x0106
    3860:	61 e0       	ldi	r22, 0x01	; 1
    3862:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <gpio_write_pin>
		gpio_write_pin(debug_pins[1], ON);
    3866:	80 91 07 01 	lds	r24, 0x0107
    386a:	61 e0       	ldi	r22, 0x01	; 1
    386c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <gpio_write_pin>
		gpio_write_pin(debug_pins[2], ON);
    3870:	80 91 08 01 	lds	r24, 0x0108
    3874:	61 e0       	ldi	r22, 0x01	; 1
    3876:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <gpio_write_pin>
	}
    387a:	f0 cf       	rjmp	.-32     	; 0x385c <main+0xc>

0000387c <__subsf3>:
    387c:	50 58       	subi	r21, 0x80	; 128

0000387e <__addsf3>:
    387e:	bb 27       	eor	r27, r27
    3880:	aa 27       	eor	r26, r26
    3882:	0e 94 56 1c 	call	0x38ac	; 0x38ac <__addsf3x>
    3886:	0c 94 c9 1d 	jmp	0x3b92	; 0x3b92 <__fp_round>
    388a:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__fp_pscA>
    388e:	38 f0       	brcs	.+14     	; 0x389e <__addsf3+0x20>
    3890:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__fp_pscB>
    3894:	20 f0       	brcs	.+8      	; 0x389e <__addsf3+0x20>
    3896:	39 f4       	brne	.+14     	; 0x38a6 <__addsf3+0x28>
    3898:	9f 3f       	cpi	r25, 0xFF	; 255
    389a:	19 f4       	brne	.+6      	; 0x38a2 <__addsf3+0x24>
    389c:	26 f4       	brtc	.+8      	; 0x38a6 <__addsf3+0x28>
    389e:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <__fp_nan>
    38a2:	0e f4       	brtc	.+2      	; 0x38a6 <__addsf3+0x28>
    38a4:	e0 95       	com	r30
    38a6:	e7 fb       	bst	r30, 7
    38a8:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__fp_inf>

000038ac <__addsf3x>:
    38ac:	e9 2f       	mov	r30, r25
    38ae:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__fp_split3>
    38b2:	58 f3       	brcs	.-42     	; 0x388a <__addsf3+0xc>
    38b4:	ba 17       	cp	r27, r26
    38b6:	62 07       	cpc	r22, r18
    38b8:	73 07       	cpc	r23, r19
    38ba:	84 07       	cpc	r24, r20
    38bc:	95 07       	cpc	r25, r21
    38be:	20 f0       	brcs	.+8      	; 0x38c8 <__addsf3x+0x1c>
    38c0:	79 f4       	brne	.+30     	; 0x38e0 <__addsf3x+0x34>
    38c2:	a6 f5       	brtc	.+104    	; 0x392c <__addsf3x+0x80>
    38c4:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__fp_zero>
    38c8:	0e f4       	brtc	.+2      	; 0x38cc <__addsf3x+0x20>
    38ca:	e0 95       	com	r30
    38cc:	0b 2e       	mov	r0, r27
    38ce:	ba 2f       	mov	r27, r26
    38d0:	a0 2d       	mov	r26, r0
    38d2:	0b 01       	movw	r0, r22
    38d4:	b9 01       	movw	r22, r18
    38d6:	90 01       	movw	r18, r0
    38d8:	0c 01       	movw	r0, r24
    38da:	ca 01       	movw	r24, r20
    38dc:	a0 01       	movw	r20, r0
    38de:	11 24       	eor	r1, r1
    38e0:	ff 27       	eor	r31, r31
    38e2:	59 1b       	sub	r21, r25
    38e4:	99 f0       	breq	.+38     	; 0x390c <__addsf3x+0x60>
    38e6:	59 3f       	cpi	r21, 0xF9	; 249
    38e8:	50 f4       	brcc	.+20     	; 0x38fe <__addsf3x+0x52>
    38ea:	50 3e       	cpi	r21, 0xE0	; 224
    38ec:	68 f1       	brcs	.+90     	; 0x3948 <__addsf3x+0x9c>
    38ee:	1a 16       	cp	r1, r26
    38f0:	f0 40       	sbci	r31, 0x00	; 0
    38f2:	a2 2f       	mov	r26, r18
    38f4:	23 2f       	mov	r18, r19
    38f6:	34 2f       	mov	r19, r20
    38f8:	44 27       	eor	r20, r20
    38fa:	58 5f       	subi	r21, 0xF8	; 248
    38fc:	f3 cf       	rjmp	.-26     	; 0x38e4 <__addsf3x+0x38>
    38fe:	46 95       	lsr	r20
    3900:	37 95       	ror	r19
    3902:	27 95       	ror	r18
    3904:	a7 95       	ror	r26
    3906:	f0 40       	sbci	r31, 0x00	; 0
    3908:	53 95       	inc	r21
    390a:	c9 f7       	brne	.-14     	; 0x38fe <__addsf3x+0x52>
    390c:	7e f4       	brtc	.+30     	; 0x392c <__addsf3x+0x80>
    390e:	1f 16       	cp	r1, r31
    3910:	ba 0b       	sbc	r27, r26
    3912:	62 0b       	sbc	r22, r18
    3914:	73 0b       	sbc	r23, r19
    3916:	84 0b       	sbc	r24, r20
    3918:	ba f0       	brmi	.+46     	; 0x3948 <__addsf3x+0x9c>
    391a:	91 50       	subi	r25, 0x01	; 1
    391c:	a1 f0       	breq	.+40     	; 0x3946 <__addsf3x+0x9a>
    391e:	ff 0f       	add	r31, r31
    3920:	bb 1f       	adc	r27, r27
    3922:	66 1f       	adc	r22, r22
    3924:	77 1f       	adc	r23, r23
    3926:	88 1f       	adc	r24, r24
    3928:	c2 f7       	brpl	.-16     	; 0x391a <__addsf3x+0x6e>
    392a:	0e c0       	rjmp	.+28     	; 0x3948 <__addsf3x+0x9c>
    392c:	ba 0f       	add	r27, r26
    392e:	62 1f       	adc	r22, r18
    3930:	73 1f       	adc	r23, r19
    3932:	84 1f       	adc	r24, r20
    3934:	48 f4       	brcc	.+18     	; 0x3948 <__addsf3x+0x9c>
    3936:	87 95       	ror	r24
    3938:	77 95       	ror	r23
    393a:	67 95       	ror	r22
    393c:	b7 95       	ror	r27
    393e:	f7 95       	ror	r31
    3940:	9e 3f       	cpi	r25, 0xFE	; 254
    3942:	08 f0       	brcs	.+2      	; 0x3946 <__addsf3x+0x9a>
    3944:	b0 cf       	rjmp	.-160    	; 0x38a6 <__addsf3+0x28>
    3946:	93 95       	inc	r25
    3948:	88 0f       	add	r24, r24
    394a:	08 f0       	brcs	.+2      	; 0x394e <__addsf3x+0xa2>
    394c:	99 27       	eor	r25, r25
    394e:	ee 0f       	add	r30, r30
    3950:	97 95       	ror	r25
    3952:	87 95       	ror	r24
    3954:	08 95       	ret

00003956 <__cmpsf2>:
    3956:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__fp_cmp>
    395a:	08 f4       	brcc	.+2      	; 0x395e <__cmpsf2+0x8>
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	08 95       	ret

00003960 <__divsf3>:
    3960:	0e 94 c4 1c 	call	0x3988	; 0x3988 <__divsf3x>
    3964:	0c 94 c9 1d 	jmp	0x3b92	; 0x3b92 <__fp_round>
    3968:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__fp_pscB>
    396c:	58 f0       	brcs	.+22     	; 0x3984 <__divsf3+0x24>
    396e:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__fp_pscA>
    3972:	40 f0       	brcs	.+16     	; 0x3984 <__divsf3+0x24>
    3974:	29 f4       	brne	.+10     	; 0x3980 <__divsf3+0x20>
    3976:	5f 3f       	cpi	r21, 0xFF	; 255
    3978:	29 f0       	breq	.+10     	; 0x3984 <__divsf3+0x24>
    397a:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__fp_inf>
    397e:	51 11       	cpse	r21, r1
    3980:	0c 94 fd 1d 	jmp	0x3bfa	; 0x3bfa <__fp_szero>
    3984:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <__fp_nan>

00003988 <__divsf3x>:
    3988:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__fp_split3>
    398c:	68 f3       	brcs	.-38     	; 0x3968 <__divsf3+0x8>

0000398e <__divsf3_pse>:
    398e:	99 23       	and	r25, r25
    3990:	b1 f3       	breq	.-20     	; 0x397e <__divsf3+0x1e>
    3992:	55 23       	and	r21, r21
    3994:	91 f3       	breq	.-28     	; 0x397a <__divsf3+0x1a>
    3996:	95 1b       	sub	r25, r21
    3998:	55 0b       	sbc	r21, r21
    399a:	bb 27       	eor	r27, r27
    399c:	aa 27       	eor	r26, r26
    399e:	62 17       	cp	r22, r18
    39a0:	73 07       	cpc	r23, r19
    39a2:	84 07       	cpc	r24, r20
    39a4:	38 f0       	brcs	.+14     	; 0x39b4 <__divsf3_pse+0x26>
    39a6:	9f 5f       	subi	r25, 0xFF	; 255
    39a8:	5f 4f       	sbci	r21, 0xFF	; 255
    39aa:	22 0f       	add	r18, r18
    39ac:	33 1f       	adc	r19, r19
    39ae:	44 1f       	adc	r20, r20
    39b0:	aa 1f       	adc	r26, r26
    39b2:	a9 f3       	breq	.-22     	; 0x399e <__divsf3_pse+0x10>
    39b4:	35 d0       	rcall	.+106    	; 0x3a20 <__divsf3_pse+0x92>
    39b6:	0e 2e       	mov	r0, r30
    39b8:	3a f0       	brmi	.+14     	; 0x39c8 <__divsf3_pse+0x3a>
    39ba:	e0 e8       	ldi	r30, 0x80	; 128
    39bc:	32 d0       	rcall	.+100    	; 0x3a22 <__divsf3_pse+0x94>
    39be:	91 50       	subi	r25, 0x01	; 1
    39c0:	50 40       	sbci	r21, 0x00	; 0
    39c2:	e6 95       	lsr	r30
    39c4:	00 1c       	adc	r0, r0
    39c6:	ca f7       	brpl	.-14     	; 0x39ba <__divsf3_pse+0x2c>
    39c8:	2b d0       	rcall	.+86     	; 0x3a20 <__divsf3_pse+0x92>
    39ca:	fe 2f       	mov	r31, r30
    39cc:	29 d0       	rcall	.+82     	; 0x3a20 <__divsf3_pse+0x92>
    39ce:	66 0f       	add	r22, r22
    39d0:	77 1f       	adc	r23, r23
    39d2:	88 1f       	adc	r24, r24
    39d4:	bb 1f       	adc	r27, r27
    39d6:	26 17       	cp	r18, r22
    39d8:	37 07       	cpc	r19, r23
    39da:	48 07       	cpc	r20, r24
    39dc:	ab 07       	cpc	r26, r27
    39de:	b0 e8       	ldi	r27, 0x80	; 128
    39e0:	09 f0       	breq	.+2      	; 0x39e4 <__divsf3_pse+0x56>
    39e2:	bb 0b       	sbc	r27, r27
    39e4:	80 2d       	mov	r24, r0
    39e6:	bf 01       	movw	r22, r30
    39e8:	ff 27       	eor	r31, r31
    39ea:	93 58       	subi	r25, 0x83	; 131
    39ec:	5f 4f       	sbci	r21, 0xFF	; 255
    39ee:	3a f0       	brmi	.+14     	; 0x39fe <__divsf3_pse+0x70>
    39f0:	9e 3f       	cpi	r25, 0xFE	; 254
    39f2:	51 05       	cpc	r21, r1
    39f4:	78 f0       	brcs	.+30     	; 0x3a14 <__divsf3_pse+0x86>
    39f6:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__fp_inf>
    39fa:	0c 94 fd 1d 	jmp	0x3bfa	; 0x3bfa <__fp_szero>
    39fe:	5f 3f       	cpi	r21, 0xFF	; 255
    3a00:	e4 f3       	brlt	.-8      	; 0x39fa <__divsf3_pse+0x6c>
    3a02:	98 3e       	cpi	r25, 0xE8	; 232
    3a04:	d4 f3       	brlt	.-12     	; 0x39fa <__divsf3_pse+0x6c>
    3a06:	86 95       	lsr	r24
    3a08:	77 95       	ror	r23
    3a0a:	67 95       	ror	r22
    3a0c:	b7 95       	ror	r27
    3a0e:	f7 95       	ror	r31
    3a10:	9f 5f       	subi	r25, 0xFF	; 255
    3a12:	c9 f7       	brne	.-14     	; 0x3a06 <__divsf3_pse+0x78>
    3a14:	88 0f       	add	r24, r24
    3a16:	91 1d       	adc	r25, r1
    3a18:	96 95       	lsr	r25
    3a1a:	87 95       	ror	r24
    3a1c:	97 f9       	bld	r25, 7
    3a1e:	08 95       	ret
    3a20:	e1 e0       	ldi	r30, 0x01	; 1
    3a22:	66 0f       	add	r22, r22
    3a24:	77 1f       	adc	r23, r23
    3a26:	88 1f       	adc	r24, r24
    3a28:	bb 1f       	adc	r27, r27
    3a2a:	62 17       	cp	r22, r18
    3a2c:	73 07       	cpc	r23, r19
    3a2e:	84 07       	cpc	r24, r20
    3a30:	ba 07       	cpc	r27, r26
    3a32:	20 f0       	brcs	.+8      	; 0x3a3c <__divsf3_pse+0xae>
    3a34:	62 1b       	sub	r22, r18
    3a36:	73 0b       	sbc	r23, r19
    3a38:	84 0b       	sbc	r24, r20
    3a3a:	ba 0b       	sbc	r27, r26
    3a3c:	ee 1f       	adc	r30, r30
    3a3e:	88 f7       	brcc	.-30     	; 0x3a22 <__divsf3_pse+0x94>
    3a40:	e0 95       	com	r30
    3a42:	08 95       	ret

00003a44 <__fixunssfsi>:
    3a44:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__fp_splitA>
    3a48:	88 f0       	brcs	.+34     	; 0x3a6c <__fixunssfsi+0x28>
    3a4a:	9f 57       	subi	r25, 0x7F	; 127
    3a4c:	98 f0       	brcs	.+38     	; 0x3a74 <__fixunssfsi+0x30>
    3a4e:	b9 2f       	mov	r27, r25
    3a50:	99 27       	eor	r25, r25
    3a52:	b7 51       	subi	r27, 0x17	; 23
    3a54:	b0 f0       	brcs	.+44     	; 0x3a82 <__fixunssfsi+0x3e>
    3a56:	e1 f0       	breq	.+56     	; 0x3a90 <__fixunssfsi+0x4c>
    3a58:	66 0f       	add	r22, r22
    3a5a:	77 1f       	adc	r23, r23
    3a5c:	88 1f       	adc	r24, r24
    3a5e:	99 1f       	adc	r25, r25
    3a60:	1a f0       	brmi	.+6      	; 0x3a68 <__fixunssfsi+0x24>
    3a62:	ba 95       	dec	r27
    3a64:	c9 f7       	brne	.-14     	; 0x3a58 <__fixunssfsi+0x14>
    3a66:	14 c0       	rjmp	.+40     	; 0x3a90 <__fixunssfsi+0x4c>
    3a68:	b1 30       	cpi	r27, 0x01	; 1
    3a6a:	91 f0       	breq	.+36     	; 0x3a90 <__fixunssfsi+0x4c>
    3a6c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <__fp_zero>
    3a70:	b1 e0       	ldi	r27, 0x01	; 1
    3a72:	08 95       	ret
    3a74:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__fp_zero>
    3a78:	67 2f       	mov	r22, r23
    3a7a:	78 2f       	mov	r23, r24
    3a7c:	88 27       	eor	r24, r24
    3a7e:	b8 5f       	subi	r27, 0xF8	; 248
    3a80:	39 f0       	breq	.+14     	; 0x3a90 <__fixunssfsi+0x4c>
    3a82:	b9 3f       	cpi	r27, 0xF9	; 249
    3a84:	cc f3       	brlt	.-14     	; 0x3a78 <__fixunssfsi+0x34>
    3a86:	86 95       	lsr	r24
    3a88:	77 95       	ror	r23
    3a8a:	67 95       	ror	r22
    3a8c:	b3 95       	inc	r27
    3a8e:	d9 f7       	brne	.-10     	; 0x3a86 <__fixunssfsi+0x42>
    3a90:	3e f4       	brtc	.+14     	; 0x3aa0 <__fixunssfsi+0x5c>
    3a92:	90 95       	com	r25
    3a94:	80 95       	com	r24
    3a96:	70 95       	com	r23
    3a98:	61 95       	neg	r22
    3a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a9c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa0:	08 95       	ret

00003aa2 <__floatunsisf>:
    3aa2:	e8 94       	clt
    3aa4:	09 c0       	rjmp	.+18     	; 0x3ab8 <__floatsisf+0x12>

00003aa6 <__floatsisf>:
    3aa6:	97 fb       	bst	r25, 7
    3aa8:	3e f4       	brtc	.+14     	; 0x3ab8 <__floatsisf+0x12>
    3aaa:	90 95       	com	r25
    3aac:	80 95       	com	r24
    3aae:	70 95       	com	r23
    3ab0:	61 95       	neg	r22
    3ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab4:	8f 4f       	sbci	r24, 0xFF	; 255
    3ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab8:	99 23       	and	r25, r25
    3aba:	a9 f0       	breq	.+42     	; 0x3ae6 <__floatsisf+0x40>
    3abc:	f9 2f       	mov	r31, r25
    3abe:	96 e9       	ldi	r25, 0x96	; 150
    3ac0:	bb 27       	eor	r27, r27
    3ac2:	93 95       	inc	r25
    3ac4:	f6 95       	lsr	r31
    3ac6:	87 95       	ror	r24
    3ac8:	77 95       	ror	r23
    3aca:	67 95       	ror	r22
    3acc:	b7 95       	ror	r27
    3ace:	f1 11       	cpse	r31, r1
    3ad0:	f8 cf       	rjmp	.-16     	; 0x3ac2 <__floatsisf+0x1c>
    3ad2:	fa f4       	brpl	.+62     	; 0x3b12 <__floatsisf+0x6c>
    3ad4:	bb 0f       	add	r27, r27
    3ad6:	11 f4       	brne	.+4      	; 0x3adc <__floatsisf+0x36>
    3ad8:	60 ff       	sbrs	r22, 0
    3ada:	1b c0       	rjmp	.+54     	; 0x3b12 <__floatsisf+0x6c>
    3adc:	6f 5f       	subi	r22, 0xFF	; 255
    3ade:	7f 4f       	sbci	r23, 0xFF	; 255
    3ae0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae4:	16 c0       	rjmp	.+44     	; 0x3b12 <__floatsisf+0x6c>
    3ae6:	88 23       	and	r24, r24
    3ae8:	11 f0       	breq	.+4      	; 0x3aee <__floatsisf+0x48>
    3aea:	96 e9       	ldi	r25, 0x96	; 150
    3aec:	11 c0       	rjmp	.+34     	; 0x3b10 <__floatsisf+0x6a>
    3aee:	77 23       	and	r23, r23
    3af0:	21 f0       	breq	.+8      	; 0x3afa <__floatsisf+0x54>
    3af2:	9e e8       	ldi	r25, 0x8E	; 142
    3af4:	87 2f       	mov	r24, r23
    3af6:	76 2f       	mov	r23, r22
    3af8:	05 c0       	rjmp	.+10     	; 0x3b04 <__floatsisf+0x5e>
    3afa:	66 23       	and	r22, r22
    3afc:	71 f0       	breq	.+28     	; 0x3b1a <__floatsisf+0x74>
    3afe:	96 e8       	ldi	r25, 0x86	; 134
    3b00:	86 2f       	mov	r24, r22
    3b02:	70 e0       	ldi	r23, 0x00	; 0
    3b04:	60 e0       	ldi	r22, 0x00	; 0
    3b06:	2a f0       	brmi	.+10     	; 0x3b12 <__floatsisf+0x6c>
    3b08:	9a 95       	dec	r25
    3b0a:	66 0f       	add	r22, r22
    3b0c:	77 1f       	adc	r23, r23
    3b0e:	88 1f       	adc	r24, r24
    3b10:	da f7       	brpl	.-10     	; 0x3b08 <__floatsisf+0x62>
    3b12:	88 0f       	add	r24, r24
    3b14:	96 95       	lsr	r25
    3b16:	87 95       	ror	r24
    3b18:	97 f9       	bld	r25, 7
    3b1a:	08 95       	ret

00003b1c <__fp_cmp>:
    3b1c:	99 0f       	add	r25, r25
    3b1e:	00 08       	sbc	r0, r0
    3b20:	55 0f       	add	r21, r21
    3b22:	aa 0b       	sbc	r26, r26
    3b24:	e0 e8       	ldi	r30, 0x80	; 128
    3b26:	fe ef       	ldi	r31, 0xFE	; 254
    3b28:	16 16       	cp	r1, r22
    3b2a:	17 06       	cpc	r1, r23
    3b2c:	e8 07       	cpc	r30, r24
    3b2e:	f9 07       	cpc	r31, r25
    3b30:	c0 f0       	brcs	.+48     	; 0x3b62 <__fp_cmp+0x46>
    3b32:	12 16       	cp	r1, r18
    3b34:	13 06       	cpc	r1, r19
    3b36:	e4 07       	cpc	r30, r20
    3b38:	f5 07       	cpc	r31, r21
    3b3a:	98 f0       	brcs	.+38     	; 0x3b62 <__fp_cmp+0x46>
    3b3c:	62 1b       	sub	r22, r18
    3b3e:	73 0b       	sbc	r23, r19
    3b40:	84 0b       	sbc	r24, r20
    3b42:	95 0b       	sbc	r25, r21
    3b44:	39 f4       	brne	.+14     	; 0x3b54 <__fp_cmp+0x38>
    3b46:	0a 26       	eor	r0, r26
    3b48:	61 f0       	breq	.+24     	; 0x3b62 <__fp_cmp+0x46>
    3b4a:	23 2b       	or	r18, r19
    3b4c:	24 2b       	or	r18, r20
    3b4e:	25 2b       	or	r18, r21
    3b50:	21 f4       	brne	.+8      	; 0x3b5a <__fp_cmp+0x3e>
    3b52:	08 95       	ret
    3b54:	0a 26       	eor	r0, r26
    3b56:	09 f4       	brne	.+2      	; 0x3b5a <__fp_cmp+0x3e>
    3b58:	a1 40       	sbci	r26, 0x01	; 1
    3b5a:	a6 95       	lsr	r26
    3b5c:	8f ef       	ldi	r24, 0xFF	; 255
    3b5e:	81 1d       	adc	r24, r1
    3b60:	81 1d       	adc	r24, r1
    3b62:	08 95       	ret

00003b64 <__fp_inf>:
    3b64:	97 f9       	bld	r25, 7
    3b66:	9f 67       	ori	r25, 0x7F	; 127
    3b68:	80 e8       	ldi	r24, 0x80	; 128
    3b6a:	70 e0       	ldi	r23, 0x00	; 0
    3b6c:	60 e0       	ldi	r22, 0x00	; 0
    3b6e:	08 95       	ret

00003b70 <__fp_nan>:
    3b70:	9f ef       	ldi	r25, 0xFF	; 255
    3b72:	80 ec       	ldi	r24, 0xC0	; 192
    3b74:	08 95       	ret

00003b76 <__fp_pscA>:
    3b76:	00 24       	eor	r0, r0
    3b78:	0a 94       	dec	r0
    3b7a:	16 16       	cp	r1, r22
    3b7c:	17 06       	cpc	r1, r23
    3b7e:	18 06       	cpc	r1, r24
    3b80:	09 06       	cpc	r0, r25
    3b82:	08 95       	ret

00003b84 <__fp_pscB>:
    3b84:	00 24       	eor	r0, r0
    3b86:	0a 94       	dec	r0
    3b88:	12 16       	cp	r1, r18
    3b8a:	13 06       	cpc	r1, r19
    3b8c:	14 06       	cpc	r1, r20
    3b8e:	05 06       	cpc	r0, r21
    3b90:	08 95       	ret

00003b92 <__fp_round>:
    3b92:	09 2e       	mov	r0, r25
    3b94:	03 94       	inc	r0
    3b96:	00 0c       	add	r0, r0
    3b98:	11 f4       	brne	.+4      	; 0x3b9e <__fp_round+0xc>
    3b9a:	88 23       	and	r24, r24
    3b9c:	52 f0       	brmi	.+20     	; 0x3bb2 <__fp_round+0x20>
    3b9e:	bb 0f       	add	r27, r27
    3ba0:	40 f4       	brcc	.+16     	; 0x3bb2 <__fp_round+0x20>
    3ba2:	bf 2b       	or	r27, r31
    3ba4:	11 f4       	brne	.+4      	; 0x3baa <__fp_round+0x18>
    3ba6:	60 ff       	sbrs	r22, 0
    3ba8:	04 c0       	rjmp	.+8      	; 0x3bb2 <__fp_round+0x20>
    3baa:	6f 5f       	subi	r22, 0xFF	; 255
    3bac:	7f 4f       	sbci	r23, 0xFF	; 255
    3bae:	8f 4f       	sbci	r24, 0xFF	; 255
    3bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb2:	08 95       	ret

00003bb4 <__fp_split3>:
    3bb4:	57 fd       	sbrc	r21, 7
    3bb6:	90 58       	subi	r25, 0x80	; 128
    3bb8:	44 0f       	add	r20, r20
    3bba:	55 1f       	adc	r21, r21
    3bbc:	59 f0       	breq	.+22     	; 0x3bd4 <__fp_splitA+0x10>
    3bbe:	5f 3f       	cpi	r21, 0xFF	; 255
    3bc0:	71 f0       	breq	.+28     	; 0x3bde <__fp_splitA+0x1a>
    3bc2:	47 95       	ror	r20

00003bc4 <__fp_splitA>:
    3bc4:	88 0f       	add	r24, r24
    3bc6:	97 fb       	bst	r25, 7
    3bc8:	99 1f       	adc	r25, r25
    3bca:	61 f0       	breq	.+24     	; 0x3be4 <__fp_splitA+0x20>
    3bcc:	9f 3f       	cpi	r25, 0xFF	; 255
    3bce:	79 f0       	breq	.+30     	; 0x3bee <__fp_splitA+0x2a>
    3bd0:	87 95       	ror	r24
    3bd2:	08 95       	ret
    3bd4:	12 16       	cp	r1, r18
    3bd6:	13 06       	cpc	r1, r19
    3bd8:	14 06       	cpc	r1, r20
    3bda:	55 1f       	adc	r21, r21
    3bdc:	f2 cf       	rjmp	.-28     	; 0x3bc2 <__fp_split3+0xe>
    3bde:	46 95       	lsr	r20
    3be0:	f1 df       	rcall	.-30     	; 0x3bc4 <__fp_splitA>
    3be2:	08 c0       	rjmp	.+16     	; 0x3bf4 <__fp_splitA+0x30>
    3be4:	16 16       	cp	r1, r22
    3be6:	17 06       	cpc	r1, r23
    3be8:	18 06       	cpc	r1, r24
    3bea:	99 1f       	adc	r25, r25
    3bec:	f1 cf       	rjmp	.-30     	; 0x3bd0 <__fp_splitA+0xc>
    3bee:	86 95       	lsr	r24
    3bf0:	71 05       	cpc	r23, r1
    3bf2:	61 05       	cpc	r22, r1
    3bf4:	08 94       	sec
    3bf6:	08 95       	ret

00003bf8 <__fp_zero>:
    3bf8:	e8 94       	clt

00003bfa <__fp_szero>:
    3bfa:	bb 27       	eor	r27, r27
    3bfc:	66 27       	eor	r22, r22
    3bfe:	77 27       	eor	r23, r23
    3c00:	cb 01       	movw	r24, r22
    3c02:	97 f9       	bld	r25, 7
    3c04:	08 95       	ret

00003c06 <__gesf2>:
    3c06:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__fp_cmp>
    3c0a:	08 f4       	brcc	.+2      	; 0x3c0e <__gesf2+0x8>
    3c0c:	8f ef       	ldi	r24, 0xFF	; 255
    3c0e:	08 95       	ret

00003c10 <__mulsf3>:
    3c10:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__mulsf3x>
    3c14:	0c 94 c9 1d 	jmp	0x3b92	; 0x3b92 <__fp_round>
    3c18:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__fp_pscA>
    3c1c:	38 f0       	brcs	.+14     	; 0x3c2c <__mulsf3+0x1c>
    3c1e:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__fp_pscB>
    3c22:	20 f0       	brcs	.+8      	; 0x3c2c <__mulsf3+0x1c>
    3c24:	95 23       	and	r25, r21
    3c26:	11 f0       	breq	.+4      	; 0x3c2c <__mulsf3+0x1c>
    3c28:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__fp_inf>
    3c2c:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <__fp_nan>
    3c30:	11 24       	eor	r1, r1
    3c32:	0c 94 fd 1d 	jmp	0x3bfa	; 0x3bfa <__fp_szero>

00003c36 <__mulsf3x>:
    3c36:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__fp_split3>
    3c3a:	70 f3       	brcs	.-36     	; 0x3c18 <__mulsf3+0x8>

00003c3c <__mulsf3_pse>:
    3c3c:	95 9f       	mul	r25, r21
    3c3e:	c1 f3       	breq	.-16     	; 0x3c30 <__mulsf3+0x20>
    3c40:	95 0f       	add	r25, r21
    3c42:	50 e0       	ldi	r21, 0x00	; 0
    3c44:	55 1f       	adc	r21, r21
    3c46:	62 9f       	mul	r22, r18
    3c48:	f0 01       	movw	r30, r0
    3c4a:	72 9f       	mul	r23, r18
    3c4c:	bb 27       	eor	r27, r27
    3c4e:	f0 0d       	add	r31, r0
    3c50:	b1 1d       	adc	r27, r1
    3c52:	63 9f       	mul	r22, r19
    3c54:	aa 27       	eor	r26, r26
    3c56:	f0 0d       	add	r31, r0
    3c58:	b1 1d       	adc	r27, r1
    3c5a:	aa 1f       	adc	r26, r26
    3c5c:	64 9f       	mul	r22, r20
    3c5e:	66 27       	eor	r22, r22
    3c60:	b0 0d       	add	r27, r0
    3c62:	a1 1d       	adc	r26, r1
    3c64:	66 1f       	adc	r22, r22
    3c66:	82 9f       	mul	r24, r18
    3c68:	22 27       	eor	r18, r18
    3c6a:	b0 0d       	add	r27, r0
    3c6c:	a1 1d       	adc	r26, r1
    3c6e:	62 1f       	adc	r22, r18
    3c70:	73 9f       	mul	r23, r19
    3c72:	b0 0d       	add	r27, r0
    3c74:	a1 1d       	adc	r26, r1
    3c76:	62 1f       	adc	r22, r18
    3c78:	83 9f       	mul	r24, r19
    3c7a:	a0 0d       	add	r26, r0
    3c7c:	61 1d       	adc	r22, r1
    3c7e:	22 1f       	adc	r18, r18
    3c80:	74 9f       	mul	r23, r20
    3c82:	33 27       	eor	r19, r19
    3c84:	a0 0d       	add	r26, r0
    3c86:	61 1d       	adc	r22, r1
    3c88:	23 1f       	adc	r18, r19
    3c8a:	84 9f       	mul	r24, r20
    3c8c:	60 0d       	add	r22, r0
    3c8e:	21 1d       	adc	r18, r1
    3c90:	82 2f       	mov	r24, r18
    3c92:	76 2f       	mov	r23, r22
    3c94:	6a 2f       	mov	r22, r26
    3c96:	11 24       	eor	r1, r1
    3c98:	9f 57       	subi	r25, 0x7F	; 127
    3c9a:	50 40       	sbci	r21, 0x00	; 0
    3c9c:	9a f0       	brmi	.+38     	; 0x3cc4 <__mulsf3_pse+0x88>
    3c9e:	f1 f0       	breq	.+60     	; 0x3cdc <__mulsf3_pse+0xa0>
    3ca0:	88 23       	and	r24, r24
    3ca2:	4a f0       	brmi	.+18     	; 0x3cb6 <__mulsf3_pse+0x7a>
    3ca4:	ee 0f       	add	r30, r30
    3ca6:	ff 1f       	adc	r31, r31
    3ca8:	bb 1f       	adc	r27, r27
    3caa:	66 1f       	adc	r22, r22
    3cac:	77 1f       	adc	r23, r23
    3cae:	88 1f       	adc	r24, r24
    3cb0:	91 50       	subi	r25, 0x01	; 1
    3cb2:	50 40       	sbci	r21, 0x00	; 0
    3cb4:	a9 f7       	brne	.-22     	; 0x3ca0 <__mulsf3_pse+0x64>
    3cb6:	9e 3f       	cpi	r25, 0xFE	; 254
    3cb8:	51 05       	cpc	r21, r1
    3cba:	80 f0       	brcs	.+32     	; 0x3cdc <__mulsf3_pse+0xa0>
    3cbc:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__fp_inf>
    3cc0:	0c 94 fd 1d 	jmp	0x3bfa	; 0x3bfa <__fp_szero>
    3cc4:	5f 3f       	cpi	r21, 0xFF	; 255
    3cc6:	e4 f3       	brlt	.-8      	; 0x3cc0 <__mulsf3_pse+0x84>
    3cc8:	98 3e       	cpi	r25, 0xE8	; 232
    3cca:	d4 f3       	brlt	.-12     	; 0x3cc0 <__mulsf3_pse+0x84>
    3ccc:	86 95       	lsr	r24
    3cce:	77 95       	ror	r23
    3cd0:	67 95       	ror	r22
    3cd2:	b7 95       	ror	r27
    3cd4:	f7 95       	ror	r31
    3cd6:	e7 95       	ror	r30
    3cd8:	9f 5f       	subi	r25, 0xFF	; 255
    3cda:	c1 f7       	brne	.-16     	; 0x3ccc <__mulsf3_pse+0x90>
    3cdc:	fe 2b       	or	r31, r30
    3cde:	88 0f       	add	r24, r24
    3ce0:	91 1d       	adc	r25, r1
    3ce2:	96 95       	lsr	r25
    3ce4:	87 95       	ror	r24
    3ce6:	97 f9       	bld	r25, 7
    3ce8:	08 95       	ret

00003cea <calloc>:
    3cea:	0f 93       	push	r16
    3cec:	1f 93       	push	r17
    3cee:	cf 93       	push	r28
    3cf0:	df 93       	push	r29
    3cf2:	86 9f       	mul	r24, r22
    3cf4:	80 01       	movw	r16, r0
    3cf6:	87 9f       	mul	r24, r23
    3cf8:	10 0d       	add	r17, r0
    3cfa:	96 9f       	mul	r25, r22
    3cfc:	10 0d       	add	r17, r0
    3cfe:	11 24       	eor	r1, r1
    3d00:	c8 01       	movw	r24, r16
    3d02:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <malloc>
    3d06:	ec 01       	movw	r28, r24
    3d08:	00 97       	sbiw	r24, 0x00	; 0
    3d0a:	29 f0       	breq	.+10     	; 0x3d16 <calloc+0x2c>
    3d0c:	a8 01       	movw	r20, r16
    3d0e:	60 e0       	ldi	r22, 0x00	; 0
    3d10:	70 e0       	ldi	r23, 0x00	; 0
    3d12:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <memset>
    3d16:	ce 01       	movw	r24, r28
    3d18:	df 91       	pop	r29
    3d1a:	cf 91       	pop	r28
    3d1c:	1f 91       	pop	r17
    3d1e:	0f 91       	pop	r16
    3d20:	08 95       	ret

00003d22 <malloc>:
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	82 30       	cpi	r24, 0x02	; 2
    3d28:	91 05       	cpc	r25, r1
    3d2a:	10 f4       	brcc	.+4      	; 0x3d30 <malloc+0xe>
    3d2c:	82 e0       	ldi	r24, 0x02	; 2
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	e0 91 82 02 	lds	r30, 0x0282
    3d34:	f0 91 83 02 	lds	r31, 0x0283
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	c0 e0       	ldi	r28, 0x00	; 0
    3d3e:	d0 e0       	ldi	r29, 0x00	; 0
    3d40:	30 97       	sbiw	r30, 0x00	; 0
    3d42:	11 f1       	breq	.+68     	; 0x3d88 <malloc+0x66>
    3d44:	40 81       	ld	r20, Z
    3d46:	51 81       	ldd	r21, Z+1	; 0x01
    3d48:	48 17       	cp	r20, r24
    3d4a:	59 07       	cpc	r21, r25
    3d4c:	c0 f0       	brcs	.+48     	; 0x3d7e <malloc+0x5c>
    3d4e:	48 17       	cp	r20, r24
    3d50:	59 07       	cpc	r21, r25
    3d52:	61 f4       	brne	.+24     	; 0x3d6c <malloc+0x4a>
    3d54:	82 81       	ldd	r24, Z+2	; 0x02
    3d56:	93 81       	ldd	r25, Z+3	; 0x03
    3d58:	20 97       	sbiw	r28, 0x00	; 0
    3d5a:	19 f0       	breq	.+6      	; 0x3d62 <malloc+0x40>
    3d5c:	9b 83       	std	Y+3, r25	; 0x03
    3d5e:	8a 83       	std	Y+2, r24	; 0x02
    3d60:	2b c0       	rjmp	.+86     	; 0x3db8 <malloc+0x96>
    3d62:	90 93 83 02 	sts	0x0283, r25
    3d66:	80 93 82 02 	sts	0x0282, r24
    3d6a:	26 c0       	rjmp	.+76     	; 0x3db8 <malloc+0x96>
    3d6c:	21 15       	cp	r18, r1
    3d6e:	31 05       	cpc	r19, r1
    3d70:	19 f0       	breq	.+6      	; 0x3d78 <malloc+0x56>
    3d72:	42 17       	cp	r20, r18
    3d74:	53 07       	cpc	r21, r19
    3d76:	18 f4       	brcc	.+6      	; 0x3d7e <malloc+0x5c>
    3d78:	9a 01       	movw	r18, r20
    3d7a:	be 01       	movw	r22, r28
    3d7c:	df 01       	movw	r26, r30
    3d7e:	ef 01       	movw	r28, r30
    3d80:	02 80       	ldd	r0, Z+2	; 0x02
    3d82:	f3 81       	ldd	r31, Z+3	; 0x03
    3d84:	e0 2d       	mov	r30, r0
    3d86:	dc cf       	rjmp	.-72     	; 0x3d40 <malloc+0x1e>
    3d88:	21 15       	cp	r18, r1
    3d8a:	31 05       	cpc	r19, r1
    3d8c:	09 f1       	breq	.+66     	; 0x3dd0 <malloc+0xae>
    3d8e:	28 1b       	sub	r18, r24
    3d90:	39 0b       	sbc	r19, r25
    3d92:	24 30       	cpi	r18, 0x04	; 4
    3d94:	31 05       	cpc	r19, r1
    3d96:	90 f4       	brcc	.+36     	; 0x3dbc <malloc+0x9a>
    3d98:	12 96       	adiw	r26, 0x02	; 2
    3d9a:	8d 91       	ld	r24, X+
    3d9c:	9c 91       	ld	r25, X
    3d9e:	13 97       	sbiw	r26, 0x03	; 3
    3da0:	61 15       	cp	r22, r1
    3da2:	71 05       	cpc	r23, r1
    3da4:	21 f0       	breq	.+8      	; 0x3dae <malloc+0x8c>
    3da6:	fb 01       	movw	r30, r22
    3da8:	93 83       	std	Z+3, r25	; 0x03
    3daa:	82 83       	std	Z+2, r24	; 0x02
    3dac:	04 c0       	rjmp	.+8      	; 0x3db6 <malloc+0x94>
    3dae:	90 93 83 02 	sts	0x0283, r25
    3db2:	80 93 82 02 	sts	0x0282, r24
    3db6:	fd 01       	movw	r30, r26
    3db8:	32 96       	adiw	r30, 0x02	; 2
    3dba:	44 c0       	rjmp	.+136    	; 0x3e44 <malloc+0x122>
    3dbc:	fd 01       	movw	r30, r26
    3dbe:	e2 0f       	add	r30, r18
    3dc0:	f3 1f       	adc	r31, r19
    3dc2:	81 93       	st	Z+, r24
    3dc4:	91 93       	st	Z+, r25
    3dc6:	22 50       	subi	r18, 0x02	; 2
    3dc8:	31 09       	sbc	r19, r1
    3dca:	2d 93       	st	X+, r18
    3dcc:	3c 93       	st	X, r19
    3dce:	3a c0       	rjmp	.+116    	; 0x3e44 <malloc+0x122>
    3dd0:	20 91 80 02 	lds	r18, 0x0280
    3dd4:	30 91 81 02 	lds	r19, 0x0281
    3dd8:	23 2b       	or	r18, r19
    3dda:	41 f4       	brne	.+16     	; 0x3dec <malloc+0xca>
    3ddc:	20 91 02 01 	lds	r18, 0x0102
    3de0:	30 91 03 01 	lds	r19, 0x0103
    3de4:	30 93 81 02 	sts	0x0281, r19
    3de8:	20 93 80 02 	sts	0x0280, r18
    3dec:	20 91 00 01 	lds	r18, 0x0100
    3df0:	30 91 01 01 	lds	r19, 0x0101
    3df4:	21 15       	cp	r18, r1
    3df6:	31 05       	cpc	r19, r1
    3df8:	41 f4       	brne	.+16     	; 0x3e0a <malloc+0xe8>
    3dfa:	2d b7       	in	r18, 0x3d	; 61
    3dfc:	3e b7       	in	r19, 0x3e	; 62
    3dfe:	40 91 04 01 	lds	r20, 0x0104
    3e02:	50 91 05 01 	lds	r21, 0x0105
    3e06:	24 1b       	sub	r18, r20
    3e08:	35 0b       	sbc	r19, r21
    3e0a:	e0 91 80 02 	lds	r30, 0x0280
    3e0e:	f0 91 81 02 	lds	r31, 0x0281
    3e12:	e2 17       	cp	r30, r18
    3e14:	f3 07       	cpc	r31, r19
    3e16:	a0 f4       	brcc	.+40     	; 0x3e40 <malloc+0x11e>
    3e18:	2e 1b       	sub	r18, r30
    3e1a:	3f 0b       	sbc	r19, r31
    3e1c:	28 17       	cp	r18, r24
    3e1e:	39 07       	cpc	r19, r25
    3e20:	78 f0       	brcs	.+30     	; 0x3e40 <malloc+0x11e>
    3e22:	ac 01       	movw	r20, r24
    3e24:	4e 5f       	subi	r20, 0xFE	; 254
    3e26:	5f 4f       	sbci	r21, 0xFF	; 255
    3e28:	24 17       	cp	r18, r20
    3e2a:	35 07       	cpc	r19, r21
    3e2c:	48 f0       	brcs	.+18     	; 0x3e40 <malloc+0x11e>
    3e2e:	4e 0f       	add	r20, r30
    3e30:	5f 1f       	adc	r21, r31
    3e32:	50 93 81 02 	sts	0x0281, r21
    3e36:	40 93 80 02 	sts	0x0280, r20
    3e3a:	81 93       	st	Z+, r24
    3e3c:	91 93       	st	Z+, r25
    3e3e:	02 c0       	rjmp	.+4      	; 0x3e44 <malloc+0x122>
    3e40:	e0 e0       	ldi	r30, 0x00	; 0
    3e42:	f0 e0       	ldi	r31, 0x00	; 0
    3e44:	cf 01       	movw	r24, r30
    3e46:	df 91       	pop	r29
    3e48:	cf 91       	pop	r28
    3e4a:	08 95       	ret

00003e4c <free>:
    3e4c:	0f 93       	push	r16
    3e4e:	1f 93       	push	r17
    3e50:	cf 93       	push	r28
    3e52:	df 93       	push	r29
    3e54:	00 97       	sbiw	r24, 0x00	; 0
    3e56:	09 f4       	brne	.+2      	; 0x3e5a <free+0xe>
    3e58:	8c c0       	rjmp	.+280    	; 0x3f72 <free+0x126>
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	32 97       	sbiw	r30, 0x02	; 2
    3e5e:	13 82       	std	Z+3, r1	; 0x03
    3e60:	12 82       	std	Z+2, r1	; 0x02
    3e62:	00 91 82 02 	lds	r16, 0x0282
    3e66:	10 91 83 02 	lds	r17, 0x0283
    3e6a:	01 15       	cp	r16, r1
    3e6c:	11 05       	cpc	r17, r1
    3e6e:	81 f4       	brne	.+32     	; 0x3e90 <free+0x44>
    3e70:	20 81       	ld	r18, Z
    3e72:	31 81       	ldd	r19, Z+1	; 0x01
    3e74:	82 0f       	add	r24, r18
    3e76:	93 1f       	adc	r25, r19
    3e78:	20 91 80 02 	lds	r18, 0x0280
    3e7c:	30 91 81 02 	lds	r19, 0x0281
    3e80:	28 17       	cp	r18, r24
    3e82:	39 07       	cpc	r19, r25
    3e84:	79 f5       	brne	.+94     	; 0x3ee4 <free+0x98>
    3e86:	f0 93 81 02 	sts	0x0281, r31
    3e8a:	e0 93 80 02 	sts	0x0280, r30
    3e8e:	71 c0       	rjmp	.+226    	; 0x3f72 <free+0x126>
    3e90:	d8 01       	movw	r26, r16
    3e92:	40 e0       	ldi	r20, 0x00	; 0
    3e94:	50 e0       	ldi	r21, 0x00	; 0
    3e96:	ae 17       	cp	r26, r30
    3e98:	bf 07       	cpc	r27, r31
    3e9a:	50 f4       	brcc	.+20     	; 0x3eb0 <free+0x64>
    3e9c:	12 96       	adiw	r26, 0x02	; 2
    3e9e:	2d 91       	ld	r18, X+
    3ea0:	3c 91       	ld	r19, X
    3ea2:	13 97       	sbiw	r26, 0x03	; 3
    3ea4:	ad 01       	movw	r20, r26
    3ea6:	21 15       	cp	r18, r1
    3ea8:	31 05       	cpc	r19, r1
    3eaa:	09 f1       	breq	.+66     	; 0x3eee <free+0xa2>
    3eac:	d9 01       	movw	r26, r18
    3eae:	f3 cf       	rjmp	.-26     	; 0x3e96 <free+0x4a>
    3eb0:	9d 01       	movw	r18, r26
    3eb2:	da 01       	movw	r26, r20
    3eb4:	33 83       	std	Z+3, r19	; 0x03
    3eb6:	22 83       	std	Z+2, r18	; 0x02
    3eb8:	60 81       	ld	r22, Z
    3eba:	71 81       	ldd	r23, Z+1	; 0x01
    3ebc:	86 0f       	add	r24, r22
    3ebe:	97 1f       	adc	r25, r23
    3ec0:	82 17       	cp	r24, r18
    3ec2:	93 07       	cpc	r25, r19
    3ec4:	69 f4       	brne	.+26     	; 0x3ee0 <free+0x94>
    3ec6:	ec 01       	movw	r28, r24
    3ec8:	28 81       	ld	r18, Y
    3eca:	39 81       	ldd	r19, Y+1	; 0x01
    3ecc:	26 0f       	add	r18, r22
    3ece:	37 1f       	adc	r19, r23
    3ed0:	2e 5f       	subi	r18, 0xFE	; 254
    3ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed4:	31 83       	std	Z+1, r19	; 0x01
    3ed6:	20 83       	st	Z, r18
    3ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eda:	9b 81       	ldd	r25, Y+3	; 0x03
    3edc:	93 83       	std	Z+3, r25	; 0x03
    3ede:	82 83       	std	Z+2, r24	; 0x02
    3ee0:	45 2b       	or	r20, r21
    3ee2:	29 f4       	brne	.+10     	; 0x3eee <free+0xa2>
    3ee4:	f0 93 83 02 	sts	0x0283, r31
    3ee8:	e0 93 82 02 	sts	0x0282, r30
    3eec:	42 c0       	rjmp	.+132    	; 0x3f72 <free+0x126>
    3eee:	13 96       	adiw	r26, 0x03	; 3
    3ef0:	fc 93       	st	X, r31
    3ef2:	ee 93       	st	-X, r30
    3ef4:	12 97       	sbiw	r26, 0x02	; 2
    3ef6:	ed 01       	movw	r28, r26
    3ef8:	49 91       	ld	r20, Y+
    3efa:	59 91       	ld	r21, Y+
    3efc:	9e 01       	movw	r18, r28
    3efe:	24 0f       	add	r18, r20
    3f00:	35 1f       	adc	r19, r21
    3f02:	e2 17       	cp	r30, r18
    3f04:	f3 07       	cpc	r31, r19
    3f06:	71 f4       	brne	.+28     	; 0x3f24 <free+0xd8>
    3f08:	80 81       	ld	r24, Z
    3f0a:	91 81       	ldd	r25, Z+1	; 0x01
    3f0c:	84 0f       	add	r24, r20
    3f0e:	95 1f       	adc	r25, r21
    3f10:	02 96       	adiw	r24, 0x02	; 2
    3f12:	11 96       	adiw	r26, 0x01	; 1
    3f14:	9c 93       	st	X, r25
    3f16:	8e 93       	st	-X, r24
    3f18:	82 81       	ldd	r24, Z+2	; 0x02
    3f1a:	93 81       	ldd	r25, Z+3	; 0x03
    3f1c:	13 96       	adiw	r26, 0x03	; 3
    3f1e:	9c 93       	st	X, r25
    3f20:	8e 93       	st	-X, r24
    3f22:	12 97       	sbiw	r26, 0x02	; 2
    3f24:	e0 e0       	ldi	r30, 0x00	; 0
    3f26:	f0 e0       	ldi	r31, 0x00	; 0
    3f28:	d8 01       	movw	r26, r16
    3f2a:	12 96       	adiw	r26, 0x02	; 2
    3f2c:	8d 91       	ld	r24, X+
    3f2e:	9c 91       	ld	r25, X
    3f30:	13 97       	sbiw	r26, 0x03	; 3
    3f32:	00 97       	sbiw	r24, 0x00	; 0
    3f34:	19 f0       	breq	.+6      	; 0x3f3c <free+0xf0>
    3f36:	f8 01       	movw	r30, r16
    3f38:	8c 01       	movw	r16, r24
    3f3a:	f6 cf       	rjmp	.-20     	; 0x3f28 <free+0xdc>
    3f3c:	8d 91       	ld	r24, X+
    3f3e:	9c 91       	ld	r25, X
    3f40:	98 01       	movw	r18, r16
    3f42:	2e 5f       	subi	r18, 0xFE	; 254
    3f44:	3f 4f       	sbci	r19, 0xFF	; 255
    3f46:	82 0f       	add	r24, r18
    3f48:	93 1f       	adc	r25, r19
    3f4a:	20 91 80 02 	lds	r18, 0x0280
    3f4e:	30 91 81 02 	lds	r19, 0x0281
    3f52:	28 17       	cp	r18, r24
    3f54:	39 07       	cpc	r19, r25
    3f56:	69 f4       	brne	.+26     	; 0x3f72 <free+0x126>
    3f58:	30 97       	sbiw	r30, 0x00	; 0
    3f5a:	29 f4       	brne	.+10     	; 0x3f66 <free+0x11a>
    3f5c:	10 92 83 02 	sts	0x0283, r1
    3f60:	10 92 82 02 	sts	0x0282, r1
    3f64:	02 c0       	rjmp	.+4      	; 0x3f6a <free+0x11e>
    3f66:	13 82       	std	Z+3, r1	; 0x03
    3f68:	12 82       	std	Z+2, r1	; 0x02
    3f6a:	10 93 81 02 	sts	0x0281, r17
    3f6e:	00 93 80 02 	sts	0x0280, r16
    3f72:	df 91       	pop	r29
    3f74:	cf 91       	pop	r28
    3f76:	1f 91       	pop	r17
    3f78:	0f 91       	pop	r16
    3f7a:	08 95       	ret

00003f7c <memset>:
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	01 c0       	rjmp	.+2      	; 0x3f82 <memset+0x6>
    3f80:	6d 93       	st	X+, r22
    3f82:	41 50       	subi	r20, 0x01	; 1
    3f84:	50 40       	sbci	r21, 0x00	; 0
    3f86:	e0 f7       	brcc	.-8      	; 0x3f80 <memset+0x4>
    3f88:	08 95       	ret

00003f8a <_exit>:
    3f8a:	f8 94       	cli

00003f8c <__stop_program>:
    3f8c:	ff cf       	rjmp	.-2      	; 0x3f8c <__stop_program>
