
EP_Framework_Atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00002c78  00002d0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000120  0080010a  0080010a  00002d16  2**0
                  ALLOC
  3 .stab         0000465c  00000000  00000000  00002d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b3a  00000000  00000000  00007374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008eae  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008ec0  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <__vector_23>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 27 10 	jmp	0x204e	; 0x204e <__vector_32>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <__vector_34>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e8 e7       	ldi	r30, 0x78	; 120
      a8:	fc e2       	ldi	r31, 0x2C	; 44
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 30       	cpi	r26, 0x0A	; 10
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	aa e0       	ldi	r26, 0x0A	; 10
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	aa 32       	cpi	r26, 0x2A	; 42
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <main>
      ce:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <act_servo>:
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
      de:	2b 97       	sbiw	r28, 0x0b	; 11
      e0:	0f b6       	in	r0, 0x3f	; 63
      e2:	f8 94       	cli
      e4:	de bf       	out	0x3e, r29	; 62
      e6:	0f be       	out	0x3f, r0	; 63
      e8:	cd bf       	out	0x3d, r28	; 61
      ea:	9a 87       	std	Y+10, r25	; 0x0a
      ec:	89 87       	std	Y+9, r24	; 0x09
      ee:	6b 87       	std	Y+11, r22	; 0x0b
      f0:	89 85       	ldd	r24, Y+9	; 0x09
      f2:	9a 85       	ldd	r25, Y+10	; 0x0a
      f4:	fc 01       	movw	r30, r24
      f6:	82 81       	ldd	r24, Z+2	; 0x02
      f8:	88 23       	and	r24, r24
      fa:	21 f4       	brne	.+8      	; 0x104 <act_servo+0x2e>
      fc:	89 85       	ldd	r24, Y+9	; 0x09
      fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     100:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <attach_servo>
     104:	83 e5       	ldi	r24, 0x53	; 83
     106:	89 83       	std	Y+1, r24	; 0x01
     108:	89 85       	ldd	r24, Y+9	; 0x09
     10a:	9a 85       	ldd	r25, Y+10	; 0x0a
     10c:	fc 01       	movw	r30, r24
     10e:	80 81       	ld	r24, Z
     110:	8a 83       	std	Y+2, r24	; 0x02
     112:	83 e4       	ldi	r24, 0x43	; 67
     114:	8b 83       	std	Y+3, r24	; 0x03
     116:	8b 85       	ldd	r24, Y+11	; 0x0b
     118:	8c 83       	std	Y+4, r24	; 0x04
     11a:	ce 01       	movw	r24, r28
     11c:	01 96       	adiw	r24, 0x01	; 1
     11e:	0e 94 3c 11 	call	0x2278	; 0x2278 <UART1_Buffer>
     122:	89 85       	ldd	r24, Y+9	; 0x09
     124:	9a 85       	ldd	r25, Y+10	; 0x0a
     126:	2b 85       	ldd	r18, Y+11	; 0x0b
     128:	fc 01       	movw	r30, r24
     12a:	21 83       	std	Z+1, r18	; 0x01
     12c:	2b 96       	adiw	r28, 0x0b	; 11
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	f8 94       	cli
     132:	de bf       	out	0x3e, r29	; 62
     134:	0f be       	out	0x3f, r0	; 63
     136:	cd bf       	out	0x3d, r28	; 61
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <setup_servo>:
	UART1_Buffer(buf);

	servo_->angle = angle_;

}
	void setup_servo(Servo_Act* servo_, uint8_t ID_, uint8_t angle_, unsigned send) {
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	00 d0       	rcall	.+0      	; 0x144 <setup_servo+0x6>
     144:	00 d0       	rcall	.+0      	; 0x146 <setup_servo+0x8>
     146:	00 d0       	rcall	.+0      	; 0x148 <setup_servo+0xa>
     148:	cd b7       	in	r28, 0x3d	; 61
     14a:	de b7       	in	r29, 0x3e	; 62
     14c:	9a 83       	std	Y+2, r25	; 0x02
     14e:	89 83       	std	Y+1, r24	; 0x01
     150:	6b 83       	std	Y+3, r22	; 0x03
     152:	4c 83       	std	Y+4, r20	; 0x04
     154:	3e 83       	std	Y+6, r19	; 0x06
     156:	2d 83       	std	Y+5, r18	; 0x05

		servo_->ID 		= ID_;
     158:	89 81       	ldd	r24, Y+1	; 0x01
     15a:	9a 81       	ldd	r25, Y+2	; 0x02
     15c:	2b 81       	ldd	r18, Y+3	; 0x03
     15e:	fc 01       	movw	r30, r24
     160:	20 83       	st	Z, r18
		servo_->angle 	= angle_;
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	9a 81       	ldd	r25, Y+2	; 0x02
     166:	2c 81       	ldd	r18, Y+4	; 0x04
     168:	fc 01       	movw	r30, r24
     16a:	21 83       	std	Z+1, r18	; 0x01

		if(send) {
     16c:	8d 81       	ldd	r24, Y+5	; 0x05
     16e:	9e 81       	ldd	r25, Y+6	; 0x06
     170:	89 2b       	or	r24, r25
     172:	51 f0       	breq	.+20     	; 0x188 <setup_servo+0x4a>
			attach_servo(servo_);
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	9a 81       	ldd	r25, Y+2	; 0x02
     178:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <attach_servo>
			act_servo(servo_, angle_);
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	9a 81       	ldd	r25, Y+2	; 0x02
     180:	6c 81       	ldd	r22, Y+4	; 0x04
     182:	0e 94 6b 00 	call	0xd6	; 0xd6 <act_servo>
     186:	04 c0       	rjmp	.+8      	; 0x190 <setup_servo+0x52>
		} else {
			detach_servo(servo_);
     188:	89 81       	ldd	r24, Y+1	; 0x01
     18a:	9a 81       	ldd	r25, Y+2	; 0x02
     18c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <detach_servo>
		}

	}
     190:	26 96       	adiw	r28, 0x06	; 6
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	de bf       	out	0x3e, r29	; 62
     198:	0f be       	out	0x3f, r0	; 63
     19a:	cd bf       	out	0x3d, r28	; 61
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	08 95       	ret

000001a2 <attach_servo>:

	void attach_servo(Servo_Act* servo_) {
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	cd b7       	in	r28, 0x3d	; 61
     1a8:	de b7       	in	r29, 0x3e	; 62
     1aa:	2a 97       	sbiw	r28, 0x0a	; 10
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	f8 94       	cli
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	0f be       	out	0x3f, r0	; 63
     1b4:	cd bf       	out	0x3d, r28	; 61
     1b6:	9a 87       	std	Y+10, r25	; 0x0a
     1b8:	89 87       	std	Y+9, r24	; 0x09

		uint8_t buf[8];

		buf[0] = 'S'; 			// servo
     1ba:	83 e5       	ldi	r24, 0x53	; 83
     1bc:	89 83       	std	Y+1, r24	; 0x01
		buf[1] = servo_->ID; 	// the ID
     1be:	89 85       	ldd	r24, Y+9	; 0x09
     1c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     1c2:	fc 01       	movw	r30, r24
     1c4:	80 81       	ld	r24, Z
     1c6:	8a 83       	std	Y+2, r24	; 0x02
		buf[2] = 'S';			// give heads up (status)
     1c8:	83 e5       	ldi	r24, 0x53	; 83
     1ca:	8b 83       	std	Y+3, r24	; 0x03
		buf[3] = 'A';			// attach
     1cc:	81 e4       	ldi	r24, 0x41	; 65
     1ce:	8c 83       	std	Y+4, r24	; 0x04

		UART1_Buffer(buf);
     1d0:	ce 01       	movw	r24, r28
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	0e 94 3c 11 	call	0x2278	; 0x2278 <UART1_Buffer>

		servo_->status = ATTACHED;
     1d8:	89 85       	ldd	r24, Y+9	; 0x09
     1da:	9a 85       	ldd	r25, Y+10	; 0x0a
     1dc:	21 e0       	ldi	r18, 0x01	; 1
     1de:	fc 01       	movw	r30, r24
     1e0:	22 83       	std	Z+2, r18	; 0x02

	}
     1e2:	2a 96       	adiw	r28, 0x0a	; 10
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	f8 94       	cli
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	cd bf       	out	0x3d, r28	; 61
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <detach_servo>:

	void detach_servo(Servo_Act* servo_) {
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	2a 97       	sbiw	r28, 0x0a	; 10
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
     208:	9a 87       	std	Y+10, r25	; 0x0a
     20a:	89 87       	std	Y+9, r24	; 0x09

		uint8_t buf[8];

		buf[0] = 'S'; 			// servo
     20c:	83 e5       	ldi	r24, 0x53	; 83
     20e:	89 83       	std	Y+1, r24	; 0x01
		buf[1] = servo_->ID; 	// the ID
     210:	89 85       	ldd	r24, Y+9	; 0x09
     212:	9a 85       	ldd	r25, Y+10	; 0x0a
     214:	fc 01       	movw	r30, r24
     216:	80 81       	ld	r24, Z
     218:	8a 83       	std	Y+2, r24	; 0x02
		buf[2] = 'S';			// give heads up (status)
     21a:	83 e5       	ldi	r24, 0x53	; 83
     21c:	8b 83       	std	Y+3, r24	; 0x03
		buf[3] = 'D';			// deattach
     21e:	84 e4       	ldi	r24, 0x44	; 68
     220:	8c 83       	std	Y+4, r24	; 0x04

		UART1_Buffer(buf);
     222:	ce 01       	movw	r24, r28
     224:	01 96       	adiw	r24, 0x01	; 1
     226:	0e 94 3c 11 	call	0x2278	; 0x2278 <UART1_Buffer>

		servo_->status = DATTACHED;
     22a:	89 85       	ldd	r24, Y+9	; 0x09
     22c:	9a 85       	ldd	r25, Y+10	; 0x0a
     22e:	fc 01       	movw	r30, r24
     230:	12 82       	std	Z+2, r1	; 0x02
	}
     232:	2a 96       	adiw	r28, 0x0a	; 10
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	de bf       	out	0x3e, r29	; 62
     23a:	0f be       	out	0x3f, r0	; 63
     23c:	cd bf       	out	0x3d, r28	; 61
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	08 95       	ret

00000244 <act_relay>:

Relay_Act act_relay(struct actuator_relay relay_info) {
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	ac 97       	sbiw	r28, 0x2c	; 44
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	de bf       	out	0x3e, r29	; 62
     254:	0f be       	out	0x3f, r0	; 63
     256:	cd bf       	out	0x3d, r28	; 61
     258:	9c a7       	std	Y+44, r25	; 0x2c
     25a:	8b a7       	std	Y+43, r24	; 0x2b
	//maybe user alt writer

	//relay_info.status = WAITING;

	altUart1Write('R');
     25c:	82 e5       	ldi	r24, 0x52	; 82
     25e:	0e 94 8d 10 	call	0x211a	; 0x211a <altUart1Write>
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	a0 e8       	ldi	r26, 0x80	; 128
     268:	bf e3       	ldi	r27, 0x3F	; 63
     26a:	89 83       	std	Y+1, r24	; 0x01
     26c:	9a 83       	std	Y+2, r25	; 0x02
     26e:	ab 83       	std	Y+3, r26	; 0x03
     270:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e4       	ldi	r19, 0x40	; 64
     276:	4c e1       	ldi	r20, 0x1C	; 28
     278:	55 e4       	ldi	r21, 0x45	; 69
     27a:	69 81       	ldd	r22, Y+1	; 0x01
     27c:	7a 81       	ldd	r23, Y+2	; 0x02
     27e:	8b 81       	ldd	r24, Y+3	; 0x03
     280:	9c 81       	ldd	r25, Y+4	; 0x04
     282:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     286:	dc 01       	movw	r26, r24
     288:	cb 01       	movw	r24, r22
     28a:	8d 83       	std	Y+5, r24	; 0x05
     28c:	9e 83       	std	Y+6, r25	; 0x06
     28e:	af 83       	std	Y+7, r26	; 0x07
     290:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	40 e8       	ldi	r20, 0x80	; 128
     298:	5f e3       	ldi	r21, 0x3F	; 63
     29a:	6d 81       	ldd	r22, Y+5	; 0x05
     29c:	7e 81       	ldd	r23, Y+6	; 0x06
     29e:	8f 81       	ldd	r24, Y+7	; 0x07
     2a0:	98 85       	ldd	r25, Y+8	; 0x08
     2a2:	0e 94 43 13 	call	0x2686	; 0x2686 <__cmpsf2>
     2a6:	88 23       	and	r24, r24
     2a8:	2c f4       	brge	.+10     	; 0x2b4 <act_relay+0x70>
		__ticks = 1;
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	9a 87       	std	Y+10, r25	; 0x0a
     2b0:	89 87       	std	Y+9, r24	; 0x09
     2b2:	3f c0       	rjmp	.+126    	; 0x332 <act_relay+0xee>
	else if (__tmp > 65535)
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	3f ef       	ldi	r19, 0xFF	; 255
     2b8:	4f e7       	ldi	r20, 0x7F	; 127
     2ba:	57 e4       	ldi	r21, 0x47	; 71
     2bc:	6d 81       	ldd	r22, Y+5	; 0x05
     2be:	7e 81       	ldd	r23, Y+6	; 0x06
     2c0:	8f 81       	ldd	r24, Y+7	; 0x07
     2c2:	98 85       	ldd	r25, Y+8	; 0x08
     2c4:	0e 94 9b 14 	call	0x2936	; 0x2936 <__gesf2>
     2c8:	18 16       	cp	r1, r24
     2ca:	4c f5       	brge	.+82     	; 0x31e <act_relay+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	40 e2       	ldi	r20, 0x20	; 32
     2d2:	51 e4       	ldi	r21, 0x41	; 65
     2d4:	69 81       	ldd	r22, Y+1	; 0x01
     2d6:	7a 81       	ldd	r23, Y+2	; 0x02
     2d8:	8b 81       	ldd	r24, Y+3	; 0x03
     2da:	9c 81       	ldd	r25, Y+4	; 0x04
     2dc:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     2e0:	dc 01       	movw	r26, r24
     2e2:	cb 01       	movw	r24, r22
     2e4:	bc 01       	movw	r22, r24
     2e6:	cd 01       	movw	r24, r26
     2e8:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     2ec:	dc 01       	movw	r26, r24
     2ee:	cb 01       	movw	r24, r22
     2f0:	9a 87       	std	Y+10, r25	; 0x0a
     2f2:	89 87       	std	Y+9, r24	; 0x09
     2f4:	0f c0       	rjmp	.+30     	; 0x314 <act_relay+0xd0>
     2f6:	8a ef       	ldi	r24, 0xFA	; 250
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	9c 87       	std	Y+12, r25	; 0x0c
     2fc:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2fe:	8b 85       	ldd	r24, Y+11	; 0x0b
     300:	9c 85       	ldd	r25, Y+12	; 0x0c
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <act_relay+0xbe>
     306:	9c 87       	std	Y+12, r25	; 0x0c
     308:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     30a:	89 85       	ldd	r24, Y+9	; 0x09
     30c:	9a 85       	ldd	r25, Y+10	; 0x0a
     30e:	01 97       	sbiw	r24, 0x01	; 1
     310:	9a 87       	std	Y+10, r25	; 0x0a
     312:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     314:	89 85       	ldd	r24, Y+9	; 0x09
     316:	9a 85       	ldd	r25, Y+10	; 0x0a
     318:	89 2b       	or	r24, r25
     31a:	69 f7       	brne	.-38     	; 0x2f6 <act_relay+0xb2>
     31c:	14 c0       	rjmp	.+40     	; 0x346 <act_relay+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     31e:	6d 81       	ldd	r22, Y+5	; 0x05
     320:	7e 81       	ldd	r23, Y+6	; 0x06
     322:	8f 81       	ldd	r24, Y+7	; 0x07
     324:	98 85       	ldd	r25, Y+8	; 0x08
     326:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     32a:	dc 01       	movw	r26, r24
     32c:	cb 01       	movw	r24, r22
     32e:	9a 87       	std	Y+10, r25	; 0x0a
     330:	89 87       	std	Y+9, r24	; 0x09
     332:	89 85       	ldd	r24, Y+9	; 0x09
     334:	9a 85       	ldd	r25, Y+10	; 0x0a
     336:	9e 87       	std	Y+14, r25	; 0x0e
     338:	8d 87       	std	Y+13, r24	; 0x0d
     33a:	8d 85       	ldd	r24, Y+13	; 0x0d
     33c:	9e 85       	ldd	r25, Y+14	; 0x0e
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <act_relay+0xfa>
     342:	9e 87       	std	Y+14, r25	; 0x0e
     344:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);
	altUart1Write(relay_info.ID);
     346:	8b a5       	ldd	r24, Y+43	; 0x2b
     348:	0e 94 8d 10 	call	0x211a	; 0x211a <altUart1Write>
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	a0 e8       	ldi	r26, 0x80	; 128
     352:	bf e3       	ldi	r27, 0x3F	; 63
     354:	8f 87       	std	Y+15, r24	; 0x0f
     356:	98 8b       	std	Y+16, r25	; 0x10
     358:	a9 8b       	std	Y+17, r26	; 0x11
     35a:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e4       	ldi	r19, 0x40	; 64
     360:	4c e1       	ldi	r20, 0x1C	; 28
     362:	55 e4       	ldi	r21, 0x45	; 69
     364:	6f 85       	ldd	r22, Y+15	; 0x0f
     366:	78 89       	ldd	r23, Y+16	; 0x10
     368:	89 89       	ldd	r24, Y+17	; 0x11
     36a:	9a 89       	ldd	r25, Y+18	; 0x12
     36c:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     370:	dc 01       	movw	r26, r24
     372:	cb 01       	movw	r24, r22
     374:	8b 8b       	std	Y+19, r24	; 0x13
     376:	9c 8b       	std	Y+20, r25	; 0x14
     378:	ad 8b       	std	Y+21, r26	; 0x15
     37a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e8       	ldi	r20, 0x80	; 128
     382:	5f e3       	ldi	r21, 0x3F	; 63
     384:	6b 89       	ldd	r22, Y+19	; 0x13
     386:	7c 89       	ldd	r23, Y+20	; 0x14
     388:	8d 89       	ldd	r24, Y+21	; 0x15
     38a:	9e 89       	ldd	r25, Y+22	; 0x16
     38c:	0e 94 43 13 	call	0x2686	; 0x2686 <__cmpsf2>
     390:	88 23       	and	r24, r24
     392:	2c f4       	brge	.+10     	; 0x39e <act_relay+0x15a>
		__ticks = 1;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	98 8f       	std	Y+24, r25	; 0x18
     39a:	8f 8b       	std	Y+23, r24	; 0x17
     39c:	3f c0       	rjmp	.+126    	; 0x41c <act_relay+0x1d8>
	else if (__tmp > 65535)
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	3f ef       	ldi	r19, 0xFF	; 255
     3a2:	4f e7       	ldi	r20, 0x7F	; 127
     3a4:	57 e4       	ldi	r21, 0x47	; 71
     3a6:	6b 89       	ldd	r22, Y+19	; 0x13
     3a8:	7c 89       	ldd	r23, Y+20	; 0x14
     3aa:	8d 89       	ldd	r24, Y+21	; 0x15
     3ac:	9e 89       	ldd	r25, Y+22	; 0x16
     3ae:	0e 94 9b 14 	call	0x2936	; 0x2936 <__gesf2>
     3b2:	18 16       	cp	r1, r24
     3b4:	4c f5       	brge	.+82     	; 0x408 <act_relay+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	40 e2       	ldi	r20, 0x20	; 32
     3bc:	51 e4       	ldi	r21, 0x41	; 65
     3be:	6f 85       	ldd	r22, Y+15	; 0x0f
     3c0:	78 89       	ldd	r23, Y+16	; 0x10
     3c2:	89 89       	ldd	r24, Y+17	; 0x11
     3c4:	9a 89       	ldd	r25, Y+18	; 0x12
     3c6:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     3ca:	dc 01       	movw	r26, r24
     3cc:	cb 01       	movw	r24, r22
     3ce:	bc 01       	movw	r22, r24
     3d0:	cd 01       	movw	r24, r26
     3d2:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     3d6:	dc 01       	movw	r26, r24
     3d8:	cb 01       	movw	r24, r22
     3da:	98 8f       	std	Y+24, r25	; 0x18
     3dc:	8f 8b       	std	Y+23, r24	; 0x17
     3de:	0f c0       	rjmp	.+30     	; 0x3fe <act_relay+0x1ba>
     3e0:	8a ef       	ldi	r24, 0xFA	; 250
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	9a 8f       	std	Y+26, r25	; 0x1a
     3e6:	89 8f       	std	Y+25, r24	; 0x19
     3e8:	89 8d       	ldd	r24, Y+25	; 0x19
     3ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <act_relay+0x1a8>
     3f0:	9a 8f       	std	Y+26, r25	; 0x1a
     3f2:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3f4:	8f 89       	ldd	r24, Y+23	; 0x17
     3f6:	98 8d       	ldd	r25, Y+24	; 0x18
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	98 8f       	std	Y+24, r25	; 0x18
     3fc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3fe:	8f 89       	ldd	r24, Y+23	; 0x17
     400:	98 8d       	ldd	r25, Y+24	; 0x18
     402:	89 2b       	or	r24, r25
     404:	69 f7       	brne	.-38     	; 0x3e0 <act_relay+0x19c>
     406:	14 c0       	rjmp	.+40     	; 0x430 <act_relay+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     408:	6b 89       	ldd	r22, Y+19	; 0x13
     40a:	7c 89       	ldd	r23, Y+20	; 0x14
     40c:	8d 89       	ldd	r24, Y+21	; 0x15
     40e:	9e 89       	ldd	r25, Y+22	; 0x16
     410:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     414:	dc 01       	movw	r26, r24
     416:	cb 01       	movw	r24, r22
     418:	98 8f       	std	Y+24, r25	; 0x18
     41a:	8f 8b       	std	Y+23, r24	; 0x17
     41c:	8f 89       	ldd	r24, Y+23	; 0x17
     41e:	98 8d       	ldd	r25, Y+24	; 0x18
     420:	9c 8f       	std	Y+28, r25	; 0x1c
     422:	8b 8f       	std	Y+27, r24	; 0x1b
     424:	8b 8d       	ldd	r24, Y+27	; 0x1b
     426:	9c 8d       	ldd	r25, Y+28	; 0x1c
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <act_relay+0x1e4>
     42c:	9c 8f       	std	Y+28, r25	; 0x1c
     42e:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1);
	altUart1Write(relay_info.state);
     430:	8c a5       	ldd	r24, Y+44	; 0x2c
     432:	0e 94 8d 10 	call	0x211a	; 0x211a <altUart1Write>
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	a0 e8       	ldi	r26, 0x80	; 128
     43c:	bf e3       	ldi	r27, 0x3F	; 63
     43e:	8d 8f       	std	Y+29, r24	; 0x1d
     440:	9e 8f       	std	Y+30, r25	; 0x1e
     442:	af 8f       	std	Y+31, r26	; 0x1f
     444:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e4       	ldi	r19, 0x40	; 64
     44a:	4c e1       	ldi	r20, 0x1C	; 28
     44c:	55 e4       	ldi	r21, 0x45	; 69
     44e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     450:	7e 8d       	ldd	r23, Y+30	; 0x1e
     452:	8f 8d       	ldd	r24, Y+31	; 0x1f
     454:	98 a1       	ldd	r25, Y+32	; 0x20
     456:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     45a:	dc 01       	movw	r26, r24
     45c:	cb 01       	movw	r24, r22
     45e:	89 a3       	std	Y+33, r24	; 0x21
     460:	9a a3       	std	Y+34, r25	; 0x22
     462:	ab a3       	std	Y+35, r26	; 0x23
     464:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	40 e8       	ldi	r20, 0x80	; 128
     46c:	5f e3       	ldi	r21, 0x3F	; 63
     46e:	69 a1       	ldd	r22, Y+33	; 0x21
     470:	7a a1       	ldd	r23, Y+34	; 0x22
     472:	8b a1       	ldd	r24, Y+35	; 0x23
     474:	9c a1       	ldd	r25, Y+36	; 0x24
     476:	0e 94 43 13 	call	0x2686	; 0x2686 <__cmpsf2>
     47a:	88 23       	and	r24, r24
     47c:	2c f4       	brge	.+10     	; 0x488 <act_relay+0x244>
		__ticks = 1;
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	9e a3       	std	Y+38, r25	; 0x26
     484:	8d a3       	std	Y+37, r24	; 0x25
     486:	3f c0       	rjmp	.+126    	; 0x506 <act_relay+0x2c2>
	else if (__tmp > 65535)
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	3f ef       	ldi	r19, 0xFF	; 255
     48c:	4f e7       	ldi	r20, 0x7F	; 127
     48e:	57 e4       	ldi	r21, 0x47	; 71
     490:	69 a1       	ldd	r22, Y+33	; 0x21
     492:	7a a1       	ldd	r23, Y+34	; 0x22
     494:	8b a1       	ldd	r24, Y+35	; 0x23
     496:	9c a1       	ldd	r25, Y+36	; 0x24
     498:	0e 94 9b 14 	call	0x2936	; 0x2936 <__gesf2>
     49c:	18 16       	cp	r1, r24
     49e:	4c f5       	brge	.+82     	; 0x4f2 <act_relay+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	40 e2       	ldi	r20, 0x20	; 32
     4a6:	51 e4       	ldi	r21, 0x41	; 65
     4a8:	6d 8d       	ldd	r22, Y+29	; 0x1d
     4aa:	7e 8d       	ldd	r23, Y+30	; 0x1e
     4ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
     4ae:	98 a1       	ldd	r25, Y+32	; 0x20
     4b0:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     4b4:	dc 01       	movw	r26, r24
     4b6:	cb 01       	movw	r24, r22
     4b8:	bc 01       	movw	r22, r24
     4ba:	cd 01       	movw	r24, r26
     4bc:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     4c0:	dc 01       	movw	r26, r24
     4c2:	cb 01       	movw	r24, r22
     4c4:	9e a3       	std	Y+38, r25	; 0x26
     4c6:	8d a3       	std	Y+37, r24	; 0x25
     4c8:	0f c0       	rjmp	.+30     	; 0x4e8 <act_relay+0x2a4>
     4ca:	8a ef       	ldi	r24, 0xFA	; 250
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	98 a7       	std	Y+40, r25	; 0x28
     4d0:	8f a3       	std	Y+39, r24	; 0x27
     4d2:	8f a1       	ldd	r24, Y+39	; 0x27
     4d4:	98 a5       	ldd	r25, Y+40	; 0x28
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	f1 f7       	brne	.-4      	; 0x4d6 <act_relay+0x292>
     4da:	98 a7       	std	Y+40, r25	; 0x28
     4dc:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4de:	8d a1       	ldd	r24, Y+37	; 0x25
     4e0:	9e a1       	ldd	r25, Y+38	; 0x26
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	9e a3       	std	Y+38, r25	; 0x26
     4e6:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4e8:	8d a1       	ldd	r24, Y+37	; 0x25
     4ea:	9e a1       	ldd	r25, Y+38	; 0x26
     4ec:	89 2b       	or	r24, r25
     4ee:	69 f7       	brne	.-38     	; 0x4ca <act_relay+0x286>
     4f0:	14 c0       	rjmp	.+40     	; 0x51a <act_relay+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4f2:	69 a1       	ldd	r22, Y+33	; 0x21
     4f4:	7a a1       	ldd	r23, Y+34	; 0x22
     4f6:	8b a1       	ldd	r24, Y+35	; 0x23
     4f8:	9c a1       	ldd	r25, Y+36	; 0x24
     4fa:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     4fe:	dc 01       	movw	r26, r24
     500:	cb 01       	movw	r24, r22
     502:	9e a3       	std	Y+38, r25	; 0x26
     504:	8d a3       	std	Y+37, r24	; 0x25
     506:	8d a1       	ldd	r24, Y+37	; 0x25
     508:	9e a1       	ldd	r25, Y+38	; 0x26
     50a:	9a a7       	std	Y+42, r25	; 0x2a
     50c:	89 a7       	std	Y+41, r24	; 0x29
     50e:	89 a5       	ldd	r24, Y+41	; 0x29
     510:	9a a5       	ldd	r25, Y+42	; 0x2a
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	f1 f7       	brne	.-4      	; 0x512 <act_relay+0x2ce>
     516:	9a a7       	std	Y+42, r25	; 0x2a
     518:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1);


	return relay_info;
     51a:	8b a5       	ldd	r24, Y+43	; 0x2b
     51c:	9c a5       	ldd	r25, Y+44	; 0x2c
}
     51e:	ac 96       	adiw	r28, 0x2c	; 44
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	de bf       	out	0x3e, r29	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	cd bf       	out	0x3d, r28	; 61
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <act_mosfet>:

Mosfet_Act act_mosfet(struct actuator_mosfet mosfet_info) {
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	ac 97       	sbiw	r28, 0x2c	; 44
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	de bf       	out	0x3e, r29	; 62
     540:	0f be       	out	0x3f, r0	; 63
     542:	cd bf       	out	0x3d, r28	; 61
     544:	9c a7       	std	Y+44, r25	; 0x2c
     546:	8b a7       	std	Y+43, r24	; 0x2b



	altUart1Write('M');
     548:	8d e4       	ldi	r24, 0x4D	; 77
     54a:	0e 94 8d 10 	call	0x211a	; 0x211a <altUart1Write>
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	a0 e8       	ldi	r26, 0x80	; 128
     554:	bf e3       	ldi	r27, 0x3F	; 63
     556:	89 83       	std	Y+1, r24	; 0x01
     558:	9a 83       	std	Y+2, r25	; 0x02
     55a:	ab 83       	std	Y+3, r26	; 0x03
     55c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e4       	ldi	r19, 0x40	; 64
     562:	4c e1       	ldi	r20, 0x1C	; 28
     564:	55 e4       	ldi	r21, 0x45	; 69
     566:	69 81       	ldd	r22, Y+1	; 0x01
     568:	7a 81       	ldd	r23, Y+2	; 0x02
     56a:	8b 81       	ldd	r24, Y+3	; 0x03
     56c:	9c 81       	ldd	r25, Y+4	; 0x04
     56e:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     572:	dc 01       	movw	r26, r24
     574:	cb 01       	movw	r24, r22
     576:	8d 83       	std	Y+5, r24	; 0x05
     578:	9e 83       	std	Y+6, r25	; 0x06
     57a:	af 83       	std	Y+7, r26	; 0x07
     57c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	40 e8       	ldi	r20, 0x80	; 128
     584:	5f e3       	ldi	r21, 0x3F	; 63
     586:	6d 81       	ldd	r22, Y+5	; 0x05
     588:	7e 81       	ldd	r23, Y+6	; 0x06
     58a:	8f 81       	ldd	r24, Y+7	; 0x07
     58c:	98 85       	ldd	r25, Y+8	; 0x08
     58e:	0e 94 43 13 	call	0x2686	; 0x2686 <__cmpsf2>
     592:	88 23       	and	r24, r24
     594:	2c f4       	brge	.+10     	; 0x5a0 <act_mosfet+0x70>
		__ticks = 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	9a 87       	std	Y+10, r25	; 0x0a
     59c:	89 87       	std	Y+9, r24	; 0x09
     59e:	3f c0       	rjmp	.+126    	; 0x61e <act_mosfet+0xee>
	else if (__tmp > 65535)
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	3f ef       	ldi	r19, 0xFF	; 255
     5a4:	4f e7       	ldi	r20, 0x7F	; 127
     5a6:	57 e4       	ldi	r21, 0x47	; 71
     5a8:	6d 81       	ldd	r22, Y+5	; 0x05
     5aa:	7e 81       	ldd	r23, Y+6	; 0x06
     5ac:	8f 81       	ldd	r24, Y+7	; 0x07
     5ae:	98 85       	ldd	r25, Y+8	; 0x08
     5b0:	0e 94 9b 14 	call	0x2936	; 0x2936 <__gesf2>
     5b4:	18 16       	cp	r1, r24
     5b6:	4c f5       	brge	.+82     	; 0x60a <act_mosfet+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	40 e2       	ldi	r20, 0x20	; 32
     5be:	51 e4       	ldi	r21, 0x41	; 65
     5c0:	69 81       	ldd	r22, Y+1	; 0x01
     5c2:	7a 81       	ldd	r23, Y+2	; 0x02
     5c4:	8b 81       	ldd	r24, Y+3	; 0x03
     5c6:	9c 81       	ldd	r25, Y+4	; 0x04
     5c8:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	bc 01       	movw	r22, r24
     5d2:	cd 01       	movw	r24, r26
     5d4:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     5d8:	dc 01       	movw	r26, r24
     5da:	cb 01       	movw	r24, r22
     5dc:	9a 87       	std	Y+10, r25	; 0x0a
     5de:	89 87       	std	Y+9, r24	; 0x09
     5e0:	0f c0       	rjmp	.+30     	; 0x600 <act_mosfet+0xd0>
     5e2:	8a ef       	ldi	r24, 0xFA	; 250
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	9c 87       	std	Y+12, r25	; 0x0c
     5e8:	8b 87       	std	Y+11, r24	; 0x0b
     5ea:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ec:	9c 85       	ldd	r25, Y+12	; 0x0c
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <act_mosfet+0xbe>
     5f2:	9c 87       	std	Y+12, r25	; 0x0c
     5f4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5f6:	89 85       	ldd	r24, Y+9	; 0x09
     5f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	9a 87       	std	Y+10, r25	; 0x0a
     5fe:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     600:	89 85       	ldd	r24, Y+9	; 0x09
     602:	9a 85       	ldd	r25, Y+10	; 0x0a
     604:	89 2b       	or	r24, r25
     606:	69 f7       	brne	.-38     	; 0x5e2 <act_mosfet+0xb2>
     608:	14 c0       	rjmp	.+40     	; 0x632 <act_mosfet+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     60a:	6d 81       	ldd	r22, Y+5	; 0x05
     60c:	7e 81       	ldd	r23, Y+6	; 0x06
     60e:	8f 81       	ldd	r24, Y+7	; 0x07
     610:	98 85       	ldd	r25, Y+8	; 0x08
     612:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     616:	dc 01       	movw	r26, r24
     618:	cb 01       	movw	r24, r22
     61a:	9a 87       	std	Y+10, r25	; 0x0a
     61c:	89 87       	std	Y+9, r24	; 0x09
     61e:	89 85       	ldd	r24, Y+9	; 0x09
     620:	9a 85       	ldd	r25, Y+10	; 0x0a
     622:	9e 87       	std	Y+14, r25	; 0x0e
     624:	8d 87       	std	Y+13, r24	; 0x0d
     626:	8d 85       	ldd	r24, Y+13	; 0x0d
     628:	9e 85       	ldd	r25, Y+14	; 0x0e
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <act_mosfet+0xfa>
     62e:	9e 87       	std	Y+14, r25	; 0x0e
     630:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);
	altUart1Write(mosfet_info.ID);
     632:	8b a5       	ldd	r24, Y+43	; 0x2b
     634:	0e 94 8d 10 	call	0x211a	; 0x211a <altUart1Write>
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e8       	ldi	r26, 0x80	; 128
     63e:	bf e3       	ldi	r27, 0x3F	; 63
     640:	8f 87       	std	Y+15, r24	; 0x0f
     642:	98 8b       	std	Y+16, r25	; 0x10
     644:	a9 8b       	std	Y+17, r26	; 0x11
     646:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e4       	ldi	r19, 0x40	; 64
     64c:	4c e1       	ldi	r20, 0x1C	; 28
     64e:	55 e4       	ldi	r21, 0x45	; 69
     650:	6f 85       	ldd	r22, Y+15	; 0x0f
     652:	78 89       	ldd	r23, Y+16	; 0x10
     654:	89 89       	ldd	r24, Y+17	; 0x11
     656:	9a 89       	ldd	r25, Y+18	; 0x12
     658:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     65c:	dc 01       	movw	r26, r24
     65e:	cb 01       	movw	r24, r22
     660:	8b 8b       	std	Y+19, r24	; 0x13
     662:	9c 8b       	std	Y+20, r25	; 0x14
     664:	ad 8b       	std	Y+21, r26	; 0x15
     666:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	40 e8       	ldi	r20, 0x80	; 128
     66e:	5f e3       	ldi	r21, 0x3F	; 63
     670:	6b 89       	ldd	r22, Y+19	; 0x13
     672:	7c 89       	ldd	r23, Y+20	; 0x14
     674:	8d 89       	ldd	r24, Y+21	; 0x15
     676:	9e 89       	ldd	r25, Y+22	; 0x16
     678:	0e 94 43 13 	call	0x2686	; 0x2686 <__cmpsf2>
     67c:	88 23       	and	r24, r24
     67e:	2c f4       	brge	.+10     	; 0x68a <act_mosfet+0x15a>
		__ticks = 1;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	98 8f       	std	Y+24, r25	; 0x18
     686:	8f 8b       	std	Y+23, r24	; 0x17
     688:	3f c0       	rjmp	.+126    	; 0x708 <act_mosfet+0x1d8>
	else if (__tmp > 65535)
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	3f ef       	ldi	r19, 0xFF	; 255
     68e:	4f e7       	ldi	r20, 0x7F	; 127
     690:	57 e4       	ldi	r21, 0x47	; 71
     692:	6b 89       	ldd	r22, Y+19	; 0x13
     694:	7c 89       	ldd	r23, Y+20	; 0x14
     696:	8d 89       	ldd	r24, Y+21	; 0x15
     698:	9e 89       	ldd	r25, Y+22	; 0x16
     69a:	0e 94 9b 14 	call	0x2936	; 0x2936 <__gesf2>
     69e:	18 16       	cp	r1, r24
     6a0:	4c f5       	brge	.+82     	; 0x6f4 <act_mosfet+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e2       	ldi	r20, 0x20	; 32
     6a8:	51 e4       	ldi	r21, 0x41	; 65
     6aa:	6f 85       	ldd	r22, Y+15	; 0x0f
     6ac:	78 89       	ldd	r23, Y+16	; 0x10
     6ae:	89 89       	ldd	r24, Y+17	; 0x11
     6b0:	9a 89       	ldd	r25, Y+18	; 0x12
     6b2:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	bc 01       	movw	r22, r24
     6bc:	cd 01       	movw	r24, r26
     6be:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     6c2:	dc 01       	movw	r26, r24
     6c4:	cb 01       	movw	r24, r22
     6c6:	98 8f       	std	Y+24, r25	; 0x18
     6c8:	8f 8b       	std	Y+23, r24	; 0x17
     6ca:	0f c0       	rjmp	.+30     	; 0x6ea <act_mosfet+0x1ba>
     6cc:	8a ef       	ldi	r24, 0xFA	; 250
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	9a 8f       	std	Y+26, r25	; 0x1a
     6d2:	89 8f       	std	Y+25, r24	; 0x19
     6d4:	89 8d       	ldd	r24, Y+25	; 0x19
     6d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	f1 f7       	brne	.-4      	; 0x6d8 <act_mosfet+0x1a8>
     6dc:	9a 8f       	std	Y+26, r25	; 0x1a
     6de:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e0:	8f 89       	ldd	r24, Y+23	; 0x17
     6e2:	98 8d       	ldd	r25, Y+24	; 0x18
     6e4:	01 97       	sbiw	r24, 0x01	; 1
     6e6:	98 8f       	std	Y+24, r25	; 0x18
     6e8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6ea:	8f 89       	ldd	r24, Y+23	; 0x17
     6ec:	98 8d       	ldd	r25, Y+24	; 0x18
     6ee:	89 2b       	or	r24, r25
     6f0:	69 f7       	brne	.-38     	; 0x6cc <act_mosfet+0x19c>
     6f2:	14 c0       	rjmp	.+40     	; 0x71c <act_mosfet+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6f4:	6b 89       	ldd	r22, Y+19	; 0x13
     6f6:	7c 89       	ldd	r23, Y+20	; 0x14
     6f8:	8d 89       	ldd	r24, Y+21	; 0x15
     6fa:	9e 89       	ldd	r25, Y+22	; 0x16
     6fc:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     700:	dc 01       	movw	r26, r24
     702:	cb 01       	movw	r24, r22
     704:	98 8f       	std	Y+24, r25	; 0x18
     706:	8f 8b       	std	Y+23, r24	; 0x17
     708:	8f 89       	ldd	r24, Y+23	; 0x17
     70a:	98 8d       	ldd	r25, Y+24	; 0x18
     70c:	9c 8f       	std	Y+28, r25	; 0x1c
     70e:	8b 8f       	std	Y+27, r24	; 0x1b
     710:	8b 8d       	ldd	r24, Y+27	; 0x1b
     712:	9c 8d       	ldd	r25, Y+28	; 0x1c
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <act_mosfet+0x1e4>
     718:	9c 8f       	std	Y+28, r25	; 0x1c
     71a:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1);
	altUart1Write(mosfet_info.state);
     71c:	8c a5       	ldd	r24, Y+44	; 0x2c
     71e:	0e 94 8d 10 	call	0x211a	; 0x211a <altUart1Write>
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	a0 e8       	ldi	r26, 0x80	; 128
     728:	bf e3       	ldi	r27, 0x3F	; 63
     72a:	8d 8f       	std	Y+29, r24	; 0x1d
     72c:	9e 8f       	std	Y+30, r25	; 0x1e
     72e:	af 8f       	std	Y+31, r26	; 0x1f
     730:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e4       	ldi	r19, 0x40	; 64
     736:	4c e1       	ldi	r20, 0x1C	; 28
     738:	55 e4       	ldi	r21, 0x45	; 69
     73a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     73c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     73e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     740:	98 a1       	ldd	r25, Y+32	; 0x20
     742:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     746:	dc 01       	movw	r26, r24
     748:	cb 01       	movw	r24, r22
     74a:	89 a3       	std	Y+33, r24	; 0x21
     74c:	9a a3       	std	Y+34, r25	; 0x22
     74e:	ab a3       	std	Y+35, r26	; 0x23
     750:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	40 e8       	ldi	r20, 0x80	; 128
     758:	5f e3       	ldi	r21, 0x3F	; 63
     75a:	69 a1       	ldd	r22, Y+33	; 0x21
     75c:	7a a1       	ldd	r23, Y+34	; 0x22
     75e:	8b a1       	ldd	r24, Y+35	; 0x23
     760:	9c a1       	ldd	r25, Y+36	; 0x24
     762:	0e 94 43 13 	call	0x2686	; 0x2686 <__cmpsf2>
     766:	88 23       	and	r24, r24
     768:	2c f4       	brge	.+10     	; 0x774 <act_mosfet+0x244>
		__ticks = 1;
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	9e a3       	std	Y+38, r25	; 0x26
     770:	8d a3       	std	Y+37, r24	; 0x25
     772:	3f c0       	rjmp	.+126    	; 0x7f2 <act_mosfet+0x2c2>
	else if (__tmp > 65535)
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	3f ef       	ldi	r19, 0xFF	; 255
     778:	4f e7       	ldi	r20, 0x7F	; 127
     77a:	57 e4       	ldi	r21, 0x47	; 71
     77c:	69 a1       	ldd	r22, Y+33	; 0x21
     77e:	7a a1       	ldd	r23, Y+34	; 0x22
     780:	8b a1       	ldd	r24, Y+35	; 0x23
     782:	9c a1       	ldd	r25, Y+36	; 0x24
     784:	0e 94 9b 14 	call	0x2936	; 0x2936 <__gesf2>
     788:	18 16       	cp	r1, r24
     78a:	4c f5       	brge	.+82     	; 0x7de <act_mosfet+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	40 e2       	ldi	r20, 0x20	; 32
     792:	51 e4       	ldi	r21, 0x41	; 65
     794:	6d 8d       	ldd	r22, Y+29	; 0x1d
     796:	7e 8d       	ldd	r23, Y+30	; 0x1e
     798:	8f 8d       	ldd	r24, Y+31	; 0x1f
     79a:	98 a1       	ldd	r25, Y+32	; 0x20
     79c:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     7a0:	dc 01       	movw	r26, r24
     7a2:	cb 01       	movw	r24, r22
     7a4:	bc 01       	movw	r22, r24
     7a6:	cd 01       	movw	r24, r26
     7a8:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     7ac:	dc 01       	movw	r26, r24
     7ae:	cb 01       	movw	r24, r22
     7b0:	9e a3       	std	Y+38, r25	; 0x26
     7b2:	8d a3       	std	Y+37, r24	; 0x25
     7b4:	0f c0       	rjmp	.+30     	; 0x7d4 <act_mosfet+0x2a4>
     7b6:	8a ef       	ldi	r24, 0xFA	; 250
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	98 a7       	std	Y+40, r25	; 0x28
     7bc:	8f a3       	std	Y+39, r24	; 0x27
     7be:	8f a1       	ldd	r24, Y+39	; 0x27
     7c0:	98 a5       	ldd	r25, Y+40	; 0x28
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <act_mosfet+0x292>
     7c6:	98 a7       	std	Y+40, r25	; 0x28
     7c8:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ca:	8d a1       	ldd	r24, Y+37	; 0x25
     7cc:	9e a1       	ldd	r25, Y+38	; 0x26
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	9e a3       	std	Y+38, r25	; 0x26
     7d2:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7d4:	8d a1       	ldd	r24, Y+37	; 0x25
     7d6:	9e a1       	ldd	r25, Y+38	; 0x26
     7d8:	89 2b       	or	r24, r25
     7da:	69 f7       	brne	.-38     	; 0x7b6 <act_mosfet+0x286>
     7dc:	14 c0       	rjmp	.+40     	; 0x806 <act_mosfet+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7de:	69 a1       	ldd	r22, Y+33	; 0x21
     7e0:	7a a1       	ldd	r23, Y+34	; 0x22
     7e2:	8b a1       	ldd	r24, Y+35	; 0x23
     7e4:	9c a1       	ldd	r25, Y+36	; 0x24
     7e6:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     7ea:	dc 01       	movw	r26, r24
     7ec:	cb 01       	movw	r24, r22
     7ee:	9e a3       	std	Y+38, r25	; 0x26
     7f0:	8d a3       	std	Y+37, r24	; 0x25
     7f2:	8d a1       	ldd	r24, Y+37	; 0x25
     7f4:	9e a1       	ldd	r25, Y+38	; 0x26
     7f6:	9a a7       	std	Y+42, r25	; 0x2a
     7f8:	89 a7       	std	Y+41, r24	; 0x29
     7fa:	89 a5       	ldd	r24, Y+41	; 0x29
     7fc:	9a a5       	ldd	r25, Y+42	; 0x2a
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <act_mosfet+0x2ce>
     802:	9a a7       	std	Y+42, r25	; 0x2a
     804:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1);


	return mosfet_info;
     806:	8b a5       	ldd	r24, Y+43	; 0x2b
     808:	9c a5       	ldd	r25, Y+44	; 0x2c
}
     80a:	ac 96       	adiw	r28, 0x2c	; 44
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <AX_UART_Init>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "ax.h"

void AX_UART_Init(void)
{
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	2e 97       	sbiw	r28, 0x0e	; 14
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
	//DDRE &= ~((1 << PINE0) | (1 << PINE1));
	//DDRE |= 0xFC;
	DDRD &= ~((1 << 2) | (1 << 3));
     830:	8a e2       	ldi	r24, 0x2A	; 42
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	2a e2       	ldi	r18, 0x2A	; 42
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	f9 01       	movw	r30, r18
     83a:	20 81       	ld	r18, Z
     83c:	23 7f       	andi	r18, 0xF3	; 243
     83e:	fc 01       	movw	r30, r24
     840:	20 83       	st	Z, r18
	//PORTE = 0;
	UCSR1A = 0;
     842:	88 ec       	ldi	r24, 0xC8	; 200
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	fc 01       	movw	r30, r24
     848:	10 82       	st	Z, r1
	UCSR1B = (1<<RXEN1) | (1<<TXEN1);
     84a:	89 ec       	ldi	r24, 0xC9	; 201
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	28 e1       	ldi	r18, 0x18	; 24
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);
     854:	8a ec       	ldi	r24, 0xCA	; 202
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	26 e0       	ldi	r18, 0x06	; 6
     85a:	fc 01       	movw	r30, r24
     85c:	20 83       	st	Z, r18

	UBRR1H = 0;
     85e:	8d ec       	ldi	r24, 0xCD	; 205
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	fc 01       	movw	r30, r24
     864:	10 82       	st	Z, r1
	UBRR1L = 5;
     866:	8c ec       	ldi	r24, 0xCC	; 204
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	25 e0       	ldi	r18, 0x05	; 5
     86c:	fc 01       	movw	r30, r24
     86e:	20 83       	st	Z, r18
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	a8 ec       	ldi	r26, 0xC8	; 200
     876:	b2 e4       	ldi	r27, 0x42	; 66
     878:	89 83       	std	Y+1, r24	; 0x01
     87a:	9a 83       	std	Y+2, r25	; 0x02
     87c:	ab 83       	std	Y+3, r26	; 0x03
     87e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e4       	ldi	r19, 0x40	; 64
     884:	4c e1       	ldi	r20, 0x1C	; 28
     886:	55 e4       	ldi	r21, 0x45	; 69
     888:	69 81       	ldd	r22, Y+1	; 0x01
     88a:	7a 81       	ldd	r23, Y+2	; 0x02
     88c:	8b 81       	ldd	r24, Y+3	; 0x03
     88e:	9c 81       	ldd	r25, Y+4	; 0x04
     890:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	8d 83       	std	Y+5, r24	; 0x05
     89a:	9e 83       	std	Y+6, r25	; 0x06
     89c:	af 83       	std	Y+7, r26	; 0x07
     89e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	40 e8       	ldi	r20, 0x80	; 128
     8a6:	5f e3       	ldi	r21, 0x3F	; 63
     8a8:	6d 81       	ldd	r22, Y+5	; 0x05
     8aa:	7e 81       	ldd	r23, Y+6	; 0x06
     8ac:	8f 81       	ldd	r24, Y+7	; 0x07
     8ae:	98 85       	ldd	r25, Y+8	; 0x08
     8b0:	0e 94 43 13 	call	0x2686	; 0x2686 <__cmpsf2>
     8b4:	88 23       	and	r24, r24
     8b6:	2c f4       	brge	.+10     	; 0x8c2 <AX_UART_Init+0xa6>
		__ticks = 1;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	9a 87       	std	Y+10, r25	; 0x0a
     8be:	89 87       	std	Y+9, r24	; 0x09
     8c0:	3f c0       	rjmp	.+126    	; 0x940 <AX_UART_Init+0x124>
	else if (__tmp > 65535)
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	3f ef       	ldi	r19, 0xFF	; 255
     8c6:	4f e7       	ldi	r20, 0x7F	; 127
     8c8:	57 e4       	ldi	r21, 0x47	; 71
     8ca:	6d 81       	ldd	r22, Y+5	; 0x05
     8cc:	7e 81       	ldd	r23, Y+6	; 0x06
     8ce:	8f 81       	ldd	r24, Y+7	; 0x07
     8d0:	98 85       	ldd	r25, Y+8	; 0x08
     8d2:	0e 94 9b 14 	call	0x2936	; 0x2936 <__gesf2>
     8d6:	18 16       	cp	r1, r24
     8d8:	4c f5       	brge	.+82     	; 0x92c <AX_UART_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	40 e2       	ldi	r20, 0x20	; 32
     8e0:	51 e4       	ldi	r21, 0x41	; 65
     8e2:	69 81       	ldd	r22, Y+1	; 0x01
     8e4:	7a 81       	ldd	r23, Y+2	; 0x02
     8e6:	8b 81       	ldd	r24, Y+3	; 0x03
     8e8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ea:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     8ee:	dc 01       	movw	r26, r24
     8f0:	cb 01       	movw	r24, r22
     8f2:	bc 01       	movw	r22, r24
     8f4:	cd 01       	movw	r24, r26
     8f6:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     8fa:	dc 01       	movw	r26, r24
     8fc:	cb 01       	movw	r24, r22
     8fe:	9a 87       	std	Y+10, r25	; 0x0a
     900:	89 87       	std	Y+9, r24	; 0x09
     902:	0f c0       	rjmp	.+30     	; 0x922 <AX_UART_Init+0x106>
     904:	8a ef       	ldi	r24, 0xFA	; 250
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	9c 87       	std	Y+12, r25	; 0x0c
     90a:	8b 87       	std	Y+11, r24	; 0x0b
     90c:	8b 85       	ldd	r24, Y+11	; 0x0b
     90e:	9c 85       	ldd	r25, Y+12	; 0x0c
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	f1 f7       	brne	.-4      	; 0x910 <AX_UART_Init+0xf4>
     914:	9c 87       	std	Y+12, r25	; 0x0c
     916:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     918:	89 85       	ldd	r24, Y+9	; 0x09
     91a:	9a 85       	ldd	r25, Y+10	; 0x0a
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	9a 87       	std	Y+10, r25	; 0x0a
     920:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     922:	89 85       	ldd	r24, Y+9	; 0x09
     924:	9a 85       	ldd	r25, Y+10	; 0x0a
     926:	89 2b       	or	r24, r25
     928:	69 f7       	brne	.-38     	; 0x904 <AX_UART_Init+0xe8>
     92a:	14 c0       	rjmp	.+40     	; 0x954 <AX_UART_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     92c:	6d 81       	ldd	r22, Y+5	; 0x05
     92e:	7e 81       	ldd	r23, Y+6	; 0x06
     930:	8f 81       	ldd	r24, Y+7	; 0x07
     932:	98 85       	ldd	r25, Y+8	; 0x08
     934:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     938:	dc 01       	movw	r26, r24
     93a:	cb 01       	movw	r24, r22
     93c:	9a 87       	std	Y+10, r25	; 0x0a
     93e:	89 87       	std	Y+9, r24	; 0x09
     940:	89 85       	ldd	r24, Y+9	; 0x09
     942:	9a 85       	ldd	r25, Y+10	; 0x0a
     944:	9e 87       	std	Y+14, r25	; 0x0e
     946:	8d 87       	std	Y+13, r24	; 0x0d
     948:	8d 85       	ldd	r24, Y+13	; 0x0d
     94a:	9e 85       	ldd	r25, Y+14	; 0x0e
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	f1 f7       	brne	.-4      	; 0x94c <AX_UART_Init+0x130>
     950:	9e 87       	std	Y+14, r25	; 0x0e
     952:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);
}
     954:	2e 96       	adiw	r28, 0x0e	; 14
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	de bf       	out	0x3e, r29	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <AX_SendChar>:

void AX_SendChar(unsigned char data)
{
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	1f 92       	push	r1
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1<<UDRE1)) );
     972:	00 00       	nop
     974:	88 ec       	ldi	r24, 0xC8	; 200
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	fc 01       	movw	r30, r24
     97a:	80 81       	ld	r24, Z
     97c:	88 2f       	mov	r24, r24
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	80 72       	andi	r24, 0x20	; 32
     982:	99 27       	eor	r25, r25
     984:	89 2b       	or	r24, r25
     986:	b1 f3       	breq	.-20     	; 0x974 <AX_SendChar+0xe>
	UDR1 = data;
     988:	8e ec       	ldi	r24, 0xCE	; 206
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	29 81       	ldd	r18, Y+1	; 0x01
     98e:	fc 01       	movw	r30, r24
     990:	20 83       	st	Z, r18
}
     992:	0f 90       	pop	r0
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <AX_ReadChar>:
unsigned char AX_ReadChar(void)
{
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
   //UART1_Write('I');
   while( !( UCSR1A & (1<< RXC1)) );
     9a2:	00 00       	nop
     9a4:	88 ec       	ldi	r24, 0xC8	; 200
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	fc 01       	movw	r30, r24
     9aa:	80 81       	ld	r24, Z
     9ac:	88 23       	and	r24, r24
     9ae:	d4 f7       	brge	.-12     	; 0x9a4 <AX_ReadChar+0xa>
   return UDR1;
     9b0:	8e ec       	ldi	r24, 0xCE	; 206
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	fc 01       	movw	r30, r24
     9b6:	80 81       	ld	r24, Z
}
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <AX_ReadStatus>:
/*************************************************************************************************************************************************************************************
*															 Funkcije za upravljanje AX-12A servoima                                                                                                                                      *
*************************************************************************************************************************************************************************************/

void AX_ReadStatus(void)
{
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	27 97       	sbiw	r28, 0x07	; 7
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
	 unsigned char status[7] = {0,0,0,0,0,0};
     9d2:	27 e0       	ldi	r18, 0x07	; 7
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	fc 01       	movw	r30, r24
     9da:	32 2f       	mov	r19, r18
     9dc:	11 92       	st	Z+, r1
     9de:	3a 95       	dec	r19
     9e0:	e9 f7       	brne	.-6      	; 0x9dc <AX_ReadStatus+0x1e>

	status[0] = AX_ReadChar();
     9e2:	0e 94 cd 04 	call	0x99a	; 0x99a <AX_ReadChar>
     9e6:	89 83       	std	Y+1, r24	; 0x01
	status[1] = AX_ReadChar();
     9e8:	0e 94 cd 04 	call	0x99a	; 0x99a <AX_ReadChar>
     9ec:	8a 83       	std	Y+2, r24	; 0x02
	status[2] = AX_ReadChar();
     9ee:	0e 94 cd 04 	call	0x99a	; 0x99a <AX_ReadChar>
     9f2:	8b 83       	std	Y+3, r24	; 0x03
	status[3] = AX_ReadChar();
     9f4:	0e 94 cd 04 	call	0x99a	; 0x99a <AX_ReadChar>
     9f8:	8c 83       	std	Y+4, r24	; 0x04
	status[4] = AX_ReadChar();
     9fa:	0e 94 cd 04 	call	0x99a	; 0x99a <AX_ReadChar>
     9fe:	8d 83       	std	Y+5, r24	; 0x05
	status[5] = AX_ReadChar();
     a00:	0e 94 cd 04 	call	0x99a	; 0x99a <AX_ReadChar>
     a04:	8e 83       	std	Y+6, r24	; 0x06
}
     a06:	27 96       	adiw	r28, 0x07	; 7
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <AX_StopTransmitter>:

void AX_StopTransmitter(void)
{
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
	while( !(UCSR1A & (1<<TXC1)) );
     a20:	00 00       	nop
     a22:	88 ec       	ldi	r24, 0xC8	; 200
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	fc 01       	movw	r30, r24
     a28:	80 81       	ld	r24, Z
     a2a:	88 2f       	mov	r24, r24
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	80 74       	andi	r24, 0x40	; 64
     a30:	99 27       	eor	r25, r25
     a32:	89 2b       	or	r24, r25
     a34:	b1 f3       	breq	.-20     	; 0xa22 <AX_StopTransmitter+0xa>
	UCSR1B &= 0xF7;
     a36:	89 ec       	ldi	r24, 0xC9	; 201
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	29 ec       	ldi	r18, 0xC9	; 201
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	f9 01       	movw	r30, r18
     a40:	20 81       	ld	r18, Z
     a42:	27 7f       	andi	r18, 0xF7	; 247
     a44:	fc 01       	movw	r30, r24
     a46:	20 83       	st	Z, r18
	UCSR1A |= 0x40;
     a48:	88 ec       	ldi	r24, 0xC8	; 200
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	28 ec       	ldi	r18, 0xC8	; 200
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	f9 01       	movw	r30, r18
     a52:	20 81       	ld	r18, Z
     a54:	20 64       	ori	r18, 0x40	; 64
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
}
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <AX_ReleaseTransmitter>:

void AX_ReleaseTransmitter(void)
{
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x08;
     a68:	89 ec       	ldi	r24, 0xC9	; 201
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	29 ec       	ldi	r18, 0xC9	; 201
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	f9 01       	movw	r30, r18
     a72:	20 81       	ld	r18, Z
     a74:	28 60       	ori	r18, 0x08	; 8
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <AX_StopReceiver>:

void AX_StopReceiver(void)
{
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
	UCSR1B &= 0xEF;
     a88:	89 ec       	ldi	r24, 0xC9	; 201
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	29 ec       	ldi	r18, 0xC9	; 201
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	f9 01       	movw	r30, r18
     a92:	20 81       	ld	r18, Z
     a94:	2f 7e       	andi	r18, 0xEF	; 239
     a96:	fc 01       	movw	r30, r24
     a98:	20 83       	st	Z, r18
}
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	08 95       	ret

00000aa0 <AX_ReleaseReceiver>:

void AX_ReleaseReceiver(void)
{
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
	UCSR1B |= 0x10;
     aa8:	89 ec       	ldi	r24, 0xC9	; 201
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	29 ec       	ldi	r18, 0xC9	; 201
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	f9 01       	movw	r30, r18
     ab2:	20 81       	ld	r18, Z
     ab4:	20 61       	ori	r18, 0x10	; 16
     ab6:	fc 01       	movw	r30, r24
     ab8:	20 83       	st	Z, r18
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <AX_SetAngle>:

void AX_SetAngle(unsigned int angle, unsigned int speed, unsigned char direction, unsigned char id)
{
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	6a 97       	sbiw	r28, 0x1a	; 26
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	9e 8b       	std	Y+22, r25	; 0x16
     ad6:	8d 8b       	std	Y+21, r24	; 0x15
     ad8:	78 8f       	std	Y+24, r23	; 0x18
     ada:	6f 8b       	std	Y+23, r22	; 0x17
     adc:	49 8f       	std	Y+25, r20	; 0x19
     ade:	2a 8f       	std	Y+26, r18	; 0x1a
	unsigned char angle_H, angle_L;
	unsigned char speed_H, speed_L;
	unsigned int checksum;

	angle = (unsigned int)(1023 *((double)angle/300.0));
     ae0:	8d 89       	ldd	r24, Y+21	; 0x15
     ae2:	9e 89       	ldd	r25, Y+22	; 0x16
     ae4:	cc 01       	movw	r24, r24
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	bc 01       	movw	r22, r24
     aec:	cd 01       	movw	r24, r26
     aee:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__floatunsisf>
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	46 e9       	ldi	r20, 0x96	; 150
     afc:	53 e4       	ldi	r21, 0x43	; 67
     afe:	bc 01       	movw	r22, r24
     b00:	cd 01       	movw	r24, r26
     b02:	0e 94 48 13 	call	0x2690	; 0x2690 <__divsf3>
     b06:	dc 01       	movw	r26, r24
     b08:	cb 01       	movw	r24, r22
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 ec       	ldi	r19, 0xC0	; 192
     b0e:	4f e7       	ldi	r20, 0x7F	; 127
     b10:	54 e4       	ldi	r21, 0x44	; 68
     b12:	bc 01       	movw	r22, r24
     b14:	cd 01       	movw	r24, r26
     b16:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     b1a:	dc 01       	movw	r26, r24
     b1c:	cb 01       	movw	r24, r22
     b1e:	bc 01       	movw	r22, r24
     b20:	cd 01       	movw	r24, r26
     b22:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     b26:	dc 01       	movw	r26, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	9e 8b       	std	Y+22, r25	; 0x16
     b2c:	8d 8b       	std	Y+21, r24	; 0x15

	angle_H = (unsigned char)(angle >> 8);
     b2e:	8d 89       	ldd	r24, Y+21	; 0x15
     b30:	9e 89       	ldd	r25, Y+22	; 0x16
     b32:	89 2f       	mov	r24, r25
     b34:	99 27       	eor	r25, r25
     b36:	89 83       	std	Y+1, r24	; 0x01
	angle_L = (unsigned char)(angle & 0x00FF);
     b38:	8d 89       	ldd	r24, Y+21	; 0x15
     b3a:	8a 83       	std	Y+2, r24	; 0x02

	speed |= (direction << 10);
     b3c:	89 8d       	ldd	r24, Y+25	; 0x19
     b3e:	88 2f       	mov	r24, r24
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	98 2f       	mov	r25, r24
     b44:	88 27       	eor	r24, r24
     b46:	99 0f       	add	r25, r25
     b48:	99 0f       	add	r25, r25
     b4a:	9c 01       	movw	r18, r24
     b4c:	8f 89       	ldd	r24, Y+23	; 0x17
     b4e:	98 8d       	ldd	r25, Y+24	; 0x18
     b50:	82 2b       	or	r24, r18
     b52:	93 2b       	or	r25, r19
     b54:	98 8f       	std	Y+24, r25	; 0x18
     b56:	8f 8b       	std	Y+23, r24	; 0x17
	speed_H = (unsigned char)(speed >> 8);
     b58:	8f 89       	ldd	r24, Y+23	; 0x17
     b5a:	98 8d       	ldd	r25, Y+24	; 0x18
     b5c:	89 2f       	mov	r24, r25
     b5e:	99 27       	eor	r25, r25
     b60:	8b 83       	std	Y+3, r24	; 0x03
	speed_L = (unsigned char)(speed & 0x00FF);
     b62:	8f 89       	ldd	r24, Y+23	; 0x17
     b64:	8c 83       	std	Y+4, r24	; 0x04

	/*
	* CHECKSUM = ~(ID + LENGTH + INSTR + PARAM0 (ADDRESS) + ... +PARAMN)
	*/
	checksum = ~(id + 0x28 + speed_H + speed_L + angle_H + angle_L);
     b66:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b68:	88 2f       	mov	r24, r24
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	9c 01       	movw	r18, r24
     b6e:	28 5d       	subi	r18, 0xD8	; 216
     b70:	3f 4f       	sbci	r19, 0xFF	; 255
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	28 0f       	add	r18, r24
     b7a:	39 1f       	adc	r19, r25
     b7c:	8c 81       	ldd	r24, Y+4	; 0x04
     b7e:	88 2f       	mov	r24, r24
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	28 0f       	add	r18, r24
     b84:	39 1f       	adc	r19, r25
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	88 2f       	mov	r24, r24
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	28 0f       	add	r18, r24
     b8e:	39 1f       	adc	r19, r25
     b90:	8a 81       	ldd	r24, Y+2	; 0x02
     b92:	88 2f       	mov	r24, r24
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	82 0f       	add	r24, r18
     b98:	93 1f       	adc	r25, r19
     b9a:	80 95       	com	r24
     b9c:	90 95       	com	r25
     b9e:	9e 83       	std	Y+6, r25	; 0x06
     ba0:	8d 83       	std	Y+5, r24	; 0x05

	AX_StopReceiver();
     ba2:	0e 94 40 05 	call	0xa80	; 0xa80 <AX_StopReceiver>

	AX_SendChar(START);
     ba6:	8f ef       	ldi	r24, 0xFF	; 255
     ba8:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(START);
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(id);
     bb2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bb4:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(LENGTH);
     bb8:	87 e0       	ldi	r24, 0x07	; 7
     bba:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(INSTR);
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(ADDRESS);
     bc4:	8e e1       	ldi	r24, 0x1E	; 30
     bc6:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(angle_L);
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(angle_H);
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(speed_L);
     bd6:	8c 81       	ldd	r24, Y+4	; 0x04
     bd8:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(speed_H);
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(checksum);
     be2:	8d 81       	ldd	r24, Y+5	; 0x05
     be4:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>

	AX_StopTransmitter();
     be8:	0e 94 0c 05 	call	0xa18	; 0xa18 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     bec:	0e 94 50 05 	call	0xaa0	; 0xaa0 <AX_ReleaseReceiver>
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a8 e4       	ldi	r26, 0x48	; 72
     bf6:	b2 e4       	ldi	r27, 0x42	; 66
     bf8:	8f 83       	std	Y+7, r24	; 0x07
     bfa:	98 87       	std	Y+8, r25	; 0x08
     bfc:	a9 87       	std	Y+9, r26	; 0x09
     bfe:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e4       	ldi	r19, 0x40	; 64
     c04:	4c e1       	ldi	r20, 0x1C	; 28
     c06:	55 e4       	ldi	r21, 0x45	; 69
     c08:	6f 81       	ldd	r22, Y+7	; 0x07
     c0a:	78 85       	ldd	r23, Y+8	; 0x08
     c0c:	89 85       	ldd	r24, Y+9	; 0x09
     c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c10:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	8b 87       	std	Y+11, r24	; 0x0b
     c1a:	9c 87       	std	Y+12, r25	; 0x0c
     c1c:	ad 87       	std	Y+13, r26	; 0x0d
     c1e:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e8       	ldi	r20, 0x80	; 128
     c26:	5f e3       	ldi	r21, 0x3F	; 63
     c28:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c30:	0e 94 43 13 	call	0x2686	; 0x2686 <__cmpsf2>
     c34:	88 23       	and	r24, r24
     c36:	2c f4       	brge	.+10     	; 0xc42 <AX_SetAngle+0x182>
		__ticks = 1;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	98 8b       	std	Y+16, r25	; 0x10
     c3e:	8f 87       	std	Y+15, r24	; 0x0f
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <AX_SetAngle+0x200>
	else if (__tmp > 65535)
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	3f ef       	ldi	r19, 0xFF	; 255
     c46:	4f e7       	ldi	r20, 0x7F	; 127
     c48:	57 e4       	ldi	r21, 0x47	; 71
     c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c50:	9e 85       	ldd	r25, Y+14	; 0x0e
     c52:	0e 94 9b 14 	call	0x2936	; 0x2936 <__gesf2>
     c56:	18 16       	cp	r1, r24
     c58:	4c f5       	brge	.+82     	; 0xcac <AX_SetAngle+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e2       	ldi	r20, 0x20	; 32
     c60:	51 e4       	ldi	r21, 0x41	; 65
     c62:	6f 81       	ldd	r22, Y+7	; 0x07
     c64:	78 85       	ldd	r23, Y+8	; 0x08
     c66:	89 85       	ldd	r24, Y+9	; 0x09
     c68:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6a:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	bc 01       	movw	r22, r24
     c74:	cd 01       	movw	r24, r26
     c76:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	98 8b       	std	Y+16, r25	; 0x10
     c80:	8f 87       	std	Y+15, r24	; 0x0f
     c82:	0f c0       	rjmp	.+30     	; 0xca2 <AX_SetAngle+0x1e2>
     c84:	8a ef       	ldi	r24, 0xFA	; 250
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	9a 8b       	std	Y+18, r25	; 0x12
     c8a:	89 8b       	std	Y+17, r24	; 0x11
     c8c:	89 89       	ldd	r24, Y+17	; 0x11
     c8e:	9a 89       	ldd	r25, Y+18	; 0x12
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <AX_SetAngle+0x1d0>
     c94:	9a 8b       	std	Y+18, r25	; 0x12
     c96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c98:	8f 85       	ldd	r24, Y+15	; 0x0f
     c9a:	98 89       	ldd	r25, Y+16	; 0x10
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	98 8b       	std	Y+16, r25	; 0x10
     ca0:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca4:	98 89       	ldd	r25, Y+16	; 0x10
     ca6:	89 2b       	or	r24, r25
     ca8:	69 f7       	brne	.-38     	; 0xc84 <AX_SetAngle+0x1c4>
     caa:	14 c0       	rjmp	.+40     	; 0xcd4 <AX_SetAngle+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cac:	6b 85       	ldd	r22, Y+11	; 0x0b
     cae:	7c 85       	ldd	r23, Y+12	; 0x0c
     cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb4:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	98 8b       	std	Y+16, r25	; 0x10
     cbe:	8f 87       	std	Y+15, r24	; 0x0f
     cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc2:	98 89       	ldd	r25, Y+16	; 0x10
     cc4:	9c 8b       	std	Y+20, r25	; 0x14
     cc6:	8b 8b       	std	Y+19, r24	; 0x13
     cc8:	8b 89       	ldd	r24, Y+19	; 0x13
     cca:	9c 89       	ldd	r25, Y+20	; 0x14
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <AX_SetAngle+0x20c>
     cd0:	9c 8b       	std	Y+20, r25	; 0x14
     cd2:	8b 8b       	std	Y+19, r24	; 0x13

	_delay_ms(50);

	AX_ReleaseTransmitter();
     cd4:	0e 94 30 05 	call	0xa60	; 0xa60 <AX_ReleaseTransmitter>
}
     cd8:	6a 96       	adiw	r28, 0x1a	; 26
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <AX_EndlessTurn>:


void AX_EndlessTurn(void)
{
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	60 97       	sbiw	r28, 0x10	; 16
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61

	unsigned int checksum;

	checksum = ~(0x01 + 0x07 + 0x03 + 0x06 + (1023 & 0xFF) + (1023 >> 8) & 0xFF);
     cfe:	8c ee       	ldi	r24, 0xEC	; 236
     d00:	9f ef       	ldi	r25, 0xFF	; 255
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	89 83       	std	Y+1, r24	; 0x01

	AX_StopReceiver();
     d06:	0e 94 40 05 	call	0xa80	; 0xa80 <AX_StopReceiver>

	AX_SendChar(0xFF);
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
     d0c:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(0xFF);
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(0x01);
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(0x07);
     d1c:	87 e0       	ldi	r24, 0x07	; 7
     d1e:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(0x03);
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(0x06);
     d28:	86 e0       	ldi	r24, 0x06	; 6
     d2a:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(0x00);
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(0x00);
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(1023 & 0xFF);
     d3a:	8f ef       	ldi	r24, 0xFF	; 255
     d3c:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(1023 >> 8);
     d40:	83 e0       	ldi	r24, 0x03	; 3
     d42:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(checksum);
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>

	AX_StopTransmitter();
     d4c:	0e 94 0c 05 	call	0xa18	; 0xa18 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     d50:	0e 94 50 05 	call	0xaa0	; 0xaa0 <AX_ReleaseReceiver>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a8 e4       	ldi	r26, 0x48	; 72
     d5a:	b2 e4       	ldi	r27, 0x42	; 66
     d5c:	8b 83       	std	Y+3, r24	; 0x03
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	ad 83       	std	Y+5, r26	; 0x05
     d62:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e4       	ldi	r19, 0x40	; 64
     d68:	4c e1       	ldi	r20, 0x1C	; 28
     d6a:	55 e4       	ldi	r21, 0x45	; 69
     d6c:	6b 81       	ldd	r22, Y+3	; 0x03
     d6e:	7c 81       	ldd	r23, Y+4	; 0x04
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	8f 83       	std	Y+7, r24	; 0x07
     d7e:	98 87       	std	Y+8, r25	; 0x08
     d80:	a9 87       	std	Y+9, r26	; 0x09
     d82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e8       	ldi	r20, 0x80	; 128
     d8a:	5f e3       	ldi	r21, 0x3F	; 63
     d8c:	6f 81       	ldd	r22, Y+7	; 0x07
     d8e:	78 85       	ldd	r23, Y+8	; 0x08
     d90:	89 85       	ldd	r24, Y+9	; 0x09
     d92:	9a 85       	ldd	r25, Y+10	; 0x0a
     d94:	0e 94 43 13 	call	0x2686	; 0x2686 <__cmpsf2>
     d98:	88 23       	and	r24, r24
     d9a:	2c f4       	brge	.+10     	; 0xda6 <AX_EndlessTurn+0xbc>
		__ticks = 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	9c 87       	std	Y+12, r25	; 0x0c
     da2:	8b 87       	std	Y+11, r24	; 0x0b
     da4:	3f c0       	rjmp	.+126    	; 0xe24 <AX_EndlessTurn+0x13a>
	else if (__tmp > 65535)
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	3f ef       	ldi	r19, 0xFF	; 255
     daa:	4f e7       	ldi	r20, 0x7F	; 127
     dac:	57 e4       	ldi	r21, 0x47	; 71
     dae:	6f 81       	ldd	r22, Y+7	; 0x07
     db0:	78 85       	ldd	r23, Y+8	; 0x08
     db2:	89 85       	ldd	r24, Y+9	; 0x09
     db4:	9a 85       	ldd	r25, Y+10	; 0x0a
     db6:	0e 94 9b 14 	call	0x2936	; 0x2936 <__gesf2>
     dba:	18 16       	cp	r1, r24
     dbc:	4c f5       	brge	.+82     	; 0xe10 <AX_EndlessTurn+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e2       	ldi	r20, 0x20	; 32
     dc4:	51 e4       	ldi	r21, 0x41	; 65
     dc6:	6b 81       	ldd	r22, Y+3	; 0x03
     dc8:	7c 81       	ldd	r23, Y+4	; 0x04
     dca:	8d 81       	ldd	r24, Y+5	; 0x05
     dcc:	9e 81       	ldd	r25, Y+6	; 0x06
     dce:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	bc 01       	movw	r22, r24
     dd8:	cd 01       	movw	r24, r26
     dda:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	9c 87       	std	Y+12, r25	; 0x0c
     de4:	8b 87       	std	Y+11, r24	; 0x0b
     de6:	0f c0       	rjmp	.+30     	; 0xe06 <AX_EndlessTurn+0x11c>
     de8:	8a ef       	ldi	r24, 0xFA	; 250
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	9e 87       	std	Y+14, r25	; 0x0e
     dee:	8d 87       	std	Y+13, r24	; 0x0d
     df0:	8d 85       	ldd	r24, Y+13	; 0x0d
     df2:	9e 85       	ldd	r25, Y+14	; 0x0e
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <AX_EndlessTurn+0x10a>
     df8:	9e 87       	std	Y+14, r25	; 0x0e
     dfa:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfc:	8b 85       	ldd	r24, Y+11	; 0x0b
     dfe:	9c 85       	ldd	r25, Y+12	; 0x0c
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	9c 87       	std	Y+12, r25	; 0x0c
     e04:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e06:	8b 85       	ldd	r24, Y+11	; 0x0b
     e08:	9c 85       	ldd	r25, Y+12	; 0x0c
     e0a:	89 2b       	or	r24, r25
     e0c:	69 f7       	brne	.-38     	; 0xde8 <AX_EndlessTurn+0xfe>
     e0e:	14 c0       	rjmp	.+40     	; 0xe38 <AX_EndlessTurn+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e10:	6f 81       	ldd	r22, Y+7	; 0x07
     e12:	78 85       	ldd	r23, Y+8	; 0x08
     e14:	89 85       	ldd	r24, Y+9	; 0x09
     e16:	9a 85       	ldd	r25, Y+10	; 0x0a
     e18:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	9c 87       	std	Y+12, r25	; 0x0c
     e22:	8b 87       	std	Y+11, r24	; 0x0b
     e24:	8b 85       	ldd	r24, Y+11	; 0x0b
     e26:	9c 85       	ldd	r25, Y+12	; 0x0c
     e28:	98 8b       	std	Y+16, r25	; 0x10
     e2a:	8f 87       	std	Y+15, r24	; 0x0f
     e2c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e2e:	98 89       	ldd	r25, Y+16	; 0x10
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <AX_EndlessTurn+0x146>
     e34:	98 8b       	std	Y+16, r25	; 0x10
     e36:	8f 87       	std	Y+15, r24	; 0x0f

	//AX_ReadStatus();
	_delay_ms(50);

	AX_ReleaseTransmitter();
     e38:	0e 94 30 05 	call	0xa60	; 0xa60 <AX_ReleaseTransmitter>
}
     e3c:	60 96       	adiw	r28, 0x10	; 16
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	08 95       	ret

00000e4e <AX_SetSpeed>:

void AX_SetSpeed(unsigned int direction, unsigned int speed)
{
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	28 97       	sbiw	r28, 0x08	; 8
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	9e 83       	std	Y+6, r25	; 0x06
     e64:	8d 83       	std	Y+5, r24	; 0x05
     e66:	78 87       	std	Y+8, r23	; 0x08
     e68:	6f 83       	std	Y+7, r22	; 0x07
	/*
		direction ---> TurnDirection -> 1 - ClockWise   0 - CounterClockWise
	*/

	unsigned int data = 0x0000;
     e6a:	1a 82       	std	Y+2, r1	; 0x02
     e6c:	19 82       	std	Y+1, r1	; 0x01
	unsigned int checksum = 0;
     e6e:	1c 82       	std	Y+4, r1	; 0x04
     e70:	1b 82       	std	Y+3, r1	; 0x03

	data = speed;
     e72:	8f 81       	ldd	r24, Y+7	; 0x07
     e74:	98 85       	ldd	r25, Y+8	; 0x08
     e76:	9a 83       	std	Y+2, r25	; 0x02
     e78:	89 83       	std	Y+1, r24	; 0x01
	data |= (direction << 10);
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	98 2f       	mov	r25, r24
     e80:	88 27       	eor	r24, r24
     e82:	99 0f       	add	r25, r25
     e84:	99 0f       	add	r25, r25
     e86:	29 81       	ldd	r18, Y+1	; 0x01
     e88:	3a 81       	ldd	r19, Y+2	; 0x02
     e8a:	82 2b       	or	r24, r18
     e8c:	93 2b       	or	r25, r19
     e8e:	9a 83       	std	Y+2, r25	; 0x02
     e90:	89 83       	std	Y+1, r24	; 0x01


	checksum = ~(0x01 + 0x05 + 0x03 + 0x20 + data);
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	89 96       	adiw	r24, 0x29	; 41
     e98:	80 95       	com	r24
     e9a:	90 95       	com	r25
     e9c:	9c 83       	std	Y+4, r25	; 0x04
     e9e:	8b 83       	std	Y+3, r24	; 0x03

	AX_StopReceiver();
     ea0:	0e 94 40 05 	call	0xa80	; 0xa80 <AX_StopReceiver>

	AX_SendChar(0xFF);
     ea4:	8f ef       	ldi	r24, 0xFF	; 255
     ea6:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(0xFF);
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
     eac:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(0x01);
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(0x05);
     eb6:	85 e0       	ldi	r24, 0x05	; 5
     eb8:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(0x03);
     ebc:	83 e0       	ldi	r24, 0x03	; 3
     ebe:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(0x20);
     ec2:	80 e2       	ldi	r24, 0x20	; 32
     ec4:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(data);
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(data >> 8);
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	89 2f       	mov	r24, r25
     ed4:	99 27       	eor	r25, r25
     ed6:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>
	AX_SendChar(checksum);
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	0e 94 b3 04 	call	0x966	; 0x966 <AX_SendChar>

	AX_StopTransmitter();
     ee0:	0e 94 0c 05 	call	0xa18	; 0xa18 <AX_StopTransmitter>
	AX_ReleaseReceiver();
     ee4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <AX_ReleaseReceiver>

	AX_ReadStatus();
     ee8:	0e 94 df 04 	call	0x9be	; 0x9be <AX_ReadStatus>

	AX_ReleaseTransmitter();
     eec:	0e 94 30 05 	call	0xa60	; 0xa60 <AX_ReleaseTransmitter>
}
     ef0:	28 96       	adiw	r28, 0x08	; 8
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	08 95       	ret

00000f02 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	00 d0       	rcall	.+0      	; 0xf08 <__list_add+0x6>
     f08:	00 d0       	rcall	.+0      	; 0xf0a <__list_add+0x8>
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <__list_add+0xa>
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	7c 83       	std	Y+4, r23	; 0x04
     f16:	6b 83       	std	Y+3, r22	; 0x03
     f18:	5e 83       	std	Y+6, r21	; 0x06
     f1a:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	29 81       	ldd	r18, Y+1	; 0x01
     f22:	3a 81       	ldd	r19, Y+2	; 0x02
     f24:	fc 01       	movw	r30, r24
     f26:	31 83       	std	Z+1, r19	; 0x01
     f28:	20 83       	st	Z, r18
    new->next = next;
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	2d 81       	ldd	r18, Y+5	; 0x05
     f30:	3e 81       	ldd	r19, Y+6	; 0x06
     f32:	fc 01       	movw	r30, r24
     f34:	33 83       	std	Z+3, r19	; 0x03
     f36:	22 83       	std	Z+2, r18	; 0x02
    new->prev = prev;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	9a 81       	ldd	r25, Y+2	; 0x02
     f3c:	2b 81       	ldd	r18, Y+3	; 0x03
     f3e:	3c 81       	ldd	r19, Y+4	; 0x04
     f40:	fc 01       	movw	r30, r24
     f42:	31 83       	std	Z+1, r19	; 0x01
     f44:	20 83       	st	Z, r18
    prev->next = new;
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	9c 81       	ldd	r25, Y+4	; 0x04
     f4a:	29 81       	ldd	r18, Y+1	; 0x01
     f4c:	3a 81       	ldd	r19, Y+2	; 0x02
     f4e:	fc 01       	movw	r30, r24
     f50:	33 83       	std	Z+3, r19	; 0x03
     f52:	22 83       	std	Z+2, r18	; 0x02
}
     f54:	26 96       	adiw	r28, 0x06	; 6
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	08 95       	ret

00000f66 <list_add>:

static inline void list_add(struct list_head* new, struct list_head* head)
{
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <list_add+0x6>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <list_add+0x8>
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	9a 83       	std	Y+2, r25	; 0x02
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	7c 83       	std	Y+4, r23	; 0x04
     f78:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	9c 81       	ldd	r25, Y+4	; 0x04
     f7e:	fc 01       	movw	r30, r24
     f80:	42 81       	ldd	r20, Z+2	; 0x02
     f82:	53 81       	ldd	r21, Z+3	; 0x03
     f84:	2b 81       	ldd	r18, Y+3	; 0x03
     f86:	3c 81       	ldd	r19, Y+4	; 0x04
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	b9 01       	movw	r22, r18
     f8e:	0e 94 81 07 	call	0xf02	; 0xf02 <__list_add>
}
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	08 95       	ret

00000fa0 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	2b 97       	sbiw	r28, 0x0b	; 11
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	89 87       	std	Y+9, r24	; 0x09
     fb6:	6a 87       	std	Y+10, r22	; 0x0a
     fb8:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     fba:	80 91 08 01 	lds	r24, 0x0108
     fbe:	90 91 09 01 	lds	r25, 0x0109
     fc2:	9c 83       	std	Y+4, r25	; 0x04
     fc4:	8b 83       	std	Y+3, r24	; 0x03
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	9c 81       	ldd	r25, Y+4	; 0x04
     fca:	06 97       	sbiw	r24, 0x06	; 6
     fcc:	9a 83       	std	Y+2, r25	; 0x02
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	15 c0       	rjmp	.+42     	; 0xffc <gpio_register_pin+0x5c>
    {
        if(input->pin == pin)
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	9a 81       	ldd	r25, Y+2	; 0x02
     fd6:	fc 01       	movw	r30, r24
     fd8:	90 81       	ld	r25, Z
     fda:	89 85       	ldd	r24, Y+9	; 0x09
     fdc:	98 17       	cp	r25, r24
     fde:	11 f4       	brne	.+4      	; 0xfe4 <gpio_register_pin+0x44>
            return 1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	e5 c0       	rjmp	.+458    	; 0x11ae <__stack+0xaf>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	fc 01       	movw	r30, r24
     fea:	80 85       	ldd	r24, Z+8	; 0x08
     fec:	91 85       	ldd	r25, Z+9	; 0x09
     fee:	9e 83       	std	Y+6, r25	; 0x06
     ff0:	8d 83       	std	Y+5, r24	; 0x05
     ff2:	8d 81       	ldd	r24, Y+5	; 0x05
     ff4:	9e 81       	ldd	r25, Y+6	; 0x06
     ff6:	06 97       	sbiw	r24, 0x06	; 6
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    1000:	06 96       	adiw	r24, 0x06	; 6
    1002:	86 50       	subi	r24, 0x06	; 6
    1004:	91 40       	sbci	r25, 0x01	; 1
    1006:	29 f7       	brne	.-54     	; 0xfd2 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
    1008:	89 85       	ldd	r24, Y+9	; 0x09
    100a:	86 95       	lsr	r24
    100c:	86 95       	lsr	r24
    100e:	86 95       	lsr	r24
    1010:	8f 5f       	subi	r24, 0xFF	; 255
    1012:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t pin_reg = pin % 8;
    1014:	89 85       	ldd	r24, Y+9	; 0x09
    1016:	87 70       	andi	r24, 0x07	; 7
    1018:	88 87       	std	Y+8, r24	; 0x08

	if(direction == GPIO_DIRECTION_OUTPUT)
    101a:	8a 85       	ldd	r24, Y+10	; 0x0a
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	09 f0       	breq	.+2      	; 0x1022 <gpio_register_pin+0x82>
    1020:	55 c0       	rjmp	.+170    	; 0x10cc <gpio_register_pin+0x12c>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
    1022:	8f 81       	ldd	r24, Y+7	; 0x07
    1024:	88 2f       	mov	r24, r24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	9c 01       	movw	r18, r24
    102a:	21 50       	subi	r18, 0x01	; 1
    102c:	31 09       	sbc	r19, r1
    102e:	c9 01       	movw	r24, r18
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	82 0f       	add	r24, r18
    1036:	93 1f       	adc	r25, r19
    1038:	81 96       	adiw	r24, 0x21	; 33
    103a:	ac 01       	movw	r20, r24
    103c:	8f 81       	ldd	r24, Y+7	; 0x07
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9c 01       	movw	r18, r24
    1044:	21 50       	subi	r18, 0x01	; 1
    1046:	31 09       	sbc	r19, r1
    1048:	c9 01       	movw	r24, r18
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	82 0f       	add	r24, r18
    1050:	93 1f       	adc	r25, r19
    1052:	81 96       	adiw	r24, 0x21	; 33
    1054:	fc 01       	movw	r30, r24
    1056:	80 81       	ld	r24, Z
    1058:	68 2f       	mov	r22, r24
    105a:	88 85       	ldd	r24, Y+8	; 0x08
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <gpio_register_pin+0xca>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	2a 95       	dec	r18
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <gpio_register_pin+0xc6>
    106e:	86 2b       	or	r24, r22
    1070:	fa 01       	movw	r30, r20
    1072:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    1074:	8f 81       	ldd	r24, Y+7	; 0x07
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9c 01       	movw	r18, r24
    107c:	21 50       	subi	r18, 0x01	; 1
    107e:	31 09       	sbc	r19, r1
    1080:	c9 01       	movw	r24, r18
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	82 0f       	add	r24, r18
    1088:	93 1f       	adc	r25, r19
    108a:	82 96       	adiw	r24, 0x22	; 34
    108c:	ac 01       	movw	r20, r24
    108e:	8f 81       	ldd	r24, Y+7	; 0x07
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	9c 01       	movw	r18, r24
    1096:	21 50       	subi	r18, 0x01	; 1
    1098:	31 09       	sbc	r19, r1
    109a:	c9 01       	movw	r24, r18
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	82 0f       	add	r24, r18
    10a2:	93 1f       	adc	r25, r19
    10a4:	82 96       	adiw	r24, 0x22	; 34
    10a6:	fc 01       	movw	r30, r24
    10a8:	80 81       	ld	r24, Z
    10aa:	68 2f       	mov	r22, r24
    10ac:	88 85       	ldd	r24, Y+8	; 0x08
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <gpio_register_pin+0x11c>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	2a 95       	dec	r18
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <gpio_register_pin+0x118>
    10c0:	80 95       	com	r24
    10c2:	86 23       	and	r24, r22
    10c4:	fa 01       	movw	r30, r20
    10c6:	80 83       	st	Z, r24
        return 0;
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	71 c0       	rjmp	.+226    	; 0x11ae <__stack+0xaf>
	}
	else
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
    10cc:	8f 81       	ldd	r24, Y+7	; 0x07
    10ce:	88 2f       	mov	r24, r24
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9c 01       	movw	r18, r24
    10d4:	21 50       	subi	r18, 0x01	; 1
    10d6:	31 09       	sbc	r19, r1
    10d8:	c9 01       	movw	r24, r18
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	82 0f       	add	r24, r18
    10e0:	93 1f       	adc	r25, r19
    10e2:	81 96       	adiw	r24, 0x21	; 33
    10e4:	ac 01       	movw	r20, r24
    10e6:	8f 81       	ldd	r24, Y+7	; 0x07
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	9c 01       	movw	r18, r24
    10ee:	21 50       	subi	r18, 0x01	; 1
    10f0:	31 09       	sbc	r19, r1
    10f2:	c9 01       	movw	r24, r18
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	82 0f       	add	r24, r18
    10fa:	93 1f       	adc	r25, r19
    10fc:	81 96       	adiw	r24, 0x21	; 33
    10fe:	fc 01       	movw	r30, r24
    1100:	80 81       	ld	r24, Z
    1102:	68 2f       	mov	r22, r24
    1104:	88 85       	ldd	r24, Y+8	; 0x08
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <__stack+0x15>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	2a 95       	dec	r18
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <__stack+0x11>
    1118:	80 95       	com	r24
    111a:	86 23       	and	r24, r22
    111c:	fa 01       	movw	r30, r20
    111e:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) |= (1 << pin_reg);
    1120:	8f 81       	ldd	r24, Y+7	; 0x07
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	9c 01       	movw	r18, r24
    1128:	21 50       	subi	r18, 0x01	; 1
    112a:	31 09       	sbc	r19, r1
    112c:	c9 01       	movw	r24, r18
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	82 0f       	add	r24, r18
    1134:	93 1f       	adc	r25, r19
    1136:	82 96       	adiw	r24, 0x22	; 34
    1138:	ac 01       	movw	r20, r24
    113a:	8f 81       	ldd	r24, Y+7	; 0x07
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	9c 01       	movw	r18, r24
    1142:	21 50       	subi	r18, 0x01	; 1
    1144:	31 09       	sbc	r19, r1
    1146:	c9 01       	movw	r24, r18
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	82 0f       	add	r24, r18
    114e:	93 1f       	adc	r25, r19
    1150:	82 96       	adiw	r24, 0x22	; 34
    1152:	fc 01       	movw	r30, r24
    1154:	80 81       	ld	r24, Z
    1156:	68 2f       	mov	r22, r24
    1158:	88 85       	ldd	r24, Y+8	; 0x08
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <__stack+0x69>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	2a 95       	dec	r18
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <__stack+0x65>
    116c:	86 2b       	or	r24, r22
    116e:	fa 01       	movw	r30, r20
    1170:	80 83       	st	Z, r24
	}

	input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
    1172:	8a e0       	ldi	r24, 0x0A	; 10
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <malloc>
    117a:	9a 83       	std	Y+2, r25	; 0x02
    117c:	89 83       	std	Y+1, r24	; 0x01

    if(input == NULL)
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	89 2b       	or	r24, r25
    1184:	11 f4       	brne	.+4      	; 0x118a <__stack+0x8b>
        return 1;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	12 c0       	rjmp	.+36     	; 0x11ae <__stack+0xaf>

    input->pin       = pin;
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	29 85       	ldd	r18, Y+9	; 0x09
    1190:	fc 01       	movw	r30, r24
    1192:	20 83       	st	Z, r18
    input->pulled_up = pulled_up;
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	2b 85       	ldd	r18, Y+11	; 0x0b
    119a:	fc 01       	movw	r30, r24
    119c:	21 83       	std	Z+1, r18	; 0x01
    list_add(&input->list, &gpio_inputs);
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	06 96       	adiw	r24, 0x06	; 6
    11a4:	66 e0       	ldi	r22, 0x06	; 6
    11a6:	71 e0       	ldi	r23, 0x01	; 1
    11a8:	0e 94 b3 07 	call	0xf66	; 0xf66 <list_add>

    return 0;
    11ac:	80 e0       	ldi	r24, 0x00	; 0
}
    11ae:	2b 96       	adiw	r28, 0x0b	; 11
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	08 95       	ret

000011c0 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <gpio_write_pin+0x6>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <gpio_write_pin+0x8>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	8b 83       	std	Y+3, r24	; 0x03
    11ce:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	86 95       	lsr	r24
    11d4:	86 95       	lsr	r24
    11d6:	86 95       	lsr	r24
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	89 83       	std	Y+1, r24	; 0x01
	pin = pin % 8;
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	87 70       	andi	r24, 0x07	; 7
    11e0:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	9c 01       	movw	r18, r24
    11ea:	21 50       	subi	r18, 0x01	; 1
    11ec:	31 09       	sbc	r19, r1
    11ee:	c9 01       	movw	r24, r18
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	82 0f       	add	r24, r18
    11f6:	93 1f       	adc	r25, r19
    11f8:	82 96       	adiw	r24, 0x22	; 34
    11fa:	fc 01       	movw	r30, r24
    11fc:	80 81       	ld	r24, Z
    11fe:	91 81       	ldd	r25, Z+1	; 0x01
    1200:	a2 81       	ldd	r26, Z+2	; 0x02
    1202:	b3 81       	ldd	r27, Z+3	; 0x03
    1204:	8a 83       	std	Y+2, r24	; 0x02
	if(value != 0)
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	88 23       	and	r24, r24
    120a:	31 f1       	breq	.+76     	; 0x1258 <gpio_write_pin+0x98>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	88 2f       	mov	r24, r24
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9c 01       	movw	r18, r24
    1214:	21 50       	subi	r18, 0x01	; 1
    1216:	31 09       	sbc	r19, r1
    1218:	c9 01       	movw	r24, r18
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	82 0f       	add	r24, r18
    1220:	93 1f       	adc	r25, r19
    1222:	82 96       	adiw	r24, 0x22	; 34
    1224:	ac 01       	movw	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	68 2f       	mov	r22, r24
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 c0       	rjmp	.+4      	; 0x123c <gpio_write_pin+0x7c>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	6a 95       	dec	r22
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <gpio_write_pin+0x78>
    1240:	82 2b       	or	r24, r18
    1242:	93 2b       	or	r25, r19
    1244:	09 2e       	mov	r0, r25
    1246:	00 0c       	add	r0, r0
    1248:	aa 0b       	sbc	r26, r26
    124a:	bb 0b       	sbc	r27, r27
    124c:	fa 01       	movw	r30, r20
    124e:	80 83       	st	Z, r24
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	a2 83       	std	Z+2, r26	; 0x02
    1254:	b3 83       	std	Z+3, r27	; 0x03
    1256:	27 c0       	rjmp	.+78     	; 0x12a6 <gpio_write_pin+0xe6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9c 01       	movw	r18, r24
    1260:	21 50       	subi	r18, 0x01	; 1
    1262:	31 09       	sbc	r19, r1
    1264:	c9 01       	movw	r24, r18
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	82 0f       	add	r24, r18
    126c:	93 1f       	adc	r25, r19
    126e:	82 96       	adiw	r24, 0x22	; 34
    1270:	ac 01       	movw	r20, r24
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	68 2f       	mov	r22, r24
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <gpio_write_pin+0xc8>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	6a 95       	dec	r22
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <gpio_write_pin+0xc4>
    128c:	80 95       	com	r24
    128e:	90 95       	com	r25
    1290:	82 23       	and	r24, r18
    1292:	93 23       	and	r25, r19
    1294:	09 2e       	mov	r0, r25
    1296:	00 0c       	add	r0, r0
    1298:	aa 0b       	sbc	r26, r26
    129a:	bb 0b       	sbc	r27, r27
    129c:	fa 01       	movw	r30, r20
    129e:	80 83       	st	Z, r24
    12a0:	91 83       	std	Z+1, r25	; 0x01
    12a2:	a2 83       	std	Z+2, r26	; 0x02
    12a4:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    12a6:	80 e0       	ldi	r24, 0x00	; 0
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	08 95       	ret

000012b6 <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <__gpio_read_pin+0x6>
    12bc:	1f 92       	push	r1
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	86 95       	lsr	r24
    12c8:	86 95       	lsr	r24
    12ca:	86 95       	lsr	r24
    12cc:	8f 5f       	subi	r24, 0xFF	; 255
    12ce:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	87 70       	andi	r24, 0x07	; 7
    12d4:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9c 01       	movw	r18, r24
    12de:	21 50       	subi	r18, 0x01	; 1
    12e0:	31 09       	sbc	r19, r1
    12e2:	c9 01       	movw	r24, r18
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	82 0f       	add	r24, r18
    12ea:	93 1f       	adc	r25, r19
    12ec:	80 96       	adiw	r24, 0x20	; 32
    12ee:	fc 01       	movw	r30, r24
    12f0:	80 81       	ld	r24, Z
    12f2:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	2b 81       	ldd	r18, Y+3	; 0x03
    12fc:	22 2f       	mov	r18, r18
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <__gpio_read_pin+0x50>
    1302:	95 95       	asr	r25
    1304:	87 95       	ror	r24
    1306:	2a 95       	dec	r18
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <__gpio_read_pin+0x4c>
    130a:	81 70       	andi	r24, 0x01	; 1
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	08 95       	ret

00001318 <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	29 97       	sbiw	r28, 0x09	; 9
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    132e:	80 91 08 01 	lds	r24, 0x0108
    1332:	90 91 09 01 	lds	r25, 0x0109
    1336:	9d 83       	std	Y+5, r25	; 0x05
    1338:	8c 83       	std	Y+4, r24	; 0x04
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	06 97       	sbiw	r24, 0x06	; 6
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	55 c0       	rjmp	.+170    	; 0x13f0 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	9a 81       	ldd	r25, Y+2	; 0x02
    134a:	fc 01       	movw	r30, r24
    134c:	90 81       	ld	r25, Z
    134e:	89 85       	ldd	r24, Y+9	; 0x09
    1350:	98 17       	cp	r25, r24
    1352:	09 f0       	breq	.+2      	; 0x1356 <gpio_read_pin+0x3e>
    1354:	41 c0       	rjmp	.+130    	; 0x13d8 <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
    1356:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1358:	1f c0       	rjmp	.+62     	; 0x1398 <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	88 2f       	mov	r24, r24
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	29 81       	ldd	r18, Y+1	; 0x01
    1362:	3a 81       	ldd	r19, Y+2	; 0x02
    1364:	82 0f       	add	r24, r18
    1366:	93 1f       	adc	r25, r19
    1368:	02 96       	adiw	r24, 0x02	; 2
    136a:	fc 01       	movw	r30, r24
    136c:	40 81       	ld	r20, Z
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	29 81       	ldd	r18, Y+1	; 0x01
    1378:	3a 81       	ldd	r19, Y+2	; 0x02
    137a:	82 0f       	add	r24, r18
    137c:	93 1f       	adc	r25, r19
    137e:	02 96       	adiw	r24, 0x02	; 2
    1380:	fc 01       	movw	r30, r24
    1382:	80 81       	ld	r24, Z
    1384:	48 17       	cp	r20, r24
    1386:	29 f0       	breq	.+10     	; 0x1392 <gpio_read_pin+0x7a>
                    return input->previous_state;
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	9a 81       	ldd	r25, Y+2	; 0x02
    138c:	fc 01       	movw	r30, r24
    138e:	85 81       	ldd	r24, Z+5	; 0x05
    1390:	37 c0       	rjmp	.+110    	; 0x1400 <gpio_read_pin+0xe8>
                i++;
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	8f 5f       	subi	r24, 0xFF	; 255
    1396:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	82 30       	cpi	r24, 0x02	; 2
    139c:	f0 f2       	brcs	.-68     	; 0x135a <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	fc 01       	movw	r30, r24
    13a4:	91 81       	ldd	r25, Z+1	; 0x01
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	89 27       	eor	r24, r25
    13aa:	88 23       	and	r24, r24
    13ac:	29 f0       	breq	.+10     	; 0x13b8 <gpio_read_pin+0xa0>
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	fc 01       	movw	r30, r24
    13b4:	82 81       	ldd	r24, Z+2	; 0x02
    13b6:	08 c0       	rjmp	.+16     	; 0x13c8 <gpio_read_pin+0xb0>
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	9a 81       	ldd	r25, Y+2	; 0x02
    13bc:	fc 01       	movw	r30, r24
    13be:	92 81       	ldd	r25, Z+2	; 0x02
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	99 23       	and	r25, r25
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <gpio_read_pin+0xb0>
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	9a 81       	ldd	r25, Y+2	; 0x02
    13ce:	28 85       	ldd	r18, Y+8	; 0x08
    13d0:	fc 01       	movw	r30, r24
    13d2:	25 83       	std	Z+5, r18	; 0x05

            return state;
    13d4:	88 85       	ldd	r24, Y+8	; 0x08
    13d6:	14 c0       	rjmp	.+40     	; 0x1400 <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	9a 81       	ldd	r25, Y+2	; 0x02
    13dc:	fc 01       	movw	r30, r24
    13de:	80 85       	ldd	r24, Z+8	; 0x08
    13e0:	91 85       	ldd	r25, Z+9	; 0x09
    13e2:	9f 83       	std	Y+7, r25	; 0x07
    13e4:	8e 83       	std	Y+6, r24	; 0x06
    13e6:	8e 81       	ldd	r24, Y+6	; 0x06
    13e8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ea:	06 97       	sbiw	r24, 0x06	; 6
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	9a 81       	ldd	r25, Y+2	; 0x02
    13f4:	06 96       	adiw	r24, 0x06	; 6
    13f6:	86 50       	subi	r24, 0x06	; 6
    13f8:	91 40       	sbci	r25, 0x01	; 1
    13fa:	09 f0       	breq	.+2      	; 0x13fe <gpio_read_pin+0xe6>
    13fc:	a4 cf       	rjmp	.-184    	; 0x1346 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
}
    1400:	29 96       	adiw	r28, 0x09	; 9
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	08 95       	ret

00001412 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	00 d0       	rcall	.+0      	; 0x141c <gpio_debouncer+0xa>
    141c:	00 d0       	rcall	.+0      	; 0x141e <gpio_debouncer+0xc>
    141e:	00 d0       	rcall	.+0      	; 0x1420 <gpio_debouncer+0xe>
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1424:	80 91 08 01 	lds	r24, 0x0108
    1428:	90 91 09 01 	lds	r25, 0x0109
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	8b 83       	std	Y+3, r24	; 0x03
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	9c 81       	ldd	r25, Y+4	; 0x04
    1434:	06 97       	sbiw	r24, 0x06	; 6
    1436:	9a 83       	std	Y+2, r25	; 0x02
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	1e c0       	rjmp	.+60     	; 0x1478 <gpio_debouncer+0x66>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    143c:	00 91 0c 01 	lds	r16, 0x010C
    1440:	10 91 0d 01 	lds	r17, 0x010D
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
    1448:	fc 01       	movw	r30, r24
    144a:	80 81       	ld	r24, Z
    144c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__gpio_read_pin>
    1450:	28 2f       	mov	r18, r24
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	80 0f       	add	r24, r16
    1458:	91 1f       	adc	r25, r17
    145a:	02 96       	adiw	r24, 0x02	; 2
    145c:	fc 01       	movw	r30, r24
    145e:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	9a 81       	ldd	r25, Y+2	; 0x02
    1464:	fc 01       	movw	r30, r24
    1466:	80 85       	ldd	r24, Z+8	; 0x08
    1468:	91 85       	ldd	r25, Z+9	; 0x09
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	8d 83       	std	Y+5, r24	; 0x05
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	06 97       	sbiw	r24, 0x06	; 6
    1474:	9a 83       	std	Y+2, r25	; 0x02
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	06 96       	adiw	r24, 0x06	; 6
    147e:	86 50       	subi	r24, 0x06	; 6
    1480:	91 40       	sbci	r25, 0x01	; 1
    1482:	e1 f6       	brne	.-72     	; 0x143c <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    1484:	80 91 0c 01 	lds	r24, 0x010C
    1488:	90 91 0d 01 	lds	r25, 0x010D
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	90 93 0d 01 	sts	0x010D, r25
    1492:	80 93 0c 01 	sts	0x010C, r24
    1496:	03 97       	sbiw	r24, 0x03	; 3
    1498:	21 f4       	brne	.+8      	; 0x14a2 <gpio_debouncer+0x90>
        count = 0;
    149a:	10 92 0d 01 	sts	0x010D, r1
    149e:	10 92 0c 01 	sts	0x010C, r1

}
    14a2:	26 96       	adiw	r28, 0x06	; 6
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	1f 91       	pop	r17
    14b4:	0f 91       	pop	r16
    14b6:	08 95       	ret

000014b8 <i2c_init>:
#define F_SCL 100000UL // SCL frequency
#define Prescaler 1
#define TWBR_val ((((F_CPU / F_SCL) / Prescaler) - 16 ) / 2)

void i2c_init(void)
{
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
	TWBR = (uint8_t)TWBR_val;
    14c0:	88 eb       	ldi	r24, 0xB8	; 184
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	2a e2       	ldi	r18, 0x2A	; 42
    14c6:	fc 01       	movw	r30, r24
    14c8:	20 83       	st	Z, r18
}
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	08 95       	ret

000014d0 <i2c_start>:

uint8_t i2c_start(uint8_t address)
{
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <i2c_start+0x6>
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	8a 83       	std	Y+2, r24	; 0x02
	// reset TWI control register
	TWCR = 0;
    14dc:	8c eb       	ldi	r24, 0xBC	; 188
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	fc 01       	movw	r30, r24
    14e2:	10 82       	st	Z, r1
	// transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    14e4:	8c eb       	ldi	r24, 0xBC	; 188
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	24 ea       	ldi	r18, 0xA4	; 164
    14ea:	fc 01       	movw	r30, r24
    14ec:	20 83       	st	Z, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
    14ee:	00 00       	nop
    14f0:	8c eb       	ldi	r24, 0xBC	; 188
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	fc 01       	movw	r30, r24
    14f6:	80 81       	ld	r24, Z
    14f8:	88 23       	and	r24, r24
    14fa:	d4 f7       	brge	.-12     	; 0x14f0 <i2c_start+0x20>

	// check if the start condition was successfully transmitted
	if((TWSR & 0xF8) != TW_START){ return 1; }
    14fc:	89 eb       	ldi	r24, 0xB9	; 185
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	fc 01       	movw	r30, r24
    1502:	80 81       	ld	r24, Z
    1504:	88 2f       	mov	r24, r24
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	88 7f       	andi	r24, 0xF8	; 248
    150a:	99 27       	eor	r25, r25
    150c:	08 97       	sbiw	r24, 0x08	; 8
    150e:	11 f0       	breq	.+4      	; 0x1514 <i2c_start+0x44>
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	20 c0       	rjmp	.+64     	; 0x1554 <i2c_start+0x84>

	// load slave address into data register
	TWDR = address;
    1514:	8b eb       	ldi	r24, 0xBB	; 187
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	2a 81       	ldd	r18, Y+2	; 0x02
    151a:	fc 01       	movw	r30, r24
    151c:	20 83       	st	Z, r18
	// start transmission of address
	TWCR = (1<<TWINT) | (1<<TWEN);
    151e:	8c eb       	ldi	r24, 0xBC	; 188
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	24 e8       	ldi	r18, 0x84	; 132
    1524:	fc 01       	movw	r30, r24
    1526:	20 83       	st	Z, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
    1528:	00 00       	nop
    152a:	8c eb       	ldi	r24, 0xBC	; 188
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	fc 01       	movw	r30, r24
    1530:	80 81       	ld	r24, Z
    1532:	88 23       	and	r24, r24
    1534:	d4 f7       	brge	.-12     	; 0x152a <i2c_start+0x5a>

	// check if the device has acknowledged the READ / WRITE mode
	uint8_t twst = TW_STATUS & 0xF8;
    1536:	89 eb       	ldi	r24, 0xB9	; 185
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	fc 01       	movw	r30, r24
    153c:	80 81       	ld	r24, Z
    153e:	88 7f       	andi	r24, 0xF8	; 248
    1540:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	88 31       	cpi	r24, 0x18	; 24
    1546:	29 f0       	breq	.+10     	; 0x1552 <i2c_start+0x82>
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	80 34       	cpi	r24, 0x40	; 64
    154c:	11 f0       	breq	.+4      	; 0x1552 <i2c_start+0x82>
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <i2c_start+0x84>

	return 0;
    1552:	80 e0       	ldi	r24, 0x00	; 0
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	08 95       	ret

0000155e <i2c_write>:

uint8_t i2c_write(uint8_t data)
{
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	1f 92       	push	r1
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	89 83       	std	Y+1, r24	; 0x01
	// load data into data register
	TWDR = data;
    156a:	8b eb       	ldi	r24, 0xBB	; 187
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	29 81       	ldd	r18, Y+1	; 0x01
    1570:	fc 01       	movw	r30, r24
    1572:	20 83       	st	Z, r18
	// start transmission of data
	TWCR = (1<<TWINT) | (1<<TWEN);
    1574:	8c eb       	ldi	r24, 0xBC	; 188
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	24 e8       	ldi	r18, 0x84	; 132
    157a:	fc 01       	movw	r30, r24
    157c:	20 83       	st	Z, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
    157e:	00 00       	nop
    1580:	8c eb       	ldi	r24, 0xBC	; 188
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	fc 01       	movw	r30, r24
    1586:	80 81       	ld	r24, Z
    1588:	88 23       	and	r24, r24
    158a:	d4 f7       	brge	.-12     	; 0x1580 <i2c_write+0x22>

	if( (TWSR & 0xF8) != TW_MT_DATA_ACK ){ return 1; }
    158c:	89 eb       	ldi	r24, 0xB9	; 185
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	fc 01       	movw	r30, r24
    1592:	80 81       	ld	r24, Z
    1594:	88 2f       	mov	r24, r24
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	88 7f       	andi	r24, 0xF8	; 248
    159a:	99 27       	eor	r25, r25
    159c:	88 97       	sbiw	r24, 0x28	; 40
    159e:	11 f0       	breq	.+4      	; 0x15a4 <i2c_write+0x46>
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <i2c_write+0x48>

	return 0;
    15a4:	80 e0       	ldi	r24, 0x00	; 0
}
    15a6:	0f 90       	pop	r0
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	08 95       	ret

000015ae <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62

	// start TWI module and acknowledge data after reception
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    15b6:	8c eb       	ldi	r24, 0xBC	; 188
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	24 ec       	ldi	r18, 0xC4	; 196
    15bc:	fc 01       	movw	r30, r24
    15be:	20 83       	st	Z, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
    15c0:	00 00       	nop
    15c2:	8c eb       	ldi	r24, 0xBC	; 188
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	fc 01       	movw	r30, r24
    15c8:	80 81       	ld	r24, Z
    15ca:	88 23       	and	r24, r24
    15cc:	d4 f7       	brge	.-12     	; 0x15c2 <i2c_read_ack+0x14>
	// return received data from TWDR
	return TWDR;
    15ce:	8b eb       	ldi	r24, 0xBB	; 187
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	fc 01       	movw	r30, r24
    15d4:	80 81       	ld	r24, Z
}
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62

	// start receiving without acknowledging reception
	TWCR = (1<<TWINT) | (1<<TWEN);
    15e4:	8c eb       	ldi	r24, 0xBC	; 188
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	24 e8       	ldi	r18, 0x84	; 132
    15ea:	fc 01       	movw	r30, r24
    15ec:	20 83       	st	Z, r18
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
    15ee:	00 00       	nop
    15f0:	8c eb       	ldi	r24, 0xBC	; 188
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	fc 01       	movw	r30, r24
    15f6:	80 81       	ld	r24, Z
    15f8:	88 23       	and	r24, r24
    15fa:	d4 f7       	brge	.-12     	; 0x15f0 <i2c_read_nack+0x14>
	// return received data from TWDR
	return TWDR;
    15fc:	8b eb       	ldi	r24, 0xBB	; 187
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	fc 01       	movw	r30, r24
    1602:	80 81       	ld	r24, Z
}
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	08 95       	ret

0000160a <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	27 97       	sbiw	r28, 0x07	; 7
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	8b 83       	std	Y+3, r24	; 0x03
    1620:	7d 83       	std	Y+5, r23	; 0x05
    1622:	6c 83       	std	Y+4, r22	; 0x04
    1624:	5f 83       	std	Y+7, r21	; 0x07
    1626:	4e 83       	std	Y+6, r20	; 0x06
	if (i2c_start(address | I2C_WRITE)) return 1;
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <i2c_start>
    162e:	88 23       	and	r24, r24
    1630:	11 f0       	breq	.+4      	; 0x1636 <i2c_transmit+0x2c>
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	20 c0       	rjmp	.+64     	; 0x1676 <i2c_transmit+0x6c>

	for (uint16_t i = 0; i < length; i++)
    1636:	1a 82       	std	Y+2, r1	; 0x02
    1638:	19 82       	std	Y+1, r1	; 0x01
    163a:	13 c0       	rjmp	.+38     	; 0x1662 <i2c_transmit+0x58>
	{
		if (i2c_write(data[i])) return 1;
    163c:	2c 81       	ldd	r18, Y+4	; 0x04
    163e:	3d 81       	ldd	r19, Y+5	; 0x05
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	9a 81       	ldd	r25, Y+2	; 0x02
    1644:	82 0f       	add	r24, r18
    1646:	93 1f       	adc	r25, r19
    1648:	fc 01       	movw	r30, r24
    164a:	80 81       	ld	r24, Z
    164c:	0e 94 af 0a 	call	0x155e	; 0x155e <i2c_write>
    1650:	88 23       	and	r24, r24
    1652:	11 f0       	breq	.+4      	; 0x1658 <i2c_transmit+0x4e>
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	0f c0       	rjmp	.+30     	; 0x1676 <i2c_transmit+0x6c>

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;

	for (uint16_t i = 0; i < length; i++)
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	9a 83       	std	Y+2, r25	; 0x02
    1660:	89 83       	std	Y+1, r24	; 0x01
    1662:	29 81       	ldd	r18, Y+1	; 0x01
    1664:	3a 81       	ldd	r19, Y+2	; 0x02
    1666:	8e 81       	ldd	r24, Y+6	; 0x06
    1668:	9f 81       	ldd	r25, Y+7	; 0x07
    166a:	28 17       	cp	r18, r24
    166c:	39 07       	cpc	r19, r25
    166e:	30 f3       	brcs	.-52     	; 0x163c <i2c_transmit+0x32>
	{
		if (i2c_write(data[i])) return 1;
	}

	i2c_stop();
    1670:	0e 94 32 0c 	call	0x1864	; 0x1864 <i2c_stop>

	return 0;
    1674:	80 e0       	ldi	r24, 0x00	; 0
}
    1676:	27 96       	adiw	r28, 0x07	; 7
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	08 95       	ret

00001688 <i2c_receive>:

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	27 97       	sbiw	r28, 0x07	; 7
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	8b 83       	std	Y+3, r24	; 0x03
    16a2:	7d 83       	std	Y+5, r23	; 0x05
    16a4:	6c 83       	std	Y+4, r22	; 0x04
    16a6:	5f 83       	std	Y+7, r21	; 0x07
    16a8:	4e 83       	std	Y+6, r20	; 0x06
	if (i2c_start(address | I2C_READ)) return 1;
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	81 60       	ori	r24, 0x01	; 1
    16ae:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <i2c_start>
    16b2:	88 23       	and	r24, r24
    16b4:	11 f0       	breq	.+4      	; 0x16ba <i2c_receive+0x32>
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	2c c0       	rjmp	.+88     	; 0x1712 <i2c_receive+0x8a>

	for (uint16_t i = 0; i < (length-1); i++)
    16ba:	1a 82       	std	Y+2, r1	; 0x02
    16bc:	19 82       	std	Y+1, r1	; 0x01
    16be:	10 c0       	rjmp	.+32     	; 0x16e0 <i2c_receive+0x58>
	{
		data[i] = i2c_read_ack();
    16c0:	2c 81       	ldd	r18, Y+4	; 0x04
    16c2:	3d 81       	ldd	r19, Y+5	; 0x05
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	89 01       	movw	r16, r18
    16ca:	08 0f       	add	r16, r24
    16cc:	19 1f       	adc	r17, r25
    16ce:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <i2c_read_ack>
    16d2:	f8 01       	movw	r30, r16
    16d4:	80 83       	st	Z, r24

uint8_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_READ)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	8e 81       	ldd	r24, Y+6	; 0x06
    16e2:	9f 81       	ldd	r25, Y+7	; 0x07
    16e4:	9c 01       	movw	r18, r24
    16e6:	21 50       	subi	r18, 0x01	; 1
    16e8:	31 09       	sbc	r19, r1
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	82 17       	cp	r24, r18
    16f0:	93 07       	cpc	r25, r19
    16f2:	30 f3       	brcs	.-52     	; 0x16c0 <i2c_receive+0x38>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
    16f4:	8e 81       	ldd	r24, Y+6	; 0x06
    16f6:	9f 81       	ldd	r25, Y+7	; 0x07
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	2c 81       	ldd	r18, Y+4	; 0x04
    16fc:	3d 81       	ldd	r19, Y+5	; 0x05
    16fe:	89 01       	movw	r16, r18
    1700:	08 0f       	add	r16, r24
    1702:	19 1f       	adc	r17, r25
    1704:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <i2c_read_nack>
    1708:	f8 01       	movw	r30, r16
    170a:	80 83       	st	Z, r24

	i2c_stop();
    170c:	0e 94 32 0c 	call	0x1864	; 0x1864 <i2c_stop>

	return 0;
    1710:	80 e0       	ldi	r24, 0x00	; 0
}
    1712:	27 96       	adiw	r28, 0x07	; 7
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	08 95       	ret

00001728 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	28 97       	sbiw	r28, 0x08	; 8
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	8b 83       	std	Y+3, r24	; 0x03
    173e:	6c 83       	std	Y+4, r22	; 0x04
    1740:	5e 83       	std	Y+6, r21	; 0x06
    1742:	4d 83       	std	Y+5, r20	; 0x05
    1744:	38 87       	std	Y+8, r19	; 0x08
    1746:	2f 83       	std	Y+7, r18	; 0x07
	if (i2c_start(devaddr | 0x00)) return 1;
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <i2c_start>
    174e:	88 23       	and	r24, r24
    1750:	11 f0       	breq	.+4      	; 0x1756 <i2c_writeReg+0x2e>
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	23 c0       	rjmp	.+70     	; 0x179c <i2c_writeReg+0x74>

	i2c_write(regaddr);
    1756:	8c 81       	ldd	r24, Y+4	; 0x04
    1758:	0e 94 af 0a 	call	0x155e	; 0x155e <i2c_write>

	for (uint16_t i = 0; i < length; i++)
    175c:	1a 82       	std	Y+2, r1	; 0x02
    175e:	19 82       	std	Y+1, r1	; 0x01
    1760:	13 c0       	rjmp	.+38     	; 0x1788 <i2c_writeReg+0x60>
	{
		if (i2c_write(data[i])) return 1;
    1762:	2d 81       	ldd	r18, Y+5	; 0x05
    1764:	3e 81       	ldd	r19, Y+6	; 0x06
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	9a 81       	ldd	r25, Y+2	; 0x02
    176a:	82 0f       	add	r24, r18
    176c:	93 1f       	adc	r25, r19
    176e:	fc 01       	movw	r30, r24
    1770:	80 81       	ld	r24, Z
    1772:	0e 94 af 0a 	call	0x155e	; 0x155e <i2c_write>
    1776:	88 23       	and	r24, r24
    1778:	11 f0       	breq	.+4      	; 0x177e <i2c_writeReg+0x56>
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	0f c0       	rjmp	.+30     	; 0x179c <i2c_writeReg+0x74>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	9a 81       	ldd	r25, Y+2	; 0x02
    1782:	01 96       	adiw	r24, 0x01	; 1
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	29 81       	ldd	r18, Y+1	; 0x01
    178a:	3a 81       	ldd	r19, Y+2	; 0x02
    178c:	8f 81       	ldd	r24, Y+7	; 0x07
    178e:	98 85       	ldd	r25, Y+8	; 0x08
    1790:	28 17       	cp	r18, r24
    1792:	39 07       	cpc	r19, r25
    1794:	30 f3       	brcs	.-52     	; 0x1762 <i2c_writeReg+0x3a>
	{
		if (i2c_write(data[i])) return 1;
	}

	i2c_stop();
    1796:	0e 94 32 0c 	call	0x1864	; 0x1864 <i2c_stop>

	return 0;
    179a:	80 e0       	ldi	r24, 0x00	; 0
}
    179c:	28 96       	adiw	r28, 0x08	; 8
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	08 95       	ret

000017ae <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	28 97       	sbiw	r28, 0x08	; 8
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	8b 83       	std	Y+3, r24	; 0x03
    17c8:	6c 83       	std	Y+4, r22	; 0x04
    17ca:	5e 83       	std	Y+6, r21	; 0x06
    17cc:	4d 83       	std	Y+5, r20	; 0x05
    17ce:	38 87       	std	Y+8, r19	; 0x08
    17d0:	2f 83       	std	Y+7, r18	; 0x07
	if (i2c_start(devaddr)) return 1;
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <i2c_start>
    17d8:	88 23       	and	r24, r24
    17da:	11 f0       	breq	.+4      	; 0x17e0 <i2c_readReg+0x32>
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	37 c0       	rjmp	.+110    	; 0x184e <i2c_readReg+0xa0>

	i2c_write(regaddr);
    17e0:	8c 81       	ldd	r24, Y+4	; 0x04
    17e2:	0e 94 af 0a 	call	0x155e	; 0x155e <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	81 60       	ori	r24, 0x01	; 1
    17ea:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <i2c_start>
    17ee:	88 23       	and	r24, r24
    17f0:	11 f0       	breq	.+4      	; 0x17f6 <i2c_readReg+0x48>
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	2c c0       	rjmp	.+88     	; 0x184e <i2c_readReg+0xa0>

	for (uint16_t i = 0; i < (length-1); i++)
    17f6:	1a 82       	std	Y+2, r1	; 0x02
    17f8:	19 82       	std	Y+1, r1	; 0x01
    17fa:	10 c0       	rjmp	.+32     	; 0x181c <i2c_readReg+0x6e>
	{
		data[i] = i2c_read_ack();
    17fc:	2d 81       	ldd	r18, Y+5	; 0x05
    17fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	9a 81       	ldd	r25, Y+2	; 0x02
    1804:	89 01       	movw	r16, r18
    1806:	08 0f       	add	r16, r24
    1808:	19 1f       	adc	r17, r25
    180a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <i2c_read_ack>
    180e:	f8 01       	movw	r30, r16
    1810:	80 83       	st	Z, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	8f 81       	ldd	r24, Y+7	; 0x07
    181e:	98 85       	ldd	r25, Y+8	; 0x08
    1820:	9c 01       	movw	r18, r24
    1822:	21 50       	subi	r18, 0x01	; 1
    1824:	31 09       	sbc	r19, r1
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	9a 81       	ldd	r25, Y+2	; 0x02
    182a:	82 17       	cp	r24, r18
    182c:	93 07       	cpc	r25, r19
    182e:	30 f3       	brcs	.-52     	; 0x17fc <i2c_readReg+0x4e>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
    1830:	8f 81       	ldd	r24, Y+7	; 0x07
    1832:	98 85       	ldd	r25, Y+8	; 0x08
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	2d 81       	ldd	r18, Y+5	; 0x05
    1838:	3e 81       	ldd	r19, Y+6	; 0x06
    183a:	89 01       	movw	r16, r18
    183c:	08 0f       	add	r16, r24
    183e:	19 1f       	adc	r17, r25
    1840:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <i2c_read_nack>
    1844:	f8 01       	movw	r30, r16
    1846:	80 83       	st	Z, r24

	i2c_stop();
    1848:	0e 94 32 0c 	call	0x1864	; 0x1864 <i2c_stop>

	return 0;
    184c:	80 e0       	ldi	r24, 0x00	; 0
}
    184e:	28 96       	adiw	r28, 0x08	; 8
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	08 95       	ret

00001864 <i2c_stop>:

void i2c_stop(void)
{
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    186c:	8c eb       	ldi	r24, 0xBC	; 188
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	24 e9       	ldi	r18, 0x94	; 148
    1872:	fc 01       	movw	r30, r24
    1874:	20 83       	st	Z, r18
}
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	08 95       	ret

0000187c <timer_register_callback>:
 *	Function: 		void timer_register_callback(void (*callback)(void))
 *	Parameters: 	void (*callback)(void))
 *	Description: 	timer callbacks
 */
void timer_register_callback(void (*callback)(void))
{
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	00 d0       	rcall	.+0      	; 0x1882 <timer_register_callback+0x6>
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	9a 81       	ldd	r25, Y+2	; 0x02
    188e:	90 93 14 01 	sts	0x0114, r25
    1892:	80 93 13 01 	sts	0x0113, r24
}
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <timer_init>:
 *	Function: 		void timer_init(unsigned int freq)
 *	Parameters: 	unsigned int freq - frequency of timer
 *	Description: 	setup timer
 */
void timer_init(unsigned int freq)
{
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <timer_init+0xa>
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01
    TCCR1A = 0;
    18b2:	80 e8       	ldi	r24, 0x80	; 128
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	fc 01       	movw	r30, r24
    18b8:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    18ba:	81 e8       	ldi	r24, 0x81	; 129
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	29 e0       	ldi	r18, 0x09	; 9
    18c0:	fc 01       	movw	r30, r24
    18c2:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    18c4:	08 e8       	ldi	r16, 0x88	; 136
    18c6:	10 e0       	ldi	r17, 0x00	; 0
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	9a 81       	ldd	r25, Y+2	; 0x02
    18cc:	cc 01       	movw	r24, r24
    18ce:	a0 e0       	ldi	r26, 0x00	; 0
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__floatunsisf>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9c 01       	movw	r18, r24
    18e0:	ad 01       	movw	r20, r26
    18e2:	60 e8       	ldi	r22, 0x80	; 128
    18e4:	76 e9       	ldi	r23, 0x96	; 150
    18e6:	88 e1       	ldi	r24, 0x18	; 24
    18e8:	9b e4       	ldi	r25, 0x4B	; 75
    18ea:	0e 94 48 13 	call	0x2690	; 0x2690 <__divsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__addsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	bc 01       	movw	r22, r24
    1908:	cd 01       	movw	r24, r26
    190a:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	f8 01       	movw	r30, r16
    1914:	91 83       	std	Z+1, r25	; 0x01
    1916:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    1918:	8f e6       	ldi	r24, 0x6F	; 111
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	22 e0       	ldi	r18, 0x02	; 2
    191e:	fc 01       	movw	r30, r24
    1920:	20 83       	st	Z, r18

	SREG |= 0x80;
    1922:	8f e5       	ldi	r24, 0x5F	; 95
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	2f e5       	ldi	r18, 0x5F	; 95
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	f9 01       	movw	r30, r18
    192c:	20 81       	ld	r18, Z
    192e:	20 68       	ori	r18, 0x80	; 128
    1930:	fc 01       	movw	r30, r24
    1932:	20 83       	st	Z, r18
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	1f 91       	pop	r17
    193e:	0f 91       	pop	r16
    1940:	08 95       	ret

00001942 <__vector_12>:
/*
 *	Function: 		ISR(TIMER1_COMPA_vect)
 *	Description: 	ISR interrupt for timer
 */
ISR(TIMER1_COMPA_vect)
{
    1942:	1f 92       	push	r1
    1944:	0f 92       	push	r0
    1946:	00 90 5f 00 	lds	r0, 0x005F
    194a:	0f 92       	push	r0
    194c:	11 24       	eor	r1, r1
    194e:	00 90 5b 00 	lds	r0, 0x005B
    1952:	0f 92       	push	r0
    1954:	2f 93       	push	r18
    1956:	3f 93       	push	r19
    1958:	4f 93       	push	r20
    195a:	5f 93       	push	r21
    195c:	6f 93       	push	r22
    195e:	7f 93       	push	r23
    1960:	8f 93       	push	r24
    1962:	9f 93       	push	r25
    1964:	af 93       	push	r26
    1966:	bf 93       	push	r27
    1968:	ef 93       	push	r30
    196a:	ff 93       	push	r31
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    if(timer_callback != NULL)
    1974:	80 91 13 01 	lds	r24, 0x0113
    1978:	90 91 14 01 	lds	r25, 0x0114
    197c:	89 2b       	or	r24, r25
    197e:	31 f0       	breq	.+12     	; 0x198c <__vector_12+0x4a>
        timer_callback();
    1980:	80 91 13 01 	lds	r24, 0x0113
    1984:	90 91 14 01 	lds	r25, 0x0114
    1988:	fc 01       	movw	r30, r24
    198a:	09 95       	icall
	if(sys_time >= 90000)					// if match end
    198c:	80 91 0e 01 	lds	r24, 0x010E
    1990:	90 91 0f 01 	lds	r25, 0x010F
    1994:	a0 91 10 01 	lds	r26, 0x0110
    1998:	b0 91 11 01 	lds	r27, 0x0111
    199c:	80 39       	cpi	r24, 0x90	; 144
    199e:	9f 45       	sbci	r25, 0x5F	; 95
    19a0:	a1 40       	sbci	r26, 0x01	; 1
    19a2:	b1 05       	cpc	r27, r1
    19a4:	28 f0       	brcs	.+10     	; 0x19b0 <__vector_12+0x6e>
	{
		if(system_get_match_started())		// if the match has started before
    19a6:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <system_get_match_started>
    19aa:	88 23       	and	r24, r24
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <__vector_12+0x6e>
		{

			while(1);
    19ae:	ff cf       	rjmp	.-2      	; 0x19ae <__vector_12+0x6c>
		}
	}
	sys_time++;
    19b0:	80 91 0e 01 	lds	r24, 0x010E
    19b4:	90 91 0f 01 	lds	r25, 0x010F
    19b8:	a0 91 10 01 	lds	r26, 0x0110
    19bc:	b0 91 11 01 	lds	r27, 0x0111
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	a1 1d       	adc	r26, r1
    19c4:	b1 1d       	adc	r27, r1
    19c6:	80 93 0e 01 	sts	0x010E, r24
    19ca:	90 93 0f 01 	sts	0x010F, r25
    19ce:	a0 93 10 01 	sts	0x0110, r26
    19d2:	b0 93 11 01 	sts	0x0111, r27
}
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	ff 91       	pop	r31
    19dc:	ef 91       	pop	r30
    19de:	bf 91       	pop	r27
    19e0:	af 91       	pop	r26
    19e2:	9f 91       	pop	r25
    19e4:	8f 91       	pop	r24
    19e6:	7f 91       	pop	r23
    19e8:	6f 91       	pop	r22
    19ea:	5f 91       	pop	r21
    19ec:	4f 91       	pop	r20
    19ee:	3f 91       	pop	r19
    19f0:	2f 91       	pop	r18
    19f2:	0f 90       	pop	r0
    19f4:	00 92 5b 00 	sts	0x005B, r0
    19f8:	0f 90       	pop	r0
    19fa:	00 92 5f 00 	sts	0x005F, r0
    19fe:	0f 90       	pop	r0
    1a00:	1f 90       	pop	r1
    1a02:	18 95       	reti

00001a04 <system_reset_system_time>:
 *	Function: 		void system_reset_system_time(void)
 *	Parameters: 	void
 *	Description:	reset system time
 */
void system_reset_system_time(void)
{
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
	sys_time = 0;
    1a0c:	10 92 0e 01 	sts	0x010E, r1
    1a10:	10 92 0f 01 	sts	0x010F, r1
    1a14:	10 92 10 01 	sts	0x0110, r1
    1a18:	10 92 11 01 	sts	0x0111, r1
}
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	08 95       	ret

00001a22 <system_set_match_started>:
 *	Function: 		void system_set_match_started(void)
 *	Parameters: 	void
 *	Description:	let the match begiiiiiiiiiin
 */
void system_set_match_started(void)
{
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
	match_started = 1;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	80 93 12 01 	sts	0x0112, r24
}
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	08 95       	ret

00001a36 <system_get_system_time>:
 *	Function: 		uint32_t system_get_system_time(void)
 *	Parameters: 	void
 *	Description:	returns current system time
 */
uint32_t system_get_system_time(void)
{
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
	return sys_time;
    1a3e:	80 91 0e 01 	lds	r24, 0x010E
    1a42:	90 91 0f 01 	lds	r25, 0x010F
    1a46:	a0 91 10 01 	lds	r26, 0x0110
    1a4a:	b0 91 11 01 	lds	r27, 0x0111
}
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	08 95       	ret

00001a58 <system_get_match_started>:
 *	Function: 		uint8_t system_get_match_started(void)
 *	Parameters: 	void
 *	Description:	return if match has started
 */
uint8_t system_get_match_started(void)
{
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
	return match_started;
    1a60:	80 91 12 01 	lds	r24, 0x0112
}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	08 95       	ret

00001a6a <system_init>:
 *	Function: 		void system_init(void)
 *	Parameters: 	void
 *	Description:	initing all the things
 */
void system_init(void)
{
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	2e 97       	sbiw	r28, 0x0e	; 14
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
	// sets debouncer
	timer_register_callback(gpio_debouncer);
    1a7e:	89 e0       	ldi	r24, 0x09	; 9
    1a80:	9a e0       	ldi	r25, 0x0A	; 10
    1a82:	0e 94 3e 0c 	call	0x187c	; 0x187c <timer_register_callback>
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a8 ec       	ldi	r26, 0xC8	; 200
    1a8c:	b2 e4       	ldi	r27, 0x42	; 66
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	ab 83       	std	Y+3, r26	; 0x03
    1a94:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e4       	ldi	r19, 0x40	; 64
    1a9a:	4c e1       	ldi	r20, 0x1C	; 28
    1a9c:	55 e4       	ldi	r21, 0x45	; 69
    1a9e:	69 81       	ldd	r22, Y+1	; 0x01
    1aa0:	7a 81       	ldd	r23, Y+2	; 0x02
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	8d 83       	std	Y+5, r24	; 0x05
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	af 83       	std	Y+7, r26	; 0x07
    1ab4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e8       	ldi	r20, 0x80	; 128
    1abc:	5f e3       	ldi	r21, 0x3F	; 63
    1abe:	6d 81       	ldd	r22, Y+5	; 0x05
    1ac0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ac2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac4:	98 85       	ldd	r25, Y+8	; 0x08
    1ac6:	0e 94 43 13 	call	0x2686	; 0x2686 <__cmpsf2>
    1aca:	88 23       	and	r24, r24
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <system_init+0x6e>
		__ticks = 1;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9a 87       	std	Y+10, r25	; 0x0a
    1ad4:	89 87       	std	Y+9, r24	; 0x09
    1ad6:	3f c0       	rjmp	.+126    	; 0x1b56 <system_init+0xec>
	else if (__tmp > 65535)
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	3f ef       	ldi	r19, 0xFF	; 255
    1adc:	4f e7       	ldi	r20, 0x7F	; 127
    1ade:	57 e4       	ldi	r21, 0x47	; 71
    1ae0:	6d 81       	ldd	r22, Y+5	; 0x05
    1ae2:	7e 81       	ldd	r23, Y+6	; 0x06
    1ae4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae6:	98 85       	ldd	r25, Y+8	; 0x08
    1ae8:	0e 94 9b 14 	call	0x2936	; 0x2936 <__gesf2>
    1aec:	18 16       	cp	r1, r24
    1aee:	4c f5       	brge	.+82     	; 0x1b42 <system_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	69 81       	ldd	r22, Y+1	; 0x01
    1afa:	7a 81       	ldd	r23, Y+2	; 0x02
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9a 87       	std	Y+10, r25	; 0x0a
    1b16:	89 87       	std	Y+9, r24	; 0x09
    1b18:	0f c0       	rjmp	.+30     	; 0x1b38 <system_init+0xce>
    1b1a:	8a ef       	ldi	r24, 0xFA	; 250
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9c 87       	std	Y+12, r25	; 0x0c
    1b20:	8b 87       	std	Y+11, r24	; 0x0b
    1b22:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b24:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <system_init+0xbc>
    1b2a:	9c 87       	std	Y+12, r25	; 0x0c
    1b2c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2e:	89 85       	ldd	r24, Y+9	; 0x09
    1b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	9a 87       	std	Y+10, r25	; 0x0a
    1b36:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	89 2b       	or	r24, r25
    1b3e:	69 f7       	brne	.-38     	; 0x1b1a <system_init+0xb0>
    1b40:	14 c0       	rjmp	.+40     	; 0x1b6a <system_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b42:	6d 81       	ldd	r22, Y+5	; 0x05
    1b44:	7e 81       	ldd	r23, Y+6	; 0x06
    1b46:	8f 81       	ldd	r24, Y+7	; 0x07
    1b48:	98 85       	ldd	r25, Y+8	; 0x08
    1b4a:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9a 87       	std	Y+10, r25	; 0x0a
    1b54:	89 87       	std	Y+9, r24	; 0x09
    1b56:	89 85       	ldd	r24, Y+9	; 0x09
    1b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5a:	9e 87       	std	Y+14, r25	; 0x0e
    1b5c:	8d 87       	std	Y+13, r24	; 0x0d
    1b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <system_init+0xf8>
    1b66:	9e 87       	std	Y+14, r25	; 0x0e
    1b68:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(100);




	system_reset_system_time();															// reset system time
    1b6a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <system_reset_system_time>
	system_set_match_started();															// match has started!
    1b6e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <system_set_match_started>

}
    1b72:	2e 96       	adiw	r28, 0x0e	; 14
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	08 95       	ret

00001b84 <UART0_Init>:
* Parameters        : unsigned int baud
					  char isrOnOff
* Return Value      : void
*********************************************************************************/
void UART0_Init(unsigned long baud, char isrOnOff)
{
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	27 97       	sbiw	r28, 0x07	; 7
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	6b 83       	std	Y+3, r22	; 0x03
    1b9a:	7c 83       	std	Y+4, r23	; 0x04
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR0A = 0;
    1ba2:	80 ec       	ldi	r24, 0xC0	; 192
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	10 82       	st	Z, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    1baa:	81 ec       	ldi	r24, 0xC1	; 193
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	28 e1       	ldi	r18, 0x18	; 24
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    1bb4:	82 ec       	ldi	r24, 0xC2	; 194
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	26 e0       	ldi	r18, 0x06	; 6
    1bba:	fc 01       	movw	r30, r24
    1bbc:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    1bbe:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	91 f4       	brne	.+36     	; 0x1be8 <UART0_Init+0x64>
	{
		UCSR0B |= ((1 << RXCIE0) | (1 << TXCIE0));
    1bc4:	81 ec       	ldi	r24, 0xC1	; 193
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	21 ec       	ldi	r18, 0xC1	; 193
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	f9 01       	movw	r30, r18
    1bce:	20 81       	ld	r18, Z
    1bd0:	20 6c       	ori	r18, 0xC0	; 192
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	20 83       	st	Z, r18
		SREG |= 0x80;
    1bd6:	8f e5       	ldi	r24, 0x5F	; 95
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	2f e5       	ldi	r18, 0x5F	; 95
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	f9 01       	movw	r30, r18
    1be0:	20 81       	ld	r18, Z
    1be2:	20 68       	ori	r18, 0x80	; 128
    1be4:	fc 01       	movw	r30, r24
    1be6:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    1be8:	6b 81       	ldd	r22, Y+3	; 0x03
    1bea:	7c 81       	ldd	r23, Y+4	; 0x04
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__floatunsisf>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e8       	ldi	r20, 0x80	; 128
    1bfe:	51 e4       	ldi	r21, 0x41	; 65
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9c 01       	movw	r18, r24
    1c0e:	ad 01       	movw	r20, r26
    1c10:	60 e8       	ldi	r22, 0x80	; 128
    1c12:	76 e9       	ldi	r23, 0x96	; 150
    1c14:	88 e1       	ldi	r24, 0x18	; 24
    1c16:	9b e4       	ldi	r25, 0x4B	; 75
    1c18:	0e 94 48 13 	call	0x2690	; 0x2690 <__divsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e8       	ldi	r20, 0x80	; 128
    1c26:	5f e3       	ldi	r21, 0x3F	; 63
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__subsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	5f e3       	ldi	r21, 0x3F	; 63
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__addsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	9a 83       	std	Y+2, r25	; 0x02
    1c56:	89 83       	std	Y+1, r24	; 0x01

	UBRR0H = temp >> 8;
    1c58:	85 ec       	ldi	r24, 0xC5	; 197
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	29 81       	ldd	r18, Y+1	; 0x01
    1c5e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c60:	23 2f       	mov	r18, r19
    1c62:	33 27       	eor	r19, r19
    1c64:	fc 01       	movw	r30, r24
    1c66:	20 83       	st	Z, r18
	UBRR0L = temp;
    1c68:	84 ec       	ldi	r24, 0xC4	; 196
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	29 81       	ldd	r18, Y+1	; 0x01
    1c6e:	fc 01       	movw	r30, r24
    1c70:	20 83       	st	Z, r18
}
    1c72:	27 96       	adiw	r28, 0x07	; 7
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	08 95       	ret

00001c84 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    1c84:	1f 92       	push	r1
    1c86:	0f 92       	push	r0
    1c88:	00 90 5f 00 	lds	r0, 0x005F
    1c8c:	0f 92       	push	r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	00 90 5b 00 	lds	r0, 0x005B
    1c94:	0f 92       	push	r0
    1c96:	2f 93       	push	r18
    1c98:	3f 93       	push	r19
    1c9a:	8f 93       	push	r24
    1c9c:	9f 93       	push	r25
    1c9e:	ef 93       	push	r30
    1ca0:	ff 93       	push	r31
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    1caa:	80 91 58 01 	lds	r24, 0x0158
    1cae:	88 23       	and	r24, r24
    1cb0:	d1 f0       	breq	.+52     	; 0x1ce6 <__vector_23+0x62>
	{
		tx0_counter--;
    1cb2:	80 91 58 01 	lds	r24, 0x0158
    1cb6:	81 50       	subi	r24, 0x01	; 1
    1cb8:	80 93 58 01 	sts	0x0158, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    1cbc:	86 ec       	ldi	r24, 0xC6	; 198
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	20 91 59 01 	lds	r18, 0x0159
    1cc4:	22 2f       	mov	r18, r18
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	29 5e       	subi	r18, 0xE9	; 233
    1cca:	3e 4f       	sbci	r19, 0xFE	; 254
    1ccc:	f9 01       	movw	r30, r18
    1cce:	20 81       	ld	r18, Z
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	20 83       	st	Z, r18
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    1cd4:	80 91 59 01 	lds	r24, 0x0159
    1cd8:	8f 5f       	subi	r24, 0xFF	; 255
    1cda:	80 93 59 01 	sts	0x0159, r24
    1cde:	80 34       	cpi	r24, 0x40	; 64
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <__vector_23+0x62>
			tx0_rd_index = 0;
    1ce2:	10 92 59 01 	sts	0x0159, r1
	}
}
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	ff 91       	pop	r31
    1cec:	ef 91       	pop	r30
    1cee:	9f 91       	pop	r25
    1cf0:	8f 91       	pop	r24
    1cf2:	3f 91       	pop	r19
    1cf4:	2f 91       	pop	r18
    1cf6:	0f 90       	pop	r0
    1cf8:	00 92 5b 00 	sts	0x005B, r0
    1cfc:	0f 90       	pop	r0
    1cfe:	00 92 5f 00 	sts	0x005F, r0
    1d02:	0f 90       	pop	r0
    1d04:	1f 90       	pop	r1
    1d06:	18 95       	reti

00001d08 <UART0_Write>:
/****************************************************************************************************************************************
Slanje podataka USART0 modulom
****************************************************************************************************************************************/

void UART0_Write(unsigned char data)
{
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	1f 92       	push	r1
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR0B >> TXCIE0) & 0x01)
    1d14:	81 ec       	ldi	r24, 0xC1	; 193
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	fc 01       	movw	r30, r24
    1d1a:	80 81       	ld	r24, Z
    1d1c:	82 95       	swap	r24
    1d1e:	86 95       	lsr	r24
    1d20:	86 95       	lsr	r24
    1d22:	83 70       	andi	r24, 0x03	; 3
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	81 70       	andi	r24, 0x01	; 1
    1d2a:	99 27       	eor	r25, r25
    1d2c:	89 2b       	or	r24, r25
    1d2e:	99 f1       	breq	.+102    	; 0x1d96 <UART0_Write+0x8e>
	{
		while(tx0_counter == TX0_BUFFER_SIZE);
    1d30:	00 00       	nop
    1d32:	80 91 58 01 	lds	r24, 0x0158
    1d36:	80 34       	cpi	r24, 0x40	; 64
    1d38:	e1 f3       	breq	.-8      	; 0x1d32 <UART0_Write+0x2a>

		cli();
    1d3a:	f8 94       	cli

		if(tx0_counter || (UCSR0A & 0x20) == 0)
    1d3c:	80 91 58 01 	lds	r24, 0x0158
    1d40:	88 23       	and	r24, r24
    1d42:	51 f4       	brne	.+20     	; 0x1d58 <UART0_Write+0x50>
    1d44:	80 ec       	ldi	r24, 0xC0	; 192
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	fc 01       	movw	r30, r24
    1d4a:	80 81       	ld	r24, Z
    1d4c:	88 2f       	mov	r24, r24
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	80 72       	andi	r24, 0x20	; 32
    1d52:	99 27       	eor	r25, r25
    1d54:	89 2b       	or	r24, r25
    1d56:	c1 f4       	brne	.+48     	; 0x1d88 <UART0_Write+0x80>
		{
			tx0_buffer[tx0_wr_index] = data;
    1d58:	80 91 57 01 	lds	r24, 0x0157
    1d5c:	88 2f       	mov	r24, r24
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	89 5e       	subi	r24, 0xE9	; 233
    1d62:	9e 4f       	sbci	r25, 0xFE	; 254
    1d64:	29 81       	ldd	r18, Y+1	; 0x01
    1d66:	fc 01       	movw	r30, r24
    1d68:	20 83       	st	Z, r18
			if(++tx0_wr_index == TX0_BUFFER_SIZE)
    1d6a:	80 91 57 01 	lds	r24, 0x0157
    1d6e:	8f 5f       	subi	r24, 0xFF	; 255
    1d70:	80 93 57 01 	sts	0x0157, r24
    1d74:	80 34       	cpi	r24, 0x40	; 64
    1d76:	11 f4       	brne	.+4      	; 0x1d7c <UART0_Write+0x74>
				tx0_wr_index = 0;
    1d78:	10 92 57 01 	sts	0x0157, r1

			tx0_counter++;
    1d7c:	80 91 58 01 	lds	r24, 0x0158
    1d80:	8f 5f       	subi	r24, 0xFF	; 255
    1d82:	80 93 58 01 	sts	0x0158, r24
    1d86:	05 c0       	rjmp	.+10     	; 0x1d92 <UART0_Write+0x8a>
		}
		else
			UDR0 = data;
    1d88:	86 ec       	ldi	r24, 0xC6	; 198
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	29 81       	ldd	r18, Y+1	; 0x01
    1d8e:	fc 01       	movw	r30, r24
    1d90:	20 83       	st	Z, r18

		sei();
    1d92:	78 94       	sei
    1d94:	03 c0       	rjmp	.+6      	; 0x1d9c <UART0_Write+0x94>
	}
	else
		altUart0Write(data);
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	0e 94 73 10 	call	0x20e6	; 0x20e6 <altUart0Write>
}
    1d9c:	0f 90       	pop	r0
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	08 95       	ret

00001da4 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    1da4:	1f 92       	push	r1
    1da6:	0f 92       	push	r0
    1da8:	00 90 5f 00 	lds	r0, 0x005F
    1dac:	0f 92       	push	r0
    1dae:	11 24       	eor	r1, r1
    1db0:	00 90 5b 00 	lds	r0, 0x005B
    1db4:	0f 92       	push	r0
    1db6:	2f 93       	push	r18
    1db8:	3f 93       	push	r19
    1dba:	8f 93       	push	r24
    1dbc:	9f 93       	push	r25
    1dbe:	ef 93       	push	r30
    1dc0:	ff 93       	push	r31
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	1f 92       	push	r1
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    1dcc:	80 ec       	ldi	r24, 0xC0	; 192
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	80 81       	ld	r24, Z
    1dd4:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	8c 71       	andi	r24, 0x1C	; 28
    1dde:	99 27       	eor	r25, r25
    1de0:	89 2b       	or	r24, r25
    1de2:	d1 f4       	brne	.+52     	; 0x1e18 <__vector_21+0x74>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    1de4:	80 91 9a 01 	lds	r24, 0x019A
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	26 ec       	ldi	r18, 0xC6	; 198
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	f9 01       	movw	r30, r18
    1df2:	20 81       	ld	r18, Z
    1df4:	86 5a       	subi	r24, 0xA6	; 166
    1df6:	9e 4f       	sbci	r25, 0xFE	; 254
    1df8:	fc 01       	movw	r30, r24
    1dfa:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    1dfc:	80 91 9a 01 	lds	r24, 0x019A
    1e00:	8f 5f       	subi	r24, 0xFF	; 255
    1e02:	80 93 9a 01 	sts	0x019A, r24
    1e06:	80 34       	cpi	r24, 0x40	; 64
    1e08:	11 f4       	brne	.+4      	; 0x1e0e <__vector_21+0x6a>
			rx0_wr_index = 0;
    1e0a:	10 92 9a 01 	sts	0x019A, r1

		rx0_counter++;
    1e0e:	80 91 9b 01 	lds	r24, 0x019B
    1e12:	8f 5f       	subi	r24, 0xFF	; 255
    1e14:	80 93 9b 01 	sts	0x019B, r24
	}
}
    1e18:	0f 90       	pop	r0
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	ff 91       	pop	r31
    1e20:	ef 91       	pop	r30
    1e22:	9f 91       	pop	r25
    1e24:	8f 91       	pop	r24
    1e26:	3f 91       	pop	r19
    1e28:	2f 91       	pop	r18
    1e2a:	0f 90       	pop	r0
    1e2c:	00 92 5b 00 	sts	0x005B, r0
    1e30:	0f 90       	pop	r0
    1e32:	00 92 5f 00 	sts	0x005F, r0
    1e36:	0f 90       	pop	r0
    1e38:	1f 90       	pop	r1
    1e3a:	18 95       	reti

00001e3c <UART0_Read>:
/****************************************************************************************************************************************
Primanje podataka USART0 modulom
****************************************************************************************************************************************/

unsigned char UART0_Read(void)
{
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	1f 92       	push	r1
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR0B >> RXCIE0) & 0x01)
    1e46:	81 ec       	ldi	r24, 0xC1	; 193
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	80 81       	ld	r24, Z
    1e4e:	88 1f       	adc	r24, r24
    1e50:	88 27       	eor	r24, r24
    1e52:	88 1f       	adc	r24, r24
    1e54:	88 2f       	mov	r24, r24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	81 70       	andi	r24, 0x01	; 1
    1e5a:	99 27       	eor	r25, r25
    1e5c:	89 2b       	or	r24, r25
    1e5e:	e9 f0       	breq	.+58     	; 0x1e9a <UART0_Read+0x5e>
	{
		while(rx0_counter == 0);
    1e60:	00 00       	nop
    1e62:	80 91 9b 01 	lds	r24, 0x019B
    1e66:	88 23       	and	r24, r24
    1e68:	e1 f3       	breq	.-8      	; 0x1e62 <UART0_Read+0x26>

		data = rx0_buffer[rx0_rd_index];
    1e6a:	80 91 9c 01 	lds	r24, 0x019C
    1e6e:	88 2f       	mov	r24, r24
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	86 5a       	subi	r24, 0xA6	; 166
    1e74:	9e 4f       	sbci	r25, 0xFE	; 254
    1e76:	fc 01       	movw	r30, r24
    1e78:	80 81       	ld	r24, Z
    1e7a:	89 83       	std	Y+1, r24	; 0x01

		if(++rx0_rd_index == RX0_BUFFER_SIZE)
    1e7c:	80 91 9c 01 	lds	r24, 0x019C
    1e80:	8f 5f       	subi	r24, 0xFF	; 255
    1e82:	80 93 9c 01 	sts	0x019C, r24
    1e86:	80 34       	cpi	r24, 0x40	; 64
    1e88:	11 f4       	brne	.+4      	; 0x1e8e <UART0_Read+0x52>
			rx0_rd_index = 0;
    1e8a:	10 92 9c 01 	sts	0x019C, r1

		rx0_counter--;
    1e8e:	80 91 9b 01 	lds	r24, 0x019B
    1e92:	81 50       	subi	r24, 0x01	; 1
    1e94:	80 93 9b 01 	sts	0x019B, r24
    1e98:	13 c0       	rjmp	.+38     	; 0x1ec0 <UART0_Read+0x84>
	}
	else
	{
		while( !((UCSR0A >> RXC0) & 0x01));
    1e9a:	00 00       	nop
    1e9c:	80 ec       	ldi	r24, 0xC0	; 192
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	80 81       	ld	r24, Z
    1ea4:	88 1f       	adc	r24, r24
    1ea6:	88 27       	eor	r24, r24
    1ea8:	88 1f       	adc	r24, r24
    1eaa:	88 2f       	mov	r24, r24
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	81 70       	andi	r24, 0x01	; 1
    1eb0:	99 27       	eor	r25, r25
    1eb2:	89 2b       	or	r24, r25
    1eb4:	99 f3       	breq	.-26     	; 0x1e9c <UART0_Read+0x60>
		data = UDR0;
    1eb6:	86 ec       	ldi	r24, 0xC6	; 198
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	fc 01       	movw	r30, r24
    1ebc:	80 81       	ld	r24, Z
    1ebe:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ec2:	0f 90       	pop	r0
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	08 95       	ret

00001eca <UART1_Init>:
-bez paritet
-9600baud
-asynchron
****************************************************************************************************************************************/
void UART1_Init(unsigned long baud, char isrOnOff)
{
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	27 97       	sbiw	r28, 0x07	; 7
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	6b 83       	std	Y+3, r22	; 0x03
    1ee0:	7c 83       	std	Y+4, r23	; 0x04
    1ee2:	8d 83       	std	Y+5, r24	; 0x05
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
    1ee8:	88 ec       	ldi	r24, 0xC8	; 200
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	fc 01       	movw	r30, r24
    1eee:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
    1ef0:	89 ec       	ldi	r24, 0xC9	; 201
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	28 e1       	ldi	r18, 0x18	; 24
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	20 83       	st	Z, r18

	// comment or uncomment define in usart.h
	#ifdef ARDUINO_COMMUNICATION
		UCSR1C = (1 << UCSZ11) | (1 << UCSZ10) | (1 << USBS1); // sa 2 stop bit
    1efa:	8a ec       	ldi	r24, 0xCA	; 202
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	2e e0       	ldi	r18, 0x0E	; 14
    1f00:	fc 01       	movw	r30, r24
    1f02:	20 83       	st	Z, r18
	#else
		//UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); sa 1stop bit
	#endif


	if(isrOnOff == UART_ISR_ON)
    1f04:	8f 81       	ldd	r24, Y+7	; 0x07
    1f06:	81 30       	cpi	r24, 0x01	; 1
    1f08:	91 f4       	brne	.+36     	; 0x1f2e <UART1_Init+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
    1f0a:	89 ec       	ldi	r24, 0xC9	; 201
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	29 ec       	ldi	r18, 0xC9	; 201
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	f9 01       	movw	r30, r18
    1f14:	20 81       	ld	r18, Z
    1f16:	20 6c       	ori	r18, 0xC0	; 192
    1f18:	fc 01       	movw	r30, r24
    1f1a:	20 83       	st	Z, r18
		SREG |= 0x80;
    1f1c:	8f e5       	ldi	r24, 0x5F	; 95
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	2f e5       	ldi	r18, 0x5F	; 95
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	f9 01       	movw	r30, r18
    1f26:	20 81       	ld	r18, Z
    1f28:	20 68       	ori	r18, 0x80	; 128
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    1f2e:	6b 81       	ldd	r22, Y+3	; 0x03
    1f30:	7c 81       	ldd	r23, Y+4	; 0x04
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__floatunsisf>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e8       	ldi	r20, 0x80	; 128
    1f44:	51 e4       	ldi	r21, 0x41	; 65
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	9c 01       	movw	r18, r24
    1f54:	ad 01       	movw	r20, r26
    1f56:	60 e8       	ldi	r22, 0x80	; 128
    1f58:	76 e9       	ldi	r23, 0x96	; 150
    1f5a:	88 e1       	ldi	r24, 0x18	; 24
    1f5c:	9b e4       	ldi	r25, 0x4B	; 75
    1f5e:	0e 94 48 13 	call	0x2690	; 0x2690 <__divsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	40 e8       	ldi	r20, 0x80	; 128
    1f6c:	5f e3       	ldi	r21, 0x3F	; 63
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__subsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	5f e3       	ldi	r21, 0x3F	; 63
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 d7 12 	call	0x25ae	; 0x25ae <__addsf3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	bc 01       	movw	r22, r24
    1f90:	cd 01       	movw	r24, r26
    1f92:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
    1f9e:	8d ec       	ldi	r24, 0xCD	; 205
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	29 81       	ldd	r18, Y+1	; 0x01
    1fa4:	3a 81       	ldd	r19, Y+2	; 0x02
    1fa6:	23 2f       	mov	r18, r19
    1fa8:	33 27       	eor	r19, r19
    1faa:	fc 01       	movw	r30, r24
    1fac:	20 83       	st	Z, r18
	UBRR1L = temp;
    1fae:	8c ec       	ldi	r24, 0xCC	; 204
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	29 81       	ldd	r18, Y+1	; 0x01
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	20 83       	st	Z, r18
}
    1fb8:	27 96       	adiw	r28, 0x07	; 7
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	de bf       	out	0x3e, r29	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	cd bf       	out	0x3d, r28	; 61
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	08 95       	ret

00001fca <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    1fca:	1f 92       	push	r1
    1fcc:	0f 92       	push	r0
    1fce:	00 90 5f 00 	lds	r0, 0x005F
    1fd2:	0f 92       	push	r0
    1fd4:	11 24       	eor	r1, r1
    1fd6:	00 90 5b 00 	lds	r0, 0x005B
    1fda:	0f 92       	push	r0
    1fdc:	2f 93       	push	r18
    1fde:	3f 93       	push	r19
    1fe0:	8f 93       	push	r24
    1fe2:	9f 93       	push	r25
    1fe4:	ef 93       	push	r30
    1fe6:	ff 93       	push	r31
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    1ff0:	80 91 de 01 	lds	r24, 0x01DE
    1ff4:	88 23       	and	r24, r24
    1ff6:	d1 f0       	breq	.+52     	; 0x202c <__vector_34+0x62>
	{
		tx1_counter--;
    1ff8:	80 91 de 01 	lds	r24, 0x01DE
    1ffc:	81 50       	subi	r24, 0x01	; 1
    1ffe:	80 93 de 01 	sts	0x01DE, r24
		UDR1=tx1_buffer[tx1_rd_index];
    2002:	8e ec       	ldi	r24, 0xCE	; 206
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	20 91 df 01 	lds	r18, 0x01DF
    200a:	22 2f       	mov	r18, r18
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	23 56       	subi	r18, 0x63	; 99
    2010:	3e 4f       	sbci	r19, 0xFE	; 254
    2012:	f9 01       	movw	r30, r18
    2014:	20 81       	ld	r18, Z
    2016:	fc 01       	movw	r30, r24
    2018:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    201a:	80 91 df 01 	lds	r24, 0x01DF
    201e:	8f 5f       	subi	r24, 0xFF	; 255
    2020:	80 93 df 01 	sts	0x01DF, r24
    2024:	80 34       	cpi	r24, 0x40	; 64
    2026:	11 f4       	brne	.+4      	; 0x202c <__vector_34+0x62>
			tx1_rd_index = 0;
    2028:	10 92 df 01 	sts	0x01DF, r1
	}
}
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	ff 91       	pop	r31
    2032:	ef 91       	pop	r30
    2034:	9f 91       	pop	r25
    2036:	8f 91       	pop	r24
    2038:	3f 91       	pop	r19
    203a:	2f 91       	pop	r18
    203c:	0f 90       	pop	r0
    203e:	00 92 5b 00 	sts	0x005B, r0
    2042:	0f 90       	pop	r0
    2044:	00 92 5f 00 	sts	0x005F, r0
    2048:	0f 90       	pop	r0
    204a:	1f 90       	pop	r1
    204c:	18 95       	reti

0000204e <__vector_32>:

ISR(USART1_RX_vect)
{
    204e:	1f 92       	push	r1
    2050:	0f 92       	push	r0
    2052:	00 90 5f 00 	lds	r0, 0x005F
    2056:	0f 92       	push	r0
    2058:	11 24       	eor	r1, r1
    205a:	00 90 5b 00 	lds	r0, 0x005B
    205e:	0f 92       	push	r0
    2060:	2f 93       	push	r18
    2062:	3f 93       	push	r19
    2064:	8f 93       	push	r24
    2066:	9f 93       	push	r25
    2068:	ef 93       	push	r30
    206a:	ff 93       	push	r31
    206c:	cf 93       	push	r28
    206e:	df 93       	push	r29
    2070:	1f 92       	push	r1
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    2076:	88 ec       	ldi	r24, 0xC8	; 200
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	fc 01       	movw	r30, r24
    207c:	80 81       	ld	r24, Z
    207e:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	88 2f       	mov	r24, r24
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	8c 71       	andi	r24, 0x1C	; 28
    2088:	99 27       	eor	r25, r25
    208a:	89 2b       	or	r24, r25
    208c:	d1 f4       	brne	.+52     	; 0x20c2 <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    208e:	80 91 20 02 	lds	r24, 0x0220
    2092:	88 2f       	mov	r24, r24
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	2e ec       	ldi	r18, 0xCE	; 206
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	f9 01       	movw	r30, r18
    209c:	20 81       	ld	r18, Z
    209e:	80 52       	subi	r24, 0x20	; 32
    20a0:	9e 4f       	sbci	r25, 0xFE	; 254
    20a2:	fc 01       	movw	r30, r24
    20a4:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    20a6:	80 91 20 02 	lds	r24, 0x0220
    20aa:	8f 5f       	subi	r24, 0xFF	; 255
    20ac:	80 93 20 02 	sts	0x0220, r24
    20b0:	80 34       	cpi	r24, 0x40	; 64
    20b2:	11 f4       	brne	.+4      	; 0x20b8 <__vector_32+0x6a>
		rx1_wr_index = 0;
    20b4:	10 92 20 02 	sts	0x0220, r1

		rx1_counter++;
    20b8:	80 91 21 02 	lds	r24, 0x0221
    20bc:	8f 5f       	subi	r24, 0xFF	; 255
    20be:	80 93 21 02 	sts	0x0221, r24
	}
}
    20c2:	0f 90       	pop	r0
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	ff 91       	pop	r31
    20ca:	ef 91       	pop	r30
    20cc:	9f 91       	pop	r25
    20ce:	8f 91       	pop	r24
    20d0:	3f 91       	pop	r19
    20d2:	2f 91       	pop	r18
    20d4:	0f 90       	pop	r0
    20d6:	00 92 5b 00 	sts	0x005B, r0
    20da:	0f 90       	pop	r0
    20dc:	00 92 5f 00 	sts	0x005F, r0
    20e0:	0f 90       	pop	r0
    20e2:	1f 90       	pop	r1
    20e4:	18 95       	reti

000020e6 <altUart0Write>:

void altUart0Write(unsigned char data)
{
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	1f 92       	push	r1
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
    20f2:	00 00       	nop
    20f4:	80 ec       	ldi	r24, 0xC0	; 192
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	fc 01       	movw	r30, r24
    20fa:	80 81       	ld	r24, Z
    20fc:	88 2f       	mov	r24, r24
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	80 72       	andi	r24, 0x20	; 32
    2102:	99 27       	eor	r25, r25
    2104:	89 2b       	or	r24, r25
    2106:	b1 f3       	breq	.-20     	; 0x20f4 <altUart0Write+0xe>

	UDR0 = data;
    2108:	86 ec       	ldi	r24, 0xC6	; 198
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	29 81       	ldd	r18, Y+1	; 0x01
    210e:	fc 01       	movw	r30, r24
    2110:	20 83       	st	Z, r18
}
    2112:	0f 90       	pop	r0
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	08 95       	ret

0000211a <altUart1Write>:

void altUart1Write(unsigned char data)
{
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	1f 92       	push	r1
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
    2126:	00 00       	nop
    2128:	88 ec       	ldi	r24, 0xC8	; 200
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	fc 01       	movw	r30, r24
    212e:	80 81       	ld	r24, Z
    2130:	88 2f       	mov	r24, r24
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	80 72       	andi	r24, 0x20	; 32
    2136:	99 27       	eor	r25, r25
    2138:	89 2b       	or	r24, r25
    213a:	b1 f3       	breq	.-20     	; 0x2128 <altUart1Write+0xe>
	UDR1 = data;
    213c:	8e ec       	ldi	r24, 0xCE	; 206
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	29 81       	ldd	r18, Y+1	; 0x01
    2142:	fc 01       	movw	r30, r24
    2144:	20 83       	st	Z, r18
}
    2146:	0f 90       	pop	r0
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	08 95       	ret

0000214e <UART1_Write>:
Slanje podataka USART1 modulom
**
**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	1f 92       	push	r1
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
    215a:	89 ec       	ldi	r24, 0xC9	; 201
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	fc 01       	movw	r30, r24
    2160:	80 81       	ld	r24, Z
    2162:	82 95       	swap	r24
    2164:	86 95       	lsr	r24
    2166:	86 95       	lsr	r24
    2168:	83 70       	andi	r24, 0x03	; 3
    216a:	88 2f       	mov	r24, r24
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	81 70       	andi	r24, 0x01	; 1
    2170:	99 27       	eor	r25, r25
    2172:	89 2b       	or	r24, r25
    2174:	99 f1       	breq	.+102    	; 0x21dc <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
    2176:	00 00       	nop
    2178:	80 91 de 01 	lds	r24, 0x01DE
    217c:	80 34       	cpi	r24, 0x40	; 64
    217e:	e1 f3       	breq	.-8      	; 0x2178 <UART1_Write+0x2a>

		cli();
    2180:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
    2182:	80 91 de 01 	lds	r24, 0x01DE
    2186:	88 23       	and	r24, r24
    2188:	51 f4       	brne	.+20     	; 0x219e <UART1_Write+0x50>
    218a:	88 ec       	ldi	r24, 0xC8	; 200
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	fc 01       	movw	r30, r24
    2190:	80 81       	ld	r24, Z
    2192:	88 2f       	mov	r24, r24
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	80 72       	andi	r24, 0x20	; 32
    2198:	99 27       	eor	r25, r25
    219a:	89 2b       	or	r24, r25
    219c:	c1 f4       	brne	.+48     	; 0x21ce <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
    219e:	80 91 dd 01 	lds	r24, 0x01DD
    21a2:	88 2f       	mov	r24, r24
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	83 56       	subi	r24, 0x63	; 99
    21a8:	9e 4f       	sbci	r25, 0xFE	; 254
    21aa:	29 81       	ldd	r18, Y+1	; 0x01
    21ac:	fc 01       	movw	r30, r24
    21ae:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
    21b0:	80 91 dd 01 	lds	r24, 0x01DD
    21b4:	8f 5f       	subi	r24, 0xFF	; 255
    21b6:	80 93 dd 01 	sts	0x01DD, r24
    21ba:	80 34       	cpi	r24, 0x40	; 64
    21bc:	11 f4       	brne	.+4      	; 0x21c2 <UART1_Write+0x74>
				tx1_wr_index = 0;
    21be:	10 92 dd 01 	sts	0x01DD, r1

			tx1_counter++;
    21c2:	80 91 de 01 	lds	r24, 0x01DE
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	80 93 de 01 	sts	0x01DE, r24
    21cc:	05 c0       	rjmp	.+10     	; 0x21d8 <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
    21ce:	8e ec       	ldi	r24, 0xCE	; 206
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	29 81       	ldd	r18, Y+1	; 0x01
    21d4:	fc 01       	movw	r30, r24
    21d6:	20 83       	st	Z, r18

		sei();
    21d8:	78 94       	sei
    21da:	03 c0       	rjmp	.+6      	; 0x21e2 <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	0e 94 8d 10 	call	0x211a	; 0x211a <altUart1Write>
}
    21e2:	0f 90       	pop	r0
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	08 95       	ret

000021ea <UART1_Read>:

unsigned char UART1_Read(void)
{
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	1f 92       	push	r1
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
    21f4:	89 ec       	ldi	r24, 0xC9	; 201
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	fc 01       	movw	r30, r24
    21fa:	80 81       	ld	r24, Z
    21fc:	88 1f       	adc	r24, r24
    21fe:	88 27       	eor	r24, r24
    2200:	88 1f       	adc	r24, r24
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	81 70       	andi	r24, 0x01	; 1
    2208:	99 27       	eor	r25, r25
    220a:	89 2b       	or	r24, r25
    220c:	e9 f0       	breq	.+58     	; 0x2248 <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
    220e:	00 00       	nop
    2210:	80 91 21 02 	lds	r24, 0x0221
    2214:	88 23       	and	r24, r24
    2216:	e1 f3       	breq	.-8      	; 0x2210 <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
    2218:	80 91 22 02 	lds	r24, 0x0222
    221c:	88 2f       	mov	r24, r24
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	80 52       	subi	r24, 0x20	; 32
    2222:	9e 4f       	sbci	r25, 0xFE	; 254
    2224:	fc 01       	movw	r30, r24
    2226:	80 81       	ld	r24, Z
    2228:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
    222a:	80 91 22 02 	lds	r24, 0x0222
    222e:	8f 5f       	subi	r24, 0xFF	; 255
    2230:	80 93 22 02 	sts	0x0222, r24
    2234:	80 34       	cpi	r24, 0x40	; 64
    2236:	11 f4       	brne	.+4      	; 0x223c <UART1_Read+0x52>
			rx1_rd_index = 0;
    2238:	10 92 22 02 	sts	0x0222, r1

		rx1_counter--;
    223c:	80 91 21 02 	lds	r24, 0x0221
    2240:	81 50       	subi	r24, 0x01	; 1
    2242:	80 93 21 02 	sts	0x0221, r24
    2246:	13 c0       	rjmp	.+38     	; 0x226e <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
    2248:	00 00       	nop
    224a:	88 ec       	ldi	r24, 0xC8	; 200
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	fc 01       	movw	r30, r24
    2250:	80 81       	ld	r24, Z
    2252:	88 1f       	adc	r24, r24
    2254:	88 27       	eor	r24, r24
    2256:	88 1f       	adc	r24, r24
    2258:	88 2f       	mov	r24, r24
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	81 70       	andi	r24, 0x01	; 1
    225e:	99 27       	eor	r25, r25
    2260:	89 2b       	or	r24, r25
    2262:	99 f3       	breq	.-26     	; 0x224a <UART1_Read+0x60>
		data = UDR1;
    2264:	8e ec       	ldi	r24, 0xCE	; 206
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	fc 01       	movw	r30, r24
    226a:	80 81       	ld	r24, Z
    226c:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    226e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2270:	0f 90       	pop	r0
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	08 95       	ret

00002278 <UART1_Buffer>:

void UART1_Buffer(uint8_t* str) {
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	00 d0       	rcall	.+0      	; 0x227e <UART1_Buffer+0x6>
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	9a 83       	std	Y+2, r25	; 0x02
    2284:	89 83       	std	Y+1, r24	; 0x01
	while(*str) {
    2286:	0b c0       	rjmp	.+22     	; 0x229e <UART1_Buffer+0x26>
		altUart1Write(*str++);
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	9c 01       	movw	r18, r24
    228e:	2f 5f       	subi	r18, 0xFF	; 255
    2290:	3f 4f       	sbci	r19, 0xFF	; 255
    2292:	3a 83       	std	Y+2, r19	; 0x02
    2294:	29 83       	std	Y+1, r18	; 0x01
    2296:	fc 01       	movw	r30, r24
    2298:	80 81       	ld	r24, Z
    229a:	0e 94 8d 10 	call	0x211a	; 0x211a <altUart1Write>

	return data;
}

void UART1_Buffer(uint8_t* str) {
	while(*str) {
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	9a 81       	ldd	r25, Y+2	; 0x02
    22a2:	fc 01       	movw	r30, r24
    22a4:	80 81       	ld	r24, Z
    22a6:	88 23       	and	r24, r24
    22a8:	79 f7       	brne	.-34     	; 0x2288 <UART1_Buffer+0x10>
		altUart1Write(*str++);
	}
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	08 95       	ret

000022b4 <main>:
#define POS_DISPENSERLEFT_DOWN		158
#define POS_DISPENSERLEFT_MID       168
#define ID_DISPENSER_LEFT			2

int main()
{
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	aa 97       	sbiw	r28, 0x2a	; 42
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61

	//UART1_Init(UART1_BAUD, UART_ISR_OFF);

	DDRG = 0xff;
    22c8:	83 e3       	ldi	r24, 0x33	; 51
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	2f ef       	ldi	r18, 0xFF	; 255
    22ce:	fc 01       	movw	r30, r24
    22d0:	20 83       	st	Z, r18
	PORTG = 0x00;
    22d2:	84 e3       	ldi	r24, 0x34	; 52
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	fc 01       	movw	r30, r24
    22d8:	10 82       	st	Z, r1
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	aa ef       	ldi	r26, 0xFA	; 250
    22e0:	b3 e4       	ldi	r27, 0x43	; 67
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	ab 83       	std	Y+3, r26	; 0x03
    22e8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e4       	ldi	r19, 0x40	; 64
    22ee:	4c e1       	ldi	r20, 0x1C	; 28
    22f0:	55 e4       	ldi	r21, 0x45	; 69
    22f2:	69 81       	ldd	r22, Y+1	; 0x01
    22f4:	7a 81       	ldd	r23, Y+2	; 0x02
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	8d 83       	std	Y+5, r24	; 0x05
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	af 83       	std	Y+7, r26	; 0x07
    2308:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e8       	ldi	r20, 0x80	; 128
    2310:	5f e3       	ldi	r21, 0x3F	; 63
    2312:	6d 81       	ldd	r22, Y+5	; 0x05
    2314:	7e 81       	ldd	r23, Y+6	; 0x06
    2316:	8f 81       	ldd	r24, Y+7	; 0x07
    2318:	98 85       	ldd	r25, Y+8	; 0x08
    231a:	0e 94 43 13 	call	0x2686	; 0x2686 <__cmpsf2>
    231e:	88 23       	and	r24, r24
    2320:	2c f4       	brge	.+10     	; 0x232c <main+0x78>
		__ticks = 1;
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	9a 87       	std	Y+10, r25	; 0x0a
    2328:	89 87       	std	Y+9, r24	; 0x09
    232a:	3f c0       	rjmp	.+126    	; 0x23aa <main+0xf6>
	else if (__tmp > 65535)
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	3f ef       	ldi	r19, 0xFF	; 255
    2330:	4f e7       	ldi	r20, 0x7F	; 127
    2332:	57 e4       	ldi	r21, 0x47	; 71
    2334:	6d 81       	ldd	r22, Y+5	; 0x05
    2336:	7e 81       	ldd	r23, Y+6	; 0x06
    2338:	8f 81       	ldd	r24, Y+7	; 0x07
    233a:	98 85       	ldd	r25, Y+8	; 0x08
    233c:	0e 94 9b 14 	call	0x2936	; 0x2936 <__gesf2>
    2340:	18 16       	cp	r1, r24
    2342:	4c f5       	brge	.+82     	; 0x2396 <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e2       	ldi	r20, 0x20	; 32
    234a:	51 e4       	ldi	r21, 0x41	; 65
    234c:	69 81       	ldd	r22, Y+1	; 0x01
    234e:	7a 81       	ldd	r23, Y+2	; 0x02
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	bc 01       	movw	r22, r24
    235e:	cd 01       	movw	r24, r26
    2360:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	9a 87       	std	Y+10, r25	; 0x0a
    236a:	89 87       	std	Y+9, r24	; 0x09
    236c:	0f c0       	rjmp	.+30     	; 0x238c <main+0xd8>
    236e:	8a ef       	ldi	r24, 0xFA	; 250
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	9c 87       	std	Y+12, r25	; 0x0c
    2374:	8b 87       	std	Y+11, r24	; 0x0b
    2376:	8b 85       	ldd	r24, Y+11	; 0x0b
    2378:	9c 85       	ldd	r25, Y+12	; 0x0c
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	f1 f7       	brne	.-4      	; 0x237a <main+0xc6>
    237e:	9c 87       	std	Y+12, r25	; 0x0c
    2380:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	9a 87       	std	Y+10, r25	; 0x0a
    238a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	89 2b       	or	r24, r25
    2392:	69 f7       	brne	.-38     	; 0x236e <main+0xba>
    2394:	14 c0       	rjmp	.+40     	; 0x23be <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2396:	6d 81       	ldd	r22, Y+5	; 0x05
    2398:	7e 81       	ldd	r23, Y+6	; 0x06
    239a:	8f 81       	ldd	r24, Y+7	; 0x07
    239c:	98 85       	ldd	r25, Y+8	; 0x08
    239e:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9a 87       	std	Y+10, r25	; 0x0a
    23a8:	89 87       	std	Y+9, r24	; 0x09
    23aa:	89 85       	ldd	r24, Y+9	; 0x09
    23ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ae:	9e 87       	std	Y+14, r25	; 0x0e
    23b0:	8d 87       	std	Y+13, r24	; 0x0d
    23b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <main+0x102>
    23ba:	9e 87       	std	Y+14, r25	; 0x0e
    23bc:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(500);

	AX_UART_Init();
    23be:	0e 94 0e 04 	call	0x81c	; 0x81c <AX_UART_Init>

	while(1) {
		AX_SetAngle(POS_DISPENSERLEFT_UP, 200, 0, ID_DISPENSER_LEFT);
    23c2:	22 e0       	ldi	r18, 0x02	; 2
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	68 ec       	ldi	r22, 0xC8	; 200
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	84 ef       	ldi	r24, 0xF4	; 244
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	0e 94 60 05 	call	0xac0	; 0xac0 <AX_SetAngle>
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	aa ef       	ldi	r26, 0xFA	; 250
    23d8:	b4 e4       	ldi	r27, 0x44	; 68
    23da:	8f 87       	std	Y+15, r24	; 0x0f
    23dc:	98 8b       	std	Y+16, r25	; 0x10
    23de:	a9 8b       	std	Y+17, r26	; 0x11
    23e0:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e4       	ldi	r19, 0x40	; 64
    23e6:	4c e1       	ldi	r20, 0x1C	; 28
    23e8:	55 e4       	ldi	r21, 0x45	; 69
    23ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    23ec:	78 89       	ldd	r23, Y+16	; 0x10
    23ee:	89 89       	ldd	r24, Y+17	; 0x11
    23f0:	9a 89       	ldd	r25, Y+18	; 0x12
    23f2:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	8b 8b       	std	Y+19, r24	; 0x13
    23fc:	9c 8b       	std	Y+20, r25	; 0x14
    23fe:	ad 8b       	std	Y+21, r26	; 0x15
    2400:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	6b 89       	ldd	r22, Y+19	; 0x13
    240c:	7c 89       	ldd	r23, Y+20	; 0x14
    240e:	8d 89       	ldd	r24, Y+21	; 0x15
    2410:	9e 89       	ldd	r25, Y+22	; 0x16
    2412:	0e 94 43 13 	call	0x2686	; 0x2686 <__cmpsf2>
    2416:	88 23       	and	r24, r24
    2418:	2c f4       	brge	.+10     	; 0x2424 <main+0x170>
		__ticks = 1;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	98 8f       	std	Y+24, r25	; 0x18
    2420:	8f 8b       	std	Y+23, r24	; 0x17
    2422:	3f c0       	rjmp	.+126    	; 0x24a2 <main+0x1ee>
	else if (__tmp > 65535)
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	6b 89       	ldd	r22, Y+19	; 0x13
    242e:	7c 89       	ldd	r23, Y+20	; 0x14
    2430:	8d 89       	ldd	r24, Y+21	; 0x15
    2432:	9e 89       	ldd	r25, Y+22	; 0x16
    2434:	0e 94 9b 14 	call	0x2936	; 0x2936 <__gesf2>
    2438:	18 16       	cp	r1, r24
    243a:	4c f5       	brge	.+82     	; 0x248e <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	6f 85       	ldd	r22, Y+15	; 0x0f
    2446:	78 89       	ldd	r23, Y+16	; 0x10
    2448:	89 89       	ldd	r24, Y+17	; 0x11
    244a:	9a 89       	ldd	r25, Y+18	; 0x12
    244c:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	bc 01       	movw	r22, r24
    2456:	cd 01       	movw	r24, r26
    2458:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	98 8f       	std	Y+24, r25	; 0x18
    2462:	8f 8b       	std	Y+23, r24	; 0x17
    2464:	0f c0       	rjmp	.+30     	; 0x2484 <main+0x1d0>
    2466:	8a ef       	ldi	r24, 0xFA	; 250
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	9a 8f       	std	Y+26, r25	; 0x1a
    246c:	89 8f       	std	Y+25, r24	; 0x19
    246e:	89 8d       	ldd	r24, Y+25	; 0x19
    2470:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	f1 f7       	brne	.-4      	; 0x2472 <main+0x1be>
    2476:	9a 8f       	std	Y+26, r25	; 0x1a
    2478:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247a:	8f 89       	ldd	r24, Y+23	; 0x17
    247c:	98 8d       	ldd	r25, Y+24	; 0x18
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	98 8f       	std	Y+24, r25	; 0x18
    2482:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2484:	8f 89       	ldd	r24, Y+23	; 0x17
    2486:	98 8d       	ldd	r25, Y+24	; 0x18
    2488:	89 2b       	or	r24, r25
    248a:	69 f7       	brne	.-38     	; 0x2466 <main+0x1b2>
    248c:	14 c0       	rjmp	.+40     	; 0x24b6 <main+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248e:	6b 89       	ldd	r22, Y+19	; 0x13
    2490:	7c 89       	ldd	r23, Y+20	; 0x14
    2492:	8d 89       	ldd	r24, Y+21	; 0x15
    2494:	9e 89       	ldd	r25, Y+22	; 0x16
    2496:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	98 8f       	std	Y+24, r25	; 0x18
    24a0:	8f 8b       	std	Y+23, r24	; 0x17
    24a2:	8f 89       	ldd	r24, Y+23	; 0x17
    24a4:	98 8d       	ldd	r25, Y+24	; 0x18
    24a6:	9c 8f       	std	Y+28, r25	; 0x1c
    24a8:	8b 8f       	std	Y+27, r24	; 0x1b
    24aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <main+0x1fa>
    24b2:	9c 8f       	std	Y+28, r25	; 0x1c
    24b4:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(2000);
		AX_SetAngle(POS_DISPENSERLEFT_DOWN, 200, 1, ID_DISPENSER_LEFT);
    24b6:	22 e0       	ldi	r18, 0x02	; 2
    24b8:	41 e0       	ldi	r20, 0x01	; 1
    24ba:	68 ec       	ldi	r22, 0xC8	; 200
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	8e e9       	ldi	r24, 0x9E	; 158
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 60 05 	call	0xac0	; 0xac0 <AX_SetAngle>
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	aa ef       	ldi	r26, 0xFA	; 250
    24cc:	b4 e4       	ldi	r27, 0x44	; 68
    24ce:	8d 8f       	std	Y+29, r24	; 0x1d
    24d0:	9e 8f       	std	Y+30, r25	; 0x1e
    24d2:	af 8f       	std	Y+31, r26	; 0x1f
    24d4:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e4       	ldi	r19, 0x40	; 64
    24da:	4c e1       	ldi	r20, 0x1C	; 28
    24dc:	55 e4       	ldi	r21, 0x45	; 69
    24de:	6d 8d       	ldd	r22, Y+29	; 0x1d
    24e0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    24e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24e4:	98 a1       	ldd	r25, Y+32	; 0x20
    24e6:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	89 a3       	std	Y+33, r24	; 0x21
    24f0:	9a a3       	std	Y+34, r25	; 0x22
    24f2:	ab a3       	std	Y+35, r26	; 0x23
    24f4:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e8       	ldi	r20, 0x80	; 128
    24fc:	5f e3       	ldi	r21, 0x3F	; 63
    24fe:	69 a1       	ldd	r22, Y+33	; 0x21
    2500:	7a a1       	ldd	r23, Y+34	; 0x22
    2502:	8b a1       	ldd	r24, Y+35	; 0x23
    2504:	9c a1       	ldd	r25, Y+36	; 0x24
    2506:	0e 94 43 13 	call	0x2686	; 0x2686 <__cmpsf2>
    250a:	88 23       	and	r24, r24
    250c:	2c f4       	brge	.+10     	; 0x2518 <main+0x264>
		__ticks = 1;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9e a3       	std	Y+38, r25	; 0x26
    2514:	8d a3       	std	Y+37, r24	; 0x25
    2516:	3f c0       	rjmp	.+126    	; 0x2596 <main+0x2e2>
	else if (__tmp > 65535)
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	3f ef       	ldi	r19, 0xFF	; 255
    251c:	4f e7       	ldi	r20, 0x7F	; 127
    251e:	57 e4       	ldi	r21, 0x47	; 71
    2520:	69 a1       	ldd	r22, Y+33	; 0x21
    2522:	7a a1       	ldd	r23, Y+34	; 0x22
    2524:	8b a1       	ldd	r24, Y+35	; 0x23
    2526:	9c a1       	ldd	r25, Y+36	; 0x24
    2528:	0e 94 9b 14 	call	0x2936	; 0x2936 <__gesf2>
    252c:	18 16       	cp	r1, r24
    252e:	4c f5       	brge	.+82     	; 0x2582 <main+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	6d 8d       	ldd	r22, Y+29	; 0x1d
    253a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    253c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    253e:	98 a1       	ldd	r25, Y+32	; 0x20
    2540:	0e 94 a0 14 	call	0x2940	; 0x2940 <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	bc 01       	movw	r22, r24
    254a:	cd 01       	movw	r24, r26
    254c:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	9e a3       	std	Y+38, r25	; 0x26
    2556:	8d a3       	std	Y+37, r24	; 0x25
    2558:	0f c0       	rjmp	.+30     	; 0x2578 <main+0x2c4>
    255a:	8a ef       	ldi	r24, 0xFA	; 250
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	98 a7       	std	Y+40, r25	; 0x28
    2560:	8f a3       	std	Y+39, r24	; 0x27
    2562:	8f a1       	ldd	r24, Y+39	; 0x27
    2564:	98 a5       	ldd	r25, Y+40	; 0x28
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <main+0x2b2>
    256a:	98 a7       	std	Y+40, r25	; 0x28
    256c:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256e:	8d a1       	ldd	r24, Y+37	; 0x25
    2570:	9e a1       	ldd	r25, Y+38	; 0x26
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	9e a3       	std	Y+38, r25	; 0x26
    2576:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2578:	8d a1       	ldd	r24, Y+37	; 0x25
    257a:	9e a1       	ldd	r25, Y+38	; 0x26
    257c:	89 2b       	or	r24, r25
    257e:	69 f7       	brne	.-38     	; 0x255a <main+0x2a6>
    2580:	14 c0       	rjmp	.+40     	; 0x25aa <main+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	69 a1       	ldd	r22, Y+33	; 0x21
    2584:	7a a1       	ldd	r23, Y+34	; 0x22
    2586:	8b a1       	ldd	r24, Y+35	; 0x23
    2588:	9c a1       	ldd	r25, Y+36	; 0x24
    258a:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	9e a3       	std	Y+38, r25	; 0x26
    2594:	8d a3       	std	Y+37, r24	; 0x25
    2596:	8d a1       	ldd	r24, Y+37	; 0x25
    2598:	9e a1       	ldd	r25, Y+38	; 0x26
    259a:	9a a7       	std	Y+42, r25	; 0x2a
    259c:	89 a7       	std	Y+41, r24	; 0x29
    259e:	89 a5       	ldd	r24, Y+41	; 0x29
    25a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <main+0x2ee>
    25a6:	9a a7       	std	Y+42, r25	; 0x2a
    25a8:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(2000);
	}
    25aa:	0b cf       	rjmp	.-490    	; 0x23c2 <main+0x10e>

000025ac <__subsf3>:
    25ac:	50 58       	subi	r21, 0x80	; 128

000025ae <__addsf3>:
    25ae:	bb 27       	eor	r27, r27
    25b0:	aa 27       	eor	r26, r26
    25b2:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__addsf3x>
    25b6:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__fp_round>
    25ba:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fp_pscA>
    25be:	38 f0       	brcs	.+14     	; 0x25ce <__addsf3+0x20>
    25c0:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__fp_pscB>
    25c4:	20 f0       	brcs	.+8      	; 0x25ce <__addsf3+0x20>
    25c6:	39 f4       	brne	.+14     	; 0x25d6 <__addsf3+0x28>
    25c8:	9f 3f       	cpi	r25, 0xFF	; 255
    25ca:	19 f4       	brne	.+6      	; 0x25d2 <__addsf3+0x24>
    25cc:	26 f4       	brtc	.+8      	; 0x25d6 <__addsf3+0x28>
    25ce:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__fp_nan>
    25d2:	0e f4       	brtc	.+2      	; 0x25d6 <__addsf3+0x28>
    25d4:	e0 95       	com	r30
    25d6:	e7 fb       	bst	r30, 7
    25d8:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__fp_inf>

000025dc <__addsf3x>:
    25dc:	e9 2f       	mov	r30, r25
    25de:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fp_split3>
    25e2:	58 f3       	brcs	.-42     	; 0x25ba <__addsf3+0xc>
    25e4:	ba 17       	cp	r27, r26
    25e6:	62 07       	cpc	r22, r18
    25e8:	73 07       	cpc	r23, r19
    25ea:	84 07       	cpc	r24, r20
    25ec:	95 07       	cpc	r25, r21
    25ee:	20 f0       	brcs	.+8      	; 0x25f8 <__addsf3x+0x1c>
    25f0:	79 f4       	brne	.+30     	; 0x2610 <__addsf3x+0x34>
    25f2:	a6 f5       	brtc	.+104    	; 0x265c <__addsf3x+0x80>
    25f4:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__fp_zero>
    25f8:	0e f4       	brtc	.+2      	; 0x25fc <__addsf3x+0x20>
    25fa:	e0 95       	com	r30
    25fc:	0b 2e       	mov	r0, r27
    25fe:	ba 2f       	mov	r27, r26
    2600:	a0 2d       	mov	r26, r0
    2602:	0b 01       	movw	r0, r22
    2604:	b9 01       	movw	r22, r18
    2606:	90 01       	movw	r18, r0
    2608:	0c 01       	movw	r0, r24
    260a:	ca 01       	movw	r24, r20
    260c:	a0 01       	movw	r20, r0
    260e:	11 24       	eor	r1, r1
    2610:	ff 27       	eor	r31, r31
    2612:	59 1b       	sub	r21, r25
    2614:	99 f0       	breq	.+38     	; 0x263c <__addsf3x+0x60>
    2616:	59 3f       	cpi	r21, 0xF9	; 249
    2618:	50 f4       	brcc	.+20     	; 0x262e <__addsf3x+0x52>
    261a:	50 3e       	cpi	r21, 0xE0	; 224
    261c:	68 f1       	brcs	.+90     	; 0x2678 <__addsf3x+0x9c>
    261e:	1a 16       	cp	r1, r26
    2620:	f0 40       	sbci	r31, 0x00	; 0
    2622:	a2 2f       	mov	r26, r18
    2624:	23 2f       	mov	r18, r19
    2626:	34 2f       	mov	r19, r20
    2628:	44 27       	eor	r20, r20
    262a:	58 5f       	subi	r21, 0xF8	; 248
    262c:	f3 cf       	rjmp	.-26     	; 0x2614 <__addsf3x+0x38>
    262e:	46 95       	lsr	r20
    2630:	37 95       	ror	r19
    2632:	27 95       	ror	r18
    2634:	a7 95       	ror	r26
    2636:	f0 40       	sbci	r31, 0x00	; 0
    2638:	53 95       	inc	r21
    263a:	c9 f7       	brne	.-14     	; 0x262e <__addsf3x+0x52>
    263c:	7e f4       	brtc	.+30     	; 0x265c <__addsf3x+0x80>
    263e:	1f 16       	cp	r1, r31
    2640:	ba 0b       	sbc	r27, r26
    2642:	62 0b       	sbc	r22, r18
    2644:	73 0b       	sbc	r23, r19
    2646:	84 0b       	sbc	r24, r20
    2648:	ba f0       	brmi	.+46     	; 0x2678 <__addsf3x+0x9c>
    264a:	91 50       	subi	r25, 0x01	; 1
    264c:	a1 f0       	breq	.+40     	; 0x2676 <__addsf3x+0x9a>
    264e:	ff 0f       	add	r31, r31
    2650:	bb 1f       	adc	r27, r27
    2652:	66 1f       	adc	r22, r22
    2654:	77 1f       	adc	r23, r23
    2656:	88 1f       	adc	r24, r24
    2658:	c2 f7       	brpl	.-16     	; 0x264a <__addsf3x+0x6e>
    265a:	0e c0       	rjmp	.+28     	; 0x2678 <__addsf3x+0x9c>
    265c:	ba 0f       	add	r27, r26
    265e:	62 1f       	adc	r22, r18
    2660:	73 1f       	adc	r23, r19
    2662:	84 1f       	adc	r24, r20
    2664:	48 f4       	brcc	.+18     	; 0x2678 <__addsf3x+0x9c>
    2666:	87 95       	ror	r24
    2668:	77 95       	ror	r23
    266a:	67 95       	ror	r22
    266c:	b7 95       	ror	r27
    266e:	f7 95       	ror	r31
    2670:	9e 3f       	cpi	r25, 0xFE	; 254
    2672:	08 f0       	brcs	.+2      	; 0x2676 <__addsf3x+0x9a>
    2674:	b0 cf       	rjmp	.-160    	; 0x25d6 <__addsf3+0x28>
    2676:	93 95       	inc	r25
    2678:	88 0f       	add	r24, r24
    267a:	08 f0       	brcs	.+2      	; 0x267e <__addsf3x+0xa2>
    267c:	99 27       	eor	r25, r25
    267e:	ee 0f       	add	r30, r30
    2680:	97 95       	ror	r25
    2682:	87 95       	ror	r24
    2684:	08 95       	ret

00002686 <__cmpsf2>:
    2686:	0e 94 26 14 	call	0x284c	; 0x284c <__fp_cmp>
    268a:	08 f4       	brcc	.+2      	; 0x268e <__cmpsf2+0x8>
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	08 95       	ret

00002690 <__divsf3>:
    2690:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__divsf3x>
    2694:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__fp_round>
    2698:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__fp_pscB>
    269c:	58 f0       	brcs	.+22     	; 0x26b4 <__divsf3+0x24>
    269e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fp_pscA>
    26a2:	40 f0       	brcs	.+16     	; 0x26b4 <__divsf3+0x24>
    26a4:	29 f4       	brne	.+10     	; 0x26b0 <__divsf3+0x20>
    26a6:	5f 3f       	cpi	r21, 0xFF	; 255
    26a8:	29 f0       	breq	.+10     	; 0x26b4 <__divsf3+0x24>
    26aa:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__fp_inf>
    26ae:	51 11       	cpse	r21, r1
    26b0:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_szero>
    26b4:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__fp_nan>

000026b8 <__divsf3x>:
    26b8:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fp_split3>
    26bc:	68 f3       	brcs	.-38     	; 0x2698 <__divsf3+0x8>

000026be <__divsf3_pse>:
    26be:	99 23       	and	r25, r25
    26c0:	b1 f3       	breq	.-20     	; 0x26ae <__divsf3+0x1e>
    26c2:	55 23       	and	r21, r21
    26c4:	91 f3       	breq	.-28     	; 0x26aa <__divsf3+0x1a>
    26c6:	95 1b       	sub	r25, r21
    26c8:	55 0b       	sbc	r21, r21
    26ca:	bb 27       	eor	r27, r27
    26cc:	aa 27       	eor	r26, r26
    26ce:	62 17       	cp	r22, r18
    26d0:	73 07       	cpc	r23, r19
    26d2:	84 07       	cpc	r24, r20
    26d4:	38 f0       	brcs	.+14     	; 0x26e4 <__divsf3_pse+0x26>
    26d6:	9f 5f       	subi	r25, 0xFF	; 255
    26d8:	5f 4f       	sbci	r21, 0xFF	; 255
    26da:	22 0f       	add	r18, r18
    26dc:	33 1f       	adc	r19, r19
    26de:	44 1f       	adc	r20, r20
    26e0:	aa 1f       	adc	r26, r26
    26e2:	a9 f3       	breq	.-22     	; 0x26ce <__divsf3_pse+0x10>
    26e4:	35 d0       	rcall	.+106    	; 0x2750 <__divsf3_pse+0x92>
    26e6:	0e 2e       	mov	r0, r30
    26e8:	3a f0       	brmi	.+14     	; 0x26f8 <__divsf3_pse+0x3a>
    26ea:	e0 e8       	ldi	r30, 0x80	; 128
    26ec:	32 d0       	rcall	.+100    	; 0x2752 <__divsf3_pse+0x94>
    26ee:	91 50       	subi	r25, 0x01	; 1
    26f0:	50 40       	sbci	r21, 0x00	; 0
    26f2:	e6 95       	lsr	r30
    26f4:	00 1c       	adc	r0, r0
    26f6:	ca f7       	brpl	.-14     	; 0x26ea <__divsf3_pse+0x2c>
    26f8:	2b d0       	rcall	.+86     	; 0x2750 <__divsf3_pse+0x92>
    26fa:	fe 2f       	mov	r31, r30
    26fc:	29 d0       	rcall	.+82     	; 0x2750 <__divsf3_pse+0x92>
    26fe:	66 0f       	add	r22, r22
    2700:	77 1f       	adc	r23, r23
    2702:	88 1f       	adc	r24, r24
    2704:	bb 1f       	adc	r27, r27
    2706:	26 17       	cp	r18, r22
    2708:	37 07       	cpc	r19, r23
    270a:	48 07       	cpc	r20, r24
    270c:	ab 07       	cpc	r26, r27
    270e:	b0 e8       	ldi	r27, 0x80	; 128
    2710:	09 f0       	breq	.+2      	; 0x2714 <__divsf3_pse+0x56>
    2712:	bb 0b       	sbc	r27, r27
    2714:	80 2d       	mov	r24, r0
    2716:	bf 01       	movw	r22, r30
    2718:	ff 27       	eor	r31, r31
    271a:	93 58       	subi	r25, 0x83	; 131
    271c:	5f 4f       	sbci	r21, 0xFF	; 255
    271e:	3a f0       	brmi	.+14     	; 0x272e <__divsf3_pse+0x70>
    2720:	9e 3f       	cpi	r25, 0xFE	; 254
    2722:	51 05       	cpc	r21, r1
    2724:	78 f0       	brcs	.+30     	; 0x2744 <__divsf3_pse+0x86>
    2726:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__fp_inf>
    272a:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_szero>
    272e:	5f 3f       	cpi	r21, 0xFF	; 255
    2730:	e4 f3       	brlt	.-8      	; 0x272a <__divsf3_pse+0x6c>
    2732:	98 3e       	cpi	r25, 0xE8	; 232
    2734:	d4 f3       	brlt	.-12     	; 0x272a <__divsf3_pse+0x6c>
    2736:	86 95       	lsr	r24
    2738:	77 95       	ror	r23
    273a:	67 95       	ror	r22
    273c:	b7 95       	ror	r27
    273e:	f7 95       	ror	r31
    2740:	9f 5f       	subi	r25, 0xFF	; 255
    2742:	c9 f7       	brne	.-14     	; 0x2736 <__divsf3_pse+0x78>
    2744:	88 0f       	add	r24, r24
    2746:	91 1d       	adc	r25, r1
    2748:	96 95       	lsr	r25
    274a:	87 95       	ror	r24
    274c:	97 f9       	bld	r25, 7
    274e:	08 95       	ret
    2750:	e1 e0       	ldi	r30, 0x01	; 1
    2752:	66 0f       	add	r22, r22
    2754:	77 1f       	adc	r23, r23
    2756:	88 1f       	adc	r24, r24
    2758:	bb 1f       	adc	r27, r27
    275a:	62 17       	cp	r22, r18
    275c:	73 07       	cpc	r23, r19
    275e:	84 07       	cpc	r24, r20
    2760:	ba 07       	cpc	r27, r26
    2762:	20 f0       	brcs	.+8      	; 0x276c <__divsf3_pse+0xae>
    2764:	62 1b       	sub	r22, r18
    2766:	73 0b       	sbc	r23, r19
    2768:	84 0b       	sbc	r24, r20
    276a:	ba 0b       	sbc	r27, r26
    276c:	ee 1f       	adc	r30, r30
    276e:	88 f7       	brcc	.-30     	; 0x2752 <__divsf3_pse+0x94>
    2770:	e0 95       	com	r30
    2772:	08 95       	ret

00002774 <__fixunssfsi>:
    2774:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <__fp_splitA>
    2778:	88 f0       	brcs	.+34     	; 0x279c <__fixunssfsi+0x28>
    277a:	9f 57       	subi	r25, 0x7F	; 127
    277c:	98 f0       	brcs	.+38     	; 0x27a4 <__fixunssfsi+0x30>
    277e:	b9 2f       	mov	r27, r25
    2780:	99 27       	eor	r25, r25
    2782:	b7 51       	subi	r27, 0x17	; 23
    2784:	b0 f0       	brcs	.+44     	; 0x27b2 <__fixunssfsi+0x3e>
    2786:	e1 f0       	breq	.+56     	; 0x27c0 <__fixunssfsi+0x4c>
    2788:	66 0f       	add	r22, r22
    278a:	77 1f       	adc	r23, r23
    278c:	88 1f       	adc	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	1a f0       	brmi	.+6      	; 0x2798 <__fixunssfsi+0x24>
    2792:	ba 95       	dec	r27
    2794:	c9 f7       	brne	.-14     	; 0x2788 <__fixunssfsi+0x14>
    2796:	14 c0       	rjmp	.+40     	; 0x27c0 <__fixunssfsi+0x4c>
    2798:	b1 30       	cpi	r27, 0x01	; 1
    279a:	91 f0       	breq	.+36     	; 0x27c0 <__fixunssfsi+0x4c>
    279c:	0e 94 94 14 	call	0x2928	; 0x2928 <__fp_zero>
    27a0:	b1 e0       	ldi	r27, 0x01	; 1
    27a2:	08 95       	ret
    27a4:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__fp_zero>
    27a8:	67 2f       	mov	r22, r23
    27aa:	78 2f       	mov	r23, r24
    27ac:	88 27       	eor	r24, r24
    27ae:	b8 5f       	subi	r27, 0xF8	; 248
    27b0:	39 f0       	breq	.+14     	; 0x27c0 <__fixunssfsi+0x4c>
    27b2:	b9 3f       	cpi	r27, 0xF9	; 249
    27b4:	cc f3       	brlt	.-14     	; 0x27a8 <__fixunssfsi+0x34>
    27b6:	86 95       	lsr	r24
    27b8:	77 95       	ror	r23
    27ba:	67 95       	ror	r22
    27bc:	b3 95       	inc	r27
    27be:	d9 f7       	brne	.-10     	; 0x27b6 <__fixunssfsi+0x42>
    27c0:	3e f4       	brtc	.+14     	; 0x27d0 <__fixunssfsi+0x5c>
    27c2:	90 95       	com	r25
    27c4:	80 95       	com	r24
    27c6:	70 95       	com	r23
    27c8:	61 95       	neg	r22
    27ca:	7f 4f       	sbci	r23, 0xFF	; 255
    27cc:	8f 4f       	sbci	r24, 0xFF	; 255
    27ce:	9f 4f       	sbci	r25, 0xFF	; 255
    27d0:	08 95       	ret

000027d2 <__floatunsisf>:
    27d2:	e8 94       	clt
    27d4:	09 c0       	rjmp	.+18     	; 0x27e8 <__floatsisf+0x12>

000027d6 <__floatsisf>:
    27d6:	97 fb       	bst	r25, 7
    27d8:	3e f4       	brtc	.+14     	; 0x27e8 <__floatsisf+0x12>
    27da:	90 95       	com	r25
    27dc:	80 95       	com	r24
    27de:	70 95       	com	r23
    27e0:	61 95       	neg	r22
    27e2:	7f 4f       	sbci	r23, 0xFF	; 255
    27e4:	8f 4f       	sbci	r24, 0xFF	; 255
    27e6:	9f 4f       	sbci	r25, 0xFF	; 255
    27e8:	99 23       	and	r25, r25
    27ea:	a9 f0       	breq	.+42     	; 0x2816 <__floatsisf+0x40>
    27ec:	f9 2f       	mov	r31, r25
    27ee:	96 e9       	ldi	r25, 0x96	; 150
    27f0:	bb 27       	eor	r27, r27
    27f2:	93 95       	inc	r25
    27f4:	f6 95       	lsr	r31
    27f6:	87 95       	ror	r24
    27f8:	77 95       	ror	r23
    27fa:	67 95       	ror	r22
    27fc:	b7 95       	ror	r27
    27fe:	f1 11       	cpse	r31, r1
    2800:	f8 cf       	rjmp	.-16     	; 0x27f2 <__floatsisf+0x1c>
    2802:	fa f4       	brpl	.+62     	; 0x2842 <__floatsisf+0x6c>
    2804:	bb 0f       	add	r27, r27
    2806:	11 f4       	brne	.+4      	; 0x280c <__floatsisf+0x36>
    2808:	60 ff       	sbrs	r22, 0
    280a:	1b c0       	rjmp	.+54     	; 0x2842 <__floatsisf+0x6c>
    280c:	6f 5f       	subi	r22, 0xFF	; 255
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	8f 4f       	sbci	r24, 0xFF	; 255
    2812:	9f 4f       	sbci	r25, 0xFF	; 255
    2814:	16 c0       	rjmp	.+44     	; 0x2842 <__floatsisf+0x6c>
    2816:	88 23       	and	r24, r24
    2818:	11 f0       	breq	.+4      	; 0x281e <__floatsisf+0x48>
    281a:	96 e9       	ldi	r25, 0x96	; 150
    281c:	11 c0       	rjmp	.+34     	; 0x2840 <__floatsisf+0x6a>
    281e:	77 23       	and	r23, r23
    2820:	21 f0       	breq	.+8      	; 0x282a <__floatsisf+0x54>
    2822:	9e e8       	ldi	r25, 0x8E	; 142
    2824:	87 2f       	mov	r24, r23
    2826:	76 2f       	mov	r23, r22
    2828:	05 c0       	rjmp	.+10     	; 0x2834 <__floatsisf+0x5e>
    282a:	66 23       	and	r22, r22
    282c:	71 f0       	breq	.+28     	; 0x284a <__floatsisf+0x74>
    282e:	96 e8       	ldi	r25, 0x86	; 134
    2830:	86 2f       	mov	r24, r22
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	60 e0       	ldi	r22, 0x00	; 0
    2836:	2a f0       	brmi	.+10     	; 0x2842 <__floatsisf+0x6c>
    2838:	9a 95       	dec	r25
    283a:	66 0f       	add	r22, r22
    283c:	77 1f       	adc	r23, r23
    283e:	88 1f       	adc	r24, r24
    2840:	da f7       	brpl	.-10     	; 0x2838 <__floatsisf+0x62>
    2842:	88 0f       	add	r24, r24
    2844:	96 95       	lsr	r25
    2846:	87 95       	ror	r24
    2848:	97 f9       	bld	r25, 7
    284a:	08 95       	ret

0000284c <__fp_cmp>:
    284c:	99 0f       	add	r25, r25
    284e:	00 08       	sbc	r0, r0
    2850:	55 0f       	add	r21, r21
    2852:	aa 0b       	sbc	r26, r26
    2854:	e0 e8       	ldi	r30, 0x80	; 128
    2856:	fe ef       	ldi	r31, 0xFE	; 254
    2858:	16 16       	cp	r1, r22
    285a:	17 06       	cpc	r1, r23
    285c:	e8 07       	cpc	r30, r24
    285e:	f9 07       	cpc	r31, r25
    2860:	c0 f0       	brcs	.+48     	; 0x2892 <__fp_cmp+0x46>
    2862:	12 16       	cp	r1, r18
    2864:	13 06       	cpc	r1, r19
    2866:	e4 07       	cpc	r30, r20
    2868:	f5 07       	cpc	r31, r21
    286a:	98 f0       	brcs	.+38     	; 0x2892 <__fp_cmp+0x46>
    286c:	62 1b       	sub	r22, r18
    286e:	73 0b       	sbc	r23, r19
    2870:	84 0b       	sbc	r24, r20
    2872:	95 0b       	sbc	r25, r21
    2874:	39 f4       	brne	.+14     	; 0x2884 <__fp_cmp+0x38>
    2876:	0a 26       	eor	r0, r26
    2878:	61 f0       	breq	.+24     	; 0x2892 <__fp_cmp+0x46>
    287a:	23 2b       	or	r18, r19
    287c:	24 2b       	or	r18, r20
    287e:	25 2b       	or	r18, r21
    2880:	21 f4       	brne	.+8      	; 0x288a <__fp_cmp+0x3e>
    2882:	08 95       	ret
    2884:	0a 26       	eor	r0, r26
    2886:	09 f4       	brne	.+2      	; 0x288a <__fp_cmp+0x3e>
    2888:	a1 40       	sbci	r26, 0x01	; 1
    288a:	a6 95       	lsr	r26
    288c:	8f ef       	ldi	r24, 0xFF	; 255
    288e:	81 1d       	adc	r24, r1
    2890:	81 1d       	adc	r24, r1
    2892:	08 95       	ret

00002894 <__fp_inf>:
    2894:	97 f9       	bld	r25, 7
    2896:	9f 67       	ori	r25, 0x7F	; 127
    2898:	80 e8       	ldi	r24, 0x80	; 128
    289a:	70 e0       	ldi	r23, 0x00	; 0
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	08 95       	ret

000028a0 <__fp_nan>:
    28a0:	9f ef       	ldi	r25, 0xFF	; 255
    28a2:	80 ec       	ldi	r24, 0xC0	; 192
    28a4:	08 95       	ret

000028a6 <__fp_pscA>:
    28a6:	00 24       	eor	r0, r0
    28a8:	0a 94       	dec	r0
    28aa:	16 16       	cp	r1, r22
    28ac:	17 06       	cpc	r1, r23
    28ae:	18 06       	cpc	r1, r24
    28b0:	09 06       	cpc	r0, r25
    28b2:	08 95       	ret

000028b4 <__fp_pscB>:
    28b4:	00 24       	eor	r0, r0
    28b6:	0a 94       	dec	r0
    28b8:	12 16       	cp	r1, r18
    28ba:	13 06       	cpc	r1, r19
    28bc:	14 06       	cpc	r1, r20
    28be:	05 06       	cpc	r0, r21
    28c0:	08 95       	ret

000028c2 <__fp_round>:
    28c2:	09 2e       	mov	r0, r25
    28c4:	03 94       	inc	r0
    28c6:	00 0c       	add	r0, r0
    28c8:	11 f4       	brne	.+4      	; 0x28ce <__fp_round+0xc>
    28ca:	88 23       	and	r24, r24
    28cc:	52 f0       	brmi	.+20     	; 0x28e2 <__fp_round+0x20>
    28ce:	bb 0f       	add	r27, r27
    28d0:	40 f4       	brcc	.+16     	; 0x28e2 <__fp_round+0x20>
    28d2:	bf 2b       	or	r27, r31
    28d4:	11 f4       	brne	.+4      	; 0x28da <__fp_round+0x18>
    28d6:	60 ff       	sbrs	r22, 0
    28d8:	04 c0       	rjmp	.+8      	; 0x28e2 <__fp_round+0x20>
    28da:	6f 5f       	subi	r22, 0xFF	; 255
    28dc:	7f 4f       	sbci	r23, 0xFF	; 255
    28de:	8f 4f       	sbci	r24, 0xFF	; 255
    28e0:	9f 4f       	sbci	r25, 0xFF	; 255
    28e2:	08 95       	ret

000028e4 <__fp_split3>:
    28e4:	57 fd       	sbrc	r21, 7
    28e6:	90 58       	subi	r25, 0x80	; 128
    28e8:	44 0f       	add	r20, r20
    28ea:	55 1f       	adc	r21, r21
    28ec:	59 f0       	breq	.+22     	; 0x2904 <__fp_splitA+0x10>
    28ee:	5f 3f       	cpi	r21, 0xFF	; 255
    28f0:	71 f0       	breq	.+28     	; 0x290e <__fp_splitA+0x1a>
    28f2:	47 95       	ror	r20

000028f4 <__fp_splitA>:
    28f4:	88 0f       	add	r24, r24
    28f6:	97 fb       	bst	r25, 7
    28f8:	99 1f       	adc	r25, r25
    28fa:	61 f0       	breq	.+24     	; 0x2914 <__fp_splitA+0x20>
    28fc:	9f 3f       	cpi	r25, 0xFF	; 255
    28fe:	79 f0       	breq	.+30     	; 0x291e <__fp_splitA+0x2a>
    2900:	87 95       	ror	r24
    2902:	08 95       	ret
    2904:	12 16       	cp	r1, r18
    2906:	13 06       	cpc	r1, r19
    2908:	14 06       	cpc	r1, r20
    290a:	55 1f       	adc	r21, r21
    290c:	f2 cf       	rjmp	.-28     	; 0x28f2 <__fp_split3+0xe>
    290e:	46 95       	lsr	r20
    2910:	f1 df       	rcall	.-30     	; 0x28f4 <__fp_splitA>
    2912:	08 c0       	rjmp	.+16     	; 0x2924 <__fp_splitA+0x30>
    2914:	16 16       	cp	r1, r22
    2916:	17 06       	cpc	r1, r23
    2918:	18 06       	cpc	r1, r24
    291a:	99 1f       	adc	r25, r25
    291c:	f1 cf       	rjmp	.-30     	; 0x2900 <__fp_splitA+0xc>
    291e:	86 95       	lsr	r24
    2920:	71 05       	cpc	r23, r1
    2922:	61 05       	cpc	r22, r1
    2924:	08 94       	sec
    2926:	08 95       	ret

00002928 <__fp_zero>:
    2928:	e8 94       	clt

0000292a <__fp_szero>:
    292a:	bb 27       	eor	r27, r27
    292c:	66 27       	eor	r22, r22
    292e:	77 27       	eor	r23, r23
    2930:	cb 01       	movw	r24, r22
    2932:	97 f9       	bld	r25, 7
    2934:	08 95       	ret

00002936 <__gesf2>:
    2936:	0e 94 26 14 	call	0x284c	; 0x284c <__fp_cmp>
    293a:	08 f4       	brcc	.+2      	; 0x293e <__gesf2+0x8>
    293c:	8f ef       	ldi	r24, 0xFF	; 255
    293e:	08 95       	ret

00002940 <__mulsf3>:
    2940:	0e 94 b3 14 	call	0x2966	; 0x2966 <__mulsf3x>
    2944:	0c 94 61 14 	jmp	0x28c2	; 0x28c2 <__fp_round>
    2948:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fp_pscA>
    294c:	38 f0       	brcs	.+14     	; 0x295c <__mulsf3+0x1c>
    294e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__fp_pscB>
    2952:	20 f0       	brcs	.+8      	; 0x295c <__mulsf3+0x1c>
    2954:	95 23       	and	r25, r21
    2956:	11 f0       	breq	.+4      	; 0x295c <__mulsf3+0x1c>
    2958:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__fp_inf>
    295c:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__fp_nan>
    2960:	11 24       	eor	r1, r1
    2962:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_szero>

00002966 <__mulsf3x>:
    2966:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__fp_split3>
    296a:	70 f3       	brcs	.-36     	; 0x2948 <__mulsf3+0x8>

0000296c <__mulsf3_pse>:
    296c:	95 9f       	mul	r25, r21
    296e:	c1 f3       	breq	.-16     	; 0x2960 <__mulsf3+0x20>
    2970:	95 0f       	add	r25, r21
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	55 1f       	adc	r21, r21
    2976:	62 9f       	mul	r22, r18
    2978:	f0 01       	movw	r30, r0
    297a:	72 9f       	mul	r23, r18
    297c:	bb 27       	eor	r27, r27
    297e:	f0 0d       	add	r31, r0
    2980:	b1 1d       	adc	r27, r1
    2982:	63 9f       	mul	r22, r19
    2984:	aa 27       	eor	r26, r26
    2986:	f0 0d       	add	r31, r0
    2988:	b1 1d       	adc	r27, r1
    298a:	aa 1f       	adc	r26, r26
    298c:	64 9f       	mul	r22, r20
    298e:	66 27       	eor	r22, r22
    2990:	b0 0d       	add	r27, r0
    2992:	a1 1d       	adc	r26, r1
    2994:	66 1f       	adc	r22, r22
    2996:	82 9f       	mul	r24, r18
    2998:	22 27       	eor	r18, r18
    299a:	b0 0d       	add	r27, r0
    299c:	a1 1d       	adc	r26, r1
    299e:	62 1f       	adc	r22, r18
    29a0:	73 9f       	mul	r23, r19
    29a2:	b0 0d       	add	r27, r0
    29a4:	a1 1d       	adc	r26, r1
    29a6:	62 1f       	adc	r22, r18
    29a8:	83 9f       	mul	r24, r19
    29aa:	a0 0d       	add	r26, r0
    29ac:	61 1d       	adc	r22, r1
    29ae:	22 1f       	adc	r18, r18
    29b0:	74 9f       	mul	r23, r20
    29b2:	33 27       	eor	r19, r19
    29b4:	a0 0d       	add	r26, r0
    29b6:	61 1d       	adc	r22, r1
    29b8:	23 1f       	adc	r18, r19
    29ba:	84 9f       	mul	r24, r20
    29bc:	60 0d       	add	r22, r0
    29be:	21 1d       	adc	r18, r1
    29c0:	82 2f       	mov	r24, r18
    29c2:	76 2f       	mov	r23, r22
    29c4:	6a 2f       	mov	r22, r26
    29c6:	11 24       	eor	r1, r1
    29c8:	9f 57       	subi	r25, 0x7F	; 127
    29ca:	50 40       	sbci	r21, 0x00	; 0
    29cc:	9a f0       	brmi	.+38     	; 0x29f4 <__mulsf3_pse+0x88>
    29ce:	f1 f0       	breq	.+60     	; 0x2a0c <__mulsf3_pse+0xa0>
    29d0:	88 23       	and	r24, r24
    29d2:	4a f0       	brmi	.+18     	; 0x29e6 <__mulsf3_pse+0x7a>
    29d4:	ee 0f       	add	r30, r30
    29d6:	ff 1f       	adc	r31, r31
    29d8:	bb 1f       	adc	r27, r27
    29da:	66 1f       	adc	r22, r22
    29dc:	77 1f       	adc	r23, r23
    29de:	88 1f       	adc	r24, r24
    29e0:	91 50       	subi	r25, 0x01	; 1
    29e2:	50 40       	sbci	r21, 0x00	; 0
    29e4:	a9 f7       	brne	.-22     	; 0x29d0 <__mulsf3_pse+0x64>
    29e6:	9e 3f       	cpi	r25, 0xFE	; 254
    29e8:	51 05       	cpc	r21, r1
    29ea:	80 f0       	brcs	.+32     	; 0x2a0c <__mulsf3_pse+0xa0>
    29ec:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__fp_inf>
    29f0:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_szero>
    29f4:	5f 3f       	cpi	r21, 0xFF	; 255
    29f6:	e4 f3       	brlt	.-8      	; 0x29f0 <__mulsf3_pse+0x84>
    29f8:	98 3e       	cpi	r25, 0xE8	; 232
    29fa:	d4 f3       	brlt	.-12     	; 0x29f0 <__mulsf3_pse+0x84>
    29fc:	86 95       	lsr	r24
    29fe:	77 95       	ror	r23
    2a00:	67 95       	ror	r22
    2a02:	b7 95       	ror	r27
    2a04:	f7 95       	ror	r31
    2a06:	e7 95       	ror	r30
    2a08:	9f 5f       	subi	r25, 0xFF	; 255
    2a0a:	c1 f7       	brne	.-16     	; 0x29fc <__mulsf3_pse+0x90>
    2a0c:	fe 2b       	or	r31, r30
    2a0e:	88 0f       	add	r24, r24
    2a10:	91 1d       	adc	r25, r1
    2a12:	96 95       	lsr	r25
    2a14:	87 95       	ror	r24
    2a16:	97 f9       	bld	r25, 7
    2a18:	08 95       	ret

00002a1a <malloc>:
    2a1a:	cf 93       	push	r28
    2a1c:	df 93       	push	r29
    2a1e:	82 30       	cpi	r24, 0x02	; 2
    2a20:	91 05       	cpc	r25, r1
    2a22:	10 f4       	brcc	.+4      	; 0x2a28 <malloc+0xe>
    2a24:	82 e0       	ldi	r24, 0x02	; 2
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	e0 91 28 02 	lds	r30, 0x0228
    2a2c:	f0 91 29 02 	lds	r31, 0x0229
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	c0 e0       	ldi	r28, 0x00	; 0
    2a36:	d0 e0       	ldi	r29, 0x00	; 0
    2a38:	30 97       	sbiw	r30, 0x00	; 0
    2a3a:	11 f1       	breq	.+68     	; 0x2a80 <malloc+0x66>
    2a3c:	40 81       	ld	r20, Z
    2a3e:	51 81       	ldd	r21, Z+1	; 0x01
    2a40:	48 17       	cp	r20, r24
    2a42:	59 07       	cpc	r21, r25
    2a44:	c0 f0       	brcs	.+48     	; 0x2a76 <malloc+0x5c>
    2a46:	48 17       	cp	r20, r24
    2a48:	59 07       	cpc	r21, r25
    2a4a:	61 f4       	brne	.+24     	; 0x2a64 <malloc+0x4a>
    2a4c:	82 81       	ldd	r24, Z+2	; 0x02
    2a4e:	93 81       	ldd	r25, Z+3	; 0x03
    2a50:	20 97       	sbiw	r28, 0x00	; 0
    2a52:	19 f0       	breq	.+6      	; 0x2a5a <malloc+0x40>
    2a54:	9b 83       	std	Y+3, r25	; 0x03
    2a56:	8a 83       	std	Y+2, r24	; 0x02
    2a58:	2b c0       	rjmp	.+86     	; 0x2ab0 <malloc+0x96>
    2a5a:	90 93 29 02 	sts	0x0229, r25
    2a5e:	80 93 28 02 	sts	0x0228, r24
    2a62:	26 c0       	rjmp	.+76     	; 0x2ab0 <malloc+0x96>
    2a64:	21 15       	cp	r18, r1
    2a66:	31 05       	cpc	r19, r1
    2a68:	19 f0       	breq	.+6      	; 0x2a70 <malloc+0x56>
    2a6a:	42 17       	cp	r20, r18
    2a6c:	53 07       	cpc	r21, r19
    2a6e:	18 f4       	brcc	.+6      	; 0x2a76 <malloc+0x5c>
    2a70:	9a 01       	movw	r18, r20
    2a72:	be 01       	movw	r22, r28
    2a74:	df 01       	movw	r26, r30
    2a76:	ef 01       	movw	r28, r30
    2a78:	02 80       	ldd	r0, Z+2	; 0x02
    2a7a:	f3 81       	ldd	r31, Z+3	; 0x03
    2a7c:	e0 2d       	mov	r30, r0
    2a7e:	dc cf       	rjmp	.-72     	; 0x2a38 <malloc+0x1e>
    2a80:	21 15       	cp	r18, r1
    2a82:	31 05       	cpc	r19, r1
    2a84:	09 f1       	breq	.+66     	; 0x2ac8 <malloc+0xae>
    2a86:	28 1b       	sub	r18, r24
    2a88:	39 0b       	sbc	r19, r25
    2a8a:	24 30       	cpi	r18, 0x04	; 4
    2a8c:	31 05       	cpc	r19, r1
    2a8e:	90 f4       	brcc	.+36     	; 0x2ab4 <malloc+0x9a>
    2a90:	12 96       	adiw	r26, 0x02	; 2
    2a92:	8d 91       	ld	r24, X+
    2a94:	9c 91       	ld	r25, X
    2a96:	13 97       	sbiw	r26, 0x03	; 3
    2a98:	61 15       	cp	r22, r1
    2a9a:	71 05       	cpc	r23, r1
    2a9c:	21 f0       	breq	.+8      	; 0x2aa6 <malloc+0x8c>
    2a9e:	fb 01       	movw	r30, r22
    2aa0:	93 83       	std	Z+3, r25	; 0x03
    2aa2:	82 83       	std	Z+2, r24	; 0x02
    2aa4:	04 c0       	rjmp	.+8      	; 0x2aae <malloc+0x94>
    2aa6:	90 93 29 02 	sts	0x0229, r25
    2aaa:	80 93 28 02 	sts	0x0228, r24
    2aae:	fd 01       	movw	r30, r26
    2ab0:	32 96       	adiw	r30, 0x02	; 2
    2ab2:	44 c0       	rjmp	.+136    	; 0x2b3c <malloc+0x122>
    2ab4:	fd 01       	movw	r30, r26
    2ab6:	e2 0f       	add	r30, r18
    2ab8:	f3 1f       	adc	r31, r19
    2aba:	81 93       	st	Z+, r24
    2abc:	91 93       	st	Z+, r25
    2abe:	22 50       	subi	r18, 0x02	; 2
    2ac0:	31 09       	sbc	r19, r1
    2ac2:	2d 93       	st	X+, r18
    2ac4:	3c 93       	st	X, r19
    2ac6:	3a c0       	rjmp	.+116    	; 0x2b3c <malloc+0x122>
    2ac8:	20 91 26 02 	lds	r18, 0x0226
    2acc:	30 91 27 02 	lds	r19, 0x0227
    2ad0:	23 2b       	or	r18, r19
    2ad2:	41 f4       	brne	.+16     	; 0x2ae4 <malloc+0xca>
    2ad4:	20 91 02 01 	lds	r18, 0x0102
    2ad8:	30 91 03 01 	lds	r19, 0x0103
    2adc:	30 93 27 02 	sts	0x0227, r19
    2ae0:	20 93 26 02 	sts	0x0226, r18
    2ae4:	20 91 00 01 	lds	r18, 0x0100
    2ae8:	30 91 01 01 	lds	r19, 0x0101
    2aec:	21 15       	cp	r18, r1
    2aee:	31 05       	cpc	r19, r1
    2af0:	41 f4       	brne	.+16     	; 0x2b02 <malloc+0xe8>
    2af2:	2d b7       	in	r18, 0x3d	; 61
    2af4:	3e b7       	in	r19, 0x3e	; 62
    2af6:	40 91 04 01 	lds	r20, 0x0104
    2afa:	50 91 05 01 	lds	r21, 0x0105
    2afe:	24 1b       	sub	r18, r20
    2b00:	35 0b       	sbc	r19, r21
    2b02:	e0 91 26 02 	lds	r30, 0x0226
    2b06:	f0 91 27 02 	lds	r31, 0x0227
    2b0a:	e2 17       	cp	r30, r18
    2b0c:	f3 07       	cpc	r31, r19
    2b0e:	a0 f4       	brcc	.+40     	; 0x2b38 <malloc+0x11e>
    2b10:	2e 1b       	sub	r18, r30
    2b12:	3f 0b       	sbc	r19, r31
    2b14:	28 17       	cp	r18, r24
    2b16:	39 07       	cpc	r19, r25
    2b18:	78 f0       	brcs	.+30     	; 0x2b38 <malloc+0x11e>
    2b1a:	ac 01       	movw	r20, r24
    2b1c:	4e 5f       	subi	r20, 0xFE	; 254
    2b1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b20:	24 17       	cp	r18, r20
    2b22:	35 07       	cpc	r19, r21
    2b24:	48 f0       	brcs	.+18     	; 0x2b38 <malloc+0x11e>
    2b26:	4e 0f       	add	r20, r30
    2b28:	5f 1f       	adc	r21, r31
    2b2a:	50 93 27 02 	sts	0x0227, r21
    2b2e:	40 93 26 02 	sts	0x0226, r20
    2b32:	81 93       	st	Z+, r24
    2b34:	91 93       	st	Z+, r25
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <malloc+0x122>
    2b38:	e0 e0       	ldi	r30, 0x00	; 0
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	cf 01       	movw	r24, r30
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	08 95       	ret

00002b44 <free>:
    2b44:	0f 93       	push	r16
    2b46:	1f 93       	push	r17
    2b48:	cf 93       	push	r28
    2b4a:	df 93       	push	r29
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	09 f4       	brne	.+2      	; 0x2b52 <free+0xe>
    2b50:	8c c0       	rjmp	.+280    	; 0x2c6a <free+0x126>
    2b52:	fc 01       	movw	r30, r24
    2b54:	32 97       	sbiw	r30, 0x02	; 2
    2b56:	13 82       	std	Z+3, r1	; 0x03
    2b58:	12 82       	std	Z+2, r1	; 0x02
    2b5a:	00 91 28 02 	lds	r16, 0x0228
    2b5e:	10 91 29 02 	lds	r17, 0x0229
    2b62:	01 15       	cp	r16, r1
    2b64:	11 05       	cpc	r17, r1
    2b66:	81 f4       	brne	.+32     	; 0x2b88 <free+0x44>
    2b68:	20 81       	ld	r18, Z
    2b6a:	31 81       	ldd	r19, Z+1	; 0x01
    2b6c:	82 0f       	add	r24, r18
    2b6e:	93 1f       	adc	r25, r19
    2b70:	20 91 26 02 	lds	r18, 0x0226
    2b74:	30 91 27 02 	lds	r19, 0x0227
    2b78:	28 17       	cp	r18, r24
    2b7a:	39 07       	cpc	r19, r25
    2b7c:	79 f5       	brne	.+94     	; 0x2bdc <free+0x98>
    2b7e:	f0 93 27 02 	sts	0x0227, r31
    2b82:	e0 93 26 02 	sts	0x0226, r30
    2b86:	71 c0       	rjmp	.+226    	; 0x2c6a <free+0x126>
    2b88:	d8 01       	movw	r26, r16
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	50 e0       	ldi	r21, 0x00	; 0
    2b8e:	ae 17       	cp	r26, r30
    2b90:	bf 07       	cpc	r27, r31
    2b92:	50 f4       	brcc	.+20     	; 0x2ba8 <free+0x64>
    2b94:	12 96       	adiw	r26, 0x02	; 2
    2b96:	2d 91       	ld	r18, X+
    2b98:	3c 91       	ld	r19, X
    2b9a:	13 97       	sbiw	r26, 0x03	; 3
    2b9c:	ad 01       	movw	r20, r26
    2b9e:	21 15       	cp	r18, r1
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	09 f1       	breq	.+66     	; 0x2be6 <free+0xa2>
    2ba4:	d9 01       	movw	r26, r18
    2ba6:	f3 cf       	rjmp	.-26     	; 0x2b8e <free+0x4a>
    2ba8:	9d 01       	movw	r18, r26
    2baa:	da 01       	movw	r26, r20
    2bac:	33 83       	std	Z+3, r19	; 0x03
    2bae:	22 83       	std	Z+2, r18	; 0x02
    2bb0:	60 81       	ld	r22, Z
    2bb2:	71 81       	ldd	r23, Z+1	; 0x01
    2bb4:	86 0f       	add	r24, r22
    2bb6:	97 1f       	adc	r25, r23
    2bb8:	82 17       	cp	r24, r18
    2bba:	93 07       	cpc	r25, r19
    2bbc:	69 f4       	brne	.+26     	; 0x2bd8 <free+0x94>
    2bbe:	ec 01       	movw	r28, r24
    2bc0:	28 81       	ld	r18, Y
    2bc2:	39 81       	ldd	r19, Y+1	; 0x01
    2bc4:	26 0f       	add	r18, r22
    2bc6:	37 1f       	adc	r19, r23
    2bc8:	2e 5f       	subi	r18, 0xFE	; 254
    2bca:	3f 4f       	sbci	r19, 0xFF	; 255
    2bcc:	31 83       	std	Z+1, r19	; 0x01
    2bce:	20 83       	st	Z, r18
    2bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd4:	93 83       	std	Z+3, r25	; 0x03
    2bd6:	82 83       	std	Z+2, r24	; 0x02
    2bd8:	45 2b       	or	r20, r21
    2bda:	29 f4       	brne	.+10     	; 0x2be6 <free+0xa2>
    2bdc:	f0 93 29 02 	sts	0x0229, r31
    2be0:	e0 93 28 02 	sts	0x0228, r30
    2be4:	42 c0       	rjmp	.+132    	; 0x2c6a <free+0x126>
    2be6:	13 96       	adiw	r26, 0x03	; 3
    2be8:	fc 93       	st	X, r31
    2bea:	ee 93       	st	-X, r30
    2bec:	12 97       	sbiw	r26, 0x02	; 2
    2bee:	ed 01       	movw	r28, r26
    2bf0:	49 91       	ld	r20, Y+
    2bf2:	59 91       	ld	r21, Y+
    2bf4:	9e 01       	movw	r18, r28
    2bf6:	24 0f       	add	r18, r20
    2bf8:	35 1f       	adc	r19, r21
    2bfa:	e2 17       	cp	r30, r18
    2bfc:	f3 07       	cpc	r31, r19
    2bfe:	71 f4       	brne	.+28     	; 0x2c1c <free+0xd8>
    2c00:	80 81       	ld	r24, Z
    2c02:	91 81       	ldd	r25, Z+1	; 0x01
    2c04:	84 0f       	add	r24, r20
    2c06:	95 1f       	adc	r25, r21
    2c08:	02 96       	adiw	r24, 0x02	; 2
    2c0a:	11 96       	adiw	r26, 0x01	; 1
    2c0c:	9c 93       	st	X, r25
    2c0e:	8e 93       	st	-X, r24
    2c10:	82 81       	ldd	r24, Z+2	; 0x02
    2c12:	93 81       	ldd	r25, Z+3	; 0x03
    2c14:	13 96       	adiw	r26, 0x03	; 3
    2c16:	9c 93       	st	X, r25
    2c18:	8e 93       	st	-X, r24
    2c1a:	12 97       	sbiw	r26, 0x02	; 2
    2c1c:	e0 e0       	ldi	r30, 0x00	; 0
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	d8 01       	movw	r26, r16
    2c22:	12 96       	adiw	r26, 0x02	; 2
    2c24:	8d 91       	ld	r24, X+
    2c26:	9c 91       	ld	r25, X
    2c28:	13 97       	sbiw	r26, 0x03	; 3
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	19 f0       	breq	.+6      	; 0x2c34 <free+0xf0>
    2c2e:	f8 01       	movw	r30, r16
    2c30:	8c 01       	movw	r16, r24
    2c32:	f6 cf       	rjmp	.-20     	; 0x2c20 <free+0xdc>
    2c34:	8d 91       	ld	r24, X+
    2c36:	9c 91       	ld	r25, X
    2c38:	98 01       	movw	r18, r16
    2c3a:	2e 5f       	subi	r18, 0xFE	; 254
    2c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c3e:	82 0f       	add	r24, r18
    2c40:	93 1f       	adc	r25, r19
    2c42:	20 91 26 02 	lds	r18, 0x0226
    2c46:	30 91 27 02 	lds	r19, 0x0227
    2c4a:	28 17       	cp	r18, r24
    2c4c:	39 07       	cpc	r19, r25
    2c4e:	69 f4       	brne	.+26     	; 0x2c6a <free+0x126>
    2c50:	30 97       	sbiw	r30, 0x00	; 0
    2c52:	29 f4       	brne	.+10     	; 0x2c5e <free+0x11a>
    2c54:	10 92 29 02 	sts	0x0229, r1
    2c58:	10 92 28 02 	sts	0x0228, r1
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <free+0x11e>
    2c5e:	13 82       	std	Z+3, r1	; 0x03
    2c60:	12 82       	std	Z+2, r1	; 0x02
    2c62:	10 93 27 02 	sts	0x0227, r17
    2c66:	00 93 26 02 	sts	0x0226, r16
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	1f 91       	pop	r17
    2c70:	0f 91       	pop	r16
    2c72:	08 95       	ret

00002c74 <_exit>:
    2c74:	f8 94       	cli

00002c76 <__stop_program>:
    2c76:	ff cf       	rjmp	.-2      	; 0x2c76 <__stop_program>
