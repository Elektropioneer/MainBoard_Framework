
EP_Framework_Atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00004086  0000411a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004086  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000155  0080012e  0080012e  00004148  2**0
                  ALLOC
  3 .stab         00005cc4  00000000  00000000  00004148  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002085  00000000  00000000  00009e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000be91  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000bea4  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__vector_8>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__vector_23>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__vector_32>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__vector_34>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 e8       	ldi	r30, 0x86	; 134
      a8:	f0 e4       	ldi	r31, 0x40	; 64
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 32       	cpi	r26, 0x2E	; 46
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	22 e0       	ldi	r18, 0x02	; 2
      bc:	ae e2       	ldi	r26, 0x2E	; 46
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a3 38       	cpi	r26, 0x83	; 131
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 04 1c 	call	0x3808	; 0x3808 <main>
      ce:	0c 94 41 20 	jmp	0x4082	; 0x4082 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <send_arduino>:
 * 	Description: Send data to arduino. Type is what type of device, id of the device and the data
 * 	Parameters:	 unsigned char type - the type of device ('R', 'M', 'S')
 * 				 unsigned char id   - the id of the device 1-x
 * 				 unsigned char data	- data
 */
void send_arduino(unsigned char type, unsigned char id, unsigned char data) {
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	00 d0       	rcall	.+0      	; 0xdc <send_arduino+0x6>
      dc:	1f 92       	push	r1
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	89 83       	std	Y+1, r24	; 0x01
      e4:	6a 83       	std	Y+2, r22	; 0x02
      e6:	4b 83       	std	Y+3, r20	; 0x03

	UART1_Write(type);							// the type of device we want to change
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	0e 94 bf 18 	call	0x317e	; 0x317e <UART1_Write>
	UART1_Write((unsigned char)id);				// the id of the specific device
      ee:	8a 81       	ldd	r24, Y+2	; 0x02
      f0:	0e 94 bf 18 	call	0x317e	; 0x317e <UART1_Write>
	UART1_Write((unsigned char)data);			// the data
      f4:	8b 81       	ldd	r24, Y+3	; 0x03
      f6:	0e 94 bf 18 	call	0x317e	; 0x317e <UART1_Write>

	UART1_Write('X');							// end bit
      fa:	88 e5       	ldi	r24, 0x58	; 88
      fc:	0e 94 bf 18 	call	0x317e	; 0x317e <UART1_Write>
}
     100:	0f 90       	pop	r0
     102:	0f 90       	pop	r0
     104:	0f 90       	pop	r0
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <get_arduino>:
 * 	Function: 	 unsigned char get_arduino(unsigned char type, unsigned char id)
 * 	Description: Gets status of the device
 * 	Parameters:	 unsigned char type - the type of device ('R', 'M', 'S')
 * 				 unsigned char id   - the id of the device 1-x
 */
unsigned char get_arduino(unsigned char type, unsigned char id) {
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	00 d0       	rcall	.+0      	; 0x112 <get_arduino+0x6>
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	89 83       	std	Y+1, r24	; 0x01
     118:	6a 83       	std	Y+2, r22	; 0x02

	send_arduino('G',type,(unsigned char)id);	// send the "get data protocol"
     11a:	4a 81       	ldd	r20, Y+2	; 0x02
     11c:	69 81       	ldd	r22, Y+1	; 0x01
     11e:	87 e4       	ldi	r24, 0x47	; 71
     120:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_arduino>
	UART1_Read();								// read (because it is sending 2x)
     124:	0e 94 0d 19 	call	0x321a	; 0x321a <UART1_Read>

	return UART1_Read();						// return the read
     128:	0e 94 0d 19 	call	0x321a	; 0x321a <UART1_Read>

}
     12c:	0f 90       	pop	r0
     12e:	0f 90       	pop	r0
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	08 95       	ret

00000136 <servo_move>:
 * 	Function: 	 void servo_move(unsigned char id, unsigned char data);
 * 	Description: Sending the angle of the id of the servo
 * 	Parameters:  unsigned char id   - the id of the servo
 * 				 unsigned char data - the angle of the servo
 */
void servo_move(unsigned char id, unsigned char data) { send_arduino('S', id, data); }
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	00 d0       	rcall	.+0      	; 0x13c <servo_move+0x6>
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
     140:	89 83       	std	Y+1, r24	; 0x01
     142:	6a 83       	std	Y+2, r22	; 0x02
     144:	4a 81       	ldd	r20, Y+2	; 0x02
     146:	69 81       	ldd	r22, Y+1	; 0x01
     148:	83 e5       	ldi	r24, 0x53	; 83
     14a:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_arduino>
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <ping_actuator>:

/*
 * 	Function: 	 void ping_actuator()
 * 	Description: this will ping the actuator and it will run until ping is good
 */
void ping_actuator() {
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62

	do {

		UART1_Write('P');
     160:	80 e5       	ldi	r24, 0x50	; 80
     162:	0e 94 bf 18 	call	0x317e	; 0x317e <UART1_Write>
		UART1_Write(0);
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	0e 94 bf 18 	call	0x317e	; 0x317e <UART1_Write>
		UART1_Write(0);
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	0e 94 bf 18 	call	0x317e	; 0x317e <UART1_Write>
		UART1_Write('X');
     172:	88 e5       	ldi	r24, 0x58	; 88
     174:	0e 94 bf 18 	call	0x317e	; 0x317e <UART1_Write>

	} while(UART1_Read() != 1);
     178:	0e 94 0d 19 	call	0x321a	; 0x321a <UART1_Read>
     17c:	81 30       	cpi	r24, 0x01	; 1
     17e:	81 f7       	brne	.-32     	; 0x160 <ping_actuator+0x8>
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <servo_init>:
 *	Function: 		void servo_init(unsigned int f_pwm)
 *	Parameters: 	unsigned int f_pwm
 *	Description: 	servo init
 */
void servo_init(unsigned int f_pwm)
{
     186:	0f 93       	push	r16
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	00 d0       	rcall	.+0      	; 0x190 <servo_init+0xa>
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	9a 83       	std	Y+2, r25	; 0x02
     196:	89 83       	std	Y+1, r24	; 0x01
	DDRE |= ((1 << PINE3) | (1 << PINE4) | (1 << PINE5));
     198:	8d e2       	ldi	r24, 0x2D	; 45
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	2d e2       	ldi	r18, 0x2D	; 45
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	20 81       	ld	r18, Z
     1a4:	28 63       	ori	r18, 0x38	; 56
     1a6:	fc 01       	movw	r30, r24
     1a8:	20 83       	st	Z, r18
	DDRB |= (1 << PINB7);										//OCR0A 8bit
     1aa:	84 e2       	ldi	r24, 0x24	; 36
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	24 e2       	ldi	r18, 0x24	; 36
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	f9 01       	movw	r30, r18
     1b4:	20 81       	ld	r18, Z
     1b6:	20 68       	ori	r18, 0x80	; 128
     1b8:	fc 01       	movw	r30, r24
     1ba:	20 83       	st	Z, r18

	TCNT3 = 0;
     1bc:	84 e9       	ldi	r24, 0x94	; 148
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	fc 01       	movw	r30, r24
     1c2:	11 82       	std	Z+1, r1	; 0x01
     1c4:	10 82       	st	Z, r1
	TCNT0 = 0;
     1c6:	86 e4       	ldi	r24, 0x46	; 70
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	fc 01       	movw	r30, r24
     1cc:	10 82       	st	Z, r1

	OCR3A = 0;
     1ce:	88 e9       	ldi	r24, 0x98	; 152
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	fc 01       	movw	r30, r24
     1d4:	11 82       	std	Z+1, r1	; 0x01
     1d6:	10 82       	st	Z, r1
	OCR3B = 0;
     1d8:	8a e9       	ldi	r24, 0x9A	; 154
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	fc 01       	movw	r30, r24
     1de:	11 82       	std	Z+1, r1	; 0x01
     1e0:	10 82       	st	Z, r1
	OCR3C = 0;
     1e2:	8c e9       	ldi	r24, 0x9C	; 156
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	fc 01       	movw	r30, r24
     1e8:	11 82       	std	Z+1, r1	; 0x01
     1ea:	10 82       	st	Z, r1

	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3B0) | (1 << COM3C1) | (1 << COM3C0) | (1 << WGM31);
     1ec:	80 e9       	ldi	r24, 0x90	; 144
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	2e eb       	ldi	r18, 0xBE	; 190
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33) ; 		// PRESKALER = 8
     1f6:	81 e9       	ldi	r24, 0x91	; 145
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	2a e1       	ldi	r18, 0x1A	; 26
     1fc:	fc 01       	movw	r30, r24
     1fe:	20 83       	st	Z, r18

	//8bit timer
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << CS01) | (1 << CS00);
     200:	84 e4       	ldi	r24, 0x44	; 68
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	2b e6       	ldi	r18, 0x6B	; 107
     206:	fc 01       	movw	r30, r24
     208:	20 83       	st	Z, r18

	ICR3   = ((double)F_CPU) / (8.0 * f_pwm) + 0.5;
     20a:	06 e9       	ldi	r16, 0x96	; 150
     20c:	10 e0       	ldi	r17, 0x00	; 0
     20e:	89 81       	ldd	r24, Y+1	; 0x01
     210:	9a 81       	ldd	r25, Y+2	; 0x02
     212:	cc 01       	movw	r24, r24
     214:	a0 e0       	ldi	r26, 0x00	; 0
     216:	b0 e0       	ldi	r27, 0x00	; 0
     218:	bc 01       	movw	r22, r24
     21a:	cd 01       	movw	r24, r26
     21c:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__floatunsisf>
     220:	dc 01       	movw	r26, r24
     222:	cb 01       	movw	r24, r22
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	51 e4       	ldi	r21, 0x41	; 65
     22c:	bc 01       	movw	r22, r24
     22e:	cd 01       	movw	r24, r26
     230:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
     234:	dc 01       	movw	r26, r24
     236:	cb 01       	movw	r24, r22
     238:	9c 01       	movw	r18, r24
     23a:	ad 01       	movw	r20, r26
     23c:	60 e8       	ldi	r22, 0x80	; 128
     23e:	76 e9       	ldi	r23, 0x96	; 150
     240:	88 e1       	ldi	r24, 0x18	; 24
     242:	9b e4       	ldi	r25, 0x4B	; 75
     244:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <__divsf3>
     248:	dc 01       	movw	r26, r24
     24a:	cb 01       	movw	r24, r22
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	5f e3       	ldi	r21, 0x3F	; 63
     254:	bc 01       	movw	r22, r24
     256:	cd 01       	movw	r24, r26
     258:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__addsf3>
     25c:	dc 01       	movw	r26, r24
     25e:	cb 01       	movw	r24, r22
     260:	bc 01       	movw	r22, r24
     262:	cd 01       	movw	r24, r26
     264:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
     268:	dc 01       	movw	r26, r24
     26a:	cb 01       	movw	r24, r22
     26c:	f8 01       	movw	r30, r16
     26e:	91 83       	std	Z+1, r25	; 0x01
     270:	80 83       	st	Z, r24
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	08 95       	ret

00000280 <servo_set_duty_cycle_one>:
 *	Parameters: 	int16_t value - the pwm value
 *	Description: 	duty cycle for servos
 *	Pin:			PE3, PE4, PE5
 */
static void servo_set_duty_cycle_one(int16_t value)
{
     280:	cf 92       	push	r12
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	00 d0       	rcall	.+0      	; 0x28e <servo_set_duty_cycle_one+0xe>
     28e:	00 d0       	rcall	.+0      	; 0x290 <servo_set_duty_cycle_one+0x10>
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
     294:	9c 83       	std	Y+4, r25	; 0x04
     296:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     298:	86 e9       	ldi	r24, 0x96	; 150
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	fc 01       	movw	r30, r24
     29e:	80 81       	ld	r24, Z
     2a0:	91 81       	ldd	r25, Z+1	; 0x01
     2a2:	cc 01       	movw	r24, r24
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	bc 01       	movw	r22, r24
     2aa:	cd 01       	movw	r24, r26
     2ac:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__floatunsisf>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	4f e7       	ldi	r20, 0x7F	; 127
     2ba:	53 e4       	ldi	r21, 0x43	; 67
     2bc:	bc 01       	movw	r22, r24
     2be:	cd 01       	movw	r24, r26
     2c0:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <__divsf3>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	6c 01       	movw	r12, r24
     2ca:	7d 01       	movw	r14, r26
     2cc:	8b 81       	ldd	r24, Y+3	; 0x03
     2ce:	9c 81       	ldd	r25, Y+4	; 0x04
     2d0:	09 2e       	mov	r0, r25
     2d2:	00 0c       	add	r0, r0
     2d4:	aa 0b       	sbc	r26, r26
     2d6:	bb 0b       	sbc	r27, r27
     2d8:	bc 01       	movw	r22, r24
     2da:	cd 01       	movw	r24, r26
     2dc:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__floatsisf>
     2e0:	dc 01       	movw	r26, r24
     2e2:	cb 01       	movw	r24, r22
     2e4:	9c 01       	movw	r18, r24
     2e6:	ad 01       	movw	r20, r26
     2e8:	c7 01       	movw	r24, r14
     2ea:	b6 01       	movw	r22, r12
     2ec:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
     2f0:	dc 01       	movw	r26, r24
     2f2:	cb 01       	movw	r24, r22
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	5f e3       	ldi	r21, 0x3F	; 63
     2fc:	bc 01       	movw	r22, r24
     2fe:	cd 01       	movw	r24, r26
     300:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__addsf3>
     304:	dc 01       	movw	r26, r24
     306:	cb 01       	movw	r24, r22
     308:	bc 01       	movw	r22, r24
     30a:	cd 01       	movw	r24, r26
     30c:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
     310:	dc 01       	movw	r26, r24
     312:	cb 01       	movw	r24, r22
     314:	9a 83       	std	Y+2, r25	; 0x02
     316:	89 83       	std	Y+1, r24	; 0x01
	OCR3AH = temp >> 8;
     318:	89 e9       	ldi	r24, 0x99	; 153
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	29 81       	ldd	r18, Y+1	; 0x01
     31e:	3a 81       	ldd	r19, Y+2	; 0x02
     320:	23 2f       	mov	r18, r19
     322:	33 27       	eor	r19, r19
     324:	fc 01       	movw	r30, r24
     326:	20 83       	st	Z, r18
	OCR3AL = temp & 0xFF;
     328:	88 e9       	ldi	r24, 0x98	; 152
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	29 81       	ldd	r18, Y+1	; 0x01
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18
}
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	ff 90       	pop	r15
     340:	ef 90       	pop	r14
     342:	df 90       	pop	r13
     344:	cf 90       	pop	r12
     346:	08 95       	ret

00000348 <servo_set_duty_cycle_two>:
static void servo_set_duty_cycle_two(int16_t value)
{
     348:	cf 92       	push	r12
     34a:	df 92       	push	r13
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	00 d0       	rcall	.+0      	; 0x356 <servo_set_duty_cycle_two+0xe>
     356:	00 d0       	rcall	.+0      	; 0x358 <servo_set_duty_cycle_two+0x10>
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	9c 83       	std	Y+4, r25	; 0x04
     35e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     360:	86 e9       	ldi	r24, 0x96	; 150
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	fc 01       	movw	r30, r24
     366:	80 81       	ld	r24, Z
     368:	91 81       	ldd	r25, Z+1	; 0x01
     36a:	cc 01       	movw	r24, r24
     36c:	a0 e0       	ldi	r26, 0x00	; 0
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	bc 01       	movw	r22, r24
     372:	cd 01       	movw	r24, r26
     374:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__floatunsisf>
     378:	dc 01       	movw	r26, r24
     37a:	cb 01       	movw	r24, r22
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	4f e7       	ldi	r20, 0x7F	; 127
     382:	53 e4       	ldi	r21, 0x43	; 67
     384:	bc 01       	movw	r22, r24
     386:	cd 01       	movw	r24, r26
     388:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <__divsf3>
     38c:	dc 01       	movw	r26, r24
     38e:	cb 01       	movw	r24, r22
     390:	6c 01       	movw	r12, r24
     392:	7d 01       	movw	r14, r26
     394:	8b 81       	ldd	r24, Y+3	; 0x03
     396:	9c 81       	ldd	r25, Y+4	; 0x04
     398:	09 2e       	mov	r0, r25
     39a:	00 0c       	add	r0, r0
     39c:	aa 0b       	sbc	r26, r26
     39e:	bb 0b       	sbc	r27, r27
     3a0:	bc 01       	movw	r22, r24
     3a2:	cd 01       	movw	r24, r26
     3a4:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__floatsisf>
     3a8:	dc 01       	movw	r26, r24
     3aa:	cb 01       	movw	r24, r22
     3ac:	9c 01       	movw	r18, r24
     3ae:	ad 01       	movw	r20, r26
     3b0:	c7 01       	movw	r24, r14
     3b2:	b6 01       	movw	r22, r12
     3b4:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
     3b8:	dc 01       	movw	r26, r24
     3ba:	cb 01       	movw	r24, r22
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	40 e0       	ldi	r20, 0x00	; 0
     3c2:	5f e3       	ldi	r21, 0x3F	; 63
     3c4:	bc 01       	movw	r22, r24
     3c6:	cd 01       	movw	r24, r26
     3c8:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__addsf3>
     3cc:	dc 01       	movw	r26, r24
     3ce:	cb 01       	movw	r24, r22
     3d0:	bc 01       	movw	r22, r24
     3d2:	cd 01       	movw	r24, r26
     3d4:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
     3d8:	dc 01       	movw	r26, r24
     3da:	cb 01       	movw	r24, r22
     3dc:	9a 83       	std	Y+2, r25	; 0x02
     3de:	89 83       	std	Y+1, r24	; 0x01
	OCR3BH = temp >> 8;
     3e0:	8b e9       	ldi	r24, 0x9B	; 155
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	29 81       	ldd	r18, Y+1	; 0x01
     3e6:	3a 81       	ldd	r19, Y+2	; 0x02
     3e8:	23 2f       	mov	r18, r19
     3ea:	33 27       	eor	r19, r19
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
	OCR3BL = temp & 0xFF;
     3f0:	8a e9       	ldi	r24, 0x9A	; 154
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	29 81       	ldd	r18, Y+1	; 0x01
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 83       	st	Z, r18
}
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	df 90       	pop	r13
     40c:	cf 90       	pop	r12
     40e:	08 95       	ret

00000410 <servo_set_duty_cycle_three>:
static void servo_set_duty_cycle_three(int16_t value)
{
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	00 d0       	rcall	.+0      	; 0x41e <servo_set_duty_cycle_three+0xe>
     41e:	00 d0       	rcall	.+0      	; 0x420 <servo_set_duty_cycle_three+0x10>
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	9c 83       	std	Y+4, r25	; 0x04
     426:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = ((double)ICR3 / 255.0) * value + 0.5;
     428:	86 e9       	ldi	r24, 0x96	; 150
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	fc 01       	movw	r30, r24
     42e:	80 81       	ld	r24, Z
     430:	91 81       	ldd	r25, Z+1	; 0x01
     432:	cc 01       	movw	r24, r24
     434:	a0 e0       	ldi	r26, 0x00	; 0
     436:	b0 e0       	ldi	r27, 0x00	; 0
     438:	bc 01       	movw	r22, r24
     43a:	cd 01       	movw	r24, r26
     43c:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__floatunsisf>
     440:	dc 01       	movw	r26, r24
     442:	cb 01       	movw	r24, r22
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	4f e7       	ldi	r20, 0x7F	; 127
     44a:	53 e4       	ldi	r21, 0x43	; 67
     44c:	bc 01       	movw	r22, r24
     44e:	cd 01       	movw	r24, r26
     450:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <__divsf3>
     454:	dc 01       	movw	r26, r24
     456:	cb 01       	movw	r24, r22
     458:	6c 01       	movw	r12, r24
     45a:	7d 01       	movw	r14, r26
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	9c 81       	ldd	r25, Y+4	; 0x04
     460:	09 2e       	mov	r0, r25
     462:	00 0c       	add	r0, r0
     464:	aa 0b       	sbc	r26, r26
     466:	bb 0b       	sbc	r27, r27
     468:	bc 01       	movw	r22, r24
     46a:	cd 01       	movw	r24, r26
     46c:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__floatsisf>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	9c 01       	movw	r18, r24
     476:	ad 01       	movw	r20, r26
     478:	c7 01       	movw	r24, r14
     47a:	b6 01       	movw	r22, r12
     47c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	5f e3       	ldi	r21, 0x3F	; 63
     48c:	bc 01       	movw	r22, r24
     48e:	cd 01       	movw	r24, r26
     490:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__addsf3>
     494:	dc 01       	movw	r26, r24
     496:	cb 01       	movw	r24, r22
     498:	bc 01       	movw	r22, r24
     49a:	cd 01       	movw	r24, r26
     49c:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	9a 83       	std	Y+2, r25	; 0x02
     4a6:	89 83       	std	Y+1, r24	; 0x01
	OCR3CH = temp >> 8;
     4a8:	8d e9       	ldi	r24, 0x9D	; 157
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	29 81       	ldd	r18, Y+1	; 0x01
     4ae:	3a 81       	ldd	r19, Y+2	; 0x02
     4b0:	23 2f       	mov	r18, r19
     4b2:	33 27       	eor	r19, r19
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
	OCR3CL = temp & 0xFF;
     4b8:	8c e9       	ldi	r24, 0x9C	; 156
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	29 81       	ldd	r18, Y+1	; 0x01
     4be:	fc 01       	movw	r30, r24
     4c0:	20 83       	st	Z, r18
}
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	ff 90       	pop	r15
     4d0:	ef 90       	pop	r14
     4d2:	df 90       	pop	r13
     4d4:	cf 90       	pop	r12
     4d6:	08 95       	ret

000004d8 <range_conv>:

/*
 * 	Function: 	 static int16_t range_conv(float angle)
 * 	Descritpion: this function converts 0-180 to int16_t value
 */
static int16_t range_conv(float angle) {
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	00 d0       	rcall	.+0      	; 0x4de <range_conv+0x6>
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <range_conv+0x8>
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	69 83       	std	Y+1, r22	; 0x01
     4e6:	7a 83       	std	Y+2, r23	; 0x02
     4e8:	8b 83       	std	Y+3, r24	; 0x03
     4ea:	9c 83       	std	Y+4, r25	; 0x04
	return ((65535 * angle) / 180) - 32768;
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	3f ef       	ldi	r19, 0xFF	; 255
     4f0:	4f e7       	ldi	r20, 0x7F	; 127
     4f2:	57 e4       	ldi	r21, 0x47	; 71
     4f4:	69 81       	ldd	r22, Y+1	; 0x01
     4f6:	7a 81       	ldd	r23, Y+2	; 0x02
     4f8:	8b 81       	ldd	r24, Y+3	; 0x03
     4fa:	9c 81       	ldd	r25, Y+4	; 0x04
     4fc:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
     500:	dc 01       	movw	r26, r24
     502:	cb 01       	movw	r24, r22
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	44 e3       	ldi	r20, 0x34	; 52
     50a:	53 e4       	ldi	r21, 0x43	; 67
     50c:	bc 01       	movw	r22, r24
     50e:	cd 01       	movw	r24, r26
     510:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <__divsf3>
     514:	dc 01       	movw	r26, r24
     516:	cb 01       	movw	r24, r22
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	40 e0       	ldi	r20, 0x00	; 0
     51e:	57 e4       	ldi	r21, 0x47	; 71
     520:	bc 01       	movw	r22, r24
     522:	cd 01       	movw	r24, r26
     524:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__subsf3>
     528:	dc 01       	movw	r26, r24
     52a:	cb 01       	movw	r24, r22
     52c:	bc 01       	movw	r22, r24
     52e:	cd 01       	movw	r24, r26
     530:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <__fixsfsi>
     534:	dc 01       	movw	r26, r24
     536:	cb 01       	movw	r24, r22
}
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <check_servo_range>:

/*
 * 	Function: 	 static char check_servo_range(float angle)
 * 	Description: returns a 1 if the range is good and a 0 if not
 */
static char check_servo_range(float angle) {
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	00 d0       	rcall	.+0      	; 0x54c <check_servo_range+0x6>
     54c:	00 d0       	rcall	.+0      	; 0x54e <check_servo_range+0x8>
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	69 83       	std	Y+1, r22	; 0x01
     554:	7a 83       	std	Y+2, r23	; 0x02
     556:	8b 83       	std	Y+3, r24	; 0x03
     558:	9c 83       	std	Y+4, r25	; 0x04
	if(angle >= 0.0 && angle <= 180.0)
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	a9 01       	movw	r20, r18
     560:	69 81       	ldd	r22, Y+1	; 0x01
     562:	7a 81       	ldd	r23, Y+2	; 0x02
     564:	8b 81       	ldd	r24, Y+3	; 0x03
     566:	9c 81       	ldd	r25, Y+4	; 0x04
     568:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
     56c:	88 23       	and	r24, r24
     56e:	74 f0       	brlt	.+28     	; 0x58c <check_servo_range+0x46>
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	44 e3       	ldi	r20, 0x34	; 52
     576:	53 e4       	ldi	r21, 0x43	; 67
     578:	69 81       	ldd	r22, Y+1	; 0x01
     57a:	7a 81       	ldd	r23, Y+2	; 0x02
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	9c 81       	ldd	r25, Y+4	; 0x04
     580:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
     584:	18 16       	cp	r1, r24
     586:	14 f0       	brlt	.+4      	; 0x58c <check_servo_range+0x46>
		return 1;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	01 c0       	rjmp	.+2      	; 0x58e <check_servo_range+0x48>
	else
		return 0;
     58c:	80 e0       	ldi	r24, 0x00	; 0
}
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <servo_set_angle_one>:

/*
 * 	Function: 	void servo_set_angle_one-two-three(uint8_t angle)
 * 	Descrition: the angle goes from 0.0 - 180.0
 */
void servo_set_angle_one(float angle) {
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <servo_set_angle_one+0x6>
     5a2:	00 d0       	rcall	.+0      	; 0x5a4 <servo_set_angle_one+0x8>
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	69 83       	std	Y+1, r22	; 0x01
     5aa:	7a 83       	std	Y+2, r23	; 0x02
     5ac:	8b 83       	std	Y+3, r24	; 0x03
     5ae:	9c 83       	std	Y+4, r25	; 0x04
	if(check_servo_range(angle))
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	9a 81       	ldd	r25, Y+2	; 0x02
     5b4:	ab 81       	ldd	r26, Y+3	; 0x03
     5b6:	bc 81       	ldd	r27, Y+4	; 0x04
     5b8:	bc 01       	movw	r22, r24
     5ba:	cd 01       	movw	r24, r26
     5bc:	0e 94 a3 02 	call	0x546	; 0x546 <check_servo_range>
     5c0:	88 23       	and	r24, r24
     5c2:	51 f0       	breq	.+20     	; 0x5d8 <servo_set_angle_one+0x3c>
		servo_set_duty_cycle_one(range_conv(angle));
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
     5c6:	9a 81       	ldd	r25, Y+2	; 0x02
     5c8:	ab 81       	ldd	r26, Y+3	; 0x03
     5ca:	bc 81       	ldd	r27, Y+4	; 0x04
     5cc:	bc 01       	movw	r22, r24
     5ce:	cd 01       	movw	r24, r26
     5d0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <range_conv>
     5d4:	0e 94 40 01 	call	0x280	; 0x280 <servo_set_duty_cycle_one>
}
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <servo_set_angle_two>:

void servo_set_angle_two(float angle) {
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <servo_set_angle_two+0x6>
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <servo_set_angle_two+0x8>
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	69 83       	std	Y+1, r22	; 0x01
     5f4:	7a 83       	std	Y+2, r23	; 0x02
     5f6:	8b 83       	std	Y+3, r24	; 0x03
     5f8:	9c 83       	std	Y+4, r25	; 0x04
	if(check_servo_range(angle))
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	9a 81       	ldd	r25, Y+2	; 0x02
     5fe:	ab 81       	ldd	r26, Y+3	; 0x03
     600:	bc 81       	ldd	r27, Y+4	; 0x04
     602:	bc 01       	movw	r22, r24
     604:	cd 01       	movw	r24, r26
     606:	0e 94 a3 02 	call	0x546	; 0x546 <check_servo_range>
     60a:	88 23       	and	r24, r24
     60c:	51 f0       	breq	.+20     	; 0x622 <servo_set_angle_two+0x3c>
		servo_set_duty_cycle_two(range_conv(angle));
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	9a 81       	ldd	r25, Y+2	; 0x02
     612:	ab 81       	ldd	r26, Y+3	; 0x03
     614:	bc 81       	ldd	r27, Y+4	; 0x04
     616:	bc 01       	movw	r22, r24
     618:	cd 01       	movw	r24, r26
     61a:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <range_conv>
     61e:	0e 94 a4 01 	call	0x348	; 0x348 <servo_set_duty_cycle_two>
}
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <servo_set_angle_three>:

void servo_set_angle_three(float angle) {
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	00 d0       	rcall	.+0      	; 0x636 <servo_set_angle_three+0x6>
     636:	00 d0       	rcall	.+0      	; 0x638 <servo_set_angle_three+0x8>
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	69 83       	std	Y+1, r22	; 0x01
     63e:	7a 83       	std	Y+2, r23	; 0x02
     640:	8b 83       	std	Y+3, r24	; 0x03
     642:	9c 83       	std	Y+4, r25	; 0x04
	if(check_servo_range(angle))
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	ab 81       	ldd	r26, Y+3	; 0x03
     64a:	bc 81       	ldd	r27, Y+4	; 0x04
     64c:	bc 01       	movw	r22, r24
     64e:	cd 01       	movw	r24, r26
     650:	0e 94 a3 02 	call	0x546	; 0x546 <check_servo_range>
     654:	88 23       	and	r24, r24
     656:	51 f0       	breq	.+20     	; 0x66c <servo_set_angle_three+0x3c>
		servo_set_duty_cycle_three(range_conv(angle));
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	ab 81       	ldd	r26, Y+3	; 0x03
     65e:	bc 81       	ldd	r27, Y+4	; 0x04
     660:	bc 01       	movw	r22, r24
     662:	cd 01       	movw	r24, r26
     664:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <range_conv>
     668:	0e 94 08 02 	call	0x410	; 0x410 <servo_set_duty_cycle_three>
}
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <servo_set_angle_four>:

// this is a 8bit register (pwm)
void servo_set_angle_four(float angle) {
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	00 d0       	rcall	.+0      	; 0x684 <servo_set_angle_four+0xa>
     684:	00 d0       	rcall	.+0      	; 0x686 <servo_set_angle_four+0xc>
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	69 83       	std	Y+1, r22	; 0x01
     68c:	7a 83       	std	Y+2, r23	; 0x02
     68e:	8b 83       	std	Y+3, r24	; 0x03
     690:	9c 83       	std	Y+4, r25	; 0x04
	if(check_servo_range(angle))
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	ab 81       	ldd	r26, Y+3	; 0x03
     698:	bc 81       	ldd	r27, Y+4	; 0x04
     69a:	bc 01       	movw	r22, r24
     69c:	cd 01       	movw	r24, r26
     69e:	0e 94 a3 02 	call	0x546	; 0x546 <check_servo_range>
     6a2:	88 23       	and	r24, r24
     6a4:	01 f1       	breq	.+64     	; 0x6e6 <servo_set_angle_four+0x6c>
		OCR0A = (int)((255 * angle) / 180);
     6a6:	07 e4       	ldi	r16, 0x47	; 71
     6a8:	10 e0       	ldi	r17, 0x00	; 0
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	4f e7       	ldi	r20, 0x7F	; 127
     6b0:	53 e4       	ldi	r21, 0x43	; 67
     6b2:	69 81       	ldd	r22, Y+1	; 0x01
     6b4:	7a 81       	ldd	r23, Y+2	; 0x02
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ba:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	44 e3       	ldi	r20, 0x34	; 52
     6c8:	53 e4       	ldi	r21, 0x43	; 67
     6ca:	bc 01       	movw	r22, r24
     6cc:	cd 01       	movw	r24, r26
     6ce:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <__divsf3>
     6d2:	dc 01       	movw	r26, r24
     6d4:	cb 01       	movw	r24, r22
     6d6:	bc 01       	movw	r22, r24
     6d8:	cd 01       	movw	r24, r26
     6da:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <__fixsfsi>
     6de:	dc 01       	movw	r26, r24
     6e0:	cb 01       	movw	r24, r22
     6e2:	f8 01       	movw	r30, r16
     6e4:	80 83       	st	Z, r24
}
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	08 95       	ret

000006f8 <__vector_18>:
static volatile unsigned char rxCounter[10];
//volatile static long canTime;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     6f8:	1f 92       	push	r1
     6fa:	0f 92       	push	r0
     6fc:	00 90 5f 00 	lds	r0, 0x005F
     700:	0f 92       	push	r0
     702:	11 24       	eor	r1, r1
     704:	00 90 5b 00 	lds	r0, 0x005B
     708:	0f 92       	push	r0
     70a:	2f 93       	push	r18
     70c:	3f 93       	push	r19
     70e:	4f 93       	push	r20
     710:	5f 93       	push	r21
     712:	8f 93       	push	r24
     714:	9f 93       	push	r25
     716:	ef 93       	push	r30
     718:	ff 93       	push	r31
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	00 d0       	rcall	.+0      	; 0x720 <__vector_18+0x28>
     720:	00 d0       	rcall	.+0      	; 0x722 <__vector_18+0x2a>
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
	unsigned char tempPage = CANPAGE;
     726:	8d ee       	ldi	r24, 0xED	; 237
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	fc 01       	movw	r30, r24
     72c:	80 81       	ld	r24, Z
     72e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     730:	19 82       	std	Y+1, r1	; 0x01
     732:	a4 c0       	rjmp	.+328    	; 0x87c <__vector_18+0x184>
	{
		CANPAGE = ch << 4;
     734:	8d ee       	ldi	r24, 0xED	; 237
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	29 81       	ldd	r18, Y+1	; 0x01
     73a:	22 95       	swap	r18
     73c:	20 7f       	andi	r18, 0xF0	; 240
     73e:	fc 01       	movw	r30, r24
     740:	20 83       	st	Z, r18

		// receive interrupt
		if( (CANSTMOB >> RXOK) & 0x01)
     742:	8e ee       	ldi	r24, 0xEE	; 238
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	fc 01       	movw	r30, r24
     748:	80 81       	ld	r24, Z
     74a:	82 95       	swap	r24
     74c:	86 95       	lsr	r24
     74e:	87 70       	andi	r24, 0x07	; 7
     750:	88 2f       	mov	r24, r24
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	81 70       	andi	r24, 0x01	; 1
     756:	99 27       	eor	r25, r25
     758:	89 2b       	or	r24, r25
     75a:	09 f4       	brne	.+2      	; 0x75e <__vector_18+0x66>
     75c:	70 c0       	rjmp	.+224    	; 0x83e <__vector_18+0x146>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     75e:	8f ee       	ldi	r24, 0xEF	; 239
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	20 e8       	ldi	r18, 0x80	; 128
     764:	fc 01       	movw	r30, r24
     766:	20 83       	st	Z, r18
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     768:	8e ee       	ldi	r24, 0xEE	; 238
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	2e ee       	ldi	r18, 0xEE	; 238
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	f9 01       	movw	r30, r18
     772:	20 81       	ld	r18, Z
     774:	2f 7d       	andi	r18, 0xDF	; 223
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);
     77a:	82 ef       	ldi	r24, 0xF2	; 242
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	fc 01       	movw	r30, r24
     780:	80 81       	ld	r24, Z
     782:	82 95       	swap	r24
     784:	86 95       	lsr	r24
     786:	87 70       	andi	r24, 0x07	; 7
     788:	28 2f       	mov	r18, r24
     78a:	83 ef       	ldi	r24, 0xF3	; 243
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	fc 01       	movw	r30, r24
     790:	80 81       	ld	r24, Z
     792:	88 2f       	mov	r24, r24
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	82 2b       	or	r24, r18
     7a4:	8c 83       	std	Y+4, r24	; 0x04

			for(i = 0; i < 8; ++i)
     7a6:	1a 82       	std	Y+2, r1	; 0x02
     7a8:	26 c0       	rjmp	.+76     	; 0x7f6 <__vector_18+0xfe>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;
     7aa:	8c 81       	ldd	r24, Y+4	; 0x04
     7ac:	88 2f       	mov	r24, r24
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	81 50       	subi	r24, 0x01	; 1
     7b2:	90 48       	sbci	r25, 0x80	; 128
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	82 5d       	subi	r24, 0xD2	; 210
     7ba:	9e 4f       	sbci	r25, 0xFE	; 254
     7bc:	fc 01       	movw	r30, r24
     7be:	20 81       	ld	r18, Z
     7c0:	31 81       	ldd	r19, Z+1	; 0x01
     7c2:	8c 81       	ldd	r24, Y+4	; 0x04
     7c4:	88 2f       	mov	r24, r24
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	8e 5b       	subi	r24, 0xBE	; 190
     7cc:	9e 4f       	sbci	r25, 0xFE	; 254
     7ce:	fc 01       	movw	r30, r24
     7d0:	80 81       	ld	r24, Z
     7d2:	48 2f       	mov	r20, r24
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	8a 81       	ldd	r24, Y+2	; 0x02
     7d8:	88 2f       	mov	r24, r24
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	84 0f       	add	r24, r20
     7de:	95 1f       	adc	r25, r21
     7e0:	82 0f       	add	r24, r18
     7e2:	93 1f       	adc	r25, r19
     7e4:	2a ef       	ldi	r18, 0xFA	; 250
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	f9 01       	movw	r30, r18
     7ea:	20 81       	ld	r18, Z
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
			CANSTMOB &= ~(1 << RXOK); // resetujem flag

			ide = (CANIDT2 >> 5) | (CANIDT1 << 3);

			for(i = 0; i < 8; ++i)
     7f0:	8a 81       	ldd	r24, Y+2	; 0x02
     7f2:	8f 5f       	subi	r24, 0xFF	; 255
     7f4:	8a 83       	std	Y+2, r24	; 0x02
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	88 30       	cpi	r24, 0x08	; 8
     7fa:	b8 f2       	brcs	.-82     	; 0x7aa <__vector_18+0xb2>
				(*(rxBuffers + ide - 1) + sizeof(unsigned char) * (*(rxWrIndex + ide - 1)))[i] = CANMSG;

			if(++(*(rxWrIndex + ide - 1)) == RX_BUFFER_SIZE)
     7fc:	8c 81       	ldd	r24, Y+4	; 0x04
     7fe:	88 2f       	mov	r24, r24
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	01 97       	sbiw	r24, 0x01	; 1
     804:	8e 5b       	subi	r24, 0xBE	; 190
     806:	9e 4f       	sbci	r25, 0xFE	; 254
     808:	fc 01       	movw	r30, r24
     80a:	20 81       	ld	r18, Z
     80c:	2f 5f       	subi	r18, 0xFF	; 255
     80e:	fc 01       	movw	r30, r24
     810:	20 83       	st	Z, r18
     812:	25 30       	cpi	r18, 0x05	; 5
     814:	41 f4       	brne	.+16     	; 0x826 <__vector_18+0x12e>
				*(rxWrIndex + ide - 1) = 0;
     816:	8c 81       	ldd	r24, Y+4	; 0x04
     818:	88 2f       	mov	r24, r24
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	8e 5b       	subi	r24, 0xBE	; 190
     820:	9e 4f       	sbci	r25, 0xFE	; 254
     822:	fc 01       	movw	r30, r24
     824:	10 82       	st	Z, r1

			(*(rxCounter + ide - 1))++;
     826:	8c 81       	ldd	r24, Y+4	; 0x04
     828:	88 2f       	mov	r24, r24
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	8a 5a       	subi	r24, 0xAA	; 170
     830:	9e 4f       	sbci	r25, 0xFE	; 254
     832:	fc 01       	movw	r30, r24
     834:	20 81       	ld	r18, Z
     836:	2f 5f       	subi	r18, 0xFF	; 255
     838:	fc 01       	movw	r30, r24
     83a:	20 83       	st	Z, r18

			break;
     83c:	23 c0       	rjmp	.+70     	; 0x884 <__vector_18+0x18c>
		}

		//transmit interrupt
		if( (CANSTMOB >> TXOK) & 0x01)
     83e:	8e ee       	ldi	r24, 0xEE	; 238
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	fc 01       	movw	r30, r24
     844:	80 81       	ld	r24, Z
     846:	82 95       	swap	r24
     848:	86 95       	lsr	r24
     84a:	86 95       	lsr	r24
     84c:	83 70       	andi	r24, 0x03	; 3
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	81 70       	andi	r24, 0x01	; 1
     854:	99 27       	eor	r25, r25
     856:	89 2b       	or	r24, r25
     858:	71 f0       	breq	.+28     	; 0x876 <__vector_18+0x17e>
		{
			CANCDMOB = 0; // disable mob
     85a:	8f ee       	ldi	r24, 0xEF	; 239
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	fc 01       	movw	r30, r24
     860:	10 82       	st	Z, r1
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     862:	8e ee       	ldi	r24, 0xEE	; 238
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	2e ee       	ldi	r18, 0xEE	; 238
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	f9 01       	movw	r30, r18
     86c:	20 81       	ld	r18, Z
     86e:	2f 7b       	andi	r18, 0xBF	; 191
     870:	fc 01       	movw	r30, r24
     872:	20 83       	st	Z, r18

			break;
     874:	07 c0       	rjmp	.+14     	; 0x884 <__vector_18+0x18c>
	unsigned char tempPage = CANPAGE;
	unsigned char ch, ide;
	unsigned char i;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	8f 5f       	subi	r24, 0xFF	; 255
     87a:	89 83       	std	Y+1, r24	; 0x01
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	8f 30       	cpi	r24, 0x0F	; 15
     880:	08 f4       	brcc	.+2      	; 0x884 <__vector_18+0x18c>
     882:	58 cf       	rjmp	.-336    	; 0x734 <__vector_18+0x3c>

			break;
		}
	}

	CANPAGE = tempPage;
     884:	8d ee       	ldi	r24, 0xED	; 237
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	2b 81       	ldd	r18, Y+3	; 0x03
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
	//CANGIT = CANGIT; // zato sto tako treba.
}
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	ff 91       	pop	r31
     89c:	ef 91       	pop	r30
     89e:	9f 91       	pop	r25
     8a0:	8f 91       	pop	r24
     8a2:	5f 91       	pop	r21
     8a4:	4f 91       	pop	r20
     8a6:	3f 91       	pop	r19
     8a8:	2f 91       	pop	r18
     8aa:	0f 90       	pop	r0
     8ac:	00 92 5b 00 	sts	0x005B, r0
     8b0:	0f 90       	pop	r0
     8b2:	00 92 5f 00 	sts	0x005F, r0
     8b6:	0f 90       	pop	r0
     8b8:	1f 90       	pop	r1
     8ba:	18 95       	reti

000008bc <CAN_InitModule>:


static void CAN_InitModule(void)
{
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <CAN_InitModule+0x6>
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     8c6:	88 ed       	ldi	r24, 0xD8	; 216
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	21 e0       	ldi	r18, 0x01	; 1
     8cc:	fc 01       	movw	r30, r24
     8ce:	20 83       	st	Z, r18

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     8d0:	19 82       	std	Y+1, r1	; 0x01
     8d2:	3e c0       	rjmp	.+124    	; 0x950 <CAN_InitModule+0x94>
	{
		CANPAGE = ch << 4;
     8d4:	8d ee       	ldi	r24, 0xED	; 237
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	29 81       	ldd	r18, Y+1	; 0x01
     8da:	22 95       	swap	r18
     8dc:	20 7f       	andi	r18, 0xF0	; 240
     8de:	fc 01       	movw	r30, r24
     8e0:	20 83       	st	Z, r18

		CANSTMOB = 0;
     8e2:	8e ee       	ldi	r24, 0xEE	; 238
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	fc 01       	movw	r30, r24
     8e8:	10 82       	st	Z, r1
		CANCDMOB = 0;
     8ea:	8f ee       	ldi	r24, 0xEF	; 239
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	fc 01       	movw	r30, r24
     8f0:	10 82       	st	Z, r1

		CANIDT1 = 0;
     8f2:	83 ef       	ldi	r24, 0xF3	; 243
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	fc 01       	movw	r30, r24
     8f8:	10 82       	st	Z, r1
		CANIDT2 = 0;
     8fa:	82 ef       	ldi	r24, 0xF2	; 242
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	fc 01       	movw	r30, r24
     900:	10 82       	st	Z, r1
		CANIDT3 = 0;
     902:	81 ef       	ldi	r24, 0xF1	; 241
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	fc 01       	movw	r30, r24
     908:	10 82       	st	Z, r1
		CANIDT4 = 0;
     90a:	80 ef       	ldi	r24, 0xF0	; 240
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	fc 01       	movw	r30, r24
     910:	10 82       	st	Z, r1
		CANIDM1 = 0;
     912:	87 ef       	ldi	r24, 0xF7	; 247
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	fc 01       	movw	r30, r24
     918:	10 82       	st	Z, r1
		CANIDM2 = 0;
     91a:	86 ef       	ldi	r24, 0xF6	; 246
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	fc 01       	movw	r30, r24
     920:	10 82       	st	Z, r1
		CANIDM3 = 0;
     922:	85 ef       	ldi	r24, 0xF5	; 245
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	fc 01       	movw	r30, r24
     928:	10 82       	st	Z, r1
		CANIDM4 = 0;
     92a:	84 ef       	ldi	r24, 0xF4	; 244
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	fc 01       	movw	r30, r24
     930:	10 82       	st	Z, r1

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     932:	1a 82       	std	Y+2, r1	; 0x02
     934:	07 c0       	rjmp	.+14     	; 0x944 <CAN_InitModule+0x88>
			CANMSG = 0;
     936:	8a ef       	ldi	r24, 0xFA	; 250
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	fc 01       	movw	r30, r24
     93c:	10 82       	st	Z, r1
		CANIDM3 = 0;
		CANIDM4 = 0;

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for(data = 0; data < 8; data++)
     93e:	8a 81       	ldd	r24, Y+2	; 0x02
     940:	8f 5f       	subi	r24, 0xFF	; 255
     942:	8a 83       	std	Y+2, r24	; 0x02
     944:	8a 81       	ldd	r24, Y+2	; 0x02
     946:	88 30       	cpi	r24, 0x08	; 8
     948:	b0 f3       	brcs	.-20     	; 0x936 <CAN_InitModule+0x7a>

	// Reset the CAN controller
	CANGCON = 0x01;

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
     94a:	89 81       	ldd	r24, Y+1	; 0x01
     94c:	8f 5f       	subi	r24, 0xFF	; 255
     94e:	89 83       	std	Y+1, r24	; 0x01
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	8f 30       	cpi	r24, 0x0F	; 15
     954:	08 f4       	brcc	.+2      	; 0x958 <CAN_InitModule+0x9c>
     956:	be cf       	rjmp	.-132    	; 0x8d4 <CAN_InitModule+0x18>
			CANMSG = 0;
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     958:	88 ed       	ldi	r24, 0xD8	; 216
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	22 e0       	ldi	r18, 0x02	; 2
     95e:	fc 01       	movw	r30, r24
     960:	20 83       	st	Z, r18

	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	//CANBT1 = 0x08; // Fcan = 2Mhz-> Tq = 0.5us
	CANBT1 = 0x01;
     962:	82 ee       	ldi	r24, 0xE2	; 226
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	21 e0       	ldi	r18, 0x01	; 1
     968:	fc 01       	movw	r30, r24
     96a:	20 83       	st	Z, r18
	CANBT2 = (1 << PRS2); // Propagation Time Segment-> 5xTq
     96c:	83 ee       	ldi	r24, 0xE3	; 227
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	28 e0       	ldi	r18, 0x08	; 8
     972:	fc 01       	movw	r30, r24
     974:	20 83       	st	Z, r18
	CANBT3 = (1 << PHS22) | (1 << PHS20) | (1 << PHS10) | (1 << PHS11) | (1 << PHS12); // Phase Segment 2-> 6xTq, Phase Segment 1-> 8xTq
     976:	84 ee       	ldi	r24, 0xE4	; 228
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	2e e5       	ldi	r18, 0x5E	; 94
     97c:	fc 01       	movw	r30, r24
     97e:	20 83       	st	Z, r18

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 22
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 250kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     980:	85 ee       	ldi	r24, 0xE5	; 229
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	fc 01       	movw	r30, r24
     986:	10 82       	st	Z, r1

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     988:	8b ed       	ldi	r24, 0xDB	; 219
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	20 eb       	ldi	r18, 0xB0	; 176
     98e:	fc 01       	movw	r30, r24
     990:	20 83       	st	Z, r18
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     992:	8f ed       	ldi	r24, 0xDF	; 223
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	2f e7       	ldi	r18, 0x7F	; 127
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
	CANIE2 = 0xFF;
     99c:	8e ed       	ldi	r24, 0xDE	; 222
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	2f ef       	ldi	r18, 0xFF	; 255
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 83       	st	Z, r18
	sei();
     9a6:	78 94       	sei
}
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <CAN_InitRxMob>:


static char CAN_InitRxMob(unsigned int ide)
{
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	00 d0       	rcall	.+0      	; 0x9b8 <CAN_InitRxMob+0x6>
     9b8:	00 d0       	rcall	.+0      	; 0x9ba <CAN_InitRxMob+0x8>
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	9c 83       	std	Y+4, r25	; 0x04
     9c0:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     9c2:	8d ee       	ldi	r24, 0xED	; 237
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	fc 01       	movw	r30, r24
     9c8:	80 81       	ld	r24, Z
     9ca:	8a 83       	std	Y+2, r24	; 0x02

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     9cc:	00 00       	nop
     9ce:	89 ed       	ldi	r24, 0xD9	; 217
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	fc 01       	movw	r30, r24
     9d4:	80 81       	ld	r24, Z
     9d6:	82 95       	swap	r24
     9d8:	8f 70       	andi	r24, 0x0F	; 15
     9da:	88 2f       	mov	r24, r24
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	81 70       	andi	r24, 0x01	; 1
     9e0:	99 27       	eor	r25, r25
     9e2:	89 2b       	or	r24, r25
     9e4:	a1 f7       	brne	.-24     	; 0x9ce <CAN_InitRxMob+0x1c>
     9e6:	89 ed       	ldi	r24, 0xD9	; 217
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	fc 01       	movw	r30, r24
     9ec:	80 81       	ld	r24, Z
     9ee:	86 95       	lsr	r24
     9f0:	86 95       	lsr	r24
     9f2:	86 95       	lsr	r24
     9f4:	88 2f       	mov	r24, r24
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	81 70       	andi	r24, 0x01	; 1
     9fa:	99 27       	eor	r25, r25
     9fc:	89 2b       	or	r24, r25
     9fe:	39 f7       	brne	.-50     	; 0x9ce <CAN_InitRxMob+0x1c>

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     a00:	19 82       	std	Y+1, r1	; 0x01
     a02:	49 c0       	rjmp	.+146    	; 0xa96 <CAN_InitRxMob+0xe4>
	{
		CANPAGE = ch << 4;
     a04:	8d ee       	ldi	r24, 0xED	; 237
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	29 81       	ldd	r18, Y+1	; 0x01
     a0a:	22 95       	swap	r18
     a0c:	20 7f       	andi	r18, 0xF0	; 240
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     a12:	8f ee       	ldi	r24, 0xEF	; 239
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	fc 01       	movw	r30, r24
     a18:	80 81       	ld	r24, Z
     a1a:	82 95       	swap	r24
     a1c:	86 95       	lsr	r24
     a1e:	86 95       	lsr	r24
     a20:	83 70       	andi	r24, 0x03	; 3
     a22:	88 23       	and	r24, r24
     a24:	21 f0       	breq	.+8      	; 0xa2e <CAN_InitRxMob+0x7c>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	8f 5f       	subi	r24, 0xFF	; 255
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	34 c0       	rjmp	.+104    	; 0xa96 <CAN_InitRxMob+0xe4>
		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
			continue;

		//uvek primam 8 bajtova
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     a2e:	8f ee       	ldi	r24, 0xEF	; 239
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	2f e0       	ldi	r18, 0x0F	; 15
     a34:	fc 01       	movw	r30, r24
     a36:	20 83       	st	Z, r18

		// podesavam identifikator
		CANIDT1 = (0x00FF & ide) >> 3;
     a38:	83 ef       	ldi	r24, 0xF3	; 243
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	2b 81       	ldd	r18, Y+3	; 0x03
     a3e:	3c 81       	ldd	r19, Y+4	; 0x04
     a40:	33 27       	eor	r19, r19
     a42:	36 95       	lsr	r19
     a44:	27 95       	ror	r18
     a46:	36 95       	lsr	r19
     a48:	27 95       	ror	r18
     a4a:	36 95       	lsr	r19
     a4c:	27 95       	ror	r18
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
		CANIDT2 = (ide & 0x00FF) << 5;
     a52:	82 ef       	ldi	r24, 0xF2	; 242
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	2b 81       	ldd	r18, Y+3	; 0x03
     a58:	22 95       	swap	r18
     a5a:	22 0f       	add	r18, r18
     a5c:	20 7e       	andi	r18, 0xE0	; 224
     a5e:	fc 01       	movw	r30, r24
     a60:	20 83       	st	Z, r18

		// podesavam masku- gledam sve bitove
		CANIDM2 = 0x07 << 5;
     a62:	86 ef       	ldi	r24, 0xF6	; 246
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	20 ee       	ldi	r18, 0xE0	; 224
     a68:	fc 01       	movw	r30, r24
     a6a:	20 83       	st	Z, r18
		CANIDM1 = 0xFF;
     a6c:	87 ef       	ldi	r24, 0xF7	; 247
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	2f ef       	ldi	r18, 0xFF	; 255
     a72:	fc 01       	movw	r30, r24
     a74:	20 83       	st	Z, r18

		// podesavam MOb kao receiver
		CANCDMOB |= (1 << CONMOB1);
     a76:	8f ee       	ldi	r24, 0xEF	; 239
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	2f ee       	ldi	r18, 0xEF	; 239
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	f9 01       	movw	r30, r18
     a80:	20 81       	ld	r18, Z
     a82:	20 68       	ori	r18, 0x80	; 128
     a84:	fc 01       	movw	r30, r24
     a86:	20 83       	st	Z, r18

		CANPAGE = tempPage;
     a88:	8d ee       	ldi	r24, 0xED	; 237
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	2a 81       	ldd	r18, Y+2	; 0x02
     a8e:	fc 01       	movw	r30, r24
     a90:	20 83       	st	Z, r18

		return 1;
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	0a c0       	rjmp	.+20     	; 0xaaa <CAN_InitRxMob+0xf8>

	// sve dok je magistrala zauzeta
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	for(ch = 0; ch < 15; ch++)
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	8f 30       	cpi	r24, 0x0F	; 15
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <CAN_InitRxMob+0xec>
     a9c:	b3 cf       	rjmp	.-154    	; 0xa04 <CAN_InitRxMob+0x52>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     a9e:	8d ee       	ldi	r24, 0xED	; 237
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	2a 81       	ldd	r18, Y+2	; 0x02
     aa4:	fc 01       	movw	r30, r24
     aa6:	20 83       	st	Z, r18

	return 0;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
}
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <CAN_Init>:


void CAN_Init(unsigned char numOfNodes)
{
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	00 d0       	rcall	.+0      	; 0xac2 <CAN_Init+0xa>
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char i;
	CAN_InitModule();
     ac8:	0e 94 5e 04 	call	0x8bc	; 0x8bc <CAN_InitModule>

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     acc:	19 82       	std	Y+1, r1	; 0x01
     ace:	30 c0       	rjmp	.+96     	; 0xb30 <CAN_Init+0x78>
	{
		CAN_InitRxMob(i + 1);
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	88 2f       	mov	r24, r24
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <CAN_InitRxMob>
		*(rxBuffers + i) = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	88 2f       	mov	r24, r24
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	8c 01       	movw	r16, r24
     ae8:	02 5d       	subi	r16, 0xD2	; 210
     aea:	1e 4f       	sbci	r17, 0xFE	; 254
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	85 e0       	ldi	r24, 0x05	; 5
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <calloc>
     af8:	f8 01       	movw	r30, r16
     afa:	91 83       	std	Z+1, r25	; 0x01
     afc:	80 83       	st	Z, r24
		//*(rxBuffers + i) = (unsigned char *) malloc(RX_BUFFER_SIZE * sizeof(unsigned char));
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	88 2f       	mov	r24, r24
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	29 81       	ldd	r18, Y+1	; 0x01
     b06:	22 2f       	mov	r18, r18
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	49 81       	ldd	r20, Y+1	; 0x01
     b0c:	44 2f       	mov	r20, r20
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	4a 5a       	subi	r20, 0xAA	; 170
     b14:	5e 4f       	sbci	r21, 0xFE	; 254
     b16:	fa 01       	movw	r30, r20
     b18:	60 83       	st	Z, r22
     b1a:	24 5b       	subi	r18, 0xB4	; 180
     b1c:	3e 4f       	sbci	r19, 0xFE	; 254
     b1e:	f9 01       	movw	r30, r18
     b20:	60 83       	st	Z, r22
     b22:	8e 5b       	subi	r24, 0xBE	; 190
     b24:	9e 4f       	sbci	r25, 0xFE	; 254
     b26:	fc 01       	movw	r30, r24
     b28:	60 83       	st	Z, r22

	//CAN_InitRxMob(DRIVER_RX_IDENTIFICATOR);
	//CAN_InitRxMob(XBEE_RX_IDENTIFICATOR);
	//CAN_InitRxMob(KINEZ_RX_IDENTIFICATOR);

	for(i = 0; i < numOfNodes; ++i)
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	89 83       	std	Y+1, r24	; 0x01
     b30:	99 81       	ldd	r25, Y+1	; 0x01
     b32:	8a 81       	ldd	r24, Y+2	; 0x02
     b34:	98 17       	cp	r25, r24
     b36:	60 f2       	brcs	.-104    	; 0xad0 <CAN_Init+0x18>
		rxWrIndex[i] = rxRdIndex[i] = rxCounter[i] = 0;
	}

	//rxWrIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
	//rxRdIndex = (unsigned char *) calloc(RX_BUFFER_SIZE, sizeof(unsigned char));
}
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	08 95       	ret

00000b46 <CAN_CheckRX>:


unsigned char CAN_CheckRX(unsigned char nodeID)
{
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	1f 92       	push	r1
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
	return rxCounter[nodeID - 1];
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	88 2f       	mov	r24, r24
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	8a 5a       	subi	r24, 0xAA	; 170
     b5c:	9e 4f       	sbci	r25, 0xFE	; 254
     b5e:	fc 01       	movw	r30, r24
     b60:	80 81       	ld	r24, Z
}
     b62:	0f 90       	pop	r0
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <CAN_Read>:


char CAN_Read(unsigned char *buffer, unsigned char sendingNodeID)
{
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <CAN_Read+0x6>
     b70:	00 d0       	rcall	.+0      	; 0xb72 <CAN_Read+0x8>
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	9b 83       	std	Y+3, r25	; 0x03
     b78:	8a 83       	std	Y+2, r24	; 0x02
     b7a:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	PORTG = 0xff;
     b7c:	84 e3       	ldi	r24, 0x34	; 52
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	2f ef       	ldi	r18, 0xFF	; 255
     b82:	fc 01       	movw	r30, r24
     b84:	20 83       	st	Z, r18
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);
     b86:	00 00       	nop
     b88:	8c 81       	ldd	r24, Y+4	; 0x04
     b8a:	88 2f       	mov	r24, r24
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	8a 5a       	subi	r24, 0xAA	; 170
     b92:	9e 4f       	sbci	r25, 0xFE	; 254
     b94:	fc 01       	movw	r30, r24
     b96:	80 81       	ld	r24, Z
     b98:	88 23       	and	r24, r24
     b9a:	b1 f3       	breq	.-20     	; 0xb88 <CAN_Read+0x1e>

	for(i = 0; i < 8; ++i)
     b9c:	19 82       	std	Y+1, r1	; 0x01
     b9e:	2c c0       	rjmp	.+88     	; 0xbf8 <CAN_Read+0x8e>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	2a 81       	ldd	r18, Y+2	; 0x02
     ba8:	3b 81       	ldd	r19, Y+3	; 0x03
     baa:	82 0f       	add	r24, r18
     bac:	93 1f       	adc	r25, r19
     bae:	2c 81       	ldd	r18, Y+4	; 0x04
     bb0:	22 2f       	mov	r18, r18
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	21 50       	subi	r18, 0x01	; 1
     bb6:	30 48       	sbci	r19, 0x80	; 128
     bb8:	22 0f       	add	r18, r18
     bba:	33 1f       	adc	r19, r19
     bbc:	22 5d       	subi	r18, 0xD2	; 210
     bbe:	3e 4f       	sbci	r19, 0xFE	; 254
     bc0:	f9 01       	movw	r30, r18
     bc2:	40 81       	ld	r20, Z
     bc4:	51 81       	ldd	r21, Z+1	; 0x01
     bc6:	2c 81       	ldd	r18, Y+4	; 0x04
     bc8:	22 2f       	mov	r18, r18
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	21 50       	subi	r18, 0x01	; 1
     bce:	31 09       	sbc	r19, r1
     bd0:	24 5b       	subi	r18, 0xB4	; 180
     bd2:	3e 4f       	sbci	r19, 0xFE	; 254
     bd4:	f9 01       	movw	r30, r18
     bd6:	20 81       	ld	r18, Z
     bd8:	62 2f       	mov	r22, r18
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	29 81       	ldd	r18, Y+1	; 0x01
     bde:	22 2f       	mov	r18, r18
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	26 0f       	add	r18, r22
     be4:	37 1f       	adc	r19, r23
     be6:	24 0f       	add	r18, r20
     be8:	35 1f       	adc	r19, r21
     bea:	f9 01       	movw	r30, r18
     bec:	20 81       	ld	r18, Z
     bee:	fc 01       	movw	r30, r24
     bf0:	20 83       	st	Z, r18
	unsigned char i;
	PORTG = 0xff;
	// sve dok ne stigne neki podatak ostajem u funkciji
	while(!rxCounter[sendingNodeID - 1]);

	for(i = 0; i < 8; ++i)
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	8f 5f       	subi	r24, 0xFF	; 255
     bf6:	89 83       	std	Y+1, r24	; 0x01
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	88 30       	cpi	r24, 0x08	; 8
     bfc:	88 f2       	brcs	.-94     	; 0xba0 <CAN_Read+0x36>
	*(buffer + i) = (*(rxBuffers + sendingNodeID - 1) + sizeof(unsigned char) * (*(rxRdIndex + sendingNodeID - 1)))[i];

	if(++(*(rxRdIndex + sendingNodeID - 1)) == RX_BUFFER_SIZE)
     bfe:	8c 81       	ldd	r24, Y+4	; 0x04
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	84 5b       	subi	r24, 0xB4	; 180
     c08:	9e 4f       	sbci	r25, 0xFE	; 254
     c0a:	fc 01       	movw	r30, r24
     c0c:	20 81       	ld	r18, Z
     c0e:	2f 5f       	subi	r18, 0xFF	; 255
     c10:	fc 01       	movw	r30, r24
     c12:	20 83       	st	Z, r18
     c14:	25 30       	cpi	r18, 0x05	; 5
     c16:	41 f4       	brne	.+16     	; 0xc28 <CAN_Read+0xbe>
	*(rxRdIndex + sendingNodeID - 1) = 0;
     c18:	8c 81       	ldd	r24, Y+4	; 0x04
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	84 5b       	subi	r24, 0xB4	; 180
     c22:	9e 4f       	sbci	r25, 0xFE	; 254
     c24:	fc 01       	movw	r30, r24
     c26:	10 82       	st	Z, r1

	rxCounter[sendingNodeID - 1]--;
     c28:	8c 81       	ldd	r24, Y+4	; 0x04
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9c 01       	movw	r18, r24
     c32:	2a 5a       	subi	r18, 0xAA	; 170
     c34:	3e 4f       	sbci	r19, 0xFE	; 254
     c36:	f9 01       	movw	r30, r18
     c38:	20 81       	ld	r18, Z
     c3a:	21 50       	subi	r18, 0x01	; 1
     c3c:	8a 5a       	subi	r24, 0xAA	; 170
     c3e:	9e 4f       	sbci	r25, 0xFE	; 254
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18

	return 0;
     c44:	80 e0       	ldi	r24, 0x00	; 0
}
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <CAN_Write>:

char CAN_Write(unsigned char *data, unsigned char receivingNodeAddress)
{
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	00 d0       	rcall	.+0      	; 0xc5a <CAN_Write+0x6>
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <CAN_Write+0x8>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <CAN_Write+0xa>
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	9d 83       	std	Y+5, r25	; 0x05
     c64:	8c 83       	std	Y+4, r24	; 0x04
     c66:	6e 83       	std	Y+6, r22	; 0x06
    unsigned char i;
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     c68:	00 00       	nop
     c6a:	89 ed       	ldi	r24, 0xD9	; 217
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	fc 01       	movw	r30, r24
     c70:	80 81       	ld	r24, Z
     c72:	82 95       	swap	r24
     c74:	8f 70       	andi	r24, 0x0F	; 15
     c76:	88 2f       	mov	r24, r24
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	81 70       	andi	r24, 0x01	; 1
     c7c:	99 27       	eor	r25, r25
     c7e:	89 2b       	or	r24, r25
     c80:	a1 f7       	brne	.-24     	; 0xc6a <CAN_Write+0x16>
     c82:	89 ed       	ldi	r24, 0xD9	; 217
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	fc 01       	movw	r30, r24
     c88:	80 81       	ld	r24, Z
     c8a:	86 95       	lsr	r24
     c8c:	86 95       	lsr	r24
     c8e:	86 95       	lsr	r24
     c90:	88 2f       	mov	r24, r24
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	81 70       	andi	r24, 0x01	; 1
     c96:	99 27       	eor	r25, r25
     c98:	89 2b       	or	r24, r25
     c9a:	39 f7       	brne	.-50     	; 0xc6a <CAN_Write+0x16>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     c9c:	8d ee       	ldi	r24, 0xED	; 237
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	fc 01       	movw	r30, r24
     ca2:	80 81       	ld	r24, Z
     ca4:	8b 83       	std	Y+3, r24	; 0x03

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
     ca6:	1a 82       	std	Y+2, r1	; 0x02
     ca8:	15 c0       	rjmp	.+42     	; 0xcd4 <CAN_Write+0x80>
	{
		CANPAGE = ch << 4;
     caa:	8d ee       	ldi	r24, 0xED	; 237
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	2a 81       	ldd	r18, Y+2	; 0x02
     cb0:	22 95       	swap	r18
     cb2:	20 7f       	andi	r18, 0xF0	; 240
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 83       	st	Z, r18

		if(!(CANCDMOB >> 6))
     cb8:	8f ee       	ldi	r24, 0xEF	; 239
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	fc 01       	movw	r30, r24
     cbe:	80 81       	ld	r24, Z
     cc0:	82 95       	swap	r24
     cc2:	86 95       	lsr	r24
     cc4:	86 95       	lsr	r24
     cc6:	83 70       	andi	r24, 0x03	; 3
     cc8:	88 23       	and	r24, r24
     cca:	09 f4       	brne	.+2      	; 0xcce <CAN_Write+0x7a>
			break;
     ccc:	06 c0       	rjmp	.+12     	; 0xcda <CAN_Write+0x86>

	unsigned char ch;
	unsigned char tempPage = CANPAGE;

	// trazim slobodan MOb jel ovo sranje mene zajebava ili? sta ti treba? find all
	for(ch = 0; ch < 15; ch++)
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	8f 5f       	subi	r24, 0xFF	; 255
     cd2:	8a 83       	std	Y+2, r24	; 0x02
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	8f 30       	cpi	r24, 0x0F	; 15
     cd8:	40 f3       	brcs	.-48     	; 0xcaa <CAN_Write+0x56>
		if(!(CANCDMOB >> 6))
			break;
	}

	// nema slobodnih MOb- ova
	if(ch == 15)
     cda:	8a 81       	ldd	r24, Y+2	; 0x02
     cdc:	8f 30       	cpi	r24, 0x0F	; 15
     cde:	11 f4       	brne	.+4      	; 0xce4 <CAN_Write+0x90>
		return -1;
     ce0:	8f ef       	ldi	r24, 0xFF	; 255
     ce2:	39 c0       	rjmp	.+114    	; 0xd56 <CAN_Write+0x102>


	//ova dva registra sadrze identifikator poruke koja ce se slati! efektivno to je adresa cvora koji ce primiti poruku
	CANIDT2 = (receivingNodeAddress & 0x0F) << 5;
     ce4:	82 ef       	ldi	r24, 0xF2	; 242
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	2e 81       	ldd	r18, Y+6	; 0x06
     cea:	22 95       	swap	r18
     cec:	22 0f       	add	r18, r18
     cee:	20 7e       	andi	r18, 0xE0	; 224
     cf0:	fc 01       	movw	r30, r24
     cf2:	20 83       	st	Z, r18
	CANIDT1 = (receivingNodeAddress) >> 3;
     cf4:	83 ef       	ldi	r24, 0xF3	; 243
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	2e 81       	ldd	r18, Y+6	; 0x06
     cfa:	26 95       	lsr	r18
     cfc:	26 95       	lsr	r18
     cfe:	26 95       	lsr	r18
     d00:	fc 01       	movw	r30, r24
     d02:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;
     d04:	8f ee       	ldi	r24, 0xEF	; 239
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	28 e0       	ldi	r18, 0x08	; 8
     d0a:	fc 01       	movw	r30, r24
     d0c:	20 83       	st	Z, r18

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     d0e:	19 82       	std	Y+1, r1	; 0x01
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <CAN_Write+0xde>
		CANMSG = data[i];
     d12:	8a ef       	ldi	r24, 0xFA	; 250
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	29 81       	ldd	r18, Y+1	; 0x01
     d18:	22 2f       	mov	r18, r18
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	4c 81       	ldd	r20, Y+4	; 0x04
     d1e:	5d 81       	ldd	r21, Y+5	; 0x05
     d20:	24 0f       	add	r18, r20
     d22:	35 1f       	adc	r19, r21
     d24:	f9 01       	movw	r30, r18
     d26:	20 81       	ld	r18, Z
     d28:	fc 01       	movw	r30, r24
     d2a:	20 83       	st	Z, r18

	// DLC = 8
	CANCDMOB = 8;

	// upisujem 8 bajtova koje ce se slati u predajni bafer
	for(i = 0; i < 8; i++)
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	8f 5f       	subi	r24, 0xFF	; 255
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	88 30       	cpi	r24, 0x08	; 8
     d36:	68 f3       	brcs	.-38     	; 0xd12 <CAN_Write+0xbe>
		CANMSG = data[i];

	// podesavam ga kao predajnik
	CANCDMOB |= (1 << CONMOB0);
     d38:	8f ee       	ldi	r24, 0xEF	; 239
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	2f ee       	ldi	r18, 0xEF	; 239
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	f9 01       	movw	r30, r18
     d42:	20 81       	ld	r18, Z
     d44:	20 64       	ori	r18, 0x40	; 64
     d46:	fc 01       	movw	r30, r24
     d48:	20 83       	st	Z, r18

	CANPAGE = tempPage;
     d4a:	8d ee       	ldi	r24, 0xED	; 237
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	2b 81       	ldd	r18, Y+3	; 0x03
     d50:	fc 01       	movw	r30, r24
     d52:	20 83       	st	Z, r18

	return 0;
     d54:	80 e0       	ldi	r24, 0x00	; 0
}
     d56:	26 96       	adiw	r28, 0x06	; 6
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <debug_init>:
#include "debug.h"

//pin and the starting state of debug pins
uint8_t debug_pins[5] = {48,49,50,51,52};

void debug_init() {
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62


}
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <__list_add>:
        pos = list_next_entry(pos, member))

static inline void __list_add(struct list_head* new,
                              struct list_head* prev,
                              struct list_head* next)
{
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <__list_add+0x6>
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <__list_add+0x8>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <__list_add+0xa>
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	9a 83       	std	Y+2, r25	; 0x02
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	7c 83       	std	Y+4, r23	; 0x04
     d8a:	6b 83       	std	Y+3, r22	; 0x03
     d8c:	5e 83       	std	Y+6, r21	; 0x06
     d8e:	4d 83       	std	Y+5, r20	; 0x05
    next->prev = new;
     d90:	8d 81       	ldd	r24, Y+5	; 0x05
     d92:	9e 81       	ldd	r25, Y+6	; 0x06
     d94:	29 81       	ldd	r18, Y+1	; 0x01
     d96:	3a 81       	ldd	r19, Y+2	; 0x02
     d98:	fc 01       	movw	r30, r24
     d9a:	31 83       	std	Z+1, r19	; 0x01
     d9c:	20 83       	st	Z, r18
    new->next = next;
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	2d 81       	ldd	r18, Y+5	; 0x05
     da4:	3e 81       	ldd	r19, Y+6	; 0x06
     da6:	fc 01       	movw	r30, r24
     da8:	33 83       	std	Z+3, r19	; 0x03
     daa:	22 83       	std	Z+2, r18	; 0x02
    new->prev = prev;
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	9a 81       	ldd	r25, Y+2	; 0x02
     db0:	2b 81       	ldd	r18, Y+3	; 0x03
     db2:	3c 81       	ldd	r19, Y+4	; 0x04
     db4:	fc 01       	movw	r30, r24
     db6:	31 83       	std	Z+1, r19	; 0x01
     db8:	20 83       	st	Z, r18
    prev->next = new;
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	9c 81       	ldd	r25, Y+4	; 0x04
     dbe:	29 81       	ldd	r18, Y+1	; 0x01
     dc0:	3a 81       	ldd	r19, Y+2	; 0x02
     dc2:	fc 01       	movw	r30, r24
     dc4:	33 83       	std	Z+3, r19	; 0x03
     dc6:	22 83       	std	Z+2, r18	; 0x02
}
     dc8:	26 96       	adiw	r28, 0x06	; 6
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <list_add>:

static inline void list_add(struct list_head* new, struct list_head* head)
{
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	00 d0       	rcall	.+0      	; 0xde0 <list_add+0x6>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <list_add+0x8>
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	9a 83       	std	Y+2, r25	; 0x02
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	7c 83       	std	Y+4, r23	; 0x04
     dec:	6b 83       	std	Y+3, r22	; 0x03
    __list_add(new, head, head->next);
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	fc 01       	movw	r30, r24
     df4:	42 81       	ldd	r20, Z+2	; 0x02
     df6:	53 81       	ldd	r21, Z+3	; 0x03
     df8:	2b 81       	ldd	r18, Y+3	; 0x03
     dfa:	3c 81       	ldd	r19, Y+4	; 0x04
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	9a 81       	ldd	r25, Y+2	; 0x02
     e00:	b9 01       	movw	r22, r18
     e02:	0e 94 bb 06 	call	0xd76	; 0xd76 <__list_add>
}
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <gpio_register_pin>:
};

LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	2b 97       	sbiw	r28, 0x0b	; 11
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	89 87       	std	Y+9, r24	; 0x09
     e2a:	6a 87       	std	Y+10, r22	; 0x0a
     e2c:	4b 87       	std	Y+11, r20	; 0x0b
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     e2e:	80 91 0d 01 	lds	r24, 0x010D
     e32:	90 91 0e 01 	lds	r25, 0x010E
     e36:	9c 83       	std	Y+4, r25	; 0x04
     e38:	8b 83       	std	Y+3, r24	; 0x03
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	05 97       	sbiw	r24, 0x05	; 5
     e40:	9a 83       	std	Y+2, r25	; 0x02
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	15 c0       	rjmp	.+42     	; 0xe70 <gpio_register_pin+0x5c>
    {
        if(input->pin == pin)
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	9a 81       	ldd	r25, Y+2	; 0x02
     e4a:	fc 01       	movw	r30, r24
     e4c:	90 81       	ld	r25, Z
     e4e:	89 85       	ldd	r24, Y+9	; 0x09
     e50:	98 17       	cp	r25, r24
     e52:	11 f4       	brne	.+4      	; 0xe58 <gpio_register_pin+0x44>
            return 1;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	bc c0       	rjmp	.+376    	; 0xfd0 <gpio_register_pin+0x1bc>
LIST_HEAD(gpio_inputs);

uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	9a 81       	ldd	r25, Y+2	; 0x02
     e5c:	fc 01       	movw	r30, r24
     e5e:	87 81       	ldd	r24, Z+7	; 0x07
     e60:	90 85       	ldd	r25, Z+8	; 0x08
     e62:	9e 83       	std	Y+6, r25	; 0x06
     e64:	8d 83       	std	Y+5, r24	; 0x05
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	05 97       	sbiw	r24, 0x05	; 5
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	05 96       	adiw	r24, 0x05	; 5
     e76:	8b 50       	subi	r24, 0x0B	; 11
     e78:	91 40       	sbci	r25, 0x01	; 1
     e7a:	29 f7       	brne	.-54     	; 0xe46 <gpio_register_pin+0x32>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     e7c:	89 85       	ldd	r24, Y+9	; 0x09
     e7e:	86 95       	lsr	r24
     e80:	86 95       	lsr	r24
     e82:	86 95       	lsr	r24
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t pin_reg = pin % 8;
     e88:	89 85       	ldd	r24, Y+9	; 0x09
     e8a:	87 70       	andi	r24, 0x07	; 7
     e8c:	88 87       	std	Y+8, r24	; 0x08
	if(direction == GPIO_DIRECTION_OUTPUT)
     e8e:	8a 85       	ldd	r24, Y+10	; 0x0a
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	09 f0       	breq	.+2      	; 0xe96 <gpio_register_pin+0x82>
     e94:	55 c0       	rjmp	.+170    	; 0xf40 <gpio_register_pin+0x12c>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     e96:	8f 81       	ldd	r24, Y+7	; 0x07
     e98:	88 2f       	mov	r24, r24
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9c 01       	movw	r18, r24
     e9e:	21 50       	subi	r18, 0x01	; 1
     ea0:	31 09       	sbc	r19, r1
     ea2:	c9 01       	movw	r24, r18
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	82 0f       	add	r24, r18
     eaa:	93 1f       	adc	r25, r19
     eac:	81 96       	adiw	r24, 0x21	; 33
     eae:	ac 01       	movw	r20, r24
     eb0:	8f 81       	ldd	r24, Y+7	; 0x07
     eb2:	88 2f       	mov	r24, r24
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9c 01       	movw	r18, r24
     eb8:	21 50       	subi	r18, 0x01	; 1
     eba:	31 09       	sbc	r19, r1
     ebc:	c9 01       	movw	r24, r18
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	82 0f       	add	r24, r18
     ec4:	93 1f       	adc	r25, r19
     ec6:	81 96       	adiw	r24, 0x21	; 33
     ec8:	fc 01       	movw	r30, r24
     eca:	80 81       	ld	r24, Z
     ecc:	68 2f       	mov	r22, r24
     ece:	88 85       	ldd	r24, Y+8	; 0x08
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 c0       	rjmp	.+4      	; 0xede <gpio_register_pin+0xca>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	2a 95       	dec	r18
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <gpio_register_pin+0xc6>
     ee2:	86 2b       	or	r24, r22
     ee4:	fa 01       	movw	r30, r20
     ee6:	80 83       	st	Z, r24
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     ee8:	8f 81       	ldd	r24, Y+7	; 0x07
     eea:	88 2f       	mov	r24, r24
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	9c 01       	movw	r18, r24
     ef0:	21 50       	subi	r18, 0x01	; 1
     ef2:	31 09       	sbc	r19, r1
     ef4:	c9 01       	movw	r24, r18
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	82 0f       	add	r24, r18
     efc:	93 1f       	adc	r25, r19
     efe:	82 96       	adiw	r24, 0x22	; 34
     f00:	ac 01       	movw	r20, r24
     f02:	8f 81       	ldd	r24, Y+7	; 0x07
     f04:	88 2f       	mov	r24, r24
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	9c 01       	movw	r18, r24
     f0a:	21 50       	subi	r18, 0x01	; 1
     f0c:	31 09       	sbc	r19, r1
     f0e:	c9 01       	movw	r24, r18
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	82 0f       	add	r24, r18
     f16:	93 1f       	adc	r25, r19
     f18:	82 96       	adiw	r24, 0x22	; 34
     f1a:	fc 01       	movw	r30, r24
     f1c:	80 81       	ld	r24, Z
     f1e:	68 2f       	mov	r22, r24
     f20:	88 85       	ldd	r24, Y+8	; 0x08
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <gpio_register_pin+0x11c>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	2a 95       	dec	r18
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <gpio_register_pin+0x118>
     f34:	80 95       	com	r24
     f36:	86 23       	and	r24, r22
     f38:	fa 01       	movw	r30, r20
     f3a:	80 83       	st	Z, r24
        return 0;
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	48 c0       	rjmp	.+144    	; 0xfd0 <gpio_register_pin+0x1bc>
	}
	else
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     f40:	8f 81       	ldd	r24, Y+7	; 0x07
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	9c 01       	movw	r18, r24
     f48:	21 50       	subi	r18, 0x01	; 1
     f4a:	31 09       	sbc	r19, r1
     f4c:	c9 01       	movw	r24, r18
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	81 96       	adiw	r24, 0x21	; 33
     f58:	ac 01       	movw	r20, r24
     f5a:	8f 81       	ldd	r24, Y+7	; 0x07
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	9c 01       	movw	r18, r24
     f62:	21 50       	subi	r18, 0x01	; 1
     f64:	31 09       	sbc	r19, r1
     f66:	c9 01       	movw	r24, r18
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	82 0f       	add	r24, r18
     f6e:	93 1f       	adc	r25, r19
     f70:	81 96       	adiw	r24, 0x21	; 33
     f72:	fc 01       	movw	r30, r24
     f74:	80 81       	ld	r24, Z
     f76:	68 2f       	mov	r22, r24
     f78:	88 85       	ldd	r24, Y+8	; 0x08
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <gpio_register_pin+0x174>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	2a 95       	dec	r18
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <gpio_register_pin+0x170>
     f8c:	80 95       	com	r24
     f8e:	86 23       	and	r24, r22
     f90:	fa 01       	movw	r30, r20
     f92:	80 83       	st	Z, r24

    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
     f94:	89 e0       	ldi	r24, 0x09	; 9
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <malloc>
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
    if(input == NULL)
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	89 2b       	or	r24, r25
     fa6:	11 f4       	brne	.+4      	; 0xfac <gpio_register_pin+0x198>
        return 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	12 c0       	rjmp	.+36     	; 0xfd0 <gpio_register_pin+0x1bc>

    input->pin       = pin;
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	29 85       	ldd	r18, Y+9	; 0x09
     fb2:	fc 01       	movw	r30, r24
     fb4:	20 83       	st	Z, r18
    input->pulled_up = pulled_up;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	2b 85       	ldd	r18, Y+11	; 0x0b
     fbc:	fc 01       	movw	r30, r24
     fbe:	21 83       	std	Z+1, r18	; 0x01
    list_add(&input->list, &gpio_inputs);
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	05 96       	adiw	r24, 0x05	; 5
     fc6:	6b e0       	ldi	r22, 0x0B	; 11
     fc8:	71 e0       	ldi	r23, 0x01	; 1
     fca:	0e 94 ed 06 	call	0xdda	; 0xdda <list_add>

    return 0;
     fce:	80 e0       	ldi	r24, 0x00	; 0
}
     fd0:	2b 96       	adiw	r28, 0x0b	; 11
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <gpio_write_pin>:

uint8_t gpio_write_pin(uint8_t pin, bool value)
{
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <gpio_write_pin+0x6>
     fe8:	00 d0       	rcall	.+0      	; 0xfea <gpio_write_pin+0x8>
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	8b 83       	std	Y+3, r24	; 0x03
     ff0:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port = 1 + pin / 8;
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	86 95       	lsr	r24
     ff6:	86 95       	lsr	r24
     ff8:	86 95       	lsr	r24
     ffa:	8f 5f       	subi	r24, 0xFF	; 255
     ffc:	89 83       	std	Y+1, r24	; 0x01
	pin = pin % 8;
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	87 70       	andi	r24, 0x07	; 7
    1002:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	9c 01       	movw	r18, r24
    100c:	21 50       	subi	r18, 0x01	; 1
    100e:	31 09       	sbc	r19, r1
    1010:	c9 01       	movw	r24, r18
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	82 0f       	add	r24, r18
    1018:	93 1f       	adc	r25, r19
    101a:	82 96       	adiw	r24, 0x22	; 34
    101c:	fc 01       	movw	r30, r24
    101e:	80 81       	ld	r24, Z
    1020:	91 81       	ldd	r25, Z+1	; 0x01
    1022:	a2 81       	ldd	r26, Z+2	; 0x02
    1024:	b3 81       	ldd	r27, Z+3	; 0x03
    1026:	8a 83       	std	Y+2, r24	; 0x02
	if(value != 0)
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	88 23       	and	r24, r24
    102c:	31 f1       	breq	.+76     	; 0x107a <gpio_write_pin+0x98>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9c 01       	movw	r18, r24
    1036:	21 50       	subi	r18, 0x01	; 1
    1038:	31 09       	sbc	r19, r1
    103a:	c9 01       	movw	r24, r18
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	82 0f       	add	r24, r18
    1042:	93 1f       	adc	r25, r19
    1044:	82 96       	adiw	r24, 0x22	; 34
    1046:	ac 01       	movw	r20, r24
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	68 2f       	mov	r22, r24
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 c0       	rjmp	.+4      	; 0x105e <gpio_write_pin+0x7c>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	6a 95       	dec	r22
    1060:	e2 f7       	brpl	.-8      	; 0x105a <gpio_write_pin+0x78>
    1062:	82 2b       	or	r24, r18
    1064:	93 2b       	or	r25, r19
    1066:	09 2e       	mov	r0, r25
    1068:	00 0c       	add	r0, r0
    106a:	aa 0b       	sbc	r26, r26
    106c:	bb 0b       	sbc	r27, r27
    106e:	fa 01       	movw	r30, r20
    1070:	80 83       	st	Z, r24
    1072:	91 83       	std	Z+1, r25	; 0x01
    1074:	a2 83       	std	Z+2, r26	; 0x02
    1076:	b3 83       	std	Z+3, r27	; 0x03
    1078:	27 c0       	rjmp	.+78     	; 0x10c8 <gpio_write_pin+0xe6>
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	88 2f       	mov	r24, r24
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	9c 01       	movw	r18, r24
    1082:	21 50       	subi	r18, 0x01	; 1
    1084:	31 09       	sbc	r19, r1
    1086:	c9 01       	movw	r24, r18
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	82 0f       	add	r24, r18
    108e:	93 1f       	adc	r25, r19
    1090:	82 96       	adiw	r24, 0x22	; 34
    1092:	ac 01       	movw	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	68 2f       	mov	r22, r24
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <gpio_write_pin+0xc8>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	6a 95       	dec	r22
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <gpio_write_pin+0xc4>
    10ae:	80 95       	com	r24
    10b0:	90 95       	com	r25
    10b2:	82 23       	and	r24, r18
    10b4:	93 23       	and	r25, r19
    10b6:	09 2e       	mov	r0, r25
    10b8:	00 0c       	add	r0, r0
    10ba:	aa 0b       	sbc	r26, r26
    10bc:	bb 0b       	sbc	r27, r27
    10be:	fa 01       	movw	r30, r20
    10c0:	80 83       	st	Z, r24
    10c2:	91 83       	std	Z+1, r25	; 0x01
    10c4:	a2 83       	std	Z+2, r26	; 0x02
    10c6:	b3 83       	std	Z+3, r27	; 0x03
	return 0;
    10c8:	80 e0       	ldi	r24, 0x00	; 0
}
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <__gpio_read_pin>:

static uint8_t __gpio_read_pin(uint8_t pin)
{
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	00 d0       	rcall	.+0      	; 0x10de <__gpio_read_pin+0x6>
    10de:	1f 92       	push	r1
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t port = 1 + pin / 8;
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	86 95       	lsr	r24
    10ea:	86 95       	lsr	r24
    10ec:	86 95       	lsr	r24
    10ee:	8f 5f       	subi	r24, 0xFF	; 255
    10f0:	89 83       	std	Y+1, r24	; 0x01
    pin = pin % 8;
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	87 70       	andi	r24, 0x07	; 7
    10f6:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	9c 01       	movw	r18, r24
    1100:	21 50       	subi	r18, 0x01	; 1
    1102:	31 09       	sbc	r19, r1
    1104:	c9 01       	movw	r24, r18
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	82 0f       	add	r24, r18
    110c:	93 1f       	adc	r25, r19
    110e:	80 96       	adiw	r24, 0x20	; 32
    1110:	fc 01       	movw	r30, r24
    1112:	80 81       	ld	r24, Z
    1114:	8a 83       	std	Y+2, r24	; 0x02

    return ((temp >> pin) & 0x01);
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	88 2f       	mov	r24, r24
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	2b 81       	ldd	r18, Y+3	; 0x03
    111e:	22 2f       	mov	r18, r18
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <__stack+0x29>
    1124:	95 95       	asr	r25
    1126:	87 95       	ror	r24
    1128:	2a 95       	dec	r18
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <__stack+0x25>
    112c:	81 70       	andi	r24, 0x01	; 1
}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	08 95       	ret

0000113a <gpio_read_pin>:

uint8_t gpio_read_pin(uint8_t pin)
{
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	29 97       	sbiw	r28, 0x09	; 9
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	89 87       	std	Y+9, r24	; 0x09
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1150:	80 91 0d 01 	lds	r24, 0x010D
    1154:	90 91 0e 01 	lds	r25, 0x010E
    1158:	9d 83       	std	Y+5, r25	; 0x05
    115a:	8c 83       	std	Y+4, r24	; 0x04
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	05 97       	sbiw	r24, 0x05	; 5
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	55 c0       	rjmp	.+170    	; 0x1212 <gpio_read_pin+0xd8>
    {
        if(pin == input->pin)
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	fc 01       	movw	r30, r24
    116e:	90 81       	ld	r25, Z
    1170:	89 85       	ldd	r24, Y+9	; 0x09
    1172:	98 17       	cp	r25, r24
    1174:	09 f0       	breq	.+2      	; 0x1178 <gpio_read_pin+0x3e>
    1176:	41 c0       	rjmp	.+130    	; 0x11fa <gpio_read_pin+0xc0>
        {
            uint8_t i = 0;
    1178:	1b 82       	std	Y+3, r1	; 0x03
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    117a:	1f c0       	rjmp	.+62     	; 0x11ba <gpio_read_pin+0x80>
            {
                if(input->values[i] != input->values[i + 1])
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	29 81       	ldd	r18, Y+1	; 0x01
    1184:	3a 81       	ldd	r19, Y+2	; 0x02
    1186:	82 0f       	add	r24, r18
    1188:	93 1f       	adc	r25, r19
    118a:	02 96       	adiw	r24, 0x02	; 2
    118c:	fc 01       	movw	r30, r24
    118e:	40 81       	ld	r20, Z
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	88 2f       	mov	r24, r24
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	01 96       	adiw	r24, 0x01	; 1
    1198:	29 81       	ldd	r18, Y+1	; 0x01
    119a:	3a 81       	ldd	r19, Y+2	; 0x02
    119c:	82 0f       	add	r24, r18
    119e:	93 1f       	adc	r25, r19
    11a0:	02 96       	adiw	r24, 0x02	; 2
    11a2:	fc 01       	movw	r30, r24
    11a4:	80 81       	ld	r24, Z
    11a6:	48 17       	cp	r20, r24
    11a8:	29 f0       	breq	.+10     	; 0x11b4 <gpio_read_pin+0x7a>
                    return input->previous_state;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	fc 01       	movw	r30, r24
    11b0:	84 81       	ldd	r24, Z+4	; 0x04
    11b2:	37 c0       	rjmp	.+110    	; 0x1222 <gpio_read_pin+0xe8>
                i++;
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	8f 5f       	subi	r24, 0xFF	; 255
    11b8:	8b 83       	std	Y+3, r24	; 0x03
    list_for_each_entry(input, &gpio_inputs, list)
    {
        if(pin == input->pin)
        {
            uint8_t i = 0;
            while(i < GPIO_DEBOUNCE_COUNT - 1)
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	88 23       	and	r24, r24
    11be:	f1 f2       	breq	.-68     	; 0x117c <gpio_read_pin+0x42>
                if(input->values[i] != input->values[i + 1])
                    return input->previous_state;
                i++;
            }

            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	9a 81       	ldd	r25, Y+2	; 0x02
    11c4:	fc 01       	movw	r30, r24
    11c6:	91 81       	ldd	r25, Z+1	; 0x01
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	89 27       	eor	r24, r25
    11cc:	88 23       	and	r24, r24
    11ce:	29 f0       	breq	.+10     	; 0x11da <gpio_read_pin+0xa0>
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	fc 01       	movw	r30, r24
    11d6:	82 81       	ldd	r24, Z+2	; 0x02
    11d8:	08 c0       	rjmp	.+16     	; 0x11ea <gpio_read_pin+0xb0>
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	fc 01       	movw	r30, r24
    11e0:	92 81       	ldd	r25, Z+2	; 0x02
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	99 23       	and	r25, r25
    11e6:	09 f0       	breq	.+2      	; 0x11ea <gpio_read_pin+0xb0>
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	88 87       	std	Y+8, r24	; 0x08
            input->previous_state = state;
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	28 85       	ldd	r18, Y+8	; 0x08
    11f2:	fc 01       	movw	r30, r24
    11f4:	24 83       	std	Z+4, r18	; 0x04

            return state;
    11f6:	88 85       	ldd	r24, Y+8	; 0x08
    11f8:	14 c0       	rjmp	.+40     	; 0x1222 <gpio_read_pin+0xe8>
}

uint8_t gpio_read_pin(uint8_t pin)
{
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	fc 01       	movw	r30, r24
    1200:	87 81       	ldd	r24, Z+7	; 0x07
    1202:	90 85       	ldd	r25, Z+8	; 0x08
    1204:	9f 83       	std	Y+7, r25	; 0x07
    1206:	8e 83       	std	Y+6, r24	; 0x06
    1208:	8e 81       	ldd	r24, Y+6	; 0x06
    120a:	9f 81       	ldd	r25, Y+7	; 0x07
    120c:	05 97       	sbiw	r24, 0x05	; 5
    120e:	9a 83       	std	Y+2, r25	; 0x02
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
    1216:	05 96       	adiw	r24, 0x05	; 5
    1218:	8b 50       	subi	r24, 0x0B	; 11
    121a:	91 40       	sbci	r25, 0x01	; 1
    121c:	09 f0       	breq	.+2      	; 0x1220 <gpio_read_pin+0xe6>
    121e:	a4 cf       	rjmp	.-184    	; 0x1168 <gpio_read_pin+0x2e>

            return state;
        }
    }

    return 1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
}
    1222:	29 96       	adiw	r28, 0x09	; 9
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	08 95       	ret

00001234 <gpio_debouncer>:
uint16_t test = 0;
void gpio_debouncer(void)
{
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	00 d0       	rcall	.+0      	; 0x123e <gpio_debouncer+0xa>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <gpio_debouncer+0xc>
    1240:	00 d0       	rcall	.+0      	; 0x1242 <gpio_debouncer+0xe>
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1246:	80 91 0d 01 	lds	r24, 0x010D
    124a:	90 91 0e 01 	lds	r25, 0x010E
    124e:	9c 83       	std	Y+4, r25	; 0x04
    1250:	8b 83       	std	Y+3, r24	; 0x03
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	05 97       	sbiw	r24, 0x05	; 5
    1258:	9a 83       	std	Y+2, r25	; 0x02
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	1e c0       	rjmp	.+60     	; 0x129a <gpio_debouncer+0x66>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    125e:	00 91 62 01 	lds	r16, 0x0162
    1262:	10 91 63 01 	lds	r17, 0x0163
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	9a 81       	ldd	r25, Y+2	; 0x02
    126a:	fc 01       	movw	r30, r24
    126c:	80 81       	ld	r24, Z
    126e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__gpio_read_pin>
    1272:	28 2f       	mov	r18, r24
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	80 0f       	add	r24, r16
    127a:	91 1f       	adc	r25, r17
    127c:	02 96       	adiw	r24, 0x02	; 2
    127e:	fc 01       	movw	r30, r24
    1280:	20 83       	st	Z, r18
uint16_t test = 0;
void gpio_debouncer(void)
{
    static volatile count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	9a 81       	ldd	r25, Y+2	; 0x02
    1286:	fc 01       	movw	r30, r24
    1288:	87 81       	ldd	r24, Z+7	; 0x07
    128a:	90 85       	ldd	r25, Z+8	; 0x08
    128c:	9e 83       	std	Y+6, r25	; 0x06
    128e:	8d 83       	std	Y+5, r24	; 0x05
    1290:	8d 81       	ldd	r24, Y+5	; 0x05
    1292:	9e 81       	ldd	r25, Y+6	; 0x06
    1294:	05 97       	sbiw	r24, 0x05	; 5
    1296:	9a 83       	std	Y+2, r25	; 0x02
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	05 96       	adiw	r24, 0x05	; 5
    12a0:	8b 50       	subi	r24, 0x0B	; 11
    12a2:	91 40       	sbci	r25, 0x01	; 1
    12a4:	e1 f6       	brne	.-72     	; 0x125e <gpio_debouncer+0x2a>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
    12a6:	80 91 62 01 	lds	r24, 0x0162
    12aa:	90 91 63 01 	lds	r25, 0x0163
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	90 93 63 01 	sts	0x0163, r25
    12b4:	80 93 62 01 	sts	0x0162, r24
    12b8:	02 97       	sbiw	r24, 0x02	; 2
    12ba:	21 f4       	brne	.+8      	; 0x12c4 <gpio_debouncer+0x90>
        count = 0;
    12bc:	10 92 63 01 	sts	0x0163, r1
    12c0:	10 92 62 01 	sts	0x0162, r1

}
    12c4:	26 96       	adiw	r28, 0x06	; 6
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	08 95       	ret

000012da <odometry_set_speed>:
 * 	void odometry_set_speed(uint8_t speed)
 *
 * 	Send odometry board the max speed
 */
void odometry_set_speed(uint8_t speed)
{
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	67 97       	sbiw	r28, 0x17	; 23
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	8f 8b       	std	Y+23, r24	; 0x17
	if(speed == current_speed)
    12f0:	80 91 64 01 	lds	r24, 0x0164
    12f4:	9f 89       	ldd	r25, Y+23	; 0x17
    12f6:	98 17       	cp	r25, r24
    12f8:	09 f4       	brne	.+2      	; 0x12fc <odometry_set_speed+0x22>
    12fa:	82 c0       	rjmp	.+260    	; 0x1400 <odometry_set_speed+0x126>
		return;

	uint8_t buffer[8];
	buffer[0] = 'V';
    12fc:	86 e5       	ldi	r24, 0x56	; 86
    12fe:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = speed;
    1300:	8f 89       	ldd	r24, Y+23	; 0x17
    1302:	88 8b       	std	Y+16, r24	; 0x10
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1304:	72 c0       	rjmp	.+228    	; 0x13ea <odometry_set_speed+0x110>
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a8 e4       	ldi	r26, 0x48	; 72
    130c:	b2 e4       	ldi	r27, 0x42	; 66
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	9a 83       	std	Y+2, r25	; 0x02
    1312:	ab 83       	std	Y+3, r26	; 0x03
    1314:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e4       	ldi	r19, 0x40	; 64
    131a:	4c e1       	ldi	r20, 0x1C	; 28
    131c:	55 e4       	ldi	r21, 0x45	; 69
    131e:	69 81       	ldd	r22, Y+1	; 0x01
    1320:	7a 81       	ldd	r23, Y+2	; 0x02
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	8d 83       	std	Y+5, r24	; 0x05
    1330:	9e 83       	std	Y+6, r25	; 0x06
    1332:	af 83       	std	Y+7, r26	; 0x07
    1334:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e8       	ldi	r20, 0x80	; 128
    133c:	5f e3       	ldi	r21, 0x3F	; 63
    133e:	6d 81       	ldd	r22, Y+5	; 0x05
    1340:	7e 81       	ldd	r23, Y+6	; 0x06
    1342:	8f 81       	ldd	r24, Y+7	; 0x07
    1344:	98 85       	ldd	r25, Y+8	; 0x08
    1346:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    134a:	88 23       	and	r24, r24
    134c:	2c f4       	brge	.+10     	; 0x1358 <odometry_set_speed+0x7e>
		__ticks = 1;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	9a 87       	std	Y+10, r25	; 0x0a
    1354:	89 87       	std	Y+9, r24	; 0x09
    1356:	3f c0       	rjmp	.+126    	; 0x13d6 <odometry_set_speed+0xfc>
	else if (__tmp > 65535)
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	3f ef       	ldi	r19, 0xFF	; 255
    135c:	4f e7       	ldi	r20, 0x7F	; 127
    135e:	57 e4       	ldi	r21, 0x47	; 71
    1360:	6d 81       	ldd	r22, Y+5	; 0x05
    1362:	7e 81       	ldd	r23, Y+6	; 0x06
    1364:	8f 81       	ldd	r24, Y+7	; 0x07
    1366:	98 85       	ldd	r25, Y+8	; 0x08
    1368:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    136c:	18 16       	cp	r1, r24
    136e:	4c f5       	brge	.+82     	; 0x13c2 <odometry_set_speed+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e2       	ldi	r20, 0x20	; 32
    1376:	51 e4       	ldi	r21, 0x41	; 65
    1378:	69 81       	ldd	r22, Y+1	; 0x01
    137a:	7a 81       	ldd	r23, Y+2	; 0x02
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	bc 01       	movw	r22, r24
    138a:	cd 01       	movw	r24, r26
    138c:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	9a 87       	std	Y+10, r25	; 0x0a
    1396:	89 87       	std	Y+9, r24	; 0x09
    1398:	0f c0       	rjmp	.+30     	; 0x13b8 <odometry_set_speed+0xde>
    139a:	8a ef       	ldi	r24, 0xFA	; 250
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	9c 87       	std	Y+12, r25	; 0x0c
    13a0:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    13a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <odometry_set_speed+0xcc>
    13aa:	9c 87       	std	Y+12, r25	; 0x0c
    13ac:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ae:	89 85       	ldd	r24, Y+9	; 0x09
    13b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	9a 87       	std	Y+10, r25	; 0x0a
    13b6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b8:	89 85       	ldd	r24, Y+9	; 0x09
    13ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    13bc:	89 2b       	or	r24, r25
    13be:	69 f7       	brne	.-38     	; 0x139a <odometry_set_speed+0xc0>
    13c0:	14 c0       	rjmp	.+40     	; 0x13ea <odometry_set_speed+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c2:	6d 81       	ldd	r22, Y+5	; 0x05
    13c4:	7e 81       	ldd	r23, Y+6	; 0x06
    13c6:	8f 81       	ldd	r24, Y+7	; 0x07
    13c8:	98 85       	ldd	r25, Y+8	; 0x08
    13ca:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	9a 87       	std	Y+10, r25	; 0x0a
    13d4:	89 87       	std	Y+9, r24	; 0x09
    13d6:	89 85       	ldd	r24, Y+9	; 0x09
    13d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13da:	9e 87       	std	Y+14, r25	; 0x0e
    13dc:	8d 87       	std	Y+13, r24	; 0x0d
    13de:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <odometry_set_speed+0x108>
    13e6:	9e 87       	std	Y+14, r25	; 0x0e
    13e8:	8d 87       	std	Y+13, r24	; 0x0d
    13ea:	ce 01       	movw	r24, r28
    13ec:	0f 96       	adiw	r24, 0x0f	; 15
    13ee:	63 ec       	ldi	r22, 0xC3	; 195
    13f0:	0e 94 2a 06 	call	0xc54	; 0xc54 <CAN_Write>
    13f4:	88 23       	and	r24, r24
    13f6:	09 f0       	breq	.+2      	; 0x13fa <odometry_set_speed+0x120>
    13f8:	86 cf       	rjmp	.-244    	; 0x1306 <odometry_set_speed+0x2c>
		_delay_ms(50);

	current_speed = speed;
    13fa:	8f 89       	ldd	r24, Y+23	; 0x17
    13fc:	80 93 64 01 	sts	0x0164, r24
}
    1400:	67 96       	adiw	r28, 0x17	; 23
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	08 95       	ret

00001412 <odometry_query_position>:
 * 	void odometry_query_position(void)
 *
 * 	Get the current position. Update it to position
 */
void odometry_query_position(void)
{
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	66 97       	sbiw	r28, 0x16	; 22
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];
	buffer[0] = 'P';
    1426:	80 e5       	ldi	r24, 0x50	; 80
    1428:	8f 87       	std	Y+15, r24	; 0x0f
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    142a:	72 c0       	rjmp	.+228    	; 0x1510 <odometry_query_position+0xfe>
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	a8 e4       	ldi	r26, 0x48	; 72
    1432:	b2 e4       	ldi	r27, 0x42	; 66
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	9a 83       	std	Y+2, r25	; 0x02
    1438:	ab 83       	std	Y+3, r26	; 0x03
    143a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e4       	ldi	r19, 0x40	; 64
    1440:	4c e1       	ldi	r20, 0x1C	; 28
    1442:	55 e4       	ldi	r21, 0x45	; 69
    1444:	69 81       	ldd	r22, Y+1	; 0x01
    1446:	7a 81       	ldd	r23, Y+2	; 0x02
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    1450:	dc 01       	movw	r26, r24
    1452:	cb 01       	movw	r24, r22
    1454:	8d 83       	std	Y+5, r24	; 0x05
    1456:	9e 83       	std	Y+6, r25	; 0x06
    1458:	af 83       	std	Y+7, r26	; 0x07
    145a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	6d 81       	ldd	r22, Y+5	; 0x05
    1466:	7e 81       	ldd	r23, Y+6	; 0x06
    1468:	8f 81       	ldd	r24, Y+7	; 0x07
    146a:	98 85       	ldd	r25, Y+8	; 0x08
    146c:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    1470:	88 23       	and	r24, r24
    1472:	2c f4       	brge	.+10     	; 0x147e <odometry_query_position+0x6c>
		__ticks = 1;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	9a 87       	std	Y+10, r25	; 0x0a
    147a:	89 87       	std	Y+9, r24	; 0x09
    147c:	3f c0       	rjmp	.+126    	; 0x14fc <odometry_query_position+0xea>
	else if (__tmp > 65535)
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	3f ef       	ldi	r19, 0xFF	; 255
    1482:	4f e7       	ldi	r20, 0x7F	; 127
    1484:	57 e4       	ldi	r21, 0x47	; 71
    1486:	6d 81       	ldd	r22, Y+5	; 0x05
    1488:	7e 81       	ldd	r23, Y+6	; 0x06
    148a:	8f 81       	ldd	r24, Y+7	; 0x07
    148c:	98 85       	ldd	r25, Y+8	; 0x08
    148e:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    1492:	18 16       	cp	r1, r24
    1494:	4c f5       	brge	.+82     	; 0x14e8 <odometry_query_position+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	69 81       	ldd	r22, Y+1	; 0x01
    14a0:	7a 81       	ldd	r23, Y+2	; 0x02
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	9a 87       	std	Y+10, r25	; 0x0a
    14bc:	89 87       	std	Y+9, r24	; 0x09
    14be:	0f c0       	rjmp	.+30     	; 0x14de <odometry_query_position+0xcc>
    14c0:	8a ef       	ldi	r24, 0xFA	; 250
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	9c 87       	std	Y+12, r25	; 0x0c
    14c6:	8b 87       	std	Y+11, r24	; 0x0b
    14c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <odometry_query_position+0xba>
    14d0:	9c 87       	std	Y+12, r25	; 0x0c
    14d2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d4:	89 85       	ldd	r24, Y+9	; 0x09
    14d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	9a 87       	std	Y+10, r25	; 0x0a
    14dc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14de:	89 85       	ldd	r24, Y+9	; 0x09
    14e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e2:	89 2b       	or	r24, r25
    14e4:	69 f7       	brne	.-38     	; 0x14c0 <odometry_query_position+0xae>
    14e6:	14 c0       	rjmp	.+40     	; 0x1510 <odometry_query_position+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e8:	6d 81       	ldd	r22, Y+5	; 0x05
    14ea:	7e 81       	ldd	r23, Y+6	; 0x06
    14ec:	8f 81       	ldd	r24, Y+7	; 0x07
    14ee:	98 85       	ldd	r25, Y+8	; 0x08
    14f0:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	9a 87       	std	Y+10, r25	; 0x0a
    14fa:	89 87       	std	Y+9, r24	; 0x09
    14fc:	89 85       	ldd	r24, Y+9	; 0x09
    14fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1500:	9e 87       	std	Y+14, r25	; 0x0e
    1502:	8d 87       	std	Y+13, r24	; 0x0d
    1504:	8d 85       	ldd	r24, Y+13	; 0x0d
    1506:	9e 85       	ldd	r25, Y+14	; 0x0e
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	f1 f7       	brne	.-4      	; 0x1508 <odometry_query_position+0xf6>
    150c:	9e 87       	std	Y+14, r25	; 0x0e
    150e:	8d 87       	std	Y+13, r24	; 0x0d
    1510:	ce 01       	movw	r24, r28
    1512:	0f 96       	adiw	r24, 0x0f	; 15
    1514:	63 ec       	ldi	r22, 0xC3	; 195
    1516:	0e 94 2a 06 	call	0xc54	; 0xc54 <CAN_Write>
    151a:	88 23       	and	r24, r24
    151c:	09 f0       	breq	.+2      	; 0x1520 <odometry_query_position+0x10e>
    151e:	86 cf       	rjmp	.-244    	; 0x142c <odometry_query_position+0x1a>
		_delay_ms(50);

	CAN_Read(buffer, DRIVER_RX_IDENTIFICATOR);
    1520:	ce 01       	movw	r24, r28
    1522:	0f 96       	adiw	r24, 0x0f	; 15
    1524:	61 e0       	ldi	r22, 0x01	; 1
    1526:	0e 94 b5 05 	call	0xb6a	; 0xb6a <CAN_Read>

	position.state = buffer[0];
    152a:	8f 85       	ldd	r24, Y+15	; 0x0f
    152c:	80 93 15 01 	sts	0x0115, r24
	position.x	   = (buffer[1] << 8) | buffer[2];
    1530:	88 89       	ldd	r24, Y+16	; 0x10
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	38 2f       	mov	r19, r24
    1538:	22 27       	eor	r18, r18
    153a:	89 89       	ldd	r24, Y+17	; 0x11
    153c:	88 2f       	mov	r24, r24
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	82 2b       	or	r24, r18
    1542:	93 2b       	or	r25, r19
    1544:	90 93 10 01 	sts	0x0110, r25
    1548:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = (buffer[3] << 8) | buffer[4];
    154c:	8a 89       	ldd	r24, Y+18	; 0x12
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	38 2f       	mov	r19, r24
    1554:	22 27       	eor	r18, r18
    1556:	8b 89       	ldd	r24, Y+19	; 0x13
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	82 2b       	or	r24, r18
    155e:	93 2b       	or	r25, r19
    1560:	90 93 12 01 	sts	0x0112, r25
    1564:	80 93 11 01 	sts	0x0111, r24
	position.angle = (buffer[5] << 8) | buffer[6];
    1568:	8c 89       	ldd	r24, Y+20	; 0x14
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	38 2f       	mov	r19, r24
    1570:	22 27       	eor	r18, r18
    1572:	8d 89       	ldd	r24, Y+21	; 0x15
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	82 2b       	or	r24, r18
    157a:	93 2b       	or	r25, r19
    157c:	90 93 14 01 	sts	0x0114, r25
    1580:	80 93 13 01 	sts	0x0113, r24
}
    1584:	66 96       	adiw	r28, 0x16	; 22
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	08 95       	ret

00001596 <odometry_wait_until_done>:
 * 	static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
 *
 * 	Callback function, execute function while odometry is moving
 */
static uint8_t odometry_wait_until_done(uint8_t (*callback)(uint32_t start_time))
{
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	00 d0       	rcall	.+0      	; 0x159c <odometry_wait_until_done+0x6>
    159c:	00 d0       	rcall	.+0      	; 0x159e <odometry_wait_until_done+0x8>
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <odometry_wait_until_done+0xa>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t time = system_get_system_time();
    15a8:	0e 94 af 12 	call	0x255e	; 0x255e <system_get_system_time>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	9a 83       	std	Y+2, r25	; 0x02
    15b4:	ab 83       	std	Y+3, r26	; 0x03
    15b6:	bc 83       	std	Y+4, r27	; 0x04
	do
	{
		odometry_query_position();
    15b8:	0e 94 09 0a 	call	0x1412	; 0x1412 <odometry_query_position>
		if(callback != NULL)
    15bc:	8d 81       	ldd	r24, Y+5	; 0x05
    15be:	9e 81       	ldd	r25, Y+6	; 0x06
    15c0:	89 2b       	or	r24, r25
    15c2:	71 f0       	breq	.+28     	; 0x15e0 <odometry_wait_until_done+0x4a>
		{
			if(callback(time) == 1)
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	ab 81       	ldd	r26, Y+3	; 0x03
    15ca:	bc 81       	ldd	r27, Y+4	; 0x04
    15cc:	2d 81       	ldd	r18, Y+5	; 0x05
    15ce:	3e 81       	ldd	r19, Y+6	; 0x06
    15d0:	bc 01       	movw	r22, r24
    15d2:	cd 01       	movw	r24, r26
    15d4:	f9 01       	movw	r30, r18
    15d6:	09 95       	icall
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	11 f4       	brne	.+4      	; 0x15e0 <odometry_wait_until_done+0x4a>
				return ODOMETRY_FAIL;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	09 c0       	rjmp	.+18     	; 0x15f2 <odometry_wait_until_done+0x5c>
		}
	}while(position.state == MOVING || position.state == ROTATING);
    15e0:	80 91 15 01 	lds	r24, 0x0115
    15e4:	8d 34       	cpi	r24, 0x4D	; 77
    15e6:	41 f3       	breq	.-48     	; 0x15b8 <odometry_wait_until_done+0x22>
    15e8:	80 91 15 01 	lds	r24, 0x0115
    15ec:	82 35       	cpi	r24, 0x52	; 82
    15ee:	21 f3       	breq	.-56     	; 0x15b8 <odometry_wait_until_done+0x22>

	return ODOMETRY_SUCCESS;
    15f0:	80 e0       	ldi	r24, 0x00	; 0
}
    15f2:	26 96       	adiw	r28, 0x06	; 6
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	08 95       	ret

00001604 <odometry_stop>:
 * 	void odometry_stop(int8_t type)
 *
 * 	Send stop to odometry
 */
void odometry_stop(int8_t type)
{
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	67 97       	sbiw	r28, 0x17	; 23
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	do
	{
		buffer[0] = type;
    161a:	8f 89       	ldd	r24, Y+23	; 0x17
    161c:	8f 87       	std	Y+15, r24	; 0x0f

		while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    161e:	72 c0       	rjmp	.+228    	; 0x1704 <odometry_stop+0x100>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a8 e4       	ldi	r26, 0x48	; 72
    1626:	b2 e4       	ldi	r27, 0x42	; 66
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	ab 83       	std	Y+3, r26	; 0x03
    162e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e4       	ldi	r19, 0x40	; 64
    1634:	4c e1       	ldi	r20, 0x1C	; 28
    1636:	55 e4       	ldi	r21, 0x45	; 69
    1638:	69 81       	ldd	r22, Y+1	; 0x01
    163a:	7a 81       	ldd	r23, Y+2	; 0x02
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	8d 83       	std	Y+5, r24	; 0x05
    164a:	9e 83       	std	Y+6, r25	; 0x06
    164c:	af 83       	std	Y+7, r26	; 0x07
    164e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e8       	ldi	r20, 0x80	; 128
    1656:	5f e3       	ldi	r21, 0x3F	; 63
    1658:	6d 81       	ldd	r22, Y+5	; 0x05
    165a:	7e 81       	ldd	r23, Y+6	; 0x06
    165c:	8f 81       	ldd	r24, Y+7	; 0x07
    165e:	98 85       	ldd	r25, Y+8	; 0x08
    1660:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    1664:	88 23       	and	r24, r24
    1666:	2c f4       	brge	.+10     	; 0x1672 <odometry_stop+0x6e>
		__ticks = 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	9a 87       	std	Y+10, r25	; 0x0a
    166e:	89 87       	std	Y+9, r24	; 0x09
    1670:	3f c0       	rjmp	.+126    	; 0x16f0 <odometry_stop+0xec>
	else if (__tmp > 65535)
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	57 e4       	ldi	r21, 0x47	; 71
    167a:	6d 81       	ldd	r22, Y+5	; 0x05
    167c:	7e 81       	ldd	r23, Y+6	; 0x06
    167e:	8f 81       	ldd	r24, Y+7	; 0x07
    1680:	98 85       	ldd	r25, Y+8	; 0x08
    1682:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    1686:	18 16       	cp	r1, r24
    1688:	4c f5       	brge	.+82     	; 0x16dc <odometry_stop+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e2       	ldi	r20, 0x20	; 32
    1690:	51 e4       	ldi	r21, 0x41	; 65
    1692:	69 81       	ldd	r22, Y+1	; 0x01
    1694:	7a 81       	ldd	r23, Y+2	; 0x02
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	9a 87       	std	Y+10, r25	; 0x0a
    16b0:	89 87       	std	Y+9, r24	; 0x09
    16b2:	0f c0       	rjmp	.+30     	; 0x16d2 <odometry_stop+0xce>
    16b4:	8a ef       	ldi	r24, 0xFA	; 250
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9c 87       	std	Y+12, r25	; 0x0c
    16ba:	8b 87       	std	Y+11, r24	; 0x0b
    16bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    16be:	9c 85       	ldd	r25, Y+12	; 0x0c
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <odometry_stop+0xbc>
    16c4:	9c 87       	std	Y+12, r25	; 0x0c
    16c6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c8:	89 85       	ldd	r24, Y+9	; 0x09
    16ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	9a 87       	std	Y+10, r25	; 0x0a
    16d0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	89 2b       	or	r24, r25
    16d8:	69 f7       	brne	.-38     	; 0x16b4 <odometry_stop+0xb0>
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <odometry_stop+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16dc:	6d 81       	ldd	r22, Y+5	; 0x05
    16de:	7e 81       	ldd	r23, Y+6	; 0x06
    16e0:	8f 81       	ldd	r24, Y+7	; 0x07
    16e2:	98 85       	ldd	r25, Y+8	; 0x08
    16e4:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	9a 87       	std	Y+10, r25	; 0x0a
    16ee:	89 87       	std	Y+9, r24	; 0x09
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	9e 87       	std	Y+14, r25	; 0x0e
    16f6:	8d 87       	std	Y+13, r24	; 0x0d
    16f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <odometry_stop+0xf8>
    1700:	9e 87       	std	Y+14, r25	; 0x0e
    1702:	8d 87       	std	Y+13, r24	; 0x0d
    1704:	ce 01       	movw	r24, r28
    1706:	0f 96       	adiw	r24, 0x0f	; 15
    1708:	63 ec       	ldi	r22, 0xC3	; 195
    170a:	0e 94 2a 06 	call	0xc54	; 0xc54 <CAN_Write>
    170e:	88 23       	and	r24, r24
    1710:	09 f0       	breq	.+2      	; 0x1714 <odometry_stop+0x110>
    1712:	86 cf       	rjmp	.-244    	; 0x1620 <odometry_stop+0x1c>
			_delay_ms(50);

		odometry_query_position();
    1714:	0e 94 09 0a 	call	0x1412	; 0x1412 <odometry_query_position>
	}while(position.state == MOVING || position.state == ROTATING);
    1718:	80 91 15 01 	lds	r24, 0x0115
    171c:	8d 34       	cpi	r24, 0x4D	; 77
    171e:	09 f4       	brne	.+2      	; 0x1722 <odometry_stop+0x11e>
    1720:	7c cf       	rjmp	.-264    	; 0x161a <odometry_stop+0x16>
    1722:	80 91 15 01 	lds	r24, 0x0115
    1726:	82 35       	cpi	r24, 0x52	; 82
    1728:	09 f4       	brne	.+2      	; 0x172c <odometry_stop+0x128>
    172a:	77 cf       	rjmp	.-274    	; 0x161a <odometry_stop+0x16>
}
    172c:	67 96       	adiw	r28, 0x17	; 23
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	08 95       	ret

0000173e <odometry_move_straight>:
 * 	uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move straight command to odometry
 */
uint8_t odometry_move_straight(int16_t distance, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	6b 97       	sbiw	r28, 0x1b	; 27
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	98 8f       	std	Y+24, r25	; 0x18
    1754:	8f 8b       	std	Y+23, r24	; 0x17
    1756:	69 8f       	std	Y+25, r22	; 0x19
    1758:	5b 8f       	std	Y+27, r21	; 0x1b
    175a:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    175c:	89 8d       	ldd	r24, Y+25	; 0x19
    175e:	0e 94 6d 09 	call	0x12da	; 0x12da <odometry_set_speed>
	buffer[0] = 'D';
    1762:	84 e4       	ldi	r24, 0x44	; 68
    1764:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = distance >> 8;
    1766:	8f 89       	ldd	r24, Y+23	; 0x17
    1768:	98 8d       	ldd	r25, Y+24	; 0x18
    176a:	89 2f       	mov	r24, r25
    176c:	99 0f       	add	r25, r25
    176e:	99 0b       	sbc	r25, r25
    1770:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = distance & 0xFF;
    1772:	8f 89       	ldd	r24, Y+23	; 0x17
    1774:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1776:	72 c0       	rjmp	.+228    	; 0x185c <odometry_move_straight+0x11e>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	a8 e4       	ldi	r26, 0x48	; 72
    177e:	b2 e4       	ldi	r27, 0x42	; 66
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	9a 83       	std	Y+2, r25	; 0x02
    1784:	ab 83       	std	Y+3, r26	; 0x03
    1786:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e4       	ldi	r19, 0x40	; 64
    178c:	4c e1       	ldi	r20, 0x1C	; 28
    178e:	55 e4       	ldi	r21, 0x45	; 69
    1790:	69 81       	ldd	r22, Y+1	; 0x01
    1792:	7a 81       	ldd	r23, Y+2	; 0x02
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	8d 83       	std	Y+5, r24	; 0x05
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	af 83       	std	Y+7, r26	; 0x07
    17a6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	6d 81       	ldd	r22, Y+5	; 0x05
    17b2:	7e 81       	ldd	r23, Y+6	; 0x06
    17b4:	8f 81       	ldd	r24, Y+7	; 0x07
    17b6:	98 85       	ldd	r25, Y+8	; 0x08
    17b8:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    17bc:	88 23       	and	r24, r24
    17be:	2c f4       	brge	.+10     	; 0x17ca <odometry_move_straight+0x8c>
		__ticks = 1;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9a 87       	std	Y+10, r25	; 0x0a
    17c6:	89 87       	std	Y+9, r24	; 0x09
    17c8:	3f c0       	rjmp	.+126    	; 0x1848 <odometry_move_straight+0x10a>
	else if (__tmp > 65535)
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	3f ef       	ldi	r19, 0xFF	; 255
    17ce:	4f e7       	ldi	r20, 0x7F	; 127
    17d0:	57 e4       	ldi	r21, 0x47	; 71
    17d2:	6d 81       	ldd	r22, Y+5	; 0x05
    17d4:	7e 81       	ldd	r23, Y+6	; 0x06
    17d6:	8f 81       	ldd	r24, Y+7	; 0x07
    17d8:	98 85       	ldd	r25, Y+8	; 0x08
    17da:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    17de:	18 16       	cp	r1, r24
    17e0:	4c f5       	brge	.+82     	; 0x1834 <odometry_move_straight+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e2       	ldi	r20, 0x20	; 32
    17e8:	51 e4       	ldi	r21, 0x41	; 65
    17ea:	69 81       	ldd	r22, Y+1	; 0x01
    17ec:	7a 81       	ldd	r23, Y+2	; 0x02
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	bc 01       	movw	r22, r24
    17fc:	cd 01       	movw	r24, r26
    17fe:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	9a 87       	std	Y+10, r25	; 0x0a
    1808:	89 87       	std	Y+9, r24	; 0x09
    180a:	0f c0       	rjmp	.+30     	; 0x182a <odometry_move_straight+0xec>
    180c:	8a ef       	ldi	r24, 0xFA	; 250
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9c 87       	std	Y+12, r25	; 0x0c
    1812:	8b 87       	std	Y+11, r24	; 0x0b
    1814:	8b 85       	ldd	r24, Y+11	; 0x0b
    1816:	9c 85       	ldd	r25, Y+12	; 0x0c
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <odometry_move_straight+0xda>
    181c:	9c 87       	std	Y+12, r25	; 0x0c
    181e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1820:	89 85       	ldd	r24, Y+9	; 0x09
    1822:	9a 85       	ldd	r25, Y+10	; 0x0a
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	9a 87       	std	Y+10, r25	; 0x0a
    1828:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	89 2b       	or	r24, r25
    1830:	69 f7       	brne	.-38     	; 0x180c <odometry_move_straight+0xce>
    1832:	14 c0       	rjmp	.+40     	; 0x185c <odometry_move_straight+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1834:	6d 81       	ldd	r22, Y+5	; 0x05
    1836:	7e 81       	ldd	r23, Y+6	; 0x06
    1838:	8f 81       	ldd	r24, Y+7	; 0x07
    183a:	98 85       	ldd	r25, Y+8	; 0x08
    183c:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	9a 87       	std	Y+10, r25	; 0x0a
    1846:	89 87       	std	Y+9, r24	; 0x09
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	9a 85       	ldd	r25, Y+10	; 0x0a
    184c:	9e 87       	std	Y+14, r25	; 0x0e
    184e:	8d 87       	std	Y+13, r24	; 0x0d
    1850:	8d 85       	ldd	r24, Y+13	; 0x0d
    1852:	9e 85       	ldd	r25, Y+14	; 0x0e
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <odometry_move_straight+0x116>
    1858:	9e 87       	std	Y+14, r25	; 0x0e
    185a:	8d 87       	std	Y+13, r24	; 0x0d
    185c:	ce 01       	movw	r24, r28
    185e:	0f 96       	adiw	r24, 0x0f	; 15
    1860:	63 ec       	ldi	r22, 0xC3	; 195
    1862:	0e 94 2a 06 	call	0xc54	; 0xc54 <CAN_Write>
    1866:	88 23       	and	r24, r24
    1868:	09 f0       	breq	.+2      	; 0x186c <odometry_move_straight+0x12e>
    186a:	86 cf       	rjmp	.-244    	; 0x1778 <odometry_move_straight+0x3a>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    186c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    186e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1870:	0e 94 cb 0a 	call	0x1596	; 0x1596 <odometry_wait_until_done>
}
    1874:	6b 96       	adiw	r28, 0x1b	; 27
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	08 95       	ret

00001886 <odometry_move_to_position>:
 * 	uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send move to position function to odometry
 */
uint8_t odometry_move_to_position(struct odometry_position* position, uint8_t speed, uint8_t direction, char (*callback)(uint32_t start_time))
{
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	6c 97       	sbiw	r28, 0x1c	; 28
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	98 8f       	std	Y+24, r25	; 0x18
    189c:	8f 8b       	std	Y+23, r24	; 0x17
    189e:	69 8f       	std	Y+25, r22	; 0x19
    18a0:	4a 8f       	std	Y+26, r20	; 0x1a
    18a2:	3c 8f       	std	Y+28, r19	; 0x1c
    18a4:	2b 8f       	std	Y+27, r18	; 0x1b
	uint8_t buffer[8];

	odometry_set_speed(speed);
    18a6:	89 8d       	ldd	r24, Y+25	; 0x19
    18a8:	0e 94 6d 09 	call	0x12da	; 0x12da <odometry_set_speed>

	buffer[0] = 'G';
    18ac:	87 e4       	ldi	r24, 0x47	; 71
    18ae:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = position->x >> 8;
    18b0:	8f 89       	ldd	r24, Y+23	; 0x17
    18b2:	98 8d       	ldd	r25, Y+24	; 0x18
    18b4:	fc 01       	movw	r30, r24
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	89 2f       	mov	r24, r25
    18bc:	99 0f       	add	r25, r25
    18be:	99 0b       	sbc	r25, r25
    18c0:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = position->x & 0xFF;
    18c2:	8f 89       	ldd	r24, Y+23	; 0x17
    18c4:	98 8d       	ldd	r25, Y+24	; 0x18
    18c6:	fc 01       	movw	r30, r24
    18c8:	80 81       	ld	r24, Z
    18ca:	91 81       	ldd	r25, Z+1	; 0x01
    18cc:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = position->y >> 8;
    18ce:	8f 89       	ldd	r24, Y+23	; 0x17
    18d0:	98 8d       	ldd	r25, Y+24	; 0x18
    18d2:	fc 01       	movw	r30, r24
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	89 2f       	mov	r24, r25
    18da:	99 0f       	add	r25, r25
    18dc:	99 0b       	sbc	r25, r25
    18de:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = position->y & 0xFF;
    18e0:	8f 89       	ldd	r24, Y+23	; 0x17
    18e2:	98 8d       	ldd	r25, Y+24	; 0x18
    18e4:	fc 01       	movw	r30, r24
    18e6:	82 81       	ldd	r24, Z+2	; 0x02
    18e8:	93 81       	ldd	r25, Z+3	; 0x03
    18ea:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = 0;
    18ec:	1c 8a       	std	Y+20, r1	; 0x14
	buffer[6] = direction;
    18ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18f0:	8d 8b       	std	Y+21, r24	; 0x15
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    18f2:	72 c0       	rjmp	.+228    	; 0x19d8 <odometry_move_to_position+0x152>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	a8 e4       	ldi	r26, 0x48	; 72
    18fa:	b2 e4       	ldi	r27, 0x42	; 66
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	ab 83       	std	Y+3, r26	; 0x03
    1902:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e4       	ldi	r19, 0x40	; 64
    1908:	4c e1       	ldi	r20, 0x1C	; 28
    190a:	55 e4       	ldi	r21, 0x45	; 69
    190c:	69 81       	ldd	r22, Y+1	; 0x01
    190e:	7a 81       	ldd	r23, Y+2	; 0x02
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	8d 83       	std	Y+5, r24	; 0x05
    191e:	9e 83       	std	Y+6, r25	; 0x06
    1920:	af 83       	std	Y+7, r26	; 0x07
    1922:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	40 e8       	ldi	r20, 0x80	; 128
    192a:	5f e3       	ldi	r21, 0x3F	; 63
    192c:	6d 81       	ldd	r22, Y+5	; 0x05
    192e:	7e 81       	ldd	r23, Y+6	; 0x06
    1930:	8f 81       	ldd	r24, Y+7	; 0x07
    1932:	98 85       	ldd	r25, Y+8	; 0x08
    1934:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    1938:	88 23       	and	r24, r24
    193a:	2c f4       	brge	.+10     	; 0x1946 <odometry_move_to_position+0xc0>
		__ticks = 1;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	9a 87       	std	Y+10, r25	; 0x0a
    1942:	89 87       	std	Y+9, r24	; 0x09
    1944:	3f c0       	rjmp	.+126    	; 0x19c4 <odometry_move_to_position+0x13e>
	else if (__tmp > 65535)
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	3f ef       	ldi	r19, 0xFF	; 255
    194a:	4f e7       	ldi	r20, 0x7F	; 127
    194c:	57 e4       	ldi	r21, 0x47	; 71
    194e:	6d 81       	ldd	r22, Y+5	; 0x05
    1950:	7e 81       	ldd	r23, Y+6	; 0x06
    1952:	8f 81       	ldd	r24, Y+7	; 0x07
    1954:	98 85       	ldd	r25, Y+8	; 0x08
    1956:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    195a:	18 16       	cp	r1, r24
    195c:	4c f5       	brge	.+82     	; 0x19b0 <odometry_move_to_position+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e2       	ldi	r20, 0x20	; 32
    1964:	51 e4       	ldi	r21, 0x41	; 65
    1966:	69 81       	ldd	r22, Y+1	; 0x01
    1968:	7a 81       	ldd	r23, Y+2	; 0x02
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	9c 81       	ldd	r25, Y+4	; 0x04
    196e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	bc 01       	movw	r22, r24
    1978:	cd 01       	movw	r24, r26
    197a:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	9a 87       	std	Y+10, r25	; 0x0a
    1984:	89 87       	std	Y+9, r24	; 0x09
    1986:	0f c0       	rjmp	.+30     	; 0x19a6 <odometry_move_to_position+0x120>
    1988:	8a ef       	ldi	r24, 0xFA	; 250
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9c 87       	std	Y+12, r25	; 0x0c
    198e:	8b 87       	std	Y+11, r24	; 0x0b
    1990:	8b 85       	ldd	r24, Y+11	; 0x0b
    1992:	9c 85       	ldd	r25, Y+12	; 0x0c
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <odometry_move_to_position+0x10e>
    1998:	9c 87       	std	Y+12, r25	; 0x0c
    199a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199c:	89 85       	ldd	r24, Y+9	; 0x09
    199e:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	9a 87       	std	Y+10, r25	; 0x0a
    19a4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a6:	89 85       	ldd	r24, Y+9	; 0x09
    19a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19aa:	89 2b       	or	r24, r25
    19ac:	69 f7       	brne	.-38     	; 0x1988 <odometry_move_to_position+0x102>
    19ae:	14 c0       	rjmp	.+40     	; 0x19d8 <odometry_move_to_position+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b0:	6d 81       	ldd	r22, Y+5	; 0x05
    19b2:	7e 81       	ldd	r23, Y+6	; 0x06
    19b4:	8f 81       	ldd	r24, Y+7	; 0x07
    19b6:	98 85       	ldd	r25, Y+8	; 0x08
    19b8:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9a 87       	std	Y+10, r25	; 0x0a
    19c2:	89 87       	std	Y+9, r24	; 0x09
    19c4:	89 85       	ldd	r24, Y+9	; 0x09
    19c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c8:	9e 87       	std	Y+14, r25	; 0x0e
    19ca:	8d 87       	std	Y+13, r24	; 0x0d
    19cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <odometry_move_to_position+0x14a>
    19d4:	9e 87       	std	Y+14, r25	; 0x0e
    19d6:	8d 87       	std	Y+13, r24	; 0x0d
    19d8:	ce 01       	movw	r24, r28
    19da:	0f 96       	adiw	r24, 0x0f	; 15
    19dc:	63 ec       	ldi	r22, 0xC3	; 195
    19de:	0e 94 2a 06 	call	0xc54	; 0xc54 <CAN_Write>
    19e2:	88 23       	and	r24, r24
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <odometry_move_to_position+0x162>
    19e6:	86 cf       	rjmp	.-244    	; 0x18f4 <odometry_move_to_position+0x6e>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    19e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ec:	0e 94 cb 0a 	call	0x1596	; 0x1596 <odometry_wait_until_done>
}
    19f0:	6c 96       	adiw	r28, 0x1c	; 28
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <odometry_set_position>:

void odometry_set_position(struct odometry_position* new_position)
{
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	68 97       	sbiw	r28, 0x18	; 24
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	98 8f       	std	Y+24, r25	; 0x18
    1a18:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t buffer[8];

	buffer[0] = 'I';
    1a1a:	89 e4       	ldi	r24, 0x49	; 73
    1a1c:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = new_position->x >> 8;
    1a1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a20:	98 8d       	ldd	r25, Y+24	; 0x18
    1a22:	fc 01       	movw	r30, r24
    1a24:	80 81       	ld	r24, Z
    1a26:	91 81       	ldd	r25, Z+1	; 0x01
    1a28:	89 2f       	mov	r24, r25
    1a2a:	99 0f       	add	r25, r25
    1a2c:	99 0b       	sbc	r25, r25
    1a2e:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = new_position->x & 0xFF;
    1a30:	8f 89       	ldd	r24, Y+23	; 0x17
    1a32:	98 8d       	ldd	r25, Y+24	; 0x18
    1a34:	fc 01       	movw	r30, r24
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = new_position->y >> 8;
    1a3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a40:	fc 01       	movw	r30, r24
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	93 81       	ldd	r25, Z+3	; 0x03
    1a46:	89 2f       	mov	r24, r25
    1a48:	99 0f       	add	r25, r25
    1a4a:	99 0b       	sbc	r25, r25
    1a4c:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = new_position->y & 0xFF;
    1a4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a50:	98 8d       	ldd	r25, Y+24	; 0x18
    1a52:	fc 01       	movw	r30, r24
    1a54:	82 81       	ldd	r24, Z+2	; 0x02
    1a56:	93 81       	ldd	r25, Z+3	; 0x03
    1a58:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = new_position->angle >> 8;
    1a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5e:	fc 01       	movw	r30, r24
    1a60:	84 81       	ldd	r24, Z+4	; 0x04
    1a62:	95 81       	ldd	r25, Z+5	; 0x05
    1a64:	89 2f       	mov	r24, r25
    1a66:	99 0f       	add	r25, r25
    1a68:	99 0b       	sbc	r25, r25
    1a6a:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = new_position->angle & 0xFF;
    1a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a70:	fc 01       	movw	r30, r24
    1a72:	84 81       	ldd	r24, Z+4	; 0x04
    1a74:	95 81       	ldd	r25, Z+5	; 0x05
    1a76:	8d 8b       	std	Y+21, r24	; 0x15

	position.x	   = new_position->x;
    1a78:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	80 81       	ld	r24, Z
    1a80:	91 81       	ldd	r25, Z+1	; 0x01
    1a82:	90 93 10 01 	sts	0x0110, r25
    1a86:	80 93 0f 01 	sts	0x010F, r24
	position.y	   = new_position->y;
    1a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8e:	fc 01       	movw	r30, r24
    1a90:	82 81       	ldd	r24, Z+2	; 0x02
    1a92:	93 81       	ldd	r25, Z+3	; 0x03
    1a94:	90 93 12 01 	sts	0x0112, r25
    1a98:	80 93 11 01 	sts	0x0111, r24
	position.angle = new_position->angle;
    1a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	84 81       	ldd	r24, Z+4	; 0x04
    1aa4:	95 81       	ldd	r25, Z+5	; 0x05
    1aa6:	90 93 14 01 	sts	0x0114, r25
    1aaa:	80 93 13 01 	sts	0x0113, r24

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1aae:	72 c0       	rjmp	.+228    	; 0x1b94 <odometry_set_position+0x192>
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a8 e4       	ldi	r26, 0x48	; 72
    1ab6:	b2 e4       	ldi	r27, 0x42	; 66
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	ab 83       	std	Y+3, r26	; 0x03
    1abe:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e4       	ldi	r19, 0x40	; 64
    1ac4:	4c e1       	ldi	r20, 0x1C	; 28
    1ac6:	55 e4       	ldi	r21, 0x45	; 69
    1ac8:	69 81       	ldd	r22, Y+1	; 0x01
    1aca:	7a 81       	ldd	r23, Y+2	; 0x02
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad0:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	af 83       	std	Y+7, r26	; 0x07
    1ade:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e8       	ldi	r20, 0x80	; 128
    1ae6:	5f e3       	ldi	r21, 0x3F	; 63
    1ae8:	6d 81       	ldd	r22, Y+5	; 0x05
    1aea:	7e 81       	ldd	r23, Y+6	; 0x06
    1aec:	8f 81       	ldd	r24, Y+7	; 0x07
    1aee:	98 85       	ldd	r25, Y+8	; 0x08
    1af0:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    1af4:	88 23       	and	r24, r24
    1af6:	2c f4       	brge	.+10     	; 0x1b02 <odometry_set_position+0x100>
		__ticks = 1;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	9a 87       	std	Y+10, r25	; 0x0a
    1afe:	89 87       	std	Y+9, r24	; 0x09
    1b00:	3f c0       	rjmp	.+126    	; 0x1b80 <odometry_set_position+0x17e>
	else if (__tmp > 65535)
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	3f ef       	ldi	r19, 0xFF	; 255
    1b06:	4f e7       	ldi	r20, 0x7F	; 127
    1b08:	57 e4       	ldi	r21, 0x47	; 71
    1b0a:	6d 81       	ldd	r22, Y+5	; 0x05
    1b0c:	7e 81       	ldd	r23, Y+6	; 0x06
    1b0e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b10:	98 85       	ldd	r25, Y+8	; 0x08
    1b12:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    1b16:	18 16       	cp	r1, r24
    1b18:	4c f5       	brge	.+82     	; 0x1b6c <odometry_set_position+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e2       	ldi	r20, 0x20	; 32
    1b20:	51 e4       	ldi	r21, 0x41	; 65
    1b22:	69 81       	ldd	r22, Y+1	; 0x01
    1b24:	7a 81       	ldd	r23, Y+2	; 0x02
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9a 87       	std	Y+10, r25	; 0x0a
    1b40:	89 87       	std	Y+9, r24	; 0x09
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <odometry_set_position+0x160>
    1b44:	8a ef       	ldi	r24, 0xFA	; 250
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9c 87       	std	Y+12, r25	; 0x0c
    1b4a:	8b 87       	std	Y+11, r24	; 0x0b
    1b4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <odometry_set_position+0x14e>
    1b54:	9c 87       	std	Y+12, r25	; 0x0c
    1b56:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5c:	01 97       	sbiw	r24, 0x01	; 1
    1b5e:	9a 87       	std	Y+10, r25	; 0x0a
    1b60:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
    1b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b66:	89 2b       	or	r24, r25
    1b68:	69 f7       	brne	.-38     	; 0x1b44 <odometry_set_position+0x142>
    1b6a:	14 c0       	rjmp	.+40     	; 0x1b94 <odometry_set_position+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6c:	6d 81       	ldd	r22, Y+5	; 0x05
    1b6e:	7e 81       	ldd	r23, Y+6	; 0x06
    1b70:	8f 81       	ldd	r24, Y+7	; 0x07
    1b72:	98 85       	ldd	r25, Y+8	; 0x08
    1b74:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9a 87       	std	Y+10, r25	; 0x0a
    1b7e:	89 87       	std	Y+9, r24	; 0x09
    1b80:	89 85       	ldd	r24, Y+9	; 0x09
    1b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b84:	9e 87       	std	Y+14, r25	; 0x0e
    1b86:	8d 87       	std	Y+13, r24	; 0x0d
    1b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <odometry_set_position+0x18a>
    1b90:	9e 87       	std	Y+14, r25	; 0x0e
    1b92:	8d 87       	std	Y+13, r24	; 0x0d
    1b94:	ce 01       	movw	r24, r28
    1b96:	0f 96       	adiw	r24, 0x0f	; 15
    1b98:	63 ec       	ldi	r22, 0xC3	; 195
    1b9a:	0e 94 2a 06 	call	0xc54	; 0xc54 <CAN_Write>
    1b9e:	88 23       	and	r24, r24
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <odometry_set_position+0x1a2>
    1ba2:	86 cf       	rjmp	.-244    	; 0x1ab0 <odometry_set_position+0xae>
		_delay_ms(50);
}
    1ba4:	68 96       	adiw	r28, 0x18	; 24
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <odometry_rotate_for>:
 * 	uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Send rotate for command to odometry board
 */
uint8_t odometry_rotate_for(uint16_t angle,uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	6b 97       	sbiw	r28, 0x1b	; 27
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	98 8f       	std	Y+24, r25	; 0x18
    1bcc:	8f 8b       	std	Y+23, r24	; 0x17
    1bce:	69 8f       	std	Y+25, r22	; 0x19
    1bd0:	5b 8f       	std	Y+27, r21	; 0x1b
    1bd2:	4a 8f       	std	Y+26, r20	; 0x1a

	uint8_t buffer[8];
	odometry_set_speed(speed);
    1bd4:	89 8d       	ldd	r24, Y+25	; 0x19
    1bd6:	0e 94 6d 09 	call	0x12da	; 0x12da <odometry_set_speed>

	buffer[0] = 'T';
    1bda:	84 e5       	ldi	r24, 0x54	; 84
    1bdc:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1bde:	8f 89       	ldd	r24, Y+23	; 0x17
    1be0:	98 8d       	ldd	r25, Y+24	; 0x18
    1be2:	89 2f       	mov	r24, r25
    1be4:	99 27       	eor	r25, r25
    1be6:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1be8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bea:	89 8b       	std	Y+17, r24	; 0x11

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1bec:	72 c0       	rjmp	.+228    	; 0x1cd2 <odometry_rotate_for+0x11c>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a8 e4       	ldi	r26, 0x48	; 72
    1bf4:	b2 e4       	ldi	r27, 0x42	; 66
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	ab 83       	std	Y+3, r26	; 0x03
    1bfc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e4       	ldi	r19, 0x40	; 64
    1c02:	4c e1       	ldi	r20, 0x1C	; 28
    1c04:	55 e4       	ldi	r21, 0x45	; 69
    1c06:	69 81       	ldd	r22, Y+1	; 0x01
    1c08:	7a 81       	ldd	r23, Y+2	; 0x02
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8d 83       	std	Y+5, r24	; 0x05
    1c18:	9e 83       	std	Y+6, r25	; 0x06
    1c1a:	af 83       	std	Y+7, r26	; 0x07
    1c1c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	6d 81       	ldd	r22, Y+5	; 0x05
    1c28:	7e 81       	ldd	r23, Y+6	; 0x06
    1c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2c:	98 85       	ldd	r25, Y+8	; 0x08
    1c2e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <odometry_rotate_for+0x8a>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9a 87       	std	Y+10, r25	; 0x0a
    1c3c:	89 87       	std	Y+9, r24	; 0x09
    1c3e:	3f c0       	rjmp	.+126    	; 0x1cbe <odometry_rotate_for+0x108>
	else if (__tmp > 65535)
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	3f ef       	ldi	r19, 0xFF	; 255
    1c44:	4f e7       	ldi	r20, 0x7F	; 127
    1c46:	57 e4       	ldi	r21, 0x47	; 71
    1c48:	6d 81       	ldd	r22, Y+5	; 0x05
    1c4a:	7e 81       	ldd	r23, Y+6	; 0x06
    1c4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c4e:	98 85       	ldd	r25, Y+8	; 0x08
    1c50:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f5       	brge	.+82     	; 0x1caa <odometry_rotate_for+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e2       	ldi	r20, 0x20	; 32
    1c5e:	51 e4       	ldi	r21, 0x41	; 65
    1c60:	69 81       	ldd	r22, Y+1	; 0x01
    1c62:	7a 81       	ldd	r23, Y+2	; 0x02
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	9c 81       	ldd	r25, Y+4	; 0x04
    1c68:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9a 87       	std	Y+10, r25	; 0x0a
    1c7e:	89 87       	std	Y+9, r24	; 0x09
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <odometry_rotate_for+0xea>
    1c82:	8a ef       	ldi	r24, 0xFA	; 250
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9c 87       	std	Y+12, r25	; 0x0c
    1c88:	8b 87       	std	Y+11, r24	; 0x0b
    1c8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <odometry_rotate_for+0xd8>
    1c92:	9c 87       	std	Y+12, r25	; 0x0c
    1c94:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	89 85       	ldd	r24, Y+9	; 0x09
    1c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9a 87       	std	Y+10, r25	; 0x0a
    1c9e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	89 2b       	or	r24, r25
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <odometry_rotate_for+0xcc>
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <odometry_rotate_for+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	6d 81       	ldd	r22, Y+5	; 0x05
    1cac:	7e 81       	ldd	r23, Y+6	; 0x06
    1cae:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb0:	98 85       	ldd	r25, Y+8	; 0x08
    1cb2:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9a 87       	std	Y+10, r25	; 0x0a
    1cbc:	89 87       	std	Y+9, r24	; 0x09
    1cbe:	89 85       	ldd	r24, Y+9	; 0x09
    1cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc2:	9e 87       	std	Y+14, r25	; 0x0e
    1cc4:	8d 87       	std	Y+13, r24	; 0x0d
    1cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <odometry_rotate_for+0x114>
    1cce:	9e 87       	std	Y+14, r25	; 0x0e
    1cd0:	8d 87       	std	Y+13, r24	; 0x0d
    1cd2:	ce 01       	movw	r24, r28
    1cd4:	0f 96       	adiw	r24, 0x0f	; 15
    1cd6:	63 ec       	ldi	r22, 0xC3	; 195
    1cd8:	0e 94 2a 06 	call	0xc54	; 0xc54 <CAN_Write>
    1cdc:	88 23       	and	r24, r24
    1cde:	09 f0       	breq	.+2      	; 0x1ce2 <odometry_rotate_for+0x12c>
    1ce0:	86 cf       	rjmp	.-244    	; 0x1bee <odometry_rotate_for+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1ce2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ce4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ce6:	0e 94 cb 0a 	call	0x1596	; 0x1596 <odometry_wait_until_done>

}
    1cea:	6b 96       	adiw	r28, 0x1b	; 27
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	08 95       	ret

00001cfc <odometry_set_angle>:
 * 	uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
 *
 * 	Set angle for odometry
 */
uint8_t odometry_set_angle(uint16_t angle, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	6b 97       	sbiw	r28, 0x1b	; 27
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	98 8f       	std	Y+24, r25	; 0x18
    1d12:	8f 8b       	std	Y+23, r24	; 0x17
    1d14:	69 8f       	std	Y+25, r22	; 0x19
    1d16:	5b 8f       	std	Y+27, r21	; 0x1b
    1d18:	4a 8f       	std	Y+26, r20	; 0x1a
	uint8_t buffer[8];
	odometry_set_speed(speed);
    1d1a:	89 8d       	ldd	r24, Y+25	; 0x19
    1d1c:	0e 94 6d 09 	call	0x12da	; 0x12da <odometry_set_speed>

	buffer[0] = 'A';
    1d20:	81 e4       	ldi	r24, 0x41	; 65
    1d22:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = angle >> 8;
    1d24:	8f 89       	ldd	r24, Y+23	; 0x17
    1d26:	98 8d       	ldd	r25, Y+24	; 0x18
    1d28:	89 2f       	mov	r24, r25
    1d2a:	99 27       	eor	r25, r25
    1d2c:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = angle & 0xFF;
    1d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d30:	89 8b       	std	Y+17, r24	; 0x11
	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1d32:	72 c0       	rjmp	.+228    	; 0x1e18 <odometry_set_angle+0x11c>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	a8 e4       	ldi	r26, 0x48	; 72
    1d3a:	b2 e4       	ldi	r27, 0x42	; 66
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	ab 83       	std	Y+3, r26	; 0x03
    1d42:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e4       	ldi	r19, 0x40	; 64
    1d48:	4c e1       	ldi	r20, 0x1C	; 28
    1d4a:	55 e4       	ldi	r21, 0x45	; 69
    1d4c:	69 81       	ldd	r22, Y+1	; 0x01
    1d4e:	7a 81       	ldd	r23, Y+2	; 0x02
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	af 83       	std	Y+7, r26	; 0x07
    1d62:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e8       	ldi	r20, 0x80	; 128
    1d6a:	5f e3       	ldi	r21, 0x3F	; 63
    1d6c:	6d 81       	ldd	r22, Y+5	; 0x05
    1d6e:	7e 81       	ldd	r23, Y+6	; 0x06
    1d70:	8f 81       	ldd	r24, Y+7	; 0x07
    1d72:	98 85       	ldd	r25, Y+8	; 0x08
    1d74:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    1d78:	88 23       	and	r24, r24
    1d7a:	2c f4       	brge	.+10     	; 0x1d86 <odometry_set_angle+0x8a>
		__ticks = 1;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9a 87       	std	Y+10, r25	; 0x0a
    1d82:	89 87       	std	Y+9, r24	; 0x09
    1d84:	3f c0       	rjmp	.+126    	; 0x1e04 <odometry_set_angle+0x108>
	else if (__tmp > 65535)
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	3f ef       	ldi	r19, 0xFF	; 255
    1d8a:	4f e7       	ldi	r20, 0x7F	; 127
    1d8c:	57 e4       	ldi	r21, 0x47	; 71
    1d8e:	6d 81       	ldd	r22, Y+5	; 0x05
    1d90:	7e 81       	ldd	r23, Y+6	; 0x06
    1d92:	8f 81       	ldd	r24, Y+7	; 0x07
    1d94:	98 85       	ldd	r25, Y+8	; 0x08
    1d96:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    1d9a:	18 16       	cp	r1, r24
    1d9c:	4c f5       	brge	.+82     	; 0x1df0 <odometry_set_angle+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e2       	ldi	r20, 0x20	; 32
    1da4:	51 e4       	ldi	r21, 0x41	; 65
    1da6:	69 81       	ldd	r22, Y+1	; 0x01
    1da8:	7a 81       	ldd	r23, Y+2	; 0x02
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	9a 87       	std	Y+10, r25	; 0x0a
    1dc4:	89 87       	std	Y+9, r24	; 0x09
    1dc6:	0f c0       	rjmp	.+30     	; 0x1de6 <odometry_set_angle+0xea>
    1dc8:	8a ef       	ldi	r24, 0xFA	; 250
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9c 87       	std	Y+12, r25	; 0x0c
    1dce:	8b 87       	std	Y+11, r24	; 0x0b
    1dd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <odometry_set_angle+0xd8>
    1dd8:	9c 87       	std	Y+12, r25	; 0x0c
    1dda:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	9a 87       	std	Y+10, r25	; 0x0a
    1de4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de6:	89 85       	ldd	r24, Y+9	; 0x09
    1de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dea:	89 2b       	or	r24, r25
    1dec:	69 f7       	brne	.-38     	; 0x1dc8 <odometry_set_angle+0xcc>
    1dee:	14 c0       	rjmp	.+40     	; 0x1e18 <odometry_set_angle+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df0:	6d 81       	ldd	r22, Y+5	; 0x05
    1df2:	7e 81       	ldd	r23, Y+6	; 0x06
    1df4:	8f 81       	ldd	r24, Y+7	; 0x07
    1df6:	98 85       	ldd	r25, Y+8	; 0x08
    1df8:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9a 87       	std	Y+10, r25	; 0x0a
    1e02:	89 87       	std	Y+9, r24	; 0x09
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e08:	9e 87       	std	Y+14, r25	; 0x0e
    1e0a:	8d 87       	std	Y+13, r24	; 0x0d
    1e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <odometry_set_angle+0x114>
    1e14:	9e 87       	std	Y+14, r25	; 0x0e
    1e16:	8d 87       	std	Y+13, r24	; 0x0d
    1e18:	ce 01       	movw	r24, r28
    1e1a:	0f 96       	adiw	r24, 0x0f	; 15
    1e1c:	63 ec       	ldi	r22, 0xC3	; 195
    1e1e:	0e 94 2a 06 	call	0xc54	; 0xc54 <CAN_Write>
    1e22:	88 23       	and	r24, r24
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <odometry_set_angle+0x12c>
    1e26:	86 cf       	rjmp	.-244    	; 0x1d34 <odometry_set_angle+0x38>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1e28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e2a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e2c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <odometry_wait_until_done>
}
    1e30:	6b 96       	adiw	r28, 0x1b	; 27
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	08 95       	ret

00001e42 <odometry_kurva>:

uint8_t odometry_kurva(uint16_t x_pos, uint16_t y_pos, int8_t angle, uint8_t direction, uint8_t speed, uint8_t (*callback)(uint32_t start_time))
{
    1e42:	ef 92       	push	r14
    1e44:	ff 92       	push	r15
    1e46:	0f 93       	push	r16
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	6f 97       	sbiw	r28, 0x1f	; 31
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	98 8f       	std	Y+24, r25	; 0x18
    1e5e:	8f 8b       	std	Y+23, r24	; 0x17
    1e60:	7a 8f       	std	Y+26, r23	; 0x1a
    1e62:	69 8f       	std	Y+25, r22	; 0x19
    1e64:	4b 8f       	std	Y+27, r20	; 0x1b
    1e66:	2c 8f       	std	Y+28, r18	; 0x1c
    1e68:	0d 8f       	std	Y+29, r16	; 0x1d
    1e6a:	ff 8e       	std	Y+31, r15	; 0x1f
    1e6c:	ee 8e       	std	Y+30, r14	; 0x1e
	uint8_t buffer[8];

	odometry_set_speed(speed);
    1e6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e70:	0e 94 6d 09 	call	0x12da	; 0x12da <odometry_set_speed>

	buffer[0] = 'Q';
    1e74:	81 e5       	ldi	r24, 0x51	; 81
    1e76:	8f 87       	std	Y+15, r24	; 0x0f
	buffer[1] = x_pos >> 8;
    1e78:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7c:	89 2f       	mov	r24, r25
    1e7e:	99 27       	eor	r25, r25
    1e80:	88 8b       	std	Y+16, r24	; 0x10
	buffer[2] = x_pos & 0xFF;
    1e82:	8f 89       	ldd	r24, Y+23	; 0x17
    1e84:	89 8b       	std	Y+17, r24	; 0x11
	buffer[3] = y_pos >> 8;
    1e86:	89 8d       	ldd	r24, Y+25	; 0x19
    1e88:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e8a:	89 2f       	mov	r24, r25
    1e8c:	99 27       	eor	r25, r25
    1e8e:	8a 8b       	std	Y+18, r24	; 0x12
	buffer[4] = y_pos & 0xFF;
    1e90:	89 8d       	ldd	r24, Y+25	; 0x19
    1e92:	8b 8b       	std	Y+19, r24	; 0x13
	buffer[5] = angle >> 8;
    1e94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e96:	08 2e       	mov	r0, r24
    1e98:	00 0c       	add	r0, r0
    1e9a:	99 0b       	sbc	r25, r25
    1e9c:	89 2f       	mov	r24, r25
    1e9e:	99 0f       	add	r25, r25
    1ea0:	99 0b       	sbc	r25, r25
    1ea2:	8c 8b       	std	Y+20, r24	; 0x14
	buffer[6] = angle & 0xFF;
    1ea4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ea6:	8d 8b       	std	Y+21, r24	; 0x15
	buffer[7] = direction;
    1ea8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1eaa:	8e 8b       	std	Y+22, r24	; 0x16

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1eac:	72 c0       	rjmp	.+228    	; 0x1f92 <odometry_kurva+0x150>
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	a8 e4       	ldi	r26, 0x48	; 72
    1eb4:	b2 e4       	ldi	r27, 0x42	; 66
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	9a 83       	std	Y+2, r25	; 0x02
    1eba:	ab 83       	std	Y+3, r26	; 0x03
    1ebc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e4       	ldi	r19, 0x40	; 64
    1ec2:	4c e1       	ldi	r20, 0x1C	; 28
    1ec4:	55 e4       	ldi	r21, 0x45	; 69
    1ec6:	69 81       	ldd	r22, Y+1	; 0x01
    1ec8:	7a 81       	ldd	r23, Y+2	; 0x02
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ece:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	8d 83       	std	Y+5, r24	; 0x05
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	af 83       	std	Y+7, r26	; 0x07
    1edc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e8       	ldi	r20, 0x80	; 128
    1ee4:	5f e3       	ldi	r21, 0x3F	; 63
    1ee6:	6d 81       	ldd	r22, Y+5	; 0x05
    1ee8:	7e 81       	ldd	r23, Y+6	; 0x06
    1eea:	8f 81       	ldd	r24, Y+7	; 0x07
    1eec:	98 85       	ldd	r25, Y+8	; 0x08
    1eee:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    1ef2:	88 23       	and	r24, r24
    1ef4:	2c f4       	brge	.+10     	; 0x1f00 <odometry_kurva+0xbe>
		__ticks = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9a 87       	std	Y+10, r25	; 0x0a
    1efc:	89 87       	std	Y+9, r24	; 0x09
    1efe:	3f c0       	rjmp	.+126    	; 0x1f7e <odometry_kurva+0x13c>
	else if (__tmp > 65535)
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	3f ef       	ldi	r19, 0xFF	; 255
    1f04:	4f e7       	ldi	r20, 0x7F	; 127
    1f06:	57 e4       	ldi	r21, 0x47	; 71
    1f08:	6d 81       	ldd	r22, Y+5	; 0x05
    1f0a:	7e 81       	ldd	r23, Y+6	; 0x06
    1f0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f0e:	98 85       	ldd	r25, Y+8	; 0x08
    1f10:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    1f14:	18 16       	cp	r1, r24
    1f16:	4c f5       	brge	.+82     	; 0x1f6a <odometry_kurva+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e2       	ldi	r20, 0x20	; 32
    1f1e:	51 e4       	ldi	r21, 0x41	; 65
    1f20:	69 81       	ldd	r22, Y+1	; 0x01
    1f22:	7a 81       	ldd	r23, Y+2	; 0x02
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	9c 81       	ldd	r25, Y+4	; 0x04
    1f28:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	9a 87       	std	Y+10, r25	; 0x0a
    1f3e:	89 87       	std	Y+9, r24	; 0x09
    1f40:	0f c0       	rjmp	.+30     	; 0x1f60 <odometry_kurva+0x11e>
    1f42:	8a ef       	ldi	r24, 0xFA	; 250
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	9c 87       	std	Y+12, r25	; 0x0c
    1f48:	8b 87       	std	Y+11, r24	; 0x0b
    1f4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <odometry_kurva+0x10c>
    1f52:	9c 87       	std	Y+12, r25	; 0x0c
    1f54:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f56:	89 85       	ldd	r24, Y+9	; 0x09
    1f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	9a 87       	std	Y+10, r25	; 0x0a
    1f5e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f60:	89 85       	ldd	r24, Y+9	; 0x09
    1f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f64:	89 2b       	or	r24, r25
    1f66:	69 f7       	brne	.-38     	; 0x1f42 <odometry_kurva+0x100>
    1f68:	14 c0       	rjmp	.+40     	; 0x1f92 <odometry_kurva+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6a:	6d 81       	ldd	r22, Y+5	; 0x05
    1f6c:	7e 81       	ldd	r23, Y+6	; 0x06
    1f6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f70:	98 85       	ldd	r25, Y+8	; 0x08
    1f72:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9a 87       	std	Y+10, r25	; 0x0a
    1f7c:	89 87       	std	Y+9, r24	; 0x09
    1f7e:	89 85       	ldd	r24, Y+9	; 0x09
    1f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f82:	9e 87       	std	Y+14, r25	; 0x0e
    1f84:	8d 87       	std	Y+13, r24	; 0x0d
    1f86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <odometry_kurva+0x148>
    1f8e:	9e 87       	std	Y+14, r25	; 0x0e
    1f90:	8d 87       	std	Y+13, r24	; 0x0d
    1f92:	ce 01       	movw	r24, r28
    1f94:	0f 96       	adiw	r24, 0x0f	; 15
    1f96:	63 ec       	ldi	r22, 0xC3	; 195
    1f98:	0e 94 2a 06 	call	0xc54	; 0xc54 <CAN_Write>
    1f9c:	88 23       	and	r24, r24
    1f9e:	09 f0       	breq	.+2      	; 0x1fa2 <odometry_kurva+0x160>
    1fa0:	86 cf       	rjmp	.-244    	; 0x1eae <odometry_kurva+0x6c>
		_delay_ms(50);

	return odometry_wait_until_done(callback);
    1fa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fa4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fa6:	0e 94 cb 0a 	call	0x1596	; 0x1596 <odometry_wait_until_done>
}
    1faa:	6f 96       	adiw	r28, 0x1f	; 31
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	0f 91       	pop	r16
    1fbc:	ff 90       	pop	r15
    1fbe:	ef 90       	pop	r14
    1fc0:	08 95       	ret

00001fc2 <odometry_match_end>:

void odometry_match_end()
{
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	66 97       	sbiw	r28, 0x16	; 22
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[8];

	buffer[0] = 'K';
    1fd6:	8b e4       	ldi	r24, 0x4B	; 75
    1fd8:	8f 87       	std	Y+15, r24	; 0x0f

	while(CAN_Write(buffer, DRIVER_TX_IDENTIFICATOR))
    1fda:	72 c0       	rjmp	.+228    	; 0x20c0 <odometry_match_end+0xfe>
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	a8 e4       	ldi	r26, 0x48	; 72
    1fe2:	b2 e4       	ldi	r27, 0x42	; 66
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	9a 83       	std	Y+2, r25	; 0x02
    1fe8:	ab 83       	std	Y+3, r26	; 0x03
    1fea:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e4       	ldi	r19, 0x40	; 64
    1ff0:	4c e1       	ldi	r20, 0x1C	; 28
    1ff2:	55 e4       	ldi	r21, 0x45	; 69
    1ff4:	69 81       	ldd	r22, Y+1	; 0x01
    1ff6:	7a 81       	ldd	r23, Y+2	; 0x02
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffc:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	8d 83       	std	Y+5, r24	; 0x05
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	af 83       	std	Y+7, r26	; 0x07
    200a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	6d 81       	ldd	r22, Y+5	; 0x05
    2016:	7e 81       	ldd	r23, Y+6	; 0x06
    2018:	8f 81       	ldd	r24, Y+7	; 0x07
    201a:	98 85       	ldd	r25, Y+8	; 0x08
    201c:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    2020:	88 23       	and	r24, r24
    2022:	2c f4       	brge	.+10     	; 0x202e <odometry_match_end+0x6c>
		__ticks = 1;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	9a 87       	std	Y+10, r25	; 0x0a
    202a:	89 87       	std	Y+9, r24	; 0x09
    202c:	3f c0       	rjmp	.+126    	; 0x20ac <odometry_match_end+0xea>
	else if (__tmp > 65535)
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	6d 81       	ldd	r22, Y+5	; 0x05
    2038:	7e 81       	ldd	r23, Y+6	; 0x06
    203a:	8f 81       	ldd	r24, Y+7	; 0x07
    203c:	98 85       	ldd	r25, Y+8	; 0x08
    203e:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    2042:	18 16       	cp	r1, r24
    2044:	4c f5       	brge	.+82     	; 0x2098 <odometry_match_end+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e2       	ldi	r20, 0x20	; 32
    204c:	51 e4       	ldi	r21, 0x41	; 65
    204e:	69 81       	ldd	r22, Y+1	; 0x01
    2050:	7a 81       	ldd	r23, Y+2	; 0x02
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	bc 01       	movw	r22, r24
    2060:	cd 01       	movw	r24, r26
    2062:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9a 87       	std	Y+10, r25	; 0x0a
    206c:	89 87       	std	Y+9, r24	; 0x09
    206e:	0f c0       	rjmp	.+30     	; 0x208e <odometry_match_end+0xcc>
    2070:	8a ef       	ldi	r24, 0xFA	; 250
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	9c 87       	std	Y+12, r25	; 0x0c
    2076:	8b 87       	std	Y+11, r24	; 0x0b
    2078:	8b 85       	ldd	r24, Y+11	; 0x0b
    207a:	9c 85       	ldd	r25, Y+12	; 0x0c
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <odometry_match_end+0xba>
    2080:	9c 87       	std	Y+12, r25	; 0x0c
    2082:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2084:	89 85       	ldd	r24, Y+9	; 0x09
    2086:	9a 85       	ldd	r25, Y+10	; 0x0a
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	9a 87       	std	Y+10, r25	; 0x0a
    208c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208e:	89 85       	ldd	r24, Y+9	; 0x09
    2090:	9a 85       	ldd	r25, Y+10	; 0x0a
    2092:	89 2b       	or	r24, r25
    2094:	69 f7       	brne	.-38     	; 0x2070 <odometry_match_end+0xae>
    2096:	14 c0       	rjmp	.+40     	; 0x20c0 <odometry_match_end+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2098:	6d 81       	ldd	r22, Y+5	; 0x05
    209a:	7e 81       	ldd	r23, Y+6	; 0x06
    209c:	8f 81       	ldd	r24, Y+7	; 0x07
    209e:	98 85       	ldd	r25, Y+8	; 0x08
    20a0:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	9a 87       	std	Y+10, r25	; 0x0a
    20aa:	89 87       	std	Y+9, r24	; 0x09
    20ac:	89 85       	ldd	r24, Y+9	; 0x09
    20ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b0:	9e 87       	std	Y+14, r25	; 0x0e
    20b2:	8d 87       	std	Y+13, r24	; 0x0d
    20b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <odometry_match_end+0xf6>
    20bc:	9e 87       	std	Y+14, r25	; 0x0e
    20be:	8d 87       	std	Y+13, r24	; 0x0d
    20c0:	ce 01       	movw	r24, r28
    20c2:	0f 96       	adiw	r24, 0x0f	; 15
    20c4:	63 ec       	ldi	r22, 0xC3	; 195
    20c6:	0e 94 2a 06 	call	0xc54	; 0xc54 <CAN_Write>
    20ca:	88 23       	and	r24, r24
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <odometry_match_end+0x10e>
    20ce:	86 cf       	rjmp	.-244    	; 0x1fdc <odometry_match_end+0x1a>
			_delay_ms(50);

}
    20d0:	66 96       	adiw	r28, 0x16	; 22
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	df 91       	pop	r29
    20de:	cf 91       	pop	r28
    20e0:	08 95       	ret

000020e2 <getState>:

/*
 * 	Update position
 */
uint8_t getState(void)
{
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    20ea:	0e 94 09 0a 	call	0x1412	; 0x1412 <odometry_query_position>
	return position.state;
    20ee:	80 91 15 01 	lds	r24, 0x0115
}
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	08 95       	ret

000020f8 <odometry_get_x>:

int16_t odometry_get_x(void)
{
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2100:	0e 94 09 0a 	call	0x1412	; 0x1412 <odometry_query_position>
	return position.x;
    2104:	80 91 0f 01 	lds	r24, 0x010F
    2108:	90 91 10 01 	lds	r25, 0x0110
}
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	08 95       	ret

00002112 <odometry_get_y>:

int16_t odometry_get_y(void)
{
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    211a:	0e 94 09 0a 	call	0x1412	; 0x1412 <odometry_query_position>
	return position.y;
    211e:	80 91 11 01 	lds	r24, 0x0111
    2122:	90 91 12 01 	lds	r25, 0x0112
}
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	08 95       	ret

0000212c <odometry_get_angle>:

int16_t odometry_get_angle(void)
{
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
	odometry_query_position();
    2134:	0e 94 09 0a 	call	0x1412	; 0x1412 <odometry_query_position>
	return position.angle;
    2138:	80 91 13 01 	lds	r24, 0x0113
    213c:	90 91 14 01 	lds	r25, 0x0114
}
    2140:	df 91       	pop	r29
    2142:	cf 91       	pop	r28
    2144:	08 95       	ret

00002146 <sensor_fr>:

/*
 * 	Function: 	 All front sensors individually
 * 	Description: Returns a 1 when detected
 */
char sensor_fr() {
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62

	if(gpio_read_pin(SENSOR_FR_PIN) == SENSOR_FR_TRIG) {
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	0e 94 9d 08 	call	0x113a	; 0x113a <gpio_read_pin>
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	29 f4       	brne	.+10     	; 0x2162 <sensor_fr+0x1c>
		odometry_stop(HARD_STOP);
    2158:	83 e5       	ldi	r24, 0x53	; 83
    215a:	0e 94 02 0b 	call	0x1604	; 0x1604 <odometry_stop>
		return 1;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	01 c0       	rjmp	.+2      	; 0x2164 <sensor_fr+0x1e>
	}

	return 0;
    2162:	80 e0       	ldi	r24, 0x00	; 0
}
    2164:	df 91       	pop	r29
    2166:	cf 91       	pop	r28
    2168:	08 95       	ret

0000216a <sensor_fl>:

char sensor_fl() {
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62

	if(gpio_read_pin(SENSOR_FL_PIN) == SENSOR_FL_TRIG) {
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	0e 94 9d 08 	call	0x113a	; 0x113a <gpio_read_pin>
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	11 f4       	brne	.+4      	; 0x2180 <sensor_fl+0x16>
		//odometry_stop(HARD_STOP);
		return 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	01 c0       	rjmp	.+2      	; 0x2182 <sensor_fl+0x18>
	}

	return 0;
    2180:	80 e0       	ldi	r24, 0x00	; 0
}
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	08 95       	ret

00002188 <sensor_fc>:

char sensor_fc() {
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
	#ifdef BIG_ROBOT
	if(gpio_read_pin(SENSOR_FC_PIN) == SENSOR_FC_TRIG) {
    2190:	84 e0       	ldi	r24, 0x04	; 4
    2192:	0e 94 9d 08 	call	0x113a	; 0x113a <gpio_read_pin>
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	11 f4       	brne	.+4      	; 0x219e <sensor_fc+0x16>
		//odometry_stop(HARD_STOP);
		return 1;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	01 c0       	rjmp	.+2      	; 0x21a0 <sensor_fc+0x18>
	}
	#endif

	return 0;
    219e:	80 e0       	ldi	r24, 0x00	; 0
}
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	08 95       	ret

000021a6 <sensor_br>:

/*
 * 	Function: 	 All back sensors individually
 * 	Description: Returns a 1 when detected
 */
char sensor_br() {
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62

	if(gpio_read_pin(SENSOR_BR_PIN) == SENSOR_BR_TRIG) {
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	0e 94 9d 08 	call	0x113a	; 0x113a <gpio_read_pin>
    21b4:	81 30       	cpi	r24, 0x01	; 1
    21b6:	29 f4       	brne	.+10     	; 0x21c2 <sensor_br+0x1c>
		odometry_stop(HARD_STOP);
    21b8:	83 e5       	ldi	r24, 0x53	; 83
    21ba:	0e 94 02 0b 	call	0x1604	; 0x1604 <odometry_stop>
		return 1;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	01 c0       	rjmp	.+2      	; 0x21c4 <sensor_br+0x1e>
	}

	return 0;
    21c2:	80 e0       	ldi	r24, 0x00	; 0
}
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	08 95       	ret

000021ca <sensor_bl>:

char sensor_bl() {
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62

	if(gpio_read_pin(SENSOR_BL_PIN) == SENSOR_BL_TRIG) {
    21d2:	83 e0       	ldi	r24, 0x03	; 3
    21d4:	0e 94 9d 08 	call	0x113a	; 0x113a <gpio_read_pin>
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	29 f4       	brne	.+10     	; 0x21e6 <sensor_bl+0x1c>
		odometry_stop(HARD_STOP);
    21dc:	83 e5       	ldi	r24, 0x53	; 83
    21de:	0e 94 02 0b 	call	0x1604	; 0x1604 <odometry_stop>
		return 1;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	01 c0       	rjmp	.+2      	; 0x21e8 <sensor_bl+0x1e>
	}

	return 0;
    21e6:	80 e0       	ldi	r24, 0x00	; 0
}
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	08 95       	ret

000021ee <sensor_bc>:


char sensor_bc() {
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
	#ifdef BIG_ROBOT
	if(gpio_read_pin(SENSOR_BC_PIN) == SENSOR_BC_TRIG) {
    21f6:	85 e0       	ldi	r24, 0x05	; 5
    21f8:	0e 94 9d 08 	call	0x113a	; 0x113a <gpio_read_pin>
    21fc:	81 30       	cpi	r24, 0x01	; 1
    21fe:	29 f4       	brne	.+10     	; 0x220a <sensor_bc+0x1c>
		odometry_stop(HARD_STOP);
    2200:	83 e5       	ldi	r24, 0x53	; 83
    2202:	0e 94 02 0b 	call	0x1604	; 0x1604 <odometry_stop>
		return 1;
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	01 c0       	rjmp	.+2      	; 0x220c <sensor_bc+0x1e>
	}
	#endif

	return 0;
    220a:	80 e0       	ldi	r24, 0x00	; 0
}
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	08 95       	ret

00002212 <sensor_all_front>:

/*
 * 	Combination functions
 */

char sensor_all_front() {
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
	#ifdef BIG_ROBOT
		if(sensor_fc() || sensor_fl() || sensor_fc()) {
    221a:	0e 94 c4 10 	call	0x2188	; 0x2188 <sensor_fc>
    221e:	88 23       	and	r24, r24
    2220:	41 f4       	brne	.+16     	; 0x2232 <sensor_all_front+0x20>
    2222:	0e 94 b5 10 	call	0x216a	; 0x216a <sensor_fl>
    2226:	88 23       	and	r24, r24
    2228:	21 f4       	brne	.+8      	; 0x2232 <sensor_all_front+0x20>
    222a:	0e 94 c4 10 	call	0x2188	; 0x2188 <sensor_fc>
    222e:	88 23       	and	r24, r24
    2230:	11 f0       	breq	.+4      	; 0x2236 <sensor_all_front+0x24>
			return 1;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	01 c0       	rjmp	.+2      	; 0x2238 <sensor_all_front+0x26>
		if(sensor_fc() || sensor_fl()) {
			return 1;
		}
	#endif

	return 0;
    2236:	80 e0       	ldi	r24, 0x00	; 0
}
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	08 95       	ret

0000223e <sensor_all_back>:

char sensor_all_back() {
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
	#ifdef BIG_ROBOT
		if(sensor_bc() || sensor_bl() || sensor_bc()) {
    2246:	0e 94 f7 10 	call	0x21ee	; 0x21ee <sensor_bc>
    224a:	88 23       	and	r24, r24
    224c:	41 f4       	brne	.+16     	; 0x225e <sensor_all_back+0x20>
    224e:	0e 94 e5 10 	call	0x21ca	; 0x21ca <sensor_bl>
    2252:	88 23       	and	r24, r24
    2254:	21 f4       	brne	.+8      	; 0x225e <sensor_all_back+0x20>
    2256:	0e 94 f7 10 	call	0x21ee	; 0x21ee <sensor_bc>
    225a:	88 23       	and	r24, r24
    225c:	11 f0       	breq	.+4      	; 0x2262 <sensor_all_back+0x24>
			return 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	01 c0       	rjmp	.+2      	; 0x2264 <sensor_all_back+0x26>
		if(sensor_bc() || sensor_bl()) {
			return 1;
		}
	#endif

	return 0;
    2262:	80 e0       	ldi	r24, 0x00	; 0
}
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	08 95       	ret

0000226a <timer_register_callback>:
 *	Function: 		void timer_register_callback(void (*callback)(void))
 *	Parameters: 	void (*callback)(void))
 *	Description: 	timer callbacks
 */
void timer_register_callback(void (*callback)(void))
{
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	00 d0       	rcall	.+0      	; 0x2270 <timer_register_callback+0x6>
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	89 83       	std	Y+1, r24	; 0x01
    timer_callback = callback;
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	90 93 6b 01 	sts	0x016B, r25
    2280:	80 93 6a 01 	sts	0x016A, r24
}
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	08 95       	ret

0000228e <timer_init>:
 *	Function: 		void timer_init(unsigned int freq)
 *	Parameters: 	unsigned int freq - frequency of timer
 *	Description: 	setup timer
 */
void timer_init(unsigned int freq)
{
    228e:	0f 93       	push	r16
    2290:	1f 93       	push	r17
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	00 d0       	rcall	.+0      	; 0x2298 <timer_init+0xa>
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	9a 83       	std	Y+2, r25	; 0x02
    229e:	89 83       	std	Y+1, r24	; 0x01

    TCCR1A = 0;
    22a0:	80 e8       	ldi	r24, 0x80	; 128
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	fc 01       	movw	r30, r24
    22a6:	10 82       	st	Z, r1
	TCCR1B = (1 << WGM12) | (1 << CS10);
    22a8:	81 e8       	ldi	r24, 0x81	; 129
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	29 e0       	ldi	r18, 0x09	; 9
    22ae:	fc 01       	movw	r30, r24
    22b0:	20 83       	st	Z, r18
	OCR1A = (double)F_CPU / (double)freq + 0.5;
    22b2:	08 e8       	ldi	r16, 0x88	; 136
    22b4:	10 e0       	ldi	r17, 0x00	; 0
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	cc 01       	movw	r24, r24
    22bc:	a0 e0       	ldi	r26, 0x00	; 0
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__floatunsisf>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9c 01       	movw	r18, r24
    22ce:	ad 01       	movw	r20, r26
    22d0:	60 e8       	ldi	r22, 0x80	; 128
    22d2:	76 e9       	ldi	r23, 0x96	; 150
    22d4:	88 e1       	ldi	r24, 0x18	; 24
    22d6:	9b e4       	ldi	r25, 0x4B	; 75
    22d8:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <__divsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	5f e3       	ldi	r21, 0x3F	; 63
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__addsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	f8 01       	movw	r30, r16
    2302:	91 83       	std	Z+1, r25	; 0x01
    2304:	80 83       	st	Z, r24
	TIMSK1 = 1 << OCIE1A;
    2306:	8f e6       	ldi	r24, 0x6F	; 111
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	22 e0       	ldi	r18, 0x02	; 2
    230c:	fc 01       	movw	r30, r24
    230e:	20 83       	st	Z, r18

	SREG |= 0x80;
    2310:	8f e5       	ldi	r24, 0x5F	; 95
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	2f e5       	ldi	r18, 0x5F	; 95
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	f9 01       	movw	r30, r18
    231a:	20 81       	ld	r18, Z
    231c:	20 68       	ori	r18, 0x80	; 128
    231e:	fc 01       	movw	r30, r24
    2320:	20 83       	st	Z, r18
}
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	df 91       	pop	r29
    2328:	cf 91       	pop	r28
    232a:	1f 91       	pop	r17
    232c:	0f 91       	pop	r16
    232e:	08 95       	ret

00002330 <__vector_12>:
/*
 *	Function: 		ISR(TIMER1_COMPA_vect)
 *	Description: 	ISR interrupt for timer
 */
ISR(TIMER1_COMPA_vect)
{
    2330:	1f 92       	push	r1
    2332:	0f 92       	push	r0
    2334:	00 90 5f 00 	lds	r0, 0x005F
    2338:	0f 92       	push	r0
    233a:	11 24       	eor	r1, r1
    233c:	00 90 5b 00 	lds	r0, 0x005B
    2340:	0f 92       	push	r0
    2342:	2f 93       	push	r18
    2344:	3f 93       	push	r19
    2346:	4f 93       	push	r20
    2348:	5f 93       	push	r21
    234a:	6f 93       	push	r22
    234c:	7f 93       	push	r23
    234e:	8f 93       	push	r24
    2350:	9f 93       	push	r25
    2352:	af 93       	push	r26
    2354:	bf 93       	push	r27
    2356:	ef 93       	push	r30
    2358:	ff 93       	push	r31
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	62 97       	sbiw	r28, 0x12	; 18
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	cd bf       	out	0x3d, r28	; 61
    if(timer_callback != NULL)
    2368:	80 91 6a 01 	lds	r24, 0x016A
    236c:	90 91 6b 01 	lds	r25, 0x016B
    2370:	89 2b       	or	r24, r25
    2372:	31 f0       	breq	.+12     	; 0x2380 <__vector_12+0x50>
        timer_callback();
    2374:	80 91 6a 01 	lds	r24, 0x016A
    2378:	90 91 6b 01 	lds	r25, 0x016B
    237c:	fc 01       	movw	r30, r24
    237e:	09 95       	icall

	if(sys_time >= 90000)					// if match end
    2380:	80 91 65 01 	lds	r24, 0x0165
    2384:	90 91 66 01 	lds	r25, 0x0166
    2388:	a0 91 67 01 	lds	r26, 0x0167
    238c:	b0 91 68 01 	lds	r27, 0x0168
    2390:	80 39       	cpi	r24, 0x90	; 144
    2392:	9f 45       	sbci	r25, 0x5F	; 95
    2394:	a1 40       	sbci	r26, 0x01	; 1
    2396:	b1 05       	cpc	r27, r1
    2398:	08 f4       	brcc	.+2      	; 0x239c <__vector_12+0x6c>
    239a:	7c c0       	rjmp	.+248    	; 0x2494 <__vector_12+0x164>
	{
		if(system_get_match_started())		// if the match has started before
    239c:	0e 94 c0 12 	call	0x2580	; 0x2580 <system_get_match_started>
    23a0:	88 23       	and	r24, r24
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <__vector_12+0x76>
    23a4:	77 c0       	rjmp	.+238    	; 0x2494 <__vector_12+0x164>
		{
			odometry_match_end();
    23a6:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <odometry_match_end>
			while(1) {
				flip_debug_led();
    23aa:	0e 94 11 14 	call	0x2822	; 0x2822 <flip_debug_led>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	aa e7       	ldi	r26, 0x7A	; 122
    23b4:	b4 e4       	ldi	r27, 0x44	; 68
    23b6:	89 83       	std	Y+1, r24	; 0x01
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	ab 83       	std	Y+3, r26	; 0x03
    23bc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e4       	ldi	r19, 0x40	; 64
    23c2:	4c e1       	ldi	r20, 0x1C	; 28
    23c4:	55 e4       	ldi	r21, 0x45	; 69
    23c6:	69 81       	ldd	r22, Y+1	; 0x01
    23c8:	7a 81       	ldd	r23, Y+2	; 0x02
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	9c 81       	ldd	r25, Y+4	; 0x04
    23ce:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8d 83       	std	Y+5, r24	; 0x05
    23d8:	9e 83       	std	Y+6, r25	; 0x06
    23da:	af 83       	std	Y+7, r26	; 0x07
    23dc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e8       	ldi	r20, 0x80	; 128
    23e4:	5f e3       	ldi	r21, 0x3F	; 63
    23e6:	6d 81       	ldd	r22, Y+5	; 0x05
    23e8:	7e 81       	ldd	r23, Y+6	; 0x06
    23ea:	8f 81       	ldd	r24, Y+7	; 0x07
    23ec:	98 85       	ldd	r25, Y+8	; 0x08
    23ee:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    23f2:	88 23       	and	r24, r24
    23f4:	2c f4       	brge	.+10     	; 0x2400 <__vector_12+0xd0>
		__ticks = 1;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9a 87       	std	Y+10, r25	; 0x0a
    23fc:	89 87       	std	Y+9, r24	; 0x09
    23fe:	3f c0       	rjmp	.+126    	; 0x247e <__vector_12+0x14e>
	else if (__tmp > 65535)
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	3f ef       	ldi	r19, 0xFF	; 255
    2404:	4f e7       	ldi	r20, 0x7F	; 127
    2406:	57 e4       	ldi	r21, 0x47	; 71
    2408:	6d 81       	ldd	r22, Y+5	; 0x05
    240a:	7e 81       	ldd	r23, Y+6	; 0x06
    240c:	8f 81       	ldd	r24, Y+7	; 0x07
    240e:	98 85       	ldd	r25, Y+8	; 0x08
    2410:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    2414:	18 16       	cp	r1, r24
    2416:	4c f5       	brge	.+82     	; 0x246a <__vector_12+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e2       	ldi	r20, 0x20	; 32
    241e:	51 e4       	ldi	r21, 0x41	; 65
    2420:	69 81       	ldd	r22, Y+1	; 0x01
    2422:	7a 81       	ldd	r23, Y+2	; 0x02
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	bc 01       	movw	r22, r24
    2432:	cd 01       	movw	r24, r26
    2434:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	9a 87       	std	Y+10, r25	; 0x0a
    243e:	89 87       	std	Y+9, r24	; 0x09
    2440:	0f c0       	rjmp	.+30     	; 0x2460 <__vector_12+0x130>
    2442:	8a ef       	ldi	r24, 0xFA	; 250
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9c 87       	std	Y+12, r25	; 0x0c
    2448:	8b 87       	std	Y+11, r24	; 0x0b
    244a:	8b 85       	ldd	r24, Y+11	; 0x0b
    244c:	9c 85       	ldd	r25, Y+12	; 0x0c
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <__vector_12+0x11e>
    2452:	9c 87       	std	Y+12, r25	; 0x0c
    2454:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2456:	89 85       	ldd	r24, Y+9	; 0x09
    2458:	9a 85       	ldd	r25, Y+10	; 0x0a
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	9a 87       	std	Y+10, r25	; 0x0a
    245e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2460:	89 85       	ldd	r24, Y+9	; 0x09
    2462:	9a 85       	ldd	r25, Y+10	; 0x0a
    2464:	89 2b       	or	r24, r25
    2466:	69 f7       	brne	.-38     	; 0x2442 <__vector_12+0x112>
    2468:	14 c0       	rjmp	.+40     	; 0x2492 <__vector_12+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246a:	6d 81       	ldd	r22, Y+5	; 0x05
    246c:	7e 81       	ldd	r23, Y+6	; 0x06
    246e:	8f 81       	ldd	r24, Y+7	; 0x07
    2470:	98 85       	ldd	r25, Y+8	; 0x08
    2472:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	9a 87       	std	Y+10, r25	; 0x0a
    247c:	89 87       	std	Y+9, r24	; 0x09
    247e:	89 85       	ldd	r24, Y+9	; 0x09
    2480:	9a 85       	ldd	r25, Y+10	; 0x0a
    2482:	9e 87       	std	Y+14, r25	; 0x0e
    2484:	8d 87       	std	Y+13, r24	; 0x0d
    2486:	8d 85       	ldd	r24, Y+13	; 0x0d
    2488:	9e 85       	ldd	r25, Y+14	; 0x0e
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <__vector_12+0x15a>
    248e:	9e 87       	std	Y+14, r25	; 0x0e
    2490:	8d 87       	std	Y+13, r24	; 0x0d
				_delay_ms(1000);
			}
    2492:	8b cf       	rjmp	.-234    	; 0x23aa <__vector_12+0x7a>
		}
	}

	// for testing if the timer is working
	if((sys_time % 1000) == 0 && !setup_complete) {
    2494:	80 91 65 01 	lds	r24, 0x0165
    2498:	90 91 66 01 	lds	r25, 0x0166
    249c:	a0 91 67 01 	lds	r26, 0x0167
    24a0:	b0 91 68 01 	lds	r27, 0x0168
    24a4:	28 ee       	ldi	r18, 0xE8	; 232
    24a6:	33 e0       	ldi	r19, 0x03	; 3
    24a8:	40 e0       	ldi	r20, 0x00	; 0
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	bc 01       	movw	r22, r24
    24ae:	cd 01       	movw	r24, r26
    24b0:	0e 94 91 1c 	call	0x3922	; 0x3922 <__udivmodsi4>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	89 2b       	or	r24, r25
    24ba:	8a 2b       	or	r24, r26
    24bc:	8b 2b       	or	r24, r27
    24be:	31 f4       	brne	.+12     	; 0x24cc <__vector_12+0x19c>
    24c0:	80 91 6f 01 	lds	r24, 0x016F
    24c4:	88 23       	and	r24, r24
    24c6:	11 f4       	brne	.+4      	; 0x24cc <__vector_12+0x19c>

		flip_debug_led();
    24c8:	0e 94 11 14 	call	0x2822	; 0x2822 <flip_debug_led>
	}

	sys_time++;
    24cc:	80 91 65 01 	lds	r24, 0x0165
    24d0:	90 91 66 01 	lds	r25, 0x0166
    24d4:	a0 91 67 01 	lds	r26, 0x0167
    24d8:	b0 91 68 01 	lds	r27, 0x0168
    24dc:	01 96       	adiw	r24, 0x01	; 1
    24de:	a1 1d       	adc	r26, r1
    24e0:	b1 1d       	adc	r27, r1
    24e2:	80 93 65 01 	sts	0x0165, r24
    24e6:	90 93 66 01 	sts	0x0166, r25
    24ea:	a0 93 67 01 	sts	0x0167, r26
    24ee:	b0 93 68 01 	sts	0x0168, r27

}
    24f2:	62 96       	adiw	r28, 0x12	; 18
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	ff 91       	pop	r31
    2504:	ef 91       	pop	r30
    2506:	bf 91       	pop	r27
    2508:	af 91       	pop	r26
    250a:	9f 91       	pop	r25
    250c:	8f 91       	pop	r24
    250e:	7f 91       	pop	r23
    2510:	6f 91       	pop	r22
    2512:	5f 91       	pop	r21
    2514:	4f 91       	pop	r20
    2516:	3f 91       	pop	r19
    2518:	2f 91       	pop	r18
    251a:	0f 90       	pop	r0
    251c:	00 92 5b 00 	sts	0x005B, r0
    2520:	0f 90       	pop	r0
    2522:	00 92 5f 00 	sts	0x005F, r0
    2526:	0f 90       	pop	r0
    2528:	1f 90       	pop	r1
    252a:	18 95       	reti

0000252c <system_reset_system_time>:

void system_reset_system_time(void) 	{ 	sys_time = 0; 			}
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	10 92 65 01 	sts	0x0165, r1
    2538:	10 92 66 01 	sts	0x0166, r1
    253c:	10 92 67 01 	sts	0x0167, r1
    2540:	10 92 68 01 	sts	0x0168, r1
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	08 95       	ret

0000254a <system_set_match_started>:
void system_set_match_started(void) 	{ 	match_started = 1; 		}
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	80 93 69 01 	sts	0x0169, r24
    2558:	df 91       	pop	r29
    255a:	cf 91       	pop	r28
    255c:	08 95       	ret

0000255e <system_get_system_time>:
uint32_t system_get_system_time(void) 	{ 	return sys_time; 		}
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	80 91 65 01 	lds	r24, 0x0165
    256a:	90 91 66 01 	lds	r25, 0x0166
    256e:	a0 91 67 01 	lds	r26, 0x0167
    2572:	b0 91 68 01 	lds	r27, 0x0168
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	08 95       	ret

00002580 <system_get_match_started>:
uint8_t system_get_match_started(void) 	{ 	return match_started; 	}
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	80 91 69 01 	lds	r24, 0x0169
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	08 95       	ret

00002592 <__vector_8>:


ISR(INT7_vect) {
    2592:	1f 92       	push	r1
    2594:	0f 92       	push	r0
    2596:	00 90 5f 00 	lds	r0, 0x005F
    259a:	0f 92       	push	r0
    259c:	11 24       	eor	r1, r1
    259e:	8f 93       	push	r24
    25a0:	cf 93       	push	r28
    25a2:	df 93       	push	r29
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
	jumper_pulled = true;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	80 93 6e 01 	sts	0x016E, r24
}
    25ae:	df 91       	pop	r29
    25b0:	cf 91       	pop	r28
    25b2:	8f 91       	pop	r24
    25b4:	0f 90       	pop	r0
    25b6:	00 92 5f 00 	sts	0x005F, r0
    25ba:	0f 90       	pop	r0
    25bc:	1f 90       	pop	r1
    25be:	18 95       	reti

000025c0 <system_setup_jumper>:

static void system_setup_jumper() {
    25c0:	cf 93       	push	r28
    25c2:	df 93       	push	r29
    25c4:	cd b7       	in	r28, 0x3d	; 61
    25c6:	de b7       	in	r29, 0x3e	; 62
    25c8:	2e 97       	sbiw	r28, 0x0e	; 14
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61

	DDRE &= ~(1 << PIN7);			// setup pin as input
    25d4:	8d e2       	ldi	r24, 0x2D	; 45
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	2d e2       	ldi	r18, 0x2D	; 45
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	f9 01       	movw	r30, r18
    25de:	20 81       	ld	r18, Z
    25e0:	2f 77       	andi	r18, 0x7F	; 127
    25e2:	fc 01       	movw	r30, r24
    25e4:	20 83       	st	Z, r18

	PORTE |= (1 << PIN7);			// pullup
    25e6:	8e e2       	ldi	r24, 0x2E	; 46
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	2e e2       	ldi	r18, 0x2E	; 46
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	f9 01       	movw	r30, r18
    25f0:	20 81       	ld	r18, Z
    25f2:	20 68       	ori	r18, 0x80	; 128
    25f4:	fc 01       	movw	r30, r24
    25f6:	20 83       	st	Z, r18

	EICRB = (1 << ISC70);			// set on status change to triggure interrupt
    25f8:	8a e6       	ldi	r24, 0x6A	; 106
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	20 e4       	ldi	r18, 0x40	; 64
    25fe:	fc 01       	movw	r30, r24
    2600:	20 83       	st	Z, r18

	EIMSK |= (1 << INT7);			// enable interrupt
    2602:	8d e3       	ldi	r24, 0x3D	; 61
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	2d e3       	ldi	r18, 0x3D	; 61
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	f9 01       	movw	r30, r18
    260c:	20 81       	ld	r18, Z
    260e:	20 68       	ori	r18, 0x80	; 128
    2610:	fc 01       	movw	r30, r24
    2612:	20 83       	st	Z, r18
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	a8 ec       	ldi	r26, 0xC8	; 200
    261a:	b2 e4       	ldi	r27, 0x42	; 66
    261c:	89 83       	std	Y+1, r24	; 0x01
    261e:	9a 83       	std	Y+2, r25	; 0x02
    2620:	ab 83       	std	Y+3, r26	; 0x03
    2622:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e4       	ldi	r19, 0x40	; 64
    2628:	4c e1       	ldi	r20, 0x1C	; 28
    262a:	55 e4       	ldi	r21, 0x45	; 69
    262c:	69 81       	ldd	r22, Y+1	; 0x01
    262e:	7a 81       	ldd	r23, Y+2	; 0x02
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	9c 81       	ldd	r25, Y+4	; 0x04
    2634:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	8d 83       	std	Y+5, r24	; 0x05
    263e:	9e 83       	std	Y+6, r25	; 0x06
    2640:	af 83       	std	Y+7, r26	; 0x07
    2642:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e8       	ldi	r20, 0x80	; 128
    264a:	5f e3       	ldi	r21, 0x3F	; 63
    264c:	6d 81       	ldd	r22, Y+5	; 0x05
    264e:	7e 81       	ldd	r23, Y+6	; 0x06
    2650:	8f 81       	ldd	r24, Y+7	; 0x07
    2652:	98 85       	ldd	r25, Y+8	; 0x08
    2654:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    2658:	88 23       	and	r24, r24
    265a:	2c f4       	brge	.+10     	; 0x2666 <system_setup_jumper+0xa6>
		__ticks = 1;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	9a 87       	std	Y+10, r25	; 0x0a
    2662:	89 87       	std	Y+9, r24	; 0x09
    2664:	3f c0       	rjmp	.+126    	; 0x26e4 <system_setup_jumper+0x124>
	else if (__tmp > 65535)
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	3f ef       	ldi	r19, 0xFF	; 255
    266a:	4f e7       	ldi	r20, 0x7F	; 127
    266c:	57 e4       	ldi	r21, 0x47	; 71
    266e:	6d 81       	ldd	r22, Y+5	; 0x05
    2670:	7e 81       	ldd	r23, Y+6	; 0x06
    2672:	8f 81       	ldd	r24, Y+7	; 0x07
    2674:	98 85       	ldd	r25, Y+8	; 0x08
    2676:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    267a:	18 16       	cp	r1, r24
    267c:	4c f5       	brge	.+82     	; 0x26d0 <system_setup_jumper+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e2       	ldi	r20, 0x20	; 32
    2684:	51 e4       	ldi	r21, 0x41	; 65
    2686:	69 81       	ldd	r22, Y+1	; 0x01
    2688:	7a 81       	ldd	r23, Y+2	; 0x02
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	9c 81       	ldd	r25, Y+4	; 0x04
    268e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	bc 01       	movw	r22, r24
    2698:	cd 01       	movw	r24, r26
    269a:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	9a 87       	std	Y+10, r25	; 0x0a
    26a4:	89 87       	std	Y+9, r24	; 0x09
    26a6:	0f c0       	rjmp	.+30     	; 0x26c6 <system_setup_jumper+0x106>
    26a8:	8a ef       	ldi	r24, 0xFA	; 250
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	9c 87       	std	Y+12, r25	; 0x0c
    26ae:	8b 87       	std	Y+11, r24	; 0x0b
    26b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    26b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <system_setup_jumper+0xf4>
    26b8:	9c 87       	std	Y+12, r25	; 0x0c
    26ba:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26bc:	89 85       	ldd	r24, Y+9	; 0x09
    26be:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	9a 87       	std	Y+10, r25	; 0x0a
    26c4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c6:	89 85       	ldd	r24, Y+9	; 0x09
    26c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ca:	89 2b       	or	r24, r25
    26cc:	69 f7       	brne	.-38     	; 0x26a8 <system_setup_jumper+0xe8>
    26ce:	14 c0       	rjmp	.+40     	; 0x26f8 <system_setup_jumper+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d0:	6d 81       	ldd	r22, Y+5	; 0x05
    26d2:	7e 81       	ldd	r23, Y+6	; 0x06
    26d4:	8f 81       	ldd	r24, Y+7	; 0x07
    26d6:	98 85       	ldd	r25, Y+8	; 0x08
    26d8:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9a 87       	std	Y+10, r25	; 0x0a
    26e2:	89 87       	std	Y+9, r24	; 0x09
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	9e 87       	std	Y+14, r25	; 0x0e
    26ea:	8d 87       	std	Y+13, r24	; 0x0d
    26ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <system_setup_jumper+0x130>
    26f4:	9e 87       	std	Y+14, r25	; 0x0e
    26f6:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(100);

	sei();							// enable global interrupts
    26f8:	78 94       	sei
}
    26fa:	2e 96       	adiw	r28, 0x0e	; 14
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	08 95       	ret

0000270c <system_wait_for_jumper>:

static void system_wait_for_jumper() {
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	2e 97       	sbiw	r28, 0x0e	; 14
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61

	while(jumper_pulled == false)		// wait for jumper_pulled t be set true
    2720:	72 c0       	rjmp	.+228    	; 0x2806 <system_wait_for_jumper+0xfa>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	a0 e2       	ldi	r26, 0x20	; 32
    2728:	b1 e4       	ldi	r27, 0x41	; 65
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	9a 83       	std	Y+2, r25	; 0x02
    272e:	ab 83       	std	Y+3, r26	; 0x03
    2730:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e4       	ldi	r19, 0x40	; 64
    2736:	4c e1       	ldi	r20, 0x1C	; 28
    2738:	55 e4       	ldi	r21, 0x45	; 69
    273a:	69 81       	ldd	r22, Y+1	; 0x01
    273c:	7a 81       	ldd	r23, Y+2	; 0x02
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	9c 81       	ldd	r25, Y+4	; 0x04
    2742:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	8d 83       	std	Y+5, r24	; 0x05
    274c:	9e 83       	std	Y+6, r25	; 0x06
    274e:	af 83       	std	Y+7, r26	; 0x07
    2750:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e8       	ldi	r20, 0x80	; 128
    2758:	5f e3       	ldi	r21, 0x3F	; 63
    275a:	6d 81       	ldd	r22, Y+5	; 0x05
    275c:	7e 81       	ldd	r23, Y+6	; 0x06
    275e:	8f 81       	ldd	r24, Y+7	; 0x07
    2760:	98 85       	ldd	r25, Y+8	; 0x08
    2762:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    2766:	88 23       	and	r24, r24
    2768:	2c f4       	brge	.+10     	; 0x2774 <system_wait_for_jumper+0x68>
		__ticks = 1;
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	9a 87       	std	Y+10, r25	; 0x0a
    2770:	89 87       	std	Y+9, r24	; 0x09
    2772:	3f c0       	rjmp	.+126    	; 0x27f2 <system_wait_for_jumper+0xe6>
	else if (__tmp > 65535)
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	3f ef       	ldi	r19, 0xFF	; 255
    2778:	4f e7       	ldi	r20, 0x7F	; 127
    277a:	57 e4       	ldi	r21, 0x47	; 71
    277c:	6d 81       	ldd	r22, Y+5	; 0x05
    277e:	7e 81       	ldd	r23, Y+6	; 0x06
    2780:	8f 81       	ldd	r24, Y+7	; 0x07
    2782:	98 85       	ldd	r25, Y+8	; 0x08
    2784:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    2788:	18 16       	cp	r1, r24
    278a:	4c f5       	brge	.+82     	; 0x27de <system_wait_for_jumper+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e2       	ldi	r20, 0x20	; 32
    2792:	51 e4       	ldi	r21, 0x41	; 65
    2794:	69 81       	ldd	r22, Y+1	; 0x01
    2796:	7a 81       	ldd	r23, Y+2	; 0x02
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	9c 81       	ldd	r25, Y+4	; 0x04
    279c:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	bc 01       	movw	r22, r24
    27a6:	cd 01       	movw	r24, r26
    27a8:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9a 87       	std	Y+10, r25	; 0x0a
    27b2:	89 87       	std	Y+9, r24	; 0x09
    27b4:	0f c0       	rjmp	.+30     	; 0x27d4 <system_wait_for_jumper+0xc8>
    27b6:	8a ef       	ldi	r24, 0xFA	; 250
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	9c 87       	std	Y+12, r25	; 0x0c
    27bc:	8b 87       	std	Y+11, r24	; 0x0b
    27be:	8b 85       	ldd	r24, Y+11	; 0x0b
    27c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <system_wait_for_jumper+0xb6>
    27c6:	9c 87       	std	Y+12, r25	; 0x0c
    27c8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ca:	89 85       	ldd	r24, Y+9	; 0x09
    27cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	9a 87       	std	Y+10, r25	; 0x0a
    27d2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d4:	89 85       	ldd	r24, Y+9	; 0x09
    27d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d8:	89 2b       	or	r24, r25
    27da:	69 f7       	brne	.-38     	; 0x27b6 <system_wait_for_jumper+0xaa>
    27dc:	14 c0       	rjmp	.+40     	; 0x2806 <system_wait_for_jumper+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27de:	6d 81       	ldd	r22, Y+5	; 0x05
    27e0:	7e 81       	ldd	r23, Y+6	; 0x06
    27e2:	8f 81       	ldd	r24, Y+7	; 0x07
    27e4:	98 85       	ldd	r25, Y+8	; 0x08
    27e6:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	9a 87       	std	Y+10, r25	; 0x0a
    27f0:	89 87       	std	Y+9, r24	; 0x09
    27f2:	89 85       	ldd	r24, Y+9	; 0x09
    27f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f6:	9e 87       	std	Y+14, r25	; 0x0e
    27f8:	8d 87       	std	Y+13, r24	; 0x0d
    27fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	f1 f7       	brne	.-4      	; 0x27fe <system_wait_for_jumper+0xf2>
    2802:	9e 87       	std	Y+14, r25	; 0x0e
    2804:	8d 87       	std	Y+13, r24	; 0x0d
    2806:	80 91 6e 01 	lds	r24, 0x016E
    280a:	88 23       	and	r24, r24
    280c:	09 f4       	brne	.+2      	; 0x2810 <system_wait_for_jumper+0x104>
    280e:	89 cf       	rjmp	.-238    	; 0x2722 <system_wait_for_jumper+0x16>
		_delay_ms(10);

}
    2810:	2e 96       	adiw	r28, 0x0e	; 14
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	df 91       	pop	r29
    281e:	cf 91       	pop	r28
    2820:	08 95       	ret

00002822 <flip_debug_led>:

void flip_debug_led() {
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
	PORTG ^= 1 << 0;
    282a:	84 e3       	ldi	r24, 0x34	; 52
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	24 e3       	ldi	r18, 0x34	; 52
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	f9 01       	movw	r30, r18
    2834:	30 81       	ld	r19, Z
    2836:	21 e0       	ldi	r18, 0x01	; 1
    2838:	23 27       	eor	r18, r19
    283a:	fc 01       	movw	r30, r24
    283c:	20 83       	st	Z, r18
}
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	08 95       	ret

00002844 <system_init>:
 *	Function: 		void system_init(void)
 *	Parameters: 	void
 *	Description:	initing all the things
 */
void system_init(void)
{
    2844:	cf 93       	push	r28
    2846:	df 93       	push	r29
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
    284c:	aa 97       	sbiw	r28, 0x2a	; 42
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
	// sets debouncer
	timer_register_callback(gpio_debouncer);
    2858:	8a e1       	ldi	r24, 0x1A	; 26
    285a:	99 e0       	ldi	r25, 0x09	; 9
    285c:	0e 94 35 11 	call	0x226a	; 0x226a <timer_register_callback>
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	a8 ec       	ldi	r26, 0xC8	; 200
    2866:	b2 e4       	ldi	r27, 0x42	; 66
    2868:	89 83       	std	Y+1, r24	; 0x01
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	ab 83       	std	Y+3, r26	; 0x03
    286e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e4       	ldi	r19, 0x40	; 64
    2874:	4c e1       	ldi	r20, 0x1C	; 28
    2876:	55 e4       	ldi	r21, 0x45	; 69
    2878:	69 81       	ldd	r22, Y+1	; 0x01
    287a:	7a 81       	ldd	r23, Y+2	; 0x02
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	8d 83       	std	Y+5, r24	; 0x05
    288a:	9e 83       	std	Y+6, r25	; 0x06
    288c:	af 83       	std	Y+7, r26	; 0x07
    288e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e8       	ldi	r20, 0x80	; 128
    2896:	5f e3       	ldi	r21, 0x3F	; 63
    2898:	6d 81       	ldd	r22, Y+5	; 0x05
    289a:	7e 81       	ldd	r23, Y+6	; 0x06
    289c:	8f 81       	ldd	r24, Y+7	; 0x07
    289e:	98 85       	ldd	r25, Y+8	; 0x08
    28a0:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    28a4:	88 23       	and	r24, r24
    28a6:	2c f4       	brge	.+10     	; 0x28b2 <system_init+0x6e>
		__ticks = 1;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9a 87       	std	Y+10, r25	; 0x0a
    28ae:	89 87       	std	Y+9, r24	; 0x09
    28b0:	3f c0       	rjmp	.+126    	; 0x2930 <system_init+0xec>
	else if (__tmp > 65535)
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	6d 81       	ldd	r22, Y+5	; 0x05
    28bc:	7e 81       	ldd	r23, Y+6	; 0x06
    28be:	8f 81       	ldd	r24, Y+7	; 0x07
    28c0:	98 85       	ldd	r25, Y+8	; 0x08
    28c2:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    28c6:	18 16       	cp	r1, r24
    28c8:	4c f5       	brge	.+82     	; 0x291c <system_init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e2       	ldi	r20, 0x20	; 32
    28d0:	51 e4       	ldi	r21, 0x41	; 65
    28d2:	69 81       	ldd	r22, Y+1	; 0x01
    28d4:	7a 81       	ldd	r23, Y+2	; 0x02
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	9c 81       	ldd	r25, Y+4	; 0x04
    28da:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9a 87       	std	Y+10, r25	; 0x0a
    28f0:	89 87       	std	Y+9, r24	; 0x09
    28f2:	0f c0       	rjmp	.+30     	; 0x2912 <system_init+0xce>
    28f4:	8a ef       	ldi	r24, 0xFA	; 250
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	9c 87       	std	Y+12, r25	; 0x0c
    28fa:	8b 87       	std	Y+11, r24	; 0x0b
    28fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    28fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <system_init+0xbc>
    2904:	9c 87       	std	Y+12, r25	; 0x0c
    2906:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2908:	89 85       	ldd	r24, Y+9	; 0x09
    290a:	9a 85       	ldd	r25, Y+10	; 0x0a
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	9a 87       	std	Y+10, r25	; 0x0a
    2910:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2912:	89 85       	ldd	r24, Y+9	; 0x09
    2914:	9a 85       	ldd	r25, Y+10	; 0x0a
    2916:	89 2b       	or	r24, r25
    2918:	69 f7       	brne	.-38     	; 0x28f4 <system_init+0xb0>
    291a:	14 c0       	rjmp	.+40     	; 0x2944 <system_init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291c:	6d 81       	ldd	r22, Y+5	; 0x05
    291e:	7e 81       	ldd	r23, Y+6	; 0x06
    2920:	8f 81       	ldd	r24, Y+7	; 0x07
    2922:	98 85       	ldd	r25, Y+8	; 0x08
    2924:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	9a 87       	std	Y+10, r25	; 0x0a
    292e:	89 87       	std	Y+9, r24	; 0x09
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	9e 87       	std	Y+14, r25	; 0x0e
    2936:	8d 87       	std	Y+13, r24	; 0x0d
    2938:	8d 85       	ldd	r24, Y+13	; 0x0d
    293a:	9e 85       	ldd	r25, Y+14	; 0x0e
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <system_init+0xf8>
    2940:	9e 87       	std	Y+14, r25	; 0x0e
    2942:	8d 87       	std	Y+13, r24	; 0x0d


	_delay_ms(100);

	gpio_register_pin(SENSOR_FR_PIN, GPIO_DIRECTION_INPUT, true);
    2944:	41 e0       	ldi	r20, 0x01	; 1
    2946:	60 e0       	ldi	r22, 0x00	; 0
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_register_pin>
	gpio_register_pin(SENSOR_FL_PIN, GPIO_DIRECTION_INPUT, true);
    294e:	41 e0       	ldi	r20, 0x01	; 1
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_register_pin>
	gpio_register_pin(SENSOR_BR_PIN, GPIO_DIRECTION_INPUT, true);
    2958:	41 e0       	ldi	r20, 0x01	; 1
    295a:	60 e0       	ldi	r22, 0x00	; 0
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_register_pin>
	gpio_register_pin(SENSOR_BL_PIN, GPIO_DIRECTION_INPUT, true);
    2962:	41 e0       	ldi	r20, 0x01	; 1
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	83 e0       	ldi	r24, 0x03	; 3
    2968:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_register_pin>

	#ifdef BIG_ROBOT
	gpio_register_pin(SENSOR_FC_PIN, GPIO_DIRECTION_INPUT, true);
    296c:	41 e0       	ldi	r20, 0x01	; 1
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	84 e0       	ldi	r24, 0x04	; 4
    2972:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_register_pin>
	gpio_register_pin(SENSOR_BC_PIN, GPIO_DIRECTION_INPUT, true);
    2976:	41 e0       	ldi	r20, 0x01	; 1
    2978:	60 e0       	ldi	r22, 0x00	; 0
    297a:	85 e0       	ldi	r24, 0x05	; 5
    297c:	0e 94 0a 07 	call	0xe14	; 0xe14 <gpio_register_pin>
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	a8 ec       	ldi	r26, 0xC8	; 200
    2986:	b2 e4       	ldi	r27, 0x42	; 66
    2988:	8f 87       	std	Y+15, r24	; 0x0f
    298a:	98 8b       	std	Y+16, r25	; 0x10
    298c:	a9 8b       	std	Y+17, r26	; 0x11
    298e:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e4       	ldi	r19, 0x40	; 64
    2994:	4c e1       	ldi	r20, 0x1C	; 28
    2996:	55 e4       	ldi	r21, 0x45	; 69
    2998:	6f 85       	ldd	r22, Y+15	; 0x0f
    299a:	78 89       	ldd	r23, Y+16	; 0x10
    299c:	89 89       	ldd	r24, Y+17	; 0x11
    299e:	9a 89       	ldd	r25, Y+18	; 0x12
    29a0:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	8b 8b       	std	Y+19, r24	; 0x13
    29aa:	9c 8b       	std	Y+20, r25	; 0x14
    29ac:	ad 8b       	std	Y+21, r26	; 0x15
    29ae:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	6b 89       	ldd	r22, Y+19	; 0x13
    29ba:	7c 89       	ldd	r23, Y+20	; 0x14
    29bc:	8d 89       	ldd	r24, Y+21	; 0x15
    29be:	9e 89       	ldd	r25, Y+22	; 0x16
    29c0:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    29c4:	88 23       	and	r24, r24
    29c6:	2c f4       	brge	.+10     	; 0x29d2 <system_init+0x18e>
		__ticks = 1;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	98 8f       	std	Y+24, r25	; 0x18
    29ce:	8f 8b       	std	Y+23, r24	; 0x17
    29d0:	3f c0       	rjmp	.+126    	; 0x2a50 <system_init+0x20c>
	else if (__tmp > 65535)
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	3f ef       	ldi	r19, 0xFF	; 255
    29d6:	4f e7       	ldi	r20, 0x7F	; 127
    29d8:	57 e4       	ldi	r21, 0x47	; 71
    29da:	6b 89       	ldd	r22, Y+19	; 0x13
    29dc:	7c 89       	ldd	r23, Y+20	; 0x14
    29de:	8d 89       	ldd	r24, Y+21	; 0x15
    29e0:	9e 89       	ldd	r25, Y+22	; 0x16
    29e2:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    29e6:	18 16       	cp	r1, r24
    29e8:	4c f5       	brge	.+82     	; 0x2a3c <system_init+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e2       	ldi	r20, 0x20	; 32
    29f0:	51 e4       	ldi	r21, 0x41	; 65
    29f2:	6f 85       	ldd	r22, Y+15	; 0x0f
    29f4:	78 89       	ldd	r23, Y+16	; 0x10
    29f6:	89 89       	ldd	r24, Y+17	; 0x11
    29f8:	9a 89       	ldd	r25, Y+18	; 0x12
    29fa:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	bc 01       	movw	r22, r24
    2a04:	cd 01       	movw	r24, r26
    2a06:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	98 8f       	std	Y+24, r25	; 0x18
    2a10:	8f 8b       	std	Y+23, r24	; 0x17
    2a12:	0f c0       	rjmp	.+30     	; 0x2a32 <system_init+0x1ee>
    2a14:	8a ef       	ldi	r24, 0xFA	; 250
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	9a 8f       	std	Y+26, r25	; 0x1a
    2a1a:	89 8f       	std	Y+25, r24	; 0x19
    2a1c:	89 8d       	ldd	r24, Y+25	; 0x19
    2a1e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <system_init+0x1dc>
    2a24:	9a 8f       	std	Y+26, r25	; 0x1a
    2a26:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a28:	8f 89       	ldd	r24, Y+23	; 0x17
    2a2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	98 8f       	std	Y+24, r25	; 0x18
    2a30:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a32:	8f 89       	ldd	r24, Y+23	; 0x17
    2a34:	98 8d       	ldd	r25, Y+24	; 0x18
    2a36:	89 2b       	or	r24, r25
    2a38:	69 f7       	brne	.-38     	; 0x2a14 <system_init+0x1d0>
    2a3a:	14 c0       	rjmp	.+40     	; 0x2a64 <system_init+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3c:	6b 89       	ldd	r22, Y+19	; 0x13
    2a3e:	7c 89       	ldd	r23, Y+20	; 0x14
    2a40:	8d 89       	ldd	r24, Y+21	; 0x15
    2a42:	9e 89       	ldd	r25, Y+22	; 0x16
    2a44:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	98 8f       	std	Y+24, r25	; 0x18
    2a4e:	8f 8b       	std	Y+23, r24	; 0x17
    2a50:	8f 89       	ldd	r24, Y+23	; 0x17
    2a52:	98 8d       	ldd	r25, Y+24	; 0x18
    2a54:	9c 8f       	std	Y+28, r25	; 0x1c
    2a56:	8b 8f       	std	Y+27, r24	; 0x1b
    2a58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <system_init+0x218>
    2a60:	9c 8f       	std	Y+28, r25	; 0x1c
    2a62:	8b 8f       	std	Y+27, r24	; 0x1b
	#endif

	// small delay
	_delay_ms(100);

	DDRG = 0x01;
    2a64:	83 e3       	ldi	r24, 0x33	; 51
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	21 e0       	ldi	r18, 0x01	; 1
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	20 83       	st	Z, r18
	PORTG = 0x00;
    2a6e:	84 e3       	ldi	r24, 0x34	; 52
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	fc 01       	movw	r30, r24
    2a74:	10 82       	st	Z, r1

	// initing
	timer_init(1000);
    2a76:	88 ee       	ldi	r24, 0xE8	; 232
    2a78:	93 e0       	ldi	r25, 0x03	; 3
    2a7a:	0e 94 47 11 	call	0x228e	; 0x228e <timer_init>
	CAN_Init(1);
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	0e 94 5c 05 	call	0xab8	; 0xab8 <CAN_Init>
	UART1_Init(UART1_BAUD, UART_ISR_OFF);
    2a84:	40 e0       	ldi	r20, 0x00	; 0
    2a86:	60 e8       	ldi	r22, 0x80	; 128
    2a88:	75 e2       	ldi	r23, 0x25	; 37
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	0e 94 7d 17 	call	0x2efa	; 0x2efa <UART1_Init>
	servo_init(PWM_FREQ);
    2a92:	82 e3       	ldi	r24, 0x32	; 50
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	0e 94 c3 00 	call	0x186	; 0x186 <servo_init>
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	aa ef       	ldi	r26, 0xFA	; 250
    2aa0:	b3 e4       	ldi	r27, 0x43	; 67
    2aa2:	8d 8f       	std	Y+29, r24	; 0x1d
    2aa4:	9e 8f       	std	Y+30, r25	; 0x1e
    2aa6:	af 8f       	std	Y+31, r26	; 0x1f
    2aa8:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e4       	ldi	r19, 0x40	; 64
    2aae:	4c e1       	ldi	r20, 0x1C	; 28
    2ab0:	55 e4       	ldi	r21, 0x45	; 69
    2ab2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2ab4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2ab6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ab8:	98 a1       	ldd	r25, Y+32	; 0x20
    2aba:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	89 a3       	std	Y+33, r24	; 0x21
    2ac4:	9a a3       	std	Y+34, r25	; 0x22
    2ac6:	ab a3       	std	Y+35, r26	; 0x23
    2ac8:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e8       	ldi	r20, 0x80	; 128
    2ad0:	5f e3       	ldi	r21, 0x3F	; 63
    2ad2:	69 a1       	ldd	r22, Y+33	; 0x21
    2ad4:	7a a1       	ldd	r23, Y+34	; 0x22
    2ad6:	8b a1       	ldd	r24, Y+35	; 0x23
    2ad8:	9c a1       	ldd	r25, Y+36	; 0x24
    2ada:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    2ade:	88 23       	and	r24, r24
    2ae0:	2c f4       	brge	.+10     	; 0x2aec <system_init+0x2a8>
		__ticks = 1;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	9e a3       	std	Y+38, r25	; 0x26
    2ae8:	8d a3       	std	Y+37, r24	; 0x25
    2aea:	3f c0       	rjmp	.+126    	; 0x2b6a <system_init+0x326>
	else if (__tmp > 65535)
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	3f ef       	ldi	r19, 0xFF	; 255
    2af0:	4f e7       	ldi	r20, 0x7F	; 127
    2af2:	57 e4       	ldi	r21, 0x47	; 71
    2af4:	69 a1       	ldd	r22, Y+33	; 0x21
    2af6:	7a a1       	ldd	r23, Y+34	; 0x22
    2af8:	8b a1       	ldd	r24, Y+35	; 0x23
    2afa:	9c a1       	ldd	r25, Y+36	; 0x24
    2afc:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    2b00:	18 16       	cp	r1, r24
    2b02:	4c f5       	brge	.+82     	; 0x2b56 <system_init+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e2       	ldi	r20, 0x20	; 32
    2b0a:	51 e4       	ldi	r21, 0x41	; 65
    2b0c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2b0e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2b10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b12:	98 a1       	ldd	r25, Y+32	; 0x20
    2b14:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	bc 01       	movw	r22, r24
    2b1e:	cd 01       	movw	r24, r26
    2b20:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	9e a3       	std	Y+38, r25	; 0x26
    2b2a:	8d a3       	std	Y+37, r24	; 0x25
    2b2c:	0f c0       	rjmp	.+30     	; 0x2b4c <system_init+0x308>
    2b2e:	8a ef       	ldi	r24, 0xFA	; 250
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	98 a7       	std	Y+40, r25	; 0x28
    2b34:	8f a3       	std	Y+39, r24	; 0x27
    2b36:	8f a1       	ldd	r24, Y+39	; 0x27
    2b38:	98 a5       	ldd	r25, Y+40	; 0x28
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <system_init+0x2f6>
    2b3e:	98 a7       	std	Y+40, r25	; 0x28
    2b40:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b42:	8d a1       	ldd	r24, Y+37	; 0x25
    2b44:	9e a1       	ldd	r25, Y+38	; 0x26
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	9e a3       	std	Y+38, r25	; 0x26
    2b4a:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b50:	89 2b       	or	r24, r25
    2b52:	69 f7       	brne	.-38     	; 0x2b2e <system_init+0x2ea>
    2b54:	14 c0       	rjmp	.+40     	; 0x2b7e <system_init+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b56:	69 a1       	ldd	r22, Y+33	; 0x21
    2b58:	7a a1       	ldd	r23, Y+34	; 0x22
    2b5a:	8b a1       	ldd	r24, Y+35	; 0x23
    2b5c:	9c a1       	ldd	r25, Y+36	; 0x24
    2b5e:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	9e a3       	std	Y+38, r25	; 0x26
    2b68:	8d a3       	std	Y+37, r24	; 0x25
    2b6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b6e:	9a a7       	std	Y+42, r25	; 0x2a
    2b70:	89 a7       	std	Y+41, r24	; 0x29
    2b72:	89 a5       	ldd	r24, Y+41	; 0x29
    2b74:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <system_init+0x332>
    2b7a:	9a a7       	std	Y+42, r25	; 0x2a
    2b7c:	89 a7       	std	Y+41, r24	; 0x29

	_delay_ms(500);

	system_setup_jumper();
    2b7e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <system_setup_jumper>

	// uart1 ping
	//ping_actuator();

	setup_complete = true;
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	80 93 6f 01 	sts	0x016F, r24

	PORTG = 0x01;
    2b88:	84 e3       	ldi	r24, 0x34	; 52
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	21 e0       	ldi	r18, 0x01	; 1
    2b8e:	fc 01       	movw	r30, r24
    2b90:	20 83       	st	Z, r18

	// waiting for jumper
	//system_wait_for_jumper();

	PORTG = 0x00;
    2b92:	84 e3       	ldi	r24, 0x34	; 52
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	fc 01       	movw	r30, r24
    2b98:	10 82       	st	Z, r1

	system_reset_system_time();															// reset system time
    2b9a:	0e 94 96 12 	call	0x252c	; 0x252c <system_reset_system_time>
	system_set_match_started();															// match has started!
    2b9e:	0e 94 a5 12 	call	0x254a	; 0x254a <system_set_match_started>

}
    2ba2:	aa 96       	adiw	r28, 0x2a	; 42
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	08 95       	ret

00002bb4 <UART0_Init>:
* Parameters        : unsigned int baud
					  char isrOnOff
* Return Value      : void
*********************************************************************************/
void UART0_Init(unsigned long baud, char isrOnOff)
{
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
    2bbc:	27 97       	sbiw	r28, 0x07	; 7
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	f8 94       	cli
    2bc2:	de bf       	out	0x3e, r29	; 62
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	cd bf       	out	0x3d, r28	; 61
    2bc8:	6b 83       	std	Y+3, r22	; 0x03
    2bca:	7c 83       	std	Y+4, r23	; 0x04
    2bcc:	8d 83       	std	Y+5, r24	; 0x05
    2bce:	9e 83       	std	Y+6, r25	; 0x06
    2bd0:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR0A = 0;
    2bd2:	80 ec       	ldi	r24, 0xC0	; 192
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	10 82       	st	Z, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
    2bda:	81 ec       	ldi	r24, 0xC1	; 193
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	28 e1       	ldi	r18, 0x18	; 24
    2be0:	fc 01       	movw	r30, r24
    2be2:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    2be4:	82 ec       	ldi	r24, 0xC2	; 194
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	26 e0       	ldi	r18, 0x06	; 6
    2bea:	fc 01       	movw	r30, r24
    2bec:	20 83       	st	Z, r18

	if(isrOnOff == UART_ISR_ON)
    2bee:	8f 81       	ldd	r24, Y+7	; 0x07
    2bf0:	81 30       	cpi	r24, 0x01	; 1
    2bf2:	91 f4       	brne	.+36     	; 0x2c18 <UART0_Init+0x64>
	{
		UCSR0B |= ((1 << RXCIE0) | (1 << TXCIE0));
    2bf4:	81 ec       	ldi	r24, 0xC1	; 193
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	21 ec       	ldi	r18, 0xC1	; 193
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	f9 01       	movw	r30, r18
    2bfe:	20 81       	ld	r18, Z
    2c00:	20 6c       	ori	r18, 0xC0	; 192
    2c02:	fc 01       	movw	r30, r24
    2c04:	20 83       	st	Z, r18
		SREG |= 0x80;
    2c06:	8f e5       	ldi	r24, 0x5F	; 95
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	2f e5       	ldi	r18, 0x5F	; 95
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	f9 01       	movw	r30, r18
    2c10:	20 81       	ld	r18, Z
    2c12:	20 68       	ori	r18, 0x80	; 128
    2c14:	fc 01       	movw	r30, r24
    2c16:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    2c18:	6b 81       	ldd	r22, Y+3	; 0x03
    2c1a:	7c 81       	ldd	r23, Y+4	; 0x04
    2c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c20:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__floatunsisf>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e8       	ldi	r20, 0x80	; 128
    2c2e:	51 e4       	ldi	r21, 0x41	; 65
    2c30:	bc 01       	movw	r22, r24
    2c32:	cd 01       	movw	r24, r26
    2c34:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	9c 01       	movw	r18, r24
    2c3e:	ad 01       	movw	r20, r26
    2c40:	60 e8       	ldi	r22, 0x80	; 128
    2c42:	76 e9       	ldi	r23, 0x96	; 150
    2c44:	88 e1       	ldi	r24, 0x18	; 24
    2c46:	9b e4       	ldi	r25, 0x4B	; 75
    2c48:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <__divsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	40 e8       	ldi	r20, 0x80	; 128
    2c56:	5f e3       	ldi	r21, 0x3F	; 63
    2c58:	bc 01       	movw	r22, r24
    2c5a:	cd 01       	movw	r24, r26
    2c5c:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__subsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	5f e3       	ldi	r21, 0x3F	; 63
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__addsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	bc 01       	movw	r22, r24
    2c7a:	cd 01       	movw	r24, r26
    2c7c:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	9a 83       	std	Y+2, r25	; 0x02
    2c86:	89 83       	std	Y+1, r24	; 0x01

	UBRR0H = temp >> 8;
    2c88:	85 ec       	ldi	r24, 0xC5	; 197
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	29 81       	ldd	r18, Y+1	; 0x01
    2c8e:	3a 81       	ldd	r19, Y+2	; 0x02
    2c90:	23 2f       	mov	r18, r19
    2c92:	33 27       	eor	r19, r19
    2c94:	fc 01       	movw	r30, r24
    2c96:	20 83       	st	Z, r18
	UBRR0L = temp;
    2c98:	84 ec       	ldi	r24, 0xC4	; 196
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	29 81       	ldd	r18, Y+1	; 0x01
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	20 83       	st	Z, r18
}
    2ca2:	27 96       	adiw	r28, 0x07	; 7
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	f8 94       	cli
    2ca8:	de bf       	out	0x3e, r29	; 62
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	cd bf       	out	0x3d, r28	; 61
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	08 95       	ret

00002cb4 <__vector_23>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    2cb4:	1f 92       	push	r1
    2cb6:	0f 92       	push	r0
    2cb8:	00 90 5f 00 	lds	r0, 0x005F
    2cbc:	0f 92       	push	r0
    2cbe:	11 24       	eor	r1, r1
    2cc0:	00 90 5b 00 	lds	r0, 0x005B
    2cc4:	0f 92       	push	r0
    2cc6:	2f 93       	push	r18
    2cc8:	3f 93       	push	r19
    2cca:	8f 93       	push	r24
    2ccc:	9f 93       	push	r25
    2cce:	ef 93       	push	r30
    2cd0:	ff 93       	push	r31
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    2cda:	80 91 b1 01 	lds	r24, 0x01B1
    2cde:	88 23       	and	r24, r24
    2ce0:	d1 f0       	breq	.+52     	; 0x2d16 <__vector_23+0x62>
	{
		tx0_counter--;
    2ce2:	80 91 b1 01 	lds	r24, 0x01B1
    2ce6:	81 50       	subi	r24, 0x01	; 1
    2ce8:	80 93 b1 01 	sts	0x01B1, r24
		UDR0 = tx0_buffer[tx0_rd_index];
    2cec:	86 ec       	ldi	r24, 0xC6	; 198
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	20 91 b2 01 	lds	r18, 0x01B2
    2cf4:	22 2f       	mov	r18, r18
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	20 59       	subi	r18, 0x90	; 144
    2cfa:	3e 4f       	sbci	r19, 0xFE	; 254
    2cfc:	f9 01       	movw	r30, r18
    2cfe:	20 81       	ld	r18, Z
    2d00:	fc 01       	movw	r30, r24
    2d02:	20 83       	st	Z, r18
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    2d04:	80 91 b2 01 	lds	r24, 0x01B2
    2d08:	8f 5f       	subi	r24, 0xFF	; 255
    2d0a:	80 93 b2 01 	sts	0x01B2, r24
    2d0e:	80 34       	cpi	r24, 0x40	; 64
    2d10:	11 f4       	brne	.+4      	; 0x2d16 <__vector_23+0x62>
			tx0_rd_index = 0;
    2d12:	10 92 b2 01 	sts	0x01B2, r1
	}
}
    2d16:	df 91       	pop	r29
    2d18:	cf 91       	pop	r28
    2d1a:	ff 91       	pop	r31
    2d1c:	ef 91       	pop	r30
    2d1e:	9f 91       	pop	r25
    2d20:	8f 91       	pop	r24
    2d22:	3f 91       	pop	r19
    2d24:	2f 91       	pop	r18
    2d26:	0f 90       	pop	r0
    2d28:	00 92 5b 00 	sts	0x005B, r0
    2d2c:	0f 90       	pop	r0
    2d2e:	00 92 5f 00 	sts	0x005F, r0
    2d32:	0f 90       	pop	r0
    2d34:	1f 90       	pop	r1
    2d36:	18 95       	reti

00002d38 <UART0_Write>:
/****************************************************************************************************************************************
Slanje podataka USART0 modulom
****************************************************************************************************************************************/

void UART0_Write(unsigned char data)
{
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	1f 92       	push	r1
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
    2d42:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR0B >> TXCIE0) & 0x01)
    2d44:	81 ec       	ldi	r24, 0xC1	; 193
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	fc 01       	movw	r30, r24
    2d4a:	80 81       	ld	r24, Z
    2d4c:	82 95       	swap	r24
    2d4e:	86 95       	lsr	r24
    2d50:	86 95       	lsr	r24
    2d52:	83 70       	andi	r24, 0x03	; 3
    2d54:	88 2f       	mov	r24, r24
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	81 70       	andi	r24, 0x01	; 1
    2d5a:	99 27       	eor	r25, r25
    2d5c:	89 2b       	or	r24, r25
    2d5e:	99 f1       	breq	.+102    	; 0x2dc6 <UART0_Write+0x8e>
	{
		while(tx0_counter == TX0_BUFFER_SIZE);
    2d60:	00 00       	nop
    2d62:	80 91 b1 01 	lds	r24, 0x01B1
    2d66:	80 34       	cpi	r24, 0x40	; 64
    2d68:	e1 f3       	breq	.-8      	; 0x2d62 <UART0_Write+0x2a>

		cli();
    2d6a:	f8 94       	cli

		if(tx0_counter || (UCSR0A & 0x20) == 0)
    2d6c:	80 91 b1 01 	lds	r24, 0x01B1
    2d70:	88 23       	and	r24, r24
    2d72:	51 f4       	brne	.+20     	; 0x2d88 <UART0_Write+0x50>
    2d74:	80 ec       	ldi	r24, 0xC0	; 192
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	fc 01       	movw	r30, r24
    2d7a:	80 81       	ld	r24, Z
    2d7c:	88 2f       	mov	r24, r24
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	80 72       	andi	r24, 0x20	; 32
    2d82:	99 27       	eor	r25, r25
    2d84:	89 2b       	or	r24, r25
    2d86:	c1 f4       	brne	.+48     	; 0x2db8 <UART0_Write+0x80>
		{
			tx0_buffer[tx0_wr_index] = data;
    2d88:	80 91 b0 01 	lds	r24, 0x01B0
    2d8c:	88 2f       	mov	r24, r24
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	80 59       	subi	r24, 0x90	; 144
    2d92:	9e 4f       	sbci	r25, 0xFE	; 254
    2d94:	29 81       	ldd	r18, Y+1	; 0x01
    2d96:	fc 01       	movw	r30, r24
    2d98:	20 83       	st	Z, r18
			if(++tx0_wr_index == TX0_BUFFER_SIZE)
    2d9a:	80 91 b0 01 	lds	r24, 0x01B0
    2d9e:	8f 5f       	subi	r24, 0xFF	; 255
    2da0:	80 93 b0 01 	sts	0x01B0, r24
    2da4:	80 34       	cpi	r24, 0x40	; 64
    2da6:	11 f4       	brne	.+4      	; 0x2dac <UART0_Write+0x74>
				tx0_wr_index = 0;
    2da8:	10 92 b0 01 	sts	0x01B0, r1

			tx0_counter++;
    2dac:	80 91 b1 01 	lds	r24, 0x01B1
    2db0:	8f 5f       	subi	r24, 0xFF	; 255
    2db2:	80 93 b1 01 	sts	0x01B1, r24
    2db6:	05 c0       	rjmp	.+10     	; 0x2dc2 <UART0_Write+0x8a>
		}
		else
			UDR0 = data;
    2db8:	86 ec       	ldi	r24, 0xC6	; 198
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	29 81       	ldd	r18, Y+1	; 0x01
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	20 83       	st	Z, r18

		sei();
    2dc2:	78 94       	sei
    2dc4:	03 c0       	rjmp	.+6      	; 0x2dcc <UART0_Write+0x94>
	}
	else
		altUart0Write(data);
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	0e 94 8b 18 	call	0x3116	; 0x3116 <altUart0Write>
}
    2dcc:	0f 90       	pop	r0
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	08 95       	ret

00002dd4 <__vector_21>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    2dd4:	1f 92       	push	r1
    2dd6:	0f 92       	push	r0
    2dd8:	00 90 5f 00 	lds	r0, 0x005F
    2ddc:	0f 92       	push	r0
    2dde:	11 24       	eor	r1, r1
    2de0:	00 90 5b 00 	lds	r0, 0x005B
    2de4:	0f 92       	push	r0
    2de6:	2f 93       	push	r18
    2de8:	3f 93       	push	r19
    2dea:	8f 93       	push	r24
    2dec:	9f 93       	push	r25
    2dee:	ef 93       	push	r30
    2df0:	ff 93       	push	r31
    2df2:	cf 93       	push	r28
    2df4:	df 93       	push	r29
    2df6:	1f 92       	push	r1
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR0A;
    2dfc:	80 ec       	ldi	r24, 0xC0	; 192
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	fc 01       	movw	r30, r24
    2e02:	80 81       	ld	r24, Z
    2e04:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	88 2f       	mov	r24, r24
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	8c 71       	andi	r24, 0x1C	; 28
    2e0e:	99 27       	eor	r25, r25
    2e10:	89 2b       	or	r24, r25
    2e12:	d1 f4       	brne	.+52     	; 0x2e48 <__vector_21+0x74>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    2e14:	80 91 f3 01 	lds	r24, 0x01F3
    2e18:	88 2f       	mov	r24, r24
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	26 ec       	ldi	r18, 0xC6	; 198
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	f9 01       	movw	r30, r18
    2e22:	20 81       	ld	r18, Z
    2e24:	8d 54       	subi	r24, 0x4D	; 77
    2e26:	9e 4f       	sbci	r25, 0xFE	; 254
    2e28:	fc 01       	movw	r30, r24
    2e2a:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    2e2c:	80 91 f3 01 	lds	r24, 0x01F3
    2e30:	8f 5f       	subi	r24, 0xFF	; 255
    2e32:	80 93 f3 01 	sts	0x01F3, r24
    2e36:	80 34       	cpi	r24, 0x40	; 64
    2e38:	11 f4       	brne	.+4      	; 0x2e3e <__vector_21+0x6a>
			rx0_wr_index = 0;
    2e3a:	10 92 f3 01 	sts	0x01F3, r1

		rx0_counter++;
    2e3e:	80 91 f4 01 	lds	r24, 0x01F4
    2e42:	8f 5f       	subi	r24, 0xFF	; 255
    2e44:	80 93 f4 01 	sts	0x01F4, r24
	}
}
    2e48:	0f 90       	pop	r0
    2e4a:	df 91       	pop	r29
    2e4c:	cf 91       	pop	r28
    2e4e:	ff 91       	pop	r31
    2e50:	ef 91       	pop	r30
    2e52:	9f 91       	pop	r25
    2e54:	8f 91       	pop	r24
    2e56:	3f 91       	pop	r19
    2e58:	2f 91       	pop	r18
    2e5a:	0f 90       	pop	r0
    2e5c:	00 92 5b 00 	sts	0x005B, r0
    2e60:	0f 90       	pop	r0
    2e62:	00 92 5f 00 	sts	0x005F, r0
    2e66:	0f 90       	pop	r0
    2e68:	1f 90       	pop	r1
    2e6a:	18 95       	reti

00002e6c <UART0_Read>:
/****************************************************************************************************************************************
Primanje podataka USART0 modulom
****************************************************************************************************************************************/

unsigned char UART0_Read(void)
{
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	1f 92       	push	r1
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR0B >> RXCIE0) & 0x01)
    2e76:	81 ec       	ldi	r24, 0xC1	; 193
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	fc 01       	movw	r30, r24
    2e7c:	80 81       	ld	r24, Z
    2e7e:	88 1f       	adc	r24, r24
    2e80:	88 27       	eor	r24, r24
    2e82:	88 1f       	adc	r24, r24
    2e84:	88 2f       	mov	r24, r24
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	81 70       	andi	r24, 0x01	; 1
    2e8a:	99 27       	eor	r25, r25
    2e8c:	89 2b       	or	r24, r25
    2e8e:	e9 f0       	breq	.+58     	; 0x2eca <UART0_Read+0x5e>
	{
		while(rx0_counter == 0);
    2e90:	00 00       	nop
    2e92:	80 91 f4 01 	lds	r24, 0x01F4
    2e96:	88 23       	and	r24, r24
    2e98:	e1 f3       	breq	.-8      	; 0x2e92 <UART0_Read+0x26>

		data = rx0_buffer[rx0_rd_index];
    2e9a:	80 91 f5 01 	lds	r24, 0x01F5
    2e9e:	88 2f       	mov	r24, r24
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	8d 54       	subi	r24, 0x4D	; 77
    2ea4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	80 81       	ld	r24, Z
    2eaa:	89 83       	std	Y+1, r24	; 0x01

		if(++rx0_rd_index == RX0_BUFFER_SIZE)
    2eac:	80 91 f5 01 	lds	r24, 0x01F5
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	80 93 f5 01 	sts	0x01F5, r24
    2eb6:	80 34       	cpi	r24, 0x40	; 64
    2eb8:	11 f4       	brne	.+4      	; 0x2ebe <UART0_Read+0x52>
			rx0_rd_index = 0;
    2eba:	10 92 f5 01 	sts	0x01F5, r1

		rx0_counter--;
    2ebe:	80 91 f4 01 	lds	r24, 0x01F4
    2ec2:	81 50       	subi	r24, 0x01	; 1
    2ec4:	80 93 f4 01 	sts	0x01F4, r24
    2ec8:	13 c0       	rjmp	.+38     	; 0x2ef0 <UART0_Read+0x84>
	}
	else
	{
		while( !((UCSR0A >> RXC0) & 0x01));
    2eca:	00 00       	nop
    2ecc:	80 ec       	ldi	r24, 0xC0	; 192
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	80 81       	ld	r24, Z
    2ed4:	88 1f       	adc	r24, r24
    2ed6:	88 27       	eor	r24, r24
    2ed8:	88 1f       	adc	r24, r24
    2eda:	88 2f       	mov	r24, r24
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	81 70       	andi	r24, 0x01	; 1
    2ee0:	99 27       	eor	r25, r25
    2ee2:	89 2b       	or	r24, r25
    2ee4:	99 f3       	breq	.-26     	; 0x2ecc <UART0_Read+0x60>
		data = UDR0;
    2ee6:	86 ec       	ldi	r24, 0xC6	; 198
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	fc 01       	movw	r30, r24
    2eec:	80 81       	ld	r24, Z
    2eee:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ef2:	0f 90       	pop	r0
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	08 95       	ret

00002efa <UART1_Init>:
-bez paritet
-9600baud
-asynchron
****************************************************************************************************************************************/
void UART1_Init(unsigned long baud, char isrOnOff)
{
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	27 97       	sbiw	r28, 0x07	; 7
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	6b 83       	std	Y+3, r22	; 0x03
    2f10:	7c 83       	std	Y+4, r23	; 0x04
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	9e 83       	std	Y+6, r25	; 0x06
    2f16:	4f 83       	std	Y+7, r20	; 0x07
	unsigned int temp;

	UCSR1A = 0;
    2f18:	88 ec       	ldi	r24, 0xC8	; 200
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	fc 01       	movw	r30, r24
    2f1e:	10 82       	st	Z, r1
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
    2f20:	89 ec       	ldi	r24, 0xC9	; 201
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	28 e1       	ldi	r18, 0x18	; 24
    2f26:	fc 01       	movw	r30, r24
    2f28:	20 83       	st	Z, r18


	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10); //sa 1stop bit
    2f2a:	8a ec       	ldi	r24, 0xCA	; 202
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	26 e0       	ldi	r18, 0x06	; 6
    2f30:	fc 01       	movw	r30, r24
    2f32:	20 83       	st	Z, r18


	if(isrOnOff == UART_ISR_ON)
    2f34:	8f 81       	ldd	r24, Y+7	; 0x07
    2f36:	81 30       	cpi	r24, 0x01	; 1
    2f38:	91 f4       	brne	.+36     	; 0x2f5e <UART1_Init+0x64>
	{
		UCSR1B |= ((1 << RXCIE1) | (1 << TXCIE1));
    2f3a:	89 ec       	ldi	r24, 0xC9	; 201
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	29 ec       	ldi	r18, 0xC9	; 201
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	f9 01       	movw	r30, r18
    2f44:	20 81       	ld	r18, Z
    2f46:	20 6c       	ori	r18, 0xC0	; 192
    2f48:	fc 01       	movw	r30, r24
    2f4a:	20 83       	st	Z, r18
		SREG |= 0x80;
    2f4c:	8f e5       	ldi	r24, 0x5F	; 95
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	2f e5       	ldi	r18, 0x5F	; 95
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	f9 01       	movw	r30, r18
    2f56:	20 81       	ld	r18, Z
    2f58:	20 68       	ori	r18, 0x80	; 128
    2f5a:	fc 01       	movw	r30, r24
    2f5c:	20 83       	st	Z, r18
	}

	temp = 0.5 + ((double)F_CPU/(baud * 16.0f) - 1);
    2f5e:	6b 81       	ldd	r22, Y+3	; 0x03
    2f60:	7c 81       	ldd	r23, Y+4	; 0x04
    2f62:	8d 81       	ldd	r24, Y+5	; 0x05
    2f64:	9e 81       	ldd	r25, Y+6	; 0x06
    2f66:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__floatunsisf>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e8       	ldi	r20, 0x80	; 128
    2f74:	51 e4       	ldi	r21, 0x41	; 65
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	9c 01       	movw	r18, r24
    2f84:	ad 01       	movw	r20, r26
    2f86:	60 e8       	ldi	r22, 0x80	; 128
    2f88:	76 e9       	ldi	r23, 0x96	; 150
    2f8a:	88 e1       	ldi	r24, 0x18	; 24
    2f8c:	9b e4       	ldi	r25, 0x4B	; 75
    2f8e:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <__divsf3>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e8       	ldi	r20, 0x80	; 128
    2f9c:	5f e3       	ldi	r21, 0x3F	; 63
    2f9e:	bc 01       	movw	r22, r24
    2fa0:	cd 01       	movw	r24, r26
    2fa2:	0e 94 b3 1c 	call	0x3966	; 0x3966 <__subsf3>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e0       	ldi	r20, 0x00	; 0
    2fb0:	5f e3       	ldi	r21, 0x3F	; 63
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__addsf3>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	cd 01       	movw	r24, r26
    2fc2:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	9a 83       	std	Y+2, r25	; 0x02
    2fcc:	89 83       	std	Y+1, r24	; 0x01

	UBRR1H = temp >> 8;
    2fce:	8d ec       	ldi	r24, 0xCD	; 205
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	29 81       	ldd	r18, Y+1	; 0x01
    2fd4:	3a 81       	ldd	r19, Y+2	; 0x02
    2fd6:	23 2f       	mov	r18, r19
    2fd8:	33 27       	eor	r19, r19
    2fda:	fc 01       	movw	r30, r24
    2fdc:	20 83       	st	Z, r18
	UBRR1L = temp;
    2fde:	8c ec       	ldi	r24, 0xCC	; 204
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	29 81       	ldd	r18, Y+1	; 0x01
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	20 83       	st	Z, r18
}
    2fe8:	27 96       	adiw	r28, 0x07	; 7
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	df 91       	pop	r29
    2ff6:	cf 91       	pop	r28
    2ff8:	08 95       	ret

00002ffa <__vector_34>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    2ffa:	1f 92       	push	r1
    2ffc:	0f 92       	push	r0
    2ffe:	00 90 5f 00 	lds	r0, 0x005F
    3002:	0f 92       	push	r0
    3004:	11 24       	eor	r1, r1
    3006:	00 90 5b 00 	lds	r0, 0x005B
    300a:	0f 92       	push	r0
    300c:	2f 93       	push	r18
    300e:	3f 93       	push	r19
    3010:	8f 93       	push	r24
    3012:	9f 93       	push	r25
    3014:	ef 93       	push	r30
    3016:	ff 93       	push	r31
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    3020:	80 91 37 02 	lds	r24, 0x0237
    3024:	88 23       	and	r24, r24
    3026:	d1 f0       	breq	.+52     	; 0x305c <__vector_34+0x62>
	{
		tx1_counter--;
    3028:	80 91 37 02 	lds	r24, 0x0237
    302c:	81 50       	subi	r24, 0x01	; 1
    302e:	80 93 37 02 	sts	0x0237, r24
		UDR1=tx1_buffer[tx1_rd_index];
    3032:	8e ec       	ldi	r24, 0xCE	; 206
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	20 91 38 02 	lds	r18, 0x0238
    303a:	22 2f       	mov	r18, r18
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	2a 50       	subi	r18, 0x0A	; 10
    3040:	3e 4f       	sbci	r19, 0xFE	; 254
    3042:	f9 01       	movw	r30, r18
    3044:	20 81       	ld	r18, Z
    3046:	fc 01       	movw	r30, r24
    3048:	20 83       	st	Z, r18
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    304a:	80 91 38 02 	lds	r24, 0x0238
    304e:	8f 5f       	subi	r24, 0xFF	; 255
    3050:	80 93 38 02 	sts	0x0238, r24
    3054:	80 34       	cpi	r24, 0x40	; 64
    3056:	11 f4       	brne	.+4      	; 0x305c <__vector_34+0x62>
			tx1_rd_index = 0;
    3058:	10 92 38 02 	sts	0x0238, r1
	}
}
    305c:	df 91       	pop	r29
    305e:	cf 91       	pop	r28
    3060:	ff 91       	pop	r31
    3062:	ef 91       	pop	r30
    3064:	9f 91       	pop	r25
    3066:	8f 91       	pop	r24
    3068:	3f 91       	pop	r19
    306a:	2f 91       	pop	r18
    306c:	0f 90       	pop	r0
    306e:	00 92 5b 00 	sts	0x005B, r0
    3072:	0f 90       	pop	r0
    3074:	00 92 5f 00 	sts	0x005F, r0
    3078:	0f 90       	pop	r0
    307a:	1f 90       	pop	r1
    307c:	18 95       	reti

0000307e <__vector_32>:

ISR(USART1_RX_vect)
{
    307e:	1f 92       	push	r1
    3080:	0f 92       	push	r0
    3082:	00 90 5f 00 	lds	r0, 0x005F
    3086:	0f 92       	push	r0
    3088:	11 24       	eor	r1, r1
    308a:	00 90 5b 00 	lds	r0, 0x005B
    308e:	0f 92       	push	r0
    3090:	2f 93       	push	r18
    3092:	3f 93       	push	r19
    3094:	8f 93       	push	r24
    3096:	9f 93       	push	r25
    3098:	ef 93       	push	r30
    309a:	ff 93       	push	r31
    309c:	cf 93       	push	r28
    309e:	df 93       	push	r29
    30a0:	1f 92       	push	r1
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status = UCSR1A;
    30a6:	88 ec       	ldi	r24, 0xC8	; 200
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	fc 01       	movw	r30, r24
    30ac:	80 81       	ld	r24, Z
    30ae:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))
    30b0:	89 81       	ldd	r24, Y+1	; 0x01
    30b2:	88 2f       	mov	r24, r24
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	8c 71       	andi	r24, 0x1C	; 28
    30b8:	99 27       	eor	r25, r25
    30ba:	89 2b       	or	r24, r25
    30bc:	d1 f4       	brne	.+52     	; 0x30f2 <__vector_32+0x74>
	{
		rx1_buffer[rx1_wr_index] = UDR1;
    30be:	80 91 79 02 	lds	r24, 0x0279
    30c2:	88 2f       	mov	r24, r24
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	2e ec       	ldi	r18, 0xCE	; 206
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	f9 01       	movw	r30, r18
    30cc:	20 81       	ld	r18, Z
    30ce:	87 5c       	subi	r24, 0xC7	; 199
    30d0:	9d 4f       	sbci	r25, 0xFD	; 253
    30d2:	fc 01       	movw	r30, r24
    30d4:	20 83       	st	Z, r18
		if(++rx1_wr_index == RX1_BUFFER_SIZE)
    30d6:	80 91 79 02 	lds	r24, 0x0279
    30da:	8f 5f       	subi	r24, 0xFF	; 255
    30dc:	80 93 79 02 	sts	0x0279, r24
    30e0:	80 34       	cpi	r24, 0x40	; 64
    30e2:	11 f4       	brne	.+4      	; 0x30e8 <__vector_32+0x6a>
		rx1_wr_index = 0;
    30e4:	10 92 79 02 	sts	0x0279, r1

		rx1_counter++;
    30e8:	80 91 7a 02 	lds	r24, 0x027A
    30ec:	8f 5f       	subi	r24, 0xFF	; 255
    30ee:	80 93 7a 02 	sts	0x027A, r24
	}
}
    30f2:	0f 90       	pop	r0
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	ff 91       	pop	r31
    30fa:	ef 91       	pop	r30
    30fc:	9f 91       	pop	r25
    30fe:	8f 91       	pop	r24
    3100:	3f 91       	pop	r19
    3102:	2f 91       	pop	r18
    3104:	0f 90       	pop	r0
    3106:	00 92 5b 00 	sts	0x005B, r0
    310a:	0f 90       	pop	r0
    310c:	00 92 5f 00 	sts	0x005F, r0
    3110:	0f 90       	pop	r0
    3112:	1f 90       	pop	r1
    3114:	18 95       	reti

00003116 <altUart0Write>:

void altUart0Write(unsigned char data)
{
    3116:	cf 93       	push	r28
    3118:	df 93       	push	r29
    311a:	1f 92       	push	r1
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
    3120:	89 83       	std	Y+1, r24	; 0x01
	while( !(UCSR0A & (1 << UDRE0)));
    3122:	00 00       	nop
    3124:	80 ec       	ldi	r24, 0xC0	; 192
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	fc 01       	movw	r30, r24
    312a:	80 81       	ld	r24, Z
    312c:	88 2f       	mov	r24, r24
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	80 72       	andi	r24, 0x20	; 32
    3132:	99 27       	eor	r25, r25
    3134:	89 2b       	or	r24, r25
    3136:	b1 f3       	breq	.-20     	; 0x3124 <altUart0Write+0xe>

	UDR0 = data;
    3138:	86 ec       	ldi	r24, 0xC6	; 198
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	29 81       	ldd	r18, Y+1	; 0x01
    313e:	fc 01       	movw	r30, r24
    3140:	20 83       	st	Z, r18
}
    3142:	0f 90       	pop	r0
    3144:	df 91       	pop	r29
    3146:	cf 91       	pop	r28
    3148:	08 95       	ret

0000314a <altUart1Write>:

void altUart1Write(unsigned char data)
{
    314a:	cf 93       	push	r28
    314c:	df 93       	push	r29
    314e:	1f 92       	push	r1
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1 << UDRE1)) );
    3156:	00 00       	nop
    3158:	88 ec       	ldi	r24, 0xC8	; 200
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	fc 01       	movw	r30, r24
    315e:	80 81       	ld	r24, Z
    3160:	88 2f       	mov	r24, r24
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	80 72       	andi	r24, 0x20	; 32
    3166:	99 27       	eor	r25, r25
    3168:	89 2b       	or	r24, r25
    316a:	b1 f3       	breq	.-20     	; 0x3158 <altUart1Write+0xe>
	UDR1 = data;
    316c:	8e ec       	ldi	r24, 0xCE	; 206
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	29 81       	ldd	r18, Y+1	; 0x01
    3172:	fc 01       	movw	r30, r24
    3174:	20 83       	st	Z, r18
}
    3176:	0f 90       	pop	r0
    3178:	df 91       	pop	r29
    317a:	cf 91       	pop	r28
    317c:	08 95       	ret

0000317e <UART1_Write>:
Slanje podataka USART1 modulom
**
**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
    317e:	cf 93       	push	r28
    3180:	df 93       	push	r29
    3182:	1f 92       	push	r1
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
    3188:	89 83       	std	Y+1, r24	; 0x01
	if( (UCSR1B >> TXCIE1) & 0x01)
    318a:	89 ec       	ldi	r24, 0xC9	; 201
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	fc 01       	movw	r30, r24
    3190:	80 81       	ld	r24, Z
    3192:	82 95       	swap	r24
    3194:	86 95       	lsr	r24
    3196:	86 95       	lsr	r24
    3198:	83 70       	andi	r24, 0x03	; 3
    319a:	88 2f       	mov	r24, r24
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	81 70       	andi	r24, 0x01	; 1
    31a0:	99 27       	eor	r25, r25
    31a2:	89 2b       	or	r24, r25
    31a4:	99 f1       	breq	.+102    	; 0x320c <UART1_Write+0x8e>
	{
		while(tx1_counter == TX1_BUFFER_SIZE);
    31a6:	00 00       	nop
    31a8:	80 91 37 02 	lds	r24, 0x0237
    31ac:	80 34       	cpi	r24, 0x40	; 64
    31ae:	e1 f3       	breq	.-8      	; 0x31a8 <UART1_Write+0x2a>

		cli();
    31b0:	f8 94       	cli

		if(tx1_counter || (UCSR1A & 0x20) == 0)
    31b2:	80 91 37 02 	lds	r24, 0x0237
    31b6:	88 23       	and	r24, r24
    31b8:	51 f4       	brne	.+20     	; 0x31ce <UART1_Write+0x50>
    31ba:	88 ec       	ldi	r24, 0xC8	; 200
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	fc 01       	movw	r30, r24
    31c0:	80 81       	ld	r24, Z
    31c2:	88 2f       	mov	r24, r24
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	80 72       	andi	r24, 0x20	; 32
    31c8:	99 27       	eor	r25, r25
    31ca:	89 2b       	or	r24, r25
    31cc:	c1 f4       	brne	.+48     	; 0x31fe <UART1_Write+0x80>
		{
			tx1_buffer[tx1_wr_index] = data;
    31ce:	80 91 36 02 	lds	r24, 0x0236
    31d2:	88 2f       	mov	r24, r24
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	8a 50       	subi	r24, 0x0A	; 10
    31d8:	9e 4f       	sbci	r25, 0xFE	; 254
    31da:	29 81       	ldd	r18, Y+1	; 0x01
    31dc:	fc 01       	movw	r30, r24
    31de:	20 83       	st	Z, r18

			if(++tx1_wr_index == TX1_BUFFER_SIZE)
    31e0:	80 91 36 02 	lds	r24, 0x0236
    31e4:	8f 5f       	subi	r24, 0xFF	; 255
    31e6:	80 93 36 02 	sts	0x0236, r24
    31ea:	80 34       	cpi	r24, 0x40	; 64
    31ec:	11 f4       	brne	.+4      	; 0x31f2 <UART1_Write+0x74>
				tx1_wr_index = 0;
    31ee:	10 92 36 02 	sts	0x0236, r1

			tx1_counter++;
    31f2:	80 91 37 02 	lds	r24, 0x0237
    31f6:	8f 5f       	subi	r24, 0xFF	; 255
    31f8:	80 93 37 02 	sts	0x0237, r24
    31fc:	05 c0       	rjmp	.+10     	; 0x3208 <UART1_Write+0x8a>
		}
		else
			UDR1 = data;
    31fe:	8e ec       	ldi	r24, 0xCE	; 206
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	29 81       	ldd	r18, Y+1	; 0x01
    3204:	fc 01       	movw	r30, r24
    3206:	20 83       	st	Z, r18

		sei();
    3208:	78 94       	sei
    320a:	03 c0       	rjmp	.+6      	; 0x3212 <UART1_Write+0x94>
	}
	else
		altUart1Write(data);
    320c:	89 81       	ldd	r24, Y+1	; 0x01
    320e:	0e 94 a5 18 	call	0x314a	; 0x314a <altUart1Write>
}
    3212:	0f 90       	pop	r0
    3214:	df 91       	pop	r29
    3216:	cf 91       	pop	r28
    3218:	08 95       	ret

0000321a <UART1_Read>:

unsigned char UART1_Read(void)
{
    321a:	cf 93       	push	r28
    321c:	df 93       	push	r29
    321e:	1f 92       	push	r1
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;

	if((UCSR1B >> RXCIE1) & 0x01)
    3224:	89 ec       	ldi	r24, 0xC9	; 201
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	fc 01       	movw	r30, r24
    322a:	80 81       	ld	r24, Z
    322c:	88 1f       	adc	r24, r24
    322e:	88 27       	eor	r24, r24
    3230:	88 1f       	adc	r24, r24
    3232:	88 2f       	mov	r24, r24
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	81 70       	andi	r24, 0x01	; 1
    3238:	99 27       	eor	r25, r25
    323a:	89 2b       	or	r24, r25
    323c:	e9 f0       	breq	.+58     	; 0x3278 <UART1_Read+0x5e>
	{
		while(rx1_counter == 0);
    323e:	00 00       	nop
    3240:	80 91 7a 02 	lds	r24, 0x027A
    3244:	88 23       	and	r24, r24
    3246:	e1 f3       	breq	.-8      	; 0x3240 <UART1_Read+0x26>

		data = rx1_buffer[rx1_rd_index];
    3248:	80 91 7b 02 	lds	r24, 0x027B
    324c:	88 2f       	mov	r24, r24
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	87 5c       	subi	r24, 0xC7	; 199
    3252:	9d 4f       	sbci	r25, 0xFD	; 253
    3254:	fc 01       	movw	r30, r24
    3256:	80 81       	ld	r24, Z
    3258:	89 83       	std	Y+1, r24	; 0x01

		if(++rx1_rd_index == RX1_BUFFER_SIZE)
    325a:	80 91 7b 02 	lds	r24, 0x027B
    325e:	8f 5f       	subi	r24, 0xFF	; 255
    3260:	80 93 7b 02 	sts	0x027B, r24
    3264:	80 34       	cpi	r24, 0x40	; 64
    3266:	11 f4       	brne	.+4      	; 0x326c <UART1_Read+0x52>
			rx1_rd_index = 0;
    3268:	10 92 7b 02 	sts	0x027B, r1

		rx1_counter--;
    326c:	80 91 7a 02 	lds	r24, 0x027A
    3270:	81 50       	subi	r24, 0x01	; 1
    3272:	80 93 7a 02 	sts	0x027A, r24
    3276:	13 c0       	rjmp	.+38     	; 0x329e <UART1_Read+0x84>
	}
	else
	{
		while( !((UCSR1A >> RXC1) & 0x01));
    3278:	00 00       	nop
    327a:	88 ec       	ldi	r24, 0xC8	; 200
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	fc 01       	movw	r30, r24
    3280:	80 81       	ld	r24, Z
    3282:	88 1f       	adc	r24, r24
    3284:	88 27       	eor	r24, r24
    3286:	88 1f       	adc	r24, r24
    3288:	88 2f       	mov	r24, r24
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	81 70       	andi	r24, 0x01	; 1
    328e:	99 27       	eor	r25, r25
    3290:	89 2b       	or	r24, r25
    3292:	99 f3       	breq	.-26     	; 0x327a <UART1_Read+0x60>
		data = UDR1;
    3294:	8e ec       	ldi	r24, 0xCE	; 206
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	fc 01       	movw	r30, r24
    329a:	80 81       	ld	r24, Z
    329c:	89 83       	std	Y+1, r24	; 0x01
	}

	return data;
    329e:	89 81       	ldd	r24, Y+1	; 0x01
}
    32a0:	0f 90       	pop	r0
    32a2:	df 91       	pop	r29
    32a4:	cf 91       	pop	r28
    32a6:	08 95       	ret

000032a8 <UART1_Buffer>:

void UART1_Buffer(uint8_t* str) {
    32a8:	cf 93       	push	r28
    32aa:	df 93       	push	r29
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <UART1_Buffer+0x6>
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	9a 83       	std	Y+2, r25	; 0x02
    32b4:	89 83       	std	Y+1, r24	; 0x01
	while(*str) {
    32b6:	0b c0       	rjmp	.+22     	; 0x32ce <UART1_Buffer+0x26>
		altUart1Write(*str++);
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	9a 81       	ldd	r25, Y+2	; 0x02
    32bc:	9c 01       	movw	r18, r24
    32be:	2f 5f       	subi	r18, 0xFF	; 255
    32c0:	3f 4f       	sbci	r19, 0xFF	; 255
    32c2:	3a 83       	std	Y+2, r19	; 0x02
    32c4:	29 83       	std	Y+1, r18	; 0x01
    32c6:	fc 01       	movw	r30, r24
    32c8:	80 81       	ld	r24, Z
    32ca:	0e 94 a5 18 	call	0x314a	; 0x314a <altUart1Write>

	return data;
}

void UART1_Buffer(uint8_t* str) {
	while(*str) {
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	9a 81       	ldd	r25, Y+2	; 0x02
    32d2:	fc 01       	movw	r30, r24
    32d4:	80 81       	ld	r24, Z
    32d6:	88 23       	and	r24, r24
    32d8:	79 f7       	brne	.-34     	; 0x32b8 <UART1_Buffer+0x10>
		altUart1Write(*str++);
	}
}
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0
    32de:	df 91       	pop	r29
    32e0:	cf 91       	pop	r28
    32e2:	08 95       	ret

000032e4 <wait_while_detection_tactic_one>:

/*
 * 	Function: 	 static void wait_while_detection_tactic_one(void)
 * 	Description: This will wait until the callback(sensor) is returning 1, so called detecting the enemy
 */
static void wait_while_detection_tactic_one(void) {
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	6c 97       	sbiw	r28, 0x1c	; 28
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	a8 e4       	ldi	r26, 0x48	; 72
    32fe:	b3 e4       	ldi	r27, 0x43	; 67
    3300:	89 83       	std	Y+1, r24	; 0x01
    3302:	9a 83       	std	Y+2, r25	; 0x02
    3304:	ab 83       	std	Y+3, r26	; 0x03
    3306:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e4       	ldi	r19, 0x40	; 64
    330c:	4c e1       	ldi	r20, 0x1C	; 28
    330e:	55 e4       	ldi	r21, 0x45	; 69
    3310:	69 81       	ldd	r22, Y+1	; 0x01
    3312:	7a 81       	ldd	r23, Y+2	; 0x02
    3314:	8b 81       	ldd	r24, Y+3	; 0x03
    3316:	9c 81       	ldd	r25, Y+4	; 0x04
    3318:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	8d 83       	std	Y+5, r24	; 0x05
    3322:	9e 83       	std	Y+6, r25	; 0x06
    3324:	af 83       	std	Y+7, r26	; 0x07
    3326:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e8       	ldi	r20, 0x80	; 128
    332e:	5f e3       	ldi	r21, 0x3F	; 63
    3330:	6d 81       	ldd	r22, Y+5	; 0x05
    3332:	7e 81       	ldd	r23, Y+6	; 0x06
    3334:	8f 81       	ldd	r24, Y+7	; 0x07
    3336:	98 85       	ldd	r25, Y+8	; 0x08
    3338:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    333c:	88 23       	and	r24, r24
    333e:	2c f4       	brge	.+10     	; 0x334a <wait_while_detection_tactic_one+0x66>
		__ticks = 1;
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	9a 87       	std	Y+10, r25	; 0x0a
    3346:	89 87       	std	Y+9, r24	; 0x09
    3348:	3f c0       	rjmp	.+126    	; 0x33c8 <wait_while_detection_tactic_one+0xe4>
	else if (__tmp > 65535)
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	3f ef       	ldi	r19, 0xFF	; 255
    334e:	4f e7       	ldi	r20, 0x7F	; 127
    3350:	57 e4       	ldi	r21, 0x47	; 71
    3352:	6d 81       	ldd	r22, Y+5	; 0x05
    3354:	7e 81       	ldd	r23, Y+6	; 0x06
    3356:	8f 81       	ldd	r24, Y+7	; 0x07
    3358:	98 85       	ldd	r25, Y+8	; 0x08
    335a:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    335e:	18 16       	cp	r1, r24
    3360:	4c f5       	brge	.+82     	; 0x33b4 <wait_while_detection_tactic_one+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	40 e2       	ldi	r20, 0x20	; 32
    3368:	51 e4       	ldi	r21, 0x41	; 65
    336a:	69 81       	ldd	r22, Y+1	; 0x01
    336c:	7a 81       	ldd	r23, Y+2	; 0x02
    336e:	8b 81       	ldd	r24, Y+3	; 0x03
    3370:	9c 81       	ldd	r25, Y+4	; 0x04
    3372:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	bc 01       	movw	r22, r24
    337c:	cd 01       	movw	r24, r26
    337e:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	9a 87       	std	Y+10, r25	; 0x0a
    3388:	89 87       	std	Y+9, r24	; 0x09
    338a:	0f c0       	rjmp	.+30     	; 0x33aa <wait_while_detection_tactic_one+0xc6>
    338c:	8a ef       	ldi	r24, 0xFA	; 250
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	9c 87       	std	Y+12, r25	; 0x0c
    3392:	8b 87       	std	Y+11, r24	; 0x0b
    3394:	8b 85       	ldd	r24, Y+11	; 0x0b
    3396:	9c 85       	ldd	r25, Y+12	; 0x0c
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	f1 f7       	brne	.-4      	; 0x3398 <wait_while_detection_tactic_one+0xb4>
    339c:	9c 87       	std	Y+12, r25	; 0x0c
    339e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33a0:	89 85       	ldd	r24, Y+9	; 0x09
    33a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	9a 87       	std	Y+10, r25	; 0x0a
    33a8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33aa:	89 85       	ldd	r24, Y+9	; 0x09
    33ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ae:	89 2b       	or	r24, r25
    33b0:	69 f7       	brne	.-38     	; 0x338c <wait_while_detection_tactic_one+0xa8>
    33b2:	14 c0       	rjmp	.+40     	; 0x33dc <wait_while_detection_tactic_one+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b4:	6d 81       	ldd	r22, Y+5	; 0x05
    33b6:	7e 81       	ldd	r23, Y+6	; 0x06
    33b8:	8f 81       	ldd	r24, Y+7	; 0x07
    33ba:	98 85       	ldd	r25, Y+8	; 0x08
    33bc:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	9a 87       	std	Y+10, r25	; 0x0a
    33c6:	89 87       	std	Y+9, r24	; 0x09
    33c8:	89 85       	ldd	r24, Y+9	; 0x09
    33ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    33cc:	9e 87       	std	Y+14, r25	; 0x0e
    33ce:	8d 87       	std	Y+13, r24	; 0x0d
    33d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	f1 f7       	brne	.-4      	; 0x33d4 <wait_while_detection_tactic_one+0xf0>
    33d8:	9e 87       	std	Y+14, r25	; 0x0e
    33da:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(200);
	while(TACTIC_ONE_POSITION[current_position].callback(0) == 1)
    33dc:	72 c0       	rjmp	.+228    	; 0x34c2 <wait_while_detection_tactic_one+0x1de>
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	a0 e2       	ldi	r26, 0x20	; 32
    33e4:	b1 e4       	ldi	r27, 0x41	; 65
    33e6:	8f 87       	std	Y+15, r24	; 0x0f
    33e8:	98 8b       	std	Y+16, r25	; 0x10
    33ea:	a9 8b       	std	Y+17, r26	; 0x11
    33ec:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e4       	ldi	r19, 0x40	; 64
    33f2:	4c e1       	ldi	r20, 0x1C	; 28
    33f4:	55 e4       	ldi	r21, 0x45	; 69
    33f6:	6f 85       	ldd	r22, Y+15	; 0x0f
    33f8:	78 89       	ldd	r23, Y+16	; 0x10
    33fa:	89 89       	ldd	r24, Y+17	; 0x11
    33fc:	9a 89       	ldd	r25, Y+18	; 0x12
    33fe:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	8b 8b       	std	Y+19, r24	; 0x13
    3408:	9c 8b       	std	Y+20, r25	; 0x14
    340a:	ad 8b       	std	Y+21, r26	; 0x15
    340c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	40 e8       	ldi	r20, 0x80	; 128
    3414:	5f e3       	ldi	r21, 0x3F	; 63
    3416:	6b 89       	ldd	r22, Y+19	; 0x13
    3418:	7c 89       	ldd	r23, Y+20	; 0x14
    341a:	8d 89       	ldd	r24, Y+21	; 0x15
    341c:	9e 89       	ldd	r25, Y+22	; 0x16
    341e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    3422:	88 23       	and	r24, r24
    3424:	2c f4       	brge	.+10     	; 0x3430 <wait_while_detection_tactic_one+0x14c>
		__ticks = 1;
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	98 8f       	std	Y+24, r25	; 0x18
    342c:	8f 8b       	std	Y+23, r24	; 0x17
    342e:	3f c0       	rjmp	.+126    	; 0x34ae <wait_while_detection_tactic_one+0x1ca>
	else if (__tmp > 65535)
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	3f ef       	ldi	r19, 0xFF	; 255
    3434:	4f e7       	ldi	r20, 0x7F	; 127
    3436:	57 e4       	ldi	r21, 0x47	; 71
    3438:	6b 89       	ldd	r22, Y+19	; 0x13
    343a:	7c 89       	ldd	r23, Y+20	; 0x14
    343c:	8d 89       	ldd	r24, Y+21	; 0x15
    343e:	9e 89       	ldd	r25, Y+22	; 0x16
    3440:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    3444:	18 16       	cp	r1, r24
    3446:	4c f5       	brge	.+82     	; 0x349a <wait_while_detection_tactic_one+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e2       	ldi	r20, 0x20	; 32
    344e:	51 e4       	ldi	r21, 0x41	; 65
    3450:	6f 85       	ldd	r22, Y+15	; 0x0f
    3452:	78 89       	ldd	r23, Y+16	; 0x10
    3454:	89 89       	ldd	r24, Y+17	; 0x11
    3456:	9a 89       	ldd	r25, Y+18	; 0x12
    3458:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	bc 01       	movw	r22, r24
    3462:	cd 01       	movw	r24, r26
    3464:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	98 8f       	std	Y+24, r25	; 0x18
    346e:	8f 8b       	std	Y+23, r24	; 0x17
    3470:	0f c0       	rjmp	.+30     	; 0x3490 <wait_while_detection_tactic_one+0x1ac>
    3472:	8a ef       	ldi	r24, 0xFA	; 250
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	9a 8f       	std	Y+26, r25	; 0x1a
    3478:	89 8f       	std	Y+25, r24	; 0x19
    347a:	89 8d       	ldd	r24, Y+25	; 0x19
    347c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <wait_while_detection_tactic_one+0x19a>
    3482:	9a 8f       	std	Y+26, r25	; 0x1a
    3484:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3486:	8f 89       	ldd	r24, Y+23	; 0x17
    3488:	98 8d       	ldd	r25, Y+24	; 0x18
    348a:	01 97       	sbiw	r24, 0x01	; 1
    348c:	98 8f       	std	Y+24, r25	; 0x18
    348e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3490:	8f 89       	ldd	r24, Y+23	; 0x17
    3492:	98 8d       	ldd	r25, Y+24	; 0x18
    3494:	89 2b       	or	r24, r25
    3496:	69 f7       	brne	.-38     	; 0x3472 <wait_while_detection_tactic_one+0x18e>
    3498:	14 c0       	rjmp	.+40     	; 0x34c2 <wait_while_detection_tactic_one+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    349a:	6b 89       	ldd	r22, Y+19	; 0x13
    349c:	7c 89       	ldd	r23, Y+20	; 0x14
    349e:	8d 89       	ldd	r24, Y+21	; 0x15
    34a0:	9e 89       	ldd	r25, Y+22	; 0x16
    34a2:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	98 8f       	std	Y+24, r25	; 0x18
    34ac:	8f 8b       	std	Y+23, r24	; 0x17
    34ae:	8f 89       	ldd	r24, Y+23	; 0x17
    34b0:	98 8d       	ldd	r25, Y+24	; 0x18
    34b2:	9c 8f       	std	Y+28, r25	; 0x1c
    34b4:	8b 8f       	std	Y+27, r24	; 0x1b
    34b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ba:	01 97       	sbiw	r24, 0x01	; 1
    34bc:	f1 f7       	brne	.-4      	; 0x34ba <wait_while_detection_tactic_one+0x1d6>
    34be:	9c 8f       	std	Y+28, r25	; 0x1c
    34c0:	8b 8f       	std	Y+27, r24	; 0x1b
    34c2:	80 91 7c 02 	lds	r24, 0x027C
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	4b e0       	ldi	r20, 0x0B	; 11
    34cc:	42 9f       	mul	r20, r18
    34ce:	c0 01       	movw	r24, r0
    34d0:	43 9f       	mul	r20, r19
    34d2:	90 0d       	add	r25, r0
    34d4:	11 24       	eor	r1, r1
    34d6:	80 5e       	subi	r24, 0xE0	; 224
    34d8:	9e 4f       	sbci	r25, 0xFE	; 254
    34da:	fc 01       	movw	r30, r24
    34dc:	20 81       	ld	r18, Z
    34de:	31 81       	ldd	r19, Z+1	; 0x01
    34e0:	60 e0       	ldi	r22, 0x00	; 0
    34e2:	70 e0       	ldi	r23, 0x00	; 0
    34e4:	cb 01       	movw	r24, r22
    34e6:	f9 01       	movw	r30, r18
    34e8:	09 95       	icall
    34ea:	81 30       	cpi	r24, 0x01	; 1
    34ec:	09 f4       	brne	.+2      	; 0x34f0 <wait_while_detection_tactic_one+0x20c>
    34ee:	77 cf       	rjmp	.-274    	; 0x33de <wait_while_detection_tactic_one+0xfa>
		_delay_ms(10);
	next_position = current_position;
    34f0:	80 91 7c 02 	lds	r24, 0x027C
    34f4:	80 93 7d 02 	sts	0x027D, r24
	active_state = TACTIC_ONE;
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	80 93 16 01 	sts	0x0116, r24

}
    34fe:	6c 96       	adiw	r28, 0x1c	; 28
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	df 91       	pop	r29
    350c:	cf 91       	pop	r28
    350e:	08 95       	ret

00003510 <darkside>:

void darkside(void) {
    3510:	cf 93       	push	r28
    3512:	df 93       	push	r29
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
    3518:	a3 97       	sbiw	r28, 0x23	; 35
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61


	// setting the starting position
	struct odometry_position startingPosition; startingPosition.x = 0; startingPosition.y = 0; startingPosition.angle = 0;
    3524:	1e 8e       	std	Y+30, r1	; 0x1e
    3526:	1d 8e       	std	Y+29, r1	; 0x1d
    3528:	18 a2       	std	Y+32, r1	; 0x20
    352a:	1f 8e       	std	Y+31, r1	; 0x1f
    352c:	1a a2       	std	Y+34, r1	; 0x22
    352e:	19 a2       	std	Y+33, r1	; 0x21

	// sending the starting position to odometry
	odometry_set_position(&startingPosition);
    3530:	ce 01       	movw	r24, r28
    3532:	4d 96       	adiw	r24, 0x1d	; 29
    3534:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <odometry_set_position>

	while(1) {
		switch(active_state) {
    3538:	80 91 16 01 	lds	r24, 0x0116
    353c:	88 2f       	mov	r24, r24
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	81 30       	cpi	r24, 0x01	; 1
    3542:	91 05       	cpc	r25, r1
    3544:	09 f4       	brne	.+2      	; 0x3548 <darkside+0x38>
    3546:	8f c0       	rjmp	.+286    	; 0x3666 <darkside+0x156>
    3548:	83 35       	cpi	r24, 0x53	; 83
    354a:	91 05       	cpc	r25, r1
    354c:	91 f0       	breq	.+36     	; 0x3572 <darkside+0x62>
    354e:	89 2b       	or	r24, r25
    3550:	09 f0       	breq	.+2      	; 0x3554 <darkside+0x44>
    3552:	59 c1       	rjmp	.+690    	; 0x3806 <darkside+0x2f6>
		case COLLISION:		// COLLISION ! DON'T FORGET BREAK !
			if(current_position == 0) {
    3554:	80 91 7c 02 	lds	r24, 0x027C
    3558:	88 23       	and	r24, r24
    355a:	19 f4       	brne	.+6      	; 0x3562 <darkside+0x52>
				wait_while_detection_tactic_one();
    355c:	0e 94 72 19 	call	0x32e4	; 0x32e4 <wait_while_detection_tactic_one>
				break;
    3560:	52 c1       	rjmp	.+676    	; 0x3806 <darkside+0x2f6>
			} else if(current_position == 1) {
    3562:	80 91 7c 02 	lds	r24, 0x027C
    3566:	81 30       	cpi	r24, 0x01	; 1
    3568:	19 f4       	brne	.+6      	; 0x3570 <darkside+0x60>
				wait_while_detection_tactic_one();
    356a:	0e 94 72 19 	call	0x32e4	; 0x32e4 <wait_while_detection_tactic_one>
				break;
    356e:	4b c1       	rjmp	.+662    	; 0x3806 <darkside+0x2f6>
			}

			break;
    3570:	4a c1       	rjmp	.+660    	; 0x3806 <darkside+0x2f6>
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	aa e7       	ldi	r26, 0x7A	; 122
    3578:	b4 e4       	ldi	r27, 0x44	; 68
    357a:	89 83       	std	Y+1, r24	; 0x01
    357c:	9a 83       	std	Y+2, r25	; 0x02
    357e:	ab 83       	std	Y+3, r26	; 0x03
    3580:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e4       	ldi	r19, 0x40	; 64
    3586:	4c e1       	ldi	r20, 0x1C	; 28
    3588:	55 e4       	ldi	r21, 0x45	; 69
    358a:	69 81       	ldd	r22, Y+1	; 0x01
    358c:	7a 81       	ldd	r23, Y+2	; 0x02
    358e:	8b 81       	ldd	r24, Y+3	; 0x03
    3590:	9c 81       	ldd	r25, Y+4	; 0x04
    3592:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	8d 83       	std	Y+5, r24	; 0x05
    359c:	9e 83       	std	Y+6, r25	; 0x06
    359e:	af 83       	std	Y+7, r26	; 0x07
    35a0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e8       	ldi	r20, 0x80	; 128
    35a8:	5f e3       	ldi	r21, 0x3F	; 63
    35aa:	6d 81       	ldd	r22, Y+5	; 0x05
    35ac:	7e 81       	ldd	r23, Y+6	; 0x06
    35ae:	8f 81       	ldd	r24, Y+7	; 0x07
    35b0:	98 85       	ldd	r25, Y+8	; 0x08
    35b2:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    35b6:	88 23       	and	r24, r24
    35b8:	2c f4       	brge	.+10     	; 0x35c4 <darkside+0xb4>
		__ticks = 1;
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	9a 87       	std	Y+10, r25	; 0x0a
    35c0:	89 87       	std	Y+9, r24	; 0x09
    35c2:	3f c0       	rjmp	.+126    	; 0x3642 <darkside+0x132>
	else if (__tmp > 65535)
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	3f ef       	ldi	r19, 0xFF	; 255
    35c8:	4f e7       	ldi	r20, 0x7F	; 127
    35ca:	57 e4       	ldi	r21, 0x47	; 71
    35cc:	6d 81       	ldd	r22, Y+5	; 0x05
    35ce:	7e 81       	ldd	r23, Y+6	; 0x06
    35d0:	8f 81       	ldd	r24, Y+7	; 0x07
    35d2:	98 85       	ldd	r25, Y+8	; 0x08
    35d4:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    35d8:	18 16       	cp	r1, r24
    35da:	4c f5       	brge	.+82     	; 0x362e <darkside+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	40 e2       	ldi	r20, 0x20	; 32
    35e2:	51 e4       	ldi	r21, 0x41	; 65
    35e4:	69 81       	ldd	r22, Y+1	; 0x01
    35e6:	7a 81       	ldd	r23, Y+2	; 0x02
    35e8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ea:	9c 81       	ldd	r25, Y+4	; 0x04
    35ec:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	bc 01       	movw	r22, r24
    35f6:	cd 01       	movw	r24, r26
    35f8:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	9a 87       	std	Y+10, r25	; 0x0a
    3602:	89 87       	std	Y+9, r24	; 0x09
    3604:	0f c0       	rjmp	.+30     	; 0x3624 <darkside+0x114>
    3606:	8a ef       	ldi	r24, 0xFA	; 250
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	9c 87       	std	Y+12, r25	; 0x0c
    360c:	8b 87       	std	Y+11, r24	; 0x0b
    360e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3610:	9c 85       	ldd	r25, Y+12	; 0x0c
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	f1 f7       	brne	.-4      	; 0x3612 <darkside+0x102>
    3616:	9c 87       	std	Y+12, r25	; 0x0c
    3618:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361a:	89 85       	ldd	r24, Y+9	; 0x09
    361c:	9a 85       	ldd	r25, Y+10	; 0x0a
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	9a 87       	std	Y+10, r25	; 0x0a
    3622:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3624:	89 85       	ldd	r24, Y+9	; 0x09
    3626:	9a 85       	ldd	r25, Y+10	; 0x0a
    3628:	89 2b       	or	r24, r25
    362a:	69 f7       	brne	.-38     	; 0x3606 <darkside+0xf6>
    362c:	14 c0       	rjmp	.+40     	; 0x3656 <darkside+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    362e:	6d 81       	ldd	r22, Y+5	; 0x05
    3630:	7e 81       	ldd	r23, Y+6	; 0x06
    3632:	8f 81       	ldd	r24, Y+7	; 0x07
    3634:	98 85       	ldd	r25, Y+8	; 0x08
    3636:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	9a 87       	std	Y+10, r25	; 0x0a
    3640:	89 87       	std	Y+9, r24	; 0x09
    3642:	89 85       	ldd	r24, Y+9	; 0x09
    3644:	9a 85       	ldd	r25, Y+10	; 0x0a
    3646:	9e 87       	std	Y+14, r25	; 0x0e
    3648:	8d 87       	std	Y+13, r24	; 0x0d
    364a:	8d 85       	ldd	r24, Y+13	; 0x0d
    364c:	9e 85       	ldd	r25, Y+14	; 0x0e
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	f1 f7       	brne	.-4      	; 0x364e <darkside+0x13e>
    3652:	9e 87       	std	Y+14, r25	; 0x0e
    3654:	8d 87       	std	Y+13, r24	; 0x0d
		case STUCK:			// STUCK
			_delay_ms(1000);
			active_state = TACTIC_ONE;
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	80 93 16 01 	sts	0x0116, r24
			next_position = current_position;
    365c:	80 91 7c 02 	lds	r24, 0x027C
    3660:	80 93 7d 02 	sts	0x027D, r24

			break;
    3664:	d0 c0       	rjmp	.+416    	; 0x3806 <darkside+0x2f6>
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    3666:	80 91 7d 02 	lds	r24, 0x027D
    366a:	80 93 7c 02 	sts	0x027C, r24
    366e:	c6 c0       	rjmp	.+396    	; 0x37fc <darkside+0x2ec>

				// send the gotoField and receive status
				odometry_status = odometry_move_to_position(&TACTIC_ONE_POSITION[current_position].point, TACTIC_ONE_POSITION[current_position].speed, TACTIC_ONE_POSITION[current_position].direction, TACTIC_ONE_POSITION[current_position].callback);
    3670:	80 91 7c 02 	lds	r24, 0x027C
    3674:	28 2f       	mov	r18, r24
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	4b e0       	ldi	r20, 0x0B	; 11
    367a:	42 9f       	mul	r20, r18
    367c:	c0 01       	movw	r24, r0
    367e:	43 9f       	mul	r20, r19
    3680:	90 0d       	add	r25, r0
    3682:	11 24       	eor	r1, r1
    3684:	80 5e       	subi	r24, 0xE0	; 224
    3686:	9e 4f       	sbci	r25, 0xFE	; 254
    3688:	dc 01       	movw	r26, r24
    368a:	4d 91       	ld	r20, X+
    368c:	5c 91       	ld	r21, X
    368e:	80 91 7c 02 	lds	r24, 0x027C
    3692:	28 2f       	mov	r18, r24
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	6b e0       	ldi	r22, 0x0B	; 11
    3698:	62 9f       	mul	r22, r18
    369a:	c0 01       	movw	r24, r0
    369c:	63 9f       	mul	r22, r19
    369e:	90 0d       	add	r25, r0
    36a0:	11 24       	eor	r1, r1
    36a2:	81 5e       	subi	r24, 0xE1	; 225
    36a4:	9e 4f       	sbci	r25, 0xFE	; 254
    36a6:	dc 01       	movw	r26, r24
    36a8:	ec 91       	ld	r30, X
    36aa:	80 91 7c 02 	lds	r24, 0x027C
    36ae:	28 2f       	mov	r18, r24
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	6b e0       	ldi	r22, 0x0B	; 11
    36b4:	62 9f       	mul	r22, r18
    36b6:	c0 01       	movw	r24, r0
    36b8:	63 9f       	mul	r22, r19
    36ba:	90 0d       	add	r25, r0
    36bc:	11 24       	eor	r1, r1
    36be:	82 5e       	subi	r24, 0xE2	; 226
    36c0:	9e 4f       	sbci	r25, 0xFE	; 254
    36c2:	dc 01       	movw	r26, r24
    36c4:	7c 91       	ld	r23, X
    36c6:	80 91 7c 02 	lds	r24, 0x027C
    36ca:	28 2f       	mov	r18, r24
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	6b e0       	ldi	r22, 0x0B	; 11
    36d0:	62 9f       	mul	r22, r18
    36d2:	c0 01       	movw	r24, r0
    36d4:	63 9f       	mul	r22, r19
    36d6:	90 0d       	add	r25, r0
    36d8:	11 24       	eor	r1, r1
    36da:	89 5e       	subi	r24, 0xE9	; 233
    36dc:	9e 4f       	sbci	r25, 0xFE	; 254
    36de:	9a 01       	movw	r18, r20
    36e0:	4e 2f       	mov	r20, r30
    36e2:	67 2f       	mov	r22, r23
    36e4:	0e 94 43 0c 	call	0x1886	; 0x1886 <odometry_move_to_position>
    36e8:	80 93 7e 02 	sts	0x027E, r24

				// if odometry fails set state to collision
				if(odometry_status == ODOMETRY_FAIL)
    36ec:	80 91 7e 02 	lds	r24, 0x027E
    36f0:	81 30       	cpi	r24, 0x01	; 1
    36f2:	19 f4       	brne	.+6      	; 0x36fa <darkside+0x1ea>
				{
					active_state = COLLISION;
    36f4:	10 92 16 01 	sts	0x0116, r1
					break;
    36f8:	86 c0       	rjmp	.+268    	; 0x3806 <darkside+0x2f6>
				}
				else if(odometry_status == ODOMETRY_STUCK)
				{

				}
				if(current_position == 0) {
    36fa:	80 91 7c 02 	lds	r24, 0x027C
    36fe:	88 23       	and	r24, r24
    3700:	09 f0       	breq	.+2      	; 0x3704 <darkside+0x1f4>
    3702:	72 c0       	rjmp	.+228    	; 0x37e8 <darkside+0x2d8>
    3704:	80 e0       	ldi	r24, 0x00	; 0
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	aa ef       	ldi	r26, 0xFA	; 250
    370a:	b4 e4       	ldi	r27, 0x44	; 68
    370c:	8f 87       	std	Y+15, r24	; 0x0f
    370e:	98 8b       	std	Y+16, r25	; 0x10
    3710:	a9 8b       	std	Y+17, r26	; 0x11
    3712:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	30 e4       	ldi	r19, 0x40	; 64
    3718:	4c e1       	ldi	r20, 0x1C	; 28
    371a:	55 e4       	ldi	r21, 0x45	; 69
    371c:	6f 85       	ldd	r22, Y+15	; 0x0f
    371e:	78 89       	ldd	r23, Y+16	; 0x10
    3720:	89 89       	ldd	r24, Y+17	; 0x11
    3722:	9a 89       	ldd	r25, Y+18	; 0x12
    3724:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    3728:	dc 01       	movw	r26, r24
    372a:	cb 01       	movw	r24, r22
    372c:	8b 8b       	std	Y+19, r24	; 0x13
    372e:	9c 8b       	std	Y+20, r25	; 0x14
    3730:	ad 8b       	std	Y+21, r26	; 0x15
    3732:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	40 e8       	ldi	r20, 0x80	; 128
    373a:	5f e3       	ldi	r21, 0x3F	; 63
    373c:	6b 89       	ldd	r22, Y+19	; 0x13
    373e:	7c 89       	ldd	r23, Y+20	; 0x14
    3740:	8d 89       	ldd	r24, Y+21	; 0x15
    3742:	9e 89       	ldd	r25, Y+22	; 0x16
    3744:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    3748:	88 23       	and	r24, r24
    374a:	2c f4       	brge	.+10     	; 0x3756 <darkside+0x246>
		__ticks = 1;
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	98 8f       	std	Y+24, r25	; 0x18
    3752:	8f 8b       	std	Y+23, r24	; 0x17
    3754:	3f c0       	rjmp	.+126    	; 0x37d4 <darkside+0x2c4>
	else if (__tmp > 65535)
    3756:	20 e0       	ldi	r18, 0x00	; 0
    3758:	3f ef       	ldi	r19, 0xFF	; 255
    375a:	4f e7       	ldi	r20, 0x7F	; 127
    375c:	57 e4       	ldi	r21, 0x47	; 71
    375e:	6b 89       	ldd	r22, Y+19	; 0x13
    3760:	7c 89       	ldd	r23, Y+20	; 0x14
    3762:	8d 89       	ldd	r24, Y+21	; 0x15
    3764:	9e 89       	ldd	r25, Y+22	; 0x16
    3766:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    376a:	18 16       	cp	r1, r24
    376c:	4c f5       	brge	.+82     	; 0x37c0 <darkside+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	40 e2       	ldi	r20, 0x20	; 32
    3774:	51 e4       	ldi	r21, 0x41	; 65
    3776:	6f 85       	ldd	r22, Y+15	; 0x0f
    3778:	78 89       	ldd	r23, Y+16	; 0x10
    377a:	89 89       	ldd	r24, Y+17	; 0x11
    377c:	9a 89       	ldd	r25, Y+18	; 0x12
    377e:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	bc 01       	movw	r22, r24
    3788:	cd 01       	movw	r24, r26
    378a:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	98 8f       	std	Y+24, r25	; 0x18
    3794:	8f 8b       	std	Y+23, r24	; 0x17
    3796:	0f c0       	rjmp	.+30     	; 0x37b6 <darkside+0x2a6>
    3798:	8a ef       	ldi	r24, 0xFA	; 250
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	9a 8f       	std	Y+26, r25	; 0x1a
    379e:	89 8f       	std	Y+25, r24	; 0x19
    37a0:	89 8d       	ldd	r24, Y+25	; 0x19
    37a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	f1 f7       	brne	.-4      	; 0x37a4 <darkside+0x294>
    37a8:	9a 8f       	std	Y+26, r25	; 0x1a
    37aa:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ac:	8f 89       	ldd	r24, Y+23	; 0x17
    37ae:	98 8d       	ldd	r25, Y+24	; 0x18
    37b0:	01 97       	sbiw	r24, 0x01	; 1
    37b2:	98 8f       	std	Y+24, r25	; 0x18
    37b4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b6:	8f 89       	ldd	r24, Y+23	; 0x17
    37b8:	98 8d       	ldd	r25, Y+24	; 0x18
    37ba:	89 2b       	or	r24, r25
    37bc:	69 f7       	brne	.-38     	; 0x3798 <darkside+0x288>
    37be:	14 c0       	rjmp	.+40     	; 0x37e8 <darkside+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c0:	6b 89       	ldd	r22, Y+19	; 0x13
    37c2:	7c 89       	ldd	r23, Y+20	; 0x14
    37c4:	8d 89       	ldd	r24, Y+21	; 0x15
    37c6:	9e 89       	ldd	r25, Y+22	; 0x16
    37c8:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	98 8f       	std	Y+24, r25	; 0x18
    37d2:	8f 8b       	std	Y+23, r24	; 0x17
    37d4:	8f 89       	ldd	r24, Y+23	; 0x17
    37d6:	98 8d       	ldd	r25, Y+24	; 0x18
    37d8:	9c 8f       	std	Y+28, r25	; 0x1c
    37da:	8b 8f       	std	Y+27, r24	; 0x1b
    37dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37e0:	01 97       	sbiw	r24, 0x01	; 1
    37e2:	f1 f7       	brne	.-4      	; 0x37e0 <darkside+0x2d0>
    37e4:	9c 8f       	std	Y+28, r25	; 0x1c
    37e6:	8b 8f       	std	Y+27, r24	; 0x1b
					_delay_ms(2000);
				}
				// last position
				if(current_position == (TACTIC_ONE_POSITION_COUNT - 1))
    37e8:	80 91 7c 02 	lds	r24, 0x027C
    37ec:	81 30       	cpi	r24, 0x01	; 1
    37ee:	09 f4       	brne	.+2      	; 0x37f2 <darkside+0x2e2>
				{
					while(1);
    37f0:	ff cf       	rjmp	.-2      	; 0x37f0 <darkside+0x2e0>
			active_state = TACTIC_ONE;
			next_position = current_position;

			break;
		case TACTIC_ONE:	// TACTIC ONE
			for(current_position = next_position; current_position < TACTIC_ONE_POSITION_COUNT; current_position++) {		// go through the position counts
    37f2:	80 91 7c 02 	lds	r24, 0x027C
    37f6:	8f 5f       	subi	r24, 0xFF	; 255
    37f8:	80 93 7c 02 	sts	0x027C, r24
    37fc:	80 91 7c 02 	lds	r24, 0x027C
    3800:	82 30       	cpi	r24, 0x02	; 2
    3802:	08 f4       	brcc	.+2      	; 0x3806 <darkside+0x2f6>
    3804:	35 cf       	rjmp	.-406    	; 0x3670 <darkside+0x160>
				{
					while(1);
				}
			}//end of for
		}//end of switch
	}//end of while
    3806:	98 ce       	rjmp	.-720    	; 0x3538 <darkside+0x28>

00003808 <main>:
#include "debug.h"
#include "can.h"
#include <avr/interrupt.h>

int main()
{
    3808:	cf 93       	push	r28
    380a:	df 93       	push	r29
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
    3810:	2e 97       	sbiw	r28, 0x0e	; 14
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	f8 94       	cli
    3816:	de bf       	out	0x3e, r29	; 62
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	cd bf       	out	0x3d, r28	; 61

	system_init();
    381c:	0e 94 22 14 	call	0x2844	; 0x2844 <system_init>
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	90 e8       	ldi	r25, 0x80	; 128
    3824:	ab e3       	ldi	r26, 0x3B	; 59
    3826:	b5 e4       	ldi	r27, 0x45	; 69
    3828:	89 83       	std	Y+1, r24	; 0x01
    382a:	9a 83       	std	Y+2, r25	; 0x02
    382c:	ab 83       	std	Y+3, r26	; 0x03
    382e:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e4       	ldi	r19, 0x40	; 64
    3834:	4c e1       	ldi	r20, 0x1C	; 28
    3836:	55 e4       	ldi	r21, 0x45	; 69
    3838:	69 81       	ldd	r22, Y+1	; 0x01
    383a:	7a 81       	ldd	r23, Y+2	; 0x02
    383c:	8b 81       	ldd	r24, Y+3	; 0x03
    383e:	9c 81       	ldd	r25, Y+4	; 0x04
    3840:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	8d 83       	std	Y+5, r24	; 0x05
    384a:	9e 83       	std	Y+6, r25	; 0x06
    384c:	af 83       	std	Y+7, r26	; 0x07
    384e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3850:	20 e0       	ldi	r18, 0x00	; 0
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	40 e8       	ldi	r20, 0x80	; 128
    3856:	5f e3       	ldi	r21, 0x3F	; 63
    3858:	6d 81       	ldd	r22, Y+5	; 0x05
    385a:	7e 81       	ldd	r23, Y+6	; 0x06
    385c:	8f 81       	ldd	r24, Y+7	; 0x07
    385e:	98 85       	ldd	r25, Y+8	; 0x08
    3860:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <__cmpsf2>
    3864:	88 23       	and	r24, r24
    3866:	2c f4       	brge	.+10     	; 0x3872 <main+0x6a>
		__ticks = 1;
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	9a 87       	std	Y+10, r25	; 0x0a
    386e:	89 87       	std	Y+9, r24	; 0x09
    3870:	3f c0       	rjmp	.+126    	; 0x38f0 <main+0xe8>
	else if (__tmp > 65535)
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	3f ef       	ldi	r19, 0xFF	; 255
    3876:	4f e7       	ldi	r20, 0x7F	; 127
    3878:	57 e4       	ldi	r21, 0x47	; 71
    387a:	6d 81       	ldd	r22, Y+5	; 0x05
    387c:	7e 81       	ldd	r23, Y+6	; 0x06
    387e:	8f 81       	ldd	r24, Y+7	; 0x07
    3880:	98 85       	ldd	r25, Y+8	; 0x08
    3882:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__gesf2>
    3886:	18 16       	cp	r1, r24
    3888:	4c f5       	brge	.+82     	; 0x38dc <main+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    388a:	20 e0       	ldi	r18, 0x00	; 0
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	40 e2       	ldi	r20, 0x20	; 32
    3890:	51 e4       	ldi	r21, 0x41	; 65
    3892:	69 81       	ldd	r22, Y+1	; 0x01
    3894:	7a 81       	ldd	r23, Y+2	; 0x02
    3896:	8b 81       	ldd	r24, Y+3	; 0x03
    3898:	9c 81       	ldd	r25, Y+4	; 0x04
    389a:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <__mulsf3>
    389e:	dc 01       	movw	r26, r24
    38a0:	cb 01       	movw	r24, r22
    38a2:	bc 01       	movw	r22, r24
    38a4:	cd 01       	movw	r24, r26
    38a6:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	9a 87       	std	Y+10, r25	; 0x0a
    38b0:	89 87       	std	Y+9, r24	; 0x09
    38b2:	0f c0       	rjmp	.+30     	; 0x38d2 <main+0xca>
    38b4:	8a ef       	ldi	r24, 0xFA	; 250
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	9c 87       	std	Y+12, r25	; 0x0c
    38ba:	8b 87       	std	Y+11, r24	; 0x0b
    38bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    38be:	9c 85       	ldd	r25, Y+12	; 0x0c
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	f1 f7       	brne	.-4      	; 0x38c0 <main+0xb8>
    38c4:	9c 87       	std	Y+12, r25	; 0x0c
    38c6:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c8:	89 85       	ldd	r24, Y+9	; 0x09
    38ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    38cc:	01 97       	sbiw	r24, 0x01	; 1
    38ce:	9a 87       	std	Y+10, r25	; 0x0a
    38d0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d2:	89 85       	ldd	r24, Y+9	; 0x09
    38d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38d6:	89 2b       	or	r24, r25
    38d8:	69 f7       	brne	.-38     	; 0x38b4 <main+0xac>
    38da:	14 c0       	rjmp	.+40     	; 0x3904 <main+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38dc:	6d 81       	ldd	r22, Y+5	; 0x05
    38de:	7e 81       	ldd	r23, Y+6	; 0x06
    38e0:	8f 81       	ldd	r24, Y+7	; 0x07
    38e2:	98 85       	ldd	r25, Y+8	; 0x08
    38e4:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    38e8:	dc 01       	movw	r26, r24
    38ea:	cb 01       	movw	r24, r22
    38ec:	9a 87       	std	Y+10, r25	; 0x0a
    38ee:	89 87       	std	Y+9, r24	; 0x09
    38f0:	89 85       	ldd	r24, Y+9	; 0x09
    38f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38f4:	9e 87       	std	Y+14, r25	; 0x0e
    38f6:	8d 87       	std	Y+13, r24	; 0x0d
    38f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	f1 f7       	brne	.-4      	; 0x38fc <main+0xf4>
    3900:	9e 87       	std	Y+14, r25	; 0x0e
    3902:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(3000);

	while(1) {
		if(sensor_fc()) {
    3904:	0e 94 c4 10 	call	0x2188	; 0x2188 <sensor_fc>
    3908:	88 23       	and	r24, r24
    390a:	31 f0       	breq	.+12     	; 0x3918 <main+0x110>
			PORTG = 0x01;
    390c:	84 e3       	ldi	r24, 0x34	; 52
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	21 e0       	ldi	r18, 0x01	; 1
    3912:	fc 01       	movw	r30, r24
    3914:	20 83       	st	Z, r18
    3916:	04 c0       	rjmp	.+8      	; 0x3920 <main+0x118>
		} else{
			PORTG = 0x00;
    3918:	84 e3       	ldi	r24, 0x34	; 52
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	fc 01       	movw	r30, r24
    391e:	10 82       	st	Z, r1
		}
	}
    3920:	f1 cf       	rjmp	.-30     	; 0x3904 <main+0xfc>

00003922 <__udivmodsi4>:
    3922:	a1 e2       	ldi	r26, 0x21	; 33
    3924:	1a 2e       	mov	r1, r26
    3926:	aa 1b       	sub	r26, r26
    3928:	bb 1b       	sub	r27, r27
    392a:	fd 01       	movw	r30, r26
    392c:	0d c0       	rjmp	.+26     	; 0x3948 <__udivmodsi4_ep>

0000392e <__udivmodsi4_loop>:
    392e:	aa 1f       	adc	r26, r26
    3930:	bb 1f       	adc	r27, r27
    3932:	ee 1f       	adc	r30, r30
    3934:	ff 1f       	adc	r31, r31
    3936:	a2 17       	cp	r26, r18
    3938:	b3 07       	cpc	r27, r19
    393a:	e4 07       	cpc	r30, r20
    393c:	f5 07       	cpc	r31, r21
    393e:	20 f0       	brcs	.+8      	; 0x3948 <__udivmodsi4_ep>
    3940:	a2 1b       	sub	r26, r18
    3942:	b3 0b       	sbc	r27, r19
    3944:	e4 0b       	sbc	r30, r20
    3946:	f5 0b       	sbc	r31, r21

00003948 <__udivmodsi4_ep>:
    3948:	66 1f       	adc	r22, r22
    394a:	77 1f       	adc	r23, r23
    394c:	88 1f       	adc	r24, r24
    394e:	99 1f       	adc	r25, r25
    3950:	1a 94       	dec	r1
    3952:	69 f7       	brne	.-38     	; 0x392e <__udivmodsi4_loop>
    3954:	60 95       	com	r22
    3956:	70 95       	com	r23
    3958:	80 95       	com	r24
    395a:	90 95       	com	r25
    395c:	9b 01       	movw	r18, r22
    395e:	ac 01       	movw	r20, r24
    3960:	bd 01       	movw	r22, r26
    3962:	cf 01       	movw	r24, r30
    3964:	08 95       	ret

00003966 <__subsf3>:
    3966:	50 58       	subi	r21, 0x80	; 128

00003968 <__addsf3>:
    3968:	bb 27       	eor	r27, r27
    396a:	aa 27       	eor	r26, r26
    396c:	0e 94 cb 1c 	call	0x3996	; 0x3996 <__addsf3x>
    3970:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__fp_round>
    3974:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__fp_pscA>
    3978:	38 f0       	brcs	.+14     	; 0x3988 <__addsf3+0x20>
    397a:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__fp_pscB>
    397e:	20 f0       	brcs	.+8      	; 0x3988 <__addsf3+0x20>
    3980:	39 f4       	brne	.+14     	; 0x3990 <__addsf3+0x28>
    3982:	9f 3f       	cpi	r25, 0xFF	; 255
    3984:	19 f4       	brne	.+6      	; 0x398c <__addsf3+0x24>
    3986:	26 f4       	brtc	.+8      	; 0x3990 <__addsf3+0x28>
    3988:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__fp_nan>
    398c:	0e f4       	brtc	.+2      	; 0x3990 <__addsf3+0x28>
    398e:	e0 95       	com	r30
    3990:	e7 fb       	bst	r30, 7
    3992:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__fp_inf>

00003996 <__addsf3x>:
    3996:	e9 2f       	mov	r30, r25
    3998:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__fp_split3>
    399c:	58 f3       	brcs	.-42     	; 0x3974 <__addsf3+0xc>
    399e:	ba 17       	cp	r27, r26
    39a0:	62 07       	cpc	r22, r18
    39a2:	73 07       	cpc	r23, r19
    39a4:	84 07       	cpc	r24, r20
    39a6:	95 07       	cpc	r25, r21
    39a8:	20 f0       	brcs	.+8      	; 0x39b2 <__addsf3x+0x1c>
    39aa:	79 f4       	brne	.+30     	; 0x39ca <__addsf3x+0x34>
    39ac:	a6 f5       	brtc	.+104    	; 0x3a16 <__addsf3x+0x80>
    39ae:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__fp_zero>
    39b2:	0e f4       	brtc	.+2      	; 0x39b6 <__addsf3x+0x20>
    39b4:	e0 95       	com	r30
    39b6:	0b 2e       	mov	r0, r27
    39b8:	ba 2f       	mov	r27, r26
    39ba:	a0 2d       	mov	r26, r0
    39bc:	0b 01       	movw	r0, r22
    39be:	b9 01       	movw	r22, r18
    39c0:	90 01       	movw	r18, r0
    39c2:	0c 01       	movw	r0, r24
    39c4:	ca 01       	movw	r24, r20
    39c6:	a0 01       	movw	r20, r0
    39c8:	11 24       	eor	r1, r1
    39ca:	ff 27       	eor	r31, r31
    39cc:	59 1b       	sub	r21, r25
    39ce:	99 f0       	breq	.+38     	; 0x39f6 <__addsf3x+0x60>
    39d0:	59 3f       	cpi	r21, 0xF9	; 249
    39d2:	50 f4       	brcc	.+20     	; 0x39e8 <__addsf3x+0x52>
    39d4:	50 3e       	cpi	r21, 0xE0	; 224
    39d6:	68 f1       	brcs	.+90     	; 0x3a32 <__addsf3x+0x9c>
    39d8:	1a 16       	cp	r1, r26
    39da:	f0 40       	sbci	r31, 0x00	; 0
    39dc:	a2 2f       	mov	r26, r18
    39de:	23 2f       	mov	r18, r19
    39e0:	34 2f       	mov	r19, r20
    39e2:	44 27       	eor	r20, r20
    39e4:	58 5f       	subi	r21, 0xF8	; 248
    39e6:	f3 cf       	rjmp	.-26     	; 0x39ce <__addsf3x+0x38>
    39e8:	46 95       	lsr	r20
    39ea:	37 95       	ror	r19
    39ec:	27 95       	ror	r18
    39ee:	a7 95       	ror	r26
    39f0:	f0 40       	sbci	r31, 0x00	; 0
    39f2:	53 95       	inc	r21
    39f4:	c9 f7       	brne	.-14     	; 0x39e8 <__addsf3x+0x52>
    39f6:	7e f4       	brtc	.+30     	; 0x3a16 <__addsf3x+0x80>
    39f8:	1f 16       	cp	r1, r31
    39fa:	ba 0b       	sbc	r27, r26
    39fc:	62 0b       	sbc	r22, r18
    39fe:	73 0b       	sbc	r23, r19
    3a00:	84 0b       	sbc	r24, r20
    3a02:	ba f0       	brmi	.+46     	; 0x3a32 <__addsf3x+0x9c>
    3a04:	91 50       	subi	r25, 0x01	; 1
    3a06:	a1 f0       	breq	.+40     	; 0x3a30 <__addsf3x+0x9a>
    3a08:	ff 0f       	add	r31, r31
    3a0a:	bb 1f       	adc	r27, r27
    3a0c:	66 1f       	adc	r22, r22
    3a0e:	77 1f       	adc	r23, r23
    3a10:	88 1f       	adc	r24, r24
    3a12:	c2 f7       	brpl	.-16     	; 0x3a04 <__addsf3x+0x6e>
    3a14:	0e c0       	rjmp	.+28     	; 0x3a32 <__addsf3x+0x9c>
    3a16:	ba 0f       	add	r27, r26
    3a18:	62 1f       	adc	r22, r18
    3a1a:	73 1f       	adc	r23, r19
    3a1c:	84 1f       	adc	r24, r20
    3a1e:	48 f4       	brcc	.+18     	; 0x3a32 <__addsf3x+0x9c>
    3a20:	87 95       	ror	r24
    3a22:	77 95       	ror	r23
    3a24:	67 95       	ror	r22
    3a26:	b7 95       	ror	r27
    3a28:	f7 95       	ror	r31
    3a2a:	9e 3f       	cpi	r25, 0xFE	; 254
    3a2c:	08 f0       	brcs	.+2      	; 0x3a30 <__addsf3x+0x9a>
    3a2e:	b0 cf       	rjmp	.-160    	; 0x3990 <__addsf3+0x28>
    3a30:	93 95       	inc	r25
    3a32:	88 0f       	add	r24, r24
    3a34:	08 f0       	brcs	.+2      	; 0x3a38 <__addsf3x+0xa2>
    3a36:	99 27       	eor	r25, r25
    3a38:	ee 0f       	add	r30, r30
    3a3a:	97 95       	ror	r25
    3a3c:	87 95       	ror	r24
    3a3e:	08 95       	ret

00003a40 <__cmpsf2>:
    3a40:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <__fp_cmp>
    3a44:	08 f4       	brcc	.+2      	; 0x3a48 <__cmpsf2+0x8>
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	08 95       	ret

00003a4a <__divsf3>:
    3a4a:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__divsf3x>
    3a4e:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__fp_round>
    3a52:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__fp_pscB>
    3a56:	58 f0       	brcs	.+22     	; 0x3a6e <__divsf3+0x24>
    3a58:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__fp_pscA>
    3a5c:	40 f0       	brcs	.+16     	; 0x3a6e <__divsf3+0x24>
    3a5e:	29 f4       	brne	.+10     	; 0x3a6a <__divsf3+0x20>
    3a60:	5f 3f       	cpi	r21, 0xFF	; 255
    3a62:	29 f0       	breq	.+10     	; 0x3a6e <__divsf3+0x24>
    3a64:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__fp_inf>
    3a68:	51 11       	cpse	r21, r1
    3a6a:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__fp_szero>
    3a6e:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__fp_nan>

00003a72 <__divsf3x>:
    3a72:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__fp_split3>
    3a76:	68 f3       	brcs	.-38     	; 0x3a52 <__divsf3+0x8>

00003a78 <__divsf3_pse>:
    3a78:	99 23       	and	r25, r25
    3a7a:	b1 f3       	breq	.-20     	; 0x3a68 <__divsf3+0x1e>
    3a7c:	55 23       	and	r21, r21
    3a7e:	91 f3       	breq	.-28     	; 0x3a64 <__divsf3+0x1a>
    3a80:	95 1b       	sub	r25, r21
    3a82:	55 0b       	sbc	r21, r21
    3a84:	bb 27       	eor	r27, r27
    3a86:	aa 27       	eor	r26, r26
    3a88:	62 17       	cp	r22, r18
    3a8a:	73 07       	cpc	r23, r19
    3a8c:	84 07       	cpc	r24, r20
    3a8e:	38 f0       	brcs	.+14     	; 0x3a9e <__divsf3_pse+0x26>
    3a90:	9f 5f       	subi	r25, 0xFF	; 255
    3a92:	5f 4f       	sbci	r21, 0xFF	; 255
    3a94:	22 0f       	add	r18, r18
    3a96:	33 1f       	adc	r19, r19
    3a98:	44 1f       	adc	r20, r20
    3a9a:	aa 1f       	adc	r26, r26
    3a9c:	a9 f3       	breq	.-22     	; 0x3a88 <__divsf3_pse+0x10>
    3a9e:	35 d0       	rcall	.+106    	; 0x3b0a <__divsf3_pse+0x92>
    3aa0:	0e 2e       	mov	r0, r30
    3aa2:	3a f0       	brmi	.+14     	; 0x3ab2 <__divsf3_pse+0x3a>
    3aa4:	e0 e8       	ldi	r30, 0x80	; 128
    3aa6:	32 d0       	rcall	.+100    	; 0x3b0c <__divsf3_pse+0x94>
    3aa8:	91 50       	subi	r25, 0x01	; 1
    3aaa:	50 40       	sbci	r21, 0x00	; 0
    3aac:	e6 95       	lsr	r30
    3aae:	00 1c       	adc	r0, r0
    3ab0:	ca f7       	brpl	.-14     	; 0x3aa4 <__divsf3_pse+0x2c>
    3ab2:	2b d0       	rcall	.+86     	; 0x3b0a <__divsf3_pse+0x92>
    3ab4:	fe 2f       	mov	r31, r30
    3ab6:	29 d0       	rcall	.+82     	; 0x3b0a <__divsf3_pse+0x92>
    3ab8:	66 0f       	add	r22, r22
    3aba:	77 1f       	adc	r23, r23
    3abc:	88 1f       	adc	r24, r24
    3abe:	bb 1f       	adc	r27, r27
    3ac0:	26 17       	cp	r18, r22
    3ac2:	37 07       	cpc	r19, r23
    3ac4:	48 07       	cpc	r20, r24
    3ac6:	ab 07       	cpc	r26, r27
    3ac8:	b0 e8       	ldi	r27, 0x80	; 128
    3aca:	09 f0       	breq	.+2      	; 0x3ace <__divsf3_pse+0x56>
    3acc:	bb 0b       	sbc	r27, r27
    3ace:	80 2d       	mov	r24, r0
    3ad0:	bf 01       	movw	r22, r30
    3ad2:	ff 27       	eor	r31, r31
    3ad4:	93 58       	subi	r25, 0x83	; 131
    3ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ad8:	3a f0       	brmi	.+14     	; 0x3ae8 <__divsf3_pse+0x70>
    3ada:	9e 3f       	cpi	r25, 0xFE	; 254
    3adc:	51 05       	cpc	r21, r1
    3ade:	78 f0       	brcs	.+30     	; 0x3afe <__divsf3_pse+0x86>
    3ae0:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__fp_inf>
    3ae4:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__fp_szero>
    3ae8:	5f 3f       	cpi	r21, 0xFF	; 255
    3aea:	e4 f3       	brlt	.-8      	; 0x3ae4 <__divsf3_pse+0x6c>
    3aec:	98 3e       	cpi	r25, 0xE8	; 232
    3aee:	d4 f3       	brlt	.-12     	; 0x3ae4 <__divsf3_pse+0x6c>
    3af0:	86 95       	lsr	r24
    3af2:	77 95       	ror	r23
    3af4:	67 95       	ror	r22
    3af6:	b7 95       	ror	r27
    3af8:	f7 95       	ror	r31
    3afa:	9f 5f       	subi	r25, 0xFF	; 255
    3afc:	c9 f7       	brne	.-14     	; 0x3af0 <__divsf3_pse+0x78>
    3afe:	88 0f       	add	r24, r24
    3b00:	91 1d       	adc	r25, r1
    3b02:	96 95       	lsr	r25
    3b04:	87 95       	ror	r24
    3b06:	97 f9       	bld	r25, 7
    3b08:	08 95       	ret
    3b0a:	e1 e0       	ldi	r30, 0x01	; 1
    3b0c:	66 0f       	add	r22, r22
    3b0e:	77 1f       	adc	r23, r23
    3b10:	88 1f       	adc	r24, r24
    3b12:	bb 1f       	adc	r27, r27
    3b14:	62 17       	cp	r22, r18
    3b16:	73 07       	cpc	r23, r19
    3b18:	84 07       	cpc	r24, r20
    3b1a:	ba 07       	cpc	r27, r26
    3b1c:	20 f0       	brcs	.+8      	; 0x3b26 <__divsf3_pse+0xae>
    3b1e:	62 1b       	sub	r22, r18
    3b20:	73 0b       	sbc	r23, r19
    3b22:	84 0b       	sbc	r24, r20
    3b24:	ba 0b       	sbc	r27, r26
    3b26:	ee 1f       	adc	r30, r30
    3b28:	88 f7       	brcc	.-30     	; 0x3b0c <__divsf3_pse+0x94>
    3b2a:	e0 95       	com	r30
    3b2c:	08 95       	ret

00003b2e <__fixsfsi>:
    3b2e:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__fixunssfsi>
    3b32:	68 94       	set
    3b34:	b1 11       	cpse	r27, r1
    3b36:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__fp_szero>
    3b3a:	08 95       	ret

00003b3c <__fixunssfsi>:
    3b3c:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <__fp_splitA>
    3b40:	88 f0       	brcs	.+34     	; 0x3b64 <__fixunssfsi+0x28>
    3b42:	9f 57       	subi	r25, 0x7F	; 127
    3b44:	98 f0       	brcs	.+38     	; 0x3b6c <__fixunssfsi+0x30>
    3b46:	b9 2f       	mov	r27, r25
    3b48:	99 27       	eor	r25, r25
    3b4a:	b7 51       	subi	r27, 0x17	; 23
    3b4c:	b0 f0       	brcs	.+44     	; 0x3b7a <__fixunssfsi+0x3e>
    3b4e:	e1 f0       	breq	.+56     	; 0x3b88 <__fixunssfsi+0x4c>
    3b50:	66 0f       	add	r22, r22
    3b52:	77 1f       	adc	r23, r23
    3b54:	88 1f       	adc	r24, r24
    3b56:	99 1f       	adc	r25, r25
    3b58:	1a f0       	brmi	.+6      	; 0x3b60 <__fixunssfsi+0x24>
    3b5a:	ba 95       	dec	r27
    3b5c:	c9 f7       	brne	.-14     	; 0x3b50 <__fixunssfsi+0x14>
    3b5e:	14 c0       	rjmp	.+40     	; 0x3b88 <__fixunssfsi+0x4c>
    3b60:	b1 30       	cpi	r27, 0x01	; 1
    3b62:	91 f0       	breq	.+36     	; 0x3b88 <__fixunssfsi+0x4c>
    3b64:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__fp_zero>
    3b68:	b1 e0       	ldi	r27, 0x01	; 1
    3b6a:	08 95       	ret
    3b6c:	0c 94 78 1e 	jmp	0x3cf0	; 0x3cf0 <__fp_zero>
    3b70:	67 2f       	mov	r22, r23
    3b72:	78 2f       	mov	r23, r24
    3b74:	88 27       	eor	r24, r24
    3b76:	b8 5f       	subi	r27, 0xF8	; 248
    3b78:	39 f0       	breq	.+14     	; 0x3b88 <__fixunssfsi+0x4c>
    3b7a:	b9 3f       	cpi	r27, 0xF9	; 249
    3b7c:	cc f3       	brlt	.-14     	; 0x3b70 <__fixunssfsi+0x34>
    3b7e:	86 95       	lsr	r24
    3b80:	77 95       	ror	r23
    3b82:	67 95       	ror	r22
    3b84:	b3 95       	inc	r27
    3b86:	d9 f7       	brne	.-10     	; 0x3b7e <__fixunssfsi+0x42>
    3b88:	3e f4       	brtc	.+14     	; 0x3b98 <__fixunssfsi+0x5c>
    3b8a:	90 95       	com	r25
    3b8c:	80 95       	com	r24
    3b8e:	70 95       	com	r23
    3b90:	61 95       	neg	r22
    3b92:	7f 4f       	sbci	r23, 0xFF	; 255
    3b94:	8f 4f       	sbci	r24, 0xFF	; 255
    3b96:	9f 4f       	sbci	r25, 0xFF	; 255
    3b98:	08 95       	ret

00003b9a <__floatunsisf>:
    3b9a:	e8 94       	clt
    3b9c:	09 c0       	rjmp	.+18     	; 0x3bb0 <__floatsisf+0x12>

00003b9e <__floatsisf>:
    3b9e:	97 fb       	bst	r25, 7
    3ba0:	3e f4       	brtc	.+14     	; 0x3bb0 <__floatsisf+0x12>
    3ba2:	90 95       	com	r25
    3ba4:	80 95       	com	r24
    3ba6:	70 95       	com	r23
    3ba8:	61 95       	neg	r22
    3baa:	7f 4f       	sbci	r23, 0xFF	; 255
    3bac:	8f 4f       	sbci	r24, 0xFF	; 255
    3bae:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb0:	99 23       	and	r25, r25
    3bb2:	a9 f0       	breq	.+42     	; 0x3bde <__floatsisf+0x40>
    3bb4:	f9 2f       	mov	r31, r25
    3bb6:	96 e9       	ldi	r25, 0x96	; 150
    3bb8:	bb 27       	eor	r27, r27
    3bba:	93 95       	inc	r25
    3bbc:	f6 95       	lsr	r31
    3bbe:	87 95       	ror	r24
    3bc0:	77 95       	ror	r23
    3bc2:	67 95       	ror	r22
    3bc4:	b7 95       	ror	r27
    3bc6:	f1 11       	cpse	r31, r1
    3bc8:	f8 cf       	rjmp	.-16     	; 0x3bba <__floatsisf+0x1c>
    3bca:	fa f4       	brpl	.+62     	; 0x3c0a <__floatsisf+0x6c>
    3bcc:	bb 0f       	add	r27, r27
    3bce:	11 f4       	brne	.+4      	; 0x3bd4 <__floatsisf+0x36>
    3bd0:	60 ff       	sbrs	r22, 0
    3bd2:	1b c0       	rjmp	.+54     	; 0x3c0a <__floatsisf+0x6c>
    3bd4:	6f 5f       	subi	r22, 0xFF	; 255
    3bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    3bd8:	8f 4f       	sbci	r24, 0xFF	; 255
    3bda:	9f 4f       	sbci	r25, 0xFF	; 255
    3bdc:	16 c0       	rjmp	.+44     	; 0x3c0a <__floatsisf+0x6c>
    3bde:	88 23       	and	r24, r24
    3be0:	11 f0       	breq	.+4      	; 0x3be6 <__floatsisf+0x48>
    3be2:	96 e9       	ldi	r25, 0x96	; 150
    3be4:	11 c0       	rjmp	.+34     	; 0x3c08 <__floatsisf+0x6a>
    3be6:	77 23       	and	r23, r23
    3be8:	21 f0       	breq	.+8      	; 0x3bf2 <__floatsisf+0x54>
    3bea:	9e e8       	ldi	r25, 0x8E	; 142
    3bec:	87 2f       	mov	r24, r23
    3bee:	76 2f       	mov	r23, r22
    3bf0:	05 c0       	rjmp	.+10     	; 0x3bfc <__floatsisf+0x5e>
    3bf2:	66 23       	and	r22, r22
    3bf4:	71 f0       	breq	.+28     	; 0x3c12 <__floatsisf+0x74>
    3bf6:	96 e8       	ldi	r25, 0x86	; 134
    3bf8:	86 2f       	mov	r24, r22
    3bfa:	70 e0       	ldi	r23, 0x00	; 0
    3bfc:	60 e0       	ldi	r22, 0x00	; 0
    3bfe:	2a f0       	brmi	.+10     	; 0x3c0a <__floatsisf+0x6c>
    3c00:	9a 95       	dec	r25
    3c02:	66 0f       	add	r22, r22
    3c04:	77 1f       	adc	r23, r23
    3c06:	88 1f       	adc	r24, r24
    3c08:	da f7       	brpl	.-10     	; 0x3c00 <__floatsisf+0x62>
    3c0a:	88 0f       	add	r24, r24
    3c0c:	96 95       	lsr	r25
    3c0e:	87 95       	ror	r24
    3c10:	97 f9       	bld	r25, 7
    3c12:	08 95       	ret

00003c14 <__fp_cmp>:
    3c14:	99 0f       	add	r25, r25
    3c16:	00 08       	sbc	r0, r0
    3c18:	55 0f       	add	r21, r21
    3c1a:	aa 0b       	sbc	r26, r26
    3c1c:	e0 e8       	ldi	r30, 0x80	; 128
    3c1e:	fe ef       	ldi	r31, 0xFE	; 254
    3c20:	16 16       	cp	r1, r22
    3c22:	17 06       	cpc	r1, r23
    3c24:	e8 07       	cpc	r30, r24
    3c26:	f9 07       	cpc	r31, r25
    3c28:	c0 f0       	brcs	.+48     	; 0x3c5a <__fp_cmp+0x46>
    3c2a:	12 16       	cp	r1, r18
    3c2c:	13 06       	cpc	r1, r19
    3c2e:	e4 07       	cpc	r30, r20
    3c30:	f5 07       	cpc	r31, r21
    3c32:	98 f0       	brcs	.+38     	; 0x3c5a <__fp_cmp+0x46>
    3c34:	62 1b       	sub	r22, r18
    3c36:	73 0b       	sbc	r23, r19
    3c38:	84 0b       	sbc	r24, r20
    3c3a:	95 0b       	sbc	r25, r21
    3c3c:	39 f4       	brne	.+14     	; 0x3c4c <__fp_cmp+0x38>
    3c3e:	0a 26       	eor	r0, r26
    3c40:	61 f0       	breq	.+24     	; 0x3c5a <__fp_cmp+0x46>
    3c42:	23 2b       	or	r18, r19
    3c44:	24 2b       	or	r18, r20
    3c46:	25 2b       	or	r18, r21
    3c48:	21 f4       	brne	.+8      	; 0x3c52 <__fp_cmp+0x3e>
    3c4a:	08 95       	ret
    3c4c:	0a 26       	eor	r0, r26
    3c4e:	09 f4       	brne	.+2      	; 0x3c52 <__fp_cmp+0x3e>
    3c50:	a1 40       	sbci	r26, 0x01	; 1
    3c52:	a6 95       	lsr	r26
    3c54:	8f ef       	ldi	r24, 0xFF	; 255
    3c56:	81 1d       	adc	r24, r1
    3c58:	81 1d       	adc	r24, r1
    3c5a:	08 95       	ret

00003c5c <__fp_inf>:
    3c5c:	97 f9       	bld	r25, 7
    3c5e:	9f 67       	ori	r25, 0x7F	; 127
    3c60:	80 e8       	ldi	r24, 0x80	; 128
    3c62:	70 e0       	ldi	r23, 0x00	; 0
    3c64:	60 e0       	ldi	r22, 0x00	; 0
    3c66:	08 95       	ret

00003c68 <__fp_nan>:
    3c68:	9f ef       	ldi	r25, 0xFF	; 255
    3c6a:	80 ec       	ldi	r24, 0xC0	; 192
    3c6c:	08 95       	ret

00003c6e <__fp_pscA>:
    3c6e:	00 24       	eor	r0, r0
    3c70:	0a 94       	dec	r0
    3c72:	16 16       	cp	r1, r22
    3c74:	17 06       	cpc	r1, r23
    3c76:	18 06       	cpc	r1, r24
    3c78:	09 06       	cpc	r0, r25
    3c7a:	08 95       	ret

00003c7c <__fp_pscB>:
    3c7c:	00 24       	eor	r0, r0
    3c7e:	0a 94       	dec	r0
    3c80:	12 16       	cp	r1, r18
    3c82:	13 06       	cpc	r1, r19
    3c84:	14 06       	cpc	r1, r20
    3c86:	05 06       	cpc	r0, r21
    3c88:	08 95       	ret

00003c8a <__fp_round>:
    3c8a:	09 2e       	mov	r0, r25
    3c8c:	03 94       	inc	r0
    3c8e:	00 0c       	add	r0, r0
    3c90:	11 f4       	brne	.+4      	; 0x3c96 <__fp_round+0xc>
    3c92:	88 23       	and	r24, r24
    3c94:	52 f0       	brmi	.+20     	; 0x3caa <__fp_round+0x20>
    3c96:	bb 0f       	add	r27, r27
    3c98:	40 f4       	brcc	.+16     	; 0x3caa <__fp_round+0x20>
    3c9a:	bf 2b       	or	r27, r31
    3c9c:	11 f4       	brne	.+4      	; 0x3ca2 <__fp_round+0x18>
    3c9e:	60 ff       	sbrs	r22, 0
    3ca0:	04 c0       	rjmp	.+8      	; 0x3caa <__fp_round+0x20>
    3ca2:	6f 5f       	subi	r22, 0xFF	; 255
    3ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    3caa:	08 95       	ret

00003cac <__fp_split3>:
    3cac:	57 fd       	sbrc	r21, 7
    3cae:	90 58       	subi	r25, 0x80	; 128
    3cb0:	44 0f       	add	r20, r20
    3cb2:	55 1f       	adc	r21, r21
    3cb4:	59 f0       	breq	.+22     	; 0x3ccc <__fp_splitA+0x10>
    3cb6:	5f 3f       	cpi	r21, 0xFF	; 255
    3cb8:	71 f0       	breq	.+28     	; 0x3cd6 <__fp_splitA+0x1a>
    3cba:	47 95       	ror	r20

00003cbc <__fp_splitA>:
    3cbc:	88 0f       	add	r24, r24
    3cbe:	97 fb       	bst	r25, 7
    3cc0:	99 1f       	adc	r25, r25
    3cc2:	61 f0       	breq	.+24     	; 0x3cdc <__fp_splitA+0x20>
    3cc4:	9f 3f       	cpi	r25, 0xFF	; 255
    3cc6:	79 f0       	breq	.+30     	; 0x3ce6 <__fp_splitA+0x2a>
    3cc8:	87 95       	ror	r24
    3cca:	08 95       	ret
    3ccc:	12 16       	cp	r1, r18
    3cce:	13 06       	cpc	r1, r19
    3cd0:	14 06       	cpc	r1, r20
    3cd2:	55 1f       	adc	r21, r21
    3cd4:	f2 cf       	rjmp	.-28     	; 0x3cba <__fp_split3+0xe>
    3cd6:	46 95       	lsr	r20
    3cd8:	f1 df       	rcall	.-30     	; 0x3cbc <__fp_splitA>
    3cda:	08 c0       	rjmp	.+16     	; 0x3cec <__fp_splitA+0x30>
    3cdc:	16 16       	cp	r1, r22
    3cde:	17 06       	cpc	r1, r23
    3ce0:	18 06       	cpc	r1, r24
    3ce2:	99 1f       	adc	r25, r25
    3ce4:	f1 cf       	rjmp	.-30     	; 0x3cc8 <__fp_splitA+0xc>
    3ce6:	86 95       	lsr	r24
    3ce8:	71 05       	cpc	r23, r1
    3cea:	61 05       	cpc	r22, r1
    3cec:	08 94       	sec
    3cee:	08 95       	ret

00003cf0 <__fp_zero>:
    3cf0:	e8 94       	clt

00003cf2 <__fp_szero>:
    3cf2:	bb 27       	eor	r27, r27
    3cf4:	66 27       	eor	r22, r22
    3cf6:	77 27       	eor	r23, r23
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	97 f9       	bld	r25, 7
    3cfc:	08 95       	ret

00003cfe <__gesf2>:
    3cfe:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <__fp_cmp>
    3d02:	08 f4       	brcc	.+2      	; 0x3d06 <__gesf2+0x8>
    3d04:	8f ef       	ldi	r24, 0xFF	; 255
    3d06:	08 95       	ret

00003d08 <__mulsf3>:
    3d08:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__mulsf3x>
    3d0c:	0c 94 45 1e 	jmp	0x3c8a	; 0x3c8a <__fp_round>
    3d10:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__fp_pscA>
    3d14:	38 f0       	brcs	.+14     	; 0x3d24 <__mulsf3+0x1c>
    3d16:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <__fp_pscB>
    3d1a:	20 f0       	brcs	.+8      	; 0x3d24 <__mulsf3+0x1c>
    3d1c:	95 23       	and	r25, r21
    3d1e:	11 f0       	breq	.+4      	; 0x3d24 <__mulsf3+0x1c>
    3d20:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__fp_inf>
    3d24:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__fp_nan>
    3d28:	11 24       	eor	r1, r1
    3d2a:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__fp_szero>

00003d2e <__mulsf3x>:
    3d2e:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__fp_split3>
    3d32:	70 f3       	brcs	.-36     	; 0x3d10 <__mulsf3+0x8>

00003d34 <__mulsf3_pse>:
    3d34:	95 9f       	mul	r25, r21
    3d36:	c1 f3       	breq	.-16     	; 0x3d28 <__mulsf3+0x20>
    3d38:	95 0f       	add	r25, r21
    3d3a:	50 e0       	ldi	r21, 0x00	; 0
    3d3c:	55 1f       	adc	r21, r21
    3d3e:	62 9f       	mul	r22, r18
    3d40:	f0 01       	movw	r30, r0
    3d42:	72 9f       	mul	r23, r18
    3d44:	bb 27       	eor	r27, r27
    3d46:	f0 0d       	add	r31, r0
    3d48:	b1 1d       	adc	r27, r1
    3d4a:	63 9f       	mul	r22, r19
    3d4c:	aa 27       	eor	r26, r26
    3d4e:	f0 0d       	add	r31, r0
    3d50:	b1 1d       	adc	r27, r1
    3d52:	aa 1f       	adc	r26, r26
    3d54:	64 9f       	mul	r22, r20
    3d56:	66 27       	eor	r22, r22
    3d58:	b0 0d       	add	r27, r0
    3d5a:	a1 1d       	adc	r26, r1
    3d5c:	66 1f       	adc	r22, r22
    3d5e:	82 9f       	mul	r24, r18
    3d60:	22 27       	eor	r18, r18
    3d62:	b0 0d       	add	r27, r0
    3d64:	a1 1d       	adc	r26, r1
    3d66:	62 1f       	adc	r22, r18
    3d68:	73 9f       	mul	r23, r19
    3d6a:	b0 0d       	add	r27, r0
    3d6c:	a1 1d       	adc	r26, r1
    3d6e:	62 1f       	adc	r22, r18
    3d70:	83 9f       	mul	r24, r19
    3d72:	a0 0d       	add	r26, r0
    3d74:	61 1d       	adc	r22, r1
    3d76:	22 1f       	adc	r18, r18
    3d78:	74 9f       	mul	r23, r20
    3d7a:	33 27       	eor	r19, r19
    3d7c:	a0 0d       	add	r26, r0
    3d7e:	61 1d       	adc	r22, r1
    3d80:	23 1f       	adc	r18, r19
    3d82:	84 9f       	mul	r24, r20
    3d84:	60 0d       	add	r22, r0
    3d86:	21 1d       	adc	r18, r1
    3d88:	82 2f       	mov	r24, r18
    3d8a:	76 2f       	mov	r23, r22
    3d8c:	6a 2f       	mov	r22, r26
    3d8e:	11 24       	eor	r1, r1
    3d90:	9f 57       	subi	r25, 0x7F	; 127
    3d92:	50 40       	sbci	r21, 0x00	; 0
    3d94:	9a f0       	brmi	.+38     	; 0x3dbc <__mulsf3_pse+0x88>
    3d96:	f1 f0       	breq	.+60     	; 0x3dd4 <__mulsf3_pse+0xa0>
    3d98:	88 23       	and	r24, r24
    3d9a:	4a f0       	brmi	.+18     	; 0x3dae <__mulsf3_pse+0x7a>
    3d9c:	ee 0f       	add	r30, r30
    3d9e:	ff 1f       	adc	r31, r31
    3da0:	bb 1f       	adc	r27, r27
    3da2:	66 1f       	adc	r22, r22
    3da4:	77 1f       	adc	r23, r23
    3da6:	88 1f       	adc	r24, r24
    3da8:	91 50       	subi	r25, 0x01	; 1
    3daa:	50 40       	sbci	r21, 0x00	; 0
    3dac:	a9 f7       	brne	.-22     	; 0x3d98 <__mulsf3_pse+0x64>
    3dae:	9e 3f       	cpi	r25, 0xFE	; 254
    3db0:	51 05       	cpc	r21, r1
    3db2:	80 f0       	brcs	.+32     	; 0x3dd4 <__mulsf3_pse+0xa0>
    3db4:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__fp_inf>
    3db8:	0c 94 79 1e 	jmp	0x3cf2	; 0x3cf2 <__fp_szero>
    3dbc:	5f 3f       	cpi	r21, 0xFF	; 255
    3dbe:	e4 f3       	brlt	.-8      	; 0x3db8 <__mulsf3_pse+0x84>
    3dc0:	98 3e       	cpi	r25, 0xE8	; 232
    3dc2:	d4 f3       	brlt	.-12     	; 0x3db8 <__mulsf3_pse+0x84>
    3dc4:	86 95       	lsr	r24
    3dc6:	77 95       	ror	r23
    3dc8:	67 95       	ror	r22
    3dca:	b7 95       	ror	r27
    3dcc:	f7 95       	ror	r31
    3dce:	e7 95       	ror	r30
    3dd0:	9f 5f       	subi	r25, 0xFF	; 255
    3dd2:	c1 f7       	brne	.-16     	; 0x3dc4 <__mulsf3_pse+0x90>
    3dd4:	fe 2b       	or	r31, r30
    3dd6:	88 0f       	add	r24, r24
    3dd8:	91 1d       	adc	r25, r1
    3dda:	96 95       	lsr	r25
    3ddc:	87 95       	ror	r24
    3dde:	97 f9       	bld	r25, 7
    3de0:	08 95       	ret

00003de2 <calloc>:
    3de2:	0f 93       	push	r16
    3de4:	1f 93       	push	r17
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	86 9f       	mul	r24, r22
    3dec:	80 01       	movw	r16, r0
    3dee:	87 9f       	mul	r24, r23
    3df0:	10 0d       	add	r17, r0
    3df2:	96 9f       	mul	r25, r22
    3df4:	10 0d       	add	r17, r0
    3df6:	11 24       	eor	r1, r1
    3df8:	c8 01       	movw	r24, r16
    3dfa:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <malloc>
    3dfe:	ec 01       	movw	r28, r24
    3e00:	00 97       	sbiw	r24, 0x00	; 0
    3e02:	29 f0       	breq	.+10     	; 0x3e0e <calloc+0x2c>
    3e04:	a8 01       	movw	r20, r16
    3e06:	60 e0       	ldi	r22, 0x00	; 0
    3e08:	70 e0       	ldi	r23, 0x00	; 0
    3e0a:	0e 94 3a 20 	call	0x4074	; 0x4074 <memset>
    3e0e:	ce 01       	movw	r24, r28
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	1f 91       	pop	r17
    3e16:	0f 91       	pop	r16
    3e18:	08 95       	ret

00003e1a <malloc>:
    3e1a:	cf 93       	push	r28
    3e1c:	df 93       	push	r29
    3e1e:	82 30       	cpi	r24, 0x02	; 2
    3e20:	91 05       	cpc	r25, r1
    3e22:	10 f4       	brcc	.+4      	; 0x3e28 <malloc+0xe>
    3e24:	82 e0       	ldi	r24, 0x02	; 2
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	e0 91 81 02 	lds	r30, 0x0281
    3e2c:	f0 91 82 02 	lds	r31, 0x0282
    3e30:	20 e0       	ldi	r18, 0x00	; 0
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	c0 e0       	ldi	r28, 0x00	; 0
    3e36:	d0 e0       	ldi	r29, 0x00	; 0
    3e38:	30 97       	sbiw	r30, 0x00	; 0
    3e3a:	11 f1       	breq	.+68     	; 0x3e80 <malloc+0x66>
    3e3c:	40 81       	ld	r20, Z
    3e3e:	51 81       	ldd	r21, Z+1	; 0x01
    3e40:	48 17       	cp	r20, r24
    3e42:	59 07       	cpc	r21, r25
    3e44:	c0 f0       	brcs	.+48     	; 0x3e76 <malloc+0x5c>
    3e46:	48 17       	cp	r20, r24
    3e48:	59 07       	cpc	r21, r25
    3e4a:	61 f4       	brne	.+24     	; 0x3e64 <malloc+0x4a>
    3e4c:	82 81       	ldd	r24, Z+2	; 0x02
    3e4e:	93 81       	ldd	r25, Z+3	; 0x03
    3e50:	20 97       	sbiw	r28, 0x00	; 0
    3e52:	19 f0       	breq	.+6      	; 0x3e5a <malloc+0x40>
    3e54:	9b 83       	std	Y+3, r25	; 0x03
    3e56:	8a 83       	std	Y+2, r24	; 0x02
    3e58:	2b c0       	rjmp	.+86     	; 0x3eb0 <malloc+0x96>
    3e5a:	90 93 82 02 	sts	0x0282, r25
    3e5e:	80 93 81 02 	sts	0x0281, r24
    3e62:	26 c0       	rjmp	.+76     	; 0x3eb0 <malloc+0x96>
    3e64:	21 15       	cp	r18, r1
    3e66:	31 05       	cpc	r19, r1
    3e68:	19 f0       	breq	.+6      	; 0x3e70 <malloc+0x56>
    3e6a:	42 17       	cp	r20, r18
    3e6c:	53 07       	cpc	r21, r19
    3e6e:	18 f4       	brcc	.+6      	; 0x3e76 <malloc+0x5c>
    3e70:	9a 01       	movw	r18, r20
    3e72:	be 01       	movw	r22, r28
    3e74:	df 01       	movw	r26, r30
    3e76:	ef 01       	movw	r28, r30
    3e78:	02 80       	ldd	r0, Z+2	; 0x02
    3e7a:	f3 81       	ldd	r31, Z+3	; 0x03
    3e7c:	e0 2d       	mov	r30, r0
    3e7e:	dc cf       	rjmp	.-72     	; 0x3e38 <malloc+0x1e>
    3e80:	21 15       	cp	r18, r1
    3e82:	31 05       	cpc	r19, r1
    3e84:	09 f1       	breq	.+66     	; 0x3ec8 <malloc+0xae>
    3e86:	28 1b       	sub	r18, r24
    3e88:	39 0b       	sbc	r19, r25
    3e8a:	24 30       	cpi	r18, 0x04	; 4
    3e8c:	31 05       	cpc	r19, r1
    3e8e:	90 f4       	brcc	.+36     	; 0x3eb4 <malloc+0x9a>
    3e90:	12 96       	adiw	r26, 0x02	; 2
    3e92:	8d 91       	ld	r24, X+
    3e94:	9c 91       	ld	r25, X
    3e96:	13 97       	sbiw	r26, 0x03	; 3
    3e98:	61 15       	cp	r22, r1
    3e9a:	71 05       	cpc	r23, r1
    3e9c:	21 f0       	breq	.+8      	; 0x3ea6 <malloc+0x8c>
    3e9e:	fb 01       	movw	r30, r22
    3ea0:	93 83       	std	Z+3, r25	; 0x03
    3ea2:	82 83       	std	Z+2, r24	; 0x02
    3ea4:	04 c0       	rjmp	.+8      	; 0x3eae <malloc+0x94>
    3ea6:	90 93 82 02 	sts	0x0282, r25
    3eaa:	80 93 81 02 	sts	0x0281, r24
    3eae:	fd 01       	movw	r30, r26
    3eb0:	32 96       	adiw	r30, 0x02	; 2
    3eb2:	44 c0       	rjmp	.+136    	; 0x3f3c <malloc+0x122>
    3eb4:	fd 01       	movw	r30, r26
    3eb6:	e2 0f       	add	r30, r18
    3eb8:	f3 1f       	adc	r31, r19
    3eba:	81 93       	st	Z+, r24
    3ebc:	91 93       	st	Z+, r25
    3ebe:	22 50       	subi	r18, 0x02	; 2
    3ec0:	31 09       	sbc	r19, r1
    3ec2:	2d 93       	st	X+, r18
    3ec4:	3c 93       	st	X, r19
    3ec6:	3a c0       	rjmp	.+116    	; 0x3f3c <malloc+0x122>
    3ec8:	20 91 7f 02 	lds	r18, 0x027F
    3ecc:	30 91 80 02 	lds	r19, 0x0280
    3ed0:	23 2b       	or	r18, r19
    3ed2:	41 f4       	brne	.+16     	; 0x3ee4 <malloc+0xca>
    3ed4:	20 91 02 01 	lds	r18, 0x0102
    3ed8:	30 91 03 01 	lds	r19, 0x0103
    3edc:	30 93 80 02 	sts	0x0280, r19
    3ee0:	20 93 7f 02 	sts	0x027F, r18
    3ee4:	20 91 00 01 	lds	r18, 0x0100
    3ee8:	30 91 01 01 	lds	r19, 0x0101
    3eec:	21 15       	cp	r18, r1
    3eee:	31 05       	cpc	r19, r1
    3ef0:	41 f4       	brne	.+16     	; 0x3f02 <malloc+0xe8>
    3ef2:	2d b7       	in	r18, 0x3d	; 61
    3ef4:	3e b7       	in	r19, 0x3e	; 62
    3ef6:	40 91 04 01 	lds	r20, 0x0104
    3efa:	50 91 05 01 	lds	r21, 0x0105
    3efe:	24 1b       	sub	r18, r20
    3f00:	35 0b       	sbc	r19, r21
    3f02:	e0 91 7f 02 	lds	r30, 0x027F
    3f06:	f0 91 80 02 	lds	r31, 0x0280
    3f0a:	e2 17       	cp	r30, r18
    3f0c:	f3 07       	cpc	r31, r19
    3f0e:	a0 f4       	brcc	.+40     	; 0x3f38 <malloc+0x11e>
    3f10:	2e 1b       	sub	r18, r30
    3f12:	3f 0b       	sbc	r19, r31
    3f14:	28 17       	cp	r18, r24
    3f16:	39 07       	cpc	r19, r25
    3f18:	78 f0       	brcs	.+30     	; 0x3f38 <malloc+0x11e>
    3f1a:	ac 01       	movw	r20, r24
    3f1c:	4e 5f       	subi	r20, 0xFE	; 254
    3f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f20:	24 17       	cp	r18, r20
    3f22:	35 07       	cpc	r19, r21
    3f24:	48 f0       	brcs	.+18     	; 0x3f38 <malloc+0x11e>
    3f26:	4e 0f       	add	r20, r30
    3f28:	5f 1f       	adc	r21, r31
    3f2a:	50 93 80 02 	sts	0x0280, r21
    3f2e:	40 93 7f 02 	sts	0x027F, r20
    3f32:	81 93       	st	Z+, r24
    3f34:	91 93       	st	Z+, r25
    3f36:	02 c0       	rjmp	.+4      	; 0x3f3c <malloc+0x122>
    3f38:	e0 e0       	ldi	r30, 0x00	; 0
    3f3a:	f0 e0       	ldi	r31, 0x00	; 0
    3f3c:	cf 01       	movw	r24, r30
    3f3e:	df 91       	pop	r29
    3f40:	cf 91       	pop	r28
    3f42:	08 95       	ret

00003f44 <free>:
    3f44:	0f 93       	push	r16
    3f46:	1f 93       	push	r17
    3f48:	cf 93       	push	r28
    3f4a:	df 93       	push	r29
    3f4c:	00 97       	sbiw	r24, 0x00	; 0
    3f4e:	09 f4       	brne	.+2      	; 0x3f52 <free+0xe>
    3f50:	8c c0       	rjmp	.+280    	; 0x406a <free+0x126>
    3f52:	fc 01       	movw	r30, r24
    3f54:	32 97       	sbiw	r30, 0x02	; 2
    3f56:	13 82       	std	Z+3, r1	; 0x03
    3f58:	12 82       	std	Z+2, r1	; 0x02
    3f5a:	00 91 81 02 	lds	r16, 0x0281
    3f5e:	10 91 82 02 	lds	r17, 0x0282
    3f62:	01 15       	cp	r16, r1
    3f64:	11 05       	cpc	r17, r1
    3f66:	81 f4       	brne	.+32     	; 0x3f88 <free+0x44>
    3f68:	20 81       	ld	r18, Z
    3f6a:	31 81       	ldd	r19, Z+1	; 0x01
    3f6c:	82 0f       	add	r24, r18
    3f6e:	93 1f       	adc	r25, r19
    3f70:	20 91 7f 02 	lds	r18, 0x027F
    3f74:	30 91 80 02 	lds	r19, 0x0280
    3f78:	28 17       	cp	r18, r24
    3f7a:	39 07       	cpc	r19, r25
    3f7c:	79 f5       	brne	.+94     	; 0x3fdc <free+0x98>
    3f7e:	f0 93 80 02 	sts	0x0280, r31
    3f82:	e0 93 7f 02 	sts	0x027F, r30
    3f86:	71 c0       	rjmp	.+226    	; 0x406a <free+0x126>
    3f88:	d8 01       	movw	r26, r16
    3f8a:	40 e0       	ldi	r20, 0x00	; 0
    3f8c:	50 e0       	ldi	r21, 0x00	; 0
    3f8e:	ae 17       	cp	r26, r30
    3f90:	bf 07       	cpc	r27, r31
    3f92:	50 f4       	brcc	.+20     	; 0x3fa8 <free+0x64>
    3f94:	12 96       	adiw	r26, 0x02	; 2
    3f96:	2d 91       	ld	r18, X+
    3f98:	3c 91       	ld	r19, X
    3f9a:	13 97       	sbiw	r26, 0x03	; 3
    3f9c:	ad 01       	movw	r20, r26
    3f9e:	21 15       	cp	r18, r1
    3fa0:	31 05       	cpc	r19, r1
    3fa2:	09 f1       	breq	.+66     	; 0x3fe6 <free+0xa2>
    3fa4:	d9 01       	movw	r26, r18
    3fa6:	f3 cf       	rjmp	.-26     	; 0x3f8e <free+0x4a>
    3fa8:	9d 01       	movw	r18, r26
    3faa:	da 01       	movw	r26, r20
    3fac:	33 83       	std	Z+3, r19	; 0x03
    3fae:	22 83       	std	Z+2, r18	; 0x02
    3fb0:	60 81       	ld	r22, Z
    3fb2:	71 81       	ldd	r23, Z+1	; 0x01
    3fb4:	86 0f       	add	r24, r22
    3fb6:	97 1f       	adc	r25, r23
    3fb8:	82 17       	cp	r24, r18
    3fba:	93 07       	cpc	r25, r19
    3fbc:	69 f4       	brne	.+26     	; 0x3fd8 <free+0x94>
    3fbe:	ec 01       	movw	r28, r24
    3fc0:	28 81       	ld	r18, Y
    3fc2:	39 81       	ldd	r19, Y+1	; 0x01
    3fc4:	26 0f       	add	r18, r22
    3fc6:	37 1f       	adc	r19, r23
    3fc8:	2e 5f       	subi	r18, 0xFE	; 254
    3fca:	3f 4f       	sbci	r19, 0xFF	; 255
    3fcc:	31 83       	std	Z+1, r19	; 0x01
    3fce:	20 83       	st	Z, r18
    3fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3fd4:	93 83       	std	Z+3, r25	; 0x03
    3fd6:	82 83       	std	Z+2, r24	; 0x02
    3fd8:	45 2b       	or	r20, r21
    3fda:	29 f4       	brne	.+10     	; 0x3fe6 <free+0xa2>
    3fdc:	f0 93 82 02 	sts	0x0282, r31
    3fe0:	e0 93 81 02 	sts	0x0281, r30
    3fe4:	42 c0       	rjmp	.+132    	; 0x406a <free+0x126>
    3fe6:	13 96       	adiw	r26, 0x03	; 3
    3fe8:	fc 93       	st	X, r31
    3fea:	ee 93       	st	-X, r30
    3fec:	12 97       	sbiw	r26, 0x02	; 2
    3fee:	ed 01       	movw	r28, r26
    3ff0:	49 91       	ld	r20, Y+
    3ff2:	59 91       	ld	r21, Y+
    3ff4:	9e 01       	movw	r18, r28
    3ff6:	24 0f       	add	r18, r20
    3ff8:	35 1f       	adc	r19, r21
    3ffa:	e2 17       	cp	r30, r18
    3ffc:	f3 07       	cpc	r31, r19
    3ffe:	71 f4       	brne	.+28     	; 0x401c <free+0xd8>
    4000:	80 81       	ld	r24, Z
    4002:	91 81       	ldd	r25, Z+1	; 0x01
    4004:	84 0f       	add	r24, r20
    4006:	95 1f       	adc	r25, r21
    4008:	02 96       	adiw	r24, 0x02	; 2
    400a:	11 96       	adiw	r26, 0x01	; 1
    400c:	9c 93       	st	X, r25
    400e:	8e 93       	st	-X, r24
    4010:	82 81       	ldd	r24, Z+2	; 0x02
    4012:	93 81       	ldd	r25, Z+3	; 0x03
    4014:	13 96       	adiw	r26, 0x03	; 3
    4016:	9c 93       	st	X, r25
    4018:	8e 93       	st	-X, r24
    401a:	12 97       	sbiw	r26, 0x02	; 2
    401c:	e0 e0       	ldi	r30, 0x00	; 0
    401e:	f0 e0       	ldi	r31, 0x00	; 0
    4020:	d8 01       	movw	r26, r16
    4022:	12 96       	adiw	r26, 0x02	; 2
    4024:	8d 91       	ld	r24, X+
    4026:	9c 91       	ld	r25, X
    4028:	13 97       	sbiw	r26, 0x03	; 3
    402a:	00 97       	sbiw	r24, 0x00	; 0
    402c:	19 f0       	breq	.+6      	; 0x4034 <free+0xf0>
    402e:	f8 01       	movw	r30, r16
    4030:	8c 01       	movw	r16, r24
    4032:	f6 cf       	rjmp	.-20     	; 0x4020 <free+0xdc>
    4034:	8d 91       	ld	r24, X+
    4036:	9c 91       	ld	r25, X
    4038:	98 01       	movw	r18, r16
    403a:	2e 5f       	subi	r18, 0xFE	; 254
    403c:	3f 4f       	sbci	r19, 0xFF	; 255
    403e:	82 0f       	add	r24, r18
    4040:	93 1f       	adc	r25, r19
    4042:	20 91 7f 02 	lds	r18, 0x027F
    4046:	30 91 80 02 	lds	r19, 0x0280
    404a:	28 17       	cp	r18, r24
    404c:	39 07       	cpc	r19, r25
    404e:	69 f4       	brne	.+26     	; 0x406a <free+0x126>
    4050:	30 97       	sbiw	r30, 0x00	; 0
    4052:	29 f4       	brne	.+10     	; 0x405e <free+0x11a>
    4054:	10 92 82 02 	sts	0x0282, r1
    4058:	10 92 81 02 	sts	0x0281, r1
    405c:	02 c0       	rjmp	.+4      	; 0x4062 <free+0x11e>
    405e:	13 82       	std	Z+3, r1	; 0x03
    4060:	12 82       	std	Z+2, r1	; 0x02
    4062:	10 93 80 02 	sts	0x0280, r17
    4066:	00 93 7f 02 	sts	0x027F, r16
    406a:	df 91       	pop	r29
    406c:	cf 91       	pop	r28
    406e:	1f 91       	pop	r17
    4070:	0f 91       	pop	r16
    4072:	08 95       	ret

00004074 <memset>:
    4074:	dc 01       	movw	r26, r24
    4076:	01 c0       	rjmp	.+2      	; 0x407a <memset+0x6>
    4078:	6d 93       	st	X+, r22
    407a:	41 50       	subi	r20, 0x01	; 1
    407c:	50 40       	sbci	r21, 0x00	; 0
    407e:	e0 f7       	brcc	.-8      	; 0x4078 <memset+0x4>
    4080:	08 95       	ret

00004082 <_exit>:
    4082:	f8 94       	cli

00004084 <__stop_program>:
    4084:	ff cf       	rjmp	.-2      	; 0x4084 <__stop_program>
